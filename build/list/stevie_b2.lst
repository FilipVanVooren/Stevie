XAS99 CROSS-ASSEMBLER   VERSION 3.4.0
     **** ****     > stevie_b2.asm
0001               ********************************************************************************
0002               *   Stevie
0003               *   Modern Programming Editor for the Texas Instruments TI-99/4a Home Computer.
0004               *   Copyright (C) 2018-2023 / Filip van Vooren
0005               *
0006               *   This program is free software: you can redistribute it and/or modify
0007               *   it under the terms of the GNU General Public License as published by
0008               *   the Free Software Foundation, either version 3 of the License, or
0009               *   (at your option) any later version.
0010               *
0011               *   This program is distributed in the hope that it will be useful,
0012               *   but WITHOUT ANY WARRANTY; without even the implied warranty of
0013               *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
0014               *   GNU General Public License for more details.
0015               *
0016               *   You should have received a copy of the GNU General Public License
0017               *   along with this program.  If not, see <https://www.gnu.org/licenses/>.
0018               ********************************************************************************
0019               * File: stevie_b2.asm
0020               *
0021               * Bank 2 "Jacky"
0022               * File load/save operations
0023               ********************************************************************************
0024                       copy  "buildinfo.asm"       ; "build/.buildinfo/buildinfo.asm"
     **** ****     > buildinfo.asm
0001               ***************************************************************
0002               * BUILD: 230123-2036530
0003               ***************************************************************
                   < stevie_b2.asm
0025                       copy  "rom.build.asm"       ; Cartridge build options
     **** ****     > rom.build.asm
0001               * FILE......: rom.build.asm
0002               * Purpose...: Cartridge build options
0003               
0004               *--------------------------------------------------------------
0005               * Skip unused spectra2 code modules for reduced code size
0006               *--------------------------------------------------------------
0007      0001     skip_rom_bankswitch       equ  1       ; Skip support for ROM bankswitching
0008      0001     skip_grom_cpu_copy        equ  1       ; Skip GROM to CPU copy functions
0009      0001     skip_grom_vram_copy       equ  1       ; Skip GROM to VDP vram copy functions
0010      0001     skip_vdp_vchar            equ  1       ; Skip vchar, xvchar
0011      0001     skip_vdp_boxes            equ  1       ; Skip filbox, putbox
0012      0001     skip_vdp_bitmap           equ  1       ; Skip bitmap functions
0013      0001     skip_vdp_viewport         equ  1       ; Skip viewport functions
0014      0001     skip_cpu_rle_compress     equ  1       ; Skip CPU RLE compression
0015      0001     skip_cpu_rle_decompress   equ  1       ; Skip CPU RLE decompression
0016      0001     skip_vdp_rle_decompress   equ  1       ; Skip VDP RLE decompression
0017      0001     skip_vdp_px2yx_calc       equ  1       ; Skip pixel to YX calculation
0018      0001     skip_speech_detection     equ  1       ; Skip speech synthesizer detection
0019      0001     skip_speech_player        equ  1       ; Skip inclusion of speech player code
0020      0001     skip_virtual_keyboard     equ  1       ; Skip virtual keyboard scan
0021      0001     skip_random_generator     equ  1       ; Skip random functions
0022      0001     skip_cpu_crc16            equ  1       ; Skip CPU memory CRC-16 calculation
0023      0001     skip_sams_layout          equ  1       ; Skip SAMS memory layout routine
0024                                                      ; \
0025                                                      ; | The SAMS support module needs to be
0026                                                      ; | embedded in the cartridge space, so
0027                                                      ; / do not load it here.
0028               
0029               *--------------------------------------------------------------
0030               * SPECTRA2 / Stevie startup options
0031               *--------------------------------------------------------------
0032      0001     startup_keep_vdpmemory    equ  1       ; Do not clear VDP vram on start
0033      6038     kickstart.resume          equ  >6038   ; Resume Stevie session
0034      6040     kickstart.code1           equ  >6040   ; Uniform aorg entry addr accross banks
0035      6046     kickstart.code2           equ  >6046   ; Uniform aorg entry addr accross banks
0036      0001     rom0_kscan_on             equ  1       ; Use KSCAN in console ROM#0
0037      0000     debug                     equ  0       ; Turn on debugging mode
0038               
0039               
0040               *--------------------------------------------------------------
0041               * ROM layout
0042               *--------------------------------------------------------------
0043      7F50     bankx.crash.showbank      equ  >7f50   ; Show ROM bank in CPU crash screen
0044      7F60     bankx.vdptab              equ  >7f60   ; VDP mode tables
0045      7FC0     bankx.vectab              equ  >7fc0   ; Start address of vector table
0046      0000     device.fg99.mode.adv      equ  0       ; FG99 advanced mode off
                   < stevie_b2.asm
0026                       copy  "rom.order.asm"       ; ROM bank order "non-inverted"
     **** ****     > rom.order.asm
0001               * FILE......: rom.order.asm
0002               * Purpose...: Equates with CPU write addresses for switching banks
0003               
0004               *--------------------------------------------------------------
0005               * ROM 8K/4K banks. Bank order (non-inverted)
0006               *--------------------------------------------------------------
0007      6000     bank0.rom                 equ  >6000   ; Jill
0008      6002     bank1.rom                 equ  >6002   ; James
0009      6004     bank2.rom                 equ  >6004   ; Jacky
0010      6006     bank3.rom                 equ  >6006   ; John
0011      6008     bank4.rom                 equ  >6008   ; Janine
0012      600A     bank5.rom                 equ  >600a   ; Jumbo
0013      600C     bank6.rom                 equ  >600c   ; Jenifer
0014      600E     bank7.rom                 equ  >600e   ; Jonas
0015               *--------------------------------------------------------------
0016               * RAM 4K banks (Only valid in advanced mode FG99)
0017               *--------------------------------------------------------------
0018      6800     bank0.ram                 equ  >6800   ; Jill
0019      6802     bank1.ram                 equ  >6802   ; James
0020      6804     bank2.ram                 equ  >6804   ; Jacky
0021      6806     bank3.ram                 equ  >6806   ; John
0022      6808     bank4.ram                 equ  >6808   ; Janine
0023      680A     bank5.ram                 equ  >680a   ; Jumbo
0024      680C     bank6.ram                 equ  >680c   ; Jenifer
0025      680E     bank7.ram                 equ  >680e   ; Jonas
                   < stevie_b2.asm
0027                       copy  "equates.vdp.asm"     ; VDP configuration (F18a/9938/...)
     **** ****     > equates.vdp.asm
0001               * FILE......: equates.vdp.asm
0002               * Purpose...: VDP configuration (F18a, 9938, ...)
0003               
0004               ***************************** F18a 24x80 ***************************************
0008               
0009               ***************************** F18a 24x80 ***************************************
0013               
0014               ***************************** F18a 30x80 ***************************************
0018               
0019               ***************************** F18a 30x80 ***************************************
0023               
0024               ***************************** F18a 60x80 ***************************************
0026                   copy 'equates.f18a.6081.asm'        ; Character cursor
     **** ****     > equates.f18a.6081.asm
0001               * FILE......: equates.f18a.6080.asm
0002               * Purpose...: F18a 60x80 mode (js99er emulation only)
0003               
0005               
0006               *===============================================================================
0007               * VDP RAM F18a (0000-47ff)
0008               *
0009               *     Mem range   Bytes    Hex    Purpose
0010               *     =========   =====   =====   =================================
0011               *     0000-12bf    4800   >12c0   PNT: Pattern Name Table
0012               
0013               *     0fc0-0fff       0           PCT: Color Table (not used in 80 cols mode)
0014               *     0fc0-0fff       0           SAT: Sprite Attribute Table
0015               *                                      (not used in Stevie f18a 60 rows mode)
0016               *
0017               *     1800-2abf    4800   >12c0   TAT: Tile Attribute Table
0018               *                                      (Position based colors F18a, 80 colums)
0019               *
0020               *     3000-33ff    1024   >0400   PDT: Pattern Descriptor Table
0021               *
0022               *     3800            0           SPT: Sprite Pattern Table
0023               *                                      (not used in Stevie f18a 60 rows mode)
0024               *
0025               *     3800-384f      80   >0050   FIO: File record buffer (DIS/VAR 80)
0026               *     3900-39ff     255   >0100   FIO: PAB buffer for file descriptor/name
0027               *===============================================================================
0028               
0029               *--------------------------------------------------------------
0030               * Video mode configuration (stevie) - Graphics mode 30x80
0031               *--------------------------------------------------------------
0032      0050     vdp.fb.toprow.sit         equ  >0050   ; VDP SIT address of 1st Framebuffer row
0033      1850     vdp.fb.toprow.tat         equ  >1850   ; VDP TAT address of 1st Framebuffer row
0034      0000     vdp.sit.base              equ  >0000   ; VDP SIT base address
0035      12C0     vdp.sit.size              equ  60*80   ; VDP SIT size 80 columns, 60 rows
0036      1800     vdp.tat.base              equ  >1800   ; VDP TAT base address
0037      12C0     vdp.tat.size              equ  60*80   ; VDP TAT size 80 columns, 60 rows
0038      3000     vdp.pdt.base              equ  >3000   ; VDP PDT base address
0039               
0040               *--------------------------------------------------------------
0041               * Video mode configuration (stevie)
0042               *--------------------------------------------------------------
0043      003B     pane.botrow               equ  59      ; Bottom row on screen
0044      0050     colrow                    equ  80      ; Columns per row
0045      3800     fh.vrecbuf                equ  >3800   ; VDP address record buffer
0046      3900     fh.vpab                   equ  >3900   ; VDP address PAB
0047      0001     device.f18a               equ  1       ; F18a on
0048      0000     spritecursor              equ  0       ; Use sprites for cursor and ruler
0049               
0050               *--------------------------------------------------------------
0051               * Video mode configuration (spectra2)
0052               *--------------------------------------------------------------
0053      00F4     spfclr  equ   >f4                   ; Foreground/Background color for font.
0054      0004     spfbck  equ   >04                   ; Screen background color.
0055      7F6A     spvmod  equ   bankx.vdptab+10       ; Video mode.   See VIDTAB for details.
0056      0000     spfont  equ   0                     ; Font to load. See LDFONT for details.
0057      0050     colrow  equ   80                    ; Columns per row
0058      0FC0     pctadr  equ   >0fc0                 ; VDP color table base, not used in 80 cols
0059      3100     fntadr  equ   >3100                 ; VDP font start address (in PDT range)
0060      3A00     sprsat  equ   >3a00                 ; VDP sprite attribute table
0061      3800     sprpdt  equ   >3800                 ; VDP sprite pattern table
0062               
                   < equates.vdp.asm
                   < stevie_b2.asm
0028                       copy  "equates.asm"         ; Stevie main configuration
     **** ****     > equates.asm
0001               * FILE......: equates.asm
0002               * Purpose...: The main equates file for Stevie editor
0003               
0004               
0005               *===============================================================================
0006               * Memory map
0007               * ==========
0008               *
0009               * CARTRIDGE SPACE (6000-7fff)
0010               *
0011               *     Mem range   Bytes    BANK   Purpose
0012               *     =========   =====    ====   ==================================
0013               *     6000-633f               0   Cartridge header
0014               *     6040-7fff               0   SP2 library + Stevie library
0015               *                                 relocated to RAM space
0016               *     ..............................................................
0017               *     6000-633f               1   Cartridge header
0018               *     6040-7fbf               1   Stevie program code
0019               *     7fc0-7fff      64       1   Vector table (32 vectors)
0020               *     ..............................................................
0021               *     6000-633f               2   Cartridge header
0022               *     6040-7fbf               2   Stevie program code
0023               *     7fc0-7fff      64       2   Vector table (32 vectors)
0024               *     ..............................................................
0025               *     6000-633f               3   Cartridge header
0026               *     6040-7fbf               3   Stevie program code
0027               *     7fc0-7fff      64       3   Vector table (32 vectors)
0028               *     ..............................................................
0029               *     6000-633f               4   Cartridge header
0030               *     6040-7fbf               4   Stevie program code
0031               *     7fc0-7fff      64       4   Vector table (32 vectors)
0032               *     ..............................................................
0033               *     6000-633f               5   Cartridge header
0034               *     6040-7fbf               5   Stevie program code
0035               *     7fc0-7fff      64       5   Vector table (32 vectors)
0036               *     ..............................................................
0037               *     6000-633f               6   Cartridge header
0038               *     6040-7fbf               6   Stevie program code
0039               *     7fc0-7fff      64       6   Vector table (32 vectors)
0040               *     ..............................................................
0041               *     6000-633f               7   Cartridge header
0042               *     6040-7fbf               7   SP2 library in cartridge space
0043               *     7fc0-7fff      64       7   Vector table (32 vectors)
0044               *===============================================================================
0045               
0046               
0047               
0048               *--------------------------------------------------------------
0049               * Stevie Dialog / Pane specific equates
0050               *--------------------------------------------------------------
0051      0000     pane.focus.fb             equ  0       ; Editor pane has focus
0052      0001     pane.focus.cmdb           equ  1       ; Command buffer pane has focus
0053               ;-----------------------------------------------------------------
0054               ;   Dialog ID's
0055               ;-----------------------------------------------------------------
0056      000A     id.dialog.load            equ  10      ; "Load file"
0057      000B     id.dialog.save            equ  11      ; "Save file"
0058      000C     id.dialog.saveblock       equ  12      ; "Save block to file"
0059      000D     id.dialog.insert          equ  13      ; "Insert file"
0060      000E     id.dialog.append          equ  14      ; "Append file"
0061      000F     id.dialog.print           equ  15      ; "Print file"
0062      0010     id.dialog.printblock      equ  16      ; "Print block"
0063      0011     id.dialog.clipdev         equ  17      ; "Configure clipboard"
0064      0013     id.dialog.goto            equ  19      ; "Goto"
0065               ;-----------------------------------------------------------------
0066               ;   Dialog ID's >= 100 indicate that command prompt should be
0067               ;   hidden and no characters added to CMDB keyboard buffer.
0068               ;-----------------------------------------------------------------
0069      0064     id.dialog.menu            equ  100     ; "Main Menu"
0070      0065     id.dialog.unsaved         equ  101     ; "Unsaved changes"
0071      0066     id.dialog.block           equ  102     ; "Block move/copy/delete/print/..."
0072      0067     id.dialog.clipboard       equ  103     ; "Copy clipboard to line ..."
0073      0068     id.dialog.help            equ  104     ; "About"
0074      0069     id.dialog.file            equ  105     ; "File"
0075      006A     id.dialog.cartridge       equ  106     ; "Cartridge"
0076      006B     id.dialog.basic           equ  107     ; "TI Basic"
0077      006C     id.dialog.config          equ  108     ; "Configure"
0078      006D     id.dialog.editor          equ  109     ; "Configure editor"
0079      006E     id.dialog.font            equ  110     ; "Configure font"
0080      006F     id.dialog.shortcuts       equ  111     ; "Shortcuts"
0081               *--------------------------------------------------------------
0082               * Suffix characters for clipboards
0083               *--------------------------------------------------------------
0084      3100     clip1                     equ  >3100   ; '1'
0085      3200     clip2                     equ  >3200   ; '2'
0086      3300     clip3                     equ  >3300   ; '3'
0087      3400     clip4                     equ  >3400   ; '4'
0088      3500     clip5                     equ  >3500   ; '5'
0089               *--------------------------------------------------------------
0090               * Keyboard flags in Stevie
0091               *--------------------------------------------------------------
0092      0001     kbf.kbclear               equ  >0001   ;  Keyboard buffer cleared / @w$0001
0093               
0094               *--------------------------------------------------------------
0095               * File work mode
0096               *--------------------------------------------------------------
0097      0001     id.file.loadfile          equ  1       ; Load file
0098      0002     id.file.insertfile        equ  2       ; Insert file
0099      0003     id.file.appendfile        equ  3       ; Append file
0100      0004     id.file.savefile          equ  4       ; Save file
0101      0005     id.file.saveblock         equ  5       ; Save block to file
0102      0006     id.file.clipblock         equ  6       ; Save block to clipboard
0103      0007     id.file.printfile         equ  7       ; Print file
0104      0008     id.file.printblock        equ  8       ; Print block
0105               *--------------------------------------------------------------
0106               * Stevie core 1 RAM                   @>a000-a0ff   (256 bytes)
0107               *--------------------------------------------------------------
0108      A000     core1.top         equ  >a000           ; Structure begin
0109      A000     magic.str.w1      equ  core1.top + 0   ; Magic string word 1
0110      A002     magic.str.w2      equ  core1.top + 2   ; Magic string word 2
0111      A004     magic.str.w3      equ  core1.top + 4   ; Magic string word 3
0112      A006     parm1             equ  core1.top + 6   ; Function parameter 1
0113      A008     parm2             equ  core1.top + 8   ; Function parameter 2
0114      A00A     parm3             equ  core1.top + 10  ; Function parameter 3
0115      A00C     parm4             equ  core1.top + 12  ; Function parameter 4
0116      A00E     parm5             equ  core1.top + 14  ; Function parameter 5
0117      A010     parm6             equ  core1.top + 16  ; Function parameter 6
0118      A012     parm7             equ  core1.top + 18  ; Function parameter 7
0119      A014     parm8             equ  core1.top + 20  ; Function parameter 8
0120      A016     parm9             equ  core1.top + 22  ; Function parameter 9
0121      A018     outparm1          equ  core1.top + 24  ; Function output parameter 1
0122      A01A     outparm2          equ  core1.top + 26  ; Function output parameter 2
0123      A01C     outparm3          equ  core1.top + 28  ; Function output parameter 3
0124      A01E     outparm4          equ  core1.top + 30  ; Function output parameter 4
0125      A020     outparm5          equ  core1.top + 32  ; Function output parameter 5
0126      A022     outparm6          equ  core1.top + 34  ; Function output parameter 6
0127      A024     outparm7          equ  core1.top + 36  ; Function output parameter 7
0128      A026     kbflags           equ  core1.top + 38  ; Keyboard control flags
0129      A028     keycode1          equ  core1.top + 40  ; Current key scanned
0130      A02A     keycode2          equ  core1.top + 42  ; Previous key scanned
0131      A02C     uint16.unpacked   equ  core1.top + 44  ; Unpacked uint16 (len-prefixed string)
0132      A032     uint16.packed     equ  core1.top + 50  ; Packed uint16 (2 bytes)
0133      A034     trmpvector        equ  core1.top + 52  ; Vector trampoline (if p1|tmp1 = >ffff)
0134      A036     core1.free1       equ  core1.top + 54  ; 54-85 **free**
0135      A056     ramsat            equ  core1.top + 86  ; Sprite Attr. Table in RAM (14 bytes)
0136      A064     timers            equ  core1.top + 100 ; Timers (80 bytes)
0137                                 ;--------------------------------------------
0138                                 ; TI Basic related
0139                                 ;--------------------------------------------
0140      A0B4     tib.session       equ  core1.top + 180 ; Current TI-Basic session (1-5)
0141      A0B6     tib.status1       equ  core1.top + 182 ; Status flags TI Basic session 1
0142      A0B8     tib.status2       equ  core1.top + 184 ; Status flags TI Basic session 2
0143      A0BA     tib.status3       equ  core1.top + 186 ; Status flags TI Basic session 3
0144      A0BC     tib.status4       equ  core1.top + 188 ; Status flags TI Basic session 4
0145      A0BE     tib.status5       equ  core1.top + 190 ; Status flags TI Basic session 5
0146      A0C0     tib.autounpk      equ  core1.top + 192 ; TI-Basic AutoUnpack (uncrunch)
0147      A0C2     tib.stab.ptr      equ  core1.top + 194 ; Pointer to TI-Basic SAMS page table
0148      A0C4     tib.scrpad.ptr    equ  core1.top + 196 ; Pointer to TI-Basic scratchpad in SAMS
0149      A0C6     tib.lnt.top.ptr   equ  core1.top + 198 ; Pointer to top of line number table
0150      A0C8     tib.lnt.bot.ptr   equ  core1.top + 200 ; Pointer to bottom of line number table
0151      A0CA     tib.symt.top.ptr  equ  core1.top + 202 ; Pointer to top of symbol table
0152      A0CC     tib.symt.bot.ptr  equ  core1.top + 204 ; Pointer to bottom of symbol table
0153      A0CE     tib.strs.top.ptr  equ  core1.top + 206 ; Pointer to top of string space
0154      A0D0     tib.strs.bot.ptr  equ  core1.top + 208 ; Pointer to bottom of string space
0155      A0D2     tib.lines         equ  core1.top + 210 ; Number of lines in TI Basic program
0156      A0D4     core1.free2       equ  core1.top + 212 ; **free* up to 233
0157      A0EA     tib.samstab.ptr   equ  core1.top + 234 ; Pointer to active SAMS mem layout table
0158      A0EC     tib.var1          equ  core1.top + 236 ; Temp variable 1
0159      A0EE     tib.var2          equ  core1.top + 238 ; Temp variable 2
0160      A0F0     tib.var3          equ  core1.top + 240 ; Temp variable 3
0161      A0F2     tib.var4          equ  core1.top + 242 ; Temp variable 4
0162      A0F4     tib.var5          equ  core1.top + 244 ; Temp variable 5
0163      A0F6     tib.var6          equ  core1.top + 246 ; Temp variable 6
0164      A0F8     tib.var7          equ  core1.top + 248 ; Temp variable 7
0165      A0FA     tib.var8          equ  core1.top + 250 ; Temp variable 8
0166      A0FC     tib.var9          equ  core1.top + 252 ; Temp variable 9
0167      A0FE     tib.var10         equ  core1.top + 254 ; Temp variable 10
0168      A100     core1.free        equ  core1.top + 256 ; End of structure
0169               *--------------------------------------------------------------
0170               * Stevie core 2 RAM                   @>a100-a1ff   (256 bytes)
0171               *--------------------------------------------------------------
0172      A100     core2.top         equ  >a100           ; Structure begin
0173      A100     rambuf            equ  core2.top       ; RAM workbuffer
0174      A200     core2.free        equ  core2.top + 256 ; End of structure
0175               *--------------------------------------------------------------
0176               * Stevie Editor shared structures     @>a200-a2ff   (256 bytes)
0177               *--------------------------------------------------------------
0178      A200     tv.top            equ  >a200           ; Structure begin
0179      A200     tv.sams.2000      equ  tv.top + 0      ; SAMS page in window >2000-2fff
0180      A202     tv.sams.3000      equ  tv.top + 2      ; SAMS page in window >3000-3fff
0181      A204     tv.sams.a000      equ  tv.top + 4      ; SAMS page in window >a000-afff
0182      A206     tv.sams.b000      equ  tv.top + 6      ; SAMS page in window >b000-bfff
0183      A208     tv.sams.c000      equ  tv.top + 8      ; SAMS page in window >c000-cfff
0184      A20A     tv.sams.d000      equ  tv.top + 10     ; SAMS page in window >d000-dfff
0185      A20C     tv.sams.e000      equ  tv.top + 12     ; SAMS page in window >e000-efff
0186      A20E     tv.sams.f000      equ  tv.top + 14     ; SAMS page in window >f000-ffff
0187      A210     tv.ruler.visible  equ  tv.top + 16     ; Show ruler with tab positions
0188      A212     tv.colorscheme    equ  tv.top + 18     ; Current color scheme (0-xx)
0189      A214     tv.curshape       equ  tv.top + 20     ; Cursor shape and color (sprite)
0190      A216     tv.curcolor       equ  tv.top + 22     ; Cursor color1 + color2 (color scheme)
0191      A218     tv.color          equ  tv.top + 24     ; FG/BG-color framebuffer + status lines
0192      A21A     tv.markcolor      equ  tv.top + 26     ; FG/BG-color marked lines in framebuffer
0193      A21C     tv.busycolor      equ  tv.top + 28     ; FG/BG-color bottom line when busy
0194      A21E     tv.rulercolor     equ  tv.top + 30     ; FG/BG-color ruler line
0195      A220     tv.cmdb.hcolor    equ  tv.top + 32     ; FG/BG-color command buffer header line
0196      A222     tv.font.ptr       equ  tv.top + 34     ; Pointer to font (in ROM bank 6 or RAM)
0197      A224     tv.pane.focus     equ  tv.top + 36     ; Identify pane that has focus
0198      A226     tv.task.oneshot   equ  tv.top + 38     ; Pointer to one-shot routine
0199      A228     tv.fj.stackpnt    equ  tv.top + 40     ; Pointer to farjump return stack
0200      A22A     tv.error.visible  equ  tv.top + 42     ; Error pane visible
0201      A22C     tv.error.rows     equ  tv.top + 44     ; Number of rows in error pane
0202      A22E     tv.sp2.conf       equ  tv.top + 46     ; Backup of SP2 config register
0203      A230     tv.sp2.stack      equ  tv.top + 48     ; Backup of SP2 stack register
0204      A232     tv.fg99.img.ptr   equ  tv.top + 50     ; Pointer to Final GROM cartridge to load
0205      A234     tv.error.msg      equ  tv.top + 52     ; Error message (max. 160 characters)
0206      A2D4     tv.free           equ  tv.top + 212    ; End of structure
0207               *--------------------------------------------------------------
0208               * Frame buffer structure              @>a300-a3ff   (256 bytes)
0209               *--------------------------------------------------------------
0210      A300     fb.struct         equ  >a300           ; Structure begin
0211      A300     fb.top.ptr        equ  fb.struct       ; Pointer to frame buffer
0212      A302     fb.current        equ  fb.struct + 2   ; Pointer to current pos. in frame buffer
0213      A304     fb.topline        equ  fb.struct + 4   ; Top line in frame buffer (matching
0214                                                      ; line X in editor buffer).
0215      A306     fb.row            equ  fb.struct + 6   ; Current row in frame buffer
0216                                                      ; (offset 0 .. @fb.scrrows)
0217      A308     fb.row.length     equ  fb.struct + 8   ; Length of current row in frame buffer
0218      A30A     fb.row.dirty      equ  fb.struct + 10  ; Current row dirty flag in frame buffer
0219      A30C     fb.column         equ  fb.struct + 12  ; Current column (0-79) in frame buffer
0220      A30E     fb.colsline       equ  fb.struct + 14  ; Columns per line in frame buffer
0221      A310     fb.vwco           equ  fb.struct + 16  ; View window column offset (0-xxx)
0222      A312     fb.colorize       equ  fb.struct + 18  ; M1/M2 colorize refresh required
0223      A314     fb.curtoggle      equ  fb.struct + 20  ; Cursor shape toggle
0224      A316     fb.yxsave         equ  fb.struct + 22  ; Copy of cursor YX position
0225      A318     fb.dirty          equ  fb.struct + 24  ; Frame buffer dirty flag
0226      A31A     fb.status.dirty   equ  fb.struct + 26  ; Status line(s) dirty flag
0227      A31C     fb.scrrows        equ  fb.struct + 28  ; Rows on physical screen for framebuffer
0228      A31E     fb.scrrows.max    equ  fb.struct + 30  ; Max # of rows on physical screen for fb
0229      A320     fb.ruler.sit      equ  fb.struct + 32  ; 80 char ruler  (no length-prefix!)
0230      A370     fb.ruler.tat      equ  fb.struct + 112 ; 80 char colors (no length-prefix!)
0231      A3C0     fb.free           equ  fb.struct + 192 ; End of structure
0232               *--------------------------------------------------------------
0233               * File handle structure               @>a400-a4ff   (256 bytes)
0234               *--------------------------------------------------------------
0235      A400     fh.struct         equ  >a400           ; stevie file handling structures
0236               ;*******************************************************************************
0237               ; ATTENTION: dsrlnk vars must form a continuous memory block & keep their order!
0238               ;*******************************************************************************
0239      A400     dsrlnk.dsrlws     equ  fh.struct       ; Address of dsrlnk workspace 32 bytes
0240      A420     dsrlnk.namsto     equ  fh.struct + 32  ; 8-byte RAM buf for holding device name
0241      A428     dsrlnk.sav8a      equ  fh.struct + 40  ; Save parm (8 or A) after "blwp @dsrlnk"
0242      A42A     dsrlnk.savcru     equ  fh.struct + 42  ; CRU address of device in prev. DSR call
0243      A42C     dsrlnk.savent     equ  fh.struct + 44  ; DSR entry addr of prev. DSR call
0244      A42E     dsrlnk.savpab     equ  fh.struct + 46  ; Pointer to Device or Subprogram in PAB
0245      A430     dsrlnk.savver     equ  fh.struct + 48  ; Version used in prev. DSR call
0246      A432     dsrlnk.savlen     equ  fh.struct + 50  ; Length of DSR name of prev. DSR call
0247      A434     dsrlnk.flgptr     equ  fh.struct + 52  ; Pointer to VDP PAB byte 1 (flag byte)
0248      A436     fh.pab.ptr        equ  fh.struct + 54  ; Pointer to VDP PAB, for level 3 FIO
0249      A438     fh.pabstat        equ  fh.struct + 56  ; Copy of VDP PAB status byte
0250      A43A     fh.ioresult       equ  fh.struct + 58  ; DSRLNK IO-status after file operation
0251      A43C     fh.records        equ  fh.struct + 60  ; File records counter
0252      A43E     fh.reclen         equ  fh.struct + 62  ; Current record length
0253      A440     fh.kilobytes      equ  fh.struct + 64  ; Kilobytes processed (read/written)
0254      A442     fh.counter        equ  fh.struct + 66  ; Counter used in stevie file operations
0255      A444     fh.fname.ptr      equ  fh.struct + 68  ; Pointer to device and filename
0256      A446     fh.sams.page      equ  fh.struct + 70  ; Current SAMS page during file operation
0257      A448     fh.sams.hipage    equ  fh.struct + 72  ; Highest SAMS page in file operation
0258      A44A     fh.fopmode        equ  fh.struct + 74  ; FOP mode (File Operation Mode)
0259      A44C     fh.filetype       equ  fh.struct + 76  ; Value for filetype/mode (PAB byte 1)
0260      A44E     fh.offsetopcode   equ  fh.struct + 78  ; Set to >40 for skipping VDP buffer
0261      A450     fh.callback1      equ  fh.struct + 80  ; Pointer to callback function 1
0262      A452     fh.callback2      equ  fh.struct + 82  ; Pointer to callback function 2
0263      A454     fh.callback3      equ  fh.struct + 84  ; Pointer to callback function 3
0264      A456     fh.callback4      equ  fh.struct + 86  ; Pointer to callback function 4
0265      A458     fh.callback5      equ  fh.struct + 88  ; Pointer to callback function 5
0266      A45A     fh.workmode       equ  fh.struct + 90  ; Working mode (used in callbacks)
0267      A45C     fh.kilobytes.prev equ  fh.struct + 92  ; Kilobytes processed (previous)
0268      A45E     fh.line           equ  fh.struct + 94  ; Editor buffer line currently processing
0269      A460     fh.temp1          equ  fh.struct + 96  ; Temporary variable 1
0270      A462     fh.temp2          equ  fh.struct + 98  ; Temporary variable 2
0271      A464     fh.temp3          equ  fh.struct +100  ; Temporary variable 3
0272      A466     fh.pabtpl.ptr     equ  fh.struct +102  ; Pointer to PAB template in ROM/RAM
0273      A468     fh.membuffer      equ  fh.struct +104  ; 80 bytes file memory buffer
0274      A4B8     fh.free           equ  fh.struct +184  ; End of structure
0275               *--------------------------------------------------------------
0276               * File handle structure for generic   @>a400-a4ff   (256 bytes)
0277               * Overload file handle structure
0278               *--------------------------------------------------------------
0279      A45A     fh.ftype.init     equ  fh.struct + 90  ; File type/mode (becomes fh.filetype)
0280      A45C     fh.ram.ptr        equ  fh.struct + 92  ; RAM destination address
0281               
0282               *--------------------------------------------------------------
0283               * Editor buffer structure             @>a500-a5ff   (256 bytes)
0284               *--------------------------------------------------------------
0285      A500     edb.struct        equ  >a500           ; Begin structure
0286      A500     edb.top.ptr       equ  edb.struct      ; Pointer to editor buffer
0287      A502     edb.index.ptr     equ  edb.struct + 2  ; Pointer to index
0288      A504     edb.lines         equ  edb.struct + 4  ; Total lines in editor buffer - 1
0289      A506     edb.dirty         equ  edb.struct + 6  ; Editor buffer dirty (Text changed!)
0290      A508     edb.next_free.ptr equ  edb.struct + 8  ; Pointer to next free line
0291      A50A     edb.insmode       equ  edb.struct + 10 ; Insert mode (>ffff = insert)
0292      A50C     edb.autoinsert    equ  edb.struct + 12 ; Auto-insert on ENTER flag (>ffff = on)
0293      A50E     edb.block.m1      equ  edb.struct + 14 ; Block start line marker (>ffff = unset)
0294      A510     edb.block.m2      equ  edb.struct + 16 ; Block end line marker   (>ffff = unset)
0295      A512     edb.block.var     equ  edb.struct + 18 ; Local var used in block operation
0296      A514     edb.filename.ptr  equ  edb.struct + 20 ; Pointer to length-prefixed string
0297                                                      ; with current filename.
0298      A516     edb.filetype.ptr  equ  edb.struct + 22 ; Pointer to length-prefixed string
0299                                                      ; with current file type.
0300      A518     edb.sams.page     equ  edb.struct + 24 ; Current SAMS page
0301      A51A     edb.sams.hipage   equ  edb.struct + 26 ; Highest SAMS page in use
0302               
0303      A51C     edb.filename      equ  edb.struct + 28 ; 80 characters inline buffer reserved
0304                                                      ; for filename, but not always used.
0305      A56C     edb.free          equ  edb.struct + 108; End of structure
0306               *--------------------------------------------------------------
0307               * Index structure                     @>a600-a6ff   (256 bytes)
0308               *--------------------------------------------------------------
0309      A600     idx.struct        equ  >a600           ; stevie index structure
0310      A600     idx.sams.page     equ  idx.struct      ; Current SAMS page
0311      A602     idx.sams.lopage   equ  idx.struct + 2  ; Lowest SAMS page
0312      A604     idx.sams.hipage   equ  idx.struct + 4  ; Highest SAMS page
0313      A606     idx.free          equ  idx.struct + 6  ; End of structure
0314               *--------------------------------------------------------------
0315               * Command buffer structure            @>a700-a7ff   (256 bytes)
0316               *--------------------------------------------------------------
0317      A700     cmdb.struct       equ  >a700           ; Command Buffer structure
0318      A700     cmdb.top.ptr      equ  cmdb.struct     ; Pointer to command buffer (history)
0319      A702     cmdb.visible      equ  cmdb.struct + 2 ; Command buffer visible? (>ffff=visible)
0320      A704     cmdb.fb.yxsave    equ  cmdb.struct + 4 ; Copy of FB WYX when entering cmdb pane
0321      A706     cmdb.scrrows      equ  cmdb.struct + 6 ; Current size of CMDB pane (in rows)
0322      A708     cmdb.default      equ  cmdb.struct + 8 ; Default size of CMDB pane (in rows)
0323      A70A     cmdb.cursor       equ  cmdb.struct + 10; Screen YX of cursor in CMDB pane
0324      A70C     cmdb.yxsave       equ  cmdb.struct + 12; Copy of WYX
0325      A70E     cmdb.vdptop       equ  cmdb.struct + 14; VDP address CMDB pane header line (TAT)
0326      A710     cmdb.yxtop        equ  cmdb.struct + 16; YX position CMDB pane header line
0327      A712     cmdb.yxprompt     equ  cmdb.struct + 18; YX position of command buffer prompt
0328      A714     cmdb.column       equ  cmdb.struct + 20; Current column in command buffer pane
0329      A716     cmdb.length       equ  cmdb.struct + 22; Length of current row in CMDB
0330      A718     cmdb.lines        equ  cmdb.struct + 24; Total lines in CMDB
0331      A71A     cmdb.dirty        equ  cmdb.struct + 26; Command buffer dirty (Text changed!)
0332      A71C     cmdb.dialog       equ  cmdb.struct + 28; Dialog identifier
0333      A71E     cmdb.dialog.var   equ  cmdb.struct + 30; Dialog private variable or pointer
0334      A720     cmdb.panhead      equ  cmdb.struct + 32; Pointer to string pane header
0335      A722     cmdb.paninfo      equ  cmdb.struct + 34; Pointer to string pane info (1st line)
0336      A724     cmdb.panhint      equ  cmdb.struct + 36; Pointer to string pane hint (2nd line)
0337      A726     cmdb.panhint2     equ  cmdb.struct + 38; Pointer to string pane hint (extra)
0338      A728     cmdb.panmarkers   equ  cmdb.struct + 40; Pointer to key marker list  (3rd line)
0339      A72A     cmdb.pankeys      equ  cmdb.struct + 42; Pointer to string pane keys (stat line)
0340      A72C     cmdb.action.ptr   equ  cmdb.struct + 44; Pointer to function to execute
0341      A72E     cmdb.cmdall       equ  cmdb.struct + 46; Current command including length-byte
0342      A72E     cmdb.cmdlen       equ  cmdb.struct + 46; Length of current command (MSB byte!)
0343      A72F     cmdb.cmd          equ  cmdb.struct + 47; Current command (80 bytes max.)
0344      A780     cmdb.panhead.buf  equ  cmdb.struct +128; String buffer for pane header
0345      A7B2     cmdb.dflt.fname   equ  cmdb.struct +178; Default for filename
0346      A800     cmdb.free         equ  cmdb.struct +256; End of structure
0347               *--------------------------------------------------------------
0348               * Stevie value stack                  @>a800-a8ff   (256 bytes)
0349               *--------------------------------------------------------------
0350      A900     sp2.stktop        equ  >a900           ; \
0351                                                      ; | The stack grows from high memory
0352                                                      ; | towards low memory.
0353                                                      ; |
0354                                                      ; | Stack leaking is checked in SP2
0355                                                      ; | user hook "edkey.keyscan.hook"
0356                                                      ; /
0357               *--------------------------------------------------------------
0358               * Scratchpad memory work copy         @>ad00-aeff   (256 bytes)
0359               *--------------------------------------------------------------
0360      7E00     cpu.scrpad.src    equ  >7e00           ; \ Dump of OS monitor scratchpad
0361                                                      ; / stored in cartridge ROM bank7.asm
0362               
0363      F000     cpu.scrpad.tgt    equ  >f000           ; \ Fixed memory location used for
0364                                                      ; | scratchpad backup/restore routines.
0365                                                      ; /
0366               
0367      8300     cpu.scrpad1       equ  >8300           ; Stevie primary scratchpad
0368               
0369      AD00     cpu.scrpad2       equ  >ad00           ; Stevie secondary scratchpad, used when
0370                                                      ; calling TI Basic/External programs
0371               *--------------------------------------------------------------
0372               * Farjump return stack                @>af00-afff   (256 bytes)
0373               *--------------------------------------------------------------
0374      B000     fj.bottom         equ  >b000           ; Return stack for trampoline function
0375                                                      ; Grows downwards from high to low.
0376               *--------------------------------------------------------------
0377               * Index                               @>b000-bfff  (4096 bytes)
0378               *--------------------------------------------------------------
0379      B000     idx.top           equ  >b000           ; Top of index
0380      1000     idx.size          equ  4096            ; Index size
0381               *--------------------------------------------------------------
0382               * Editor buffer                       @>c000-cfff  (4096 bytes)
0383               *--------------------------------------------------------------
0384      C000     edb.top           equ  >c000           ; Editor buffer high memory
0385      1000     edb.size          equ  4096            ; Editor buffer size
0386               *--------------------------------------------------------------
0387               * Frame buffer & uncrunch area        @>d000-dcff  (3584 bytes)
0388               *--------------------------------------------------------------
0389      D000     fb.top            equ  >d000           ; Frame buffer (2400 char)
0390      0F00     fb.size           equ  80*48           ; Frame buffer size
0391      D960     fb.uncrunch.area  equ  >d960           ; \ Uncrunched TI Basic statement
0392                                                      ; / >d960->dcff
0393               *--------------------------------------------------------------
0394               * Defaults area                       @>de00-dfff  (3584 bytes)
0395               *--------------------------------------------------------------
0396      DE00     tv.printer.fname  equ  >de00           ; Default printer   (80 char)
0397      DE50     tv.clip.fname     equ  >de50           ; Default clipboard (80 char)
0398               *--------------------------------------------------------------
0399               * Command buffer history              @>e000-efff  (4096 bytes)
0400               *--------------------------------------------------------------
0401      E000     cmdb.top          equ  >e000           ; Top of command history buffer
0402      1000     cmdb.size         equ  4096            ; Command buffer size
0403               *--------------------------------------------------------------
0404               * Heap                                @>f000-ffff  (4096 bytes)
0405               *--------------------------------------------------------------
0406      F000     heap.top          equ  >f000           ; Top of heap
0407               
0408               
0409               *--------------------------------------------------------------
0410               * Stevie specific equates
0411               *--------------------------------------------------------------
0412      0000     fh.fopmode.none           equ  0       ; No file operation in progress
0413      0001     fh.fopmode.readfile       equ  1       ; Read file from disk to memory
0414      0002     fh.fopmode.writefile      equ  2       ; Save file from memory to disk
0415      0005     cmdb.rows                 equ  5       ; Number of rows in CMDB pane
0416      A028     rom0_kscan_out            equ  keycode1; Where to store value of key pressed
0417               
0418      9900     tv.colorize.reset         equ  >9900   ; Colorization off
0419      00FE     tv.1timeonly              equ  254     ; One-time only flag indicator
                   < stevie_b2.asm
0029                       copy  "equates.c99.asm"     ; Classic99 emulator configuration
     **** ****     > equates.c99.asm
0001               * FILE......: equates.c99.asm
0002               * Purpose...: Equates related to classic99
0003               
0004               ***************************************************************
0005               *                 Extra opcodes for classic99
0006               ********|*****|*********************|**************************
0007      0110     c99_norm      equ  >0110            ; CPU normal
0008      0111     c99_ovrd      equ  >0111            ; CPU overdrive
0009      0112     c99_smax      equ  >0112            ; System Maximum
0010      0113     c99_brk       equ  >0113            ; Breakpoint
0011      0114     c99_quit      equ  >0114            ; Quit emulator
0012      0120     c99_dbg_r0    equ  >0120            ; Debug printf r0
0013      0121     c99_dbg_r1    equ  >0121            ; Debug printf r1
0014      0122     c99_dbg_r2    equ  >0122            ; Debug printf r2
0015      0123     c99_dbg_r3    equ  >0123            ; Debug printf r3
0016      0124     c99_dbg_r4    equ  >0124            ; Debug printf r4
0017      0125     c99_dbg_r5    equ  >0125            ; Debug printf r5
0018      0126     c99_dbg_r6    equ  >0126            ; Debug printf r6
0019      0127     c99_dbg_r7    equ  >0127            ; Debug printf r7
0020      0128     c99_dbg_r8    equ  >0128            ; Debug printf r8
0021      0199     c99_dbg_r9    equ  >0199            ; Debug printf r9
0022      012A     c99_dbg_ra    equ  >012a            ; Debug printf ra
0023      012B     c99_dbg_rb    equ  >012b            ; Debug printf rb
0024      012C     c99_dbg_rc    equ  >012c            ; Debug printf rc
0025      012D     c99_dbg_rd    equ  >012d            ; Debug printf rd
0026      012E     c99_dbg_re    equ  >012e            ; Debug printf re
0027      012F     c99_dbg_rf    equ  >012f            ; Debug printf rf
0028      0124     c99_dbg_tmp0  equ  c99_dbg_r4       ; Debug printf tmp0
0029      0125     c99_dbg_tmp1  equ  c99_dbg_r5       ; Debug printf tmp1
0030      0126     c99_dbg_tmp2  equ  c99_dbg_r6       ; Debug printf tmp2
0031      0127     c99_dbg_tmp3  equ  c99_dbg_r7       ; Debug printf tmp3
0032      0128     c99_dbg_tmp4  equ  c99_dbg_r8       ; Debug printf tmp4
0033      0199     c99_dbg_stck  equ  c99_dbg_r9       ; Debug printf stack
                   < stevie_b2.asm
0030                       copy  "equates.tib.asm"     ; Equates related to TI Basic session
     **** ****     > equates.tib.asm
0001               * FILE......: equates.tib.asm
0002               * Purpose...: Equates for TI Basic session
0003               
0004               *--------------------------------------------------------------
0005               * Equates mainly used while TI Basic session is running
0006               *--------------------------------------------------------------
0007      FF00     tib.aux           equ  >ff00           ; Auxiliary memory 256 bytes
0008      FF00     tib.aux.fname     equ  tib.aux         ; TI Basic program filename
0009      FFFA     tib.aux.end       equ  >fffa           ; \ End of auxiliary memory
0010                                                      ; | >fffc-ffff is reserved
0011                                                      ; / for NMI vector.
                   < stevie_b2.asm
0031                       copy  "equates.keys.asm"    ; Equates for keyboard mapping
     **** ****     > equates.keys.asm
0001               * FILE......: data.keymap.keys.asm
0002               * Purpose...: Keyboard mapping
0003               
0004               
0005               *---------------------------------------------------------------
0006               * Keyboard scancodes - Numeric keys
0007               *-------------|---------------------|---------------------------
0008      0030     key.num.0     equ >30               ; 0
0009      0031     key.num.1     equ >31               ; 1
0010      0032     key.num.2     equ >32               ; 2
0011      0033     key.num.3     equ >33               ; 3
0012      0034     key.num.4     equ >34               ; 4
0013      0035     key.num.5     equ >35               ; 5
0014      0036     key.num.6     equ >36               ; 6
0015      0037     key.num.7     equ >37               ; 7
0016      0038     key.num.8     equ >38               ; 8
0017      0039     key.num.9     equ >39               ; 9
0018               *---------------------------------------------------------------
0019               * Keyboard scancodes - Letter keys
0020               *-------------|---------------------|---------------------------
0021      0041     key.uc.a      equ >41               ; A
0022      0042     key.uc.b      equ >42               ; B
0023      0043     key.uc.c      equ >43               ; C
0024      0044     key.uc.d      equ >44               ; D
0025      0045     key.uc.e      equ >45               ; E
0026      0046     key.uc.f      equ >46               ; F
0027      0047     key.uc.g      equ >47               ; G
0028      0048     key.uc.h      equ >48               ; H
0029      0049     key.uc.i      equ >49               ; I
0030      004A     key.uc.j      equ >4a               ; J
0031      004B     key.uc.k      equ >4b               ; K
0032      004C     key.uc.l      equ >4c               ; L
0033      004D     key.uc.m      equ >4d               ; M
0034      004E     key.uc.n      equ >4e               ; N
0035      0052     key.uc.r      equ >52               ; R
0036      0053     key.uc.s      equ >53               ; S
0037      004F     key.uc.o      equ >4f               ; O
0038      0050     key.uc.p      equ >50               ; P
0039      0051     key.uc.q      equ >51               ; Q
0040      0052     key.uc.r      equ >52               ; R
0041      0058     key.uc.x      equ >58               ; X
0042      00A2     key.lc.b      equ >a2               ; b
0043      00A5     key.lc.e      equ >a5               ; e
0044      00A6     key.lc.f      equ >a6               ; f
0045      00A8     key.lc.h      equ >a8               ; h
0046      006E     key.lc.n      equ >6e               ; n
0047      0073     key.lc.s      equ >73               ; s
0048      006F     key.lc.o      equ >6f               ; o
0049      0070     key.lc.p      equ >70               ; p
0050      0071     key.lc.q      equ >71               ; q
0051      0072     key.lc.r      equ >72               ; r
0052      0078     key.lc.x      equ >78               ; x
0053               *---------------------------------------------------------------
0054               * Keyboard scancodes - Function keys
0055               *-------------|---------------------|---------------------------
0056      00BC     key.fctn.0    equ >bc               ; fctn + 0
0057      0003     key.fctn.1    equ >03               ; fctn + 1
0058      0004     key.fctn.2    equ >04               ; fctn + 2
0059      0007     key.fctn.3    equ >07               ; fctn + 3
0060      0002     key.fctn.4    equ >02               ; fctn + 4
0061      000E     key.fctn.5    equ >0e               ; fctn + 5
0062      000C     key.fctn.6    equ >0c               ; fctn + 6
0063      0001     key.fctn.7    equ >01               ; fctn + 7
0064      0006     key.fctn.8    equ >06               ; fctn + 8
0065      000F     key.fctn.9    equ >0f               ; fctn + 9
0066      0000     key.fctn.a    equ >00               ; fctn + a
0067      00BE     key.fctn.b    equ >be               ; fctn + b
0068      0000     key.fctn.c    equ >00               ; fctn + c
0069      0009     key.fctn.d    equ >09               ; fctn + d
0070      000B     key.fctn.e    equ >0b               ; fctn + e
0071      0000     key.fctn.f    equ >00               ; fctn + f
0072      0000     key.fctn.g    equ >00               ; fctn + g
0073      00BF     key.fctn.h    equ >bf               ; fctn + h
0074      0000     key.fctn.i    equ >00               ; fctn + i
0075      00C0     key.fctn.j    equ >c0               ; fctn + j
0076      00C1     key.fctn.k    equ >c1               ; fctn + k
0077      00C2     key.fctn.l    equ >c2               ; fctn + l
0078      00C3     key.fctn.m    equ >c3               ; fctn + m
0079      00C4     key.fctn.n    equ >c4               ; fctn + n
0080      0000     key.fctn.o    equ >00               ; fctn + o
0081      0000     key.fctn.p    equ >00               ; fctn + p
0082      00C5     key.fctn.q    equ >c5               ; fctn + q
0083      0000     key.fctn.r    equ >00               ; fctn + r
0084      0008     key.fctn.s    equ >08               ; fctn + s
0085      0000     key.fctn.t    equ >00               ; fctn + t
0086      0000     key.fctn.u    equ >00               ; fctn + u
0087      007F     key.fctn.v    equ >7f               ; fctn + v
0088      007E     key.fctn.w    equ >7e               ; fctn + w
0089      000A     key.fctn.x    equ >0a               ; fctn + x
0090      00C6     key.fctn.y    equ >c6               ; fctn + y
0091      0000     key.fctn.z    equ >00               ; fctn + z
0092               *---------------------------------------------------------------
0093               * Keyboard scancodes - Function keys extra
0094               *---------------------------------------------------------------
0095      00B9     key.fctn.dot    equ >b9             ; fctn + .
0096      00B8     key.fctn.comma  equ >b8             ; fctn + ,
0097      0005     key.fctn.plus   equ >05             ; fctn + +
0098               *---------------------------------------------------------------
0099               * Keyboard scancodes - control keys
0100               *-------------|---------------------|---------------------------
0101      00B0     key.ctrl.0    equ >b0               ; ctrl + 0
0102      00B1     key.ctrl.1    equ >b1               ; ctrl + 1
0103      00B2     key.ctrl.2    equ >b2               ; ctrl + 2
0104      00B3     key.ctrl.3    equ >b3               ; ctrl + 3
0105      00B4     key.ctrl.4    equ >b4               ; ctrl + 4
0106      00B5     key.ctrl.5    equ >b5               ; ctrl + 5
0107      00B6     key.ctrl.6    equ >b6               ; ctrl + 6
0108      00B7     key.ctrl.7    equ >b7               ; ctrl + 7
0109      009E     key.ctrl.8    equ >9e               ; ctrl + 8
0110      009F     key.ctrl.9    equ >9f               ; ctrl + 9
0111      0081     key.ctrl.a    equ >81               ; ctrl + a
0112      0082     key.ctrl.b    equ >82               ; ctrl + b
0113      0083     key.ctrl.c    equ >83               ; ctrl + c
0114      0084     key.ctrl.d    equ >84               ; ctrl + d
0115      0085     key.ctrl.e    equ >85               ; ctrl + e
0116      0086     key.ctrl.f    equ >86               ; ctrl + f
0117      0087     key.ctrl.g    equ >87               ; ctrl + g
0118      0088     key.ctrl.h    equ >88               ; ctrl + h
0119      0089     key.ctrl.i    equ >89               ; ctrl + i
0120      008A     key.ctrl.j    equ >8a               ; ctrl + j
0121      008B     key.ctrl.k    equ >8b               ; ctrl + k
0122      008C     key.ctrl.l    equ >8c               ; ctrl + l
0123      008D     key.ctrl.m    equ >8d               ; ctrl + m
0124      008E     key.ctrl.n    equ >8e               ; ctrl + n
0125      008F     key.ctrl.o    equ >8f               ; ctrl + o
0126      0090     key.ctrl.p    equ >90               ; ctrl + p
0127      0091     key.ctrl.q    equ >91               ; ctrl + q
0128      0092     key.ctrl.r    equ >92               ; ctrl + r
0129      0093     key.ctrl.s    equ >93               ; ctrl + s
0130      0094     key.ctrl.t    equ >94               ; ctrl + t
0131      0095     key.ctrl.u    equ >95               ; ctrl + u
0132      0096     key.ctrl.v    equ >96               ; ctrl + v
0133      0097     key.ctrl.w    equ >97               ; ctrl + w
0134      0098     key.ctrl.x    equ >98               ; ctrl + x
0135      0099     key.ctrl.y    equ >99               ; ctrl + y
0136      009A     key.ctrl.z    equ >9a               ; ctrl + z
0137               *---------------------------------------------------------------
0138               * Keyboard scancodes - control keys extra
0139               *---------------------------------------------------------------
0140      009B     key.ctrl.dot    equ >9b             ; ctrl + .
0141      0080     key.ctrl.comma  equ >80             ; ctrl + ,
0142      009D     key.ctrl.plus   equ >9d             ; ctrl + +
0143      00BB     key.ctrl.slash  equ >bb             ; ctrl + /
0144      00F0     key.ctrl.space  equ >f0             ; ctrl + SPACE
0145               *---------------------------------------------------------------
0146               * Special keys
0147               *---------------------------------------------------------------
0148      000D     key.enter     equ >0d               ; enter
0149      0020     key.space     equ >20               ; space
                   < stevie_b2.asm
0032               
0033               ***************************************************************
0034               * BANK 2
0035               ********|*****|*********************|**************************
0036      6004     bankid  equ   bank2.rom             ; Set bank identifier to current bank
0037                       aorg  >6000
0038                       save  >6000,>8000           ; Save bank
0039                       copy  "rom.header.asm"      ; Include cartridge header
     **** ****     > rom.header.asm
0001               * FILE......: rom.header.asm
0002               * Purpose...: Cartridge header
0003               
0004               *--------------------------------------------------------------
0005               * Cartridge header
0006               ********|*****|*********************|**************************
0007 6000 AA               byte  >aa                   ; 0  Standard header                   >6000
0008 6001   01             byte  >01                   ; 1  Version number
0009 6002 02               byte  >02                   ; 2  Number of programs (optional)     >6002
0010 6003   00             byte  0                     ; 3  Reserved ('R' = adv. mode FG99)
0011               
0012 6004 0000             data  >0000                 ; 4  \ Pointer to power-up list        >6004
0013                                                   ; 5  /
0014               
0015                       ;
0016                       ; Change to rom.program1 to add the menu option RESET STEVIE MEMORY.
0017                       ; That option can be used in the case where we jump to TI Basic, but
0018                       ; resuming fails afterwards (e.g. memory overwritten by ext. program).
0019                       ;
0020                       ; If resume fails, you can only reset the TI-99/4a by turning of
0021                       ; the memory expansion, it's not sufficient to reset the console.
0022                       ;
0023 6006 600C             data  rom.program1          ; 6  \ Pointer to program list         >6006
0024                                                   ; 7  /
0025               
0026 6008 0000             data  >0000                 ; 8  \ Pointer to DSR list             >6008
0027                                                   ; 9  /
0028               
0029 600A 0000             data  >0000                 ; 10 \ Pointer to subprogram list      >600a
0030                                                   ; 11 /
0031               
0032                       ;-----------------------------------------------------------------------
0033                       ; Program list entry
0034                       ;-----------------------------------------------------------------------
0035               rom.program1:
0036 600C 6024             data  rom.program2          ; 12 \ Next program list entry         >600c
0037                                                   ; 13 / (no more items following)
0038               
0039 600E 6040             data  kickstart.code1       ; 14 \ Program address                 >600e
0040                                                   ; 15 /
0041               
0042 6010 1352             stri 'RESET STEVIE MEMORY'
     6012 4553     
     6014 4554     
     6016 2053     
     6018 5445     
     601A 5649     
     601C 4520     
     601E 4D45     
     6020 4D4F     
     6022 5259     
0043               
0044                       ;-----------------------------------------------------------------------
0045                       ; Program list entry
0046                       ;-----------------------------------------------------------------------
0047               rom.program2:
0048 6024 0000             data  >0000                 ; 12 \ Next program list entry         >600c
0049                                                   ; 13 / (no more items following)
0050               
0051 6026 6038             data  kickstart.resume      ; 14 \ Program address                 >600e
0052                                                   ; 15 /
0053               
0057 6028 0E53                 stri 'STEVIE 1.4D-24'
     602A 5445     
     602C 5649     
     602E 4520     
     6030 312E     
     6032 3444     
     6034 2D32     
     6036 34       
                   < stevie_b2.asm
0040               
0041               ***************************************************************
0042               * Step 1: Switch to bank 0 (uniform code accross all banks)
0043               ********|*****|*********************|**************************
0044                       aorg  kickstart.code1       ; >6040
0045 6040 04E0  34         clr   @bank0.rom            ; Switch to bank 0 "Jill"
     6042 6000     
0046               ***************************************************************
0047               * Step 2: Satisfy assembler, must know relocated code
0048               ********|*****|*********************|**************************
0049                       aorg  >2000                 ; Relocate to >2000
0050                       copy  "runlib.asm"
     **** ****     > runlib.asm
0001               *******************************************************************************
0002               *              ___  ____  ____  ___  ____  ____    __    ___
0003               *             / __)(  _ \( ___)/ __)(_  _)(  _ \  /__\  (__ \  v.2021
0004               *             \__ \ )___/ )__)( (__   )(   )   / /(__)\  / _/
0005               *             (___/(__)  (____)\___) (__) (_)\_)(__)(__)(____)
0006               *
0007               *                TMS9900 Monitor with Arcade Game support
0008               *                                  for
0009               *              the Texas Instruments TI-99/4A Home Computer
0010               *
0011               *                      2010-2022 by Filip Van Vooren
0012               *
0013               *              https://github.com/FilipVanVooren/spectra2.git
0014               *******************************************************************************
0015               * This file: runlib.a99
0016               *******************************************************************************
0017               * Use following equates to skip/exclude support modules and to control startup
0018               * behaviour.
0019               *
0020               * == Memory
0021               * skip_rom_bankswitch       equ  1  ; Skip support for ROM bankswitching
0022               * skip_vram_cpu_copy        equ  1  ; Skip VRAM to CPU copy functions
0023               * skip_cpu_vram_copy        equ  1  ; Skip CPU  to VRAM copy functions
0024               * skip_cpu_cpu_copy         equ  1  ; Skip CPU  to CPU copy functions
0025               * skip_grom_cpu_copy        equ  1  ; Skip GROM to CPU copy functions
0026               * skip_grom_vram_copy       equ  1  ; Skip GROM to VRAM copy functions
0027               * skip_sams                 equ  1  ; Skip support for SAMS memory expansion
0028               * skip_sams_layout          equ  1  ; Skip SAMS memory layout routine
0029               *
0030               * == VDP
0031               * skip_textmode             equ  1  ; Skip 40x24 textmode support
0032               * skip_vdp_f18a             equ  1  ; Skip f18a support
0033               * skip_vdp_hchar            equ  1  ; Skip hchar, xchar
0034               * skip_vdp_vchar            equ  1  ; Skip vchar, xvchar
0035               * skip_vdp_boxes            equ  1  ; Skip filbox, putbox
0036               * skip_vdp_hexsupport       equ  1  ; Skip mkhex, puthex
0037               * skip_vdp_bitmap           equ  1  ; Skip bitmap functions
0038               * skip_vdp_intscr           equ  1  ; Skip interrupt+screen on/off
0039               * skip_vdp_viewport         equ  1  ; Skip viewport functions
0040               * skip_vdp_yx2px_calc       equ  1  ; Skip YX to pixel calculation
0041               * skip_vdp_px2yx_calc       equ  1  ; Skip pixel to YX calculation
0042               * skip_vdp_sprites          equ  1  ; Skip sprites support
0043               * skip_vdp_cursor           equ  1  ; Skip cursor support
0044               *
0045               * == Sound & speech
0046               * skip_snd_player           equ  1  ; Skip inclusionm of sound player code
0047               * skip_speech_detection     equ  1  ; Skip speech synthesizer detection
0048               * skip_speech_player        equ  1  ; Skip inclusion of speech player code
0049               *
0050               * == Keyboard
0051               * skip_virtual_keyboard     equ  1  ; Skip virtual keyboard scann
0052               * skip_real_keyboard        equ  1  ; Skip real keyboard scan
0053               * use_rom0_kscan            equ  1  ; Use KSCAN in console ROM#0
0054               *
0055               * == Utilities
0056               * skip_random_generator     equ  1  ; Skip random generator functions
0057               * skip_cpu_rle_compress     equ  1  ; Skip CPU RLE compression
0058               * skip_cpu_rle_decompress   equ  1  ; Skip CPU RLE decompression
0059               * skip_vdp_rle_decompress   equ  1  ; Skip VDP RLE decompression
0060               * skip_cpu_hexsupport       equ  1  ; Skip mkhex, puthex
0061               * skip_cpu_numsupport       equ  1  ; Skip mknum, putnum, trimnum
0062               * skip_cpu_crc16            equ  1  ; Skip CPU memory CRC-16 calculation
0063               * skip_cpu_strings          equ  1  ; Skip string support utilities
0064               
0065               * == Kernel/Multitasking
0066               * skip_timer_alloc          equ  1  ; Skip support for timers allocation
0067               * skip_mem_paging           equ  1  ; Skip support for memory paging
0068               * skip_fio                  equ  1  ; Skip support for file I/O, dsrlnk
0069               * skip_fg99                 equ  1  ; Skip support for FinalGROM99 loading
0070               *
0071               * == Startup behaviour
0072               * startup_backup_scrpad     equ  1  ; Backup scratchpad @>8300->83ff
0073               *                                   ; to pre-defined backup address
0074               * startup_keep_vdpmemory    equ  1  ; Do not clear VDP vram upon startup
0075               *******************************************************************************
0076               
0077               *//////////////////////////////////////////////////////////////
0078               *                       RUNLIB SETUP
0079               *//////////////////////////////////////////////////////////////
0080               
0081                       copy  "memsetup.equ"             ; runlib scratchpad memory setup
     **** ****     > memsetup.equ
0001               * FILE......: memsetup.equ
0002               * Purpose...: Equates for spectra2 memory layout
0003               
0004               ***************************************************************
0005               * >8300 - >8341     Scratchpad memory layout (66 bytes)
0006               ********|*****|*********************|**************************
0007      8300     ws1     equ   >8300                 ; 32 - Primary workspace
0008      8320     mcloop  equ   >8320                 ; 08 - Machine code for loop & speech
0009      8328     wbase   equ   >8328                 ; 02 - PNT base address
0010      832A     wyx     equ   >832a                 ; 02 - Cursor YX position
0011      832C     wtitab  equ   >832c                 ; 02 - Timers: Address of timer table
0012      832E     wtiusr  equ   >832e                 ; 02 - Timers: Address of user hook
0013      8330     wtitmp  equ   >8330                 ; 02 - Timers: Internal use
0014      8332     wvrtkb  equ   >8332                 ; 02 - Virtual keyboard flags
0015      8334     wsdlst  equ   >8334                 ; 02 - Sound player: Tune address
0016      8336     wsdtmp  equ   >8336                 ; 02 - Sound player: Temporary use
0017      8338     wspeak  equ   >8338                 ; 02 - Speech player: Address of LPC data
0018      833A     wcolmn  equ   >833a                 ; 02 - Screen size, columns per row
0019      833C     waux1   equ   >833c                 ; 02 - Temporary storage 1
0020      833E     waux2   equ   >833e                 ; 02 - Temporary storage 2
0021      8340     waux3   equ   >8340                 ; 02 - Temporary storage 3
0022               ***************************************************************
0023      832A     by      equ   wyx                   ;      Cursor Y position
0024      832B     bx      equ   wyx+1                 ;      Cursor X position
0025      8322     mcsprd  equ   mcloop+2              ;      Speech read routine
0026               ***************************************************************
                   < runlib.asm
0082                       copy  "registers.equ"            ; runlib registers
     **** ****     > registers.equ
0001               * FILE......: registers.equ
0002               * Purpose...: Equates for registers
0003               
0004               ***************************************************************
0005               * Register usage
0006               * R0      **free not used**
0007               * R1      **free not used**
0008               * R2      Config register
0009               * R3      Extended config register
0010               * R4      Temporary register/variable tmp0
0011               * R5      Temporary register/variable tmp1
0012               * R6      Temporary register/variable tmp2
0013               * R7      Temporary register/variable tmp3
0014               * R8      Temporary register/variable tmp4
0015               * R9      Stack pointer
0016               * R10     Highest slot in use + Timer counter
0017               * R11     Subroutine return address
0018               * R12     CRU
0019               * R13     Copy of VDP status byte and counter for sound player
0020               * R14     Copy of VDP register #0 and VDP register #1 bytes
0021               * R15     VDP read/write address
0022               *--------------------------------------------------------------
0023               * Special purpose registers
0024               * R0      shift count
0025               * R12     CRU
0026               * R13     WS     - when using LWPI, BLWP, RTWP
0027               * R14     PC     - when using LWPI, BLWP, RTWP
0028               * R15     STATUS - when using LWPI, BLWP, RTWP
0029               ***************************************************************
0030               * Define registers
0031               ********|*****|*********************|**************************
0032      0000     r0      equ   0
0033      0001     r1      equ   1
0034      0002     r2      equ   2
0035      0003     r3      equ   3
0036      0004     r4      equ   4
0037      0005     r5      equ   5
0038      0006     r6      equ   6
0039      0007     r7      equ   7
0040      0008     r8      equ   8
0041      0009     r9      equ   9
0042      000A     r10     equ   10
0043      000B     r11     equ   11
0044      000C     r12     equ   12
0045      000D     r13     equ   13
0046      000E     r14     equ   14
0047      000F     r15     equ   15
0048               ***************************************************************
0049               * Define register equates
0050               ********|*****|*********************|**************************
0051      0002     config  equ   r2                    ; Config register
0052      0003     xconfig equ   r3                    ; Extended config register
0053      0004     tmp0    equ   r4                    ; Temp register 0
0054      0005     tmp1    equ   r5                    ; Temp register 1
0055      0006     tmp2    equ   r6                    ; Temp register 2
0056      0007     tmp3    equ   r7                    ; Temp register 3
0057      0008     tmp4    equ   r8                    ; Temp register 4
0058      0009     stack   equ   r9                    ; Stack pointer
0059      000E     vdpr01  equ   r14                   ; Copy of VDP#0 and VDP#1 bytes
0060      000F     vdprw   equ   r15                   ; Contains VDP read/write address
0061               ***************************************************************
0062               * Define MSB/LSB equates for registers
0063               ********|*****|*********************|**************************
0064      8300     r0hb    equ   ws1                   ; HI byte R0
0065      8301     r0lb    equ   ws1+1                 ; LO byte R0
0066      8302     r1hb    equ   ws1+2                 ; HI byte R1
0067      8303     r1lb    equ   ws1+3                 ; LO byte R1
0068      8304     r2hb    equ   ws1+4                 ; HI byte R2
0069      8305     r2lb    equ   ws1+5                 ; LO byte R2
0070      8306     r3hb    equ   ws1+6                 ; HI byte R3
0071      8307     r3lb    equ   ws1+7                 ; LO byte R3
0072      8308     r4hb    equ   ws1+8                 ; HI byte R4
0073      8309     r4lb    equ   ws1+9                 ; LO byte R4
0074      830A     r5hb    equ   ws1+10                ; HI byte R5
0075      830B     r5lb    equ   ws1+11                ; LO byte R5
0076      830C     r6hb    equ   ws1+12                ; HI byte R6
0077      830D     r6lb    equ   ws1+13                ; LO byte R6
0078      830E     r7hb    equ   ws1+14                ; HI byte R7
0079      830F     r7lb    equ   ws1+15                ; LO byte R7
0080      8310     r8hb    equ   ws1+16                ; HI byte R8
0081      8311     r8lb    equ   ws1+17                ; LO byte R8
0082      8312     r9hb    equ   ws1+18                ; HI byte R9
0083      8313     r9lb    equ   ws1+19                ; LO byte R9
0084      8314     r10hb   equ   ws1+20                ; HI byte R10
0085      8315     r10lb   equ   ws1+21                ; LO byte R10
0086      8316     r11hb   equ   ws1+22                ; HI byte R11
0087      8317     r11lb   equ   ws1+23                ; LO byte R11
0088      8318     r12hb   equ   ws1+24                ; HI byte R12
0089      8319     r12lb   equ   ws1+25                ; LO byte R12
0090      831A     r13hb   equ   ws1+26                ; HI byte R13
0091      831B     r13lb   equ   ws1+27                ; LO byte R13
0092      831C     r14hb   equ   ws1+28                ; HI byte R14
0093      831D     r14lb   equ   ws1+29                ; LO byte R14
0094      831E     r15hb   equ   ws1+30                ; HI byte R15
0095      831F     r15lb   equ   ws1+31                ; LO byte R15
0096               ********|*****|*********************|**************************
0097      8308     tmp0hb  equ   ws1+8                 ; HI byte R4
0098      8309     tmp0lb  equ   ws1+9                 ; LO byte R4
0099      830A     tmp1hb  equ   ws1+10                ; HI byte R5
0100      830B     tmp1lb  equ   ws1+11                ; LO byte R5
0101      830C     tmp2hb  equ   ws1+12                ; HI byte R6
0102      830D     tmp2lb  equ   ws1+13                ; LO byte R6
0103      830E     tmp3hb  equ   ws1+14                ; HI byte R7
0104      830F     tmp3lb  equ   ws1+15                ; LO byte R7
0105      8310     tmp4hb  equ   ws1+16                ; HI byte R8
0106      8311     tmp4lb  equ   ws1+17                ; LO byte R8
0107               ********|*****|*********************|**************************
0108      8314     btihi   equ   ws1+20                ; Highest slot in use (HI byte R10)
0109      831A     bvdpst  equ   ws1+26                ; Copy of VDP status register (HI byte R13)
0110      831C     vdpr0   equ   ws1+28                ; High byte of R14. Is VDP#0 byte
0111      831D     vdpr1   equ   ws1+29                ; Low byte  of R14. Is VDP#1 byte
0112               ***************************************************************
                   < runlib.asm
0083                       copy  "portaddr.equ"             ; runlib hardware port addresses
     **** ****     > portaddr.equ
0001               * FILE......: portaddr.equ
0002               * Purpose...: Equates for hardware port addresses and vectors
0003               
0004               ***************************************************************
0005               * Equates for VDP, GROM, SOUND, SPEECH ports
0006               ********|*****|*********************|**************************
0007      8400     sound   equ   >8400                 ; Sound generator address
0008      8800     vdpr    equ   >8800                 ; VDP read data window address
0009      8C00     vdpw    equ   >8c00                 ; VDP write data window address
0010      8802     vdps    equ   >8802                 ; VDP status register
0011      8C02     vdpa    equ   >8c02                 ; VDP address register
0012      9C02     grmwa   equ   >9c02                 ; GROM set write address
0013      9802     grmra   equ   >9802                 ; GROM set read address
0014      9800     grmrd   equ   >9800                 ; GROM read byte
0015      9C00     grmwd   equ   >9c00                 ; GROM write byte
0016      9000     spchrd  equ   >9000                 ; Address of speech synth Read Data Register
0017      9400     spchwt  equ   >9400                 ; Address of speech synth Write Data Register
0018               
0019      000E     kscan   equ   >000e                 ; Address of KSCAN routine in console ROM 0
                   < runlib.asm
0084                       copy  "param.equ"                ; runlib parameters
     **** ****     > param.equ
0001               * FILE......: param.equ
0002               * Purpose...: Equates used for subroutine parameters
0003               
0004               ***************************************************************
0005               * Subroutine parameter equates
0006               ***************************************************************
0007      FFFF     eol     equ   >ffff                 ; End-Of-List
0008      FFFF     nofont  equ   >ffff                 ; Skip loading font in RUNLIB
0009      0000     norep   equ   0                     ; PUTBOX > Value for P3. Don't repeat box
0010      3030     num1    equ   >3030                 ; MKNUM  > ASCII 0-9, leading 0's
0011      3020     num2    equ   >3020                 ; MKNUM  > ASCII 0-9, leading spaces
0012      0007     sdopt1  equ   7                     ; SDPLAY > 111 (Player on, repeat, tune in CPU memory)
0013      0005     sdopt2  equ   5                     ; SDPLAY > 101 (Player on, no repeat, tune in CPU memory)
0014      0006     sdopt3  equ   6                     ; SDPLAY > 110 (Player on, repeat, tune in VRAM)
0015      0004     sdopt4  equ   4                     ; SDPLAY > 100 (Player on, no repeat, tune in VRAM)
0016      0000     fnopt1  equ   >0000                 ; LDFNT  > Load TI title screen font
0017      0006     fnopt2  equ   >0006                 ; LDFNT  > Load upper case font
0018      000C     fnopt3  equ   >000c                 ; LDFNT  > Load upper/lower case font
0019      0012     fnopt4  equ   >0012                 ; LDFNT  > Load lower case font
0020      8000     fnopt5  equ   >8000                 ; LDFNT  > Load TI title screen font  & bold
0021      8006     fnopt6  equ   >8006                 ; LDFNT  > Load upper case font       & bold
0022      800C     fnopt7  equ   >800c                 ; LDFNT  > Load upper/lower case font & bold
0023      8012     fnopt8  equ   >8012                 ; LDFNT  > Load lower case font       & bold
0024               *--------------------------------------------------------------
0025               *   Speech player
0026               *--------------------------------------------------------------
0027      0060     talkon  equ   >60                   ; 'start talking' command code for speech synth
0028      00FF     talkof  equ   >ff                   ; 'stop talking' command code for speech synth
0029      6000     spkon   equ   >6000                 ; 'start talking' command code for speech synth
0030      FF00     spkoff  equ   >ff00                 ; 'stop talking' command code for speech synth
                   < runlib.asm
0085                       copy  "classic99.equ"            ; classic99 emulator opcodes
     **** ****     > classic99.equ
0001               * FILE......: classic99.equ
0002               * Purpose...: Extra opcodes for the classic99 emulator
0003               
0004               ***************************************************************
0005               *              Extra opcodes for classic99
0006               ********|*****|*********************|**************************
0007      0110     c99_norm      equ  >0110            ; CPU normal
0008      0111     c99_ovrd      equ  >0111            ; CPU overdrive
0009      0112     c99_smax      equ  >0112            ; System Maximum
0010      0113     c99_brk       equ  >0113            ; Breakpoint
0011      0114     c99_quit      equ  >0114            ; Quit emulator
0012               *--------------------------------------------------------------
0013               * Attention:
0014               * Debug opcodes are part of a 3 words instruction!
0015               * See classic99 user manual for details on proper usage.
0016               *--------------------------------------------------------------
0017      0120     c99_dbgr0     equ  >0120            ; debug printf R0
0018      0121     c99_dbgr1     equ  >0121            ; debug printf R1
0019      0122     c99_dbgr2     equ  >0122            ; debug printf R2
0020      0123     c99_dbgr3     equ  >0123            ; debug printf R3
0021      0124     c99_dbgr4     equ  >0124            ; debug printf R4
0022      0125     c99_dbgr5     equ  >0125            ; debug printf R5
0023      0126     c99_dbgr6     equ  >0126            ; debug printf R6
0024      0127     c99_dbgr7     equ  >0127            ; debug printf R7
0025      0128     c99_dbgr8     equ  >0128            ; debug printf R8
0026      0129     c99_dbgr9     equ  >0129            ; debug printf R9
0027      012A     c99_dbgr10    equ  >012a            ; debug printf R10
0028      012B     c99_dbgr11    equ  >012b            ; debug printf R11
0029      012C     c99_dbgr12    equ  >012c            ; debug printf R12
0030      012D     c99_dbgr13    equ  >012d            ; debug printf R13
0031      012E     c99_dbgr14    equ  >012e            ; debug printf R14
0032      012F     c99_dbgr15    equ  >012f            ; debug printf R15
                   < runlib.asm
0086               
0090               
0091                       copy  "cpu_constants.asm"        ; Define constants for word/MSB/LSB
     **** ****     > cpu_constants.asm
0001               * FILE......: cpu_constants.asm
0002               * Purpose...: Constants used by Spectra2 and for own use
0003               
0004               ***************************************************************
0005               *                      Some constants
0006               ********|*****|*********************|**************************
0007               
0008               *--------------------------------------------------------------
0009               * Word values
0010               *--------------------------------------------------------------
0011               ;                                   ;       0123456789ABCDEF
0012 2000 0000     w$0000  data  >0000                 ; >0000 0000000000000000
0013 2002 0001     w$0001  data  >0001                 ; >0001 0000000000000001
0014 2004 0002     w$0002  data  >0002                 ; >0002 0000000000000010
0015 2006 0004     w$0004  data  >0004                 ; >0004 0000000000000100
0016 2008 0008     w$0008  data  >0008                 ; >0008 0000000000001000
0017 200A 0010     w$0010  data  >0010                 ; >0010 0000000000010000
0018 200C 0020     w$0020  data  >0020                 ; >0020 0000000000100000
0019 200E 0040     w$0040  data  >0040                 ; >0040 0000000001000000
0020 2010 0080     w$0080  data  >0080                 ; >0080 0000000010000000
0021 2012 0100     w$0100  data  >0100                 ; >0100 0000000100000000
0022 2014 0200     w$0200  data  >0200                 ; >0200 0000001000000000
0023 2016 0400     w$0400  data  >0400                 ; >0400 0000010000000000
0024 2018 0800     w$0800  data  >0800                 ; >0800 0000100000000000
0025 201A 1000     w$1000  data  >1000                 ; >1000 0001000000000000
0026 201C 2000     w$2000  data  >2000                 ; >2000 0010000000000000
0027 201E 4000     w$4000  data  >4000                 ; >4000 0100000000000000
0028 2020 8000     w$8000  data  >8000                 ; >8000 1000000000000000
0029 2022 FFFF     w$ffff  data  >ffff                 ; >ffff 1111111111111111
0030 2024 D000     w$d000  data  >d000                 ; >d000
0031               *--------------------------------------------------------------
0032               * Byte values - High byte (=MSB) for byte operations
0033               *--------------------------------------------------------------
0034      2000     hb$00   equ   w$0000                ; >0000
0035      2012     hb$01   equ   w$0100                ; >0100
0036      2014     hb$02   equ   w$0200                ; >0200
0037      2016     hb$04   equ   w$0400                ; >0400
0038      2018     hb$08   equ   w$0800                ; >0800
0039      201A     hb$10   equ   w$1000                ; >1000
0040      201C     hb$20   equ   w$2000                ; >2000
0041      201E     hb$40   equ   w$4000                ; >4000
0042      2020     hb$80   equ   w$8000                ; >8000
0043      2024     hb$d0   equ   w$d000                ; >d000
0044               *--------------------------------------------------------------
0045               * Byte values - Low byte (=LSB) for byte operations
0046               *--------------------------------------------------------------
0047      2000     lb$00   equ   w$0000                ; >0000
0048      2002     lb$01   equ   w$0001                ; >0001
0049      2004     lb$02   equ   w$0002                ; >0002
0050      2006     lb$04   equ   w$0004                ; >0004
0051      2008     lb$08   equ   w$0008                ; >0008
0052      200A     lb$10   equ   w$0010                ; >0010
0053      200C     lb$20   equ   w$0020                ; >0020
0054      200E     lb$40   equ   w$0040                ; >0040
0055      2010     lb$80   equ   w$0080                ; >0080
0056               *--------------------------------------------------------------
0057               * Bit values
0058               *--------------------------------------------------------------
0059               ;                                   ;       0123456789ABCDEF
0060      2002     wbit15  equ   w$0001                ; >0001 0000000000000001
0061      2004     wbit14  equ   w$0002                ; >0002 0000000000000010
0062      2006     wbit13  equ   w$0004                ; >0004 0000000000000100
0063      2008     wbit12  equ   w$0008                ; >0008 0000000000001000
0064      200A     wbit11  equ   w$0010                ; >0010 0000000000010000
0065      200C     wbit10  equ   w$0020                ; >0020 0000000000100000
0066      200E     wbit9   equ   w$0040                ; >0040 0000000001000000
0067      2010     wbit8   equ   w$0080                ; >0080 0000000010000000
0068      2012     wbit7   equ   w$0100                ; >0100 0000000100000000
0069      2014     wbit6   equ   w$0200                ; >0200 0000001000000000
0070      2016     wbit5   equ   w$0400                ; >0400 0000010000000000
0071      2018     wbit4   equ   w$0800                ; >0800 0000100000000000
0072      201A     wbit3   equ   w$1000                ; >1000 0001000000000000
0073      201C     wbit2   equ   w$2000                ; >2000 0010000000000000
0074      201E     wbit1   equ   w$4000                ; >4000 0100000000000000
0075      2020     wbit0   equ   w$8000                ; >8000 1000000000000000
                   < runlib.asm
0092                       copy  "config.equ"               ; Equates for bits in config register
     **** ****     > config.equ
0001               * FILE......: config.equ
0002               * Purpose...: Equates for bits in config register
0003               
0004               ***************************************************************
0005               * The config register equates
0006               *--------------------------------------------------------------
0007               * Configuration flags
0008               * ===================
0009               *
0010               * ; 15  Sound player: tune source       1=ROM/RAM      0=VDP MEMORY
0011               * ; 14  Sound player: repeat tune       1=yes          0=no
0012               * ; 13  Sound player: enabled           1=yes          0=no (or pause)
0013               * ; 12  VDP9918 sprite collision?       1=yes          0=no
0014               * ; 11  Keyboard: ANY key pressed       1=yes          0=no
0015               * ; 10  Keyboard: Alpha lock key down   1=yes          0=no
0016               * ; 09  Timer: Kernel thread enabled    1=yes          0=no
0017               * ; 08  Timer: Block kernel thread      1=yes          0=no
0018               * ; 07  Timer: User hook enabled        1=yes          0=no
0019               * ; 06  Timer: Block user hook          1=yes          0=no
0020               * ; 05  Speech synthesizer present      1=yes          0=no
0021               * ; 04  Speech player: busy             1=yes          0=no
0022               * ; 03  Speech player: enabled          1=yes          0=no
0023               * ; 02  VDP9918 PAL version             1=yes(50)      0=no(60)
0024               * ; 01  F18A present                    1=on           0=off
0025               * ; 00  Subroutine state flag           1=on           0=off
0026               ********|*****|*********************|**************************
0027      201C     palon   equ   wbit2                 ; bit 2=1   (VDP9918 PAL version)
0028      2012     enusr   equ   wbit7                 ; bit 7=1   (Enable user hook)
0029      200E     enknl   equ   wbit9                 ; bit 9=1   (Enable kernel thread)
0030      200A     anykey  equ   wbit11                ; BIT 11 in the CONFIG register
0031               ***************************************************************
                   < runlib.asm
0093                       copy  "cpu_crash.asm"            ; CPU crash handler
     **** ****     > cpu_crash.asm
0001               * FILE......: cpu_crash.asm
0002               * Purpose...: Custom crash handler module
0003               
0004               
0005               ***************************************************************
0006               * cpu.crash - CPU program crashed handler
0007               ***************************************************************
0008               *  bl   @cpu.crash
0009               *--------------------------------------------------------------
0010               * Crash and halt system. Upon crash entry register contents are
0011               * copied to the memory region >ffe0 - >fffe and displayed after
0012               * resetting the spectra2 runtime library, video modes, etc.
0013               *
0014               * Diagnostics
0015               * >ffce  caller address
0016               *
0017               * Register contents
0018               * >ffdc  wp
0019               * >ffde  st
0020               * >ffe0  r0
0021               * >ffe2  r1
0022               * >ffe4  r2  (config)
0023               * >ffe6  r3
0024               * >ffe8  r4  (tmp0)
0025               * >ffea  r5  (tmp1)
0026               * >ffec  r6  (tmp2)
0027               * >ffee  r7  (tmp3)
0028               * >fff0  r8  (tmp4)
0029               * >fff2  r9  (stack)
0030               * >fff4  r10
0031               * >fff6  r11
0032               * >fff8  r12
0033               * >fffa  r13
0034               * >fffc  r14
0035               * >fffe  r15
0036               ********|*****|*********************|**************************
0037               cpu.crash:
0038 2026 022B  22         ai    r11,-4                ; Remove opcode offset
     2028 FFFC     
0039               *--------------------------------------------------------------
0040               *    Save registers to high memory
0041               *--------------------------------------------------------------
0042 202A C800  38         mov   r0,@>ffe0
     202C FFE0     
0043 202E C801  38         mov   r1,@>ffe2
     2030 FFE2     
0044 2032 C802  38         mov   r2,@>ffe4
     2034 FFE4     
0045 2036 C803  38         mov   r3,@>ffe6
     2038 FFE6     
0046 203A C804  38         mov   r4,@>ffe8
     203C FFE8     
0047 203E C805  38         mov   r5,@>ffea
     2040 FFEA     
0048 2042 C806  38         mov   r6,@>ffec
     2044 FFEC     
0049 2046 C807  38         mov   r7,@>ffee
     2048 FFEE     
0050 204A C808  38         mov   r8,@>fff0
     204C FFF0     
0051 204E C809  38         mov   r9,@>fff2
     2050 FFF2     
0052 2052 C80A  38         mov   r10,@>fff4
     2054 FFF4     
0053 2056 C80B  38         mov   r11,@>fff6
     2058 FFF6     
0054 205A C80C  38         mov   r12,@>fff8
     205C FFF8     
0055 205E C80D  38         mov   r13,@>fffa
     2060 FFFA     
0056 2062 C80E  38         mov   r14,@>fffc
     2064 FFFC     
0057 2066 C80F  38         mov   r15,@>ffff
     2068 FFFF     
0058 206A 02A0  12         stwp  r0
0059 206C C800  38         mov   r0,@>ffdc
     206E FFDC     
0060 2070 02C0  12         stst  r0
0061 2072 C800  38         mov   r0,@>ffde
     2074 FFDE     
0062               *--------------------------------------------------------------
0063               *    Reset system
0064               *--------------------------------------------------------------
0065               cpu.crash.reset:
0066 2076 02E0  18         lwpi  ws1                   ; Activate workspace 1
     2078 8300     
0067 207A 04E0  26         clr   @>8302                ; Reset exit flag (R1 in workspace WS1!)
     207C 8302     
0068 207E 0200  20         li    r0,>4a4a              ; Note that a crash occured (Flag = >4a4a)
     2080 4A4A     
0069 2082 0460  28         b     @runli1               ; Initialize system again (VDP, Memory, etc.)
     2084 2F10     
0070               *--------------------------------------------------------------
0071               *    Show diagnostics after system reset
0072               *--------------------------------------------------------------
0073               cpu.crash.main:
0074                       ;------------------------------------------------------
0075                       ; Load "32x24" video mode & font
0076                       ;------------------------------------------------------
0077 2086 06A0  32         bl    @vidtab               ; Load video mode table into VDP
     2088 22F8     
0078 208A 21F2                   data graph1           ; \ i  p0 = pointer to video mode table
0079                                                   ; /
0080               
0081 208C 06A0  32         bl    @ldfnt
     208E 2360     
0082 2090 0900                   data >0900,fnopt3     ; Load font (upper & lower case)
     2092 000C     
0083               
0084 2094 06A0  32         bl    @filv
     2096 228E     
0085 2098 0000                   data >0000,32,32*24   ; Clear screen
     209A 0020     
     209C 0300     
0086               
0087 209E 06A0  32         bl    @filv
     20A0 228E     
0088 20A2 0380                   data >0380,>f0,32*24  ; Load color table
     20A4 00F0     
     20A6 0300     
0089                       ;------------------------------------------------------
0090                       ; Show crash address
0091                       ;------------------------------------------------------
0092 20A8 06A0  32         bl    @putat                ; Show crash message
     20AA 2442     
0093 20AC 0000                   data >0000,cpu.crash.msg.crashed
     20AE 2182     
0094               
0095 20B0 06A0  32         bl    @puthex               ; Put hex value on screen
     20B2 299C     
0096 20B4 0015                   byte 0,21             ; \ i  p0 = YX position
0097 20B6 FFF6                   data >fff6            ; | i  p1 = Pointer to 16 bit word
0098 20B8 A100                   data rambuf           ; | i  p2 = Pointer to ram buffer
0099 20BA 4130                   byte 65,48            ; | i  p3 = MSB offset for ASCII digit a-f
0100                                                   ; /         LSB offset for ASCII digit 0-9
0101                       ;------------------------------------------------------
0102                       ; Show caller address
0103                       ;------------------------------------------------------
0104 20BC 06A0  32         bl    @putat                ; Show caller message
     20BE 2442     
0105 20C0 0100                   data >0100,cpu.crash.msg.caller
     20C2 2198     
0106               
0107 20C4 06A0  32         bl    @puthex               ; Put hex value on screen
     20C6 299C     
0108 20C8 0115                   byte 1,21             ; \ i  p0 = YX position
0109 20CA FFCE                   data >ffce            ; | i  p1 = Pointer to 16 bit word
0110 20CC A100                   data rambuf           ; | i  p2 = Pointer to ram buffer
0111 20CE 4130                   byte 65,48            ; | i  p3 = MSB offset for ASCII digit a-f
0112                                                   ; /         LSB offset for ASCII digit 0-9
0113                       ;------------------------------------------------------
0114                       ; Display labels
0115                       ;------------------------------------------------------
0116 20D0 06A0  32         bl    @putat
     20D2 2442     
0117 20D4 0300                   byte 3,0
0118 20D6 21B4                   data cpu.crash.msg.wp
0119 20D8 06A0  32         bl    @putat
     20DA 2442     
0120 20DC 0400                   byte 4,0
0121 20DE 21BA                   data cpu.crash.msg.st
0122                       ;------------------------------------------------------
0123                       ; Show crash registers WP, ST, R0 - R15
0124                       ;------------------------------------------------------
0125 20E0 06A0  32         bl    @at                   ; Put cursor at YX
     20E2 26C6     
0126 20E4 0304                   byte 3,4              ; \ i p0 = YX position
0127                                                   ; /
0128               
0129 20E6 0204  20         li    tmp0,>ffdc            ; Crash registers >ffdc - >ffff
     20E8 FFDC     
0130 20EA 04C6  14         clr   tmp2                  ; Loop counter
0131               
0132               cpu.crash.showreg:
0133 20EC C034  30         mov   *tmp0+,r0             ; Move crash register content to r0
0134               
0135 20EE 0649  14         dect  stack
0136 20F0 C644  30         mov   tmp0,*stack           ; Push tmp0
0137 20F2 0649  14         dect  stack
0138 20F4 C645  30         mov   tmp1,*stack           ; Push tmp1
0139 20F6 0649  14         dect  stack
0140 20F8 C646  30         mov   tmp2,*stack           ; Push tmp2
0141                       ;------------------------------------------------------
0142                       ; Display crash register number
0143                       ;------------------------------------------------------
0144               cpu.crash.showreg.label:
0145 20FA C046  18         mov   tmp2,r1               ; Save register number
0146 20FC 0286  22         ci    tmp2,1                ; Skip labels WP/ST?
     20FE 0001     
0147 2100 1220  14         jle   cpu.crash.showreg.content
0148                                                   ; Yes, skip
0149               
0150 2102 0641  14         dect  r1                    ; Adjust because of "dummy" WP/ST registers
0151 2104 06A0  32         bl    @mknum
     2106 29A6     
0152 2108 8302                   data r1hb             ; \ i  p0 = Pointer to 16 bit unsigned word
0153 210A A100                   data rambuf           ; | i  p1 = Pointer to ram buffer
0154 210C 3020                   byte 48,32            ; | i  p2 = MSB offset for ASCII digit a-f
0155                                                   ; /         LSB offset for ASCII digit 0-9
0156               
0157 210E 06A0  32         bl    @setx                 ; Set cursor X position
     2110 26DC     
0158 2112 0000                   data 0                ; \ i  p0 =  Cursor Y position
0159                                                   ; /
0160               
0161 2114 0204  20         li    tmp0,>0400            ; Set string length-prefix byte
     2116 0400     
0162 2118 D804  38         movb  tmp0,@rambuf          ;
     211A A100     
0163               
0164 211C 06A0  32         bl    @putstr               ; Put length-byte prefixed string at current YX
     211E 241E     
0165 2120 A100                   data rambuf           ; \ i  p0 = Pointer to ram buffer
0166                                                   ; /
0167               
0168 2122 06A0  32         bl    @setx                 ; Set cursor X position
     2124 26DC     
0169 2126 0002                   data 2                ; \ i  p0 =  Cursor Y position
0170                                                   ; /
0171               
0172 2128 0281  22         ci    r1,10
     212A 000A     
0173 212C 1102  14         jlt   !
0174 212E 0620  26         dec   @wyx                  ; x=x-1
     2130 832A     
0175               
0176 2132 06A0  32 !       bl    @putstr
     2134 241E     
0177 2136 21AE                   data cpu.crash.msg.r
0178               
0179 2138 06A0  32         bl    @mknum
     213A 29A6     
0180 213C 8302                   data r1hb             ; \ i  p0 = Pointer to 16 bit unsigned word
0181 213E A100                   data rambuf           ; | i  p1 = Pointer to ram buffer
0182 2140 3020                   byte 48,32            ; | i  p2 = MSB offset for ASCII digit a-f
0183                                                   ; /         LSB offset for ASCII digit 0-9
0184                       ;------------------------------------------------------
0185                       ; Display crash register content
0186                       ;------------------------------------------------------
0187               cpu.crash.showreg.content:
0188 2142 06A0  32         bl    @mkhex                ; Convert hex word to string
     2144 2918     
0189 2146 8300                   data r0hb             ; \ i  p0 = Pointer to 16 bit word
0190 2148 A100                   data rambuf           ; | i  p1 = Pointer to ram buffer
0191 214A 4130                   byte 65,48            ; | i  p2 = MSB offset for ASCII digit a-f
0192                                                   ; /         LSB offset for ASCII digit 0-9
0193               
0194 214C 06A0  32         bl    @setx                 ; Set cursor X position
     214E 26DC     
0195 2150 0004                   data 4                ; \ i  p0 =  Cursor Y position
0196                                                   ; /
0197               
0198 2152 06A0  32         bl    @putstr               ; Put '  >'
     2154 241E     
0199 2156 21B0                   data cpu.crash.msg.marker
0200               
0201 2158 06A0  32         bl    @setx                 ; Set cursor X position
     215A 26DC     
0202 215C 0007                   data 7                ; \ i  p0 =  Cursor Y position
0203                                                   ; /
0204               
0205 215E 0204  20         li    tmp0,>0400            ; Set string length-prefix byte
     2160 0400     
0206 2162 D804  38         movb  tmp0,@rambuf          ;
     2164 A100     
0207               
0208 2166 06A0  32         bl    @putstr               ; Put length-byte prefixed string at current YX
     2168 241E     
0209 216A A100                   data rambuf           ; \ i  p0 = Pointer to ram buffer
0210                                                   ; /
0211               
0212 216C C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0213 216E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0214 2170 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0215               
0216 2172 06A0  32         bl    @down                 ; y=y+1
     2174 26CC     
0217               
0218 2176 0586  14         inc   tmp2
0219 2178 0286  22         ci    tmp2,17
     217A 0011     
0220 217C 12B7  14         jle   cpu.crash.showreg     ; Show next register
0221                       ;------------------------------------------------------
0222                       ; Kernel takes over
0223                       ;------------------------------------------------------
0224 217E 0460  28         b     @cpu.crash.showbank   ; Expected to be included in
     2180 7F50     
0225               
0226               
0227 2182 1553     cpu.crash.msg.crashed      stri 'System crashed near >'
     2184 7973     
     2186 7465     
     2188 6D20     
     218A 6372     
     218C 6173     
     218E 6865     
     2190 6420     
     2192 6E65     
     2194 6172     
     2196 203E     
0228                                          even
0229 2198 1543     cpu.crash.msg.caller       stri 'Caller address near >'
     219A 616C     
     219C 6C65     
     219E 7220     
     21A0 6164     
     21A2 6472     
     21A4 6573     
     21A6 7320     
     21A8 6E65     
     21AA 6172     
     21AC 203E     
0230                                          even
0231 21AE 0152     cpu.crash.msg.r            stri 'R'
0232                                          even
0233 21B0 0320     cpu.crash.msg.marker       stri '  >'
     21B2 203E     
0234                                          even
0235 21B4 042A     cpu.crash.msg.wp           stri '**WP'
     21B6 2A57     
     21B8 50       
0236                                          even
0237 21BA 042A     cpu.crash.msg.st           stri '**ST'
     21BC 2A53     
     21BE 54       
0238                                          even
0239 21C0 1753     cpu.crash.msg.source       stri 'Source    %%build_src%%'
     21C2 6F75     
     21C4 7263     
     21C6 6520     
     21C8 2020     
     21CA 2025     
     21CC 2562     
     21CE 7569     
     21D0 6C64     
     21D2 5F73     
     21D4 7263     
     21D6 2525     
0240                                          even
0241 21D8 1842     cpu.crash.msg.id           stri 'Build-ID  %%build_date%%'
     21DA 7569     
     21DC 6C64     
     21DE 2D49     
     21E0 4420     
     21E2 2025     
     21E4 2562     
     21E6 7569     
     21E8 6C64     
     21EA 5F64     
     21EC 6174     
     21EE 6525     
     21F0 25       
0242                                          even
                   < runlib.asm
0094                       copy  "vdp_tables.asm"           ; Data used by runtime library
     **** ****     > vdp_tables.asm
0001               * FILE......: vdp_tables.a99
0002               * Purpose...: Video mode tables
0003               
0004               ***************************************************************
0005               * Graphics mode 1 (32 columns/24 rows)
0006               *--------------------------------------------------------------
0007 21F2 00E2     graph1  byte  >00,>e2,>00,>0e,>01,>06,>02,SPFBCK,0,32
     21F4 000E     
     21F6 0106     
     21F8 0204     
     21FA 0020     
0008               *
0009               * ; VDP#0 Control bits
0010               * ;      bit 6=0: M3 | Graphics 1 mode
0011               * ;      bit 7=0: Disable external VDP input
0012               * ; VDP#1 Control bits
0013               * ;      bit 0=1: 16K selection
0014               * ;      bit 1=1: Enable display
0015               * ;      bit 2=1: Enable VDP interrupt
0016               * ;      bit 3=0: M1 \ Graphics 1 mode
0017               * ;      bit 4=0: M2 /
0018               * ;      bit 5=0: reserved
0019               * ;      bit 6=1: 16x16 sprites
0020               * ;      bit 7=0: Sprite magnification (1x)
0021               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0022               * ; VDP#3 PCT (Pattern color table)      at >0380  (>0E * >040)
0023               * ; VDP#4 PDT (Pattern descriptor table) at >0800  (>01 * >800)
0024               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0025               * ; VDP#6 SPT (Sprite pattern table)     at >1000  (>02 * >800)
0026               * ; VDP#7 Set screen background color
0027               
0028               
0029               ***************************************************************
0030               * Textmode (40 columns/24 rows)
0031               *--------------------------------------------------------------
0032 21FC 00F2     tx4024  byte  >00,>f2,>00,>0e,>01,>06,>00,SPFCLR,0,40
     21FE 000E     
     2200 0106     
     2202 00F4     
     2204 0028     
0033               *
0034               * ; VDP#0 Control bits
0035               * ;      bit 6=0: M3 | Graphics 1 mode
0036               * ;      bit 7=0: Disable external VDP input
0037               * ; VDP#1 Control bits
0038               * ;      bit 0=1: 16K selection
0039               * ;      bit 1=1: Enable display
0040               * ;      bit 2=1: Enable VDP interrupt
0041               * ;      bit 3=1: M1 \ TEXT MODE
0042               * ;      bit 4=0: M2 /
0043               * ;      bit 5=0: reserved
0044               * ;      bit 6=1: 16x16 sprites
0045               * ;      bit 7=0: Sprite magnification (1x)
0046               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0047               * ; VDP#3 PCT (Pattern color table)      at >0380  (>0E * >040)
0048               * ; VDP#4 PDT (Pattern descriptor table) at >0800  (>01 * >800)
0049               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0050               * ; VDP#6 SPT (Sprite pattern table)     at >0000  (>00 * >800)
0051               * ; VDP#7 Set foreground/background color
0052               ***************************************************************
0053               
0054               
0055               ***************************************************************
0056               * Textmode (80 columns, 24 rows) - F18A
0057               *--------------------------------------------------------------
0058 2206 04F0     tx8024  byte  >04,>f0,>00,>3f,>02,>40,>03,SPFCLR,0,80
     2208 003F     
     220A 0240     
     220C 03F4     
     220E 0050     
0059               *
0060               * ; VDP#0 Control bits
0061               * ;      bit 6=0: M3 | Graphics 1 mode
0062               * ;      bit 7=0: Disable external VDP input
0063               * ; VDP#1 Control bits
0064               * ;      bit 0=1: 16K selection
0065               * ;      bit 1=1: Enable display
0066               * ;      bit 2=1: Enable VDP interrupt
0067               * ;      bit 3=1: M1 \ TEXT MODE
0068               * ;      bit 4=0: M2 /
0069               * ;      bit 5=0: reserved
0070               * ;      bit 6=0: 8x8 sprites
0071               * ;      bit 7=0: Sprite magnification (1x)
0072               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0073               * ; VDP#3 PCT (Pattern color table)      at >0FC0  (>3F * >040)
0074               * ; VDP#4 PDT (Pattern descriptor table) at >1000  (>02 * >800)
0075               * ; VDP#5 SAT (sprite attribute list)    at >2000  (>40 * >080)
0076               * ; VDP#6 SPT (Sprite pattern table)     at >1800  (>03 * >800)
0077               * ; VDP#7 Set foreground/background color
0078               ***************************************************************
                   < runlib.asm
0095                       copy  "basic_cpu_vdp.asm"        ; Basic CPU & VDP functions
     **** ****     > basic_cpu_vdp.asm
0001               * FILE......: basic_cpu_vdp.asm
0002               * Purpose...: Basic CPU & VDP functions used by other modules
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *       Support Machine Code for copy & fill functions
0006               *//////////////////////////////////////////////////////////////
0007               
0008               *--------------------------------------------------------------
0009               * ; Machine code for tight loop.
0010               * ; The MOV operation at MCLOOP must be injected by the calling routine.
0011               *--------------------------------------------------------------
0012               *       DATA  >????                 ; \ mcloop  mov   ...
0013 2210 0606     mccode  data  >0606                 ; |         dec   r6 (tmp2)
0014 2212 16FD             data  >16fd                 ; |         jne   mcloop
0015 2214 045B             data  >045b                 ; /         b     *r11
0016               *--------------------------------------------------------------
0017               * ; Machine code for reading from the speech synthesizer
0018               * ; The SRC instruction takes 12 uS for execution in scratchpad RAM.
0019               * ; Is required for the 12 uS delay. It destroys R5.
0020               *--------------------------------------------------------------
0021 2216 D114     spcode  data  >d114                 ; \         movb  *r4,r4 (tmp0)
0022 2218 0BC5             data  >0bc5                 ; /         src   r5,12  (tmp1)
0023                       even
0024               
0025               
0026               ***************************************************************
0027               * loadmc - Load machine code into scratchpad  >8322 - >8328
0028               ***************************************************************
0029               *  bl  @loadmc
0030               *--------------------------------------------------------------
0031               *  REMARKS
0032               *  Machine instruction in location @>8320 will be set by
0033               *  SP2 copy/fill routine that is called later on.
0034               ********|*****|*********************|**************************
0035               loadmc:
0036 221A 0201  20         li    r1,mccode             ; Machinecode to patch
     221C 2210     
0037 221E 0202  20         li    r2,mcloop+2           ; Scratch-pad reserved for machine code
     2220 8322     
0038 2222 CCB1  46         mov   *r1+,*r2+             ; Copy 1st instruction
0039 2224 CCB1  46         mov   *r1+,*r2+             ; Copy 2nd instruction
0040 2226 CCB1  46         mov   *r1+,*r2+             ; Copy 3rd instruction
0041 2228 045B  20         b     *r11                  ; Return to caller
0042               
0043               
0044               *//////////////////////////////////////////////////////////////
0045               *                    STACK SUPPORT FUNCTIONS
0046               *//////////////////////////////////////////////////////////////
0047               
0048               ***************************************************************
0049               * POPR. - Pop registers & return to caller
0050               ***************************************************************
0051               *  B  @POPRG.
0052               *--------------------------------------------------------------
0053               *  REMARKS
0054               *  R11 must be at stack bottom
0055               ********|*****|*********************|**************************
0056 222A C0F9  30 popr3   mov   *stack+,r3
0057 222C C0B9  30 popr2   mov   *stack+,r2
0058 222E C079  30 popr1   mov   *stack+,r1
0059 2230 C039  30 popr0   mov   *stack+,r0
0060 2232 C2F9  30 poprt   mov   *stack+,r11
0061 2234 045B  20         b     *r11
0062               
0063               
0064               
0065               *//////////////////////////////////////////////////////////////
0066               *                   MEMORY FILL FUNCTIONS
0067               *//////////////////////////////////////////////////////////////
0068               
0069               ***************************************************************
0070               * FILM - Fill CPU memory with byte
0071               ***************************************************************
0072               *  bl   @film
0073               *  data P0,P1,P2
0074               *--------------------------------------------------------------
0075               *  P0 = Memory start address
0076               *  P1 = Byte to fill
0077               *  P2 = Number of bytes to fill
0078               *--------------------------------------------------------------
0079               *  bl   @xfilm
0080               *
0081               *  TMP0 = Memory start address
0082               *  TMP1 = Byte to fill
0083               *  TMP2 = Number of bytes to fill
0084               ********|*****|*********************|**************************
0085 2236 C13B  30 film    mov   *r11+,tmp0            ; Memory start
0086 2238 C17B  30         mov   *r11+,tmp1            ; Byte to fill
0087 223A C1BB  30         mov   *r11+,tmp2            ; Repeat count
0088               *--------------------------------------------------------------
0089               * Assert
0090               *--------------------------------------------------------------
0091 223C C1C6  18 xfilm   mov   tmp2,tmp3             ; Bytes to fill = 0 ?
0092 223E 1604  14         jne   filchk                ; No, continue checking
0093               
0094 2240 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2242 FFCE     
0095 2244 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2246 2026     
0096               *--------------------------------------------------------------
0097               *       Check: 1 byte fill
0098               *--------------------------------------------------------------
0099 2248 D820  42 filchk  movb  @tmp1lb,@tmp1hb       ; Duplicate value
     224A 830B     
     224C 830A     
0100               
0101 224E 0286  22         ci    tmp2,1                ; Bytes to fill = 1 ?
     2250 0001     
0102 2252 1602  14         jne   filchk2
0103 2254 DD05  32         movb  tmp1,*tmp0+
0104 2256 045B  20         b     *r11                  ; Exit
0105               *--------------------------------------------------------------
0106               *       Check: 2 byte fill
0107               *--------------------------------------------------------------
0108 2258 0286  22 filchk2 ci    tmp2,2                ; Byte to fill = 2 ?
     225A 0002     
0109 225C 1603  14         jne   filchk3
0110 225E DD05  32         movb  tmp1,*tmp0+           ; Deal with possible uneven start address
0111 2260 DD05  32         movb  tmp1,*tmp0+
0112 2262 045B  20         b     *r11                  ; Exit
0113               *--------------------------------------------------------------
0114               *       Check: Handle uneven start address
0115               *--------------------------------------------------------------
0116 2264 C1C4  18 filchk3 mov   tmp0,tmp3
0117 2266 0247  22         andi  tmp3,1                ; TMP3=1 -> ODD else EVEN
     2268 0001     
0118 226A 1305  14         jeq   fil16b
0119 226C DD05  32         movb  tmp1,*tmp0+           ; Copy 1st byte
0120 226E 0606  14         dec   tmp2
0121 2270 0286  22         ci    tmp2,2                ; Do we only have 1 word left?
     2272 0002     
0122 2274 13F1  14         jeq   filchk2               ; Yes, copy word and exit
0123               *--------------------------------------------------------------
0124               *       Fill memory with 16 bit words
0125               *--------------------------------------------------------------
0126 2276 C1C6  18 fil16b  mov   tmp2,tmp3
0127 2278 0247  22         andi  tmp3,1                ; TMP3=1 -> ODD else EVEN
     227A 0001     
0128 227C 1301  14         jeq   dofill
0129 227E 0606  14         dec   tmp2                  ; Make TMP2 even
0130 2280 CD05  34 dofill  mov   tmp1,*tmp0+
0131 2282 0646  14         dect  tmp2
0132 2284 16FD  14         jne   dofill
0133               *--------------------------------------------------------------
0134               * Fill last byte if ODD
0135               *--------------------------------------------------------------
0136 2286 C1C7  18         mov   tmp3,tmp3
0137 2288 1301  14         jeq   fil.exit
0138 228A DD05  32         movb  tmp1,*tmp0+
0139               fil.exit:
0140 228C 045B  20         b     *r11
0141               
0142               
0143               ***************************************************************
0144               * FILV - Fill VRAM with byte
0145               ***************************************************************
0146               *  BL   @FILV
0147               *  DATA P0,P1,P2
0148               *--------------------------------------------------------------
0149               *  P0 = VDP start address
0150               *  P1 = Byte to fill
0151               *  P2 = Number of bytes to fill
0152               *--------------------------------------------------------------
0153               *  BL   @XFILV
0154               *
0155               *  TMP0 = VDP start address
0156               *  TMP1 = Byte to fill
0157               *  TMP2 = Number of bytes to fill
0158               ********|*****|*********************|**************************
0159 228E C13B  30 filv    mov   *r11+,tmp0            ; Memory start
0160 2290 C17B  30         mov   *r11+,tmp1            ; Byte to fill
0161 2292 C1BB  30         mov   *r11+,tmp2            ; Repeat count
0162               *--------------------------------------------------------------
0163               *    Setup VDP write address
0164               *--------------------------------------------------------------
0165 2294 0264  22 xfilv   ori   tmp0,>4000
     2296 4000     
0166 2298 06C4  14         swpb  tmp0
0167 229A D804  30         movb  tmp0,@vdpa
     229C 8C02     
0168 229E 06C4  14         swpb  tmp0
0169 22A0 D804  30         movb  tmp0,@vdpa
     22A2 8C02     
0170               *--------------------------------------------------------------
0171               *    Fill bytes in VDP memory
0172               *--------------------------------------------------------------
0173 22A4 020F  20         li    r15,vdpw              ; Set VDP write address
     22A6 8C00     
0174 22A8 06C5  14         swpb  tmp1
0175 22AA C820  46         mov   @filzz,@mcloop        ; Setup move command
     22AC 22B4     
     22AE 8320     
0176 22B0 0460  24         b     @mcloop               ; Write data to VDP
     22B2 8320     
0177               *--------------------------------------------------------------
0181 22B4 D7C5     filzz   data  >d7c5                 ; MOVB TMP1,*R15
0183               
0184               
0185               
0186               *//////////////////////////////////////////////////////////////
0187               *                  VDP LOW LEVEL FUNCTIONS
0188               *//////////////////////////////////////////////////////////////
0189               
0190               ***************************************************************
0191               * VDWA / VDRA - Setup VDP write or read address
0192               ***************************************************************
0193               *  BL   @VDWA
0194               *
0195               *  TMP0 = VDP destination address for write
0196               *--------------------------------------------------------------
0197               *  BL   @VDRA
0198               *
0199               *  TMP0 = VDP source address for read
0200               ********|*****|*********************|**************************
0201 22B6 0264  22 vdwa    ori   tmp0,>4000            ; Prepare VDP address for write
     22B8 4000     
0202 22BA 06C4  14 vdra    swpb  tmp0
0203 22BC D804  30         movb  tmp0,@vdpa
     22BE 8C02     
0204 22C0 06C4  14         swpb  tmp0
0205 22C2 D804  30         movb  tmp0,@vdpa            ; Set VDP address
     22C4 8C02     
0206 22C6 045B  20         b     *r11                  ; Exit
0207               
0208               ***************************************************************
0209               * VPUTB - VDP put single byte
0210               ***************************************************************
0211               *  BL @VPUTB
0212               *  DATA P0,P1
0213               *--------------------------------------------------------------
0214               *  P0 = VDP target address
0215               *  P1 = Byte to write
0216               ********|*****|*********************|**************************
0217 22C8 C13B  30 vputb   mov   *r11+,tmp0            ; Get VDP target address
0218 22CA C17B  30         mov   *r11+,tmp1            ; Get byte to write
0219               *--------------------------------------------------------------
0220               * Set VDP write address
0221               *--------------------------------------------------------------
0222 22CC 0264  22 xvputb  ori   tmp0,>4000            ; Prepare VDP address for write
     22CE 4000     
0223 22D0 06C4  14         swpb  tmp0                  ; \
0224 22D2 D804  30         movb  tmp0,@vdpa            ; | Set VDP write address
     22D4 8C02     
0225 22D6 06C4  14         swpb  tmp0                  ; | inlined @vdwa call
0226 22D8 D804  30         movb  tmp0,@vdpa            ; /
     22DA 8C02     
0227               *--------------------------------------------------------------
0228               * Write byte
0229               *--------------------------------------------------------------
0230 22DC 06C5  14         swpb  tmp1                  ; LSB to MSB
0231 22DE D7C5  30         movb  tmp1,*r15             ; Write byte
0232 22E0 045B  20         b     *r11                  ; Exit
0233               
0234               
0235               ***************************************************************
0236               * VGETB - VDP get single byte
0237               ***************************************************************
0238               *  bl   @vgetb
0239               *  data p0
0240               *--------------------------------------------------------------
0241               *  P0 = VDP source address
0242               *--------------------------------------------------------------
0243               *  bl   @xvgetb
0244               *
0245               *  tmp0 = VDP source address
0246               *--------------------------------------------------------------
0247               *  Output:
0248               *  tmp0 MSB = >00
0249               *  tmp0 LSB = VDP byte read
0250               ********|*****|*********************|**************************
0251 22E2 C13B  30 vgetb   mov   *r11+,tmp0            ; Get VDP source address
0252               *--------------------------------------------------------------
0253               * Set VDP read address
0254               *--------------------------------------------------------------
0255 22E4 06C4  14 xvgetb  swpb  tmp0                  ; \
0256 22E6 D804  30         movb  tmp0,@vdpa            ; | Set VDP read address
     22E8 8C02     
0257 22EA 06C4  14         swpb  tmp0                  ; | inlined @vdra call
0258 22EC D804  30         movb  tmp0,@vdpa            ; /
     22EE 8C02     
0259               *--------------------------------------------------------------
0260               * Read byte
0261               *--------------------------------------------------------------
0262 22F0 D120  30         movb  @vdpr,tmp0            ; Read byte
     22F2 8800     
0263 22F4 0984  32         srl   tmp0,8                ; Right align
0264 22F6 045B  20         b     *r11                  ; Exit
0265               
0266               
0267               ***************************************************************
0268               * VIDTAB - Dump videomode table
0269               ***************************************************************
0270               *  BL   @VIDTAB
0271               *  DATA P0
0272               *--------------------------------------------------------------
0273               *  P0 = Address of video mode table
0274               *--------------------------------------------------------------
0275               *  BL   @XIDTAB
0276               *
0277               *  TMP0 = Address of video mode table
0278               *--------------------------------------------------------------
0279               *  Remarks
0280               *  TMP1 = MSB is the VDP target register
0281               *         LSB is the value to write
0282               ********|*****|*********************|**************************
0283 22F8 C13B  30 vidtab  mov   *r11+,tmp0            ; Get video mode table
0284 22FA C394  26 xidtab  mov   *tmp0,r14             ; Store copy of VDP#0 and #1 in RAM
0285               *--------------------------------------------------------------
0286               * Calculate PNT base address
0287               *--------------------------------------------------------------
0288 22FC C144  18         mov   tmp0,tmp1
0289 22FE 05C5  14         inct  tmp1
0290 2300 D155  26         movb  *tmp1,tmp1            ; Get value for VDP#2
0291 2302 0245  22         andi  tmp1,>ff00            ; Only keep MSB
     2304 FF00     
0292 2306 0A25  20         sla   tmp1,2                ; TMP1 *= 400
0293 2308 C805  30         mov   tmp1,@wbase           ; Store calculated base
     230A 8328     
0294               *--------------------------------------------------------------
0295               * Dump VDP shadow registers
0296               *--------------------------------------------------------------
0297 230C 0205  20         li    tmp1,>8000            ; Start with VDP register 0
     230E 8000     
0298 2310 0206  20         li    tmp2,8
     2312 0008     
0299 2314 D834  40 vidta1  movb  *tmp0+,@tmp1lb        ; Write value to VDP register
     2316 830B     
0300 2318 06C5  14         swpb  tmp1
0301 231A D805  30         movb  tmp1,@vdpa
     231C 8C02     
0302 231E 06C5  14         swpb  tmp1
0303 2320 D805  30         movb  tmp1,@vdpa
     2322 8C02     
0304 2324 0225  22         ai    tmp1,>0100
     2326 0100     
0305 2328 0606  14         dec   tmp2
0306 232A 16F4  14         jne   vidta1                ; Next register
0307 232C C814  38         mov   *tmp0,@wcolmn         ; Store # of columns per row
     232E 833A     
0308 2330 045B  20         b     *r11
0309               
0310               
0311               ***************************************************************
0312               * PUTVR  - Put single VDP register
0313               ***************************************************************
0314               *  BL   @PUTVR
0315               *  DATA P0
0316               *--------------------------------------------------------------
0317               *  P0 = MSB is the VDP target register
0318               *       LSB is the value to write
0319               *--------------------------------------------------------------
0320               *  BL   @PUTVRX
0321               *
0322               *  TMP0 = MSB is the VDP target register
0323               *         LSB is the value to write
0324               ********|*****|*********************|**************************
0325 2332 C13B  30 putvr   mov   *r11+,tmp0
0326 2334 0264  22 putvrx  ori   tmp0,>8000
     2336 8000     
0327 2338 06C4  14         swpb  tmp0
0328 233A D804  30         movb  tmp0,@vdpa
     233C 8C02     
0329 233E 06C4  14         swpb  tmp0
0330 2340 D804  30         movb  tmp0,@vdpa
     2342 8C02     
0331 2344 045B  20         b     *r11
0332               
0333               
0334               ***************************************************************
0335               * PUTV01  - Put VDP registers #0 and #1
0336               ***************************************************************
0337               *  BL   @PUTV01
0338               ********|*****|*********************|**************************
0339 2346 C20B  18 putv01  mov   r11,tmp4              ; Save R11
0340 2348 C10E  18         mov   r14,tmp0
0341 234A 0984  32         srl   tmp0,8
0342 234C 06A0  32         bl    @putvrx               ; Write VR#0
     234E 2334     
0343 2350 0204  20         li    tmp0,>0100
     2352 0100     
0344 2354 D820  42         movb  @r14lb,@tmp0lb
     2356 831D     
     2358 8309     
0345 235A 06A0  32         bl    @putvrx               ; Write VR#1
     235C 2334     
0346 235E 0458  20         b     *tmp4                 ; Exit
0347               
0348               
0349               ***************************************************************
0350               * LDFNT - Load TI-99/4A font from GROM into VDP
0351               ***************************************************************
0352               *  BL   @LDFNT
0353               *  DATA P0,P1
0354               *--------------------------------------------------------------
0355               *  P0 = VDP Target address
0356               *  P1 = Font options
0357               *--------------------------------------------------------------
0358               * Uses registers tmp0-tmp4
0359               ********|*****|*********************|**************************
0360 2360 C20B  18 ldfnt   mov   r11,tmp4              ; Save R11
0361 2362 05CB  14         inct  r11                   ; Get 2nd parameter (font options)
0362 2364 C11B  26         mov   *r11,tmp0             ; Get P0
0363 2366 0242  22         andi  config,>7fff          ; CONFIG register bit 0=0
     2368 7FFF     
0364 236A 2120  32         coc   @wbit0,tmp0
     236C 2020     
0365 236E 1604  14         jne   ldfnt1
0366 2370 0262  22         ori   config,>8000          ; CONFIG register bit 0=1
     2372 8000     
0367 2374 0244  22         andi  tmp0,>7fff            ; Parameter value bit 0=0
     2376 7FFF     
0368               *--------------------------------------------------------------
0369               * Read font table address from GROM into tmp1
0370               *--------------------------------------------------------------
0371 2378 C124  34 ldfnt1  mov   @tmp006(tmp0),tmp0    ; Load GROM index address into tmp0
     237A 23E2     
0372 237C D804  38         movb  tmp0,@grmwa           ; Setup GROM source byte 1 for reading
     237E 9C02     
0373 2380 06C4  14         swpb  tmp0
0374 2382 D804  38         movb  tmp0,@grmwa           ; Setup GROM source byte 2 for reading
     2384 9C02     
0375 2386 D160  34         movb  @grmrd,tmp1           ; Read font table address byte 1
     2388 9800     
0376 238A 06C5  14         swpb  tmp1
0377 238C D160  34         movb  @grmrd,tmp1           ; Read font table address byte 2
     238E 9800     
0378 2390 06C5  14         swpb  tmp1
0379               *--------------------------------------------------------------
0380               * Setup GROM source address from tmp1
0381               *--------------------------------------------------------------
0382 2392 D805  38         movb  tmp1,@grmwa
     2394 9C02     
0383 2396 06C5  14         swpb  tmp1
0384 2398 D805  38         movb  tmp1,@grmwa           ; Setup GROM address for reading
     239A 9C02     
0385               *--------------------------------------------------------------
0386               * Setup VDP target address
0387               *--------------------------------------------------------------
0388 239C C118  26         mov   *tmp4,tmp0            ; Get P1 (VDP destination)
0389 239E 06A0  32         bl    @vdwa                 ; Setup VDP destination address
     23A0 22B6     
0390 23A2 05C8  14         inct  tmp4                  ; R11=R11+2
0391 23A4 C158  26         mov   *tmp4,tmp1            ; Get font options into TMP1
0392 23A6 0245  22         andi  tmp1,>7fff            ; Parameter value bit 0=0
     23A8 7FFF     
0393 23AA C1A5  34         mov   @tmp006+2(tmp1),tmp2  ; Get number of patterns to copy
     23AC 23E4     
0394 23AE C165  34         mov   @tmp006+4(tmp1),tmp1  ; 7 or 8 byte pattern ?
     23B0 23E6     
0395               *--------------------------------------------------------------
0396               * Copy from GROM to VRAM
0397               *--------------------------------------------------------------
0398 23B2 0B15  18 ldfnt2  src   tmp1,1                ; Carry set ?
0399 23B4 1812  14         joc   ldfnt4                ; Yes, go insert a >00
0400 23B6 D120  34         movb  @grmrd,tmp0
     23B8 9800     
0401               *--------------------------------------------------------------
0402               *   Make font fat
0403               *--------------------------------------------------------------
0404 23BA 20A0  32         coc   @wbit0,config         ; Fat flag set ?
     23BC 2020     
0405 23BE 1603  14         jne   ldfnt3                ; No, so skip
0406 23C0 D1C4  18         movb  tmp0,tmp3
0407 23C2 0917  18         srl   tmp3,1
0408 23C4 E107  18         soc   tmp3,tmp0
0409               *--------------------------------------------------------------
0410               *   Dump byte to VDP and do housekeeping
0411               *--------------------------------------------------------------
0412 23C6 D804  30 ldfnt3  movb  tmp0,@vdpw            ; Dump byte to VRAM
     23C8 8C00     
0413 23CA 0606  14         dec   tmp2
0414 23CC 16F2  14         jne   ldfnt2
0415 23CE 05C8  14         inct  tmp4                  ; R11=R11+2
0416 23D0 020F  20         li    r15,vdpw              ; Set VDP write address
     23D2 8C00     
0417 23D4 0242  22         andi  config,>7fff          ; CONFIG register bit 0=0
     23D6 7FFF     
0418 23D8 0458  20         b     *tmp4                 ; Exit
0419 23DA D820  46 ldfnt4  movb  @hb$00,@vdpw          ; Insert byte >00 into VRAM
     23DC 2000     
     23DE 8C00     
0420 23E0 10E8  14         jmp   ldfnt2
0421               *--------------------------------------------------------------
0422               * Fonts pointer table
0423               *--------------------------------------------------------------
0424 23E2 004C     tmp006  data  >004c,64*8,>0000      ; Pointer to TI title screen font
     23E4 0200     
     23E6 0000     
0425 23E8 004E             data  >004e,64*7,>0101      ; Pointer to upper case font
     23EA 01C0     
     23EC 0101     
0426 23EE 004E             data  >004e,96*7,>0101      ; Pointer to upper & lower case font
     23F0 02A0     
     23F2 0101     
0427 23F4 0050             data  >0050,32*7,>0101      ; Pointer to lower case font
     23F6 00E0     
     23F8 0101     
0428               
0429               
0430               
0431               ***************************************************************
0432               * YX2PNT - Get VDP PNT address for current YX cursor position
0433               ***************************************************************
0434               *  BL   @YX2PNT
0435               *--------------------------------------------------------------
0436               *  INPUT
0437               *  @WYX = Cursor YX position
0438               *--------------------------------------------------------------
0439               *  OUTPUT
0440               *  TMP0 = VDP address for entry in Pattern Name Table
0441               *--------------------------------------------------------------
0442               *  Register usage
0443               *  TMP0, R14, R15
0444               ********|*****|*********************|**************************
0445 23FA C10E  18 yx2pnt  mov   r14,tmp0              ; Save VDP#0 & VDP#1
0446 23FC C3A0  30         mov   @wyx,r14              ; Get YX
     23FE 832A     
0447 2400 098E  32         srl   r14,8                 ; Right justify (remove X)
0448 2402 3BA0  70         mpy   @wcolmn,r14           ; pos = Y * (columns per row)
     2404 833A     
0449               *--------------------------------------------------------------
0450               * Do rest of calculation with R15 (16 bit part is there)
0451               * Re-use R14
0452               *--------------------------------------------------------------
0453 2406 C3A0  30         mov   @wyx,r14              ; Get YX
     2408 832A     
0454 240A 024E  22         andi  r14,>00ff             ; Remove Y
     240C 00FF     
0455 240E A3CE  18         a     r14,r15               ; pos = pos + X
0456 2410 A3E0  30         a     @wbase,r15            ; pos = pos + (PNT base address)
     2412 8328     
0457               *--------------------------------------------------------------
0458               * Clean up before exit
0459               *--------------------------------------------------------------
0460 2414 C384  18         mov   tmp0,r14              ; Restore VDP#0 & VDP#1
0461 2416 C10F  18         mov   r15,tmp0              ; Return pos in TMP0
0462 2418 020F  20         li    r15,vdpw              ; VDP write address
     241A 8C00     
0463 241C 045B  20         b     *r11
0464               
0465               
0466               
0467               ***************************************************************
0468               * Put length-byte prefixed string at current YX
0469               ***************************************************************
0470               *  BL   @PUTSTR
0471               *  DATA P0
0472               *
0473               *  P0 = Pointer to string
0474               *--------------------------------------------------------------
0475               *  REMARKS
0476               *  First byte of string must contain length
0477               *--------------------------------------------------------------
0478               *  Register usage
0479               *  tmp1, tmp2, tmp3
0480               ********|*****|*********************|**************************
0481 241E C17B  30 putstr  mov   *r11+,tmp1
0482 2420 D1B5  28 xutst0  movb  *tmp1+,tmp2           ; Get length byte
0483 2422 C1CB  18 xutstr  mov   r11,tmp3
0484 2424 06A0  32         bl    @yx2pnt               ; Get VDP destination address
     2426 23FA     
0485 2428 C2C7  18         mov   tmp3,r11
0486 242A 0986  32         srl   tmp2,8                ; Right justify length byte
0487               *--------------------------------------------------------------
0488               * Put string
0489               *--------------------------------------------------------------
0490 242C C186  18         mov   tmp2,tmp2             ; Length = 0 ?
0491 242E 1305  14         jeq   !                     ; Yes, crash and burn
0492               
0493 2430 0286  22         ci    tmp2,255              ; Length > 255 ?
     2432 00FF     
0494 2434 1502  14         jgt   !                     ; Yes, crash and burn
0495               
0496 2436 0460  28         b     @xpym2v               ; Display string
     2438 248C     
0497               *--------------------------------------------------------------
0498               * Crash handler
0499               *--------------------------------------------------------------
0500 243A C80B  38 !       mov   r11,@>ffce            ; \ Save caller address
     243C FFCE     
0501 243E 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2440 2026     
0502               
0503               
0504               
0505               ***************************************************************
0506               * Put length-byte prefixed string at YX
0507               ***************************************************************
0508               *  BL   @PUTAT
0509               *  DATA P0,P1
0510               *
0511               *  P0 = YX position
0512               *  P1 = Pointer to string
0513               *--------------------------------------------------------------
0514               *  REMARKS
0515               *  First byte of string must contain length
0516               ********|*****|*********************|**************************
0517 2442 C83B  42 putat   mov   *r11+,@wyx            ; Set YX position
     2444 832A     
0518 2446 0460  28         b     @putstr
     2448 241E     
0519               
0520               
0521               ***************************************************************
0522               * putlst
0523               * Loop over string list and display
0524               ***************************************************************
0525               * bl  @putlst
0526               *--------------------------------------------------------------
0527               * INPUT
0528               * @wyx = Cursor position
0529               * tmp1 = Pointer to first length-prefixed string in list
0530               * tmp2 = Number of strings to display
0531               *--------------------------------------------------------------
0532               * OUTPUT
0533               * none
0534               *--------------------------------------------------------------
0535               * Register usage
0536               * tmp0, tmp1, tmp2, tmp3
0537               ********|*****|*********************|**************************
0538               putlst:
0539 244A 0649  14         dect  stack
0540 244C C64B  30         mov   r11,*stack            ; Save return address
0541 244E 0649  14         dect  stack
0542 2450 C644  30         mov   tmp0,*stack           ; Push tmp0
0543                       ;------------------------------------------------------
0544                       ; Dump strings to VDP
0545                       ;------------------------------------------------------
0546               putlst.loop:
0547 2452 D1D5  26         movb  *tmp1,tmp3            ; Get string length byte
0548 2454 0987  32         srl   tmp3,8                ; Right align
0549               
0550 2456 0649  14         dect  stack
0551 2458 C645  30         mov   tmp1,*stack           ; Push tmp1
0552 245A 0649  14         dect  stack
0553 245C C646  30         mov   tmp2,*stack           ; Push tmp2
0554 245E 0649  14         dect  stack
0555 2460 C647  30         mov   tmp3,*stack           ; Push tmp3
0556               
0557 2462 06A0  32         bl    @xutst0               ; Display string
     2464 2420     
0558                                                   ; \ i  tmp1 = Pointer to string
0559                                                   ; / i  @wyx = Cursor position at
0560               
0561 2466 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0562 2468 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0563 246A C179  30         mov   *stack+,tmp1          ; Pop tmp1
0564               
0565 246C 06A0  32         bl    @down                 ; Move cursor down
     246E 26CC     
0566               
0567 2470 A147  18         a     tmp3,tmp1             ; Add string length to pointer
0568 2472 0585  14         inc   tmp1                  ; Consider length byte
0569 2474 2560  32         czc   @w$0001,tmp1          ; Is address even ?
     2476 2002     
0570 2478 1301  14         jeq   !                     ; Yes, skip adjustment
0571 247A 0585  14         inc   tmp1                  ; Make address even
0572 247C 0606  14 !       dec   tmp2
0573 247E 15E9  14         jgt   putlst.loop
0574                       ;------------------------------------------------------
0575                       ; Exit
0576                       ;------------------------------------------------------
0577               putlst.exit:
0578 2480 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0579 2482 C2F9  30         mov   *stack+,r11           ; Pop r11
0580 2484 045B  20         b     *r11                  ; Return
                   < runlib.asm
0096               
0098                       copy  "copy_cpu_vram.asm"        ; CPU to VRAM copy functions
     **** ****     > copy_cpu_vram.asm
0001               * FILE......: copy_cpu_vram.asm
0002               * Purpose...: CPU memory to VRAM copy support module
0003               
0004               ***************************************************************
0005               * CPYM2V - Copy CPU memory to VRAM
0006               ***************************************************************
0007               *  BL   @CPYM2V
0008               *  DATA P0,P1,P2
0009               *--------------------------------------------------------------
0010               *  P0 = VDP start address
0011               *  P1 = RAM/ROM start address
0012               *  P2 = Number of bytes to copy
0013               *--------------------------------------------------------------
0014               *  BL @XPYM2V
0015               *
0016               *  TMP0 = VDP start address
0017               *  TMP1 = RAM/ROM start address
0018               *  TMP2 = Number of bytes to copy
0019               ********|*****|*********************|**************************
0020 2486 C13B  30 cpym2v  mov   *r11+,tmp0            ; VDP Start address
0021 2488 C17B  30         mov   *r11+,tmp1            ; RAM/ROM start address
0022 248A C1BB  30         mov   *r11+,tmp2            ; Bytes to copy
0023               *--------------------------------------------------------------
0024               *    Assert
0025               *--------------------------------------------------------------
0026 248C C186  18 xpym2v  mov   tmp2,tmp2             ; Bytes to copy = 0 ?
0027 248E 1604  14         jne   !                     ; No, continue
0028               
0029 2490 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2492 FFCE     
0030 2494 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2496 2026     
0031               *--------------------------------------------------------------
0032               *    Setup VDP write address
0033               *--------------------------------------------------------------
0034 2498 0264  22 !       ori   tmp0,>4000
     249A 4000     
0035 249C 06C4  14         swpb  tmp0
0036 249E D804  30         movb  tmp0,@vdpa
     24A0 8C02     
0037 24A2 06C4  14         swpb  tmp0
0038 24A4 D804  30         movb  tmp0,@vdpa
     24A6 8C02     
0039               *--------------------------------------------------------------
0040               *    Copy bytes from CPU memory to VRAM
0041               *--------------------------------------------------------------
0042 24A8 020F  20         li    r15,vdpw              ; Set VDP write address
     24AA 8C00     
0043 24AC C820  46         mov   @tmp008,@mcloop       ; Setup copy command
     24AE 24B6     
     24B0 8320     
0044 24B2 0460  24         b     @mcloop               ; Write data to VDP and return
     24B4 8320     
0045               *--------------------------------------------------------------
0046               * Data
0047               *--------------------------------------------------------------
0048 24B6 D7F5     tmp008  data  >d7f5                 ; MOVB *TMP1+,*R15
                   < runlib.asm
0100               
0102                       copy  "copy_vram_cpu.asm"        ; VRAM to CPU copy functions
     **** ****     > copy_vram_cpu.asm
0001               * FILE......: copy_vram_cpu.asm
0002               * Purpose...: VRAM to CPU memory copy support module
0003               
0004               ***************************************************************
0005               * CPYV2M - Copy VRAM to CPU memory
0006               ***************************************************************
0007               *  BL   @CPYV2M
0008               *  DATA P0,P1,P2
0009               *--------------------------------------------------------------
0010               *  P0 = VDP source address
0011               *  P1 = RAM target address
0012               *  P2 = Number of bytes to copy
0013               *--------------------------------------------------------------
0014               *  BL @XPYV2M
0015               *
0016               *  TMP0 = VDP source address
0017               *  TMP1 = RAM target address
0018               *  TMP2 = Number of bytes to copy
0019               ********|*****|*********************|**************************
0020 24B8 C13B  30 cpyv2m  mov   *r11+,tmp0            ; VDP source address
0021 24BA C17B  30         mov   *r11+,tmp1            ; Target address in RAM
0022 24BC C1BB  30         mov   *r11+,tmp2            ; Bytes to copy
0023               *--------------------------------------------------------------
0024               *    Setup VDP read address
0025               *--------------------------------------------------------------
0026 24BE 06C4  14 xpyv2m  swpb  tmp0
0027 24C0 D804  30         movb  tmp0,@vdpa
     24C2 8C02     
0028 24C4 06C4  14         swpb  tmp0
0029 24C6 D804  30         movb  tmp0,@vdpa
     24C8 8C02     
0030               *--------------------------------------------------------------
0031               *    Copy bytes from VDP memory to RAM
0032               *--------------------------------------------------------------
0033 24CA 020F  20         li    r15,vdpr              ; Set VDP read address
     24CC 8800     
0034 24CE C820  46         mov   @tmp007,@mcloop       ; Setup copy command
     24D0 24D8     
     24D2 8320     
0035 24D4 0460  24         b     @mcloop               ; Read data from VDP
     24D6 8320     
0036 24D8 DD5F     tmp007  data  >dd5f                 ; MOVB *R15,*TMP+
                   < runlib.asm
0104               
0106                       copy  "copy_cpu_cpu.asm"         ; CPU to CPU copy functions
     **** ****     > copy_cpu_cpu.asm
0001               * FILE......: copy_cpu_cpu.asm
0002               * Purpose...: CPU to CPU memory copy support module
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                       CPU COPY FUNCTIONS
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * CPYM2M - Copy CPU memory to CPU memory
0010               ***************************************************************
0011               *  BL   @CPYM2M
0012               *  DATA P0,P1,P2
0013               *--------------------------------------------------------------
0014               *  P0 = Memory source address
0015               *  P1 = Memory target address
0016               *  P2 = Number of bytes to copy
0017               *--------------------------------------------------------------
0018               *  BL @XPYM2M
0019               *
0020               *  TMP0 = Memory source address
0021               *  TMP1 = Memory target address
0022               *  TMP2 = Number of bytes to copy
0023               ********|*****|*********************|**************************
0024 24DA C13B  30 cpym2m  mov   *r11+,tmp0            ; Memory source address
0025 24DC C17B  30         mov   *r11+,tmp1            ; Memory target address
0026 24DE C1BB  30         mov   *r11+,tmp2            ; Number of bytes to copy
0027               *--------------------------------------------------------------
0028               * Do some checks first
0029               *--------------------------------------------------------------
0030 24E0 C186  18 xpym2m  mov   tmp2,tmp2             ; Bytes to copy = 0 ?
0031 24E2 1604  14         jne   cpychk                ; No, continue checking
0032               
0033 24E4 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     24E6 FFCE     
0034 24E8 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     24EA 2026     
0035               *--------------------------------------------------------------
0036               *    Check: 1 byte copy
0037               *--------------------------------------------------------------
0038 24EC 0286  22 cpychk  ci    tmp2,1                ; Bytes to copy = 1 ?
     24EE 0001     
0039 24F0 1603  14         jne   cpym0                 ; No, continue checking
0040 24F2 DD74  42         movb  *tmp0+,*tmp1+         ; Copy byte
0041 24F4 04C6  14         clr   tmp2                  ; Reset counter
0042 24F6 045B  20         b     *r11                  ; Return to caller
0043               *--------------------------------------------------------------
0044               *    Check: Uneven address handling
0045               *--------------------------------------------------------------
0046 24F8 0242  22 cpym0   andi  config,>7fff          ; Clear CONFIG bit 0
     24FA 7FFF     
0047 24FC C1C4  18         mov   tmp0,tmp3
0048 24FE 0247  22         andi  tmp3,1
     2500 0001     
0049 2502 1618  14         jne   cpyodd                ; Odd source address handling
0050 2504 C1C5  18 cpym1   mov   tmp1,tmp3
0051 2506 0247  22         andi  tmp3,1
     2508 0001     
0052 250A 1614  14         jne   cpyodd                ; Odd target address handling
0053               *--------------------------------------------------------------
0054               * 8 bit copy
0055               *--------------------------------------------------------------
0056 250C 20A0  32 cpym2   coc   @wbit0,config         ; CONFIG bit 0 set ?
     250E 2020     
0057 2510 1605  14         jne   cpym3
0058 2512 C820  46         mov   @tmp011,@mcloop       ; Setup byte copy command
     2514 253A     
     2516 8320     
0059 2518 0460  24         b     @mcloop               ; Copy memory and exit
     251A 8320     
0060               *--------------------------------------------------------------
0061               * 16 bit copy
0062               *--------------------------------------------------------------
0063 251C C1C6  18 cpym3   mov   tmp2,tmp3
0064 251E 0247  22         andi  tmp3,1                ; TMP3=1 -> ODD else EVEN
     2520 0001     
0065 2522 1301  14         jeq   cpym4
0066 2524 0606  14         dec   tmp2                  ; Make TMP2 even
0067 2526 CD74  46 cpym4   mov   *tmp0+,*tmp1+
0068 2528 0646  14         dect  tmp2
0069 252A 16FD  14         jne   cpym4
0070               *--------------------------------------------------------------
0071               * Copy last byte if ODD
0072               *--------------------------------------------------------------
0073 252C C1C7  18         mov   tmp3,tmp3
0074 252E 1301  14         jeq   cpymz
0075 2530 D554  38         movb  *tmp0,*tmp1
0076 2532 045B  20 cpymz   b     *r11                  ; Return to caller
0077               *--------------------------------------------------------------
0078               * Handle odd source/target address
0079               *--------------------------------------------------------------
0080 2534 0262  22 cpyodd  ori   config,>8000          ; Set CONFIG bit 0
     2536 8000     
0081 2538 10E9  14         jmp   cpym2
0082 253A DD74     tmp011  data  >dd74                 ; MOVB *TMP0+,*TMP1+
                   < runlib.asm
0108               
0112               
0116               
0118                       copy  "cpu_sams.asm"             ; Support for SAMS memory card
     **** ****     > cpu_sams.asm
0001               * FILE......: cpu_sams.asm
0002               * Purpose...: Low level support for SAMS memory expansion card
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                SAMS Memory Expansion support
0006               *//////////////////////////////////////////////////////////////
0007               
0008               *--------------------------------------------------------------
0009               * ACCESS and MAPPING
0010               * (by the late Bruce Harisson):
0011               *
0012               * To use other than the default setup, you have to do two
0013               * things:
0014               *
0015               * 1. You have to "turn on" the card's memory in the
0016               *    >4000 block and write to the mapping registers there.
0017               *    (bl  @sams.page.set)
0018               *
0019               * 2. You have to "turn on" the mapper function to make what
0020               *    you've written into the >4000 block take effect.
0021               *    (bl  @sams.mapping.on)
0022               *--------------------------------------------------------------
0023               *  SAMS                          Default SAMS page
0024               *  Register     Memory bank      (system startup)
0025               *  =======      ===========      ================
0026               *  >4004        >2000-2fff          >002
0027               *  >4006        >3000-4fff          >003
0028               *  >4014        >a000-afff          >00a
0029               *  >4016        >b000-bfff          >00b
0030               *  >4018        >c000-cfff          >00c
0031               *  >401a        >d000-dfff          >00d
0032               *  >401c        >e000-efff          >00e
0033               *  >401e        >f000-ffff          >00f
0034               *  Others       Inactive
0035               *--------------------------------------------------------------
0036               
0037               
0038               
0039               
0040               ***************************************************************
0041               * sams.page.get - Get SAMS page number for memory address
0042               ***************************************************************
0043               * bl   @sams.page.get
0044               *      data P0
0045               *--------------------------------------------------------------
0046               * P0 = Memory address (e.g. address >a100 will map to SAMS
0047               *      register >4014 (bank >a000 - >afff)
0048               *--------------------------------------------------------------
0049               * bl   @xsams.page.get
0050               *
0051               * tmp0 = Memory address (e.g. address >a100 will map to SAMS
0052               *        register >4014 (bank >a000 - >afff)
0053               *--------------------------------------------------------------
0054               * OUTPUT
0055               * waux1 = SAMS page number
0056               * waux2 = Address of affected SAMS register
0057               *--------------------------------------------------------------
0058               * Register usage
0059               * r0, tmp0, r12
0060               ********|*****|*********************|**************************
0061               sams.page.get:
0062 253C C13B  30         mov   *r11+,tmp0            ; Memory address
0063               xsams.page.get:
0064 253E 0649  14         dect  stack
0065 2540 C64B  30         mov   r11,*stack            ; Push return address
0066 2542 0649  14         dect  stack
0067 2544 C640  30         mov   r0,*stack             ; Push r0
0068 2546 0649  14         dect  stack
0069 2548 C64C  30         mov   r12,*stack            ; Push r12
0070               *--------------------------------------------------------------
0071               * Determine memory bank
0072               *--------------------------------------------------------------
0073 254A 09C4  40         srl   tmp0,12               ; Reduce address to 4K chunks
0074 254C 0A14  18         sla   tmp0,1                ; Registers are 2 bytes appart
0075               
0076 254E 0224  22         ai    tmp0,>4000            ; Add base address of "DSR" space
     2550 4000     
0077 2552 C804  30         mov   tmp0,@waux2           ; Save address of SAMS register
     2554 833E     
0078               *--------------------------------------------------------------
0079               * Get SAMS page number
0080               *--------------------------------------------------------------
0081 2556 020C  20         li    r12,>1e00             ; SAMS CRU address
     2558 1E00     
0082 255A 04C0  14         clr   r0
0083 255C 1D00  16         sbo   0                     ; Enable access to SAMS registers
0084 255E D014  26         movb  *tmp0,r0              ; Get SAMS page number
0085 2560 D100  18         movb  r0,tmp0
0086 2562 0984  32         srl   tmp0,8                ; Right align
0087 2564 C804  30         mov   tmp0,@waux1           ; Save SAMS page number
     2566 833C     
0088 2568 1E00  16         sbz   0                     ; Disable access to SAMS registers
0089               *--------------------------------------------------------------
0090               * Exit
0091               *--------------------------------------------------------------
0092               sams.page.get.exit:
0093 256A C339  30         mov   *stack+,r12           ; Pop r12
0094 256C C039  30         mov   *stack+,r0            ; Pop r0
0095 256E C2F9  30         mov   *stack+,r11           ; Pop return address
0096 2570 045B  20         b     *r11                  ; Return to caller
0097               
0098               
0099               
0100               
0101               ***************************************************************
0102               * sams.page.set - Set SAMS memory page
0103               ***************************************************************
0104               * bl   sams.page.set
0105               *      data P0,P1
0106               *--------------------------------------------------------------
0107               * P0 = SAMS page number
0108               * P1 = Memory address (e.g. address >a100 will map to SAMS
0109               *      register >4014 (bank >a000 - >afff)
0110               *--------------------------------------------------------------
0111               * bl   @xsams.page.set
0112               *
0113               * tmp0 = SAMS page number
0114               * tmp1 = Memory address (e.g. address >a100 will map to SAMS
0115               *        register >4014 (bank >a000 - >afff)
0116               *--------------------------------------------------------------
0117               * Register usage
0118               * r0, tmp0, tmp1, r12
0119               *--------------------------------------------------------------
0120               * SAMS page number should be in range 0-255 (>00 to >ff)
0121               *
0122               *  Page         Memory
0123               *  ====         ======
0124               *  >00             32K
0125               *  >1f            128K
0126               *  >3f            256K
0127               *  >7f            512K
0128               *  >ff           1024K
0129               ********|*****|*********************|**************************
0130               sams.page.set:
0131 2572 C13B  30         mov   *r11+,tmp0            ; Get SAMS page
0132 2574 C17B  30         mov   *r11+,tmp1            ; Get memory address
0133               xsams.page.set:
0134 2576 0649  14         dect  stack
0135 2578 C64B  30         mov   r11,*stack            ; Push return address
0136 257A 0649  14         dect  stack
0137 257C C640  30         mov   r0,*stack             ; Push r0
0138 257E 0649  14         dect  stack
0139 2580 C64C  30         mov   r12,*stack            ; Push r12
0140 2582 0649  14         dect  stack
0141 2584 C644  30         mov   tmp0,*stack           ; Push tmp0
0142 2586 0649  14         dect  stack
0143 2588 C645  30         mov   tmp1,*stack           ; Push tmp1
0144               *--------------------------------------------------------------
0145               * Determine memory bank
0146               *--------------------------------------------------------------
0147 258A 09C5  40         srl   tmp1,12               ; Reduce address to 4K chunks
0148 258C 0A15  18         sla   tmp1,1                ; Registers are 2 bytes appart
0149               *--------------------------------------------------------------
0150               * Assert on SAMS page number
0151               *--------------------------------------------------------------
0152 258E 0284  22         ci    tmp0,255              ; Crash if page > 255
     2590 00FF     
0153 2592 150D  14         jgt   !
0154               *--------------------------------------------------------------
0155               * Assert on SAMS register
0156               *--------------------------------------------------------------
0157 2594 0285  22         ci    tmp1,>1e              ; r@401e   >f000 - >ffff
     2596 001E     
0158 2598 150A  14         jgt   !
0159 259A 0285  22         ci    tmp1,>04              ; r@4004   >2000 - >2fff
     259C 0004     
0160 259E 1107  14         jlt   !
0161 25A0 0285  22         ci    tmp1,>12              ; r@4014   >a000 - >ffff
     25A2 0012     
0162 25A4 1508  14         jgt   sams.page.set.switch_page
0163 25A6 0285  22         ci    tmp1,>06              ; r@4006   >3000 - >3fff
     25A8 0006     
0164 25AA 1501  14         jgt   !
0165 25AC 1004  14         jmp   sams.page.set.switch_page
0166                       ;------------------------------------------------------
0167                       ; Crash the system
0168                       ;------------------------------------------------------
0169 25AE C80B  38 !       mov   r11,@>ffce            ; \ Save caller address
     25B0 FFCE     
0170 25B2 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     25B4 2026     
0171               *--------------------------------------------------------------
0172               * Switch memory bank to specified SAMS page
0173               *--------------------------------------------------------------
0174               sams.page.set.switch_page
0175 25B6 020C  20         li    r12,>1e00             ; SAMS CRU address
     25B8 1E00     
0176 25BA C004  18         mov   tmp0,r0               ; Must be in r0 for CRU use
0177 25BC 06C0  14         swpb  r0                    ; LSB to MSB
0178 25BE 1D00  16         sbo   0                     ; Enable access to SAMS registers
0179 25C0 D940  38         movb  r0,@>4000(tmp1)       ; Set SAMS bank number
     25C2 4000     
0180 25C4 1E00  16         sbz   0                     ; Disable access to SAMS registers
0181               *--------------------------------------------------------------
0182               * Exit
0183               *--------------------------------------------------------------
0184               sams.page.set.exit:
0185 25C6 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0186 25C8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0187 25CA C339  30         mov   *stack+,r12           ; Pop r12
0188 25CC C039  30         mov   *stack+,r0            ; Pop r0
0189 25CE C2F9  30         mov   *stack+,r11           ; Pop return address
0190 25D0 045B  20         b     *r11                  ; Return to caller
0191               
0192               
0193               
0194               
0195               ***************************************************************
0196               * sams.mapping.on - Enable SAMS mapping mode
0197               ***************************************************************
0198               *  bl   @sams.mapping.on
0199               *--------------------------------------------------------------
0200               *  Register usage
0201               *  r12
0202               ********|*****|*********************|**************************
0203               sams.mapping.on:
0204 25D2 0649  14         dect  stack
0205 25D4 C64C  30         mov   r12,*stack            ; Push r12
0206 25D6 020C  20         li    r12,>1e00             ; SAMS CRU address
     25D8 1E00     
0207 25DA 1D01  16         sbo   1                     ; Enable SAMS mapper
0208               *--------------------------------------------------------------
0209               * Exit
0210               *--------------------------------------------------------------
0211               sams.mapping.on.exit:
0212 25DC C339  30         mov   *stack+,r12           ; Pop r12
0213 25DE 045B  20         b     *r11                  ; Return to caller
0214               
0215               
0216               
0217               
0218               ***************************************************************
0219               * sams.mapping.off - Disable SAMS mapping mode
0220               ***************************************************************
0221               * bl  @sams.mapping.off
0222               *--------------------------------------------------------------
0223               * OUTPUT
0224               * none
0225               *--------------------------------------------------------------
0226               * Register usage
0227               * r12
0228               ********|*****|*********************|**************************
0229               sams.mapping.off:
0230 25E0 0649  14         dect  stack
0231 25E2 C64C  30         mov   r12,*stack            ; Push r12
0232 25E4 020C  20         li    r12,>1e00             ; SAMS CRU address
     25E6 1E00     
0233 25E8 1E01  16         sbz   1                     ; Disable SAMS mapper
0234               *--------------------------------------------------------------
0235               * Exit
0236               *--------------------------------------------------------------
0237               sams.mapping.off.exit:
0238 25EA C339  30         mov   *stack+,r12           ; Pop r12
0239 25EC 045B  20         b     *r11                  ; Return to caller
0240               
0241               
0242               
0243               
0244               
0245               ***************************************************************
0246               * sams.layout
0247               * Setup SAMS memory banks
0248               ***************************************************************
0249               * bl  @sams.layout
0250               *     data P0
0251               *--------------------------------------------------------------
0252               * INPUT
0253               * P0 = Pointer to SAMS page layout table
0254               *--------------------------------------------------------------
0255               * bl  @xsams.layout
0256               *
0257               * tmp0 = Pointer to SAMS page layout table
0258               *--------------------------------------------------------------
0259               * OUTPUT
0260               * none
0261               *--------------------------------------------------------------
0262               * Register usage
0263               * tmp0, r12
0264               ********|*****|*********************|**************************
0265               
0266               
0267               sams.layout:
0268 25EE C13B  30         mov   *r11+,tmp0            ; Get P0
0269               xsams.layout:
0270 25F0 0649  14         dect  stack
0271 25F2 C64B  30         mov   r11,*stack            ; Save return address
0272 25F4 0649  14         dect  stack
0273 25F6 C644  30         mov   tmp0,*stack           ; Save tmp0
0274 25F8 0649  14         dect  stack
0275 25FA C64C  30         mov   r12,*stack            ; Save r12
0276                       ;------------------------------------------------------
0277                       ; Set SAMS registers
0278                       ;------------------------------------------------------
0279 25FC 020C  20         li    r12,>1e00             ; SAMS CRU address
     25FE 1E00     
0280 2600 1D00  16         sbo   0                     ; Enable access to SAMS registers
0281               
0282 2602 C834  50         mov  *tmp0+,@>4004          ; Set page for >2000 - >2fff
     2604 4004     
0283 2606 C834  50         mov  *tmp0+,@>4006          ; Set page for >3000 - >3fff
     2608 4006     
0284 260A C834  50         mov  *tmp0+,@>4014          ; Set page for >a000 - >afff
     260C 4014     
0285 260E C834  50         mov  *tmp0+,@>4016          ; Set page for >b000 - >bfff
     2610 4016     
0286 2612 C834  50         mov  *tmp0+,@>4018          ; Set page for >c000 - >cfff
     2614 4018     
0287 2616 C834  50         mov  *tmp0+,@>401a          ; Set page for >d000 - >dfff
     2618 401A     
0288 261A C834  50         mov  *tmp0+,@>401c          ; Set page for >e000 - >efff
     261C 401C     
0289 261E C834  50         mov  *tmp0+,@>401e          ; Set page for >f000 - >ffff
     2620 401E     
0290               
0291 2622 1E00  16         sbz   0                     ; Disable access to SAMS registers
0292 2624 1D01  16         sbo   1                     ; Enable SAMS mapper
0293                       ;------------------------------------------------------
0294                       ; Exit
0295                       ;------------------------------------------------------
0296               sams.layout.exit:
0297 2626 C339  30         mov   *stack+,r12           ; Pop r12
0298 2628 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0299 262A C2F9  30         mov   *stack+,r11           ; Pop r11
0300 262C 045B  20         b     *r11                  ; Return to caller
0301               ***************************************************************
0302               * SAMS standard page layout table
0303               *--------------------------------------------------------------
0304               sams.layout.standard:
0305 262E 0200             data  >0200                 ; >2000-2fff, SAMS page >02
0306 2630 0300             data  >0300                 ; >3000-3fff, SAMS page >03
0307 2632 0A00             data  >0a00                 ; >a000-afff, SAMS page >0a
0308 2634 0B00             data  >0b00                 ; >b000-bfff, SAMS page >0b
0309 2636 0C00             data  >0c00                 ; >c000-cfff, SAMS page >0c
0310 2638 0D00             data  >0d00                 ; >d000-dfff, SAMS page >0d
0311 263A 0E00             data  >0e00                 ; >e000-efff, SAMS page >0e
0312 263C 0F00             data  >0f00                 ; >f000-ffff, SAMS page >0f
0313               
0314               
0315               ***************************************************************
0316               * sams.layout.copy
0317               * Copy SAMS memory layout
0318               ***************************************************************
0319               * bl  @sams.layout.copy
0320               *     data P0
0321               *--------------------------------------------------------------
0322               * P0 = Pointer to 8 words RAM buffer for results
0323               *--------------------------------------------------------------
0324               * OUTPUT
0325               * RAM buffer will have the SAMS page number for each range
0326               * 2000-2fff, 3000-3fff, a000-afff, b000-bfff, ...
0327               *--------------------------------------------------------------
0328               * Register usage
0329               * tmp0, tmp1, tmp2, tmp3
0330               ***************************************************************
0331               sams.layout.copy:
0332 263E C1FB  30         mov   *r11+,tmp3            ; Get P0
0333               
0334 2640 0649  14         dect  stack
0335 2642 C64B  30         mov   r11,*stack            ; Push return address
0336 2644 0649  14         dect  stack
0337 2646 C644  30         mov   tmp0,*stack           ; Push tmp0
0338 2648 0649  14         dect  stack
0339 264A C645  30         mov   tmp1,*stack           ; Push tmp1
0340 264C 0649  14         dect  stack
0341 264E C646  30         mov   tmp2,*stack           ; Push tmp2
0342 2650 0649  14         dect  stack
0343 2652 C647  30         mov   tmp3,*stack           ; Push tmp3
0344                       ;------------------------------------------------------
0345                       ; Copy SAMS layout
0346                       ;------------------------------------------------------
0347 2654 0205  20         li    tmp1,sams.layout.copy.data
     2656 2676     
0348 2658 0206  20         li    tmp2,8                ; Set loop counter
     265A 0008     
0349                       ;------------------------------------------------------
0350                       ; Set SAMS memory pages
0351                       ;------------------------------------------------------
0352               sams.layout.copy.loop:
0353 265C C135  30         mov   *tmp1+,tmp0           ; Get memory address
0354 265E 06A0  32         bl    @xsams.page.get       ; \ Get SAMS page
     2660 253E     
0355                                                   ; | i  tmp0   = Memory address
0356                                                   ; / o  @waux1 = SAMS page
0357               
0358 2662 CDE0  46         mov   @waux1,*tmp3+         ; Copy SAMS page number
     2664 833C     
0359               
0360 2666 0606  14         dec   tmp2                  ; Next iteration
0361 2668 16F9  14         jne   sams.layout.copy.loop ; Loop until done
0362                       ;------------------------------------------------------
0363                       ; Exit
0364                       ;------------------------------------------------------
0365               sams.layout.copy.exit:
0366 266A C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0367 266C C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0368 266E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0369 2670 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0370 2672 C2F9  30         mov   *stack+,r11           ; Pop r11
0371 2674 045B  20         b     *r11                  ; Return to caller
0372               ***************************************************************
0373               * SAMS memory range table
0374               *--------------------------------------------------------------
0375               sams.layout.copy.data:
0376 2676 2000             data  >2000                 ; >2000-2fff
0377 2678 3000             data  >3000                 ; >3000-3fff
0378 267A A000             data  >a000                 ; >a000-afff
0379 267C B000             data  >b000                 ; >b000-bfff
0380 267E C000             data  >c000                 ; >c000-cfff
0381 2680 D000             data  >d000                 ; >d000-dfff
0382 2682 E000             data  >e000                 ; >e000-efff
0383 2684 F000             data  >f000                 ; >f000-ffff
                   < runlib.asm
0120               
0124               
0126                       copy  "vdp_intscr.asm"           ; VDP interrupt & screen on/off
     **** ****     > vdp_intscr.asm
0001               * FILE......: vdp_intscr.asm
0002               * Purpose...: VDP interrupt & screen on/off
0003               
0004               ***************************************************************
0005               * SCROFF - Disable screen display
0006               ***************************************************************
0007               *  BL @SCROFF
0008               ********|*****|*********************|**************************
0009 2686 024E  22 scroff  andi  r14,>ffbf             ; VDP#R1 bit 1=0 (Disable screen display)
     2688 FFBF     
0010 268A 0460  28         b     @putv01
     268C 2346     
0011               
0012               ***************************************************************
0013               * SCRON - Disable screen display
0014               ***************************************************************
0015               *  BL @SCRON
0016               ********|*****|*********************|**************************
0017 268E 026E  22 scron   ori   r14,>0040             ; VDP#R1 bit 1=1 (Enable screen display)
     2690 0040     
0018 2692 0460  28         b     @putv01
     2694 2346     
0019               
0020               ***************************************************************
0021               * INTOFF - Disable VDP interrupt
0022               ***************************************************************
0023               *  BL @INTOFF
0024               ********|*****|*********************|**************************
0025 2696 024E  22 intoff  andi  r14,>ffdf             ; VDP#R1 bit 2=0 (Disable VDP interrupt)
     2698 FFDF     
0026 269A 0460  28         b     @putv01
     269C 2346     
0027               
0028               ***************************************************************
0029               * INTON - Enable VDP interrupt
0030               ***************************************************************
0031               *  BL @INTON
0032               ********|*****|*********************|**************************
0033 269E 026E  22 inton   ori   r14,>0020             ; VDP#R1 bit 2=1 (Enable VDP interrupt)
     26A0 0020     
0034 26A2 0460  28         b     @putv01
     26A4 2346     
                   < runlib.asm
0128               
0130                       copy  "vdp_sprites.asm"          ; VDP sprites
     **** ****     > vdp_sprites.asm
0001               ***************************************************************
0002               * FILE......: vdp_sprites.asm
0003               * Purpose...: Sprites support
0004               
0005               ***************************************************************
0006               * SMAG1X - Set sprite magnification 1x
0007               ***************************************************************
0008               *  BL @SMAG1X
0009               ********|*****|*********************|**************************
0010 26A6 024E  22 smag1x  andi  r14,>fffe             ; VDP#R1 bit 7=0 (Sprite magnification 1x)
     26A8 FFFE     
0011 26AA 0460  28         b     @putv01
     26AC 2346     
0012               
0013               ***************************************************************
0014               * SMAG2X - Set sprite magnification 2x
0015               ***************************************************************
0016               *  BL @SMAG2X
0017               ********|*****|*********************|**************************
0018 26AE 026E  22 smag2x  ori   r14,>0001             ; VDP#R1 bit 7=1 (Sprite magnification 2x)
     26B0 0001     
0019 26B2 0460  28         b     @putv01
     26B4 2346     
0020               
0021               ***************************************************************
0022               * S8X8 - Set sprite size 8x8 bits
0023               ***************************************************************
0024               *  BL @S8X8
0025               ********|*****|*********************|**************************
0026 26B6 024E  22 s8x8    andi  r14,>fffd             ; VDP#R1 bit 6=0 (Sprite size 8x8)
     26B8 FFFD     
0027 26BA 0460  28         b     @putv01
     26BC 2346     
0028               
0029               ***************************************************************
0030               * S16X16 - Set sprite size 16x16 bits
0031               ***************************************************************
0032               *  BL @S16X16
0033               ********|*****|*********************|**************************
0034 26BE 026E  22 s16x16  ori   r14,>0002             ; VDP#R1 bit 6=1 (Sprite size 16x16)
     26C0 0002     
0035 26C2 0460  28         b     @putv01
     26C4 2346     
                   < runlib.asm
0132               
0134                       copy  "vdp_cursor.asm"           ; VDP cursor handling
     **** ****     > vdp_cursor.asm
0001               * FILE......: vdp_cursor.asm
0002               * Purpose...: VDP cursor handling
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *               VDP cursor movement functions
0006               *//////////////////////////////////////////////////////////////
0007               
0008               
0009               ***************************************************************
0010               * AT - Set cursor YX position
0011               ***************************************************************
0012               *  bl   @yx
0013               *  data p0
0014               *--------------------------------------------------------------
0015               *  INPUT
0016               *  P0 = New Cursor YX position
0017               ********|*****|*********************|**************************
0018 26C6 C83B  42 at      mov   *r11+,@wyx
     26C8 832A     
0019 26CA 045B  20         b     *r11
0020               
0021               
0022               ***************************************************************
0023               * down - Increase cursor Y position
0024               ***************************************************************
0025               *  bl   @down
0026               ********|*****|*********************|**************************
0027 26CC B820  46 down    ab    @hb$01,@wyx
     26CE 2012     
     26D0 832A     
0028 26D2 045B  20         b     *r11
0029               
0030               
0031               ***************************************************************
0032               * up - Decrease cursor Y position
0033               ***************************************************************
0034               *  bl   @up
0035               ********|*****|*********************|**************************
0036 26D4 7820  46 up      sb    @hb$01,@wyx
     26D6 2012     
     26D8 832A     
0037 26DA 045B  20         b     *r11
0038               
0039               
0040               ***************************************************************
0041               * setx - Set cursor X position
0042               ***************************************************************
0043               *  bl   @setx
0044               *  data p0
0045               *--------------------------------------------------------------
0046               *  Register usage
0047               *  TMP0
0048               ********|*****|*********************|**************************
0049 26DC C13B  30 setx    mov   *r11+,tmp0            ; Set cursor X position
0050 26DE D120  30 xsetx   movb  @wyx,tmp0             ; Overwrite Y position
     26E0 832A     
0051 26E2 C804  30         mov   tmp0,@wyx             ; Save as new YX position
     26E4 832A     
0052 26E6 045B  20         b     *r11
                   < runlib.asm
0136               
0138                       copy  "vdp_yx2px_calc.asm"       ; VDP calculate pixel pos for YX coord
     **** ****     > vdp_yx2px_calc.asm
0001               * FILE......: vdp_yx2px_calc.asm
0002               * Purpose...: Calculate pixel position for YX coordinate
0003               
0004               ***************************************************************
0005               * YX2PX - Get pixel position for cursor YX position
0006               ***************************************************************
0007               *  BL   @YX2PX
0008               *
0009               *  (CONFIG:0 = 1) = Skip sprite adjustment
0010               *--------------------------------------------------------------
0011               *  INPUT
0012               *  @WYX   = Cursor YX position
0013               *--------------------------------------------------------------
0014               *  OUTPUT
0015               *  TMP0HB = Y pixel position
0016               *  TMP0LB = X pixel position
0017               *--------------------------------------------------------------
0018               *  Remarks
0019               *  This subroutine does not support multicolor mode
0020               ********|*****|*********************|**************************
0021 26E8 C120  30 yx2px   mov   @wyx,tmp0
     26EA 832A     
0022 26EC C18B  18 yx2pxx  mov   r11,tmp2              ; Save return address
0023 26EE 06C4  14         swpb  tmp0                  ; Y<->X
0024 26F0 04C5  14         clr   tmp1                  ; Clear before copy
0025 26F2 D144  18         movb  tmp0,tmp1             ; Copy X to TMP1
0026               *--------------------------------------------------------------
0027               * X pixel - Special F18a 80 colums treatment
0028               *--------------------------------------------------------------
0029 26F4 20A0  32         coc   @wbit1,config         ; f18a present ?
     26F6 201E     
0030 26F8 1609  14         jne   yx2pxx_normal         ; No, skip 80 cols handling
0031 26FA 8820  46         c     @wcolmn,@yx2pxx_c80   ; 80 columns mode enabled ?
     26FC 833A     
     26FE 2728     
0032 2700 1605  14         jne   yx2pxx_normal         ; No, skip 80 cols handling
0033               
0034 2702 0A15  18         sla   tmp1,1                ; X = X * 2
0035 2704 B144  18         ab    tmp0,tmp1             ; X = X + (original X)
0036 2706 0225  22         ai    tmp1,>0500            ; X = X + 5 (F18a mystery offset)
     2708 0500     
0037 270A 1002  14         jmp   yx2pxx_y_calc
0038               *--------------------------------------------------------------
0039               * X pixel - Normal VDP treatment
0040               *--------------------------------------------------------------
0041               yx2pxx_normal:
0042 270C D144  18         movb  tmp0,tmp1             ; Copy X to TMP1
0043               *--------------------------------------------------------------
0044 270E 0A35  22         sla   tmp1,3                ; X=X*8
0045               *--------------------------------------------------------------
0046               * Calculate Y pixel position
0047               *--------------------------------------------------------------
0048               yx2pxx_y_calc:
0049 2710 0A34  22         sla   tmp0,3                ; Y=Y*8
0050 2712 D105  18         movb  tmp1,tmp0
0051 2714 06C4  14         swpb  tmp0                  ; X<->Y
0052 2716 20A0  32 yx2pi1  coc   @wbit0,config         ; Skip sprite adjustment ?
     2718 2020     
0053 271A 1305  14         jeq   yx2pi3                ; Yes, exit
0054               *--------------------------------------------------------------
0055               * Adjust for Y sprite location
0056               * See VDP Programmers Guide, Section 9.2.1
0057               *--------------------------------------------------------------
0058 271C 7120  34 yx2pi2  sb    @hb$01,tmp0           ; Adjust Y. Top of screen is at >FF
     271E 2012     
0059 2720 9120  34         cb    @hb$d0,tmp0           ; Y position = >D0 ?
     2722 2024     
0060 2724 13FB  14         jeq   yx2pi2                ; Yes, but that's not allowed, adjust
0061 2726 0456  20 yx2pi3  b     *tmp2                 ; Exit
0062               *--------------------------------------------------------------
0063               * Local constants
0064               *--------------------------------------------------------------
0065               yx2pxx_c80:
0066 2728 0050            data   80
0067               
0068               
                   < runlib.asm
0140               
0144               
0148               
0150                       copy  "vdp_f18a.asm"             ; VDP F18a low-level functions
     **** ****     > vdp_f18a.asm
0001               * FILE......: vdp_f18a.asm
0002               * Purpose...: VDP F18A Support module
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                 VDP F18A LOW-LEVEL FUNCTIONS
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * f18unl - Unlock F18A VDP
0010               ***************************************************************
0011               *  bl   @f18unl
0012               ********|*****|*********************|**************************
0013 272A C20B  18 f18unl  mov   r11,tmp4              ; Save R11
0014 272C 06A0  32         bl    @putvr                ; Write once
     272E 2332     
0015 2730 391C             data  >391c                 ; VR1/57, value 00011100
0016 2732 06A0  32         bl    @putvr                ; Write twice
     2734 2332     
0017 2736 391C             data  >391c                 ; VR1/57, value 00011100
0018 2738 06A0  32         bl    @putvr
     273A 2332     
0019 273C 01E0             data  >01e0                 ; VR1, value 11100000, a sane setting
0020 273E 0458  20         b     *tmp4                 ; Exit
0021               
0022               
0023               ***************************************************************
0024               * f18lck - Lock F18A VDP
0025               ***************************************************************
0026               *  bl   @f18lck
0027               ********|*****|*********************|**************************
0028 2740 C20B  18 f18lck  mov   r11,tmp4              ; Save R11
0029 2742 06A0  32         bl    @putvr                ; VR1/57, value 00000000
     2744 2332     
0030 2746 3900             data  >3900
0031 2748 0458  20         b     *tmp4                 ; Exit
0032               
0033               
0034               ***************************************************************
0035               * f18idl - Put GPU in F18A VDP in idle mode (stop GPU program)
0036               ***************************************************************
0037               *  bl   @f18idl
0038               *--------------------------------------------------------------
0039               *  REMARKS
0040               *  Expects that the f18a is unlocked when calling this function.
0041               ********|*****|*********************|**************************
0042 274A C20B  18 f18idl  mov   r11,tmp4              ; Save R11
0043 274C 06A0  32         bl    @putvr                ; VR56 >38, value 00000000
     274E 2332     
0044 2750 3800             data  >3800                 ; Reset and load PC (GPU idle!)
0045 2752 0458  20         b     *tmp4                 ; Exit
0046               
0047               
0048               
0049               ***************************************************************
0050               * f18chk - Check if F18A VDP present
0051               ***************************************************************
0052               *  bl   @f18chk
0053               *--------------------------------------------------------------
0054               *  REMARKS
0055               *  Expects that the f18a is unlocked when calling this function.
0056               *  Runs GPU code at VDP >3f00
0057               ********|*****|*********************|**************************
0058 2754 C20B  18 f18chk  mov   r11,tmp4              ; Save R11
0059 2756 06A0  32         bl    @cpym2v
     2758 2486     
0060 275A 3F00             data  >3f00,f18chk_gpu,8    ; Copy F18A GPU code to VRAM
     275C 279E     
     275E 0008     
0061 2760 06A0  32         bl    @putvr
     2762 2332     
0062 2764 363F             data  >363f                 ; Load MSB of GPU PC (>3f) into VR54 (>36)
0063 2766 06A0  32         bl    @putvr
     2768 2332     
0064 276A 3700             data  >3700                 ; Load LSB of GPU PC (>00) into VR55 (>37)
0065                                                   ; GPU code should run now
0066               
0067 276C 06A0  32         bl    @putvr                ; VR56 >38, value 00000000
     276E 2332     
0068 2770 3800             data  >3800                 ; Reset and load PC (GPU idle!)
0069               ***************************************************************
0070               * VDP @>3f00 == 0 ? F18A present : F18a not present
0071               ***************************************************************
0072 2772 0204  20         li    tmp0,>3f00
     2774 3F00     
0073 2776 06A0  32         bl    @vdra                 ; Set VDP read address to >3f00
     2778 22BA     
0074 277A D120  30         movb  @vdpr,tmp0            ; Read MSB byte
     277C 8800     
0075 277E 0984  32         srl   tmp0,8
0076 2780 D120  30         movb  @vdpr,tmp0            ; Read LSB byte
     2782 8800     
0077 2784 C104  18         mov   tmp0,tmp0             ; For comparing with 0
0078 2786 1303  14         jeq   f18chk_yes
0079               f18chk_no:
0080 2788 0242  22         andi  config,>bfff          ; CONFIG Register bit 1=0
     278A BFFF     
0081 278C 1002  14         jmp   f18chk_exit
0082               f18chk_yes:
0083 278E 0262  22         ori   config,>4000          ; CONFIG Register bit 1=1
     2790 4000     
0084               
0085               f18chk_exit:
0086 2792 06A0  32         bl    @filv                 ; Clear VDP mem >3f00->3f05
     2794 228E     
0087 2796 3F00             data  >3f00,>00,6
     2798 0000     
     279A 0006     
0088 279C 0458  20         b     *tmp4                 ; Exit
0089               ***************************************************************
0090               * GPU code
0091               ********|*****|*********************|**************************
0092               f18chk_gpu
0093 279E 04E0             data  >04e0                 ; 3f00 \ 04e0  clr @>3f00
0094 27A0 3F00             data  >3f00                 ; 3f02 / 3f00
0095 27A2 0340             data  >0340                 ; 3f04   0340  idle
0096 27A4 10FF             data  >10ff                 ; 3f06   10ff  \ jmp $
0097                                                   ;              | Make classic99 debugger
0098                                                   ;              | happy if break on illegal
0099                                                   ;              / opcode is on.
0100               
0101               ***************************************************************
0102               * f18rst - Reset f18a into standard settings
0103               ***************************************************************
0104               *  bl   @f18rst
0105               *--------------------------------------------------------------
0106               *  REMARKS
0107               *  This is used to leave the F18A mode and revert all settings
0108               *  that could lead to corruption when doing BLWP @0
0109               *
0110               *  Is expected to run while the f18a is unlocked.
0111               *
0112               *  There are some F18a settings that stay on when doing blwp @0
0113               *  and the TI title screen cannot recover from that.
0114               *
0115               *  It is your responsibility to set video mode tables should
0116               *  you want to continue instead of doing blwp @0 after your
0117               *  program cleanup
0118               ********|*****|*********************|**************************
0119 27A6 C20B  18 f18rst  mov   r11,tmp4              ; Save R11
0120                       ;------------------------------------------------------
0121                       ; Reset all F18a VDP registers to power-on defaults
0122                       ;------------------------------------------------------
0123 27A8 06A0  32         bl    @putvr
     27AA 2332     
0124 27AC 3280             data  >3280                 ; F18a VR50 (>32), MSB 8=1
0125               
0126 27AE 06A0  32         bl    @putvr                ; VR1/57, value 00000000
     27B0 2332     
0127 27B2 3900             data  >3900                 ; Lock the F18a
0128 27B4 0458  20         b     *tmp4                 ; Exit
0129               
0130               
0131               
0132               ***************************************************************
0133               * f18fwv - Get F18A Firmware Version
0134               ***************************************************************
0135               *  bl   @f18fwv
0136               *--------------------------------------------------------------
0137               *  REMARKS
0138               *  Successfully tested with F18A v1.8, note that this does not
0139               *  work with F18 v1.3 but you shouldn't be using such old F18A
0140               *  firmware to begin with.
0141               *--------------------------------------------------------------
0142               *  TMP0 High nibble = major version
0143               *  TMP0 Low nibble  = minor version
0144               *
0145               *  Example: >0018     F18a Firmware v1.8
0146               ********|*****|*********************|**************************
0147 27B6 C20B  18 f18fwv  mov   r11,tmp4              ; Save R11
0148 27B8 20A0  32         coc   @wbit1,config         ; CONFIG bit 1 set ?
     27BA 201E     
0149 27BC 1609  14         jne   f18fw1
0150               ***************************************************************
0151               * Read F18A major/minor version
0152               ***************************************************************
0153 27BE C120  30         mov   @vdps,tmp0            ; Clear VDP status register
     27C0 8802     
0154 27C2 06A0  32         bl    @putvr                ; Write to VR#15 for setting F18A status
     27C4 2332     
0155 27C6 0F0E             data  >0f0e                 ; register to read (0e=VR#14)
0156 27C8 04C4  14         clr   tmp0
0157 27CA D120  30         movb  @vdps,tmp0
     27CC 8802     
0158 27CE 0984  32         srl   tmp0,8
0159 27D0 0458  20 f18fw1  b     *tmp4                 ; Exit
                   < runlib.asm
0152               
0154                       copy  "vdp_hchar.asm"            ; VDP hchar functions
     **** ****     > vdp_hchar.asm
0001               * FILE......: vdp_hchar.a99
0002               * Purpose...: VDP hchar module
0003               
0004               ***************************************************************
0005               * Repeat characters horizontally at YX
0006               ***************************************************************
0007               *  BL    @HCHAR
0008               *  DATA  P0,P1
0009               *  ...
0010               *  DATA  EOL                        ; End-of-list
0011               *--------------------------------------------------------------
0012               *  P0HB = Y position
0013               *  P0LB = X position
0014               *  P1HB = Byte to write
0015               *  P1LB = Number of times to repeat
0016               ********|*****|*********************|**************************
0017 27D2 C83B  42 hchar   mov   *r11+,@wyx            ; Set YX position
     27D4 832A     
0018 27D6 D17B  28         movb  *r11+,tmp1
0019 27D8 0985  32 hcharx  srl   tmp1,8                ; Byte to write
0020 27DA D1BB  28         movb  *r11+,tmp2
0021 27DC 0986  32         srl   tmp2,8                ; Repeat count
0022 27DE C1CB  18         mov   r11,tmp3
0023 27E0 06A0  32         bl    @yx2pnt               ; Get VDP address into TMP0
     27E2 23FA     
0024               *--------------------------------------------------------------
0025               *    Draw line
0026               *--------------------------------------------------------------
0027 27E4 020B  20         li    r11,hchar1
     27E6 27EC     
0028 27E8 0460  28         b     @xfilv                ; Draw
     27EA 2294     
0029               *--------------------------------------------------------------
0030               *    Do housekeeping
0031               *--------------------------------------------------------------
0032 27EC 8817  42 hchar1  c     *tmp3,@w$ffff         ; End-Of-List marker found ?
     27EE 2022     
0033 27F0 1302  14         jeq   hchar2                ; Yes, exit
0034 27F2 C2C7  18         mov   tmp3,r11
0035 27F4 10EE  14         jmp   hchar                 ; Next one
0036 27F6 05C7  14 hchar2  inct  tmp3
0037 27F8 0457  20         b     *tmp3                 ; Exit
                   < runlib.asm
0156               
0160               
0164               
0168               
0170                       copy  "snd_player.asm"           ; Sound player
     **** ****     > snd_player.asm
0001               * FILE......: snd_player.asm
0002               * Purpose...: Sound player support code
0003               
0004               
0005               ***************************************************************
0006               * MUTE - Mute all sound generators
0007               ***************************************************************
0008               *  BL  @MUTE
0009               *  Mute sound generators and clear sound pointer
0010               *
0011               *  BL  @MUTE2
0012               *  Mute sound generators without clearing sound pointer
0013               ********|*****|*********************|**************************
0014 27FA 04E0  26 mute    clr   @wsdlst               ; Clear sound pointer
     27FC 8334     
0015 27FE 40A0  34 mute2   szc   @wbit13,config        ; Turn off/pause sound player
     2800 2006     
0016 2802 0204  20         li    tmp0,muttab
     2804 2814     
0017 2806 0205  20         li    tmp1,sound            ; Sound generator port >8400
     2808 8400     
0018 280A D574  40         movb  *tmp0+,*tmp1          ; Generator 0
0019 280C D574  40         movb  *tmp0+,*tmp1          ; Generator 1
0020 280E D574  40         movb  *tmp0+,*tmp1          ; Generator 2
0021 2810 D554  38         movb  *tmp0,*tmp1           ; Generator 3
0022 2812 045B  20         b     *r11
0023 2814 9FBF     muttab  byte  >9f,>bf,>df,>ff       ; Table for muting all generators
     2816 DFFF     
0024               
0025               
0026               ***************************************************************
0027               * SDPREP - Prepare for playing sound
0028               ***************************************************************
0029               *  BL   @SDPREP
0030               *  DATA P0,P1
0031               *
0032               *  P0 = Address where tune is stored
0033               *  P1 = Option flags for sound player
0034               *--------------------------------------------------------------
0035               *  REMARKS
0036               *  Use the below equates for P1:
0037               *
0038               *  SDOPT1 => Tune is in CPU memory + loop
0039               *  SDOPT2 => Tune is in CPU memory
0040               *  SDOPT3 => Tune is in VRAM + loop
0041               *  SDOPT4 => Tune is in VRAM
0042               ********|*****|*********************|**************************
0043 2818 C81B  38 sdprep  mov   *r11,@wsdlst          ; Set tune address
     281A 8334     
0044 281C C83B  42         mov   *r11+,@wsdtmp         ; Set tune address in temp
     281E 8336     
0045 2820 0242  22         andi  config,>fff8          ; Clear bits 13-14-15
     2822 FFF8     
0046 2824 E0BB  30         soc   *r11+,config          ; Set options
0047 2826 D820  46         movb  @hb$01,@r13lb         ; Set initial duration
     2828 2012     
     282A 831B     
0048 282C 045B  20         b     *r11
0049               
0050               ***************************************************************
0051               * SDPLAY - Sound player for tune in VRAM or CPU memory
0052               ***************************************************************
0053               *  BL  @SDPLAY
0054               *--------------------------------------------------------------
0055               *  REMARKS
0056               *  Set config register bit13=0 to pause player.
0057               *  Set config register bit14=1 to repeat (or play next tune).
0058               ********|*****|*********************|**************************
0059 282E 20A0  32 sdplay  coc   @wbit13,config        ; Play tune ?
     2830 2006     
0060 2832 1301  14         jeq   sdpla1                ; Yes, play
0061 2834 045B  20         b     *r11
0062               *--------------------------------------------------------------
0063               * Initialisation
0064               *--------------------------------------------------------------
0065 2836 060D  14 sdpla1  dec   r13                   ; duration = duration - 1
0066 2838 9820  46         cb    @r13lb,@hb$00         ; R13LB == 0 ?
     283A 831B     
     283C 2000     
0067 283E 1301  14         jeq   sdpla3                ; Play next note
0068 2840 045B  20 sdpla2  b     *r11                  ; Note still busy, exit
0069 2842 20A0  32 sdpla3  coc   @wbit15,config        ; Play tune from CPU memory ?
     2844 2002     
0070 2846 131A  14         jeq   mmplay
0071               *--------------------------------------------------------------
0072               * Play tune from VDP memory
0073               *--------------------------------------------------------------
0074 2848 C120  30 vdplay  mov   @wsdtmp,tmp0          ; Get tune address
     284A 8336     
0075 284C 06C4  14         swpb  tmp0
0076 284E D804  30         movb  tmp0,@vdpa
     2850 8C02     
0077 2852 06C4  14         swpb  tmp0
0078 2854 D804  30         movb  tmp0,@vdpa
     2856 8C02     
0079 2858 04C4  14         clr   tmp0
0080 285A D120  30         movb  @vdpr,tmp0            ; length = 0 (end of tune) ?
     285C 8800     
0081 285E 131E  14         jeq   sdexit                ; Yes. exit
0082 2860 0984  32 vdpla1  srl   tmp0,8                ; Right justify length byte
0083 2862 A804  30         a     tmp0,@wsdtmp          ; Adjust for next table entry
     2864 8336     
0084 2866 D820  42 vdpla2  movb  @vdpr,@>8400          ; Feed byte to sound generator
     2868 8800     
     286A 8400     
0085 286C 0604  14         dec   tmp0
0086 286E 16FB  14         jne   vdpla2
0087 2870 D820  42         movb  @vdpr,@r13lb          ; Set duration counter
     2872 8800     
     2874 831B     
0088 2876 05E0  26 vdpla3  inct  @wsdtmp               ; Adjust for next table entry, honour byte (1) + (n+1)
     2878 8336     
0089 287A 045B  20         b     *r11
0090               *--------------------------------------------------------------
0091               * Play tune from CPU memory
0092               *--------------------------------------------------------------
0093 287C C120  30 mmplay  mov   @wsdtmp,tmp0
     287E 8336     
0094 2880 D174  28         movb  *tmp0+,tmp1           ; length = 0 (end of tune) ?
0095 2882 130C  14         jeq   sdexit                ; Yes, exit
0096 2884 0985  32 mmpla1  srl   tmp1,8                ; Right justify length byte
0097 2886 A805  30         a     tmp1,@wsdtmp          ; Adjust for next table entry
     2888 8336     
0098 288A D834  40 mmpla2  movb  *tmp0+,@>8400         ; Feed byte to sound generator
     288C 8400     
0099 288E 0605  14         dec   tmp1
0100 2890 16FC  14         jne   mmpla2
0101 2892 D814  38         movb  *tmp0,@r13lb          ; Set duration counter
     2894 831B     
0102 2896 05E0  26         inct  @wsdtmp               ; Adjust for next table entry, honour byte (1) + (n+1)
     2898 8336     
0103 289A 045B  20         b     *r11
0104               *--------------------------------------------------------------
0105               * Exit. Check if tune must be looped
0106               *--------------------------------------------------------------
0107 289C 20A0  32 sdexit  coc   @wbit14,config        ; Loop flag set ?
     289E 2004     
0108 28A0 1607  14         jne   sdexi2                ; No, exit
0109 28A2 C820  42         mov   @wsdlst,@wsdtmp
     28A4 8334     
     28A6 8336     
0110 28A8 D820  46         movb  @hb$01,@r13lb          ; Set initial duration
     28AA 2012     
     28AC 831B     
0111 28AE 045B  20 sdexi1  b     *r11                  ; Exit
0112 28B0 0242  22 sdexi2  andi  config,>fff8          ; Reset music player
     28B2 FFF8     
0113 28B4 045B  20         b     *r11                  ; Exit
0114               
                   < runlib.asm
0172               
0176               
0180               
0184               
0187                       copy  "keyb_rkscan.asm"          ; Use ROM#0 OS monitor KSCAN
     **** ****     > keyb_rkscan.asm
0001               * FILE......: keyb_rkscan.asm
0002               * Purpose...: Full (real) keyboard support module
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                     KEYBOARD FUNCTIONS
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * RKSCAN - Scan keyboard using ROM#0 OS monitor KSCAN
0010               ***************************************************************
0011               *  BL @RKSCAN
0012               *--------------------------------------------------------------
0013               * Register usage
0014               * none
0015               *--------------------------------------------------------------
0016               * Scratchpad usage by console KSCAN:
0017               *
0018               * >8373  I/O:    LSB of GPL subroutine stack pointer 80 = (>8380)
0019               * >8374  Input:  keyboard scan mode (default=0)
0020               * >8375  Output: ASCII code detected by keyboard scan
0021               * >8376  Output: Joystick Y-status by keyboard scan
0022               * >8377  Output: Joystick X-status by keyboard scan
0023               * >837c  Output: GPL status byte (>20 if key pressed)
0024               * >838a  I/O:    GPL substack
0025               * >838c  I/O:    GPL substack
0026               * >83c6  I/O:    ISRWS R3 Keyboard state and debounce info
0027               * >83c8  I/O:    ISRWS R4 Keyboard state and debounce info
0028               * >83ca  I/O:    ISRWS R5 Keyboard state and debounce info
0029               * >83d4  I/O:    ISRWS R10 Contents of VDP register 01
0030               * >83d6  I/O:    ISRWS R11 Screen timeout counter, blanks when 0000
0031               * >83d8  I/O:    ISRWS R12 (Backup return address old R11 in GPLWS)
0032               * >83f8  output: GPLWS R12 (CRU base address for key scan)
0033               * >83fa  output: GPLWS R13 (GROM/GRAM read data port 9800)
0034               * >83fe  I/O:    GPLWS R15 (VDP write address port 8c02)
0035               ********|*****|*********************|**************************
0036               rkscan:
0037 28B6 0649  14         dect  stack
0038 28B8 C64B  30         mov   r11,*stack            ; Push return address
0039 28BA 0649  14         dect  stack
0040 28BC C644  30         mov   tmp0,*stack           ; Push tmp0
0041                       ;------------------------------------------------------
0042                       ; (1) Check for alpha lock
0043                       ;------------------------------------------------------
0044 28BE 40A0  34         szc   @wbit10,config        ; Reset CONFIG register bit 10=0
     28C0 200C     
0045                                                   ; (alpha lock off)
0046               
0047                       ; See CRU interface and keyboard sections for details
0048                       ; http://www.nouspikel.com/ti99/titechpages.htm
0049               
0050 28C2 04CC  14         clr   r12                   ; Set base address (to bit 0) so
0051                                                   ; following offsets correspond
0052               
0053 28C4 1E15  16         sbz   21                    ; \ Set bit 21 (PIN 5 attached to alpha
0054                                                   ; / lock column) to 0.
0055               
0056 28C6 0BEC  44         src   r12,14                ; Burn some time (r12=0 no problem shifting)
0057               
0058 28C8 1F07  16         tb    7                     ; \ Copy CRU bit 7 into EQ bit
0059                                                   ; | That is CRU INT7*/P15 pin (keyboard row
0060                                                   ; | with keys FCTN, 2,3,4,5,1,
0061                                                   ; / [joy1-up,joy2-up, Alpha Lock])
0062               
0063 28CA 1302  14         jeq   !                     ; No, alpha lock is off
0064               
0065 28CC E0A0  34         soc   @wbit10,config        ; \ Yes, alpha lock is on.
     28CE 200C     
0066                                                   ; / Set CONFIG register bit 10=1
0067               
0068 28D0 1D15  16 !       sbo   21                    ; \ Reset bit 21 (Pin 5 attached to alpha
0069                                                   ; / lock column) to 1.
0070                       ;------------------------------------------------------
0071                       ; (2) Prepare for OS monitor kscan
0072                       ;------------------------------------------------------
0073 28D2 C820  46         mov   @scrpad.83c6,@>83c6   ; Required for lowercase support
     28D4 2912     
     28D6 83C6     
0074 28D8 C820  46         mov   @scrpad.83fa,@>83fa   ; Load GPLWS R13
     28DA 2914     
     28DC 83FA     
0075 28DE C820  46         mov   @scrpad.83fe,@>83fe   ; Load GPLWS R15
     28E0 2916     
     28E2 83FE     
0076               
0077 28E4 04C4  14         clr   tmp0                  ; \ Keyboard mode in MSB
0078                                                   ; / 00=Scan all of keyboard
0079               
0080 28E6 D804  30         movb  tmp0,@>8374           ; Set keyboard mode at @>8374
     28E8 8374     
0081                                                   ; (scan entire keyboard)
0082               
0083 28EA 02E0  18         lwpi  >83e0                 ; Activate GPL workspace
     28EC 83E0     
0084               
0085 28EE 06A0  28         bl    @kscan                ; Call KSCAN
     28F0 000E     
0086 28F2 02E0  18         lwpi  ws1                   ; Activate user workspace
     28F4 8300     
0087                       ;------------------------------------------------------
0088                       ; (3) Check if key pressed
0089                       ;------------------------------------------------------
0090 28F6 D120  30         movb  @>837c,tmp0           ; Get flag
     28F8 837C     
0091 28FA 0A34  22         sla   tmp0,3                ; Flag value is >20
0092 28FC 1707  14         jnc   rkscan.exit           ; No key pressed, exit early
0093                       ;------------------------------------------------------
0094                       ; (4) Key detected, store in memory
0095                       ;------------------------------------------------------
0096 28FE D120  30         movb  @>8375,tmp0           ; \ Key pressed is at @>8375
     2900 8375     
0097 2902 0984  32         srl   tmp0,8                ; / Move to LSB
0099 2904 C804  38         mov   tmp0,@rom0_kscan_out  ; Store ASCII value in user location
     2906 A028     
0103 2908 E0A0  34         soc   @wbit11,config        ; Set ANYKEY flag in CONFIG register
     290A 200A     
0104                       ;------------------------------------------------------
0105                       ; Exit
0106                       ;------------------------------------------------------
0107               rkscan.exit:
0108 290C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0109 290E C2F9  30         mov   *stack+,r11           ; Pop r11
0110 2910 045B  20         b     *r11                  ; Return to caller
0111               
0112               
0113 2912 0200     scrpad.83c6   data >0200            ; Required for KSCAN to support lowercase
0114 2914 9800     scrpad.83fa   data >9800
0115               
0116               ; Dummy value for GPLWS R15 (instead of VDP write address port 8c02)
0117               ; We do not want console KSCAN to fiddle with VDP registers while Stevie
0118               ; is running
0119               
0120 2916 83A0     scrpad.83fe   data >83a0            ; 8c02
                   < runlib.asm
0192               
0194                       copy  "cpu_hexsupport.asm"       ; CPU hex numbers support
     **** ****     > cpu_hexsupport.asm
0001               * FILE......: cpu_hexsupport.asm
0002               * Purpose...: CPU create, display hex numbers module
0003               
0004               ***************************************************************
0005               * mkhex - Convert hex word to string
0006               ***************************************************************
0007               *  bl   @mkhex
0008               *       data P0,P1,P2
0009               *--------------------------------------------------------------
0010               *  P0 = Pointer to 16 bit word
0011               *  P1 = Pointer to string buffer
0012               *  P2 = Offset for ASCII digit
0013               *       MSB determines offset for chars A-F
0014               *       LSB determines offset for chars 0-9
0015               *  (CONFIG#0 = 1) = Display number at cursor YX
0016               *--------------------------------------------------------------
0017               *  Memory usage:
0018               *  tmp0, tmp1, tmp2, tmp3, tmp4
0019               *  waux1, waux2, waux3
0020               *--------------------------------------------------------------
0021               *  Memory variables waux1-waux3 are used as temporary variables
0022               ********|*****|*********************|**************************
0023 2918 C13B  30 mkhex   mov   *r11+,tmp0            ; P0: Address of word
0024 291A C83B  42         mov   *r11+,@waux3          ; P1: Pointer to string buffer
     291C 8340     
0025 291E 04E0  26         clr   @waux1
     2920 833C     
0026 2922 04E0  26         clr   @waux2
     2924 833E     
0027 2926 0207  20         li    tmp3,waux1            ; We store results in WAUX1 and WAUX2
     2928 833C     
0028 292A C114  26         mov   *tmp0,tmp0            ; Get word
0029               *--------------------------------------------------------------
0030               *    Convert nibbles to bytes (is in wrong order)
0031               *--------------------------------------------------------------
0032 292C 0205  20         li    tmp1,4                ; 4 nibbles
     292E 0004     
0033 2930 C184  18 mkhex1  mov   tmp0,tmp2             ; Make work copy
0034 2932 0246  22         andi  tmp2,>000f            ; Only keep LSN
     2934 000F     
0035                       ;------------------------------------------------------
0036                       ; Determine offset for ASCII char
0037                       ;------------------------------------------------------
0038 2936 0286  22         ci    tmp2,>000a
     2938 000A     
0039 293A 1105  14         jlt   mkhex1.digit09
0040                       ;------------------------------------------------------
0041                       ; Add ASCII offset for digits A-F
0042                       ;------------------------------------------------------
0043               mkhex1.digitaf:
0044 293C C21B  26         mov   *r11,tmp4
0045 293E 0988  32         srl   tmp4,8                ; Right justify
0046 2940 0228  22         ai    tmp4,-10              ; Adjust offset for 'A-F'
     2942 FFF6     
0047 2944 1003  14         jmp   mkhex2
0048               
0049               mkhex1.digit09:
0050                       ;------------------------------------------------------
0051                       ; Add ASCII offset for digits 0-9
0052                       ;------------------------------------------------------
0053 2946 C21B  26         mov   *r11,tmp4
0054 2948 0248  22         andi  tmp4,>00ff            ; Only keep LSB
     294A 00FF     
0055               
0056 294C A188  18 mkhex2  a     tmp4,tmp2             ; Add ASCII-offset
0057 294E 06C6  14         swpb  tmp2
0058 2950 DDC6  32         movb  tmp2,*tmp3+           ; Save byte
0059 2952 0944  24         srl   tmp0,4                ; Next nibble
0060 2954 0605  14         dec   tmp1
0061 2956 16EC  14         jne   mkhex1                ; Repeat until all nibbles processed
0062 2958 0242  22         andi  config,>bfff          ; Reset bit 1 in config register
     295A BFFF     
0063               *--------------------------------------------------------------
0064               *    Build first 2 bytes in correct order
0065               *--------------------------------------------------------------
0066 295C C160  30         mov   @waux3,tmp1           ; Get pointer
     295E 8340     
0067 2960 04D5  26         clr   *tmp1                 ; Set length byte to 0
0068 2962 0585  14         inc   tmp1                  ; Next byte, not word!
0069 2964 C120  30         mov   @waux2,tmp0
     2966 833E     
0070 2968 06C4  14         swpb  tmp0
0071 296A DD44  32         movb  tmp0,*tmp1+
0072 296C 06C4  14         swpb  tmp0
0073 296E DD44  32         movb  tmp0,*tmp1+
0074               *--------------------------------------------------------------
0075               *    Set length byte
0076               *--------------------------------------------------------------
0077 2970 C120  30         mov   @waux3,tmp0           ; Get start of string buffer
     2972 8340     
0078 2974 D520  46         movb  @hb$04,*tmp0          ; Set lengh byte to 4
     2976 2016     
0079 2978 05CB  14         inct  r11                   ; Skip Parameter P2
0080               *--------------------------------------------------------------
0081               *    Build last 2 bytes in correct order
0082               *--------------------------------------------------------------
0083 297A C120  30         mov   @waux1,tmp0
     297C 833C     
0084 297E 06C4  14         swpb  tmp0
0085 2980 DD44  32         movb  tmp0,*tmp1+
0086 2982 06C4  14         swpb  tmp0
0087 2984 DD44  32         movb  tmp0,*tmp1+
0088               *--------------------------------------------------------------
0089               *    Display hex number ?
0090               *--------------------------------------------------------------
0091 2986 20A0  32         coc   @wbit0,config         ; Check if 'display' bit is set
     2988 2020     
0092 298A 1301  14         jeq   mkhex3                ; Yes, so show at current YX position
0093 298C 045B  20         b     *r11                  ; Exit
0094               *--------------------------------------------------------------
0095               *  Display hex number on screen at current YX position
0096               *--------------------------------------------------------------
0097 298E 0242  22 mkhex3  andi  config,>7fff          ; Reset bit 0
     2990 7FFF     
0098 2992 C160  30         mov   @waux3,tmp1           ; Get Pointer to string
     2994 8340     
0099 2996 0460  28         b     @xutst0               ; Display string
     2998 2420     
0100 299A 0610     prefix  data  >0610                 ; Length byte + blank
0101               
0102               
0103               
0104               ***************************************************************
0105               * puthex - Put 16 bit word on screen
0106               ***************************************************************
0107               *  bl   @mkhex
0108               *       data P0,P1,P2,P3
0109               *--------------------------------------------------------------
0110               *  P0 = YX position
0111               *  P1 = Pointer to 16 bit word
0112               *  P2 = Pointer to string buffer
0113               *  P3 = Offset for ASCII digit
0114               *       MSB determines offset for chars A-F
0115               *       LSB determines offset for chars 0-9
0116               *--------------------------------------------------------------
0117               *  Memory usage:
0118               *  tmp0, tmp1, tmp2, tmp3
0119               *  waux1, waux2, waux3
0120               ********|*****|*********************|**************************
0121 299C C83B  42 puthex  mov   *r11+,@wyx            ; Set cursor
     299E 832A     
0122 29A0 0262  22         ori   config,>8000          ; CONFIG register bit 0=1
     29A2 8000     
0123 29A4 10B9  14         jmp   mkhex                 ; Convert number and display
0124               
                   < runlib.asm
0196               
0198                       copy  "cpu_numsupport.asm"       ; CPU unsigned numbers support
     **** ****     > cpu_numsupport.asm
0001               * FILE......: cpu_numsupport.asm
0002               * Purpose...: CPU create, display numbers module
0003               
0004               ***************************************************************
0005               * MKNUM - Convert unsigned number to string
0006               ***************************************************************
0007               *  BL   @MKNUM
0008               *  DATA P0,P1,P2
0009               *
0010               *  P0   = Pointer to 16 bit unsigned number
0011               *  P1   = Pointer to 5 byte string buffer
0012               *  P2HB = Offset for ASCII digit
0013               *  P2LB = Character for replacing leading 0's
0014               *
0015               *  (CONFIG:0 = 1) = Display number at cursor YX
0016               *-------------------------------------------------------------
0017               *  Destroys registers tmp0-tmp4
0018               ********|*****|*********************|**************************
0019 29A6 0207  20 mknum   li    tmp3,5                ; Digit counter
     29A8 0005     
0020 29AA C17B  30         mov   *r11+,tmp1            ; \ Get 16 bit unsigned number
0021 29AC C155  26         mov   *tmp1,tmp1            ; /
0022 29AE C23B  30         mov   *r11+,tmp4            ; Pointer to string buffer
0023 29B0 0228  22         ai    tmp4,4                ; Get end of buffer
     29B2 0004     
0024 29B4 0206  20         li    tmp2,10               ; Divide by 10 to isolate last digit
     29B6 000A     
0025               *--------------------------------------------------------------
0026               *  Do string conversion
0027               *--------------------------------------------------------------
0028 29B8 04C4  14 mknum1  clr   tmp0                  ; Clear the high word of the dividend
0029 29BA 3D06 128         div   tmp2,tmp0             ; (TMP0:TMP1) / 10 (TMP2)
0030 29BC 06C5  14         swpb  tmp1                  ; Move to high-byte for writing to buffer
0031 29BE B15B  26         ab    *r11,tmp1             ; Add offset for ASCII digit
0032 29C0 D605  30         movb  tmp1,*tmp4            ; Write remainder to string buffer
0033 29C2 C144  18         mov   tmp0,tmp1             ; Move integer result into R4 for next digit
0034 29C4 0608  14         dec   tmp4                  ; Adjust string pointer for next digit
0035 29C6 0607  14         dec   tmp3                  ; Decrease counter
0036 29C8 16F7  14         jne   mknum1                ; Do next digit
0037               *--------------------------------------------------------------
0038               *  Replace leading 0's with fill character
0039               *--------------------------------------------------------------
0040 29CA 0207  20         li    tmp3,4                ; Check first 4 digits
     29CC 0004     
0041 29CE 0588  14         inc   tmp4                  ; Too far, back to buffer start
0042 29D0 C11B  26         mov   *r11,tmp0
0043 29D2 0A84  32         sla   tmp0,8                ; Only keep fill character in HB
0044 29D4 96D8  34 mknum2  cb    *tmp4,*r11            ; Digit = 0 ?
0045 29D6 1305  14         jeq   mknum4                ; Yes, replace with fill character
0046 29D8 05CB  14 mknum3  inct  r11
0047 29DA 20A0  32         coc   @wbit0,config         ; Check if 'display' bit is set
     29DC 2020     
0048 29DE 1305  14         jeq   mknum5                ; Yes, so show at current YX position
0049 29E0 045B  20         b     *r11                  ; Exit
0050 29E2 DE04  32 mknum4  movb  tmp0,*tmp4+           ; Replace leading 0 with fill character
0051 29E4 0607  14         dec   tmp3                  ; 4th digit processed ?
0052 29E6 13F8  14         jeq   mknum3                ; Yes, exit
0053 29E8 10F5  14         jmp   mknum2                ; No, next one
0054               *--------------------------------------------------------------
0055               *  Display integer on screen at current YX position
0056               *--------------------------------------------------------------
0057 29EA 0242  22 mknum5  andi  config,>7fff          ; Reset bit 0
     29EC 7FFF     
0058 29EE C10B  18         mov   r11,tmp0
0059 29F0 0224  22         ai    tmp0,-4
     29F2 FFFC     
0060 29F4 C154  26         mov   *tmp0,tmp1            ; Get buffer address
0061 29F6 0206  20         li    tmp2,>0500            ; String length = 5
     29F8 0500     
0062 29FA 0460  28         b     @xutstr               ; Display string
     29FC 2422     
0063               
0064               
0065               
0066               
0067               ***************************************************************
0068               * trimnum - Trim unsigned number string
0069               ***************************************************************
0070               *  bl   @trimnum
0071               *  data p0,p1,p2
0072               *--------------------------------------------------------------
0073               *  p0   = Pointer to 5 byte string buffer (no length byte!)
0074               *  p1   = Pointer to output variable
0075               *  p2   = Padding character to match against
0076               *--------------------------------------------------------------
0077               *  Copy unsigned number string into a length-padded, left
0078               *  justified string for display with putstr, putat, ...
0079               *
0080               *  The new string starts at index 5 in buffer, overwriting
0081               *  anything that is located there !
0082               *
0083               *               01234|56789A
0084               *  Before...:   XXXXX          length
0085               *  After....:   XXXXY|zY       z=1
0086               *               XXXYY|zYY      z=2
0087               *               XXYYY|zYYY     z=3
0088               *               XYYYY|zYYYY    z=4
0089               *               YYYYY|zYYYYY   z=5
0090               *--------------------------------------------------------------
0091               *  Destroys registers tmp0-tmp3
0092               ********|*****|*********************|**************************
0093               trimnum:
0094 29FE C13B  30         mov   *r11+,tmp0            ; Get pointer to input string
0095 2A00 C17B  30         mov   *r11+,tmp1            ; Get pointer to output string
0096 2A02 C1BB  30         mov   *r11+,tmp2            ; Get padding character
0097 2A04 06C6  14         swpb  tmp2                  ; LO <-> HI
0098 2A06 0207  20         li    tmp3,5                ; Set counter
     2A08 0005     
0099                       ;------------------------------------------------------
0100                       ; Scan for padding character from left to right
0101                       ;------------------------------------------------------:
0102               trimnum_scan:
0103 2A0A 9194  26         cb    *tmp0,tmp2            ; Matches padding character ?
0104 2A0C 1604  14         jne   trimnum_setlen        ; No, exit loop
0105 2A0E 0584  14         inc   tmp0                  ; Next character
0106 2A10 0607  14         dec   tmp3                  ; Last digit reached ?
0107 2A12 1301  14         jeq   trimnum_setlen        ; yes, exit loop
0108 2A14 10FA  14         jmp   trimnum_scan
0109                       ;------------------------------------------------------
0110                       ; Scan completed, set length byte new string
0111                       ;------------------------------------------------------
0112               trimnum_setlen:
0113 2A16 06C7  14         swpb  tmp3                  ; LO <-> HI
0114 2A18 DD47  32         movb  tmp3,*tmp1+           ; Update string-length in work buffer
0115 2A1A 06C7  14         swpb  tmp3                  ; LO <-> HI
0116                       ;------------------------------------------------------
0117                       ; Start filling new string
0118                       ;------------------------------------------------------
0119               trimnum_fill:
0120 2A1C DD74  42         movb  *tmp0+,*tmp1+         ; Copy character
0121 2A1E 0607  14         dec   tmp3                  ; Last character ?
0122 2A20 16FD  14         jne   trimnum_fill          ; Not yet, repeat
0123 2A22 045B  20         b     *r11                  ; Return
0124               
0125               
0126               
0127               
0128               ***************************************************************
0129               * PUTNUM - Put unsigned number on screen
0130               ***************************************************************
0131               *  BL   @PUTNUM
0132               *  DATA P0,P1,P2,P3
0133               *--------------------------------------------------------------
0134               *  P0   = YX position
0135               *  P1   = Pointer to 16 bit unsigned number
0136               *  P2   = Pointer to 5 byte string buffer
0137               *  P3HB = Offset for ASCII digit
0138               *  P3LB = Character for replacing leading 0's
0139               ********|*****|*********************|**************************
0140 2A24 C83B  42 putnum  mov   *r11+,@wyx            ; Set cursor
     2A26 832A     
0141 2A28 0262  22         ori   config,>8000          ; CONFIG register bit 0=1
     2A2A 8000     
0142 2A2C 10BC  14         jmp   mknum                 ; Convert number and display
                   < runlib.asm
0200               
0204               
0208               
0212               
0216               
0218                       copy  "cpu_strings.asm"          ; String utilities support
     **** ****     > cpu_strings.asm
0001               * FILE......: cpu_strings.asm
0002               * Purpose...: CPU string manipulation library
0003               
0004               
0005               ***************************************************************
0006               * string.ltrim - Left justify string
0007               ***************************************************************
0008               *  bl   @string.ltrim
0009               *       data p0,p1,p2
0010               *--------------------------------------------------------------
0011               *  P0 = Pointer to length-prefix string
0012               *  P1 = Pointer to RAM work buffer
0013               *  P2 = Fill character
0014               *--------------------------------------------------------------
0015               *  BL   @xstring.ltrim
0016               *
0017               *  TMP0 = Pointer to length-prefix string
0018               *  TMP1 = Pointer to RAM work buffer
0019               *  TMP2 = Fill character
0020               ********|*****|*********************|**************************
0021               string.ltrim:
0022 2A2E 0649  14         dect  stack
0023 2A30 C64B  30         mov   r11,*stack            ; Save return address
0024 2A32 0649  14         dect  stack
0025 2A34 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 2A36 0649  14         dect  stack
0027 2A38 C645  30         mov   tmp1,*stack           ; Push tmp1
0028 2A3A 0649  14         dect  stack
0029 2A3C C646  30         mov   tmp2,*stack           ; Push tmp2
0030 2A3E 0649  14         dect  stack
0031 2A40 C647  30         mov   tmp3,*stack           ; Push tmp3
0032                       ;-----------------------------------------------------------------------
0033                       ; Get parameter values
0034                       ;-----------------------------------------------------------------------
0035 2A42 C13B  30         mov   *r11+,tmp0            ; Pointer to length-prefixed string
0036 2A44 C17B  30         mov   *r11+,tmp1            ; RAM work buffer
0037 2A46 C1BB  30         mov   *r11+,tmp2            ; Fill character
0038 2A48 100A  14         jmp   !
0039                       ;-----------------------------------------------------------------------
0040                       ; Register version
0041                       ;-----------------------------------------------------------------------
0042               xstring.ltrim:
0043 2A4A 0649  14         dect  stack
0044 2A4C C64B  30         mov   r11,*stack            ; Save return address
0045 2A4E 0649  14         dect  stack
0046 2A50 C644  30         mov   tmp0,*stack           ; Push tmp0
0047 2A52 0649  14         dect  stack
0048 2A54 C645  30         mov   tmp1,*stack           ; Push tmp1
0049 2A56 0649  14         dect  stack
0050 2A58 C646  30         mov   tmp2,*stack           ; Push tmp2
0051 2A5A 0649  14         dect  stack
0052 2A5C C647  30         mov   tmp3,*stack           ; Push tmp3
0053                       ;-----------------------------------------------------------------------
0054                       ; Start
0055                       ;-----------------------------------------------------------------------
0056 2A5E C1D4  26 !       mov   *tmp0,tmp3
0057 2A60 06C7  14         swpb  tmp3                  ; LO <-> HI
0058 2A62 0247  22         andi  tmp3,>00ff            ; Discard HI byte tmp2 (only keep length)
     2A64 00FF     
0059 2A66 0A86  32         sla   tmp2,8                ; LO -> HI fill character
0060                       ;-----------------------------------------------------------------------
0061                       ; Scan string from left to right and compare with fill character
0062                       ;-----------------------------------------------------------------------
0063               string.ltrim.scan:
0064 2A68 9194  26         cb    *tmp0,tmp2            ; Do we have a fill character?
0065 2A6A 1604  14         jne   string.ltrim.move     ; No, now move string left
0066 2A6C 0584  14         inc   tmp0                  ; Next byte
0067 2A6E 0607  14         dec   tmp3                  ; Shorten string length
0068 2A70 1301  14         jeq   string.ltrim.move     ; Exit if all characters processed
0069 2A72 10FA  14         jmp   string.ltrim.scan     ; Scan next characer
0070                       ;-----------------------------------------------------------------------
0071                       ; Copy part of string to RAM work buffer (This is the left-justify)
0072                       ;-----------------------------------------------------------------------
0073               string.ltrim.move:
0074 2A74 9194  26         cb    *tmp0,tmp2            ; Do we have a fill character?
0075 2A76 C1C7  18         mov   tmp3,tmp3             ; String length = 0 ?
0076 2A78 1306  14         jeq   string.ltrim.panic    ; File length assert
0077 2A7A C187  18         mov   tmp3,tmp2
0078 2A7C 06C7  14         swpb  tmp3                  ; HI <-> LO
0079 2A7E DD47  32         movb  tmp3,*tmp1+           ; Set new string length byte in RAM workbuf
0080               
0081 2A80 06A0  32         bl    @xpym2m               ; tmp0 = Memory source address
     2A82 24E0     
0082                                                   ; tmp1 = Memory target address
0083                                                   ; tmp2 = Number of bytes to copy
0084 2A84 1004  14         jmp   string.ltrim.exit
0085                       ;-----------------------------------------------------------------------
0086                       ; CPU crash
0087                       ;-----------------------------------------------------------------------
0088               string.ltrim.panic:
0089 2A86 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2A88 FFCE     
0090 2A8A 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2A8C 2026     
0091                       ;----------------------------------------------------------------------
0092                       ; Exit
0093                       ;----------------------------------------------------------------------
0094               string.ltrim.exit:
0095 2A8E C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0096 2A90 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0097 2A92 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0098 2A94 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0099 2A96 C2F9  30         mov   *stack+,r11           ; Pop r11
0100 2A98 045B  20         b     *r11                  ; Return to caller
0101               
0102               
0103               
0104               
0105               ***************************************************************
0106               * string.getlenc - Get length of C-style string
0107               ***************************************************************
0108               *  bl   @string.getlenc
0109               *       data p0,p1
0110               *--------------------------------------------------------------
0111               *  P0 = Pointer to C-style string
0112               *  P1 = String termination character
0113               *--------------------------------------------------------------
0114               *  bl   @xstring.getlenc
0115               *
0116               *  TMP0 = Pointer to C-style string
0117               *  TMP1 = Termination character
0118               *--------------------------------------------------------------
0119               *  OUTPUT:
0120               *  @waux1 = Length of string
0121               ********|*****|*********************|**************************
0122               string.getlenc:
0123 2A9A 0649  14         dect  stack
0124 2A9C C64B  30         mov   r11,*stack            ; Save return address
0125 2A9E 05D9  26         inct  *stack                ; Skip "data P0"
0126 2AA0 05D9  26         inct  *stack                ; Skip "data P1"
0127 2AA2 0649  14         dect  stack
0128 2AA4 C644  30         mov   tmp0,*stack           ; Push tmp0
0129 2AA6 0649  14         dect  stack
0130 2AA8 C645  30         mov   tmp1,*stack           ; Push tmp1
0131 2AAA 0649  14         dect  stack
0132 2AAC C646  30         mov   tmp2,*stack           ; Push tmp2
0133                       ;-----------------------------------------------------------------------
0134                       ; Get parameter values
0135                       ;-----------------------------------------------------------------------
0136 2AAE C13B  30         mov   *r11+,tmp0            ; Pointer to C-style string
0137 2AB0 C17B  30         mov   *r11+,tmp1            ; String termination character
0138 2AB2 1008  14         jmp   !
0139                       ;-----------------------------------------------------------------------
0140                       ; Register version
0141                       ;-----------------------------------------------------------------------
0142               xstring.getlenc:
0143 2AB4 0649  14         dect  stack
0144 2AB6 C64B  30         mov   r11,*stack            ; Save return address
0145 2AB8 0649  14         dect  stack
0146 2ABA C644  30         mov   tmp0,*stack           ; Push tmp0
0147 2ABC 0649  14         dect  stack
0148 2ABE C645  30         mov   tmp1,*stack           ; Push tmp1
0149 2AC0 0649  14         dect  stack
0150 2AC2 C646  30         mov   tmp2,*stack           ; Push tmp2
0151                       ;-----------------------------------------------------------------------
0152                       ; Start
0153                       ;-----------------------------------------------------------------------
0154 2AC4 0A85  32 !       sla   tmp1,8                ; LSB to MSB
0155 2AC6 04C6  14         clr   tmp2                  ; Loop counter
0156                       ;-----------------------------------------------------------------------
0157                       ; Scan string for termination character
0158                       ;-----------------------------------------------------------------------
0159               string.getlenc.loop:
0160 2AC8 0586  14         inc   tmp2
0161 2ACA 9174  28         cb    *tmp0+,tmp1           ; Compare character
0162 2ACC 1304  14         jeq   string.getlenc.putlength
0163                       ;-----------------------------------------------------------------------
0164                       ; Assert on string length
0165                       ;-----------------------------------------------------------------------
0166 2ACE 0286  22         ci    tmp2,255
     2AD0 00FF     
0167 2AD2 1505  14         jgt   string.getlenc.panic
0168 2AD4 10F9  14         jmp   string.getlenc.loop
0169                       ;-----------------------------------------------------------------------
0170                       ; Return length
0171                       ;-----------------------------------------------------------------------
0172               string.getlenc.putlength:
0173 2AD6 0606  14         dec   tmp2                  ; One time adjustment
0174 2AD8 C806  30         mov   tmp2,@waux1           ; Store length
     2ADA 833C     
0175 2ADC 1004  14         jmp   string.getlenc.exit   ; Exit
0176                       ;-----------------------------------------------------------------------
0177                       ; CPU crash
0178                       ;-----------------------------------------------------------------------
0179               string.getlenc.panic:
0180 2ADE C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2AE0 FFCE     
0181 2AE2 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2AE4 2026     
0182                       ;----------------------------------------------------------------------
0183                       ; Exit
0184                       ;----------------------------------------------------------------------
0185               string.getlenc.exit:
0186 2AE6 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0187 2AE8 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0188 2AEA C139  30         mov   *stack+,tmp0          ; Pop tmp0
0189 2AEC C2F9  30         mov   *stack+,r11           ; Pop r11
0190 2AEE 045B  20         b     *r11                  ; Return to caller
                   < runlib.asm
0220               
0224               
0226                       copy  "cpu_scrpad_backrest.asm"  ; Scratchpad backup/restore
     **** ****     > cpu_scrpad_backrest.asm
0001               * FILE......: cpu_scrpad_backrest.asm
0002               * Purpose...: Scratchpad memory backup/restore functions
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                Scratchpad memory backup/restore
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * cpu.scrpad.backup - Backup 256 bytes of scratchpad >8300 to
0010               *                     predefined memory target @cpu.scrpad.tgt
0011               ***************************************************************
0012               *  bl   @cpu.scrpad.backup
0013               *--------------------------------------------------------------
0014               *  Register usage
0015               *  r0-r2, but values restored before exit
0016               *--------------------------------------------------------------
0017               *  Backup 256 bytes of scratchpad memory >8300 to destination
0018               *  @cpu.scrpad.tgt (+ >ff)
0019               *
0020               *  Expects current workspace to be in scratchpad memory.
0021               ********|*****|*********************|**************************
0022               cpu.scrpad.backup:
0023 2AF0 C800  38         mov   r0,@cpu.scrpad.tgt    ; Save @>8300 (r0)
     2AF2 F000     
0024 2AF4 C801  38         mov   r1,@cpu.scrpad.tgt+2  ; Save @>8302 (r1)
     2AF6 F002     
0025 2AF8 C802  38         mov   r2,@cpu.scrpad.tgt+4  ; Save @>8304 (r2)
     2AFA F004     
0026                       ;------------------------------------------------------
0027                       ; Prepare for copy loop
0028                       ;------------------------------------------------------
0029 2AFC 0200  20         li    r0,>8306              ; Scratchpad source address
     2AFE 8306     
0030 2B00 0201  20         li    r1,cpu.scrpad.tgt+6   ; RAM target address
     2B02 F006     
0031 2B04 0202  20         li    r2,62                 ; Loop counter
     2B06 003E     
0032                       ;------------------------------------------------------
0033                       ; Copy memory range >8306 - >83ff
0034                       ;------------------------------------------------------
0035               cpu.scrpad.backup.copy:
0036 2B08 CC70  46         mov   *r0+,*r1+
0037 2B0A CC70  46         mov   *r0+,*r1+
0038 2B0C 0642  14         dect  r2
0039 2B0E 16FC  14         jne   cpu.scrpad.backup.copy
0040 2B10 C820  50         mov   @>83fe,@cpu.scrpad.tgt + >fe
     2B12 83FE     
     2B14 F0FE     
0041                                                   ; Copy last word
0042                       ;------------------------------------------------------
0043                       ; Restore register r0 - r2
0044                       ;------------------------------------------------------
0045 2B16 C020  34         mov   @cpu.scrpad.tgt,r0    ; Restore r0
     2B18 F000     
0046 2B1A C060  34         mov   @cpu.scrpad.tgt+2,r1  ; Restore r1
     2B1C F002     
0047 2B1E C0A0  34         mov   @cpu.scrpad.tgt+4,r2  ; Restore r2
     2B20 F004     
0048                       ;------------------------------------------------------
0049                       ; Exit
0050                       ;------------------------------------------------------
0051               cpu.scrpad.backup.exit:
0052 2B22 045B  20         b     *r11                  ; Return to caller
0053               
0054               
0055               ***************************************************************
0056               * cpu.scrpad.restore - Restore 256 bytes of scratchpad from
0057               *                      predefined target @cpu.scrpad.tgt
0058               *                      to destination >8300
0059               ***************************************************************
0060               *  bl   @cpu.scrpad.restore
0061               *--------------------------------------------------------------
0062               *  Register usage
0063               *  r0-r1
0064               *--------------------------------------------------------------
0065               *  Restore scratchpad from memory area @cpu.scrpad.tgt (+ >ff).
0066               *  Current workspace may not be in scratchpad >8300 when called.
0067               *
0068               *  Destroys r0,r1
0069               ********|*****|*********************|**************************
0070               cpu.scrpad.restore:
0071                       ;------------------------------------------------------
0072                       ; Prepare for copy loop, WS
0073                       ;------------------------------------------------------
0074 2B24 0200  20         li    r0,cpu.scrpad.tgt
     2B26 F000     
0075 2B28 0201  20         li    r1,>8300
     2B2A 8300     
0076                       ;------------------------------------------------------
0077                       ; Copy 256 bytes from @cpu.scrpad.tgt to >8300
0078                       ;------------------------------------------------------
0079               cpu.scrpad.restore.copy:
0080 2B2C CC70  46         mov   *r0+,*r1+
0081 2B2E CC70  46         mov   *r0+,*r1+
0082 2B30 0281  22         ci    r1,>8400
     2B32 8400     
0083 2B34 11FB  14         jlt   cpu.scrpad.restore.copy
0084                       ;------------------------------------------------------
0085                       ; Exit
0086                       ;------------------------------------------------------
0087               cpu.scrpad.restore.exit:
0088 2B36 045B  20         b     *r11                  ; Return to caller
                   < runlib.asm
0227                       copy  "cpu_scrpad_paging.asm"    ; Scratchpad memory paging
     **** ****     > cpu_scrpad_paging.asm
0001               * FILE......: cpu_scrpad_paging.asm
0002               * Purpose...: CPU memory paging functions
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                     CPU memory paging
0006               *//////////////////////////////////////////////////////////////
0007               
0008               
0009               ***************************************************************
0010               * cpu.scrpad.pgout - Page out 256 bytes of scratchpad at >8300
0011               *                    to CPU memory destination P0 (tmp1)
0012               *                    and replace with 256 bytes of memory from
0013               *                    predefined destination @cpu.scrpad.target
0014               ***************************************************************
0015               *  bl   @cpu.scrpad.pgout
0016               *       DATA p0
0017               *
0018               *  P0 = CPU memory destination
0019               *--------------------------------------------------------------
0020               *  bl   @xcpu.scrpad.pgout
0021               *  tmp1 = CPU memory destination
0022               *--------------------------------------------------------------
0023               *  Register usage
0024               *  tmp3      = Copy of CPU memory destination
0025               *  tmp0-tmp2 = Used as temporary registers
0026               *  @waux1    = Copy of r5 (tmp1)
0027               *--------------------------------------------------------------
0028               *  Remarks
0029               *  Copies 256 bytes from scratchpad to CPU memory destination
0030               *  specified in P0 (tmp1).
0031               *
0032               *  Then switches to the newly copied workspace in P0 (tmp1).
0033               *
0034               *  Finally it copies 256 bytes from @cpu.scrpad.tgt
0035               *  to scratchpad >8300 and activates workspace at >8300
0036               ********|*****|*********************|**************************
0037               cpu.scrpad.pgout:
0038 2B38 C15B  26         mov   *r11,tmp1             ; tmp1 = Memory target address
0039                       ;------------------------------------------------------
0040                       ; Copy registers r0-r7
0041                       ;------------------------------------------------------
0042 2B3A CD40  34         mov   r0,*tmp1+             ; Backup r0
0043 2B3C CD41  34         mov   r1,*tmp1+             ; Backup r1
0044 2B3E CD42  34         mov   r2,*tmp1+             ; Backup r2
0045 2B40 CD43  34         mov   r3,*tmp1+             ; Backup r3
0046 2B42 CD44  34         mov   r4,*tmp1+             ; Backup r4
0047 2B44 CD45  34         mov   r5,*tmp1+             ; Backup r5 (is tmp1, so is bogus)
0048 2B46 CD46  34         mov   r6,*tmp1+             ; Backup r6
0049 2B48 CD47  34         mov   r7,*tmp1+             ; Backup r7
0050                       ;------------------------------------------------------
0051                       ; Copy scratchpad memory to destination
0052                       ;------------------------------------------------------
0053               xcpu.scrpad.pgout:
0054 2B4A 0204  20         li    tmp0,>8310            ; tmp0 = Memory source address
     2B4C 8310     
0055                                                   ;        as of register r8
0056 2B4E 0206  20         li    tmp2,15               ; tmp2 = 15 iterations
     2B50 000F     
0057                       ;------------------------------------------------------
0058                       ; Copy memory
0059                       ;------------------------------------------------------
0060 2B52 CD74  46 !       mov   *tmp0+,*tmp1+         ; Copy word 1
0061 2B54 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 2
0062 2B56 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 3
0063 2B58 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 4
0064 2B5A CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 5
0065 2B5C CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 6
0066 2B5E CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 7
0067 2B60 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 8
0068 2B62 0606  14         dec   tmp2
0069 2B64 16F6  14         jne   -!                    ; Loop until done
0070                       ;------------------------------------------------------
0071                       ; Switch to newly copied workspace
0072                       ;------------------------------------------------------
0073 2B66 C37B  30         mov   *r11+,r13             ; R13=WP   (pop tmp1 from stack)
0074 2B68 020E  20         li    r14,cpu.scrpad.pgout.after.rtwp
     2B6A 2B70     
0075                                                   ; R14=PC
0076 2B6C 04CF  14         clr   r15                   ; R15=STATUS
0077                       ;------------------------------------------------------
0078                       ; If we get here, WS was copied to specified
0079                       ; destination.  Also contents of r13,r14,r15
0080                       ; are about to be overwritten by rtwp instruction.
0081                       ;------------------------------------------------------
0082 2B6E 0380  18         rtwp                        ; Activate copied workspace
0083                                                   ; in non-scratchpad memory!
0084               
0085               cpu.scrpad.pgout.after.rtwp:
0086 2B70 0460  28         b     @cpu.scrpad.restore   ; Restore scratchpad memory
     2B72 2B24     
0087                                                   ; from @cpu.scrpad.tgt to @>8300
0088                                                   ; and switch workspace to >8300.
0089                       ;------------------------------------------------------
0090                       ; Exit
0091                       ;------------------------------------------------------
0092               cpu.scrpad.pgout.exit:
0093 2B74 045B  20         b     *r11                  ; Return to caller
0094               
0095               
0096               ***************************************************************
0097               * cpu.scrpad.pgin - Page in 256 bytes of scratchpad memory
0098               *                   at >8300 from CPU memory specified in
0099               *                   p0 (tmp0)
0100               ***************************************************************
0101               *  bl   @cpu.scrpad.pgin
0102               *       DATA p0
0103               *
0104               *  P0 = CPU memory source
0105               *--------------------------------------------------------------
0106               *  bl   @memx.scrpad.pgin
0107               *  TMP0 = CPU memory source
0108               *--------------------------------------------------------------
0109               *  Register usage
0110               *  tmp0-tmp2 = Used as temporary registers
0111               *--------------------------------------------------------------
0112               *  Remarks
0113               *  Copies 256 bytes from CPU memory source to scratchpad >8300
0114               *  and activates workspace in scratchpad >8300
0115               *
0116               *  It's expected that the workspace is outside scratchpad >8300
0117               *  when calling this function.
0118               ********|*****|*********************|**************************
0119               cpu.scrpad.pgin:
0120 2B76 C13B  30         mov   *r11+,tmp0            ; tmp0 = Memory source address
0121                       ;------------------------------------------------------
0122                       ; Copy scratchpad memory to destination
0123                       ;------------------------------------------------------
0124               xcpu.scrpad.pgin:
0125 2B78 0205  20         li    tmp1,>8300            ; tmp1 = Memory destination address
     2B7A 8300     
0126 2B7C 0206  20         li    tmp2,16               ; tmp2 = 256/16
     2B7E 0010     
0127                       ;------------------------------------------------------
0128                       ; Copy memory
0129                       ;------------------------------------------------------
0130 2B80 CD74  46 !       mov   *tmp0+,*tmp1+         ; Copy word 1
0131 2B82 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 2
0132 2B84 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 3
0133 2B86 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 4
0134 2B88 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 5
0135 2B8A CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 6
0136 2B8C CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 7
0137 2B8E CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 8
0138 2B90 0606  14         dec   tmp2
0139 2B92 16F6  14         jne   -!                    ; Loop until done
0140                       ;------------------------------------------------------
0141                       ; Switch workspace to scratchpad memory
0142                       ;------------------------------------------------------
0143 2B94 02E0  18         lwpi  >8300                 ; Activate copied workspace
     2B96 8300     
0144                       ;------------------------------------------------------
0145                       ; Exit
0146                       ;------------------------------------------------------
0147               cpu.scrpad.pgin.exit:
0148 2B98 045B  20         b     *r11                  ; Return to caller
                   < runlib.asm
0229               
0231                       copy  "fio.equ"                  ; File I/O equates
     **** ****     > fio.equ
0001               * FILE......: fio.equ
0002               * Purpose...: Equates for file I/O operations
0003               
0004               ***************************************************************
0005               * File IO operations - Byte 0 in PAB
0006               ************************************@**************************
0007      0000     io.op.open       equ >00            ; OPEN
0008      0001     io.op.close      equ >01            ; CLOSE
0009      0002     io.op.read       equ >02            ; READ
0010      0003     io.op.write      equ >03            ; WRITE
0011      0004     io.op.rewind     equ >04            ; RESTORE/REWIND
0012      0005     io.op.load       equ >05            ; LOAD
0013      0006     io.op.save       equ >06            ; SAVE
0014      0007     io.op.delfile    equ >07            ; DELETE FILE
0015      0008     io.op.scratch    equ >08            ; SCRATCH
0016      0009     io.op.status     equ >09            ; STATUS
0017               ***************************************************************
0018               * File & data type - Byte 1 in PAB (Bit 0-4)
0019               ***************************************************************
0020               * Bit position: 4  3  21  0
0021               *               |  |  ||   \
0022               *               |  |  ||    File type
0023               *               |  |  ||    0 = INTERNAL
0024               *               |  |  ||    1 = FIXED
0025               *               |  |  \\
0026               *               |  |   File operation
0027               *               |  |   00 - UPDATE
0028               *               |  |   01 - OUTPUT
0029               *               |  |   10 - INPUT
0030               *               |  |   11 - APPEND
0031               *               |  |
0032               *               |  \
0033               *               |   Data type
0034               *               |   0 = DISPLAY
0035               *               |   1 = INTERNAL
0036               *               |
0037               *               \
0038               *                Record type
0039               *                0 = FIXED
0040               *                1 = VARIABLE
0041               ***************************************************************
0042               ; Bit position           43210
0043               ************************************|**************************
0044      0000     io.seq.upd.dis.fix  equ :00000      ; 00
0045      0001     io.rel.upd.dis.fix  equ :00001      ; 01
0046      0003     io.rel.out.dis.fix  equ :00011      ; 02
0047      0002     io.seq.out.dis.fix  equ :00010      ; 03
0048      0004     io.seq.inp.dis.fix  equ :00100      ; 04
0049      0005     io.rel.inp.dis.fix  equ :00101      ; 05
0050      0006     io.seq.app.dis.fix  equ :00110      ; 06
0051      0007     io.rel.app.dis.fix  equ :00111      ; 07
0052      0008     io.seq.upd.int.fix  equ :01000      ; 08
0053      0009     io.rel.upd.int.fix  equ :01001      ; 09
0054      000A     io.seq.out.int.fix  equ :01010      ; 0A
0055      000B     io.rel.out.int.fix  equ :01011      ; 0B
0056      000C     io.seq.inp.int.fix  equ :01100      ; 0C
0057      000D     io.rel.inp.int.fix  equ :01101      ; 0D
0058      000E     io.seq.app.int.fix  equ :01110      ; 0E
0059      000F     io.rel.app.int.fix  equ :01111      ; 0F
0060      0010     io.seq.upd.dis.var  equ :10000      ; 10
0061      0011     io.rel.upd.dis.var  equ :10001      ; 11
0062      0012     io.seq.out.dis.var  equ :10010      ; 12
0063      0013     io.rel.out.dis.var  equ :10011      ; 13
0064      0014     io.seq.inp.dis.var  equ :10100      ; 14
0065      0015     io.rel.inp.dis.var  equ :10101      ; 15
0066      0016     io.seq.app.dis.var  equ :10110      ; 16
0067      0017     io.rel.app.dis.var  equ :10111      ; 17
0068      0018     io.seq.upd.int.var  equ :11000      ; 18
0069      0019     io.rel.upd.int.var  equ :11001      ; 19
0070      001A     io.seq.out.int.var  equ :11010      ; 1A
0071      001B     io.rel.out.int.var  equ :11011      ; 1B
0072      001C     io.seq.inp.int.var  equ :11100      ; 1C
0073      001D     io.rel.inp.int.var  equ :11101      ; 1D
0074      001E     io.seq.app.int.var  equ :11110      ; 1E
0075      001F     io.rel.app.int.var  equ :11111      ; 1F
0076               ***************************************************************
0077               * File error codes - Byte 1 in PAB (Bits 5-7)
0078               ************************************|**************************
0079      0000     io.err.no_error_occured             equ 0
0080                       ; Error code 0 with condition bit reset, indicates that
0081                       ; no error has occured
0082               
0083      0000     io.err.bad_device_name              equ 0
0084                       ; Device indicated not in system
0085                       ; Error code 0 with condition bit set, indicates a
0086                       ; device not present in system
0087               
0088      0001     io.err.device_write_prottected      equ 1
0089                       ; Device is write protected
0090               
0091      0002     io.err.bad_open_attribute           equ 2
0092                       ; One or more of the OPEN attributes are illegal or do
0093                       ; not match the file's actual characteristics.
0094                       ; This could be:
0095                       ;   * File type
0096                       ;   * Record length
0097                       ;   * I/O mode
0098                       ;   * File organization
0099               
0100      0003     io.err.illegal_operation            equ 3
0101                       ; Either an issued I/O command was not supported, or a
0102                       ; conflict with the OPEN mode has occured
0103               
0104      0004     io.err.out_of_table_buffer_space    equ 4
0105                       ; The amount of space left on the device is insufficient
0106                       ; for the requested operation
0107               
0108      0005     io.err.eof                          equ 5
0109                       ; Attempt to read past end of file.
0110                       ; This error may also be given for non-existing records
0111                       ; in a relative record file
0112               
0113      0006     io.err.device_error                 equ 6
0114                       ; Covers all hard device errors, such as parity and
0115                       ; bad medium errors
0116               
0117      0007     io.err.file_error                   equ 7
0118                       ; Covers all file-related error like: program/data
0119                       ; file mismatch, non-existing file opened for input mode, etc.
                   < runlib.asm
0232                       copy  "fio_dsrlnk.asm"           ; DSRLNK for peripheral communication
     **** ****     > fio_dsrlnk.asm
0001               * FILE......: fio_dsrlnk.asm
0002               * Purpose...: Custom DSRLNK implementation
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                          DSRLNK
0006               *//////////////////////////////////////////////////////////////
0007               
0008               
0009               ***************************************************************
0010               * dsrlnk - DSRLNK for file I/O in DSR space >1000 - >1F00
0011               ***************************************************************
0012               *  blwp @dsrlnk
0013               *  data p0
0014               *--------------------------------------------------------------
0015               *  Input:
0016               *  P0     = 8 or 10 (a)
0017               *  @>8356 = Pointer to VDP PAB file descriptor length (PAB+9)
0018               *--------------------------------------------------------------
0019               *  Output:
0020               *  r0 LSB = Bits 13-15 from VDP PAB byte 1, right aligned
0021               *--------------------------------------------------------------
0022               *  Remarks:
0023               *
0024               *  You need to specify following equates in main program
0025               *
0026               *  dsrlnk.dsrlws      equ >????     ; Address of dsrlnk workspace
0027               *  dsrlnk.namsto      equ >????     ; 8-byte RAM buffer for storing device name
0028               *
0029               *  Scratchpad memory usage
0030               *  >8322            Parameter (>08) or (>0A) passed to dsrlnk
0031               *  >8356            Pointer to PAB
0032               *  >83D0            CRU address of current device
0033               *  >83D2            DSR entry address
0034               *  >83e0 - >83ff    GPL / DSRLNK workspace
0035               *
0036               *  Credits
0037               *  Originally appeared in Miller Graphics The Smart Programmer.
0038               *  This version based on version of Paolo Bagnaresi.
0039               *
0040               *  The following memory address can be used to directly jump
0041               *  into the DSR in consequtive calls without having to
0042               *  scan the PEB cards again:
0043               *
0044               *  dsrlnk.namsto  -  8-byte RAM buf for holding device name
0045               *  dsrlnk.savcru  -  CRU address of device in prev. DSR call
0046               *  dsrlnk.savent  -  DSR entry addr of prev. DSR call
0047               *  dsrlnk.savpab  -  Pointer to Device or Subprogram in PAB
0048               *  dsrlnk.savver  -  Version used in prev. DSR call
0049               *  dsrlnk.savlen  -  Length of DSR name of prev. DSR call (in MSB)
0050               *  dsrlnk.flgptr  -  Pointer to VDP PAB byte 1 (flag byte)
0051               
0052               *--------------------------------------------------------------
0053      A40A     dsrlnk.dstype equ   dsrlnk.dsrlws + 10
0054                                                   ; dstype is address of R5 of DSRLNK ws.
0055               ********|*****|*********************|**************************
0056 2B9A A400     dsrlnk  data  dsrlnk.dsrlws         ; dsrlnk workspace
0057 2B9C 2B9E             data  dsrlnk.init           ; Entry point
0058                       ;------------------------------------------------------
0059                       ; DSRLNK entry point
0060                       ;------------------------------------------------------
0061               dsrlnk.init:
0062 2B9E C17E  30         mov   *r14+,r5              ; Get pgm type for link
0063 2BA0 C805  38         mov   r5,@dsrlnk.sav8a      ; Save data following blwp @dsrlnk (8 or >a)
     2BA2 A428     
0064 2BA4 53E0  34         szcb  @hb$20,r15            ; Reset equal bit in status register
     2BA6 201C     
0065 2BA8 C020  30         mov   @>8356,r0             ; Get pointer to PAB+9 in VDP
     2BAA 8356     
0066 2BAC C240  18         mov   r0,r9                 ; Save pointer
0067                       ;------------------------------------------------------
0068                       ; Fetch file descriptor length from PAB
0069                       ;------------------------------------------------------
0070 2BAE 0229  22         ai    r9,>fff8              ; Adjust r9 to addr PAB byte 1
     2BB0 FFF8     
0071                                                   ; FLAG byte->(pabaddr+9)-8
0072 2BB2 C809  38         mov   r9,@dsrlnk.flgptr     ; Save pointer to PAB byte 1
     2BB4 A434     
0073                       ;---------------------------; Inline VSBR start
0074 2BB6 06C0  14         swpb  r0                    ;
0075 2BB8 D800  30         movb  r0,@vdpa              ; Send low byte
     2BBA 8C02     
0076 2BBC 06C0  14         swpb  r0                    ;
0077 2BBE D800  30         movb  r0,@vdpa              ; Send high byte
     2BC0 8C02     
0078 2BC2 D0E0  30         movb  @vdpr,r3              ; Read byte from VDP RAM
     2BC4 8800     
0079                       ;---------------------------; Inline VSBR end
0080 2BC6 0983  32         srl   r3,8                  ; Move to low byte
0081               
0082                       ;------------------------------------------------------
0083                       ; Fetch file descriptor device name from PAB
0084                       ;------------------------------------------------------
0085 2BC8 0704  14         seto  r4                    ; Init counter
0086 2BCA 0202  20         li    r2,dsrlnk.namsto      ; Point to 8-byte CPU buffer
     2BCC A420     
0087 2BCE 0580  14 !       inc   r0                    ; Point to next char of name
0088 2BD0 0584  14         inc   r4                    ; Increment char counter
0089 2BD2 0284  22         ci    r4,>0007              ; Check if length more than 7 chars
     2BD4 0007     
0090 2BD6 1573  14         jgt   dsrlnk.error.devicename_invalid
0091                                                   ; Yes, error
0092 2BD8 80C4  18         c     r4,r3                 ; End of name?
0093 2BDA 130C  14         jeq   dsrlnk.device_name.get_length
0094                                                   ; Yes
0095               
0096                       ;---------------------------; Inline VSBR start
0097 2BDC 06C0  14         swpb  r0                    ;
0098 2BDE D800  30         movb  r0,@vdpa              ; Send low byte
     2BE0 8C02     
0099 2BE2 06C0  14         swpb  r0                    ;
0100 2BE4 D800  30         movb  r0,@vdpa              ; Send high byte
     2BE6 8C02     
0101 2BE8 D060  30         movb  @vdpr,r1              ; Read byte from VDP RAM
     2BEA 8800     
0102                       ;---------------------------; Inline VSBR end
0103               
0104                       ;------------------------------------------------------
0105                       ; Look for end of device name, for example "DSK1."
0106                       ;------------------------------------------------------
0107 2BEC DC81  32         movb  r1,*r2+               ; Move into buffer
0108 2BEE 9801  34         cb    r1,@dsrlnk.period     ; Is character a '.'
     2BF0 2D0A     
0109 2BF2 16ED  14         jne   -!                    ; No, loop next char
0110                       ;------------------------------------------------------
0111                       ; Determine device name length
0112                       ;------------------------------------------------------
0113               dsrlnk.device_name.get_length:
0114 2BF4 C104  18         mov   r4,r4                 ; Check if length = 0
0115 2BF6 1363  14         jeq   dsrlnk.error.devicename_invalid
0116                                                   ; Yes, error
0117 2BF8 04E0  26         clr   @>83d0
     2BFA 83D0     
0118 2BFC C804  30         mov   r4,@>8354             ; Save name length for search (length
     2BFE 8354     
0119                                                   ; goes to >8355 but overwrites >8354!)
0120 2C00 C804  38         mov   r4,@dsrlnk.savlen     ; Save name length for nextr dsrlnk call
     2C02 A432     
0121               
0122 2C04 0584  14         inc   r4                    ; Adjust for dot
0123 2C06 A804  30         a     r4,@>8356             ; Point to position after name
     2C08 8356     
0124 2C0A C820  50         mov   @>8356,@dsrlnk.savpab ; Save pointer for next dsrlnk call
     2C0C 8356     
     2C0E A42E     
0125                       ;------------------------------------------------------
0126                       ; Prepare for DSR scan >1000 - >1f00
0127                       ;------------------------------------------------------
0128               dsrlnk.dsrscan.start:
0129 2C10 02E0  18         lwpi  >83e0                 ; Use GPL WS
     2C12 83E0     
0130 2C14 04C1  14         clr   r1                    ; Version found of dsr
0131 2C16 020C  20         li    r12,>0f00             ; Init cru address
     2C18 0F00     
0132                       ;------------------------------------------------------
0133                       ; Turn off ROM on current card
0134                       ;------------------------------------------------------
0135               dsrlnk.dsrscan.cardoff:
0136 2C1A C30C  18         mov   r12,r12               ; Anything to turn off?
0137 2C1C 1301  14         jeq   dsrlnk.dsrscan.cardloop
0138                                                   ; No, loop over cards
0139 2C1E 1E00  16         sbz   0                     ; Yes, turn off
0140                       ;------------------------------------------------------
0141                       ; Loop over cards and look if DSR present
0142                       ;------------------------------------------------------
0143               dsrlnk.dsrscan.cardloop:
0144 2C20 022C  22         ai    r12,>0100             ; Next ROM to turn on
     2C22 0100     
0145 2C24 04E0  26         clr   @>83d0                ; Clear in case we are done
     2C26 83D0     
0146 2C28 028C  22         ci    r12,>2000             ; Card scan complete? (>1000 to >1F00)
     2C2A 2000     
0147 2C2C 1346  14         jeq   dsrlnk.error.nodsr_found
0148                                                   ; Yes, no matching DSR found
0149 2C2E C80C  30         mov   r12,@>83d0            ; Save address of next cru
     2C30 83D0     
0150                       ;------------------------------------------------------
0151                       ; Look at card ROM (@>4000 eq 'AA' ?)
0152                       ;------------------------------------------------------
0153 2C32 1D00  16         sbo   0                     ; Turn on ROM
0154 2C34 0202  20         li    r2,>4000              ; Start at beginning of ROM
     2C36 4000     
0155 2C38 9812  42         cb    *r2,@dsrlnk.$aa00     ; Check for a valid DSR header
     2C3A 2D06     
0156 2C3C 16EE  14         jne   dsrlnk.dsrscan.cardoff
0157                                                   ; No ROM found on card
0158                       ;------------------------------------------------------
0159                       ; Valid DSR ROM found. Now loop over chain/subprograms
0160                       ;------------------------------------------------------
0161                       ; dstype is the address of R5 of the DSRLNK workspace,
0162                       ; which is where 8 for a DSR or 10 (>A) for a subprogram
0163                       ; is stored before the DSR ROM is searched.
0164                       ;------------------------------------------------------
0165 2C3E A0A0  34         a     @dsrlnk.dstype,r2     ; Goto first pointer (byte 8 or 10)
     2C40 A40A     
0166 2C42 1003  14         jmp   dsrlnk.dsrscan.getentry
0167                       ;------------------------------------------------------
0168                       ; Next DSR entry
0169                       ;------------------------------------------------------
0170               dsrlnk.dsrscan.nextentry:
0171 2C44 C0A0  30         mov   @>83d2,r2             ; Offset 0 > Fetch link to next DSR or
     2C46 83D2     
0172                                                   ; subprogram
0173               
0174 2C48 1D00  16         sbo   0                     ; Turn ROM back on
0175                       ;------------------------------------------------------
0176                       ; Get DSR entry
0177                       ;------------------------------------------------------
0178               dsrlnk.dsrscan.getentry:
0179 2C4A C092  26         mov   *r2,r2                ; Is address a zero? (end of chain?)
0180 2C4C 13E6  14         jeq   dsrlnk.dsrscan.cardoff
0181                                                   ; Yes, no more DSRs or programs to check
0182 2C4E C802  30         mov   r2,@>83d2             ; Offset 0 > Store link to next DSR or
     2C50 83D2     
0183                                                   ; subprogram
0184               
0185 2C52 05C2  14         inct  r2                    ; Offset 2 > Has call address of current
0186                                                   ; DSR/subprogram code
0187               
0188 2C54 C272  30         mov   *r2+,r9               ; Store call address in r9. Move r2 to
0189                                                   ; offset 4 (DSR/subprogram name)
0190                       ;------------------------------------------------------
0191                       ; Check file descriptor in DSR
0192                       ;------------------------------------------------------
0193 2C56 04C5  14         clr   r5                    ; Remove any old stuff
0194 2C58 D160  30         movb  @>8355,r5             ; Get length as counter
     2C5A 8355     
0195 2C5C 1309  14         jeq   dsrlnk.dsrscan.call_dsr
0196                                                   ; If zero, do not further check, call DSR
0197                                                   ; program
0198               
0199 2C5E 9C85  28         cb    r5,*r2+               ; See if length matches
0200 2C60 16F1  14         jne   dsrlnk.dsrscan.nextentry
0201                                                   ; No, length does not match.
0202                                                   ; Go process next DSR entry
0203               
0204 2C62 0985  32         srl   r5,8                  ; Yes, move to low byte
0205 2C64 0206  20         li    r6,dsrlnk.namsto      ; Point to 8-byte CPU buffer
     2C66 A420     
0206 2C68 9CB6  38 !       cb    *r6+,*r2+             ; Compare byte in CPU buffer with byte in
0207                                                   ; DSR ROM
0208 2C6A 16EC  14         jne   dsrlnk.dsrscan.nextentry
0209                                                   ; Try next DSR entry if no match
0210 2C6C 0605  14         dec   r5                    ; Update loop counter
0211 2C6E 16FC  14         jne   -!                    ; Loop until full length checked
0212                       ;------------------------------------------------------
0213                       ; Call DSR program in card/device
0214                       ;------------------------------------------------------
0215               dsrlnk.dsrscan.call_dsr:
0216 2C70 0581  14         inc   r1                    ; Next version found
0217 2C72 C80C  38         mov   r12,@dsrlnk.savcru    ; Save CRU address
     2C74 A42A     
0218 2C76 C809  38         mov   r9,@dsrlnk.savent     ; Save DSR entry address
     2C78 A42C     
0219 2C7A C801  38         mov   r1,@dsrlnk.savver     ; Save DSR Version number
     2C7C A430     
0220               
0221 2C7E 020D  20         li    r13,>9800             ; Set GROM base to >9800 to prevent
     2C80 9800     
0222                                                   ; lockup of TI Disk Controller DSR.
0223               
0224 2C82 020F  20         li    r15,>8C02             ; Set VDP port address, needed to prevent
     2C84 8C02     
0225                                                   ; lockup of TI Disk Controller DSR.
0226               
0227 2C86 0699  24         bl    *r9                   ; Execute DSR
0228                       ;
0229                       ; Depending on IO result the DSR in card ROM does RET
0230                       ; or (INCT R11 + RET), meaning either (1) or (2) get executed.
0231                       ;
0232 2C88 10DD  14         jmp   dsrlnk.dsrscan.nextentry
0233                                                   ; (1) error return
0234 2C8A 1E00  16         sbz   0                     ; (2) turn off card/device if good return
0235 2C8C 02E0  18         lwpi  dsrlnk.dsrlws         ; (2) restore workspace
     2C8E A400     
0236 2C90 C009  30         mov   r9,r0                 ; Point to flag byte (PAB+1) in VDP PAB
0237                       ;------------------------------------------------------
0238                       ; Returned from DSR
0239                       ;------------------------------------------------------
0240               dsrlnk.dsrscan.return_dsr:
0241 2C92 C060  42         mov   @dsrlnk.sav8a,r1      ; get back data following blwp @dsrlnk
     2C94 A428     
0242                                                   ; (8 or >a)
0243 2C96 0281  26         ci    r1,8                  ; was it 8?
     2C98 0008     
0244 2C9A 1303  14         jeq   dsrlnk.dsrscan.dsr.8  ; yes, jump: normal dsrlnk
0245 2C9C D060  38         movb  @>8350,r1             ; no, we have a data >a.
     2C9E 8350     
0246                                                   ; Get error byte from @>8350
0247 2CA0 1008  14         jmp   dsrlnk.dsrscan.dsr.a  ; go and return error byte to the caller
0248               
0249                       ;------------------------------------------------------
0250                       ; Read VDP PAB byte 1 after DSR call completed (status)
0251                       ;------------------------------------------------------
0252               dsrlnk.dsrscan.dsr.8:
0253                       ;---------------------------; Inline VSBR start
0254 2CA2 06C0  22         swpb  r0                    ;
0255 2CA4 D800  34         movb  r0,@vdpa              ; send low byte
     2CA6 8C02     
0256 2CA8 06C0  22         swpb  r0                    ;
0257 2CAA D800  34         movb  r0,@vdpa              ; send high byte
     2CAC 8C02     
0258 2CAE D060  38         movb  @vdpr,r1              ; read byte from VDP ram
     2CB0 8800     
0259                       ;---------------------------; Inline VSBR end
0260               
0261                       ;------------------------------------------------------
0262                       ; Return DSR error to caller
0263                       ;------------------------------------------------------
0264               dsrlnk.dsrscan.dsr.a:
0265 2CB2 09D1  50         srl   r1,13                 ; just keep error bits
0266 2CB4 1605  14         jne   dsrlnk.error.io_error
0267                                                   ; handle IO error
0268 2CB6 0380  30         rtwp                        ; Return from DSR workspace to caller
0269                                                   ; workspace
0270               
0271                       ;------------------------------------------------------
0272                       ; IO-error handler
0273                       ;------------------------------------------------------
0274               dsrlnk.error.nodsr_found_off:
0275 2CB8 1E00  20         sbz   >00                   ; Turn card off, nomatter what
0276               dsrlnk.error.nodsr_found:
0277 2CBA 02E0  18         lwpi  dsrlnk.dsrlws         ; No DSR found, restore workspace
     2CBC A400     
0278               dsrlnk.error.devicename_invalid:
0279 2CBE 04C1  22         clr   r1                    ; clear flag for error 0 = bad device name
0280               dsrlnk.error.io_error:
0281 2CC0 06C1  22         swpb  r1                    ; put error in hi byte
0282 2CC2 D741  38         movb  r1,*r13               ; store error flags in callers r0
0283 2CC4 F3E0  42         socb  @hb$20,r15            ; \ Set equal bit in copy of status register
     2CC6 201C     
0284                                                   ; / to indicate error
0285 2CC8 0380  30         rtwp                        ; Return from DSR workspace to caller
0286                                                   ; workspace
0287               
0288               
0289               ***************************************************************
0290               * dsrln.reuse - Reuse previous DSRLNK call for improved speed
0291               ***************************************************************
0292               *  blwp @dsrlnk.reuse
0293               *--------------------------------------------------------------
0294               *  Input:
0295               *  @>8356         = Pointer to VDP PAB file descriptor length byte (PAB+9)
0296               *  @dsrlnk.savcru = CRU address of device in previous DSR call
0297               *  @dsrlnk.savent = DSR entry address of previous DSR call
0298               *  @dsrlnk.savver = Version used in previous DSR call
0299               *  @dsrlnk.pabptr = Pointer to PAB in VDP memory, set in previous DSR call
0300               *--------------------------------------------------------------
0301               *  Output:
0302               *  r0 LSB = Bits 13-15 from VDP PAB byte 1, right aligned
0303               *--------------------------------------------------------------
0304               *  Remarks:
0305               *   Call the same DSR entry again without having to scan through
0306               *   all devices again.
0307               *
0308               *   Expects dsrlnk.savver, @dsrlnk.savent, @dsrlnk.savcru to be
0309               *   set by previous DSRLNK call.
0310               ********|*****|*********************|**************************
0311               dsrlnk.reuse:
0312 2CCA A400             data  dsrlnk.dsrlws         ; dsrlnk workspace
0313 2CCC 2CCE             data  dsrlnk.reuse.init     ; entry point
0314                       ;------------------------------------------------------
0315                       ; DSRLNK entry point
0316                       ;------------------------------------------------------
0317               dsrlnk.reuse.init:
0318 2CCE 02E0  18         lwpi  >83e0                 ; Use GPL WS
     2CD0 83E0     
0319               
0320 2CD2 53E0  34         szcb  @hb$20,r15            ; reset equal bit in status register
     2CD4 201C     
0321                       ;------------------------------------------------------
0322                       ; Restore dsrlnk variables of previous DSR call
0323                       ;------------------------------------------------------
0324 2CD6 020B  20         li    r11,dsrlnk.savcru     ; Get pointer to last used CRU
     2CD8 A42A     
0325 2CDA C33B  30         mov   *r11+,r12             ; Get CRU address         < @dsrlnk.savcru
0326 2CDC C27B  30         mov   *r11+,r9              ; Get DSR entry address   < @dsrlnk.savent
0327 2CDE C83B  42         mov   *r11+,@>8356          ; \ Get pointer to Device name or
     2CE0 8356     
0328                                                   ; / or subprogram in PAB  < @dsrlnk.savpab
0329 2CE2 C07B  30         mov   *r11+,R1              ; Get DSR Version number  < @dsrlnk.savver
0330 2CE4 C81B  38         mov   *r11,@>8354           ; Get device name length  < @dsrlnk.savlen
     2CE6 8354     
0331                       ;------------------------------------------------------
0332                       ; Call DSR program in card/device
0333                       ;------------------------------------------------------
0334 2CE8 020F  20         li    r15,>8C02             ; Set VDP port address, needed to prevent
     2CEA 8C02     
0335                                                   ; lockup of TI Disk Controller DSR.
0336               
0337 2CEC 1D00  16         sbo   >00                   ; Open card/device ROM
0338               
0339 2CEE 9820  50         cb    @>4000,@dsrlnk.$aa00  ; Valid identifier found?
     2CF0 4000     
     2CF2 2D06     
0340 2CF4 16E2  14         jne   dsrlnk.error.nodsr_found
0341                                                   ; No, error code 0 = Bad Device name
0342                                                   ; The above jump may happen only in case of
0343                                                   ; either card hardware malfunction or if
0344                                                   ; there are 2 cards opened at the same time.
0345               
0346 2CF6 0699  24         bl    *r9                   ; Execute DSR
0347                       ;
0348                       ; Depending on IO result the DSR in card ROM does RET
0349                       ; or (INCT R11 + RET), meaning either (1) or (2) get executed.
0350                       ;
0351 2CF8 10DF  14         jmp   dsrlnk.error.nodsr_found_off
0352                                                   ; (1) error return
0353 2CFA 1E00  16         sbz   >00                   ; (2) turn off card ROM if good return
0354                       ;------------------------------------------------------
0355                       ; Now check if any DSR error occured
0356                       ;------------------------------------------------------
0357 2CFC 02E0  18         lwpi  dsrlnk.dsrlws         ; Restore workspace
     2CFE A400     
0358 2D00 C020  42         mov   @dsrlnk.flgptr,r0     ; Get pointer to VDP PAB byte 1
     2D02 A434     
0359               
0360 2D04 10C6  14         jmp   dsrlnk.dsrscan.return_dsr
0361                                                   ; Rest is the same as with normal DSRLNK
0362               
0363               
0364               ********************************************************************************
0365               
0366 2D06 AA00     dsrlnk.$aa00      data   >aa00      ; Used for identifying DSR header
0367 2D08 0008     dsrlnk.$0008      data   >0008      ; 8 is the data that usually follows
0368                                                   ; a @blwp @dsrlnk
0369 2D0A 2E       dsrlnk.period     text  '.'         ; For finding end of device name
0370               
0371                       even
                   < runlib.asm
0233                       copy  "fio_level3.asm"           ; File I/O level 3 support
     **** ****     > fio_level3.asm
0001               * FILE......: fio_level3.asm
0002               * Purpose...: File I/O level 3 support
0003               
0004               
0005               ***************************************************************
0006               * PAB  - Peripheral Access Block
0007               ********|*****|*********************|**************************
0008               ; my_pab:
0009               ;       byte  io.op.open            ;  0    - OPEN
0010               ;       byte  io.seq.inp.dis.var    ;  1    - INPUT, VARIABLE, DISPLAY
0011               ;                                   ;         Bit 13-15 used by DSR to return
0012               ;                                   ;         file error details to DSRLNK
0013               ;       data  vrecbuf               ;  2-3  - Record buffer in VDP memory
0014               ;       byte  80                    ;  4    - Record length (80 chars maximum)
0015               ;       byte  0                     ;  5    - Character count (bytes read)
0016               ;       data  >0000                 ;  6-7  - Seek record (fixed records only)
0017               ;       byte  >00                   ;  8    - Screen offset (cassette DSR only)
0018               ; -------------------------------------------------------------
0019               ;       byte  11                    ;  9    - File descriptor length
0020               ;       text 'DSK1.MYFILE'          ; 10-.. - File descriptor name
0021               ;                                             (Device + '.' + File name)
0022               ;       even
0023               ***************************************************************
0024               
0025               
0026               ***************************************************************
0027               * file.open - Open File for procesing
0028               ***************************************************************
0029               *  bl   @file.open
0030               *       data P0,P1
0031               *--------------------------------------------------------------
0032               *  P0 = Address of PAB in VDP RAM
0033               *  P1 = LSB contains File type/mode
0034               *--------------------------------------------------------------
0035               *  bl   @xfile.open
0036               *
0037               *  R0 = Address of PAB in VDP RAM
0038               *  R1 = LSB contains File type/mode
0039               *--------------------------------------------------------------
0040               *  Output:
0041               *  tmp0     = Copy of VDP PAB byte 1 after operation
0042               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0043               *  tmp2 LSB = Copy of status register after operation
0044               ********|*****|*********************|**************************
0045               file.open:
0046 2D0C C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0047 2D0E C07B  46         mov   *r11+,r1              ; Get file type/mode
0048               *--------------------------------------------------------------
0049               * Initialisation
0050               *--------------------------------------------------------------
0051               xfile.open:
0052 2D10 0649  22         dect  stack
0053 2D12 C64B  38         mov   r11,*stack            ; Save return address
0054                       ;------------------------------------------------------
0055                       ; Initialisation
0056                       ;------------------------------------------------------
0057 2D14 0204  24         li    tmp0,dsrlnk.savcru
     2D16 A42A     
0058 2D18 04F4  38         clr   *tmp0+                ; Clear @dsrlnk.savcru
0059 2D1A 04F4  38         clr   *tmp0+                ; Clear @dsrlnk.savent
0060 2D1C 04F4  38         clr   *tmp0+                ; Clear @dsrlnk.savver
0061 2D1E 04D4  30         clr   *tmp0                 ; Clear @dsrlnk.pabflg
0062                       ;------------------------------------------------------
0063                       ; Set pointer to VDP disk buffer header
0064                       ;------------------------------------------------------
0065 2D20 0205  24         li    tmp1,>37D7            ; \ VDP Disk buffer header
     2D22 37D7     
0066 2D24 C805  34         mov   tmp1,@>8370           ; | Pointer at Fixed scratchpad
     2D26 8370     
0067                                                   ; / location
0068 2D28 C801  42         mov   r1,@fh.filetype       ; Set file type/mode
     2D2A A44C     
0069 2D2C 04C5  22         clr   tmp1                  ; io.op.open
0070 2D2E 101F  14         jmp   _file.record.fop      ; Do file operation
0071               
0072               
0073               
0074               ***************************************************************
0075               * file.close - Close currently open file
0076               ***************************************************************
0077               *  bl   @file.close
0078               *       data P0
0079               *--------------------------------------------------------------
0080               *  P0 = Address of PAB in VDP RAM
0081               *--------------------------------------------------------------
0082               *  bl   @xfile.close
0083               *
0084               *  R0 = Address of PAB in VDP RAM
0085               *--------------------------------------------------------------
0086               *  Output:
0087               *  tmp0 LSB = Copy of VDP PAB byte 1 after operation
0088               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0089               *  tmp2 LSB = Copy of status register after operation
0090               ********|*****|*********************|**************************
0091               file.close:
0092 2D30 C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0093               *--------------------------------------------------------------
0094               * Initialisation
0095               *--------------------------------------------------------------
0096               xfile.close:
0097 2D32 0649  22         dect  stack
0098 2D34 C64B  38         mov   r11,*stack            ; Save return address
0099 2D36 0205  24         li    tmp1,io.op.close      ; io.op.close
     2D38 0001     
0100 2D3A 1019  14         jmp   _file.record.fop      ; Do file operation
0101               
0102               
0103               ***************************************************************
0104               * file.record.read - Read record from file
0105               ***************************************************************
0106               *  bl   @file.record.read
0107               *       data P0
0108               *--------------------------------------------------------------
0109               *  P0 = Address of PAB in VDP RAM (without +9 offset!)
0110               *--------------------------------------------------------------
0111               *  bl   @xfile.record.read
0112               *
0113               *  R0 = Address of PAB in VDP RAM
0114               *--------------------------------------------------------------
0115               *  Output:
0116               *  tmp0     = Copy of VDP PAB byte 1 after operation
0117               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0118               *  tmp2 LSB = Copy of status register after operation
0119               ********|*****|*********************|**************************
0120               file.record.read:
0121 2D3C C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0122               *--------------------------------------------------------------
0123               * Initialisation
0124               *--------------------------------------------------------------
0125 2D3E 0649  22         dect  stack
0126 2D40 C64B  38         mov   r11,*stack            ; Save return address
0127               
0128 2D42 0205  24         li    tmp1,io.op.read       ; io.op.read
     2D44 0002     
0129 2D46 1013  14         jmp   _file.record.fop      ; Do file operation
0130               
0131               
0132               
0133               ***************************************************************
0134               * file.record.write - Write record to file
0135               ***************************************************************
0136               *  bl   @file.record.write
0137               *       data P0
0138               *--------------------------------------------------------------
0139               *  P0 = Address of PAB in VDP RAM (without +9 offset!)
0140               *--------------------------------------------------------------
0141               *  bl   @xfile.record.write
0142               *
0143               *  R0 = Address of PAB in VDP RAM
0144               *--------------------------------------------------------------
0145               *  Output:
0146               *  tmp0     = Copy of VDP PAB byte 1 after operation
0147               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0148               *  tmp2 LSB = Copy of status register after operation
0149               ********|*****|*********************|**************************
0150               file.record.write:
0151 2D48 C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0152               *--------------------------------------------------------------
0153               * Initialisation
0154               *--------------------------------------------------------------
0155 2D4A 0649  22         dect  stack
0156 2D4C C64B  38         mov   r11,*stack            ; Save return address
0157               
0158 2D4E C100  30         mov   r0,tmp0               ; VDP write address (PAB byte 0)
0159 2D50 0224  30         ai    tmp0,5                ; Position to PAB byte 5
     2D52 0005     
0160               
0161 2D54 C160  42         mov   @fh.reclen,tmp1       ; Get record length
     2D56 A43E     
0162               
0163 2D58 06A0  36         bl    @xvputb               ; Write character count to PAB
     2D5A 22CC     
0164                                                   ; \ i  tmp0 = VDP target address
0165                                                   ; / i  tmp1 = Byte to write
0166               
0167 2D5C 0205  24         li    tmp1,io.op.write      ; io.op.write
     2D5E 0003     
0168 2D60 1006  14         jmp   _file.record.fop      ; Do file operation
0169               
0170               
0171               
0172               file.record.seek:
0173 2D62 1000  14         nop                         ; Not yet supported
0174               
0175               
0176               file.image.load:
0177 2D64 1000  14         nop                         ; Not yet supported
0178               
0179               
0180               file.image.save:
0181 2D66 1000  14         nop                         ; Not yet supported
0182               
0183               
0184               file.delete:
0185 2D68 1000  14         nop                         ; Not yet supported
0186               
0187               file.rename:
0188 2D6A 1000  14         nop                         ; Not yet supported
0189               
0190               
0191               file.status:
0192 2D6C 1000  14         nop
0193               
0194               
0195               
0196               ***************************************************************
0197               * _file.record.fop - File operation
0198               ***************************************************************
0199               * Called internally via JMP/B by file operations
0200               *--------------------------------------------------------------
0201               *  Input:
0202               *  r0   = Address of PAB in VDP RAM
0203               *  r1   = File type/mode
0204               *  tmp1 = File operation opcode
0205               *
0206               *  @fh.offsetopcode = >00  Data buffer in VDP RAM
0207               *  @fh.offsetopcode = >40  Data buffer in CPU RAM
0208               *--------------------------------------------------------------
0209               *  Output:
0210               *  tmp0     = Copy of VDP PAB byte 1 after operation
0211               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0212               *  tmp2 LSB = Copy of status register after operation
0213               *--------------------------------------------------------------
0214               *  Register usage:
0215               *  r0, r1, tmp0, tmp1, tmp2
0216               *--------------------------------------------------------------
0217               *  Remarks
0218               *  Private, only to be called from inside fio_level3 module
0219               *  via jump or branch instruction.
0220               *
0221               *  Uses @waux1 for backup/restore of memory word @>8322
0222               ********|*****|*********************|**************************
0223               _file.record.fop:
0224                       ;------------------------------------------------------
0225                       ; Write to PAB required?
0226                       ;------------------------------------------------------
0227 2D6E C800  42         mov   r0,@fh.pab.ptr        ; Backup of pointer to current VDP PAB
     2D70 A436     
0228                       ;------------------------------------------------------
0229                       ; Set file opcode in VDP PAB
0230                       ;------------------------------------------------------
0231 2D72 C100  30         mov   r0,tmp0               ; VDP write address (PAB byte 0)
0232               
0233 2D74 A160  42         a     @fh.offsetopcode,tmp1 ; Inject offset for file I/O opcode
     2D76 A44E     
0234                                                   ; >00 = Data buffer in VDP RAM
0235                                                   ; >40 = Data buffer in CPU RAM
0236               
0237 2D78 06A0  36         bl    @xvputb               ; Write file I/O opcode to VDP
     2D7A 22CC     
0238                                                   ; \ i  tmp0 = VDP target address
0239                                                   ; / i  tmp1 = Byte to write
0240                       ;------------------------------------------------------
0241                       ; Set file type/mode in VDP PAB
0242                       ;------------------------------------------------------
0243 2D7C C100  30         mov   r0,tmp0               ; VDP write address (PAB byte 0)
0244 2D7E 0584  22         inc   tmp0                  ; Next byte in PAB
0245 2D80 C160  42         mov   @fh.filetype,tmp1     ; Get file type/mode
     2D82 A44C     
0246               
0247 2D84 06A0  36         bl    @xvputb               ; Write file type/mode to VDP
     2D86 22CC     
0248                                                   ; \ i  tmp0 = VDP target address
0249                                                   ; / i  tmp1 = Byte to write
0250                       ;------------------------------------------------------
0251                       ; Prepare for DSRLNK
0252                       ;------------------------------------------------------
0253 2D88 0220  30 !       ai    r0,9                  ; Move to file descriptor length
     2D8A 0009     
0254 2D8C C800  34         mov   r0,@>8356             ; Pass file descriptor to DSRLNK
     2D8E 8356     
0255               *--------------------------------------------------------------
0256               * Call DSRLINK for doing file operation
0257               *--------------------------------------------------------------
0258 2D90 C820  42         mov   @>8322,@waux1         ; Save word at @>8322
     2D92 8322     
     2D94 833C     
0259               
0260 2D96 C120  42         mov   @dsrlnk.savcru,tmp0   ; Call optimized or standard version?
     2D98 A42A     
0261 2D9A 1504  14         jgt   _file.record.fop.optimized
0262                                                   ; Optimized version
0263               
0264                       ;------------------------------------------------------
0265                       ; First IO call. Call standard DSRLNK
0266                       ;------------------------------------------------------
0267 2D9C 0420  62         blwp  @dsrlnk               ; Call DSRLNK
     2D9E 2B9A     
0268 2DA0 0008                   data >8               ; \ i  p0 = >8 (DSR)
0269                                                   ; / o  r0 = Copy of VDP PAB byte 1
0270 2DA2 1002  14         jmp  _file.record.fop.pab   ; Return PAB to caller
0271               
0272                       ;------------------------------------------------------
0273                       ; Recurring IO call. Call optimized DSRLNK
0274                       ;------------------------------------------------------
0275               _file.record.fop.optimized:
0276 2DA4 0420  62         blwp  @dsrlnk.reuse         ; Call DSRLNK
     2DA6 2CCA     
0277               
0278               *--------------------------------------------------------------
0279               * Return PAB details to caller
0280               *--------------------------------------------------------------
0281               _file.record.fop.pab:
0282 2DA8 02C6  12         stst  tmp2                  ; Store status register contents in tmp2
0283                                                   ; Upon DSRLNK return status register EQ bit
0284                                                   ; 1 = No file error
0285                                                   ; 0 = File error occured
0286               
0287 2DAA C820  42         mov   @waux1,@>8322         ; Restore word at @>8322
     2DAC 833C     
     2DAE 8322     
0288               *--------------------------------------------------------------
0289               * Get PAB byte 5 from VDP ram into tmp1 (character count)
0290               *--------------------------------------------------------------
0291 2DB0 C120  42         mov   @fh.pab.ptr,tmp0      ; Get VDP address of current PAB
     2DB2 A436     
0292 2DB4 0224  30         ai    tmp0,5                ; Get address of VDP PAB byte 5
     2DB6 0005     
0293 2DB8 06A0  36         bl    @xvgetb               ; VDP read PAB status byte into tmp0
     2DBA 22E4     
0294 2DBC C144  30         mov   tmp0,tmp1             ; Move to destination
0295               *--------------------------------------------------------------
0296               * Get PAB byte 1 from VDP ram into tmp0 (status)
0297               *--------------------------------------------------------------
0298 2DBE C100  30         mov   r0,tmp0               ; VDP PAB byte 1 (status)
0299                                                   ; as returned by DSRLNK
0300               *--------------------------------------------------------------
0301               * Exit
0302               *--------------------------------------------------------------
0303               ; If an error occured during the IO operation, then the
0304               ; equal bit in the saved status register (=tmp2) is set to 1.
0305               ;
0306               ; Upon return from this IO call you should basically test with:
0307               ;       coc   @wbit2,tmp2           ; Equal bit set?
0308               ;       jeq   my_file_io_handler    ; Yes, IO error occured
0309               ;
0310               ; Then look for further details in the copy of VDP PAB byte 1
0311               ; in register tmp0, bits 13-15
0312               ;
0313               ;       srl   tmp0,8                ; Right align (only for DSR type >8
0314               ;                                   ; calls, skip for type >A subprograms!)
0315               ;       ci    tmp0,io.err.<code>    ; Check for error pattern
0316               ;       jeq   my_error_handler
0317               *--------------------------------------------------------------
0318               _file.record.fop.exit:
0319 2DC0 C2F9  46         mov   *stack+,r11           ; Pop R11
0320 2DC2 045B  24         b     *r11                  ; Return to caller
                   < runlib.asm
0235               
0237                       copy  "rom_fg99.asm"             ; FinalGROM 99 support
     **** ****     > rom_fg99.asm
0001               * FILE......: rom_fg99.asm
0002               * Purpose...: FinalGROM 99 reload code
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *               FinalGROM 99 reload cartridge code
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * fg99 - Load cartridge from flash card into FinalGROM99
0010               ***************************************************************
0011               *  bl   @fg99
0012               *       data p0
0013               *
0014               *  p0 = Pointer to FG99 cartridge table entry
0015               *--------------------------------------------------------------
0016               *  bl   @xfg99
0017               *
0018               *  tmp0 = Pointer to FG99 cartridge table entry
0019               *--------------------------------------------------------------
0020               * Remark
0021               * https://github.com/endlos99/finalgrom99/blob/master/lib/reload_example.a99
0022               *
0023               * NOTE: You must use shortened 8.3 upper-case filenames here.
0024               *       For example, to reload "mylongfile.bin", use "MYLONG~1.BIN".
0025               *       If there are multiple files with prefix "MYLONG" in the
0026               *       folder, you may have to replace the suffix "~1" by "~2",
0027               *       "~3", ... to select the correct file.
0028               *
0029               *       PAD filename with >00 bytes so that it's always 8 bytes.
0030               *       Code is expected to run from RAM, not from the cartridge space.
0031               ********|*****|*********************|**************************
0032 2DC4 C13B  46 fg99    mov   *r11+,tmp0            ; Get p0
0033               *--------------------------------------------------------------
0034               * Register version
0035               *--------------------------------------------------------------
0036               xfg99:
0037 2DC6 0649  22         dect  stack
0038 2DC8 C64B  38         mov   r11,*stack            ; Save return address
0039 2DCA 0649  22         dect  stack
0040 2DCC C644  38         mov   tmp0,*stack           ; Push tmp0
0041               *--------------------------------------------------------------
0042               * (1) Send prefix and filename to FinalGROM
0043               *--------------------------------------------------------------
0044 2DCE C004  30         mov   tmp0,r0               ; Get Pointer
0045 2DD0 0202  24         li    r2,20                 ; Len = prefix (8) + fname (8) + suffix (4)
     2DD2 0014     
0046               fg99.send.loop:
0047 2DD4 04E0  34         clr   @>6000                ; Signal new byte
     2DD6 6000     
0048 2DD8 0201  24         li    r1,>0038              ; >7000 >> 9
     2DDA 0038     
0049 2DDC D070  44         movb  *r0+,r1
0050 2DDE 0B71  38         src   r1,7                  ; >7000 + (byte << 1)
0051               
0052 2DE0 04D1  30         clr   *r1                   ; Send byte
0053 2DE2 0602  22         dec   r2                    ; Prepare for next iteration
0054 2DE4 16F7  14         jne   fg99.send.loop        ; Next byte
0055               
0056 2DE6 04E0  34         clr   @>6000                ; Done sending filename
     2DE8 6000     
0057 2DEA 0B80  40         src   r0,8                  ; Burn at least 21 cycles
0058               *--------------------------------------------------------------
0059               * (3) Wait for image to be loaded by FinalGROM
0060               *--------------------------------------------------------------
0061               fg99.wait:
0062 2DEC 0200  24         li    r0,>6000              ; check >6000->6200
     2DEE 6000     
0063 2DF0 0202  24         li    r2,>100
     2DF2 0100     
0064 2DF4 C070  46 !       mov   *r0+, r1
0065 2DF6 1603  14         jne   fg99.exit             ; Done loading, run cartridge
0066 2DF8 0602  22         dec   r2
0067 2DFA 16FC  14         jne   -!
0068 2DFC 10F7  14         jmp   fg99.wait
0069               *--------------------------------------------------------------
0070               * (4) Image finished loading
0071               *--------------------------------------------------------------
0072               fg99.exit:
0073 2DFE C139  46         mov   *stack+,tmp0          ; Pop tmp0
0074 2E00 C2F9  46         mov   *stack+,r11           ; Pop R11
0075 2E02 045B  24         b     *r11                  ; Return to caller
                   < runlib.asm
0239               
0240               *//////////////////////////////////////////////////////////////
0241               *                            TIMERS
0242               *//////////////////////////////////////////////////////////////
0243               
0244                       copy  "timers_tmgr.asm"          ; Timers / Thread scheduler
     **** ****     > timers_tmgr.asm
0001               * FILE......: timers_tmgr.asm
0002               * Purpose...: Timers / Thread scheduler
0003               
0004               ***************************************************************
0005               * TMGR - X - Start Timers/Thread scheduler
0006               ***************************************************************
0007               *  B @TMGR
0008               *--------------------------------------------------------------
0009               *  REMARKS
0010               *  Timer/Thread scheduler. Normally called from MAIN.
0011               *  This is basically the kernel keeping everything together.
0012               *  Do not forget to set BTIHI to highest slot in use.
0013               *
0014               *  Register usage in TMGR8 - TMGR11
0015               *  TMP0  = Pointer to timer table
0016               *  R10LB = Use as slot counter
0017               *  TMP2  = 2nd word of slot data
0018               *  TMP3  = Address of routine to call
0019               ********|*****|*********************|**************************
0020 2E04 0300  22 tmgr    limi  0                     ; No interrupt processing
     2E06 0000     
0021               *--------------------------------------------------------------
0022               * Read VDP status register
0023               *--------------------------------------------------------------
0024 2E08 D360  38 tmgr1   movb  @vdps,r13             ; Save copy of VDP status register in R13
     2E0A 8802     
0025               *--------------------------------------------------------------
0026               * Latch sprite collision flag
0027               *--------------------------------------------------------------
0028 2E0C 2360  32         coc   @wbit2,r13            ; C flag on ?
     2E0E 201C     
0029 2E10 1602  14         jne   tmgr1a                ; No, so move on
0030 2E12 E0A0  42         soc   @wbit12,config        ; Latch bit 12 in config register
     2E14 2008     
0031               *--------------------------------------------------------------
0032               * Interrupt flag
0033               *--------------------------------------------------------------
0034 2E16 2360  32 tmgr1a  coc   @wbit0,r13            ; Interupt flag set ?
     2E18 2020     
0035 2E1A 1311  14         jeq   tmgr4                 ; Yes, process slots 0..n
0036               *--------------------------------------------------------------
0037               * Run speech player
0038               *--------------------------------------------------------------
0044               *--------------------------------------------------------------
0045               * Run kernel thread
0046               *--------------------------------------------------------------
0047 2E1C 20A0  32 tmgr2   coc   @wbit8,config         ; Kernel thread blocked ?
     2E1E 2010     
0048 2E20 1305  14         jeq   tmgr3                 ; Yes, skip to user hook
0049 2E22 20A0  32         coc   @wbit9,config         ; Kernel thread enabled ?
     2E24 200E     
0050 2E26 1602  14         jne   tmgr3                 ; No, skip to user hook
0051 2E28 0460  28         b     @kthread              ; Run kernel thread
     2E2A 2EA2     
0052               *--------------------------------------------------------------
0053               * Run user hook
0054               *--------------------------------------------------------------
0055 2E2C 20A0  32 tmgr3   coc   @wbit6,config         ; User hook blocked ?
     2E2E 2014     
0056 2E30 13EB  14         jeq   tmgr1
0057 2E32 20A0  32         coc   @wbit7,config         ; User hook enabled ?
     2E34 2012     
0058 2E36 16E8  14         jne   tmgr1
0059 2E38 C120  38         mov   @wtiusr,tmp0
     2E3A 832E     
0060 2E3C 0454  24         b     *tmp0                 ; Run user hook
0061               *--------------------------------------------------------------
0062               * Do internal housekeeping
0063               *--------------------------------------------------------------
0064 2E3E 40A0  42 tmgr4   szc   @tmdat,config         ; Unblock kernel thread and user hook
     2E40 2EA0     
0065 2E42 C10A  30         mov   r10,tmp0
0066 2E44 0244  30         andi  tmp0,>00ff            ; Clear HI byte
     2E46 00FF     
0067 2E48 20A0  32         coc   @wbit2,config         ; PAL flag set ?
     2E4A 201C     
0068 2E4C 1303  14         jeq   tmgr5
0069 2E4E 0284  26         ci    tmp0,60               ; 1 second reached ?
     2E50 003C     
0070 2E52 1002  14         jmp   tmgr6
0071 2E54 0284  26 tmgr5   ci    tmp0,50
     2E56 0032     
0072 2E58 1101  14 tmgr6   jlt   tmgr7                 ; No, continue
0073 2E5A 1001  14         jmp   tmgr8
0074 2E5C 058A  22 tmgr7   inc   r10                   ; Increase tick counter
0075               *--------------------------------------------------------------
0076               * Loop over slots
0077               *--------------------------------------------------------------
0078 2E5E C120  38 tmgr8   mov   @wtitab,tmp0          ; Pointer to timer table
     2E60 832C     
0079 2E62 024A  30         andi  r10,>ff00             ; Use R10LB as slot counter. Reset.
     2E64 FF00     
0080 2E66 C1D4  38 tmgr9   mov   *tmp0,tmp3            ; Is slot empty ?
0081 2E68 1316  14         jeq   tmgr11                ; Yes, get next slot
0082               *--------------------------------------------------------------
0083               *  Check if slot should be executed
0084               *--------------------------------------------------------------
0085 2E6A 05C4  22         inct  tmp0                  ; Second word of slot data
0086 2E6C 0594  30         inc   *tmp0                 ; Update tick count in slot
0087 2E6E C194  38         mov   *tmp0,tmp2            ; Get second word of slot data
0088 2E70 9820  42         cb    @tmp2hb,@tmp2lb       ; Slot target count = Slot internal counter ?
     2E72 830C     
     2E74 830D     
0089 2E76 1608  14         jne   tmgr10                ; No, get next slot
0090 2E78 0246  30         andi  tmp2,>ff00            ; Clear internal counter
     2E7A FF00     
0091 2E7C C506  38         mov   tmp2,*tmp0            ; Update timer table
0092               *--------------------------------------------------------------
0093               *  Run slot, we only need TMP0 to survive
0094               *--------------------------------------------------------------
0095 2E7E C804  34         mov   tmp0,@wtitmp          ; Save TMP0
     2E80 8330     
0096 2E82 0697  32         bl    *tmp3                 ; Call routine in slot
0097 2E84 C120  38 slotok  mov   @wtitmp,tmp0          ; Restore TMP0
     2E86 8330     
0098               *--------------------------------------------------------------
0099               *  Prepare for next slot
0100               *--------------------------------------------------------------
0101 2E88 058A  22 tmgr10  inc   r10                   ; Next slot
0102 2E8A 9820  42         cb    @r10lb,@btihi         ; Last slot done ?
     2E8C 8315     
     2E8E 8314     
0103 2E90 1504  14         jgt   tmgr12                ; yes, Wait for next VDP interrupt
0104 2E92 05C4  22         inct  tmp0                  ; Offset for next slot
0105 2E94 10E8  14         jmp   tmgr9                 ; Process next slot
0106 2E96 05C4  22 tmgr11  inct  tmp0                  ; Skip 2nd word of slot data
0107 2E98 10F7  14         jmp   tmgr10                ; Process next slot
0108 2E9A 024A  30 tmgr12  andi  r10,>ff00             ; Use R10LB as tick counter. Reset.
     2E9C FF00     
0109 2E9E 10B4  14         jmp   tmgr1
0110 2EA0 0280     tmdat   data  >0280                 ; Bit 8 (kernel thread) and bit 6 (user hook)
0111               
                   < runlib.asm
0245                       copy  "timers_kthread.asm"       ; Timers / Kernel thread
     **** ****     > timers_kthread.asm
0001               * FILE......: timers_kthread.asm
0002               * Purpose...: Timers / The kernel thread
0003               
0004               
0005               ***************************************************************
0006               * KTHREAD - The kernel thread
0007               *--------------------------------------------------------------
0008               *  REMARKS
0009               *  You should not call the kernel thread manually.
0010               *  Instead control it via the CONFIG register.
0011               *
0012               *  The kernel thread is responsible for running the sound
0013               *  player and doing keyboard scan.
0014               ********|*****|*********************|**************************
0015 2EA2 E0A0  42 kthread soc   @wbit8,config         ; Block kernel thread
     2EA4 2010     
0016               *--------------------------------------------------------------
0017               * Run sound player
0018               *--------------------------------------------------------------
0022 2EA6 20A0  32         coc   @wbit13,config        ; Sound player on ?
     2EA8 2006     
0023 2EAA 1602  14         jne   kthread_kb
0024 2EAC 06A0  36         bl    @sdpla1               ; Run sound player
     2EAE 2836     
0026               *--------------------------------------------------------------
0027               * Scan virtual keyboard
0028               *--------------------------------------------------------------
0029               kthread_kb
0031               *       <<skipped>>
0035               *--------------------------------------------------------------
0036               * Scan real keyboard
0037               *--------------------------------------------------------------
0042 2EB0 06A0  36         bl    @rkscan               ; Scan full keyboard with ROM#0 KSCAN
     2EB2 28B6     
0047               *--------------------------------------------------------------
0048               kthread_exit
0049 2EB4 0460  28         b     @tmgr3                ; Exit
     2EB6 2E2C     
                   < runlib.asm
0246                       copy  "timers_hooks.asm"         ; Timers / User hooks
     **** ****     > timers_hooks.asm
0001               * FILE......: timers_kthread.asm
0002               * Purpose...: Timers / User hooks
0003               
0004               
0005               ***************************************************************
0006               * MKHOOK - Allocate user hook
0007               ***************************************************************
0008               *  BL    @MKHOOK
0009               *  DATA  P0
0010               *--------------------------------------------------------------
0011               *  P0 = Address of user hook
0012               *--------------------------------------------------------------
0013               *  REMARKS
0014               *  The user hook gets executed after the kernel thread.
0015               *  The user hook must always exit with "B @HOOKOK"
0016               ********|*****|*********************|**************************
0017 2EB8 C83B  50 mkhook  mov   *r11+,@wtiusr         ; Set user hook address
     2EBA 832E     
0018 2EBC E0A0  42         soc   @wbit7,config         ; Enable user hook
     2EBE 2012     
0019 2EC0 045B  24 mkhoo1  b     *r11                  ; Return
0020      2E08     hookok  equ   tmgr1                 ; Exit point for user hook
0021               
0022               
0023               ***************************************************************
0024               * CLHOOK - Clear user hook
0025               ***************************************************************
0026               *  BL    @CLHOOK
0027               ********|*****|*********************|**************************
0028 2EC2 04E0  26 clhook  clr   @wtiusr               ; Unset user hook address
     2EC4 832E     
0029 2EC6 0242  30         andi  config,>feff          ; Disable user hook (bit 7=0)
     2EC8 FEFF     
0030 2ECA 045B  24         b     *r11                  ; Return
                   < runlib.asm
0247               
0249                       copy  "timers_alloc.asm"         ; Timers / Slot calculation
     **** ****     > timers_alloc.asm
0001               * FILE......: timer_alloc.asm
0002               * Purpose...: Timers / Timer allocation
0003               
0004               
0005               ***************************************************************
0006               * MKSLOT - Allocate timer slot(s)
0007               ***************************************************************
0008               *  BL    @MKSLOT
0009               *  BYTE  P0HB,P0LB
0010               *  DATA  P1
0011               *  ....
0012               *  DATA  EOL                        ; End-of-list
0013               *--------------------------------------------------------------
0014               *  P0 = Slot number, target count
0015               *  P1 = Subroutine to call via BL @xxxx if slot is fired
0016               ********|*****|*********************|**************************
0017 2ECC C13B  46 mkslot  mov   *r11+,tmp0
0018 2ECE C17B  46         mov   *r11+,tmp1
0019               *--------------------------------------------------------------
0020               *  Calculate address of slot
0021               *--------------------------------------------------------------
0022 2ED0 C184  30         mov   tmp0,tmp2
0023 2ED2 0966  36         srl   tmp2,6                ; Right align & TMP2 = TMP2 * 4
0024 2ED4 A1A0  38         a     @wtitab,tmp2          ; Add table base
     2ED6 832C     
0025               *--------------------------------------------------------------
0026               *  Add slot to table
0027               *--------------------------------------------------------------
0028 2ED8 CD85  46         mov   tmp1,*tmp2+           ; Store address of subroutine
0029 2EDA 0A84  40         sla   tmp0,8                ; Get rid of slot number
0030 2EDC C584  38         mov   tmp0,*tmp2            ; Store target count and reset tick count
0031               *--------------------------------------------------------------
0032               *  Check for end of list
0033               *--------------------------------------------------------------
0034 2EDE 881B  46         c     *r11,@w$ffff          ; End of list ?
     2EE0 2022     
0035 2EE2 1301  14         jeq   mkslo1                ; Yes, exit
0036 2EE4 10F3  14         jmp   mkslot                ; Process next entry
0037               *--------------------------------------------------------------
0038               *  Exit
0039               *--------------------------------------------------------------
0040 2EE6 05CB  22 mkslo1  inct  r11
0041 2EE8 045B  24         b     *r11                  ; Exit
0042               
0043               
0044               ***************************************************************
0045               * CLSLOT - Clear single timer slot
0046               ***************************************************************
0047               *  BL    @CLSLOT
0048               *  DATA  P0
0049               *--------------------------------------------------------------
0050               *  P0 = Slot number
0051               ********|*****|*********************|**************************
0052 2EEA C13B  46 clslot  mov   *r11+,tmp0
0053 2EEC 0A24  28 xlslot  sla   tmp0,2                ; TMP0 = TMP0*4
0054 2EEE A120  38         a     @wtitab,tmp0          ; Add table base
     2EF0 832C     
0055 2EF2 04F4  38         clr   *tmp0+                ; Clear 1st word of slot
0056 2EF4 04D4  30         clr   *tmp0                 ; Clear 2nd word of slot
0057 2EF6 045B  24         b     *r11                  ; Exit
0058               
0059               
0060               ***************************************************************
0061               * RSSLOT - Reset single timer slot loop counter
0062               ***************************************************************
0063               *  BL    @RSSLOT
0064               *  DATA  P0
0065               *--------------------------------------------------------------
0066               *  P0 = Slot number
0067               ********|*****|*********************|**************************
0068 2EF8 C13B  46 rsslot  mov   *r11+,tmp0
0069 2EFA 0A24  28         sla   tmp0,2                ; TMP0 = TMP0*4
0070 2EFC A120  38         a     @wtitab,tmp0          ; Add table base
     2EFE 832C     
0071 2F00 05C4  22         inct  tmp0                  ; Skip 1st word of slot
0072 2F02 C154  38         mov   *tmp0,tmp1
0073 2F04 0245  30         andi  tmp1,>ff00            ; Clear LSB (loop counter)
     2F06 FF00     
0074 2F08 C505  38         mov   tmp1,*tmp0
0075 2F0A 045B  24         b     *r11                  ; Exit
                   < runlib.asm
0251               
0252               
0253               
0254               *//////////////////////////////////////////////////////////////
0255               *                    RUNLIB INITIALISATION
0256               *//////////////////////////////////////////////////////////////
0257               
0258               ***************************************************************
0259               *  RUNLIB - Runtime library initalisation
0260               ***************************************************************
0261               *  B  @RUNLIB
0262               *--------------------------------------------------------------
0263               *  REMARKS
0264               *  if R0 in WS1 equals >4a4a we were called from the system
0265               *  crash handler so we return there after initialisation.
0266               
0267               *  If R1 in WS1 equals >FFFF we return to the TI title screen
0268               *  after clearing scratchpad memory. This has higher priority
0269               *  as crash handler flag R0.
0270               ********|*****|*********************|**************************
0277 2F0C 04E0  26 runlib  clr   @>8302                ; Reset exit flag (R1 in workspace WS1!)
     2F0E 8302     
0279               *--------------------------------------------------------------
0280               * Alternative entry point
0281               *--------------------------------------------------------------
0282 2F10 0300  22 runli1  limi  0                     ; Turn off interrupts
     2F12 0000     
0283 2F14 02E0  18         lwpi  ws1                   ; Activate workspace 1
     2F16 8300     
0284 2F18 C0E0  30         mov   @>83c0,r3             ; Get random seed from OS monitor
     2F1A 83C0     
0285               *--------------------------------------------------------------
0286               * Clear scratch-pad memory from R4 upwards
0287               *--------------------------------------------------------------
0288 2F1C 0202  20 runli2  li    r2,>8308
     2F1E 8308     
0289 2F20 04F2  30 runli3  clr   *r2+                  ; Clear scratchpad >8306->83FF
0290 2F22 0282  22         ci    r2,>8400
     2F24 8400     
0291 2F26 16FC  14         jne   runli3
0292               *--------------------------------------------------------------
0293               * Exit to TI-99/4A title screen ?
0294               *--------------------------------------------------------------
0295 2F28 0281  22 runli3a ci    r1,>ffff              ; Exit flag set ?
     2F2A FFFF     
0296 2F2C 1602  14         jne   runli4                ; No, continue
0297 2F2E 0420  42         blwp  @0                    ; Yes, bye bye
     2F30 0000     
0298               *--------------------------------------------------------------
0299               * Determine if VDP is PAL or NTSC
0300               *--------------------------------------------------------------
0301 2F32 C803  30 runli4  mov   r3,@waux1             ; Store random seed
     2F34 833C     
0302 2F36 04C1  14         clr   r1                    ; Reset counter
0303 2F38 0202  20         li    r2,10                 ; We test 10 times
     2F3A 000A     
0304 2F3C C0E0  30 runli5  mov   @vdps,r3
     2F3E 8802     
0305 2F40 20E0  32         coc   @wbit0,r3             ; Interupt flag set ?
     2F42 2020     
0306 2F44 1302  14         jeq   runli6
0307 2F46 0581  14         inc   r1                    ; Increase counter
0308 2F48 10F9  14         jmp   runli5
0309 2F4A 0602  14 runli6  dec   r2                    ; Next test
0310 2F4C 16F7  14         jne   runli5
0311 2F4E 0281  22         ci    r1,>1250              ; Max for NTSC reached ?
     2F50 1250     
0312 2F52 1202  14         jle   runli7                ; No, so it must be NTSC
0313 2F54 0262  22         ori   config,palon          ; Yes, it must be PAL, set flag
     2F56 201C     
0314               *--------------------------------------------------------------
0315               * Copy machine code to scratchpad (prepare tight loop)
0316               *--------------------------------------------------------------
0317 2F58 06A0  32 runli7  bl    @loadmc
     2F5A 221A     
0318               *--------------------------------------------------------------
0319               * Initialize registers, memory, ...
0320               *--------------------------------------------------------------
0321 2F5C 04C1  14 runli9  clr   r1
0322 2F5E 04C2  14         clr   r2
0323 2F60 04C3  14         clr   r3
0324 2F62 0209  20         li    stack,sp2.stktop      ; Set top of stack (grows downwards!)
     2F64 A900     
0325 2F66 020F  20         li    r15,vdpw              ; Set VDP write address
     2F68 8C00     
0327 2F6A 06A0  32         bl    @mute                 ; Mute sound generators
     2F6C 27FA     
0329               *--------------------------------------------------------------
0330               * Setup video memory
0331               *--------------------------------------------------------------
0333 2F6E 0280  22         ci    r0,>4a4a              ; Crash flag set?
     2F70 4A4A     
0334 2F72 1605  14         jne   runlia
0335 2F74 06A0  32         bl    @filv                 ; Clear 12K VDP memory instead
     2F76 228E     
0336 2F78 0000             data  >0000,>00,>3000       ; of 16K, so that PABs survive
     2F7A 0000     
     2F7C 3000     
0341 2F7E 06A0  32 runlia  bl    @filv
     2F80 228E     
0342 2F82 0FC0             data  pctadr,spfclr,16      ; Load color table
     2F84 00F4     
     2F86 0010     
0343               *--------------------------------------------------------------
0344               * Check if there is a F18A present
0345               *--------------------------------------------------------------
0349 2F88 06A0  32         bl    @f18unl               ; Unlock the F18A
     2F8A 272A     
0350 2F8C 06A0  32         bl    @f18chk               ; Check if F18A is there \
     2F8E 2754     
0351 2F90 06A0  32         bl    @f18chk               ; Check if F18A is there | js99er bug?
     2F92 2754     
0352 2F94 06A0  32         bl    @f18chk               ; Check if F18A is there /
     2F96 2754     
0353 2F98 06A0  32         bl    @f18lck               ; Lock the F18A again
     2F9A 2740     
0354               
0355 2F9C 06A0  32         bl    @putvr                ; Reset all F18a extended registers
     2F9E 2332     
0356 2FA0 3201                   data >3201            ; F18a VR50 (>32), bit 1
0358               *--------------------------------------------------------------
0359               * Check if there is a speech synthesizer attached
0360               *--------------------------------------------------------------
0362               *       <<skipped>>
0366               *--------------------------------------------------------------
0367               * Load video mode table & font
0368               *--------------------------------------------------------------
0369 2FA2 06A0  32 runlic  bl    @vidtab               ; Load video mode table into VDP
     2FA4 22F8     
0370 2FA6 7F6A             data  spvmod                ; Equate selected video mode table
0371 2FA8 0204  20         li    tmp0,spfont           ; Get font option
     2FAA 0000     
0372 2FAC 0544  14         inv   tmp0                  ; NOFONT (>FFFF) specified ?
0373 2FAE 1304  14         jeq   runlid                ; Yes, skip it
0374 2FB0 06A0  32         bl    @ldfnt
     2FB2 2360     
0375 2FB4 3100             data  fntadr,spfont         ; Load specified font
     2FB6 0000     
0376               *--------------------------------------------------------------
0377               * Did a system crash occur before runlib was called?
0378               *--------------------------------------------------------------
0379 2FB8 0280  22 runlid  ci    r0,>4a4a              ; Crash flag set?
     2FBA 4A4A     
0380 2FBC 1602  14         jne   runlie                ; No, continue
0381 2FBE 0460  28         b     @cpu.crash.main       ; Yes, back to crash handler
     2FC0 2086     
0382               *--------------------------------------------------------------
0383               * Branch to main program
0384               *--------------------------------------------------------------
0385 2FC2 0262  22 runlie  ori   config,>0040          ; Enable kernel thread (bit 9 on)
     2FC4 0040     
0386 2FC6 0460  28         b     @main                 ; Give control to main program
     2FC8 6046     
                   < stevie_b2.asm
0051                       copy  "ram.resident.asm"
     **** ****     > ram.resident.asm
0001               * FILE......: ram.resident.asm
0002               * Purpose...: Resident modules in LOW MEMEXP callable from all ROM banks.
0003               
0004                       ;------------------------------------------------------
0005                       ; Low-level modules
0006                       ;------------------------------------------------------
0007                       copy  "rom.farjump.asm"        ; ROM bankswitch trampoline
     **** ****     > rom.farjump.asm
0001               * FILE......: rom.farjump.asm
0002               * Purpose...: Trampoline to routine in other ROM bank
0003               
0004               ***************************************************************
0005               * rom.farjump - Jump to routine in specified bank
0006               ***************************************************************
0007               *  bl   @rom.farjump
0008               *       data p0,p1,p2
0009               *--------------------------------------------------------------
0010               *  p0 = Write address of target ROM bank
0011               *  p1 = Vector address with target address to jump to
0012               *  p2 = Write address of source ROM bank
0013               *--------------------------------------------------------------
0014               *  bl @xrom.farjump
0015               *
0016               *  tmp0 = Write address of target ROM bank
0017               *  tmp1 = Vector address with target address to jump to
0018               *  tmp2 = Write address of source ROM bank
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * tmp0,tmp1,tmp2,tmp3
0022               *--------------------------------------------------------------
0023               *  Remarks
0024               *  r11 gets pushed/popped from farjump stack, not from normal
0025               *  value stack.
0026               ********|*****|*********************|**************************
0027               rom.farjump:
0028 2FCA 0649  14         dect  stack
0029 2FCC C644  30         mov   tmp0,*stack           ; Push tmp0
0030 2FCE 0649  14         dect  stack
0031 2FD0 C645  30         mov   tmp1,*stack           ; Push tmp1
0032 2FD2 0649  14         dect  stack
0033 2FD4 C646  30         mov   tmp2,*stack           ; Push tmp2
0034 2FD6 0649  14         dect  stack
0035 2FD8 C647  30         mov   tmp3,*stack           ; Push tmp3
0036                       ;------------------------------------------------------
0037                       ; Parameters
0038                       ;------------------------------------------------------
0039 2FDA C13B  30         mov   *r11+,tmp0            ; P0
0040 2FDC C17B  30         mov   *r11+,tmp1            ; P1
0041 2FDE C1BB  30         mov   *r11+,tmp2            ; P2
0042 2FE0 1008  14         jmp   xrom.farjump.push_return
0043                       ;------------------------------------------------------
0044                       ; Push registers to value stack (but not r11!)
0045                       ;------------------------------------------------------
0046               xrom.farjump:
0047 2FE2 0649  14         dect  stack
0048 2FE4 C644  30         mov   tmp0,*stack           ; Push tmp0
0049 2FE6 0649  14         dect  stack
0050 2FE8 C645  30         mov   tmp1,*stack           ; Push tmp1
0051 2FEA 0649  14         dect  stack
0052 2FEC C646  30         mov   tmp2,*stack           ; Push tmp2
0053 2FEE 0649  14         dect  stack
0054 2FF0 C647  30         mov   tmp3,*stack           ; Push tmp3
0055                       ;------------------------------------------------------
0056                       ; Push to farjump return stack
0057                       ;------------------------------------------------------
0058               xrom.farjump.push_return:
0059 2FF2 0284  22         ci    tmp0,>6000            ; Invalid bank write address?
     2FF4 6000     
0060 2FF6 1116  14         jlt   rom.farjump.bankswitch.failed1
0061                                                   ; Crash if bogus value in bank write address
0062               
0063 2FF8 C1E0  34         mov   @tv.fj.stackpnt,tmp3  ; Get farjump stack pointer
     2FFA A228     
0064 2FFC 0647  14         dect  tmp3
0065 2FFE C5CB  30         mov   r11,*tmp3             ; Push return address to farjump stack
0066 3000 0647  14         dect  tmp3
0067 3002 C5C6  30         mov   tmp2,*tmp3            ; Push source ROM bank to farjump stack
0068 3004 C807  38         mov   tmp3,@tv.fj.stackpnt  ; Set farjump stack pointer
     3006 A228     
0069               
0073               
0074                       ;------------------------------------------------------
0075                       ; Bankswitch to target 8K ROM bank
0076                       ;------------------------------------------------------
0077               rom.farjump.bankswitch.target.rom8k:
0078 3008 04D4  26         clr   *tmp0                 ; Switch to target ROM bank 8K >6000
0079 300A 1004  14         jmp   rom.farjump.bankswitch.tgt.done
0080                       ;------------------------------------------------------
0081                       ; Bankswitch to target 4K ROM / 4K RAM banks (FG99 advanced mode)
0082                       ;------------------------------------------------------
0083               rom.farjump.bankswitch.tgt.advfg99:
0084 300C 04D4  26         clr   *tmp0                 ; Switch to target ROM bank 4K >6000
0085 300E 0224  22         ai    tmp0,>0800
     3010 0800     
0086 3012 04D4  26         clr   *tmp0                 ; Switch to target RAM bank 4K >7000
0087                       ;------------------------------------------------------
0088                       ; Bankswitch to target bank(s) completed
0089                       ;------------------------------------------------------
0090               rom.farjump.bankswitch.tgt.done:
0091                       ;------------------------------------------------------
0092                       ; Deref vector from @trmpvector if >ffff
0093                       ;------------------------------------------------------
0094 3014 0285  22         ci    tmp1,>ffff
     3016 FFFF     
0095 3018 1602  14         jne   !
0096 301A C160  34         mov   @trmpvector,tmp1
     301C A034     
0097                       ;------------------------------------------------------
0098                       ; Deref value in vector
0099                       ;------------------------------------------------------
0100 301E C115  26 !       mov   *tmp1,tmp0            ; Deref value in vector address
0101 3020 1301  14         jeq   rom.farjump.bankswitch.failed1
0102                                                   ; Crash if null-pointer in vector
0103               
0104 3022 1004  14         jmp   rom.farjump.bankswitch.call
0105                                                   ; Call function in target bank
0106                       ;------------------------------------------------------
0107                       ; Assert 1 failed before bank-switch
0108                       ;------------------------------------------------------
0109               rom.farjump.bankswitch.failed1:
0110 3024 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     3026 FFCE     
0111 3028 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     302A 2026     
0112                       ;------------------------------------------------------
0113                       ; Call function in target bank
0114                       ;------------------------------------------------------
0115               rom.farjump.bankswitch.call:
0116 302C 0694  24         bl    *tmp0                 ; Call function
0117                       ;------------------------------------------------------
0118                       ; Bankswitch back to source bank
0119                       ;------------------------------------------------------
0120               rom.farjump.return:
0121 302E C120  34         mov   @tv.fj.stackpnt,tmp0  ; Get farjump stack pointer
     3030 A228     
0122 3032 C154  26         mov   *tmp0,tmp1            ; Get bank write address of caller
0123 3034 1312  14         jeq   rom.farjump.bankswitch.failed2
0124                                                   ; Crash if null-pointer in address
0125               
0126 3036 04F4  30         clr   *tmp0+                ; Remove bank write address from
0127                                                   ; farjump stack
0128               
0129 3038 C2D4  26         mov   *tmp0,r11             ; Get return addr of caller for return
0130               
0131 303A 04F4  30         clr   *tmp0+                ; Remove return address of caller from
0132                                                   ; farjump stack
0133               
0134 303C 028B  22         ci    r11,>6000
     303E 6000     
0135 3040 110C  14         jlt   rom.farjump.bankswitch.failed2
0136 3042 028B  22         ci    r11,>7fff
     3044 7FFF     
0137 3046 1509  14         jgt   rom.farjump.bankswitch.failed2
0138               
0139 3048 C804  38         mov   tmp0,@tv.fj.stackpnt  ; Update farjump return stack pointer
     304A A228     
0140               
0144               
0145                       ;------------------------------------------------------
0146                       ; Bankswitch to source 8K ROM bank
0147                       ;------------------------------------------------------
0148               rom.farjump.bankswitch.src.rom8k:
0149 304C 04D5  26         clr   *tmp1                 ; Switch to source ROM bank 8K >6000
0150 304E 1009  14         jmp   rom.farjump.exit
0151                       ;------------------------------------------------------
0152                       ; Bankswitch to source 4K ROM / 4K RAM banks (FG99 advanced mode)
0153                       ;------------------------------------------------------
0154               rom.farjump.bankswitch.src.advfg99:
0155 3050 04D5  26         clr   *tmp1                 ; Switch to source ROM bank 4K >6000
0156 3052 0225  22         ai    tmp1,>0800
     3054 0800     
0157 3056 04D5  26         clr   *tmp1                 ; Switch to source RAM bank 4K >7000
0158 3058 1004  14         jmp   rom.farjump.exit
0159                       ;------------------------------------------------------
0160                       ; Assert 2 failed after bank-switch
0161                       ;------------------------------------------------------
0162               rom.farjump.bankswitch.failed2:
0163 305A C80B  38         mov   r11,@>ffce            ; \ Save caller address
     305C FFCE     
0164 305E 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     3060 2026     
0165                       ;-------------------------------------------------------
0166                       ; Exit
0167                       ;-------------------------------------------------------
0168               rom.farjump.exit:
0169 3062 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0170 3064 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0171 3066 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0172 3068 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0173                       ;
0174                       ; Attention!
0175                       ; r11 was popped from farjump stack, not from value stack!
0176                       ; See rom.farjump.return
0177                       ;
0178 306A 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0008                       copy  "fb.asm"                 ; Framebuffer
     **** ****     > fb.asm
0001               * FILE......: fb.asm
0002               * Purpose...: Stevie Editor - Framebuffer module
0003               
0004               ***************************************************************
0005               * fb.init
0006               * Initialize framebuffer
0007               ***************************************************************
0008               *  bl   @fb.init
0009               *--------------------------------------------------------------
0010               *  INPUT
0011               *  none
0012               *--------------------------------------------------------------
0013               *  OUTPUT
0014               *  none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               ********|*****|*********************|**************************
0019               fb.init:
0020 306C 0649  14         dect  stack
0021 306E C64B  30         mov   r11,*stack            ; Save return address
0022 3070 0649  14         dect  stack
0023 3072 C644  30         mov   tmp0,*stack           ; Push tmp0
0024 3074 0649  14         dect  stack
0025 3076 C645  30         mov   tmp1,*stack           ; Push tmp1
0026                       ;------------------------------------------------------
0027                       ; Initialize
0028                       ;------------------------------------------------------
0029 3078 0204  20         li    tmp0,fb.top
     307A D000     
0030 307C C804  38         mov   tmp0,@fb.top.ptr      ; Set pointer to framebuffer
     307E A300     
0031 3080 04E0  34         clr   @fb.topline           ; Top line in framebuffer
     3082 A304     
0032 3084 04E0  34         clr   @fb.row               ; Current row=0
     3086 A306     
0033 3088 04E0  34         clr   @fb.column            ; Current column=0
     308A A30C     
0034               
0035 308C 0204  20         li    tmp0,colrow
     308E 0050     
0036 3090 C804  38         mov   tmp0,@fb.colsline     ; Columns per row=80
     3092 A30E     
0037 3094 04E0  34         clr   @fb.vwco              ; Set view window column offset
     3096 A310     
0038                       ;------------------------------------------------------
0039                       ; Determine size of rows on screen
0040                       ;------------------------------------------------------
0041 3098 C160  34         mov   @tv.ruler.visible,tmp1
     309A A210     
0042 309C 1303  14         jeq   !                     ; Skip if ruler is hidden
0043 309E 0204  20         li    tmp0,pane.botrow-2
     30A0 0039     
0044 30A2 1002  14         jmp   fb.init.cont
0045 30A4 0204  20 !       li    tmp0,pane.botrow-1
     30A6 003A     
0046                       ;------------------------------------------------------
0047                       ; Continue initialisation
0048                       ;------------------------------------------------------
0049               fb.init.cont:
0050 30A8 C804  38         mov   tmp0,@fb.scrrows      ; Physical rows on screen for fb
     30AA A31C     
0051 30AC C804  38         mov   tmp0,@fb.scrrows.max  ; Maximum number of physical rows for fb
     30AE A31E     
0052               
0053 30B0 04E0  34         clr   @tv.pane.focus        ; Frame buffer has focus!
     30B2 A224     
0054 30B4 04E0  34         clr   @fb.colorize          ; Don't colorize M1/M2 lines
     30B6 A312     
0055 30B8 0720  34         seto  @fb.dirty             ; Set dirty flag (trigger screen update)
     30BA A318     
0056 30BC 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     30BE A31A     
0057                       ;------------------------------------------------------
0058                       ; Clear frame buffer
0059                       ;------------------------------------------------------
0060 30C0 06A0  32         bl    @film
     30C2 2236     
0061 30C4 D000             data  fb.top,>00,fb.size    ; Clear it all the way
     30C6 0000     
     30C8 0F00     
0062                       ;------------------------------------------------------
0063                       ; Exit
0064                       ;------------------------------------------------------
0065               fb.init.exit:
0066 30CA C179  30         mov   *stack+,tmp1          ; Pop tmp1
0067 30CC C139  30         mov   *stack+,tmp0          ; Pop tmp0
0068 30CE C2F9  30         mov   *stack+,r11           ; Pop r11
0069 30D0 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0009                       copy  "fb.row2line.asm"        ; Calculate line in editor buffer
     **** ****     > fb.row2line.asm
0001               * FILE......: fb.row2line.asm
0002               * Purpose...: Calculate line in editor buffer
0003               
0004               ***************************************************************
0005               * fb.row2line
0006               * Calculate line in editor buffer
0007               ***************************************************************
0008               * bl @fb.row2line
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @fb.topline = Top line in frame buffer
0012               * @parm1      = Row in frame buffer (offset 0..@fb.scrrows)
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * @outparm1 = Matching line in editor buffer
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0
0019               *--------------------------------------------------------------
0020               * Formula
0021               * outparm1 = @fb.topline + @parm1
0022               ********|*****|*********************|**************************
0023               fb.row2line:
0024 30D2 0649  14         dect  stack
0025 30D4 C64B  30         mov   r11,*stack            ; Save return address
0026 30D6 0649  14         dect  stack
0027 30D8 C644  30         mov   tmp0,*stack           ; Push tmp0
0028                       ;------------------------------------------------------
0029                       ; Calculate line in editor buffer
0030                       ;------------------------------------------------------
0031 30DA C120  34         mov   @parm1,tmp0
     30DC A006     
0032 30DE A120  34         a     @fb.topline,tmp0
     30E0 A304     
0033 30E2 C804  38         mov   tmp0,@outparm1
     30E4 A018     
0034                       ;------------------------------------------------------
0035                       ; Exit
0036                       ;------------------------------------------------------
0037               fb.row2line.exit:
0038 30E6 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0039 30E8 C2F9  30         mov   *stack+,r11           ; Pop r11
0040 30EA 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0010                       copy  "fb.calc_pointer.asm"    ; Calculate pointer address frame buffer
     **** ****     > fb.calc_pointer.asm
0001               * FILE......: fb.calc_pointer.asm
0002               * Purpose...: Calculate pointer address in frame buffer
0003               
0004               ***************************************************************
0005               * fb.calc_pointer
0006               * Calculate pointer address in frame buffer
0007               ***************************************************************
0008               * bl @fb.calc_pointer
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @fb.top       = Address of top row in frame buffer
0012               * @fb.topline   = Top line in frame buffer
0013               * @fb.row       = Current row in frame buffer (offset 0..@fb.scrrows)
0014               * @fb.column    = Current column in frame buffer
0015               * @fb.colsline  = Columns per line in frame buffer
0016               *--------------------------------------------------------------
0017               * OUTPUT
0018               * @fb.current   = Updated pointer
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * tmp0,tmp1
0022               *--------------------------------------------------------------
0023               * Formula
0024               * pointer = row * colsline + column + deref(@fb.top.ptr)
0025               ********|*****|*********************|**************************
0026               fb.calc_pointer:
0027 30EC 0649  14         dect  stack
0028 30EE C64B  30         mov   r11,*stack            ; Save return address
0029 30F0 0649  14         dect  stack
0030 30F2 C644  30         mov   tmp0,*stack           ; Push tmp0
0031 30F4 0649  14         dect  stack
0032 30F6 C645  30         mov   tmp1,*stack           ; Push tmp1
0033                       ;------------------------------------------------------
0034                       ; Calculate pointer
0035                       ;------------------------------------------------------
0036 30F8 C120  34         mov   @fb.row,tmp0
     30FA A306     
0037 30FC 3920  74         mpy   @fb.colsline,tmp0     ; tmp1 = row  * colsline
     30FE A30E     
0038 3100 A160  34         a     @fb.column,tmp1       ; tmp1 = tmp1 + column
     3102 A30C     
0039 3104 A160  34         a     @fb.top.ptr,tmp1      ; tmp1 = tmp1 + base
     3106 A300     
0040 3108 C805  38         mov   tmp1,@fb.current
     310A A302     
0041                       ;------------------------------------------------------
0042                       ; Exit
0043                       ;------------------------------------------------------
0044               fb.calc_pointer.exit:
0045 310C C179  30         mov   *stack+,tmp1          ; Pop tmp1
0046 310E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0047 3110 C2F9  30         mov   *stack+,r11           ; Pop r11
0048 3112 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0011                       copy  "idx.asm"                ; Index management
     **** ****     > idx.asm
0001               * FILE......: idx.asm
0002               * Purpose...: Index management
0003               
0004               ***************************************************************
0005               *  Size of index page is 4K and allows indexing of 2048 lines
0006               *  per page.
0007               *
0008               *  Each index slot (word) has the format:
0009               *    +-----+-----+
0010               *    | MSB | LSB |
0011               *    +-----|-----+   LSB = Pointer offset 00-ff.
0012               *
0013               *  MSB = SAMS Page 40-ff
0014               *        Allows addressing of up to 256 4K SAMS pages (1024 KB)
0015               *
0016               *  LSB = Pointer offset in range 00-ff
0017               *
0018               *        To calculate pointer to line in Editor buffer:
0019               *        Pointer address = edb.top + (LSB * 16)
0020               *
0021               *        Note that the editor buffer itself resides in own 4K memory range
0022               *        starting at edb.top
0023               *
0024               *        All support routines must assure that length-prefixed string in
0025               *        Editor buffer always start on a 16 byte boundary for being
0026               *        accessible via index.
0027               *
0028               *
0029               * The index starts at SAMS page >20 and can allocate up to page >3f
0030               * for a total of 32 pages (128 K). With that up to 65536 lines of text
0031               * can be addressed.
0032               ***************************************************************
0033               
0034               
0035               ***************************************************************
0036               * idx.init
0037               * Initialize index
0038               ***************************************************************
0039               * bl @idx.init
0040               *--------------------------------------------------------------
0041               * INPUT
0042               * none
0043               *--------------------------------------------------------------
0044               * OUTPUT
0045               * none
0046               *--------------------------------------------------------------
0047               * Register usage
0048               * tmp0
0049               ********|*****|*********************|**************************
0050               idx.init:
0051 3114 0649  14         dect  stack
0052 3116 C64B  30         mov   r11,*stack            ; Save return address
0053 3118 0649  14         dect  stack
0054 311A C644  30         mov   tmp0,*stack           ; Push tmp0
0055                       ;------------------------------------------------------
0056                       ; Initialize
0057                       ;------------------------------------------------------
0058 311C 0204  20         li    tmp0,idx.top
     311E B000     
0059 3120 C804  38         mov   tmp0,@edb.index.ptr   ; Set pointer to index in editor structure
     3122 A502     
0060               
0061 3124 C120  34         mov   @tv.sams.b000,tmp0
     3126 A206     
0062 3128 C804  38         mov   tmp0,@idx.sams.page   ; Set current SAMS page
     312A A600     
0063 312C C804  38         mov   tmp0,@idx.sams.lopage ; Set 1st SAMS page
     312E A602     
0064                       ;------------------------------------------------------
0065                       ; Clear all index pages
0066                       ;------------------------------------------------------
0067 3130 0224  22         ai    tmp0,4                ; \ Let's clear all index pages
     3132 0004     
0068 3134 C804  38         mov   tmp0,@idx.sams.hipage ; /
     3136 A604     
0069               
0070 3138 06A0  32         bl    @_idx.sams.mapcolumn.on
     313A 3156     
0071                                                   ; Index in continuous memory region
0072               
0073 313C 06A0  32         bl    @film
     313E 2236     
0074 3140 B000                   data idx.top,>00,idx.size * 5
     3142 0000     
     3144 5000     
0075                                                   ; Clear index
0076               
0077 3146 06A0  32         bl    @_idx.sams.mapcolumn.off
     3148 318A     
0078                                                   ; Restore memory window layout
0079               
0080 314A C820  54         mov   @idx.sams.lopage,@idx.sams.hipage
     314C A602     
     314E A604     
0081                                                   ; Reset last SAMS page
0082                       ;------------------------------------------------------
0083                       ; Exit
0084                       ;------------------------------------------------------
0085               idx.init.exit:
0086 3150 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0087 3152 C2F9  30         mov   *stack+,r11           ; Pop r11
0088 3154 045B  20         b     *r11                  ; Return to caller
0089               
0090               
0091               ***************************************************************
0092               * bl @_idx.sams.mapcolumn.on
0093               *--------------------------------------------------------------
0094               * Register usage
0095               * tmp0, tmp1, tmp2
0096               *--------------------------------------------------------------
0097               *  Remarks
0098               *  Private, only to be called from inside idx module
0099               ********|*****|*********************|**************************
0100               _idx.sams.mapcolumn.on:
0101 3156 0649  14         dect  stack
0102 3158 C64B  30         mov   r11,*stack            ; Push return address
0103 315A 0649  14         dect  stack
0104 315C C644  30         mov   tmp0,*stack           ; Push tmp0
0105 315E 0649  14         dect  stack
0106 3160 C645  30         mov   tmp1,*stack           ; Push tmp1
0107 3162 0649  14         dect  stack
0108 3164 C646  30         mov   tmp2,*stack           ; Push tmp2
0109               *--------------------------------------------------------------
0110               * Map index pages into memory window  (b000-ffff)
0111               *--------------------------------------------------------------
0112 3166 C120  34         mov   @idx.sams.lopage,tmp0 ; Get lowest index page
     3168 A602     
0113 316A 0205  20         li    tmp1,idx.top
     316C B000     
0114 316E 0206  20         li    tmp2,5                ; Set loop counter. all pages of index
     3170 0005     
0115                       ;-------------------------------------------------------
0116                       ; Loop over banks
0117                       ;-------------------------------------------------------
0118 3172 06A0  32 !       bl    @xsams.page.set       ; Set SAMS page
     3174 2576     
0119                                                   ; \ i  tmp0  = SAMS page number
0120                                                   ; / i  tmp1  = Memory address
0121               
0122 3176 0584  14         inc   tmp0                  ; Next SAMS index page
0123 3178 0225  22         ai    tmp1,>1000            ; Next memory region
     317A 1000     
0124 317C 0606  14         dec   tmp2                  ; Update loop counter
0125 317E 15F9  14         jgt   -!                    ; Next iteration
0126               *--------------------------------------------------------------
0127               * Exit
0128               *--------------------------------------------------------------
0129               _idx.sams.mapcolumn.on.exit:
0130 3180 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0131 3182 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0132 3184 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0133 3186 C2F9  30         mov   *stack+,r11           ; Pop return address
0134 3188 045B  20         b     *r11                  ; Return to caller
0135               
0136               
0137               ***************************************************************
0138               * _idx.sams.mapcolumn.off
0139               * Restore normal SAMS layout again (single index page)
0140               ***************************************************************
0141               * bl @_idx.sams.mapcolumn.off
0142               *--------------------------------------------------------------
0143               * Register usage
0144               * tmp0, tmp1, tmp2, tmp3
0145               *--------------------------------------------------------------
0146               *  Remarks
0147               *  Private, only to be called from inside idx module
0148               ********|*****|*********************|**************************
0149               _idx.sams.mapcolumn.off:
0150 318A 0649  14         dect  stack
0151 318C C64B  30         mov   r11,*stack            ; Push return address
0152 318E 0649  14         dect  stack
0153 3190 C644  30         mov   tmp0,*stack           ; Push tmp0
0154 3192 0649  14         dect  stack
0155 3194 C645  30         mov   tmp1,*stack           ; Push tmp1
0156 3196 0649  14         dect  stack
0157 3198 C646  30         mov   tmp2,*stack           ; Push tmp2
0158 319A 0649  14         dect  stack
0159 319C C647  30         mov   tmp3,*stack           ; Push tmp3
0160               *--------------------------------------------------------------
0161               * Map index pages into memory window  (b000-????)
0162               *--------------------------------------------------------------
0163 319E 0205  20         li    tmp1,idx.top
     31A0 B000     
0164 31A2 0206  20         li    tmp2,5                ; Always 5 pages
     31A4 0005     
0165 31A6 0207  20         li    tmp3,tv.sams.b000     ; Pointer to fist SAMS page
     31A8 A206     
0166                       ;-------------------------------------------------------
0167                       ; Loop over table in memory (@tv.sams.b000:@tv.sams.f000)
0168                       ;-------------------------------------------------------
0169 31AA C137  30 !       mov   *tmp3+,tmp0           ; Get SAMS page
0170               
0171 31AC 06A0  32         bl    @xsams.page.set       ; Set SAMS page
     31AE 2576     
0172                                                   ; \ i  tmp0  = SAMS page number
0173                                                   ; / i  tmp1  = Memory address
0174               
0175 31B0 0225  22         ai    tmp1,>1000            ; Next memory region
     31B2 1000     
0176 31B4 0606  14         dec   tmp2                  ; Update loop counter
0177 31B6 15F9  14         jgt   -!                    ; Next iteration
0178               *--------------------------------------------------------------
0179               * Exit
0180               *--------------------------------------------------------------
0181               _idx.sams.mapcolumn.off.exit:
0182 31B8 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0183 31BA C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0184 31BC C179  30         mov   *stack+,tmp1          ; Pop tmp1
0185 31BE C139  30         mov   *stack+,tmp0          ; Pop tmp0
0186 31C0 C2F9  30         mov   *stack+,r11           ; Pop return address
0187 31C2 045B  20         b     *r11                  ; Return to caller
0188               
0189               
0190               
0191               ***************************************************************
0192               * _idx.samspage.get
0193               * Get SAMS page for index
0194               ***************************************************************
0195               * bl @_idx.samspage.get
0196               *--------------------------------------------------------------
0197               * INPUT
0198               * tmp0 = Line number
0199               *--------------------------------------------------------------
0200               * OUTPUT
0201               * @outparm1 = Offset for index entry in index SAMS page
0202               *--------------------------------------------------------------
0203               * Register usage
0204               * tmp0, tmp1, tmp2
0205               *--------------------------------------------------------------
0206               *  Remarks
0207               *  Private, only to be called from inside idx module.
0208               *  Activates SAMS page containing required index slot entry.
0209               ********|*****|*********************|**************************
0210               _idx.samspage.get:
0211 31C4 0649  14         dect  stack
0212 31C6 C64B  30         mov   r11,*stack            ; Save return address
0213 31C8 0649  14         dect  stack
0214 31CA C644  30         mov   tmp0,*stack           ; Push tmp0
0215 31CC 0649  14         dect  stack
0216 31CE C645  30         mov   tmp1,*stack           ; Push tmp1
0217 31D0 0649  14         dect  stack
0218 31D2 C646  30         mov   tmp2,*stack           ; Push tmp2
0219                       ;------------------------------------------------------
0220                       ; Determine SAMS index page
0221                       ;------------------------------------------------------
0222 31D4 C184  18         mov   tmp0,tmp2             ; Line number
0223 31D6 04C5  14         clr   tmp1                  ; MSW (tmp1) = 0 / LSW (tmp2) = Line number
0224 31D8 0204  20         li    tmp0,2048             ; Index entries in 4K SAMS page
     31DA 0800     
0225               
0226 31DC 3D44 128         div   tmp0,tmp1             ; \ Divide 32 bit value by 2048
0227                                                   ; | tmp1 = quotient  (SAMS page offset)
0228                                                   ; / tmp2 = remainder
0229               
0230 31DE 0A16  18         sla   tmp2,1                ; line number * 2
0231 31E0 C806  38         mov   tmp2,@outparm1        ; Offset index entry
     31E2 A018     
0232               
0233 31E4 A160  34         a     @idx.sams.lopage,tmp1 ; Add SAMS page base
     31E6 A602     
0234 31E8 8805  34         c     tmp1,@idx.sams.page   ; Page already active?
     31EA A600     
0235               
0236 31EC 130E  14         jeq   _idx.samspage.get.exit
0237                                                   ; Yes, so exit
0238                       ;------------------------------------------------------
0239                       ; Activate SAMS index page
0240                       ;------------------------------------------------------
0241 31EE C805  38         mov   tmp1,@idx.sams.page   ; Set current SAMS page
     31F0 A600     
0242 31F2 C805  38         mov   tmp1,@tv.sams.b000    ; Also keep SAMS window synced in Stevie
     31F4 A206     
0243 31F6 C105  18         mov   tmp1,tmp0             ; Destination SAMS page
0244               
0245 31F8 0205  20         li    tmp1,>b000            ; Memory window for index page
     31FA B000     
0246               
0247 31FC 06A0  32         bl    @xsams.page.set       ; Switch to SAMS page
     31FE 2576     
0248                                                   ; \ i  tmp0 = SAMS page
0249                                                   ; / i  tmp1 = Memory address
0250                       ;------------------------------------------------------
0251                       ; Check if new highest SAMS index page
0252                       ;------------------------------------------------------
0253 3200 8804  34         c     tmp0,@idx.sams.hipage ; New highest page?
     3202 A604     
0254 3204 1202  14         jle   _idx.samspage.get.exit
0255                                                   ; No, exit
0256 3206 C804  38         mov   tmp0,@idx.sams.hipage ; Yes, set highest SAMS index page
     3208 A604     
0257                       ;------------------------------------------------------
0258                       ; Exit
0259                       ;------------------------------------------------------
0260               _idx.samspage.get.exit:
0261 320A C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0262 320C C179  30         mov   *stack+,tmp1          ; Pop tmp1
0263 320E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0264 3210 C2F9  30         mov   *stack+,r11           ; Pop r11
0265 3212 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0012                       copy  "edb.asm"                ; Editor Buffer
     **** ****     > edb.asm
0001               * FILE......: edb.asm
0002               * Purpose...: Stevie Editor - Editor Buffer module
0003               
0004               ***************************************************************
0005               * edb.init
0006               * Initialize Editor buffer
0007               ***************************************************************
0008               * bl @edb.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ***************************************************************
0021               edb.init:
0022 3214 0649  14         dect  stack
0023 3216 C64B  30         mov   r11,*stack            ; Save return address
0024 3218 0649  14         dect  stack
0025 321A C644  30         mov   tmp0,*stack           ; Push tmp0
0026                       ;------------------------------------------------------
0027                       ; Initialize
0028                       ;------------------------------------------------------
0029 321C 0204  20         li    tmp0,edb.top          ; \
     321E C000     
0030 3220 C804  38         mov   tmp0,@edb.top.ptr     ; / Set pointer to top of editor buffer
     3222 A500     
0031 3224 C804  38         mov   tmp0,@edb.next_free.ptr
     3226 A508     
0032                                                   ; Set pointer to next free line
0033               
0034 3228 0720  34         seto  @edb.insmode          ; Turn on insert mode for this editor buffer
     322A A50A     
0035               
0036 322C 0204  20         li    tmp0,1
     322E 0001     
0037 3230 C804  38         mov   tmp0,@edb.lines       ; Lines=1
     3232 A504     
0038               
0039 3234 0720  34         seto  @edb.block.m1         ; Reset block start line
     3236 A50E     
0040 3238 0720  34         seto  @edb.block.m2         ; Reset block end line
     323A A510     
0041               
0042 323C 0204  20         li    tmp0,txt.newfile      ; "New file"
     323E 3A68     
0043 3240 C804  38         mov   tmp0,@edb.filename.ptr
     3242 A514     
0044               
0045 3244 04E0  34         clr   @fh.kilobytes         ; \ Clear kilobytes processed
     3246 A440     
0046 3248 04E0  34         clr   @fh.kilobytes.prev    ; /
     324A A45C     
0047               
0048 324C 0204  20         li    tmp0,txt.filetype.none
     324E 3BD8     
0049 3250 C804  38         mov   tmp0,@edb.filetype.ptr
     3252 A516     
0050               
0051               
0052               edb.init.exit:
0053                       ;------------------------------------------------------
0054                       ; Exit
0055                       ;------------------------------------------------------
0056 3254 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0057 3256 C2F9  30         mov   *stack+,r11           ; Pop r11
0058 3258 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0013                       copy  "cmdb.asm"               ; Command buffer
     **** ****     > cmdb.asm
0001               * FILE......: cmdb.asm
0002               * Purpose...: Stevie Editor - Command Buffer module
0003               
0004               ***************************************************************
0005               * cmdb.init
0006               * Initialize Command Buffer
0007               ***************************************************************
0008               * bl @cmdb.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               cmdb.init:
0022 325A 0649  14         dect  stack
0023 325C C64B  30         mov   r11,*stack            ; Save return address
0024 325E 0649  14         dect  stack
0025 3260 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 3262 0649  14         dect  stack
0027 3264 C645  30         mov   tmp1,*stack           ; Push tmp1
0028                       ;------------------------------------------------------
0029                       ; Initialize
0030                       ;------------------------------------------------------
0031 3266 0204  20         li    tmp0,cmdb.top         ; \ Set pointer to command buffer
     3268 E000     
0032 326A C804  38         mov   tmp0,@cmdb.top.ptr    ; /
     326C A700     
0033               
0034 326E 04E0  34         clr   @cmdb.visible         ; Hide command buffer
     3270 A702     
0035 3272 0204  20         li    tmp0,6
     3274 0006     
0036 3276 C804  38         mov   tmp0,@cmdb.scrrows    ; Set current command buffer size
     3278 A706     
0037 327A C804  38         mov   tmp0,@cmdb.default    ; Set default command buffer size
     327C A708     
0038               
0039 327E 04E0  34         clr   @cmdb.lines           ; Number of lines in cmdb buffer
     3280 A718     
0040 3282 04E0  34         clr   @cmdb.dirty           ; Command buffer is clean
     3284 A71A     
0041 3286 04E0  34         clr   @cmdb.action.ptr      ; Reset action to execute pointer
     3288 A72C     
0042 328A 0720  34         seto  @cmdb.fb.yxsave       ; Reset (removes "write protection")
     328C A704     
0043                       ;------------------------------------------------------
0044                       ; Calculate VDP address of CMDB top row (TAT!)
0045                       ;------------------------------------------------------
0046 328E 0204  20         li    tmp0,pane.botrow      ; \
     3290 003B     
0047 3292 6120  34         s     @cmdb.scrrows,tmp0    ; | pos = Y * (columns per row)
     3294 A706     
0048 3296 3920  70         mpy   @wcolmn,tmp0          ; | result is in tmp1
     3298 833A     
0049 329A C105  18         mov   tmp1,tmp0             ; | Get result
0050 329C 0224  22         ai    tmp0,vdp.tat.base     ; | Add VDP TAT base address
     329E 1800     
0051 32A0 C804  38         mov   tmp0,@cmdb.vdptop     ; /
     32A2 A70E     
0052                       ;------------------------------------------------------
0053                       ; Clear command buffer
0054                       ;------------------------------------------------------
0055 32A4 06A0  32         bl    @film
     32A6 2236     
0056 32A8 E000                   data  cmdb.top,>00,cmdb.size
     32AA 0000     
     32AC 1000     
0057                                                   ; Clear it all the way
0058                       ;------------------------------------------------------
0059                       ; Exit
0060                       ;------------------------------------------------------
0061               cmdb.init.exit:
0062 32AE C179  30         mov   *stack+,tmp1          ; Pop tmp1
0063 32B0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0064 32B2 C2F9  30         mov   *stack+,r11           ; Pop r11
0065 32B4 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0014                       copy  "errpane.asm"            ; Error pane
     **** ****     > errpane.asm
0001               * FILE......: errpane.asm
0002               * Purpose...: Error pane utilities
0003               
0004               ***************************************************************
0005               * errpane.init
0006               * Initialize error pane
0007               ***************************************************************
0008               * bl @errpane.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0,tmp1,tmp2
0018               *--------------------------------------------------------------
0019               * Notes
0020               ***************************************************************
0021               errpane.init:
0022 32B6 0649  14         dect  stack
0023 32B8 C64B  30         mov   r11,*stack            ; Save return address
0024 32BA 0649  14         dect  stack
0025 32BC C644  30         mov   tmp0,*stack           ; Push tmp0
0026 32BE 0649  14         dect  stack
0027 32C0 C645  30         mov   tmp1,*stack           ; Push tmp1
0028 32C2 0649  14         dect  stack
0029 32C4 C646  30         mov   tmp2,*stack           ; Push tmp2
0030                       ;------------------------------------------------------
0031                       ; Initialize
0032                       ;------------------------------------------------------
0033 32C6 04E0  34         clr   @tv.error.visible     ; Set to hidden
     32C8 A22A     
0034 32CA 0204  20         li    tmp0,3
     32CC 0003     
0035 32CE C804  38         mov   tmp0,@tv.error.rows   ; Number of rows in error pane
     32D0 A22C     
0036               
0037 32D2 06A0  32         bl    @film
     32D4 2236     
0038 32D6 A234                   data tv.error.msg,0,160
     32D8 0000     
     32DA 00A0     
0039                       ;-------------------------------------------------------
0040                       ; Exit
0041                       ;-------------------------------------------------------
0042               errpane.exit:
0043 32DC C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0044 32DE C179  30         mov   *stack+,tmp1          ; Pop tmp1
0045 32E0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0046 32E2 C2F9  30         mov   *stack+,r11           ; Pop R11
0047 32E4 045B  20         b     *r11                  ; Return to caller
0048               
                   < ram.resident.asm
0015                       copy  "tv.asm"                 ; Main editor configuration
     **** ****     > tv.asm
0001               * FILE......: tv.asm
0002               * Purpose...: Initialize editor
0003               
0004               ***************************************************************
0005               * tv.init
0006               * Initialize editor settings
0007               ***************************************************************
0008               * bl @tv.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ***************************************************************
0021               tv.init:
0022 32E6 0649  14         dect  stack
0023 32E8 C64B  30         mov   r11,*stack            ; Save return address
0024 32EA 0649  14         dect  stack
0025 32EC C644  30         mov   tmp0,*stack           ; Push tmp0
0026 32EE 0649  14         dect  stack
0027 32F0 C645  30         mov   tmp1,*stack           ; Push tmp1
0028 32F2 0649  14         dect  stack
0029 32F4 C646  30         mov   tmp2,*stack           ; Push tmp2
0030                       ;------------------------------------------------------
0031                       ; Initialize
0032                       ;------------------------------------------------------
0033 32F6 0204  20         li    tmp0,1                ; \ Set default color scheme
     32F8 0001     
0034 32FA C804  38         mov   tmp0,@tv.colorscheme  ; /
     32FC A212     
0035               
0036 32FE 04E0  34         clr   @tv.task.oneshot      ; Reset pointer to oneshot task
     3300 A226     
0037 3302 E0A0  34         soc   @wbit10,config        ; Assume ALPHA LOCK is down
     3304 200C     
0038               
0039 3306 0204  20         li    tmp0,fj.bottom
     3308 B000     
0040 330A C804  38         mov   tmp0,@tv.fj.stackpnt  ; Set pointer to farjump return stack
     330C A228     
0041                       ;------------------------------------------------------
0042                       ; Set defaults
0043                       ;------------------------------------------------------
0044 330E 06A0  32         bl    @cpym2m
     3310 24DA     
0045 3312 3CB0                   data def.printer.fname,tv.printer.fname,7
     3314 DE00     
     3316 0007     
0046               
0047 3318 06A0  32         bl    @cpym2m
     331A 24DA     
0048 331C 3CB7                   data def.clip.fname,tv.clip.fname,10
     331E DE50     
     3320 000A     
0049               
0050 3322 04E0  34         clr   @edb.autoinsert       ; Set AutoInsert off by default
     3324 A50C     
0051                       ;-------------------------------------------------------
0052                       ; Exit
0053                       ;-------------------------------------------------------
0054               tv.init.exit:
0055 3326 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0056 3328 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0057 332A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0058 332C C2F9  30         mov   *stack+,r11           ; Pop R11
0059 332E 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0016                       copy  "tv.quit.asm"            ; Exit Stevie and return to monitor
     **** ****     > tv.quit.asm
0001               * FILE......: tv.quit.asm
0002               * Purpose...: Quit Stevie and return to monitor
0003               
0004               ***************************************************************
0005               * tv.quit
0006               * Quit stevie and return to monitor
0007               ***************************************************************
0008               * b    @tv.quit
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               ***************************************************************
0019               tv.quit:
0020                       ;-------------------------------------------------------
0021                       ; Reset/lock F18a
0022                       ;-------------------------------------------------------
0023 3330 06A0  32         bl    @f18rst               ; Reset and lock the F18A
     3332 27A6     
0024                       ;-------------------------------------------------------
0025                       ; Load legacy SAMS page layout and exit to monitor
0026                       ;-------------------------------------------------------
0027 3334 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     3336 2FCA     
0028 3338 600E                   data bank7.rom        ; | i  p0 = bank address
0029 333A 7FC0                   data bankx.vectab     ; | i  p1 = Vector with target address
0030 333C 6004                   data bankid           ; / i  p2 = Source ROM bank for return
0031               
0032                       ; We never return here. We call @mem.sams.set.legacy (vector1) and
0033                       ; in there activate bank 0 in cartridge space and return to monitor.
0034                       ;
0035                       ; Reason for doing so is that @tv.quit is located in
0036                       ; low memory expansion. So switching SAMS banks or turning off the SAMS
0037                       ; mapper results in invalid OPCODE's because the program just isn't
0038                       ; there in low memory expansion anymore.
                   < ram.resident.asm
0017                       copy  "tv.reset.asm"           ; Reset editor (clear buffers)
     **** ****     > tv.reset.asm
0001               * FILE......: tv.reset.asm
0002               * Purpose...: Reset editor (clear buffers)
0003               
0004               
0005               ***************************************************************
0006               * tv.reset
0007               * Reset editor (clear buffers)
0008               ***************************************************************
0009               * bl @tv.reset
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * none
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * r11
0019               *--------------------------------------------------------------
0020               * Notes
0021               ********|*****|*********************|**************************
0022               tv.reset:
0023 333E 0649  14         dect  stack
0024 3340 C64B  30         mov   r11,*stack            ; Save return address
0025                       ;------------------------------------------------------
0026                       ; Reset editor
0027                       ;------------------------------------------------------
0028 3342 06A0  32         bl    @cmdb.init            ; Initialize command buffer
     3344 325A     
0029 3346 06A0  32         bl    @edb.init             ; Initialize editor buffer
     3348 3214     
0030 334A 06A0  32         bl    @idx.init             ; Initialize index
     334C 3114     
0031 334E 06A0  32         bl    @fb.init              ; Initialize framebuffer
     3350 306C     
0032 3352 06A0  32         bl    @errpane.init         ; Initialize error pane
     3354 32B6     
0033                       ;------------------------------------------------------
0034                       ; Remove markers and shortcuts
0035                       ;------------------------------------------------------
0036 3356 06A0  32         bl    @hchar
     3358 27D2     
0037 335A 0034                   byte 0,52,32,18       ; Remove markers
     335C 2012     
0038 335E 3B00                   byte pane.botrow,0,32,51
     3360 2033     
0039 3362 FFFF                   data eol              ; Remove block shortcuts
0040                       ;-------------------------------------------------------
0041                       ; Exit
0042                       ;-------------------------------------------------------
0043               tv.reset.exit:
0044 3364 C2F9  30         mov   *stack+,r11           ; Pop R11
0045 3366 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0018                       copy  "tv.uint16.pack.asm"     ; Pack string to 16bit unsigned integer
     **** ****     > tv.uint16.pack.asm
0001               * FILE......: tv.uint16.pack.asm
0002               * Purpose...: Pack string to 16bit unsigned integer
0003               
0004               ***************************************************************
0005               * tv.uint16.pack
0006               * Pack (number) string to 16bit unsigned integer
0007               ***************************************************************
0008               * bl @tv.uint16.pack
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Pointer to input string (no length-byte prefix!)
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @outparm1 = 16bit unsigned integer
0015               * @outparm2 = 0 conversion ok, >FFFF invalid input
0016               *--------------------------------------------------------------
0017               * REMARK
0018               * None
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * tmp0, tmp1, tmp2, tmp3, r0, r1
0022               ***************************************************************
0023               tv.uint16.pack:
0024 3368 0649  14         dect  stack
0025 336A C64B  30         mov   r11,*stack            ; Push return address
0026 336C 0649  14         dect  stack
0027 336E C644  30         mov   tmp0,*stack           ; Push tmp0
0028 3370 0649  14         dect  stack
0029 3372 C645  30         mov   tmp1,*stack           ; Push tmp1
0030 3374 0649  14         dect  stack
0031 3376 C646  30         mov   tmp2,*stack           ; Push tmp2
0032 3378 0649  14         dect  stack
0033 337A C647  30         mov   tmp3,*stack           ; Push tmp3
0034 337C 0649  14         dect  stack
0035 337E C640  30         mov   r0,*stack             ; Push r0
0036 3380 0649  14         dect  stack
0037 3382 C641  30         mov   r1,*stack             ; Push r1
0038                       ;------------------------------------------------------
0039                       ; Initialisation
0040                       ;------------------------------------------------------
0041 3384 C120  34         mov   @parm1,tmp0           ; Pointer to input string
     3386 A006     
0042 3388 04C5  14         clr   tmp1                  ; Termination character >00
0043 338A 04E0  34         clr   @outparm1             ; Reset output parameters
     338C A018     
0044 338E 04E0  34         clr   @outparm2             ; Reset output parameters
     3390 A01A     
0045                       ;------------------------------------------------------
0046                       ; Get string length
0047                       ;------------------------------------------------------
0048 3392 06A0  32         bl    @xstring.getlenc      ; Get length of C-style string
     3394 2AB4     
0049                                                   ; \ i  tmp0   = Pointer to C-style string
0050                                                   ; | i  tmp1   = Termination character
0051                                                   ; / o  @waux1 = Length of string
0052                       ;------------------------------------------------------
0053                       ; Assert
0054                       ;------------------------------------------------------
0055 3396 C1A0  30         mov   @waux1,tmp2           ; Get string length
     3398 833C     
0056 339A 131F  14         jeq   tv.uint16.pack.error  ; No input string given
0057 339C 0286  22         ci    tmp2,5                ; Maximum 5 digits ?
     339E 0005     
0058 33A0 151C  14         jgt   tv.uint16.pack.error  ; Input string too long
0059                       ;------------------------------------------------------
0060                       ; Prepare register values
0061                       ;------------------------------------------------------
0062 33A2 C120  34         mov   @parm1,tmp0           ; Pointer to input string
     33A4 A006     
0063               
0064 33A6 A186  18         a     tmp2,tmp2             ; \ Starting offset in tv.uint16.mpy
0065 33A8 0226  22         ai    tmp2,-10              ; |    10 - (tmp2 * 2)
     33AA FFF6     
0066 33AC 0746  18         abs   tmp2                  ; /
0067               
0068 33AE 04C7  14         clr   tmp3                  ; Clear final uint16
0069                       ;------------------------------------------------------
0070                       ; Get character
0071                       ;------------------------------------------------------
0072               tv.uint16.pack.loop:
0073 33B0 D174  28         movb  *tmp0+,tmp1           ; Get character
0074 33B2 0985  32         srl   tmp1,8                ; MSB to LSB
0075                       ;------------------------------------------------------
0076                       ; Character is ASCII 0 or blank (ASCII 32) ?
0077                       ;------------------------------------------------------
0078 33B4 1318  14         jeq   tv.uint16.pack.exit   ; End of string reached
0079 33B6 0285  22         ci    tmp1,32               ; Blank ?
     33B8 0020     
0080 33BA 1315  14         jeq   tv.uint16.pack.exit   ; End of string reached
0081                       ;------------------------------------------------------
0082                       ; Character in range 0..9 ?
0083                       ;------------------------------------------------------
0084 33BC 0225  22         ai    tmp1,-48              ; Remove ASCII offset
     33BE FFD0     
0085 33C0 110C  14         jlt   tv.uint16.pack.error  ; Invalid character, exit
0086 33C2 0285  22         ci    tmp1,9
     33C4 0009     
0087 33C6 1509  14         jgt   tv.uint16.pack.error  ; Invalid character, exit
0088                       ;------------------------------------------------------
0089                       ; Get base 10 multiplier for digit
0090                       ;------------------------------------------------------
0091 33C8 C026  34         mov   @tv.uint16.mpy(tmp2),r0
     33CA 33F6     
0092                       ;------------------------------------------------------
0093                       ; Convert number to decimal 10 (final result in tmp3)
0094                       ;------------------------------------------------------
0095 33CC 3805  58         mpy   tmp1,r0               ; Multiply digit with r0, 32bit result is
0096                                                   ; in r0 and r1. We need r1 (LSW)
0097 33CE A1C1  18         a     r1,tmp3               ; Add base10 value to final uint16
0098                       ;------------------------------------------------------
0099                       ; Prepare for next digit
0100                       ;------------------------------------------------------
0101 33D0 05C6  14         inct  tmp2                  ; Update loop counter
0102 33D2 0286  22         ci    tmp2,8                ; Last digit done?
     33D4 0008     
0103 33D6 12EC  14         jle   tv.uint16.pack.loop   ; Next iteration
0104 33D8 1004  14         jmp   tv.uint16.pack.done   ; Done packing uint16, exit
0105                       ;------------------------------------------------------
0106                       ; Invalid character, stop packing and exit
0107                       ;------------------------------------------------------
0108               tv.uint16.pack.error:
0109 33DA 04E0  34         clr   @outparm1             ; Empty uint16
     33DC A018     
0110 33DE 0720  34         seto  @outparm2             ; Invalid input string
     33E0 A01A     
0111                       ;-------------------------------------------------------
0112                       ; Save final uint16
0113                       ;-------------------------------------------------------
0114               tv.uint16.pack.done:
0115 33E2 C807  38         mov   tmp3,@outparm1
     33E4 A018     
0116                       ;-------------------------------------------------------
0117                       ; Exit
0118                       ;-------------------------------------------------------
0119               tv.uint16.pack.exit:
0120 33E6 C079  30         mov   *stack+,r1            ; Pop r1
0121 33E8 C039  30         mov   *stack+,r0            ; Pop r0
0122 33EA C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0123 33EC C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0124 33EE C179  30         mov   *stack+,tmp1          ; Pop tmp1
0125 33F0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0126 33F2 C2F9  30         mov   *stack+,r11           ; Pop r11
0127 33F4 045B  20         b     *r11                  ; Return to caller
0128                       ;-------------------------------------------------------
0129                       ; Constants for base 10 mmultipliers
0130                       ;-------------------------------------------------------
0131               tv.uint16.mpy:
0132 33F6 2710             data  10000,1000,100,10,1
     33F8 03E8     
     33FA 0064     
     33FC 000A     
     33FE 0001     
0133               
                   < ram.resident.asm
0019                       copy  "tv.uint16.unpack.asm"   ; Unpack 16bit unsigned integer to string
     **** ****     > tv.uint16.unpack.asm
0001               * FILE......: tv.uint16.unpack.asm
0002               * Purpose...: Unpack 16bit unsigned integer to string
0003               
0004               ***************************************************************
0005               * tv.uint16.unpack
0006               * Unpack 16bit unsigned integer to string
0007               ***************************************************************
0008               * bl @tv.uint16.unpack
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = 16bit unsigned integer
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @uint16.unpacked = Length-prefixed string with unpacked uint16
0015               *                    (6 bytes max)
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0
0019               ***************************************************************
0020               tv.uint16.unpack:
0021 3400 0649  14         dect  stack
0022 3402 C64B  30         mov   r11,*stack            ; Save return address
0023 3404 0649  14         dect  stack
0024 3406 C644  30         mov   tmp0,*stack           ; Push tmp0
0025                       ;------------------------------------------------------
0026                       ; Initialize
0027                       ;------------------------------------------------------
0028 3408 06A0  32         bl    @mknum                ; Convert unsigned number to string
     340A 29A6     
0029 340C A006                   data parm1            ; \ i p0  = Pointer to 16bit unsigned number
0030 340E A100                   data rambuf           ; | i p1  = Pointer to 5 byte string buffer
0031 3410 30                     byte 48               ; | i p2H = Offset for ASCII digit 0
0032 3411   20                   byte 32               ; / i p2L = Char for replacing leading 0's
0033               
0034 3412 0204  20         li    tmp0,uint16.unpacked
     3414 A02C     
0035 3416 04F4  30         clr   *tmp0+                ; Clear string 01
0036 3418 04F4  30         clr   *tmp0+                ; Clear string 23
0037 341A 04F4  30         clr   *tmp0+                ; Clear string 34
0038               
0039 341C 06A0  32         bl    @trimnum              ; Trim unsigned number string
     341E 29FE     
0040 3420 A100                   data rambuf           ; \ i p0  = Pointer to 5 byte string buffer
0041 3422 A02C                   data uint16.unpacked  ; | i p1  = Pointer to output buffer
0042 3424 0020                   data 32               ; / i p2  = Padding char to match against
0043                       ;-------------------------------------------------------
0044                       ; Exit
0045                       ;-------------------------------------------------------
0046               tv.uint16.unpack.exit:
0047 3426 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0048 3428 C2F9  30         mov   *stack+,r11           ; Pop r11
0049 342A 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0020                       copy  "tv.pad.string.asm"      ; Pad string to specified length
     **** ****     > tv.pad.string.asm
0001               * FILE......: tv.pad.string.asm
0002               * Purpose...: pad string to specified length
0003               
0004               
0005               ***************************************************************
0006               * tv.pad.string
0007               * pad string to specified length
0008               ***************************************************************
0009               * bl @tv.pad.string
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @parm1 = Pointer to length-prefixed string
0013               * @parm2 = Requested length
0014               * @parm3 = Fill character
0015               * @parm4 = Pointer to string buffer
0016               *--------------------------------------------------------------
0017               * OUTPUT
0018               * @outparm1 = Pointer to padded string
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * none
0022               ***************************************************************
0023               tv.pad.string:
0024 342C 0649  14         dect  stack
0025 342E C64B  30         mov   r11,*stack            ; Push return address
0026 3430 0649  14         dect  stack
0027 3432 C644  30         mov   tmp0,*stack           ; Push tmp0
0028 3434 0649  14         dect  stack
0029 3436 C645  30         mov   tmp1,*stack           ; Push tmp1
0030 3438 0649  14         dect  stack
0031 343A C646  30         mov   tmp2,*stack           ; Push tmp2
0032 343C 0649  14         dect  stack
0033 343E C647  30         mov   tmp3,*stack           ; Push tmp3
0034                       ;------------------------------------------------------
0035                       ; Asserts
0036                       ;------------------------------------------------------
0037 3440 C120  34         mov   @parm1,tmp0           ; \ Get string prefix (length-byte)
     3442 A006     
0038 3444 D194  26         movb  *tmp0,tmp2            ; /
0039 3446 0986  32         srl   tmp2,8                ; Right align
0040 3448 C1C6  18         mov   tmp2,tmp3             ; Make copy of length-byte for later use
0041               
0042 344A 8806  34         c     tmp2,@parm2           ; String length > requested length?
     344C A008     
0043 344E 1520  14         jgt   tv.pad.string.panic   ; Yes, crash
0044                       ;------------------------------------------------------
0045                       ; Copy string to buffer
0046                       ;------------------------------------------------------
0047 3450 C120  34         mov   @parm1,tmp0           ; Get source address
     3452 A006     
0048 3454 C160  34         mov   @parm4,tmp1           ; Get destination address
     3456 A00C     
0049 3458 0586  14         inc   tmp2                  ; Also include length-byte in copy
0050               
0051 345A 0649  14         dect  stack
0052 345C C647  30         mov   tmp3,*stack           ; Push tmp3 (get overwritten by xpym2m)
0053               
0054 345E 06A0  32         bl    @xpym2m               ; Copy length-prefix string to buffer
     3460 24E0     
0055                                                   ; \ i  tmp0 = Source CPU memory address
0056                                                   ; | i  tmp1 = Target CPU memory address
0057                                                   ; / i  tmp2 = Number of bytes to copy
0058               
0059 3462 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0060                       ;------------------------------------------------------
0061                       ; Set length of new string
0062                       ;------------------------------------------------------
0063 3464 C120  34         mov   @parm2,tmp0           ; Get requested length
     3466 A008     
0064 3468 0A84  32         sla   tmp0,8                ; Left align
0065 346A C160  34         mov   @parm4,tmp1           ; Get pointer to buffer
     346C A00C     
0066 346E D544  30         movb  tmp0,*tmp1            ; Set new length of string
0067 3470 A147  18         a     tmp3,tmp1             ; \ Skip to end of string
0068 3472 0585  14         inc   tmp1                  ; /
0069                       ;------------------------------------------------------
0070                       ; Prepare for padding string
0071                       ;------------------------------------------------------
0072 3474 C1A0  34         mov   @parm2,tmp2           ; \ Get number of bytes to fill
     3476 A008     
0073 3478 6187  18         s     tmp3,tmp2             ; |
0074 347A 0586  14         inc   tmp2                  ; /
0075               
0076 347C C120  34         mov   @parm3,tmp0           ; Get byte to padd
     347E A00A     
0077 3480 0A84  32         sla   tmp0,8                ; Left align
0078                       ;------------------------------------------------------
0079                       ; Right-pad string to destination length
0080                       ;------------------------------------------------------
0081               tv.pad.string.loop:
0082 3482 DD44  32         movb  tmp0,*tmp1+           ; Pad character
0083 3484 0606  14         dec   tmp2                  ; Update loop counter
0084 3486 15FD  14         jgt   tv.pad.string.loop    ; Next character
0085               
0086 3488 C820  54         mov   @parm4,@outparm1      ; Set pointer to padded string
     348A A00C     
     348C A018     
0087 348E 1004  14         jmp   tv.pad.string.exit    ; Exit
0088                       ;-----------------------------------------------------------------------
0089                       ; CPU crash
0090                       ;-----------------------------------------------------------------------
0091               tv.pad.string.panic:
0092 3490 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     3492 FFCE     
0093 3494 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     3496 2026     
0094                       ;------------------------------------------------------
0095                       ; Exit
0096                       ;------------------------------------------------------
0097               tv.pad.string.exit:
0098 3498 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0099 349A C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0100 349C C179  30         mov   *stack+,tmp1          ; Pop tmp1
0101 349E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0102 34A0 C2F9  30         mov   *stack+,r11           ; Pop r11
0103 34A2 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0021                       ;-----------------------------------------------------------------------
0022                       ; Logic for Index management
0023                       ;-----------------------------------------------------------------------
0024                       copy  "idx.update.asm"         ; Index management - Update entry
     **** ****     > idx.update.asm
0001               * FILE......: idx.update.asm
0002               * Purpose...: Update index entry
0003               
0004               ***************************************************************
0005               * idx.entry.update
0006               * Update index entry - Each entry corresponds to a line
0007               ***************************************************************
0008               * bl @idx.entry.update
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1    = Line number in editor buffer
0012               * @parm2    = Pointer to line in editor buffer
0013               * @parm3    = SAMS page
0014               *--------------------------------------------------------------
0015               * OUTPUT
0016               * @outparm1 = Pointer to updated index entry
0017               *--------------------------------------------------------------
0018               * Register usage
0019               * tmp0,tmp1,tmp2
0020               ********|*****|*********************|**************************
0021               idx.entry.update:
0022 34A4 0649  14         dect  stack
0023 34A6 C64B  30         mov   r11,*stack            ; Save return address
0024 34A8 0649  14         dect  stack
0025 34AA C644  30         mov   tmp0,*stack           ; Push tmp0
0026 34AC 0649  14         dect  stack
0027 34AE C645  30         mov   tmp1,*stack           ; Push tmp1
0028                       ;------------------------------------------------------
0029                       ; Get parameters
0030                       ;------------------------------------------------------
0031 34B0 C120  34         mov   @parm1,tmp0           ; Get line number
     34B2 A006     
0032 34B4 C160  34         mov   @parm2,tmp1           ; Get pointer
     34B6 A008     
0033 34B8 1312  14         jeq   idx.entry.update.clear
0034                                                   ; Special handling for "null"-pointer
0035                       ;------------------------------------------------------
0036                       ; Calculate LSB value index slot (pointer offset)
0037                       ;------------------------------------------------------
0038 34BA 0245  22         andi  tmp1,>0fff            ; Remove high-nibble from pointer
     34BC 0FFF     
0039 34BE 0945  24         srl   tmp1,4                ; Get offset (divide by 16)
0040                       ;------------------------------------------------------
0041                       ; Calculate MSB value index slot (SAMS page editor buffer)
0042                       ;------------------------------------------------------
0043 34C0 06E0  34         swpb  @parm3
     34C2 A00A     
0044 34C4 D160  34         movb  @parm3,tmp1           ; Put SAMS page in MSB
     34C6 A00A     
0045 34C8 06E0  34         swpb  @parm3                ; \ Restore original order again,
     34CA A00A     
0046                                                   ; / important for messing up caller parm3!
0047                       ;------------------------------------------------------
0048                       ; Update index slot
0049                       ;------------------------------------------------------
0050               idx.entry.update.save:
0051 34CC 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     34CE 31C4     
0052                                                   ; \ i  tmp0     = Line number
0053                                                   ; / o  outparm1 = Slot offset in SAMS page
0054               
0055 34D0 C120  34         mov   @outparm1,tmp0        ; \ Update index slot
     34D2 A018     
0056 34D4 C905  38         mov   tmp1,@idx.top(tmp0)   ; /
     34D6 B000     
0057 34D8 C804  38         mov   tmp0,@outparm1        ; Pointer to updated index entry
     34DA A018     
0058 34DC 1008  14         jmp   idx.entry.update.exit
0059                       ;------------------------------------------------------
0060                       ; Special handling for "null"-pointer
0061                       ;------------------------------------------------------
0062               idx.entry.update.clear:
0063 34DE 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     34E0 31C4     
0064                                                   ; \ i  tmp0     = Line number
0065                                                   ; / o  outparm1 = Slot offset in SAMS page
0066               
0067 34E2 C120  34         mov   @outparm1,tmp0        ; \ Clear index slot
     34E4 A018     
0068 34E6 04E4  34         clr   @idx.top(tmp0)        ; /
     34E8 B000     
0069 34EA C804  38         mov   tmp0,@outparm1        ; Pointer to updated index entry
     34EC A018     
0070                       ;------------------------------------------------------
0071                       ; Exit
0072                       ;------------------------------------------------------
0073               idx.entry.update.exit:
0074 34EE C179  30         mov   *stack+,tmp1          ; Pop tmp1
0075 34F0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0076 34F2 C2F9  30         mov   *stack+,r11           ; Pop r11
0077 34F4 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0025                       copy  "idx.pointer.asm"        ; Index management - Get pointer to line
     **** ****     > idx.pointer.asm
0001               * FILE......: idx.pointer.asm
0002               * Purpose...: Get pointer to line in editor buffer
0003               
0004               ***************************************************************
0005               * idx.pointer.get
0006               * Get pointer to editor buffer line content
0007               ***************************************************************
0008               * bl @idx.pointer.get
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Line number in editor buffer
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @outparm1 = Pointer to editor buffer line content
0015               * @outparm2 = SAMS page
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0,tmp1,tmp2
0019               ********|*****|*********************|**************************
0020               idx.pointer.get:
0021 34F6 0649  14         dect  stack
0022 34F8 C64B  30         mov   r11,*stack            ; Save return address
0023 34FA 0649  14         dect  stack
0024 34FC C644  30         mov   tmp0,*stack           ; Push tmp0
0025 34FE 0649  14         dect  stack
0026 3500 C645  30         mov   tmp1,*stack           ; Push tmp1
0027 3502 0649  14         dect  stack
0028 3504 C646  30         mov   tmp2,*stack           ; Push tmp2
0029                       ;------------------------------------------------------
0030                       ; Get slot entry
0031                       ;------------------------------------------------------
0032 3506 C120  34         mov   @parm1,tmp0           ; Line number in editor buffer
     3508 A006     
0033               
0034 350A 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page with index slot
     350C 31C4     
0035                                                   ; \ i  tmp0     = Line number
0036                                                   ; / o  outparm1 = Slot offset in SAMS page
0037               
0038 350E C120  34         mov   @outparm1,tmp0        ; \ Get slot entry
     3510 A018     
0039 3512 C164  34         mov   @idx.top(tmp0),tmp1   ; /
     3514 B000     
0040               
0041 3516 130C  14         jeq   idx.pointer.get.parm.null
0042                                                   ; Skip if index slot empty
0043                       ;------------------------------------------------------
0044                       ; Calculate MSB (SAMS page)
0045                       ;------------------------------------------------------
0046 3518 C185  18         mov   tmp1,tmp2             ; \
0047 351A 0986  32         srl   tmp2,8                ; / Right align SAMS page
0048                       ;------------------------------------------------------
0049                       ; Calculate LSB (pointer address)
0050                       ;------------------------------------------------------
0051 351C 0245  22         andi  tmp1,>00ff            ; Get rid of MSB (SAMS page)
     351E 00FF     
0052 3520 0A45  24         sla   tmp1,4                ; Multiply with 16
0053 3522 0225  22         ai    tmp1,edb.top          ; Add editor buffer base address
     3524 C000     
0054                       ;------------------------------------------------------
0055                       ; Return parameters
0056                       ;------------------------------------------------------
0057               idx.pointer.get.parm:
0058 3526 C805  38         mov   tmp1,@outparm1        ; Index slot -> Pointer
     3528 A018     
0059 352A C806  38         mov   tmp2,@outparm2        ; Index slot -> SAMS page
     352C A01A     
0060 352E 1004  14         jmp   idx.pointer.get.exit
0061                       ;------------------------------------------------------
0062                       ; Special handling for "null"-pointer
0063                       ;------------------------------------------------------
0064               idx.pointer.get.parm.null:
0065 3530 04E0  34         clr   @outparm1
     3532 A018     
0066 3534 04E0  34         clr   @outparm2
     3536 A01A     
0067                       ;------------------------------------------------------
0068                       ; Exit
0069                       ;------------------------------------------------------
0070               idx.pointer.get.exit:
0071 3538 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0072 353A C179  30         mov   *stack+,tmp1          ; Pop tmp1
0073 353C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0074 353E C2F9  30         mov   *stack+,r11           ; Pop r11
0075 3540 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0026                       copy  "idx.delete.asm"         ; Index management - delete slot
     **** ****     > idx.delete.asm
0001               * FILE......: idx_delete.asm
0002               * Purpose...: Delete index entry
0003               
0004               ***************************************************************
0005               * _idx.entry.delete.reorg
0006               * Reorganize index slot entries
0007               ***************************************************************
0008               * bl @_idx.entry.delete.reorg
0009               *--------------------------------------------------------------
0010               *  Remarks
0011               *  Private, only to be called from idx_entry_delete
0012               ********|*****|*********************|**************************
0013               _idx.entry.delete.reorg:
0014                       ;------------------------------------------------------
0015                       ; Reorganize index entries
0016                       ;------------------------------------------------------
0017 3542 0224  22         ai    tmp0,idx.top          ; Add index base to offset
     3544 B000     
0018 3546 C144  18         mov   tmp0,tmp1             ; a = current slot
0019 3548 05C5  14         inct  tmp1                  ; b = current slot + 2
0020                       ;------------------------------------------------------
0021                       ; Loop forward until end of index
0022                       ;------------------------------------------------------
0023               _idx.entry.delete.reorg.loop:
0024 354A CD35  46         mov   *tmp1+,*tmp0+         ; Copy b -> a
0025 354C 0606  14         dec   tmp2                  ; tmp2--
0026 354E 16FD  14         jne   _idx.entry.delete.reorg.loop
0027                                                   ; Loop unless completed
0028 3550 045B  20         b     *r11                  ; Return to caller
0029               
0030               
0031               
0032               ***************************************************************
0033               * idx.entry.delete
0034               * Delete index entry - Close gap created by delete
0035               ***************************************************************
0036               * bl @idx.entry.delete
0037               *--------------------------------------------------------------
0038               * INPUT
0039               * @parm1    = Line number in editor buffer to delete
0040               * @parm2    = Line number of last line to check for reorg
0041               *--------------------------------------------------------------
0042               * Register usage
0043               * tmp0,tmp1,tmp2,tmp3
0044               ********|*****|*********************|**************************
0045               idx.entry.delete:
0046 3552 0649  14         dect  stack
0047 3554 C64B  30         mov   r11,*stack            ; Save return address
0048 3556 0649  14         dect  stack
0049 3558 C644  30         mov   tmp0,*stack           ; Push tmp0
0050 355A 0649  14         dect  stack
0051 355C C645  30         mov   tmp1,*stack           ; Push tmp1
0052 355E 0649  14         dect  stack
0053 3560 C646  30         mov   tmp2,*stack           ; Push tmp2
0054 3562 0649  14         dect  stack
0055 3564 C647  30         mov   tmp3,*stack           ; Push tmp3
0056                       ;------------------------------------------------------
0057                       ; Get index slot
0058                       ;------------------------------------------------------
0059 3566 C120  34         mov   @parm1,tmp0           ; Line number in editor buffer
     3568 A006     
0060               
0061 356A 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     356C 31C4     
0062                                                   ; \ i  tmp0     = Line number
0063                                                   ; / o  outparm1 = Slot offset in SAMS page
0064               
0065 356E C120  34         mov   @outparm1,tmp0        ; Index offset
     3570 A018     
0066                       ;------------------------------------------------------
0067                       ; Prepare for index reorg
0068                       ;------------------------------------------------------
0069 3572 C1A0  34         mov   @parm2,tmp2           ; Get last line to check
     3574 A008     
0070 3576 1303  14         jeq   idx.entry.delete.lastline
0071                                                   ; Exit early if last line = 0
0072               
0073 3578 61A0  34         s     @parm1,tmp2           ; Calculate loop
     357A A006     
0074 357C 1504  14         jgt   idx.entry.delete.reorg
0075                                                   ; Reorganize if loop counter > 0
0076                       ;------------------------------------------------------
0077                       ; Special treatment for last line
0078                       ;------------------------------------------------------
0079               idx.entry.delete.lastline:
0080 357E 0224  22         ai    tmp0,idx.top          ; Add index base to offset
     3580 B000     
0081 3582 04D4  26         clr   *tmp0                 ; Clear index entry
0082 3584 1012  14         jmp   idx.entry.delete.exit ; Exit early
0083                       ;------------------------------------------------------
0084                       ; Reorganize index entries
0085                       ;------------------------------------------------------
0086               idx.entry.delete.reorg:
0087 3586 C1E0  34         mov   @parm2,tmp3           ; Get last line to reorganize
     3588 A008     
0088 358A 0287  22         ci    tmp3,2048
     358C 0800     
0089 358E 120A  14         jle   idx.entry.delete.reorg.simple
0090                                                   ; Do simple reorg only if single
0091                                                   ; SAMS index page, otherwise complex reorg.
0092                       ;------------------------------------------------------
0093                       ; Complex index reorganization (multiple SAMS pages)
0094                       ;------------------------------------------------------
0095               idx.entry.delete.reorg.complex:
0096 3590 06A0  32         bl    @_idx.sams.mapcolumn.on
     3592 3156     
0097                                                   ; Index in continuous memory region
0098               
0099                       ;-------------------------------------------------------
0100                       ; Recalculate index offset in continuous memory region
0101                       ;-------------------------------------------------------
0102 3594 C120  34         mov   @parm1,tmp0           ; Restore line number
     3596 A006     
0103 3598 0A14  18         sla   tmp0,1                ; Calculate offset
0104               
0105 359A 06A0  32         bl    @_idx.entry.delete.reorg
     359C 3542     
0106                                                   ; Reorganize index
0107                                                   ; \ i  tmp0 = Index offset
0108                                                   ; / i  tmp2 = Loop count
0109               
0110 359E 06A0  32         bl    @_idx.sams.mapcolumn.off
     35A0 318A     
0111                                                   ; Restore memory window layout
0112               
0113 35A2 1002  14         jmp   !
0114                       ;------------------------------------------------------
0115                       ; Simple index reorganization
0116                       ;------------------------------------------------------
0117               idx.entry.delete.reorg.simple:
0118 35A4 06A0  32         bl    @_idx.entry.delete.reorg
     35A6 3542     
0119                       ;------------------------------------------------------
0120                       ; Clear index entry (base + offset already set)
0121                       ;------------------------------------------------------
0122 35A8 04D4  26 !       clr   *tmp0                 ; Clear index entry
0123                       ;------------------------------------------------------
0124                       ; Exit
0125                       ;------------------------------------------------------
0126               idx.entry.delete.exit:
0127 35AA C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0128 35AC C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0129 35AE C179  30         mov   *stack+,tmp1          ; Pop tmp1
0130 35B0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0131 35B2 C2F9  30         mov   *stack+,r11           ; Pop r11
0132 35B4 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0027                       copy  "idx.insert.asm"         ; Index management - insert slot
     **** ****     > idx.insert.asm
0001               * FILE......: idx.insert.asm
0002               * Purpose...: Insert index entry
0003               
0004               ***************************************************************
0005               * _idx.entry.insert.reorg
0006               * Reorganize index slot entries
0007               ***************************************************************
0008               * bl @_idx.entry.insert.reorg
0009               *--------------------------------------------------------------
0010               *  Remarks
0011               *  Private, only to be called from idx_entry_insert
0012               ********|*****|*********************|**************************
0013               _idx.entry.insert.reorg:
0014                       ;------------------------------------------------------
0015                       ; Assert 1
0016                       ;------------------------------------------------------
0017 35B6 0286  22         ci    tmp2,2048*5           ; Crash if loop counter value is unrealistic
     35B8 2800     
0018                                                   ; Max. 5 SAMS pages, each with 2048 index
0019                                                   ; entries.
0020               
0021 35BA 1204  14         jle   !                     ; Continue if ok
0022                       ;------------------------------------------------------
0023                       ; Crash and burn
0024                       ;------------------------------------------------------
0025               _idx.entry.insert.reorg.crash:
0026 35BC C80B  38         mov   r11,@>ffce            ; \ Save caller address
     35BE FFCE     
0027 35C0 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     35C2 2026     
0028                       ;------------------------------------------------------
0029                       ; Reorganize index entries
0030                       ;------------------------------------------------------
0031 35C4 0224  22 !       ai    tmp0,idx.top          ; Add index base to offset
     35C6 B000     
0032 35C8 C144  18         mov   tmp0,tmp1             ; a = current slot
0033 35CA 05C5  14         inct  tmp1                  ; b = current slot + 2
0034 35CC 0586  14         inc   tmp2                  ; One time adjustment for current line
0035                       ;------------------------------------------------------
0036                       ; Assert 2
0037                       ;------------------------------------------------------
0038 35CE C1C6  18         mov   tmp2,tmp3             ; Number of slots to reorganize
0039 35D0 0A17  18         sla   tmp3,1                ; adjust to slot size
0040 35D2 0507  14         neg   tmp3                  ; tmp3 = -tmp3
0041 35D4 A1C4  18         a     tmp0,tmp3             ; tmp3 = tmp3 + tmp0
0042 35D6 0287  22         ci    tmp3,idx.top - 4      ; Address before top of index ?
     35D8 AFFC     
0043 35DA 1504  14         jgt   _idx.entry.insert.reorg.loop
0044                                                   ; No, jump to loop start
0045                       ;------------------------------------------------------
0046                       ; Crash and burn
0047                       ;------------------------------------------------------
0048 35DC C80B  38         mov   r11,@>ffce            ; \ Save caller address
     35DE FFCE     
0049 35E0 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     35E2 2026     
0050                       ;------------------------------------------------------
0051                       ; Loop backwards from end of index up to insert point
0052                       ;------------------------------------------------------
0053               _idx.entry.insert.reorg.loop:
0054 35E4 C554  38         mov   *tmp0,*tmp1           ; Copy a -> b
0055 35E6 0644  14         dect  tmp0                  ; Move pointer up
0056 35E8 0645  14         dect  tmp1                  ; Move pointer up
0057 35EA 0606  14         dec   tmp2                  ; Next index entry
0058 35EC 15FB  14         jgt   _idx.entry.insert.reorg.loop
0059                                                   ; Repeat until done
0060                       ;------------------------------------------------------
0061                       ; Clear index entry at insert point
0062                       ;------------------------------------------------------
0063 35EE 05C4  14         inct  tmp0                  ; \ Clear index entry for line
0064 35F0 04D4  26         clr   *tmp0                 ; / following insert point
0065               
0066 35F2 045B  20         b     *r11                  ; Return to caller
0067               
0068               
0069               
0070               
0071               ***************************************************************
0072               * idx.entry.insert
0073               * Insert index entry
0074               ***************************************************************
0075               * bl @idx.entry.insert
0076               *--------------------------------------------------------------
0077               * INPUT
0078               * @parm1    = Line number in editor buffer to insert
0079               * @parm2    = Line number of last line to check for reorg
0080               *--------------------------------------------------------------
0081               * OUTPUT
0082               * NONE
0083               *--------------------------------------------------------------
0084               * Register usage
0085               * tmp0,tmp2
0086               ********|*****|*********************|**************************
0087               idx.entry.insert:
0088 35F4 0649  14         dect  stack
0089 35F6 C64B  30         mov   r11,*stack            ; Save return address
0090 35F8 0649  14         dect  stack
0091 35FA C644  30         mov   tmp0,*stack           ; Push tmp0
0092 35FC 0649  14         dect  stack
0093 35FE C645  30         mov   tmp1,*stack           ; Push tmp1
0094 3600 0649  14         dect  stack
0095 3602 C646  30         mov   tmp2,*stack           ; Push tmp2
0096 3604 0649  14         dect  stack
0097 3606 C647  30         mov   tmp3,*stack           ; Push tmp3
0098                       ;------------------------------------------------------
0099                       ; Prepare for index reorg
0100                       ;------------------------------------------------------
0101 3608 C1A0  34         mov   @parm2,tmp2           ; Get last line to check
     360A A008     
0102 360C 61A0  34         s     @parm1,tmp2           ; Calculate loop
     360E A006     
0103 3610 130F  14         jeq   idx.entry.insert.reorg.simple
0104                                                   ; Special treatment if last line
0105                       ;------------------------------------------------------
0106                       ; Reorganize index entries
0107                       ;------------------------------------------------------
0108               idx.entry.insert.reorg:
0109 3612 C1E0  34         mov   @parm2,tmp3
     3614 A008     
0110 3616 0287  22         ci    tmp3,2048
     3618 0800     
0111 361A 110A  14         jlt   idx.entry.insert.reorg.simple
0112                                                   ; Do simple reorg only if single
0113                                                   ; SAMS index page, otherwise complex reorg.
0114                       ;------------------------------------------------------
0115                       ; Complex index reorganization (multiple SAMS pages)
0116                       ;------------------------------------------------------
0117               idx.entry.insert.reorg.complex:
0118 361C 06A0  32         bl    @_idx.sams.mapcolumn.on
     361E 3156     
0119                                                   ; Index in continuous memory region
0120                                                   ; b000 - ffff (5 SAMS pages)
0121               
0122 3620 C120  34         mov   @parm2,tmp0           ; Last line number in editor buffer
     3622 A008     
0123 3624 0A14  18         sla   tmp0,1                ; tmp0 * 2
0124               
0125 3626 06A0  32         bl    @_idx.entry.insert.reorg
     3628 35B6     
0126                                                   ; Reorganize index
0127                                                   ; \ i  tmp0 = Last line in index
0128                                                   ; / i  tmp2 = Num. of index entries to move
0129               
0130 362A 06A0  32         bl    @_idx.sams.mapcolumn.off
     362C 318A     
0131                                                   ; Restore memory window layout
0132               
0133 362E 1008  14         jmp   idx.entry.insert.exit
0134                       ;------------------------------------------------------
0135                       ; Simple index reorganization
0136                       ;------------------------------------------------------
0137               idx.entry.insert.reorg.simple:
0138 3630 C120  34         mov   @parm2,tmp0           ; Last line number in editor buffer
     3632 A008     
0139               
0140 3634 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     3636 31C4     
0141                                                   ; \ i  tmp0     = Line number
0142                                                   ; / o  outparm1 = Slot offset in SAMS page
0143               
0144 3638 C120  34         mov   @outparm1,tmp0        ; Index offset
     363A A018     
0145               
0146 363C 06A0  32         bl    @_idx.entry.insert.reorg
     363E 35B6     
0147                                                   ; Reorganize index
0148                                                   ; \ i  tmp0 = Last line in index
0149                                                   ; / i  tmp2 = Num. of index entries to move
0150               
0151                       ;------------------------------------------------------
0152                       ; Exit
0153                       ;------------------------------------------------------
0154               idx.entry.insert.exit:
0155 3640 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0156 3642 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0157 3644 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0158 3646 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0159 3648 C2F9  30         mov   *stack+,r11           ; Pop r11
0160 364A 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0028                       ;-----------------------------------------------------------------------
0029                       ; Logic for editor buffer
0030                       ;-----------------------------------------------------------------------
0031                       copy  "edb.line.mappage.asm"   ; Activate edbuf SAMS page for line
     **** ****     > edb.line.mappage.asm
0001               * FILE......: edb.line.mappage.asm
0002               * Purpose...: Editor buffer SAMS setup
0003               
0004               
0005               ***************************************************************
0006               * edb.line.mappage
0007               * Activate editor buffer SAMS page for line
0008               ***************************************************************
0009               * bl  @edb.line.mappage
0010               *
0011               * tmp0 = Line number in editor buffer
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * outparm1 = Pointer to line in editor buffer
0015               * outparm2 = SAMS page
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0, tmp1
0019               ***************************************************************
0020               edb.line.mappage:
0021 364C 0649  14         dect  stack
0022 364E C64B  30         mov   r11,*stack            ; Push return address
0023 3650 0649  14         dect  stack
0024 3652 C644  30         mov   tmp0,*stack           ; Push tmp0
0025 3654 0649  14         dect  stack
0026 3656 C645  30         mov   tmp1,*stack           ; Push tmp1
0027                       ;------------------------------------------------------
0028                       ; Assert
0029                       ;------------------------------------------------------
0030 3658 8804  34         c     tmp0,@edb.lines       ; Non-existing line?
     365A A504     
0031 365C 1204  14         jle   edb.line.mappage.lookup
0032                                                   ; All checks passed, continue
0033                                                   ;--------------------------
0034                                                   ; Assert failed
0035                                                   ;--------------------------
0036 365E C80B  38         mov   r11,@>ffce            ; \ Save caller address
     3660 FFCE     
0037 3662 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     3664 2026     
0038                       ;------------------------------------------------------
0039                       ; Lookup SAMS page for line in parm1
0040                       ;------------------------------------------------------
0041               edb.line.mappage.lookup:
0042 3666 C804  38         mov   tmp0,@parm1           ; Set line number in editor buffer
     3668 A006     
0043               
0044 366A 06A0  32         bl    @idx.pointer.get      ; Get pointer to line
     366C 34F6     
0045                                                   ; \ i  parm1    = Line number
0046                                                   ; | o  outparm1 = Pointer to line
0047                                                   ; / o  outparm2 = SAMS page
0048               
0049 366E C120  34         mov   @outparm2,tmp0        ; SAMS page
     3670 A01A     
0050 3672 C160  34         mov   @outparm1,tmp1        ; Pointer to line
     3674 A018     
0051 3676 130B  14         jeq   edb.line.mappage.exit ; Nothing to page-in if NULL pointer
0052                                                   ; (=empty line)
0053                       ;------------------------------------------------------
0054                       ; Determine if requested SAMS page is already active
0055                       ;------------------------------------------------------
0056 3678 8120  34         c     @tv.sams.c000,tmp0    ; Compare with active page editor buffer
     367A A208     
0057 367C 1308  14         jeq   edb.line.mappage.exit ; Request page already active, so exit
0058                       ;------------------------------------------------------
0059                       ; Activate requested SAMS page
0060                       ;-----------------------------------------------------
0061 367E 06A0  32         bl    @xsams.page.set       ; Switch SAMS memory page
     3680 2576     
0062                                                   ; \ i  tmp0 = SAMS page
0063                                                   ; / i  tmp1 = Memory address
0064               
0065 3682 C820  54         mov   @outparm2,@tv.sams.c000
     3684 A01A     
     3686 A208     
0066                                                   ; Set page in shadow registers
0067               
0068 3688 C820  54         mov   @outparm2,@edb.sams.page
     368A A01A     
     368C A518     
0069                                                   ; Set current SAMS page
0070                       ;------------------------------------------------------
0071                       ; Exit
0072                       ;------------------------------------------------------
0073               edb.line.mappage.exit:
0074 368E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0075 3690 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0076 3692 C2F9  30         mov   *stack+,r11           ; Pop r11
0077 3694 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0032                       copy  "edb.line.getlen.asm"    ; Get line length
     **** ****     > edb.line.getlen.asm
0001               * FILE......: edb.line.getlen.asm
0002               * Purpose...: Get length of specified line in editor buffer
0003               
0004               ***************************************************************
0005               * edb.line.getlength
0006               * Get length of specified line
0007               ***************************************************************
0008               *  bl   @edb.line.getlength
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Line number (base 0)
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @outparm1 = Length of line
0015               * @outparm2 = SAMS page
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0,tmp1
0019               ********|*****|*********************|**************************
0020               edb.line.getlength:
0021 3696 0649  14         dect  stack
0022 3698 C64B  30         mov   r11,*stack            ; Push return address
0023 369A 0649  14         dect  stack
0024 369C C644  30         mov   tmp0,*stack           ; Push tmp0
0025 369E 0649  14         dect  stack
0026 36A0 C645  30         mov   tmp1,*stack           ; Push tmp1
0027                       ;------------------------------------------------------
0028                       ; Initialisation
0029                       ;------------------------------------------------------
0030 36A2 04E0  34         clr   @outparm1             ; Reset length
     36A4 A018     
0031 36A6 04E0  34         clr   @outparm2             ; Reset SAMS bank
     36A8 A01A     
0032                       ;------------------------------------------------------
0033                       ; Exit if requested line beyond editor buffer
0034                       ;------------------------------------------------------
0035 36AA C120  34         mov   @parm1,tmp0           ; \
     36AC A006     
0036 36AE 0584  14         inc   tmp0                  ; /  base 1
0037               
0038 36B0 8804  34         c     tmp0,@edb.lines       ; Requested line at BOT?
     36B2 A504     
0039 36B4 1101  14         jlt   !                     ; No, continue processing
0040 36B6 100B  14         jmp   edb.line.getlength.null
0041                                                   ; Set length 0 and exit early
0042                       ;------------------------------------------------------
0043                       ; Map SAMS page
0044                       ;------------------------------------------------------
0045 36B8 C120  34 !       mov   @parm1,tmp0           ; Get line
     36BA A006     
0046               
0047 36BC 06A0  32         bl    @edb.line.mappage     ; Activate editor buffer SAMS page for line
     36BE 364C     
0048                                                   ; \ i  tmp0     = Line number
0049                                                   ; | o  outparm1 = Pointer to line
0050                                                   ; / o  outparm2 = SAMS page
0051               
0052 36C0 C120  34         mov   @outparm1,tmp0        ; Store pointer in tmp0
     36C2 A018     
0053 36C4 1304  14         jeq   edb.line.getlength.null
0054                                                   ; Set length to 0 if null-pointer
0055                       ;------------------------------------------------------
0056                       ; Process line prefix and exit
0057                       ;------------------------------------------------------
0058 36C6 C154  26         mov   *tmp0,tmp1            ; Get length into tmp1
0059 36C8 C805  38         mov   tmp1,@outparm1        ; Save length
     36CA A018     
0060 36CC 1002  14         jmp   edb.line.getlength.exit
0061                       ;------------------------------------------------------
0062                       ; Set length to 0 if null-pointer
0063                       ;------------------------------------------------------
0064               edb.line.getlength.null:
0065 36CE 04E0  34         clr   @outparm1             ; Set length to 0, was a null-pointer
     36D0 A018     
0066                       ;------------------------------------------------------
0067                       ; Exit
0068                       ;------------------------------------------------------
0069               edb.line.getlength.exit:
0070 36D2 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0071 36D4 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0072 36D6 C2F9  30         mov   *stack+,r11           ; Pop r11
0073 36D8 045B  20         b     *r11                  ; Return to caller
0074               
0075               
0076               
0077               ***************************************************************
0078               * edb.line.getlength2
0079               * Get length of current row (as seen from editor buffer side)
0080               ***************************************************************
0081               *  bl   @edb.line.getlength2
0082               *--------------------------------------------------------------
0083               * INPUT
0084               * @fb.row = Row in frame buffer
0085               *--------------------------------------------------------------
0086               * OUTPUT
0087               * @fb.row.length = Length of row
0088               *--------------------------------------------------------------
0089               * Register usage
0090               * tmp0
0091               ********|*****|*********************|**************************
0092               edb.line.getlength2:
0093 36DA 0649  14         dect  stack
0094 36DC C64B  30         mov   r11,*stack            ; Save return address
0095 36DE 0649  14         dect  stack
0096 36E0 C644  30         mov   tmp0,*stack           ; Push tmp0
0097                       ;------------------------------------------------------
0098                       ; Calculate line in editor buffer
0099                       ;------------------------------------------------------
0100 36E2 C120  34         mov   @fb.topline,tmp0      ; Get top line in frame buffer
     36E4 A304     
0101 36E6 A120  34         a     @fb.row,tmp0          ; Get current row in frame buffer
     36E8 A306     
0102                       ;------------------------------------------------------
0103                       ; Get length
0104                       ;------------------------------------------------------
0105 36EA C804  38         mov   tmp0,@parm1
     36EC A006     
0106 36EE 06A0  32         bl    @edb.line.getlength
     36F0 3696     
0107 36F2 C820  54         mov   @outparm1,@fb.row.length
     36F4 A018     
     36F6 A308     
0108                                                   ; Save row length
0109                       ;------------------------------------------------------
0110                       ; Exit
0111                       ;------------------------------------------------------
0112               edb.line.getlength2.exit:
0113 36F8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0114 36FA C2F9  30         mov   *stack+,r11           ; Pop R11
0115 36FC 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0033                       copy  "edb.hipage.alloc.asm"   ; Check/increase highest SAMS page
     **** ****     > edb.hipage.alloc.asm
0001               * FILE......: edb.hipage.alloc.asm
0002               * Purpose...: Editor buffer utilities
0003               
0004               
0005               ***************************************************************
0006               * edb.hipage.alloc
0007               * Check and increase highest SAMS page of editor buffer
0008               ***************************************************************
0009               *  bl   @edb.hipage.alloc
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @edb.next_free.ptr = Pointer to next free line
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0,tmp1
0018               ********|*****|*********************|**************************
0019               edb.hipage.alloc:
0020 36FE 0649  14         dect  stack
0021 3700 C64B  30         mov   r11,*stack            ; Save return address
0022 3702 0649  14         dect  stack
0023 3704 C644  30         mov   tmp0,*stack           ; Push tmp0
0024 3706 0649  14         dect  stack
0025 3708 C645  30         mov   tmp1,*stack           ; Push tmp1
0026                       ;------------------------------------------------------
0027                       ; 1a. Check if highest SAMS page needs to be increased
0028                       ;------------------------------------------------------
0029               edb.hipage.alloc.check_setpage:
0030 370A C120  34         mov   @edb.next_free.ptr,tmp0
     370C A508     
0031                                                   ;--------------------------
0032                                                   ; Check for page overflow
0033                                                   ;--------------------------
0034 370E 0244  22         andi  tmp0,>0fff            ; Get rid of highest nibble
     3710 0FFF     
0035 3712 0224  22         ai    tmp0,82               ; Assume line of 80 chars (+2 bytes prefix)
     3714 0052     
0036 3716 0284  22         ci    tmp0,>1000 - 16       ; 4K boundary reached?
     3718 0FF0     
0037 371A 1105  14         jlt   edb.hipage.alloc.setpage
0038                                                   ; Not yet, don't increase SAMS page
0039                       ;------------------------------------------------------
0040                       ; 1b. Increase highest SAMS page (copy-on-write!)
0041                       ;------------------------------------------------------
0042 371C 05A0  34         inc   @edb.sams.hipage      ; Set highest SAMS page
     371E A51A     
0043 3720 C820  54         mov   @edb.top.ptr,@edb.next_free.ptr
     3722 A500     
     3724 A508     
0044                                                   ; Start at top of SAMS page again
0045                       ;------------------------------------------------------
0046                       ; 1c. Switch to SAMS page and exit
0047                       ;------------------------------------------------------
0048               edb.hipage.alloc.setpage:
0049 3726 C120  34         mov   @edb.sams.hipage,tmp0
     3728 A51A     
0050 372A C160  34         mov   @edb.top.ptr,tmp1
     372C A500     
0051 372E 06A0  32         bl    @xsams.page.set       ; Set SAMS page
     3730 2576     
0052                                                   ; \ i  tmp0 = SAMS page number
0053                                                   ; / i  tmp1 = Memory address
0054               
0055 3732 1004  14         jmp   edb.hipage.alloc.exit
0056                       ;------------------------------------------------------
0057                       ; Check failed, crash CPU!
0058                       ;------------------------------------------------------
0059               edb.hipage.alloc.crash:
0060 3734 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     3736 FFCE     
0061 3738 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     373A 2026     
0062                       ;------------------------------------------------------
0063                       ; Exit
0064                       ;------------------------------------------------------
0065               edb.hipage.alloc.exit:
0066 373C C179  30         mov   *stack+,tmp1          ; Pop tmp1
0067 373E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0068 3740 C2F9  30         mov   *stack+,r11           ; Pop R11
0069 3742 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0034                       ;-----------------------------------------------------------------------
0035                       ; Utility functions
0036                       ;-----------------------------------------------------------------------
0037                       copy  "pane.topline.clearmsg.asm"   ; Remove overlay msg in top line
     **** ****     > pane.topline.clearmsg.asm
0001               * FILE......: pane.topline.clearmsg.asm
0002               * Purpose...: One-shot task for clearing overlay message in top line
0003               
0004               
0005               ***************************************************************
0006               * pane.topline.oneshot.clearmsg
0007               * Remove overlay message in top line
0008               ***************************************************************
0009               * Runs as one-shot task in slot 3
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * none
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * none
0019               ********|*****|*********************|**************************
0020               pane.topline.oneshot.clearmsg:
0021 3744 0649  14         dect  stack
0022 3746 C64B  30         mov   r11,*stack            ; Push return address
0023 3748 0649  14         dect  stack
0024 374A C660  42         mov   @wyx,*stack           ; Push cursor position
     374C 832A     
0025                       ;-------------------------------------------------------
0026                       ; Clear message
0027                       ;-------------------------------------------------------
0028 374E 06A0  32         bl    @hchar
     3750 27D2     
0029 3752 0034                   byte 0,52,32,18
     3754 2012     
0030 3756 FFFF                   data EOL              ; Clear message
0031               
0032 3758 04E0  34         clr   @tv.task.oneshot      ; Reset oneshot task
     375A A226     
0033                       ;-------------------------------------------------------
0034                       ; Exit
0035                       ;-------------------------------------------------------
0036               pane.topline.oneshot.clearmsg.exit:
0037 375C C839  42         mov   *stack+,@wyx          ; Pop cursor position
     375E 832A     
0038 3760 C2F9  30         mov   *stack+,r11           ; Pop R11
0039 3762 045B  20         b     *r11                  ; Return to task
                   < ram.resident.asm
0038                       copy  "fg99.run.asm"                ; Run FinalGROM cartridge image
     **** ****     > fg99.run.asm
0001               * FILE......: fg99.run.asm
0002               * Purpose...: Run FinalGROM cartridge image
0003               
0004               
0005               ***************************************************************
0006               * fg99.run
0007               * Run FinalGROM cartridge image
0008               ***************************************************************
0009               * bl   @fg99.run
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @tv.fg99.img.ptr = Pointer to cartridge image entry
0013               *
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * r1 in GPL WS, tmp0, tmp1, tmp2, r12
0019               *--------------------------------------------------------------
0020               * Remarks
0021               * Based on tib.run
0022               ********|*****|*********************|**************************
0023               fg99.run:
0024                       ;-------------------------------------------------------
0025                       ; Put VDP in TI Basic compatible mode (32x24)
0026                       ;-------------------------------------------------------
0027 3764 06A0  32         bl    @f18rst               ; Reset and lock the F18A
     3766 27A6     
0028               
0029 3768 06A0  32         bl    @vidtab               ; Load video mode table into VDP
     376A 22F8     
0030 376C 7F74                   data tibasic.32x24    ; Equate selected video mode table
0031               
0032 376E 06A0  32         bl    @scroff               ; Turn off screen
     3770 2686     
0033                       ;------------------------------------------------------
0034                       ; Clear magic string
0035                       ;------------------------------------------------------
0036                       ; Clear the bytes 'DEAD994ABEEF' in core memory.
0037                       ; Indicate it's unsafe to resume Stevie and initialization
0038                       ; is necessary.
0039 3772 04E0  34         clr   @magic.str.w1
     3774 A000     
0040 3776 04E0  34         clr   @magic.str.w2
     3778 A002     
0041 377A 04E0  34         clr   @magic.str.w3
     377C A004     
0042                       ;-------------------------------------------------------
0043                       ; Load FG99 cartridge, but do not start cartridge yet
0044                       ;-------------------------------------------------------
0045 377E C120  34         mov   @tv.fg99.img.ptr,tmp0 ; Get pointer to cartridge image
     3780 A232     
0046 3782 06A0  32         bl    @xfg99                ; Run FinalGROM cartridge image
     3784 2DC6     
0047                                                   ; \ i tmp0 = Pointer to cartridge image
0048                                                   ; /
0049                       ;-------------------------------------------------------
0050                       ; Turn SAMS mapper off and exit to monitor
0051                       ;-------------------------------------------------------
0052 3786 020C  20         li    r12,>1e00             ; SAMS CRU address
     3788 1E00     
0053 378A 1E01  16         sbz   1                     ; Disable SAMS mapper
0054                                                   ; \ We keep the mapper off while
0055                                                   ; | running TI Basic or other external
0056                                                   ; / programs.
0057               
0058 378C 0420  42         blwp @0                     ; Return to monitor
     378E 0000     
                   < ram.resident.asm
0039                       ;-----------------------------------------------------------------------
0040                       ; Background tasks
0041                       ;-----------------------------------------------------------------------
0046                       copy  "task.vdp.cursor.char.asm"    ; Set cursor shape in VDP (blink)
     **** ****     > task.vdp.cursor.char.asm
0001               * FILE......: task.vdp.cursor.char.asm
0002               * Purpose...: VDP cursor shape (character version)
0003               
0004               ***************************************************************
0005               * Task - Update cursor shape (blink)
0006               ********|*****|*********************|**************************
0007               task.vdp.cursor:
0008 3790 0649  14         dect  stack
0009 3792 C64B  30         mov   r11,*stack            ; Save return address
0010 3794 0649  14         dect  stack
0011 3796 C644  30         mov   tmp0,*stack           ; Push tmp0
0012 3798 0649  14         dect  stack
0013 379A C645  30         mov   tmp1,*stack           ; Push tmp1
0014 379C 0649  14         dect  stack
0015 379E C646  30         mov   tmp2,*stack           ; Push tmp2
0016 37A0 0649  14         dect  stack
0017 37A2 C660  42         mov   @wyx,*stack           ; Push cursor position
     37A4 832A     
0018                       ;------------------------------------------------------
0019                       ; Get pane with focus
0020                       ;------------------------------------------------------
0021 37A6 C120  34         mov   @tv.pane.focus,tmp0   ; Get pane with focus
     37A8 A224     
0022               
0023 37AA 0284  22         ci    tmp0,pane.focus.fb
     37AC 0000     
0024 37AE 1310  14         jeq   task.vdp.cursor.fb    ; Frame buffer has focus
0025               
0026 37B0 0284  22         ci    tmp0,pane.focus.cmdb
     37B2 0001     
0027 37B4 1304  14         jeq   task.vdp.cursor.cmdb  ; CMDB buffer has focus
0028                       ;------------------------------------------------------
0029                       ; Assert failed. Invalid value
0030                       ;------------------------------------------------------
0031 37B6 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     37B8 FFCE     
0032 37BA 06A0  32         bl    @cpu.crash            ; / Halt system.
     37BC 2026     
0033                       ;------------------------------------------------------
0034                       ; CMDB buffer has focus, position CMDB cursor
0035                       ;------------------------------------------------------
0036               task.vdp.cursor.cmdb:
0037 37BE C820  46         mov   @cmdb.cursor,@wyx     ; Position cursor in CMDB pane
     37C0 A70A     
     37C2 832A     
0038 37C4 0560  34         inv   @fb.curtoggle         ; Flip cursor shape flag
     37C6 A314     
0039 37C8 1319  14         jeq   task.vdp.cursor.dump  ; Show CMDB cursor
0040                       ;------------------------------------------------------
0041                       ; Hide CMDB cursor
0042                       ;------------------------------------------------------
0043               task.vdp.cursor.cmdb.hide:
0044 37CA 0720  34         seto  @cmdb.dirty
     37CC A71A     
0045 37CE 101C  14         jmp   task.vdp.cursor.exit
0046                       ;------------------------------------------------------
0047                       ; Frame buffer has focus, position FB cursor
0048                       ;------------------------------------------------------
0049               task.vdp.cursor.fb:
0050 37D0 0560  34         inv   @fb.curtoggle         ; Flip cursor shape flag
     37D2 A314     
0051 37D4 1303  14         jeq   task.vdp.cursor.fb.visible
0052                                                   ; Show FB cursor
0053                       ;------------------------------------------------------
0054                       ; Hide FB cursor
0055                       ;------------------------------------------------------
0056 37D6 0720  34         seto  @fb.dirty             ; Trigger refresh
     37D8 A318     
0057 37DA 1016  14         jmp   task.vdp.cursor.exit
0058                       ;------------------------------------------------------
0059                       ; Show FB cursor
0060                       ;------------------------------------------------------
0061               task.vdp.cursor.fb.visible:
0062 37DC C120  34         mov   @tv.ruler.visible,tmp0
     37DE A210     
0063 37E0 1307  14         jeq   task.vdp.cursor.fb.visible.noruler
0064                       ;------------------------------------------------------
0065                       ; Cursor position adjustment, ruler visible
0066                       ;------------------------------------------------------
0067 37E2 C120  30         mov   @wyx,tmp0             ; Get cursor YX
     37E4 832A     
0068 37E6 0224  22         ai    tmp0,>0200            ; Topline + ruler adjustment
     37E8 0200     
0069 37EA C804  30         mov   tmp0,@wyx             ; Save cursor YX
     37EC 832A     
0070 37EE 1006  14         jmp   task.vdp.cursor.dump
0071                       ;------------------------------------------------------
0072                       ; Cursor position adjustment, ruler hidden
0073                       ;------------------------------------------------------
0074               task.vdp.cursor.fb.visible.noruler:
0075 37F0 C120  30         mov   @wyx,tmp0             ; Get cursor YX
     37F2 832A     
0076 37F4 0224  22         ai    tmp0,>0100            ; Topline adjustment
     37F6 0100     
0077 37F8 C804  30         mov   tmp0,@wyx             ; Save cursor YX
     37FA 832A     
0078                       ;------------------------------------------------------
0079                       ; Dump cursor to VDP
0080                       ;------------------------------------------------------
0081               task.vdp.cursor.dump:
0082 37FC 06A0  32         bl    @yx2pnt               ; Calculate VDP address from @WYX
     37FE 23FA     
0083                                                   ; \ i  @wyx = Cursor position
0084                                                   ; / o  tmp0 = VDP address
0085               
0086 3800 0205  20         li    tmp1,26               ; Cursor character
     3802 001A     
0087               
0088 3804 06A0  32         bl    @xvputb               ; VDP put single byte
     3806 22CC     
0089                                                   ; \ i  tmp0 = VDP write address
0090                                                   ; / i  tmp1 = Byte to write
0091                       ;------------------------------------------------------
0092                       ; Exit
0093                       ;------------------------------------------------------
0094               task.vdp.cursor.exit:
0095 3808 C839  42         mov   *stack+,@wyx          ; Pop cursor position
     380A 832A     
0096 380C C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0097 380E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0098 3810 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0099 3812 C2F9  30         mov   *stack+,r11           ; Pop r11
0100 3814 0460  28         b     @slotok               ; Exit task
     3816 2E84     
                   < ram.resident.asm
0048               
0049                       copy  "task.oneshot.asm"            ; Run "one shot" task
     **** ****     > task.oneshot.asm
0001               * FILE......: task.oneshot.asm
0002               * Purpose...: Trigger one-shot task
0003               
0004               ***************************************************************
0005               * Task - One-shot
0006               ***************************************************************
0007               
0008               task.oneshot:
0009 3818 C120  34         mov   @tv.task.oneshot,tmp0  ; Get pointer to one-shot task
     381A A226     
0010 381C 1301  14         jeq   task.oneshot.exit
0011               
0012 381E 0694  24         bl    *tmp0                  ; Execute one-shot task
0013                       ;------------------------------------------------------
0014                       ; Exit
0015                       ;------------------------------------------------------
0016               task.oneshot.exit:
0017 3820 0460  28         b     @slotok                ; Exit task
     3822 2E84     
                   < ram.resident.asm
0050                       ;------------------------------------------------------
0051                       ; Program data
0052                       ;------------------------------------------------------
0053                       copy  "data.constants.asm"          ; Constants
     **** ****     > data.constants.asm
0001               * FILE......: data.constants.asm
0002               * Purpose...: Stevie Editor - data segment (constants)
0003               
0004               ***************************************************************
0005               *                      Constants
0006               ********|*****|*********************|**************************
0007               
0008               ***************************************************************
0009               * Sprite Attribute Table
0010               *--------------------------------------------------------------
0011               romsat:
0012                                                   ; YX, initial shape and color
0013 3824 0000             data  >0000,>0001           ; Cursor
     3826 0001     
0014 3828 0000             data  >0000,>0101           ; Current line indicator     <
     382A 0101     
0015 382C 0820             data  >0820,>0201           ; Current column indicator   v
     382E 0201     
0016               nosprite:
0017 3830 D000             data  >d000                 ; End-of-Sprites list
0018               
0019               
0020               
0021               
0022               ***************************************************************
0023               * Stevie color schemes table
0024               *--------------------------------------------------------------
0025               * Word 1
0026               * A  MSB  high-nibble    Foreground color text line in frame buffer
0027               * B  MSB  low-nibble     Background color text line in frame buffer
0028               * C  LSB  high-nibble    Foreground color top/bottom line
0029               * D  LSB  low-nibble     Background color top/bottom line
0030               *
0031               * Word 2
0032               * E  MSB  high-nibble    Foreground color cmdb pane
0033               * F  MSB  low-nibble     Background color cmdb pane
0034               * G  LSB  high-nibble    Cursor foreground color cmdb pane
0035               * H  LSB  low-nibble     Cursor foreground color frame buffer
0036               *
0037               * Word 3
0038               * I  MSB  high-nibble    Foreground color busy top/bottom line
0039               * J  MSB  low-nibble     Background color busy top/bottom line
0040               * K  LSB  high-nibble    Foreground color marked line in frame buffer
0041               * L  LSB  low-nibble     Background color marked line in frame buffer
0042               *
0043               * Word 4
0044               * M  MSB  high-nibble    Foreground color command buffer header line
0045               * N  MSB  low-nibble     Background color command buffer header line
0046               * O  LSB  high-nibble    Foreground color line+column indicator frame buffer
0047               * P  LSB  low-nibble     Foreground color ruler frame buffer
0048               *
0049               * Colors
0050               * 0  Transparant
0051               * 1  black
0052               * 2  Green
0053               * 3  Light Green
0054               * 4  Blue
0055               * 5  Light Blue
0056               * 6  Dark Red
0057               * 7  Cyan
0058               * 8  Red
0059               * 9  Light Red
0060               * A  Yellow
0061               * B  Light Yellow
0062               * C  Dark Green
0063               * D  Magenta
0064               * E  Grey
0065               * F  White
0066               *--------------------------------------------------------------
0067      000A     tv.colorscheme.entries   equ 10 ; Entries in table
0068               
0069               tv.colorscheme.table:
0070                       ;                             ; #
0071                       ;      ABCD  EFGH  IJKL  MNOP ; -
0072 3832 F417             data  >f417,>f171,>1b1f,>7111 ; 1  White on blue with cyan touch
     3834 F171     
     3836 1B1F     
     3838 7111     
0073 383A A11A             data  >a11a,>f0ff,>1f1a,>f1ff ; 2  Dark yellow on black
     383C F0FF     
     383E 1F1A     
     3840 F1FF     
0074 3842 2112             data  >2112,>f0ff,>1f12,>f1f6 ; 3  Dark green on black
     3844 F0FF     
     3846 1F12     
     3848 F1F6     
0075 384A F41F             data  >f41f,>1e11,>1a17,>1e11 ; 4  White on blue
     384C 1E11     
     384E 1A17     
     3850 1E11     
0076 3852 E11E             data  >e11e,>e1ff,>1f1e,>e1ff ; 5  Grey on black
     3854 E1FF     
     3856 1F1E     
     3858 E1FF     
0077 385A 1771             data  >1771,>1016,>1b71,>1711 ; 6  Black on cyan
     385C 1016     
     385E 1B71     
     3860 1711     
0078 3862 1FF1             data  >1ff1,>1011,>f1f1,>1f11 ; 7  Black on white
     3864 1011     
     3866 F1F1     
     3868 1F11     
0079 386A 1AF1             data  >1af1,>a1ff,>1f1f,>f11f ; 8  Black on dark yellow
     386C A1FF     
     386E 1F1F     
     3870 F11F     
0080 3872 21F0             data  >21f0,>12ff,>1b12,>12ff ; 9  Dark green on black
     3874 12FF     
     3876 1B12     
     3878 12FF     
0081 387A F5F1             data  >f5f1,>e1ff,>1b1f,>f131 ; 10 White on light blue
     387C E1FF     
     387E 1B1F     
     3880 F131     
0082                       even
0083               
0084               tv.tabs.table.lr:
0085 3882 0007             byte  0,7,12,25             ; \   Default tab positions as used
     3884 0C19     
0086 3886 1E2D             byte  30,45,59,79           ; |   in Editor/Assembler module.
     3888 3B4F     
0087 388A FF00             byte  >ff,0,0,0             ; |   Up to 11 positions supported.
     388C 0000     
0088                                                   ; /   >ff means end-of-list.
0089               
0090               tv.tabs.table.rl:
0091 388E 4F3B             byte  79,59,45,30           ; \   Default tab positions as used
     3890 2D1E     
0092 3892 190C             byte  25,12,7,0             ; |   in Editor/Assembler module.
     3894 0700     
0093 3896 FF00             byte  >ff,0,0,0             ; |   Up to 11 positions supported.
     3898 0000     
0094                                                   ; /   >ff means end-of-list.
0095               
0096               ***************************************************************
0097               * Constants for numbers 0-10
0098               ********|*****|*********************|**************************
0099      2000     const.0       equ   w$0000          ; 0
0100      2002     const.1       equ   w$0001          ; 1
0101      2004     const.2       equ   w$0002          ; 2
0102 389A 0003     const.3       data  3               ; 3
0103      2006     const.4       equ   w$0004          ; 4
0104 389C 0005     const.5       data  5               ; 5
0105 389E 0006     const.6       data  6               ; 6
0106 38A0 0007     const.7       data  7               ; 7
0107      2008     const.8       equ   w$0008          ; 8
0108 38A2 0009     const.9       data  9               ; 9
0109 38A4 000A     const.10      data  10              ; 10
                   < ram.resident.asm
0054                       copy  "data.strings.asm"            ; Strings
     **** ****     > data.strings.asm
0001               * FILE......: data.strings.asm
0002               * Purpose...: Stevie Editor - data segment (strings)
0003               
0004               ***************************************************************
0005               *                       Strings
0006               ***************************************************************
0007               
0008 38A6 012C     txt.delim          stri ','
0009                                  even
0010 38A8 0520     txt.bottom         stri '  BOT'
     38AA 2042     
     38AC 4F54     
0011                                  even
0012 38AE 044F     txt.ovrwrite       stri 'OVR '
     38B0 5652     
     38B2 20       
0013                                  even
0014 38B4 0449     txt.insert         stri 'INS '
     38B6 4E53     
     38B8 20       
0015                                  even
0016 38BA 0449     txt.autoinsert     stri 'INS+'
     38BC 4E53     
     38BE 2B       
0017                                  even
0018 38C0 012A     txt.star           stri '*'
0019                                  even
0020 38C2 0A4C     txt.loading        stri 'Loading...'
     38C4 6F61     
     38C6 6469     
     38C8 6E67     
     38CA 2E2E     
     38CC 2E       
0021                                  even
0022 38CE 0A53     txt.saving         stri 'Saving....'
     38D0 6176     
     38D2 696E     
     38D4 672E     
     38D6 2E2E     
     38D8 2E       
0023                                  even
0024 38DA 1250     txt.printing       stri 'Printing file.....'
     38DC 7269     
     38DE 6E74     
     38E0 696E     
     38E2 6720     
     38E4 6669     
     38E6 6C65     
     38E8 2E2E     
     38EA 2E2E     
     38EC 2E       
0025                                  even
0026 38EE 1244     txt.block.del      stri 'Deleting block....'
     38F0 656C     
     38F2 6574     
     38F4 696E     
     38F6 6720     
     38F8 626C     
     38FA 6F63     
     38FC 6B2E     
     38FE 2E2E     
     3900 2E       
0027                                  even
0028 3902 1143     txt.block.copy     stri 'Copying block....'
     3904 6F70     
     3906 7969     
     3908 6E67     
     390A 2062     
     390C 6C6F     
     390E 636B     
     3910 2E2E     
     3912 2E2E     
0029                                  even
0030 3914 104D     txt.block.move     stri 'Moving block....'
     3916 6F76     
     3918 696E     
     391A 6720     
     391C 626C     
     391E 6F63     
     3920 6B2E     
     3922 2E2E     
     3924 2E       
0031                                  even
0032 3926 1853     txt.block.save     stri 'Saving block to file....'
     3928 6176     
     392A 696E     
     392C 6720     
     392E 626C     
     3930 6F63     
     3932 6B20     
     3934 746F     
     3936 2066     
     3938 696C     
     393A 652E     
     393C 2E2E     
     393E 2E       
0033                                  even
0034 3940 1843     txt.block.clip     stri 'Copying to clipboard....'
     3942 6F70     
     3944 7969     
     3946 6E67     
     3948 2074     
     394A 6F20     
     394C 636C     
     394E 6970     
     3950 626F     
     3952 6172     
     3954 642E     
     3956 2E2E     
     3958 2E       
0035                                  even
0036 395A 1250     txt.block.print    stri 'Printing block....'
     395C 7269     
     395E 6E74     
     3960 696E     
     3962 6720     
     3964 626C     
     3966 6F63     
     3968 6B2E     
     396A 2E2E     
     396C 2E       
0037                                  even
0038 396E 1343     txt.clearmem       stri 'Clearing memory....'
     3970 6C65     
     3972 6172     
     3974 696E     
     3976 6720     
     3978 6D65     
     397A 6D6F     
     397C 7279     
     397E 2E2E     
     3980 2E2E     
0039                                  even
0040 3982 0E4C     txt.done.load      stri 'Load completed'
     3984 6F61     
     3986 6420     
     3988 636F     
     398A 6D70     
     398C 6C65     
     398E 7465     
     3990 64       
0041                                  even
0042 3992 1049     txt.done.insert    stri 'Insert completed'
     3994 6E73     
     3996 6572     
     3998 7420     
     399A 636F     
     399C 6D70     
     399E 6C65     
     39A0 7465     
     39A2 64       
0043                                  even
0044 39A4 1041     txt.done.append    stri 'Append completed'
     39A6 7070     
     39A8 656E     
     39AA 6420     
     39AC 636F     
     39AE 6D70     
     39B0 6C65     
     39B2 7465     
     39B4 64       
0045                                  even
0046 39B6 0E53     txt.done.save      stri 'Save completed'
     39B8 6176     
     39BA 6520     
     39BC 636F     
     39BE 6D70     
     39C0 6C65     
     39C2 7465     
     39C4 64       
0047                                  even
0048 39C6 0E43     txt.done.copy      stri 'Copy completed'
     39C8 6F70     
     39CA 7920     
     39CC 636F     
     39CE 6D70     
     39D0 6C65     
     39D2 7465     
     39D4 64       
0049                                  even
0050 39D6 0F50     txt.done.print     stri 'Print completed'
     39D8 7269     
     39DA 6E74     
     39DC 2063     
     39DE 6F6D     
     39E0 706C     
     39E2 6574     
     39E4 6564     
0051                                  even
0052 39E6 1044     txt.done.delete    stri 'Delete completed'
     39E8 656C     
     39EA 6574     
     39EC 6520     
     39EE 636F     
     39F0 6D70     
     39F2 6C65     
     39F4 7465     
     39F6 64       
0053                                  even
0054 39F8 0F43     txt.done.clipboard stri 'Clipboard saved'
     39FA 6C69     
     39FC 7062     
     39FE 6F61     
     3A00 7264     
     3A02 2073     
     3A04 6176     
     3A06 6564     
0055                                  even
0056 3A08 0D43     txt.done.clipdev   stri 'Clipboard set'
     3A0A 6C69     
     3A0C 7062     
     3A0E 6F61     
     3A10 7264     
     3A12 2073     
     3A14 6574     
0057                                  even
0058 3A16 0E41     txt.autoins.on     stri 'Autoinsert: on'
     3A18 7574     
     3A1A 6F69     
     3A1C 6E73     
     3A1E 6572     
     3A20 743A     
     3A22 206F     
     3A24 6E       
0059                                  even
0060 3A26 0F41     txt.autoins.off    stri 'Autoinsert: off'
     3A28 7574     
     3A2A 6F69     
     3A2C 6E73     
     3A2E 6572     
     3A30 743A     
     3A32 206F     
     3A34 6666     
0061                                  even
0062 3A36 0B46     txt.fastmode       stri 'Fastmode IO'
     3A38 6173     
     3A3A 746D     
     3A3C 6F64     
     3A3E 6520     
     3A40 494F     
0063                                  even
0064 3A42 1B45     txt.uncrunching    stri 'Expanding TI Basic line....'
     3A44 7870     
     3A46 616E     
     3A48 6469     
     3A4A 6E67     
     3A4C 2054     
     3A4E 4920     
     3A50 4261     
     3A52 7369     
     3A54 6320     
     3A56 6C69     
     3A58 6E65     
     3A5A 2E2E     
     3A5C 2E2E     
0065                                  even
0066 3A5E 026B     txt.kb             stri 'kb'
     3A60 62       
0067                                  even
0068 3A62 054C     txt.lines          stri 'Lines'
     3A64 696E     
     3A66 6573     
0069                                  even
0070 3A68 0A5B     txt.newfile        stri '[New file]'
     3A6A 4E65     
     3A6C 7720     
     3A6E 6669     
     3A70 6C65     
     3A72 5D       
0071                                  even
0072 3A74 0D5B     txt.tib1           stri '[TI Basic #1]'
     3A76 5449     
     3A78 2042     
     3A7A 6173     
     3A7C 6963     
     3A7E 2023     
     3A80 315D     
0073                                  even
0074 3A82 0D5B     txt.tib2           stri '[TI Basic #2]'
     3A84 5449     
     3A86 2042     
     3A88 6173     
     3A8A 6963     
     3A8C 2023     
     3A8E 325D     
0075                                  even
0076 3A90 0D5B     txt.tib3           stri '[TI Basic #3]'
     3A92 5449     
     3A94 2042     
     3A96 6173     
     3A98 6963     
     3A9A 2023     
     3A9C 335D     
0077                                  even
0078 3A9E 0D5B     txt.tib4           stri '[TI Basic #4]'
     3AA0 5449     
     3AA2 2042     
     3AA4 6173     
     3AA6 6963     
     3AA8 2023     
     3AAA 345D     
0079                                  even
0080 3AAC 0D5B     txt.tib5           stri '[TI Basic #5]'
     3AAE 5449     
     3AB0 2042     
     3AB2 6173     
     3AB4 6963     
     3AB6 2023     
     3AB8 355D     
0081                                  even
0082 3ABA 0444     txt.filetype.dv80  stri 'DV80'
     3ABC 5638     
     3ABE 30       
0083                                  even
0084 3AC0 034D     txt.m1             stri 'M1='
     3AC2 313D     
0085                                  even
0086 3AC4 034D     txt.m2             stri 'M2='
     3AC6 323D     
0087                                  even
0088 3AC8 1E46     txt.keys.default   stri 'F9-Menu  ^H-Help  ^U-Shortcuts'
     3ACA 392D     
     3ACC 4D65     
     3ACE 6E75     
     3AD0 2020     
     3AD2 5E48     
     3AD4 2D48     
     3AD6 656C     
     3AD8 7020     
     3ADA 205E     
     3ADC 552D     
     3ADE 5368     
     3AE0 6F72     
     3AE2 7463     
     3AE4 7574     
     3AE6 73       
0089                                  even
0090 3AE8 2946     txt.keys.defaultb  stri 'F9-Menu  ^H-Help  ^U-Shortcuts  F0-Basic#'
     3AEA 392D     
     3AEC 4D65     
     3AEE 6E75     
     3AF0 2020     
     3AF2 5E48     
     3AF4 2D48     
     3AF6 656C     
     3AF8 7020     
     3AFA 205E     
     3AFC 552D     
     3AFE 5368     
     3B00 6F72     
     3B02 7463     
     3B04 7574     
     3B06 7320     
     3B08 2046     
     3B0A 302D     
     3B0C 4261     
     3B0E 7369     
     3B10 6323     
0091                                  even
0092 3B12 3446     txt.keys.block     stri 'F9-Back  ^Copy ^Move ^Del ^Save ^Print ^[1-3]Clipbrd'
     3B14 392D     
     3B16 4261     
     3B18 636B     
     3B1A 2020     
     3B1C 5E43     
     3B1E 6F70     
     3B20 7920     
     3B22 5E4D     
     3B24 6F76     
     3B26 6520     
     3B28 5E44     
     3B2A 656C     
     3B2C 205E     
     3B2E 5361     
     3B30 7665     
     3B32 205E     
     3B34 5072     
     3B36 696E     
     3B38 7420     
     3B3A 5E5B     
     3B3C 312D     
     3B3E 335D     
     3B40 436C     
     3B42 6970     
     3B44 6272     
     3B46 64       
0093                                  even
0094 3B48 2C46     txt.keys.basic1    stri 'F9-Back  F5-AutoUnpack  SPACE-Unpack program'
     3B4A 392D     
     3B4C 4261     
     3B4E 636B     
     3B50 2020     
     3B52 4635     
     3B54 2D41     
     3B56 7574     
     3B58 6F55     
     3B5A 6E70     
     3B5C 6163     
     3B5E 6B20     
     3B60 2053     
     3B62 5041     
     3B64 4345     
     3B66 2D55     
     3B68 6E70     
     3B6A 6163     
     3B6C 6B20     
     3B6E 7072     
     3B70 6F67     
     3B72 7261     
     3B74 6D       
0095                                  even
0096 3B76 2E2E     txt.ruler          text    '.........'
     3B78 2E2E     
     3B7A 2E2E     
     3B7C 2E2E     
     3B7E 2E       
0097 3B7F   12                        byte    18
0098 3B80 2E2E                        text    '.........'
     3B82 2E2E     
     3B84 2E2E     
     3B86 2E2E     
     3B88 2E       
0099 3B89   13                        byte    19
0100 3B8A 2E2E                        text    '.........'
     3B8C 2E2E     
     3B8E 2E2E     
     3B90 2E2E     
     3B92 2E       
0101 3B93   14                        byte    20
0102 3B94 2E2E                        text    '.........'
     3B96 2E2E     
     3B98 2E2E     
     3B9A 2E2E     
     3B9C 2E       
0103 3B9D   15                        byte    21
0104 3B9E 2E2E                        text    '.........'
     3BA0 2E2E     
     3BA2 2E2E     
     3BA4 2E2E     
     3BA6 2E       
0105 3BA7   16                        byte    22
0106 3BA8 2E2E                        text    '.........'
     3BAA 2E2E     
     3BAC 2E2E     
     3BAE 2E2E     
     3BB0 2E       
0107 3BB1   17                        byte    23
0108 3BB2 2E2E                        text    '.........'
     3BB4 2E2E     
     3BB6 2E2E     
     3BB8 2E2E     
     3BBA 2E       
0109 3BBB   18                        byte    24
0110 3BBC 2E2E                        text    '.........'
     3BBE 2E2E     
     3BC0 2E2E     
     3BC2 2E2E     
     3BC4 2E       
0111 3BC5   19                        byte    25
0112                                  even
0113 3BC6 020E     txt.alpha.down     data >020e,>0f00
     3BC8 0F00     
0114 3BCA 0110     txt.vertline       data >0110
0115 3BCC 011C     txt.keymarker      byte 1,28
0116               
0117 3BCE 0120     txt.ws1            stri ' '
0118                                  even
0119 3BD0 0220     txt.ws2            stri '  '
     3BD2 20       
0120                                  even
0121 3BD4 0320     txt.ws3            stri '   '
     3BD6 2020     
0122                                  even
0123 3BD8 0420     txt.ws4            stri '    '
     3BDA 2020     
     3BDC 20       
0124                                  even
0125 3BDE 0520     txt.ws5            stri '     '
     3BE0 2020     
     3BE2 2020     
0126                                  even
0127      3BD8     txt.filetype.none  equ txt.ws4
0128               
0129               
0130               ;--------------------------------------------------------------
0131               ; Strings for error line pane
0132               ;--------------------------------------------------------------
0133 3BE4 1546     txt.ioerr.load     stri 'Failed loading file: '
     3BE6 6169     
     3BE8 6C65     
     3BEA 6420     
     3BEC 6C6F     
     3BEE 6164     
     3BF0 696E     
     3BF2 6720     
     3BF4 6669     
     3BF6 6C65     
     3BF8 3A20     
0134                                  even
0135 3BFA 1446     txt.ioerr.save     stri 'Failed saving file: '
     3BFC 6169     
     3BFE 6C65     
     3C00 6420     
     3C02 7361     
     3C04 7669     
     3C06 6E67     
     3C08 2066     
     3C0A 696C     
     3C0C 653A     
     3C0E 20       
0136                                  even
0137 3C10 1B46     txt.ioerr.print    stri 'Failed printing to device: '
     3C12 6169     
     3C14 6C65     
     3C16 6420     
     3C18 7072     
     3C1A 696E     
     3C1C 7469     
     3C1E 6E67     
     3C20 2074     
     3C22 6F20     
     3C24 6465     
     3C26 7669     
     3C28 6365     
     3C2A 3A20     
0138                                  even
0139 3C2C 164E     txt.io.nofile      stri 'No filename specified.'
     3C2E 6F20     
     3C30 6669     
     3C32 6C65     
     3C34 6E61     
     3C36 6D65     
     3C38 2073     
     3C3A 7065     
     3C3C 6369     
     3C3E 6669     
     3C40 6564     
     3C42 2E       
0140                                  even
0141 3C44 2D49     txt.memfull.load   stri 'Index full. File too large for editor buffer.'
     3C46 6E64     
     3C48 6578     
     3C4A 2066     
     3C4C 756C     
     3C4E 6C2E     
     3C50 2046     
     3C52 696C     
     3C54 6520     
     3C56 746F     
     3C58 6F20     
     3C5A 6C61     
     3C5C 7267     
     3C5E 6520     
     3C60 666F     
     3C62 7220     
     3C64 6564     
     3C66 6974     
     3C68 6F72     
     3C6A 2062     
     3C6C 7566     
     3C6E 6665     
     3C70 722E     
0142                                  even
0143 3C72 2D43     txt.block.inside   stri 'Copy/Move target must be outside M1-M2 range.'
     3C74 6F70     
     3C76 792F     
     3C78 4D6F     
     3C7A 7665     
     3C7C 2074     
     3C7E 6172     
     3C80 6765     
     3C82 7420     
     3C84 6D75     
     3C86 7374     
     3C88 2062     
     3C8A 6520     
     3C8C 6F75     
     3C8E 7473     
     3C90 6964     
     3C92 6520     
     3C94 4D31     
     3C96 2D4D     
     3C98 3220     
     3C9A 7261     
     3C9C 6E67     
     3C9E 652E     
0144                                  even
0145               
0146               ;--------------------------------------------------------------
0147               ; Strings for command buffer
0148               ;--------------------------------------------------------------
0149 3CA0 013E     txt.cmdb.prompt    stri '>'
0150                                  even
0151 3CA2 0D43     txt.colorscheme    stri 'Color scheme:'
     3CA4 6F6C     
     3CA6 6F72     
     3CA8 2073     
     3CAA 6368     
     3CAC 656D     
     3CAE 653A     
0152                                  even
                   < ram.resident.asm
0055                       copy  "data.defaults.asm"           ; Default values (devices, ...)
     **** ****     > data.defaults.asm
0001               * FILE......: data.defaults.asm
0002               * Purpose...: Default values for Stevie
0003               
0004               ***************************************************************
0005               *                     Default values
0006               ********|*****|*********************|**************************
0007 3CB0 0650     def.printer.fname   stri 'PI.PIO'
     3CB2 492E     
     3CB4 5049     
     3CB6 4F       
0008 3CB7   09     def.clip.fname      stri 'DSK1.CLIP'
     3CB8 4453     
     3CBA 4B31     
     3CBC 2E43     
     3CBE 4C49     
     3CC0 50       
0009 3CC1   09     def.clip.fname.b    stri 'DSK2.CLIP'
     3CC2 4453     
     3CC4 4B32     
     3CC6 2E43     
     3CC8 4C49     
     3CCA 50       
0010 3CCB   09     def.clip.fname.c    stri 'TIPI.CLIP'
     3CCC 5449     
     3CCE 5049     
     3CD0 2E43     
     3CD2 4C49     
     3CD4 50       
0011 3CD5   2F     def.devices         stri ',DSK,HDX,IDE,PI.,PIO,TIPI.,RD,SCS,SDD,WDS,RS232'
     3CD6 2C44     
     3CD8 534B     
     3CDA 2C48     
     3CDC 4458     
     3CDE 2C49     
     3CE0 4445     
     3CE2 2C50     
     3CE4 492E     
     3CE6 2C50     
     3CE8 494F     
     3CEA 2C54     
     3CEC 4950     
     3CEE 492E     
     3CF0 2C52     
     3CF2 442C     
     3CF4 5343     
     3CF6 532C     
     3CF8 5344     
     3CFA 442C     
     3CFC 5744     
     3CFE 532C     
     3D00 5253     
     3D02 3233     
     3D04 32       
0012 3D05   0C     def.mastercat       stri 'TIPI.MASTCAT'
     3D06 5449     
     3D08 5049     
     3D0A 2E4D     
     3D0C 4153     
     3D0E 5443     
     3D10 4154     
                   < ram.resident.asm
0056                       copy  "data.fg99.carts.asm"         ; Cartridge images
     **** ****     > data.fg99.carts.asm
0001               * FILE......: data.fg99.carts.asm
0002               * Purpose...: FinalGROM cartridge images
0003               
0004               ***************************************************************
0005               *                   Cartridge images
0006               ***************************************************************
0007                      even
0008               *--------------------------------------------------------------
0009               * Cartridge 'Force Command'
0010               *--------------------------------------------------------------
0011               fg99.cart.fcmd:
0012 3D12 99              byte   >99                   ; \
0013 3D13   4F            text   'OKFG99'              ; | Send this to reload
     3D14 4B46     
     3D16 4739     
     3D18 39       
0014 3D19   99            byte   >99                   ; /
0015 3D1A 4643            text   "FCMDG"               ; \ File to load (8 chars, pad with >00)
     3D1C 4D44     
     3D1E 47       
0016 3D1F   00            byte   >00, >00, >00         ; /
     3D20 0000     
0017 3D22 0000            data   >0000                 ; >0000 for GROM/mixed, >FFFF for ROM only
0018 3D24 0000            data   >0000                 ; Start address
0019                      even
0020               
0021               *--------------------------------------------------------------
0022               * Cartridge 'Extended Basic GEM'
0023               *--------------------------------------------------------------
0024               fg99.cart.xbgem:
0025 3D26 99              byte   >99                   ; \
0026 3D27   4F            text   'OKFG99'              ; | Send this to reload
     3D28 4B46     
     3D2A 4739     
     3D2C 39       
0027 3D2D   99            byte   >99                   ; /
0028 3D2E 5842            text   "XB29GEMG"            ; \ File to load (8 chars, pad with >00)
     3D30 3239     
     3D32 4745     
     3D34 4D47     
0029                      ;                            ; /
0030 3D36 0000            data   >0000                 ; >0000 for GROM/mixed, >FFFF for ROM only
0031 3D38 0000            data   >0000                 ; Start address
0032                      even
0033               
0034               *--------------------------------------------------------------
0035               * Cartridge 'Rich Extended Basic'
0036               *--------------------------------------------------------------
0037               fg99.cart.rxb:
0038 3D3A 99              byte   >99                   ; \
0039 3D3B   4F            text   'OKFG99'              ; | Send this to reload
     3D3C 4B46     
     3D3E 4739     
     3D40 39       
0040 3D41   99            byte   >99                   ; /
0041 3D42 5258            text   "RXBG"                ; \ File to load (8 chars, pad with >00)
     3D44 4247     
0042 3D46 0000            byte   >00, >00, >00, >00    ; /
     3D48 0000     
0043 3D4A 0000            data   >0000                 ; >0000 for GROM/mixed, >FFFF for ROM only
0044 3D4C 0000            data   >0000                 ; Start address
0045                      even
0046               
0047               *--------------------------------------------------------------
0048               * Cartridge 'fbForth'
0049               *--------------------------------------------------------------
0050               fg99.cart.fbforth:
0051 3D4E 99              byte   >99                   ; \
0052 3D4F   4F            text   'OKFG99'              ; | Send this to reload
     3D50 4B46     
     3D52 4739     
     3D54 39       
0053 3D55   99            byte   >99                   ; /
0054 3D56 4642            text   "FBFORTHC"            ; \ File to load (8 chars, pad with >00)
     3D58 464F     
     3D5A 5254     
     3D5C 4843     
0055                      ;                            ; /
0056 3D5E 0000            data   >0000                 ; >0000 for GROM/mixed, >FFFF for ROM only
0057 3D60 0000            data   >0000                 ; Start address
0058                      even
                   < ram.resident.asm
                   < stevie_b2.asm
0052                       ;------------------------------------------------------
0053                       ; Activate bank 1 and branch to  >6036
0054                       ;------------------------------------------------------
0055 3D62 04E0  34         clr   @bank1.rom            ; Activate bank 1 "James" ROM
     3D64 6002     
0056               
0060               
0061 3D66 0460  28         b     @kickstart.code2      ; Jump to entry routine
     3D68 6046     
0062               ***************************************************************
0063               * Step 3: Include modules
0064               ********|*****|*********************|**************************
0065               main:
0066                       aorg  kickstart.code2       ; >6046
0067 6046 06A0  32         bl    @cpu.crash            ; Should never get here
     6048 2026     
0068                       ;-----------------------------------------------------------------------
0069                       ; Include files - Utility functions
0070                       ;-----------------------------------------------------------------------
0071                       copy  "colors.line.set.asm" ; Set color combination for line
     **** ****     > colors.line.set.asm
0001               * FILE......: colors.line.set
0002               * Purpose...: Set color combination for line
0003               
0004               ***************************************************************
0005               * colors.line.set
0006               * Set color combination for line in VDP TAT
0007               ***************************************************************
0008               * bl  @colors.line.set
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Foreground / Background color
0012               * @parm2 = Row on physical screen
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0,tmp1,tmp2
0019               ********|*****|*********************|**************************
0020               colors.line.set:
0021 604A 0649  14         dect  stack
0022 604C C64B  30         mov   r11,*stack            ; Save return address
0023 604E 0649  14         dect  stack
0024 6050 C644  30         mov   tmp0,*stack           ; Push tmp0
0025 6052 0649  14         dect  stack
0026 6054 C645  30         mov   tmp1,*stack           ; Push tmp1
0027 6056 0649  14         dect  stack
0028 6058 C646  30         mov   tmp2,*stack           ; Push tmp2
0029 605A 0649  14         dect  stack
0030 605C C660  46         mov   @parm1,*stack         ; Push parm1
     605E A006     
0031 6060 0649  14         dect  stack
0032 6062 C660  46         mov   @parm2,*stack         ; Push parm2
     6064 A008     
0033                       ;-------------------------------------------------------
0034                       ; Dump colors for line in TAT
0035                       ;-------------------------------------------------------
0036 6066 C120  34         mov   @parm2,tmp0           ; Get target line
     6068 A008     
0037 606A 0205  20         li    tmp1,colrow           ; Columns per row (spectra2)
     606C 0050     
0038 606E 3944  58         mpy   tmp0,tmp1             ; Calculate VDP address (results in tmp2!)
0039               
0040 6070 C106  18         mov   tmp2,tmp0             ; Set VDP start address
0041 6072 0224  22         ai    tmp0,vdp.tat.base     ; Add TAT base address
     6074 1800     
0042 6076 C160  34         mov   @parm1,tmp1           ; Get foreground/background color
     6078 A006     
0043 607A 0206  20         li    tmp2,80               ; Number of bytes to fill
     607C 0050     
0044               
0045 607E 06A0  32         bl    @xfilv                ; Fill colors
     6080 2294     
0046                                                   ; i \  tmp0 = start address
0047                                                   ; i |  tmp1 = byte to fill
0048                                                   ; i /  tmp2 = number of bytes to fill
0049                       ;-------------------------------------------------------
0050                       ; Exit
0051                       ;-------------------------------------------------------
0052               colors.line.set.exit:
0053 6082 C839  50         mov   *stack+,@parm2        ; Pop @parm2
     6084 A008     
0054 6086 C839  50         mov   *stack+,@parm1        ; Pop @parm1
     6088 A006     
0055 608A C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0056 608C C179  30         mov   *stack+,tmp1          ; Pop tmp1
0057 608E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0058 6090 C2F9  30         mov   *stack+,r11           ; Pop R11
0059 6092 045B  20         b     *r11                  ; Return to caller
                   < stevie_b2.asm
0072                       ;-----------------------------------------------------------------------
0073                       ; File handling
0074                       ;-----------------------------------------------------------------------
0075                       copy  "fh.read.mem.asm"     ; Read file into memory buffer
     **** ****     > fh.read.mem.asm
0001               * FILE......: fh.read.mem.asm
0002               * Purpose...: Read any kind of file into 32K memory region
0003               
0004               ***************************************************************
0005               * fh.file.read.mem
0006               * Read any kind of file into 32K memory
0007               ***************************************************************
0008               *  bl   @fh.file.read.mem
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * parm1 = Pointer to length-prefixed filename descriptor
0012               * parm2 = Pointer to callback function "Before Open file"
0013               * parm3 = Pointer to callback function "Read line from file"
0014               * parm4 = Pointer to callback function "Close file"
0015               * parm5 = Pointer to callback function "File I/O error"
0016               * parm6 = Pointer to callback function "Memory full"
0017               * parm7 = Destination RAM memory address
0018               * parm8 = PAB template header in ROM/RAM
0019               * parm9 = File type/mode (in LSB), becomes PAB byte 1
0020               *
0021               * Callbacks can be skipped by passing >0000 as pointer.
0022               *--------------------------------------------------------------
0023               * OUTPUT
0024               * none
0025               *--------------------------------------------------------------
0026               * Register usage
0027               * tmp0, tmp1, tmp2, tmp3
0028               *--------------------------------------------------------------
0029               * Remarks
0030               * File content processing expected to be handled in callback.
0031               * Might replace "fh.read.edb" someday, with SAMS and editor
0032               * buffer handling purely done in callback code.
0033               ********|*****|*********************|**************************
0034               fh.file.read.mem:
0035 6094 0649  14         dect  stack
0036 6096 C64B  30         mov   r11,*stack            ; Save return address
0037 6098 0649  14         dect  stack
0038 609A C644  30         mov   tmp0,*stack           ; Push tmp0
0039 609C 0649  14         dect  stack
0040 609E C645  30         mov   tmp1,*stack           ; Push tmp1
0041 60A0 0649  14         dect  stack
0042 60A2 C646  30         mov   tmp2,*stack           ; Push tmp2
0043 60A4 0649  14         dect  stack
0044 60A6 C647  30         mov   tmp3,*stack           ; Push tmp3
0045                       ;------------------------------------------------------
0046                       ; Initialisation
0047                       ;------------------------------------------------------
0048 60A8 04E0  34         clr   @fh.records           ; Reset records counter
     60AA A43C     
0049 60AC 04E0  34         clr   @fh.counter           ; Clear internal counter
     60AE A442     
0050 60B0 04E0  34         clr   @fh.pabstat           ; Clear copy of VDP PAB status byte
     60B2 A438     
0051 60B4 04E0  34         clr   @fh.ioresult          ; Clear status register contents
     60B6 A43A     
0052                       ;------------------------------------------------------
0053                       ; Save parameters / callback functions
0054                       ;------------------------------------------------------
0055 60B8 0204  20         li    tmp0,fh.fopmode.readfile
     60BA 0001     
0056                                                   ; Going to read a file
0057 60BC C804  38         mov   tmp0,@fh.fopmode      ; Set file operations mode
     60BE A44A     
0058               
0059 60C0 C820  54         mov   @parm1,@fh.fname.ptr  ; Pointer to file descriptor
     60C2 A006     
     60C4 A444     
0060 60C6 C820  54         mov   @parm2,@fh.callback1  ; Callback function "Open file"
     60C8 A008     
     60CA A450     
0061 60CC C820  54         mov   @parm3,@fh.callback2  ; Callback function "Read line from file"
     60CE A00A     
     60D0 A452     
0062 60D2 C820  54         mov   @parm4,@fh.callback3  ; Callback function "Close file"
     60D4 A00C     
     60D6 A454     
0063 60D8 C820  54         mov   @parm5,@fh.callback4  ; Callback function "File I/O error"
     60DA A00E     
     60DC A456     
0064 60DE C820  54         mov   @parm6,@fh.callback5  ; Callback function "Memory full error"
     60E0 A010     
     60E2 A458     
0065 60E4 C820  54         mov   @parm7,@fh.ram.ptr    ; Set pointer to RAM destination
     60E6 A012     
     60E8 A45C     
0066 60EA C820  54         mov   @parm8,@fh.pabtpl.ptr ; Set pointer to PAB template in ROM/RAM
     60EC A014     
     60EE A466     
0067 60F0 C820  54         mov   @parm9,@fh.ftype.init ; File type/mode (in LSB)
     60F2 A016     
     60F4 A45A     
0068                       ;------------------------------------------------------
0069                       ; Loading file in destination memory
0070                       ;------------------------------------------------------
0071               fh.file.read.mem.newfile:
0072 60F6 0720  34         seto  @fh.temp1             ; Set flag "load file"
     60F8 A460     
0073 60FA 04E0  34         clr   @fh.temp3             ; Not used
     60FC A464     
0074                       ;------------------------------------------------------
0075                       ; Asserts
0076                       ;------------------------------------------------------
0077               fh.file.read.mem.assert1:
0078 60FE C120  34         mov   @fh.callback1,tmp0
     6100 A450     
0079 6102 1306  14         jeq   fh.file.read.mem.assert2
0080 6104 0284  22         ci    tmp0,>6000            ; Insane address ?
     6106 6000     
0081 6108 1128  14         jlt   fh.file.read.mem.crsh ; Yes, crash!
0082 610A 0284  22         ci    tmp0,>7fff            ; Insane address ?
     610C 7FFF     
0083 610E 1525  14         jgt   fh.file.read.mem.crsh ; Yes, crash!
0084               
0085               fh.file.read.mem.assert2
0086 6110 C120  34         mov   @fh.callback2,tmp0
     6112 A452     
0087 6114 1306  14         jeq   fh.file.read.mem.assert3
0088 6116 0284  22         ci    tmp0,>6000            ; Insane address ?
     6118 6000     
0089 611A 111F  14         jlt   fh.file.read.mem.crsh ; Yes, crash!
0090 611C 0284  22         ci    tmp0,>7fff            ; Insane address ?
     611E 7FFF     
0091 6120 151C  14         jgt   fh.file.read.mem.crsh ; Yes, crash!
0092               
0093               fh.file.read.mem.assert3:
0094 6122 C120  34         mov   @fh.callback3,tmp0
     6124 A454     
0095 6126 1306  14         jeq   fh.file.read.mem.assert4
0096 6128 0284  22         ci    tmp0,>6000            ; Insane address ?
     612A 6000     
0097 612C 1116  14         jlt   fh.file.read.mem.crsh ; Yes, crash!
0098 612E 0284  22         ci    tmp0,>7fff            ; Insane address ?
     6130 7FFF     
0099 6132 1513  14         jgt   fh.file.read.mem.crsh ; Yes, crash!
0100               
0101               fh.file.read.mem.assert4:
0102 6134 C120  34         mov   @fh.callback4,tmp0
     6136 A456     
0103 6138 1306  14         jeq   fh.file.read.mem.assert5
0104 613A 0284  22         ci    tmp0,>6000            ; Insane address ?
     613C 6000     
0105 613E 110D  14         jlt   fh.file.read.mem.crsh ; Yes, crash!
0106 6140 0284  22         ci    tmp0,>7fff            ; Insane address ?
     6142 7FFF     
0107 6144 150A  14         jgt   fh.file.read.mem.crsh ; Yes, crash!
0108               
0109               fh.file.read.mem.assert5:
0110 6146 C120  34         mov   @fh.callback5,tmp0
     6148 A458     
0111 614A 130B  14         jeq   fh.file.read.mem.load1
0112 614C 0284  22         ci    tmp0,>6000            ; Insane address ?
     614E 6000     
0113 6150 1104  14         jlt   fh.file.read.mem.crsh ; Yes, crash!
0114 6152 0284  22         ci    tmp0,>7fff            ; Insane address ?
     6154 7FFF     
0115 6156 1501  14         jgt   fh.file.read.mem.crsh ; Yes, crash!
0116               
0117 6158 1004  14         jmp   fh.file.read.mem.load1
0118                                                   ; All checks passed, continue
0119                       ;------------------------------------------------------
0120                       ; Check failed, crash CPU!
0121                       ;------------------------------------------------------
0122               fh.file.read.mem.crsh:
0123 615A C80B  38         mov   r11,@>ffce            ; \ Save caller address
     615C FFCE     
0124 615E 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     6160 2026     
0125                       ;------------------------------------------------------
0126                       ; Callback "Before Open file"
0127                       ;------------------------------------------------------
0128               fh.file.read.mem.load1:
0129 6162 C120  34         mov   @fh.callback1,tmp0
     6164 A450     
0130 6166 1301  14         jeq   fh.file.read.mem.pabheader
0131                                                   ; Skip callback
0132 6168 0694  24         bl    *tmp0                 ; Run callback function
0133                       ;------------------------------------------------------
0134                       ; Copy PAB header to VDP
0135                       ;------------------------------------------------------
0136               fh.file.read.mem.pabheader:
0137 616A 0204  20         li    tmp0,fh.vpab          ; VDP destination
     616C 3900     
0138 616E C160  34         mov   @fh.pabtpl.ptr,tmp1   ; PAB header source address
     6170 A466     
0139 6172 0206  20         li    tmp2,9                ; 9 bytes to copy
     6174 0009     
0140               
0141 6176 06A0  32         bl    @xpym2v               ; Copy CPU memory to VDP memory
     6178 248C     
0142                                                   ; \ i  tmp0 = VDP destination
0143                                                   ; | i  tmp1 = CPU source
0144                                                   ; / i  tmp2 = Number of bytes to copy
0145                       ;------------------------------------------------------
0146                       ; Append file descriptor to PAB header in VDP
0147                       ;------------------------------------------------------
0148 617A 0204  20         li    tmp0,fh.vpab + 9      ; VDP destination
     617C 3909     
0149 617E C160  34         mov   @fh.fname.ptr,tmp1    ; Get pointer to file descriptor
     6180 A444     
0150 6182 D195  26         movb  *tmp1,tmp2            ; Get file descriptor length
0151 6184 0986  32         srl   tmp2,8                ; Right justify
0152 6186 0586  14         inc   tmp2                  ; Include length byte as well
0153               
0154 6188 06A0  32         bl    @xpym2v               ; Copy CPU memory to VDP memory
     618A 248C     
0155                                                   ; \ i  tmp0 = VDP destination
0156                                                   ; | i  tmp1 = CPU source
0157                                                   ; / i  tmp2 = Number of bytes to copy
0158                       ;------------------------------------------------------
0159                       ; Open file
0160                       ;------------------------------------------------------
0161 618C 0200  20         li    r0,fh.vpab            ; Address of PAB in VRAM
     618E 3900     
0162 6190 C060  34         mov   @fh.ftype.init,r1     ; File type/mode (in LSB)
     6192 A45A     
0163               
0164 6194 06A0  32         bl    @xfile.open           ; Open file (register version)
     6196 2D10     
0165                                                   ; \ i  r0 = Address of PAB in VRAM
0166                                                   ; / i  r1 = File type/mode (in lSB)
0167               
0168 6198 21A0  32         coc   @wbit2,tmp2           ; Equal bit set?
     619A 201C     
0169 619C 1602  14         jne   fh.file.read.mem.record
0170 619E 0460  28         b     @fh.file.read.mem.error
     61A0 61F2     
0171                                                   ; Yes, IO error occured
0172                       ;------------------------------------------------------
0173                       ; Step 2: Read file record
0174                       ;------------------------------------------------------
0175               fh.file.read.mem.record:
0176 61A2 05A0  34         inc   @fh.records           ; Update counter
     61A4 A43C     
0177 61A6 04E0  34         clr   @fh.reclen            ; Reset record length
     61A8 A43E     
0178                       ;------------------------------------------------------
0179                       ; 2b: Read file record
0180                       ;------------------------------------------------------
0181 61AA 06A0  32 !       bl    @file.record.read     ; Read file record
     61AC 2D3C     
0182 61AE 3900                   data fh.vpab          ; \ i  p0 file  = Address of PAB in VDP RAM
0183                                                   ; |           (without +9 offset!)
0184                                                   ; | o  tmp0 = Status byte
0185                                                   ; | o  tmp1 = Bytes read
0186                                                   ; | o  tmp2 = Status register contents
0187                                                   ; /           upon DSRLNK return
0188               
0189 61B0 C804  38         mov   tmp0,@fh.pabstat      ; Save VDP PAB status byte
     61B2 A438     
0190 61B4 C805  38         mov   tmp1,@fh.reclen       ; Save bytes read
     61B6 A43E     
0191 61B8 C806  38         mov   tmp2,@fh.ioresult     ; Save status register contents
     61BA A43A     
0192                       ;------------------------------------------------------
0193                       ; 2d: Check if a file error occured
0194                       ;------------------------------------------------------
0195               fh.file.read.mem.check_fioerr:
0196 61BC C1A0  34         mov   @fh.ioresult,tmp2
     61BE A43A     
0197 61C0 21A0  32         coc   @wbit2,tmp2           ; IO error occured?
     61C2 201C     
0198 61C4 1602  14         jne   fh.file.read.mem.process
0199                                                   ; No, goto (3)
0200 61C6 0460  28         b     @fh.file.read.mem.error
     61C8 61F2     
0201                                                   ; Yes, so handle file error
0202                       ;------------------------------------------------------
0203                       ; 3: Process record/line
0204                       ;------------------------------------------------------
0205               fh.file.read.mem.process:
0206 61CA 0204  20         li    tmp0,fh.vrecbuf       ; VDP source address
     61CC 3800     
0207 61CE C160  34         mov   @fh.ram.ptr,tmp1      ; RAM target address
     61D0 A45C     
0208 61D2 C1A0  34         mov   @fh.reclen,tmp2       ; Number of bytes to copy
     61D4 A43E     
0209                       ;------------------------------------------------------
0210                       ; 3a: Set length of line in CPU editor buffer
0211                       ;------------------------------------------------------
0212 61D6 04D5  26         clr   *tmp1                 ; Clear word before string
0213 61D8 0585  14         inc   tmp1                  ; Adjust position for length byte string
0214 61DA DD60  48         movb  @fh.reclen+1,*tmp1+   ; Put line length byte before string
     61DC A43F     
0215               
0216                       ;------------------------------------------------------
0217                       ; 3b: Copy line from VDP to CPU editor buffer
0218                       ;------------------------------------------------------
0219               fh.file.read.mem.vdp2cpu:
0220                       ;
0221                       ; Executed for devices that need their disk buffer in VDP memory
0222                       ; (TI Disk Controller, tipi, nanopeb, ...).
0223                       ;
0224 61DE 06A0  32         bl    @xpyv2m               ; Copy memory block from VDP to CPU
     61E0 24BE     
0225                                                   ; \ i  tmp0 = VDP source address
0226                                                   ; | i  tmp1 = RAM target address
0227                                                   ; / i  tmp2 = Bytes to copy
0228                       ;------------------------------------------------------
0229                       ; Step 5: Callback "Read line from file"
0230                       ;------------------------------------------------------
0231               fh.file.read.mem.display:
0232 61E2 C120  34         mov   @fh.callback2,tmp0    ; Get pointer to callback
     61E4 A452     
0233 61E6 1301  14         jeq   fh.file.read.mem.next ; Skip callback
0234 61E8 0694  24         bl    *tmp0                 ; Run callback function
0235                       ;------------------------------------------------------
0236                       ; 5a: Prepare for next record
0237                       ;------------------------------------------------------
0238               fh.file.read.mem.next:
0239 61EA 05A0  34         inc   @fh.line              ; lines++
     61EC A45E     
0240                       ;------------------------------------------------------
0241                       ; 5c: Next record
0242                       ;------------------------------------------------------
0243               fh.file.read.mem.next.do_it:
0244 61EE 0460  28         b     @fh.file.read.mem.record
     61F0 61A2     
0245                                                   ; Next record
0246                       ;------------------------------------------------------
0247                       ; Error handler
0248                       ;------------------------------------------------------
0249               fh.file.read.mem.error:
0250 61F2 C120  34         mov   @fh.pabstat,tmp0      ; Get VDP PAB status byte
     61F4 A438     
0251 61F6 0984  32         srl   tmp0,8                ; Right align VDP PAB 1 status byte
0252 61F8 0284  22         ci    tmp0,io.err.eof       ; EOF reached ?
     61FA 0005     
0253 61FC 1308  14         jeq   fh.file.read.mem.eof  ; All good. File closed by DSRLNK
0254                       ;------------------------------------------------------
0255                       ; File error occured
0256                       ;------------------------------------------------------
0257 61FE 06A0  32         bl    @file.close           ; Close file
     6200 2D30     
0258 6202 3900                   data fh.vpab          ; \ i  p0 = Address of PAB in VRAM
0259                                                   ; /
0260                       ;------------------------------------------------------
0261                       ; Callback "File I/O error"
0262                       ;------------------------------------------------------
0263 6204 C120  34         mov   @fh.callback4,tmp0    ; Get pointer to Callback "File I/O error"
     6206 A456     
0264 6208 1309  14         jeq   fh.file.read.mem.exit ; Skip callback
0265 620A 0694  24         bl    *tmp0                 ; Run callback function
0266 620C 1007  14         jmp   fh.file.read.mem.exit
0267                       ;------------------------------------------------------
0268                       ; End-Of-File reached
0269                       ;------------------------------------------------------
0270               fh.file.read.mem.eof:
0271 620E 06A0  32         bl    @file.close           ; Close file
     6210 2D30     
0272 6212 3900                   data fh.vpab          ; \ i  p0 = Address of PAB in VRAM
0273                                                   ; /
0274                       ;------------------------------------------------------
0275                       ; Callback "Close file"
0276                       ;------------------------------------------------------
0277               fh.file.read.mem.eof.callback:
0278 6214 C120  34         mov   @fh.callback3,tmp0    ; Get pointer to Callback "Close file"
     6216 A454     
0279 6218 1301  14         jeq   fh.file.read.mem.exit ; Skip callback
0280 621A 0694  24         bl    *tmp0                 ; Run callback function
0281               *--------------------------------------------------------------
0282               * Exit
0283               *--------------------------------------------------------------
0284               fh.file.read.mem.exit:
0285 621C 04E0  34         clr   @fh.fopmode           ; Set FOP mode to idle operation
     621E A44A     
0286               
0287 6220 06A0  32         bl    @film
     6222 2236     
0288 6224 83A0                   data >83a0,>00,96     ; Clear any garbage left-over by DSR calls.
     6226 0000     
     6228 0060     
0289               
0290 622A C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0291 622C C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0292 622E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0293 6230 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0294 6232 C2F9  30         mov   *stack+,r11           ; Pop R11
0295 6234 045B  20         b     *r11                  ; Return to caller
                   < stevie_b2.asm
0076                       copy  "fh.read.edb.asm"     ; Read file to editor buffer
     **** ****     > fh.read.edb.asm
0001               * FILE......: fh.read.edb.asm
0002               * Purpose...: File reader module
0003               
0004               ***************************************************************
0005               * fh.file.read.edb
0006               * Read or insert file into editor buffer
0007               ***************************************************************
0008               *  bl   @fh.file.read.edb
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * parm1 = Pointer to length-prefixed filename descriptor
0012               * parm2 = Pointer to callback function "Before Open file"
0013               * parm3 = Pointer to callback function "Read line from file"
0014               * parm4 = Pointer to callback function "Close file"
0015               * parm5 = Pointer to callback function "File I/O error"
0016               * parm6 = Pointer to callback function "Memory full"
0017               * parm7 = Line number to insert file at or >FFFF if new file.
0018               * parm8 = Work mode
0019               *
0020               * Callbacks can be skipped by passing >0000 as pointer.
0021               *--------------------------------------------------------------
0022               * OUTPUT
0023               * none
0024               *--------------------------------------------------------------
0025               * Register usage
0026               * tmp0, tmp1, tmp2, tmp3
0027               *--------------------------------------------------------------
0028               * Remarks
0029               * @fh.temp1 =  >ffff if loading new file into editor buffer
0030               *              >0000 if inserting file at line in editor buffer
0031               ********|*****|*********************|**************************
0032               fh.file.read.edb:
0033 6236 0649  14         dect  stack
0034 6238 C64B  30         mov   r11,*stack            ; Save return address
0035 623A 0649  14         dect  stack
0036 623C C644  30         mov   tmp0,*stack           ; Push tmp0
0037 623E 0649  14         dect  stack
0038 6240 C645  30         mov   tmp1,*stack           ; Push tmp1
0039 6242 0649  14         dect  stack
0040 6244 C646  30         mov   tmp2,*stack           ; Push tmp2
0041 6246 0649  14         dect  stack
0042 6248 C647  30         mov   tmp3,*stack           ; Push tmp3
0043               
0044 624A 0649  14         dect  stack
0045 624C C660  46         mov   @fh.offsetopcode,*stack
     624E A44E     
0046                                                   ; Push FastMode IO status
0047                       ;------------------------------------------------------
0048                       ; Initialisation
0049                       ;------------------------------------------------------
0050 6250 04E0  34         clr   @fh.records           ; Reset records counter
     6252 A43C     
0051 6254 04E0  34         clr   @fh.counter           ; Clear internal counter
     6256 A442     
0052 6258 04E0  34         clr   @fh.pabstat           ; Clear copy of VDP PAB status byte
     625A A438     
0053 625C 04E0  34         clr   @fh.ioresult          ; Clear status register contents
     625E A43A     
0054               
0055 6260 C120  34         mov   @edb.top.ptr,tmp0
     6262 A500     
0056 6264 06A0  32         bl    @xsams.page.get       ; Get SAMS page
     6266 253E     
0057                                                   ; \ i  tmp0  = Memory address
0058                                                   ; | o  waux1 = SAMS page number
0059                                                   ; / o  waux2 = Address of SAMS register
0060               
0061 6268 C120  34         mov   @edb.sams.hipage,tmp0 ; \
     626A A51A     
0062 626C C804  38         mov   tmp0,@fh.sams.hipage  ; | Set current SAMS page to highest page
     626E A448     
0063                                                   ; / used by Editor Buffer
0064               
0065 6270 C804  38         mov   tmp0,@tv.sams.c000    ; Sync SAMS window. Important!
     6272 A208     
0066               
0067 6274 C160  34         mov   @edb.top.ptr,tmp1
     6276 A500     
0068 6278 06A0  32         bl    @xsams.page.set       ; Set SAMS page
     627A 2576     
0069                                                   ; \ i  tmp0 = SAMS page number
0070                                                   ; / i  tmp1 = Memory address
0071                       ;------------------------------------------------------
0072                       ; Save parameters / callback functions
0073                       ;------------------------------------------------------
0074 627C 0204  20         li    tmp0,fh.fopmode.readfile
     627E 0001     
0075                                                   ; We are going to read a file
0076 6280 C804  38         mov   tmp0,@fh.fopmode      ; Set file operations mode
     6282 A44A     
0077               
0078 6284 C820  54         mov   @parm1,@fh.fname.ptr  ; Pointer to file descriptor
     6286 A006     
     6288 A444     
0079 628A C820  54         mov   @parm2,@fh.callback1  ; Callback function "Open file"
     628C A008     
     628E A450     
0080 6290 C820  54         mov   @parm3,@fh.callback2  ; Callback function "Read line from file"
     6292 A00A     
     6294 A452     
0081 6296 C820  54         mov   @parm4,@fh.callback3  ; Callback function "Close file"
     6298 A00C     
     629A A454     
0082 629C C820  54         mov   @parm5,@fh.callback4  ; Callback function "File I/O error"
     629E A00E     
     62A0 A456     
0083 62A2 C820  54         mov   @parm6,@fh.callback5  ; Callback function "Memory full error"
     62A4 A010     
     62A6 A458     
0084 62A8 C820  54         mov   @parm8,@fh.workmode   ; Work mode (used in callbacks)
     62AA A014     
     62AC A45A     
0085                       ;------------------------------------------------------
0086                       ; Determine if inserting file or loading new file
0087                       ;------------------------------------------------------
0088 62AE C120  34         mov   @parm7,tmp0
     62B0 A012     
0089 62B2 0284  22         ci    tmp0,>ffff            ; Load file?
     62B4 FFFF     
0090 62B6 1309  14         jeq   fh.file.read.edb.newfile
0091               
0092 62B8 04E0  34         clr   @fh.temp1             ; Set flag "insert file"
     62BA A460     
0093 62BC 04E0  34         clr   @fh.temp2             ; Not used
     62BE A462     
0094 62C0 04E0  34         clr   @fh.temp3             ; Not used
     62C2 A464     
0095               
0096 62C4 C804  38         mov   tmp0,@fh.line         ; Line to insert file at
     62C6 A45E     
0097 62C8 1008  14         jmp   fh.file.read.edb.assert1
0098                       ;------------------------------------------------------
0099                       ; Loading new file into editor buffer
0100                       ;------------------------------------------------------
0101               fh.file.read.edb.newfile:
0102 62CA 04E0  34         clr   @fh.line              ; New file
     62CC A45E     
0103 62CE 0720  34         seto  @fh.temp1             ; Set flag "load file"
     62D0 A460     
0104 62D2 04E0  34         clr   @fh.temp2             ; Not used
     62D4 A462     
0105 62D6 04E0  34         clr   @fh.temp3             ; Not used
     62D8 A464     
0106                       ;------------------------------------------------------
0107                       ; Asserts
0108                       ;------------------------------------------------------
0109               fh.file.read.edb.assert1:
0110 62DA C120  34         mov   @fh.callback1,tmp0
     62DC A450     
0111 62DE 1306  14         jeq   fh.file.read.edb.assert2
0112 62E0 0284  22         ci    tmp0,>6000            ; Insane address ?
     62E2 6000     
0113 62E4 1128  14         jlt   fh.file.read.crash    ; Yes, crash!
0114 62E6 0284  22         ci    tmp0,>7fff            ; Insane address ?
     62E8 7FFF     
0115 62EA 1525  14         jgt   fh.file.read.crash    ; Yes, crash!
0116               
0117               fh.file.read.edb.assert2
0118 62EC C120  34         mov   @fh.callback2,tmp0
     62EE A452     
0119 62F0 1306  14         jeq   fh.file.read.edb.assert3
0120 62F2 0284  22         ci    tmp0,>6000            ; Insane address ?
     62F4 6000     
0121 62F6 111F  14         jlt   fh.file.read.crash    ; Yes, crash!
0122 62F8 0284  22         ci    tmp0,>7fff            ; Insane address ?
     62FA 7FFF     
0123 62FC 151C  14         jgt   fh.file.read.crash    ; Yes, crash!
0124               
0125               fh.file.read.edb.assert3:
0126 62FE C120  34         mov   @fh.callback3,tmp0
     6300 A454     
0127 6302 1306  14         jeq   fh.file.read.edb.assert4
0128 6304 0284  22         ci    tmp0,>6000            ; Insane address ?
     6306 6000     
0129 6308 1116  14         jlt   fh.file.read.crash    ; Yes, crash!
0130 630A 0284  22         ci    tmp0,>7fff            ; Insane address ?
     630C 7FFF     
0131 630E 1513  14         jgt   fh.file.read.crash    ; Yes, crash!
0132               
0133               fh.file.read.edb.assert4:
0134 6310 C120  34         mov   @fh.callback4,tmp0
     6312 A456     
0135 6314 1306  14         jeq   fh.file.read.edb.assert5
0136               
0137 6316 0284  22         ci    tmp0,>6000            ; Insane address ?
     6318 6000     
0138 631A 110D  14         jlt   fh.file.read.crash    ; Yes, crash!
0139 631C 0284  22         ci    tmp0,>7fff            ; Insane address ?
     631E 7FFF     
0140 6320 150A  14         jgt   fh.file.read.crash    ; Yes, crash!
0141               
0142               fh.file.read.edb.assert5:
0143 6322 C120  34         mov   @fh.callback5,tmp0
     6324 A458     
0144 6326 130B  14         jeq   fh.file.read.edb.load1
0145               
0146 6328 0284  22         ci    tmp0,>6000            ; Insane address ?
     632A 6000     
0147 632C 1104  14         jlt   fh.file.read.crash    ; Yes, crash!
0148 632E 0284  22         ci    tmp0,>7fff            ; Insane address ?
     6330 7FFF     
0149 6332 1501  14         jgt   fh.file.read.crash    ; Yes, crash!
0150               
0151 6334 1004  14         jmp   fh.file.read.edb.load1
0152                                                   ; All checks passed, continue
0153                       ;------------------------------------------------------
0154                       ; Check failed, crash CPU!
0155                       ;------------------------------------------------------
0156               fh.file.read.crash:
0157 6336 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     6338 FFCE     
0158 633A 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     633C 2026     
0159                       ;------------------------------------------------------
0160                       ; Callback "Before Open file"
0161                       ;------------------------------------------------------
0162               fh.file.read.edb.load1:
0163 633E C120  34         mov   @fh.callback1,tmp0
     6340 A450     
0164 6342 1301  14         jeq   fh.file.read.edb.pabheader
0165                                                   ; Skip callback
0166 6344 0694  24         bl    *tmp0                 ; Run callback function
0167                       ;------------------------------------------------------
0168                       ; Copy PAB header to VDP
0169                       ;------------------------------------------------------
0170               fh.file.read.edb.pabheader:
0171 6346 06A0  32         bl    @cpym2v
     6348 2486     
0172 634A 3900                   data fh.vpab,fh.file.pab.header,9
     634C 6CBC     
     634E 0009     
0173                                                   ; Copy PAB header to VDP
0174                       ;------------------------------------------------------
0175                       ; Append file descriptor to PAB header in VDP
0176                       ;------------------------------------------------------
0177 6350 0204  20         li    tmp0,fh.vpab + 9      ; VDP destination
     6352 3909     
0178 6354 C160  34         mov   @fh.fname.ptr,tmp1    ; Get pointer to file descriptor
     6356 A444     
0179 6358 D195  26         movb  *tmp1,tmp2            ; Get file descriptor length
0180 635A 0986  32         srl   tmp2,8                ; Right justify
0181 635C 0586  14         inc   tmp2                  ; Include length byte as well
0182               
0183 635E 06A0  32         bl    @xpym2v               ; Copy CPU memory to VDP memory
     6360 248C     
0184                                                   ; \ i  tmp0 = VDP destination
0185                                                   ; | i  tmp1 = CPU source
0186                                                   ; / i  tmp2 = Number of bytes to copy
0187                       ;------------------------------------------------------
0188                       ; Open file
0189                       ;------------------------------------------------------
0190               fh.file.read.edb.open:
0191 6362 06A0  32         bl    @file.open            ; Open file
     6364 2D0C     
0192 6366 3900                   data fh.vpab          ; \ i  p0 = Address of PAB in VRAM
0193 6368 0014                   data io.seq.inp.dis.var
0194                                                   ; / i  p1 = File type/mode
0195               
0196 636A 21A0  32         coc   @wbit2,tmp2           ; Equal bit set?
     636C 201C     
0197 636E 1608  14         jne   fh.file.read.edb.check_setpage
0198                                                   ; No error, continue processing file (1a)
0199                       ;------------------------------------------------------
0200                       ; File error. Check FastMode IO on unsupported device
0201                       ;------------------------------------------------------
0202 6370 0760  38         abs   @fh.offsetopcode      ; FastMode IO on ?
     6372 A44E     
0203 6374 1303  14         jeq   fh.file.read.edb.err  ; Is off, do not retry open
0204 6376 04E0  34         clr   @fh.offsetopcode      ; Turn FastMode IO off
     6378 A44E     
0205                       ;------------------------------------------------------
0206                       ; File error while FastMode IO is on, retry
0207                       ;------------------------------------------------------
0208 637A 10F3  14         jmp   fh.file.read.edb.open ; Retry
0209                       ;------------------------------------------------------
0210                       ; Need to error out, no retry possible.
0211                       ;------------------------------------------------------
0212               fh.file.read.edb.err:
0213 637C 0460  28         b     @fh.file.read.edb.error
     637E 64C2     
0214                                                   ; IO error occured
0215                       ;------------------------------------------------------
0216                       ; 1a: Check if SAMS page needs to be increased
0217                       ;------------------------------------------------------
0218               fh.file.read.edb.check_setpage:
0219 6380 C120  34         mov   @edb.next_free.ptr,tmp0
     6382 A508     
0220                                                   ;--------------------------
0221                                                   ; Assert
0222                                                   ;--------------------------
0223 6384 0284  22         ci    tmp0,edb.top + edb.size
     6386 D000     
0224                                                   ; Insane address ?
0225 6388 15D6  14         jgt   fh.file.read.crash    ; Yes, crash!
0226                                                   ;--------------------------
0227                                                   ; Check for page overflow
0228                                                   ;--------------------------
0229 638A 0244  22         andi  tmp0,>0fff            ; Get rid of highest nibble
     638C 0FFF     
0230 638E 0224  22         ai    tmp0,82               ; Assume line of 80 chars (+2 bytes prefix)
     6390 0052     
0231 6392 0284  22         ci    tmp0,>1000 - 16       ; 4K boundary reached?
     6394 0FF0     
0232 6396 110E  14         jlt   fh.file.read.edb.record
0233                                                   ; Not yet so skip SAMS page switch
0234                       ;------------------------------------------------------
0235                       ; 1b: Increase SAMS page
0236                       ;------------------------------------------------------
0237 6398 05A0  34         inc   @fh.sams.hipage       ; Set highest SAMS page
     639A A448     
0238 639C C820  54         mov   @edb.top.ptr,@edb.next_free.ptr
     639E A500     
     63A0 A508     
0239                                                   ; Start at top of SAMS page again
0240                       ;------------------------------------------------------
0241                       ; 1c: Switch to SAMS page
0242                       ;------------------------------------------------------
0243 63A2 C120  34         mov   @fh.sams.hipage,tmp0
     63A4 A448     
0244 63A6 C160  34         mov   @edb.top.ptr,tmp1
     63A8 A500     
0245 63AA 06A0  32         bl    @xsams.page.set       ; Set SAMS page
     63AC 2576     
0246                                                   ; \ i  tmp0 = SAMS page number
0247                                                   ; / i  tmp1 = Memory address
0248               
0249 63AE C820  54         mov   @fh.sams.hipage,@tv.sams.c000
     63B0 A448     
     63B2 A208     
0250                                                   ; Sync SAMS window. Important!
0251                       ;------------------------------------------------------
0252                       ; 1d: Fill new SAMS page with garbage (debug only)
0253                       ;------------------------------------------------------
0254                       ; bl  @film
0255                       ;     data >c000,>99,4092
0256                       ;------------------------------------------------------
0257                       ; Step 2: Read file record
0258                       ;------------------------------------------------------
0259               fh.file.read.edb.record:
0260 63B4 05A0  34         inc   @fh.records           ; Update counter
     63B6 A43C     
0261 63B8 04E0  34         clr   @fh.reclen            ; Reset record length
     63BA A43E     
0262               
0263 63BC 0760  38         abs   @fh.offsetopcode
     63BE A44E     
0264 63C0 1310  14         jeq   !                     ; Skip CPU buffer logic if offset = 0
0265                       ;------------------------------------------------------
0266                       ; 2a: Write address of CPU buffer to VDP PAB bytes 2-3
0267                       ;------------------------------------------------------
0268 63C2 C160  34         mov   @edb.next_free.ptr,tmp1
     63C4 A508     
0269 63C6 05C5  14         inct  tmp1
0270 63C8 0204  20         li    tmp0,fh.vpab + 2
     63CA 3902     
0271               
0272 63CC 0264  22         ori   tmp0,>4000            ; Prepare VDP address for write
     63CE 4000     
0273 63D0 06C4  14         swpb  tmp0                  ; \
0274 63D2 D804  30         movb  tmp0,@vdpa            ; | Set VDP write address
     63D4 8C02     
0275 63D6 06C4  14         swpb  tmp0                  ; | inlined @vdwa call
0276 63D8 D804  30         movb  tmp0,@vdpa            ; /
     63DA 8C02     
0277               
0278 63DC D7C5  30         movb  tmp1,*r15             ; Write MSB
0279 63DE 06C5  14         swpb  tmp1
0280 63E0 D7C5  30         movb  tmp1,*r15             ; Write LSB
0281                       ;------------------------------------------------------
0282                       ; 2b: Read file record
0283                       ;------------------------------------------------------
0284 63E2 06A0  32 !       bl    @file.record.read     ; Read file record
     63E4 2D3C     
0285 63E6 3900                   data fh.vpab          ; \ i  p0   = Address of PAB in VDP RAM
0286                                                   ; |           (without +9 offset!)
0287                                                   ; | o  tmp0 = Status byte
0288                                                   ; | o  tmp1 = Bytes read
0289                                                   ; | o  tmp2 = Status register contents
0290                                                   ; /           upon DSRLNK return
0291               
0292 63E8 C804  38         mov   tmp0,@fh.pabstat      ; Save VDP PAB status byte
     63EA A438     
0293 63EC C805  38         mov   tmp1,@fh.reclen       ; Save bytes read
     63EE A43E     
0294 63F0 C806  38         mov   tmp2,@fh.ioresult     ; Save status register contents
     63F2 A43A     
0295                       ;------------------------------------------------------
0296                       ; 2c: Calculate kilobytes processed
0297                       ;------------------------------------------------------
0298 63F4 A805  38         a     tmp1,@fh.counter      ; Add record length to counter
     63F6 A442     
0299 63F8 C160  34         mov   @fh.counter,tmp1      ;
     63FA A442     
0300 63FC 0285  22         ci    tmp1,1024             ; 1 KB boundary reached ?
     63FE 0400     
0301 6400 1106  14         jlt   fh.file.read.edb.check_fioerr
0302                                                   ; Not yet, goto (2d)
0303 6402 05A0  34         inc   @fh.kilobytes
     6404 A440     
0304 6406 0225  22         ai    tmp1,-1024            ; Remove KB portion, only keep bytes
     6408 FC00     
0305 640A C805  38         mov   tmp1,@fh.counter      ; Update counter
     640C A442     
0306                       ;------------------------------------------------------
0307                       ; 2d: Check if a file error occured
0308                       ;------------------------------------------------------
0309               fh.file.read.edb.check_fioerr:
0310 640E C1A0  34         mov   @fh.ioresult,tmp2
     6410 A43A     
0311 6412 21A0  32         coc   @wbit2,tmp2           ; IO error occured?
     6414 201C     
0312 6416 1602  14         jne   fh.file.read.edb.insertline
0313                                                   ; No, goto (2e)
0314 6418 0460  28         b     @fh.file.read.edb.error
     641A 64C2     
0315                                                   ; Yes, so handle file error
0316                       ;------------------------------------------------------
0317                       ; 2e: Check if we need to insert index entry
0318                       ;------------------------------------------------------
0319               fh.file.read.edb.insertline:
0320 641C C120  34         mov   @fh.temp1,tmp0        ; \ Is flag "new file" set?
     641E A460     
0321 6420 0284  22         ci    tmp0,>ffff            ; /
     6422 FFFF     
0322 6424 1308  14         jeq   fh.file.read.edb.process_line
0323                                                   ; Flag is set, so just load file
0324                       ;------------------------------------------------------
0325                       ; 2f: Insert new index entry (index reorg)
0326                       ;------------------------------------------------------
0327 6426 C820  54         mov   @fh.line,@parm1
     6428 A45E     
     642A A006     
0328 642C C820  54         mov   @edb.lines,@parm2
     642E A504     
     6430 A008     
0329 6432 06A0  32         bl    @idx.entry.insert     ; Reorganize index
     6434 35F4     
0330                                                   ; \ i  parm1 = Line for insert
0331                                                   ; / i  parm2 = Last line to reorg
0332                       ;------------------------------------------------------
0333                       ; Step 3: Process line
0334                       ;------------------------------------------------------
0335               fh.file.read.edb.process_line:
0336 6436 0204  20         li    tmp0,fh.vrecbuf       ; VDP source address
     6438 3800     
0337 643A C160  34         mov   @edb.next_free.ptr,tmp1
     643C A508     
0338                                                   ; RAM target in editor buffer
0339               
0340 643E C805  38         mov   tmp1,@parm2           ; Needed in step 4b (index update)
     6440 A008     
0341               
0342 6442 C1A0  34         mov   @fh.reclen,tmp2       ; Number of bytes to copy
     6444 A43E     
0343 6446 131B  14         jeq   fh.file.read.edb.prepindex.emptyline
0344                                                   ; Handle empty line
0345                       ;------------------------------------------------------
0346                       ; 3a: Set length of line in CPU editor buffer
0347                       ;------------------------------------------------------
0348 6448 04D5  26         clr   *tmp1                 ; Clear word before string
0349 644A 0585  14         inc   tmp1                  ; Adjust position for length byte string
0350 644C DD60  48         movb  @fh.reclen+1,*tmp1+   ; Put line length byte before string
     644E A43F     
0351               
0352 6450 05E0  34         inct  @edb.next_free.ptr    ; Keep pointer synced with tmp1
     6452 A508     
0353 6454 A806  38         a     tmp2,@edb.next_free.ptr
     6456 A508     
0354                                                   ; Add line length
0355               
0356 6458 0760  38         abs   @fh.offsetopcode      ; Use CPU buffer if offset > 0
     645A A44E     
0357 645C 1602  14         jne   fh.file.read.edb.preppointer
0358                       ;------------------------------------------------------
0359                       ; 3b: Copy line from VDP to CPU editor buffer
0360                       ;------------------------------------------------------
0361               fh.file.read.edb.vdp2cpu:
0362                       ;
0363                       ; Executed for devices that need their disk buffer in VDP memory
0364                       ; (TI Disk Controller, tipi, nanopeb, ...).
0365                       ;
0366 645E 06A0  32         bl    @xpyv2m               ; Copy memory block from VDP to CPU
     6460 24BE     
0367                                                   ; \ i  tmp0 = VDP source address
0368                                                   ; | i  tmp1 = RAM target address
0369                                                   ; / i  tmp2 = Bytes to copy
0370                       ;------------------------------------------------------
0371                       ; 3c: Align pointer for next line
0372                       ;------------------------------------------------------
0373               fh.file.read.edb.preppointer:
0374 6462 C120  34         mov   @edb.next_free.ptr,tmp0  ; \ Round up to next multiple of 16.
     6464 A508     
0375 6466 0504  14         neg   tmp0                     ; | tmp0 = tmp0 + (-tmp0 & 15)
0376 6468 0244  22         andi  tmp0,15                  ; | Hacker's Delight 2nd Edition
     646A 000F     
0377 646C A804  38         a     tmp0,@edb.next_free.ptr  ; / Chapter 2
     646E A508     
0378                       ;------------------------------------------------------
0379                       ; Step 4: Update index
0380                       ;------------------------------------------------------
0381               fh.file.read.edb.prepindex:
0382 6470 C820  54         mov   @fh.line,@parm1       ; parm1 = Line number
     6472 A45E     
     6474 A006     
0383                                                   ; parm2 = Must allready be set!
0384 6476 C820  54         mov   @fh.sams.hipage,@parm3
     6478 A448     
     647A A00A     
0385                                                   ; parm3 = SAMS page number
0386               
0387 647C 1007  14         jmp   fh.file.read.edb.updindex
0388                                                   ; Update index
0389                       ;------------------------------------------------------
0390                       ; 4a: Special handling for empty line
0391                       ;------------------------------------------------------
0392               fh.file.read.edb.prepindex.emptyline:
0393 647E C820  54         mov   @fh.line,@parm1       ; parm1 = Line number
     6480 A45E     
     6482 A006     
0394 6484 04E0  34         clr   @parm2                ; parm2 = Pointer to >0000
     6486 A008     
0395 6488 0720  34         seto  @parm3                ; parm3 = SAMS not used >FFFF
     648A A00A     
0396                       ;------------------------------------------------------
0397                       ; 4b: Do actual index update
0398                       ;------------------------------------------------------
0399               fh.file.read.edb.updindex:
0400 648C 06A0  32         bl    @idx.entry.update     ; Update index
     648E 34A4     
0401                                                   ; \ i  parm1    = Line num in editor buffer
0402                                                   ; | i  parm2    = Pointer to line in EB
0403                                                   ; | i  parm3    = SAMS page
0404                                                   ; | o  outparm1 = Pointer to updated index
0405                                                   ; /               entry
0406                       ;------------------------------------------------------
0407                       ; Step 5: Callback "Read line from file"
0408                       ;------------------------------------------------------
0409               fh.file.read.edb.display:
0410 6490 C120  34         mov   @fh.callback2,tmp0    ; Get pointer to Callback
     6492 A452     
0411                                                   ;   "Read line from file"
0412 6494 1301  14         jeq   fh.file.read.edb.next
0413                                                   ; Skip callback
0414 6496 0694  24         bl    *tmp0                 ; Run callback function
0415                       ;------------------------------------------------------
0416                       ; 5a: Prepare for next record
0417                       ;------------------------------------------------------
0418               fh.file.read.edb.next:
0419 6498 05A0  34         inc   @fh.line              ; lines++
     649A A45E     
0420 649C 05A0  34         inc   @edb.lines            ; total lines++
     649E A504     
0421               
0422 64A0 C120  34         mov   @edb.lines,tmp0
     64A2 A504     
0423 64A4 0284  22         ci    tmp0,10200            ; Maximum line in index reached?
     64A6 27D8     
0424 64A8 120A  14         jle   fh.file.read.edb.next.do_it
0425                                                   ; Not yet, next record
0426                       ;------------------------------------------------------
0427                       ; 5b: Index memory full. Close file and exit
0428                       ;------------------------------------------------------
0429 64AA 06A0  32         bl    @file.close           ; Close file
     64AC 2D30     
0430 64AE 3900                   data fh.vpab          ; \ i  p0 = Address of PAB in VRAM
0431                                                   ; /
0432               
0433 64B0 06A0  32         bl    @mem.sams.setup.stevie
     64B2 6D44     
0434                                                   ; Restore SAMS windows
0435                       ;------------------------------------------------------
0436                       ; Callback "Memory full error"
0437                       ;------------------------------------------------------
0438 64B4 C120  34         mov   @fh.callback5,tmp0    ; Get pointer to Callback "File I/O error"
     64B6 A458     
0439 64B8 1324  14         jeq   fh.file.read.edb.exit ; Skip callback
0440 64BA 0694  24         bl    *tmp0                 ; Run callback function
0441 64BC 1022  14         jmp   fh.file.read.edb.exit
0442                       ;------------------------------------------------------
0443                       ; 5c: Next record
0444                       ;------------------------------------------------------
0445               fh.file.read.edb.next.do_it:
0446 64BE 0460  28         b     @fh.file.read.edb.check_setpage
     64C0 6380     
0447                                                   ; Next record
0448                       ;------------------------------------------------------
0449                       ; Error handler
0450                       ;------------------------------------------------------
0451               fh.file.read.edb.error:
0452 64C2 C120  34         mov   @fh.pabstat,tmp0      ; Get VDP PAB status byte
     64C4 A438     
0453 64C6 0984  32         srl   tmp0,8                ; Right align VDP PAB 1 status byte
0454 64C8 0284  22         ci    tmp0,io.err.eof       ; EOF reached ?
     64CA 0005     
0455 64CC 130A  14         jeq   fh.file.read.edb.eof  ; All good. File closed by DSRLNK
0456                       ;------------------------------------------------------
0457                       ; File error occured
0458                       ;------------------------------------------------------
0459 64CE 06A0  32         bl    @file.close           ; Close file
     64D0 2D30     
0460 64D2 3900                   data fh.vpab          ; \ i  p0 = Address of PAB in VRAM
0461                                                   ; /
0462               
0463 64D4 06A0  32         bl    @mem.sams.setup.stevie
     64D6 6D44     
0464                                                   ; Restore SAMS windows
0465                       ;------------------------------------------------------
0466                       ; Callback "File I/O error"
0467                       ;------------------------------------------------------
0468 64D8 C120  34         mov   @fh.callback4,tmp0    ; Get pointer to Callback "File I/O error"
     64DA A456     
0469 64DC 1312  14         jeq   fh.file.read.edb.exit ; Skip callback
0470 64DE 0694  24         bl    *tmp0                 ; Run callback function
0471 64E0 1010  14         jmp   fh.file.read.edb.exit
0472                       ;------------------------------------------------------
0473                       ; End-Of-File reached
0474                       ;------------------------------------------------------
0475               fh.file.read.edb.eof:
0476 64E2 06A0  32         bl    @file.close           ; Close file
     64E4 2D30     
0477 64E6 3900                   data fh.vpab          ; \ i  p0 = Address of PAB in VRAM
0478                                                   ; /
0479               
0480 64E8 06A0  32         bl    @mem.sams.setup.stevie
     64EA 6D44     
0481                                                   ; Restore SAMS windows
0482                       ;------------------------------------------------------
0483                       ; Callback "Close file"
0484                       ;------------------------------------------------------
0485 64EC C120  34         mov   @fh.temp1,tmp0        ; Insert file or load file?
     64EE A460     
0486 64F0 0284  22         ci    tmp0,>ffff
     64F2 FFFF     
0487 64F4 1602  14         jne   fh.file.read.edb.eof.callback
0488                                                   ; Insert file, skip to callback
0489 64F6 0620  34         dec   @edb.lines            ; Load file, one-time adjustment
     64F8 A504     
0490               
0491               fh.file.read.edb.eof.callback:
0492 64FA C120  34         mov   @fh.callback3,tmp0    ; Get pointer to Callback "Close file"
     64FC A454     
0493 64FE 1301  14         jeq   fh.file.read.edb.exit ; Skip callback
0494 6500 0694  24         bl    *tmp0                 ; Run callback function
0495               *--------------------------------------------------------------
0496               * Exit
0497               *--------------------------------------------------------------
0498               fh.file.read.edb.exit:
0499 6502 C820  54         mov   @fh.sams.hipage,@edb.sams.hipage
     6504 A448     
     6506 A51A     
0500                                                   ; Set highest SAMS page in use
0501 6508 04E0  34         clr   @fh.fopmode           ; Set FOP mode to idle operation
     650A A44A     
0502               
0503 650C 06A0  32         bl    @film
     650E 2236     
0504 6510 83A0                   data >83a0,>00,96     ; Clear any garbage left-over by DSR calls.
     6512 0000     
     6514 0060     
0505               
0506               
0507 6516 C839  50         mov   *stack+,@fh.offsetopcode
     6518 A44E     
0508                                                   ; Pop @fh.offsetopcode
0509 651A C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0510 651C C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0511 651E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0512 6520 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0513 6522 C2F9  30         mov   *stack+,r11           ; Pop R11
0514 6524 045B  20         b     *r11                  ; Return to caller
                   < stevie_b2.asm
0077                       copy  "fh.write.edb.asm"    ; Write editor buffer to file
     **** ****     > fh.write.edb.asm
0001               * FILE......: fh.write.edb.asm
0002               * Purpose...: File write module
0003               
0004               ***************************************************************
0005               * fh.file.write.edb
0006               * Write editor buffer to file
0007               ***************************************************************
0008               *  bl   @fh.file.write.edb
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * parm1 = Pointer to length-prefixed file descriptor
0012               * parm2 = Pointer to callback function "Before Open file"
0013               * parm3 = Pointer to callback function "Write line to file"
0014               * parm4 = Pointer to callback function "Close file"
0015               * parm5 = Pointer to callback function "File I/O error"
0016               * parm6 = First line to save (base 0)
0017               * parm7 = Last line to save  (base 0)
0018               * parm8 = Work mode
0019               *--------------------------------------------------------------
0020               * OUTPUT
0021               *--------------------------------------------------------------
0022               * Register usage
0023               * tmp0, tmp1, tmp2
0024               ********|*****|*********************|**************************
0025               fh.file.write.edb:
0026 6526 0649  14         dect  stack
0027 6528 C64B  30         mov   r11,*stack            ; Save return address
0028 652A 0649  14         dect  stack
0029 652C C644  30         mov   tmp0,*stack           ; Push tmp0
0030 652E 0649  14         dect  stack
0031 6530 C645  30         mov   tmp1,*stack           ; Push tmp1
0032 6532 0649  14         dect  stack
0033 6534 C646  30         mov   tmp2,*stack           ; Push tmp2
0034                       ;------------------------------------------------------
0035                       ; Initialisation
0036                       ;------------------------------------------------------
0037 6536 04E0  34         clr   @fh.counter           ; Clear internal counter
     6538 A442     
0038 653A 04E0  34         clr   @fh.kilobytes         ; \ Clear kilobytes processed
     653C A440     
0039 653E 04E0  34         clr   @fh.kilobytes.prev    ; /
     6540 A45C     
0040 6542 04E0  34         clr   @fh.pabstat           ; Clear copy of VDP PAB status byte
     6544 A438     
0041 6546 04E0  34         clr   @fh.ioresult          ; Clear status register contents
     6548 A43A     
0042                       ;------------------------------------------------------
0043                       ; Save parameters / callback functions
0044                       ;------------------------------------------------------
0045 654A 0204  20         li    tmp0,fh.fopmode.writefile
     654C 0002     
0046                                                   ; We are going to write to a file
0047 654E C804  38         mov   tmp0,@fh.fopmode      ; Set file operations mode
     6550 A44A     
0048               
0049 6552 C820  54         mov   @parm1,@fh.fname.ptr  ; Pointer to file descriptor
     6554 A006     
     6556 A444     
0050 6558 C820  54         mov   @parm2,@fh.callback1  ; Callback function "Open file"
     655A A008     
     655C A450     
0051 655E C820  54         mov   @parm3,@fh.callback2  ; Callback function "Write line to file"
     6560 A00A     
     6562 A452     
0052 6564 C820  54         mov   @parm4,@fh.callback3  ; Callback function "Close" file"
     6566 A00C     
     6568 A454     
0053 656A C820  54         mov   @parm5,@fh.callback4  ; Callback function "File I/O error"
     656C A00E     
     656E A456     
0054 6570 C820  54         mov   @parm6,@fh.records    ; Set records counter
     6572 A010     
     6574 A43C     
0055 6576 C820  54         mov   @parm8,@fh.workmode   ; Work mode (used in callbacks)
     6578 A014     
     657A A45A     
0056               
0057 657C 04E0  34         clr   @fh.temp1             ; Not used
     657E A460     
0058 6580 04E0  34         clr   @fh.temp2             ; Not used
     6582 A462     
0059 6584 04E0  34         clr   @fh.temp3             ; Not used
     6586 A464     
0060                       ;------------------------------------------------------
0061                       ; Assert
0062                       ;------------------------------------------------------
0063 6588 C120  34         mov   @fh.callback1,tmp0
     658A A450     
0064 658C 0284  22         ci    tmp0,>6000            ; Insane address ?
     658E 6000     
0065 6590 111C  14         jlt   fh.file.write.crash   ; Yes, crash!
0066               
0067 6592 0284  22         ci    tmp0,>7fff            ; Insane address ?
     6594 7FFF     
0068 6596 1519  14         jgt   fh.file.write.crash   ; Yes, crash!
0069               
0070 6598 C120  34         mov   @fh.callback2,tmp0
     659A A452     
0071 659C 0284  22         ci    tmp0,>6000            ; Insane address ?
     659E 6000     
0072 65A0 1114  14         jlt   fh.file.write.crash   ; Yes, crash!
0073               
0074 65A2 0284  22         ci    tmp0,>7fff            ; Insane address ?
     65A4 7FFF     
0075 65A6 1511  14         jgt   fh.file.write.crash   ; Yes, crash!
0076               
0077 65A8 C120  34         mov   @fh.callback3,tmp0
     65AA A454     
0078 65AC 0284  22         ci    tmp0,>6000            ; Insane address ?
     65AE 6000     
0079 65B0 110C  14         jlt   fh.file.write.crash   ; Yes, crash!
0080               
0081 65B2 0284  22         ci    tmp0,>7fff            ; Insane address ?
     65B4 7FFF     
0082 65B6 1509  14         jgt   fh.file.write.crash   ; Yes, crash!
0083               
0084 65B8 8820  50         c     @parm6,@edb.lines     ; First line to save beyond last line in EB?
     65BA A010     
     65BC A504     
0085 65BE 1505  14         jgt   fh.file.write.crash   ; Yes, crash!
0086               
0087 65C0 8820  50         c     @parm7,@edb.lines     ; Last line to save beyond last line in EB?
     65C2 A012     
     65C4 A504     
0088 65C6 1501  14         jgt   fh.file.write.crash   ; Yes, crash!
0089               
0090 65C8 1004  14         jmp   fh.file.write.edb.save1
0091                                                   ; All checks passed, continue.
0092                       ;------------------------------------------------------
0093                       ; Check failed, crash CPU!
0094                       ;------------------------------------------------------
0095               fh.file.write.crash:
0096 65CA C80B  38         mov   r11,@>ffce            ; \ Save caller address
     65CC FFCE     
0097 65CE 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     65D0 2026     
0098                       ;------------------------------------------------------
0099                       ; Callback "Before Open file"
0100                       ;------------------------------------------------------
0101               fh.file.write.edb.save1:
0102 65D2 C120  34         mov   @fh.callback1,tmp0
     65D4 A450     
0103 65D6 0694  24         bl    *tmp0                 ; Run callback function
0104                       ;------------------------------------------------------
0105                       ; Copy PAB header to VDP
0106                       ;------------------------------------------------------
0107               fh.file.write.edb.pabheader:
0108 65D8 06A0  32         bl    @cpym2v
     65DA 2486     
0109 65DC 3900                   data fh.vpab,fh.file.pab.header,9
     65DE 6CBC     
     65E0 0009     
0110                                                   ; Copy PAB header to VDP
0111                       ;------------------------------------------------------
0112                       ; Append file descriptor to PAB header in VDP
0113                       ;------------------------------------------------------
0114 65E2 0204  20         li    tmp0,fh.vpab + 9      ; VDP destination
     65E4 3909     
0115 65E6 C160  34         mov   @fh.fname.ptr,tmp1    ; Get pointer to file descriptor
     65E8 A444     
0116 65EA D195  26         movb  *tmp1,tmp2            ; Get file descriptor length
0117 65EC 0986  32         srl   tmp2,8                ; Right justify
0118 65EE 0586  14         inc   tmp2                  ; Include length byte as well
0119               
0120 65F0 06A0  32         bl    @xpym2v               ; Copy CPU memory to VDP memory
     65F2 248C     
0121                                                   ; \ i  tmp0 = VDP destination
0122                                                   ; | i  tmp1 = CPU source
0123                                                   ; / i  tmp2 = Number of bytes to copy
0124                       ;------------------------------------------------------
0125                       ; Open file
0126                       ;------------------------------------------------------
0127 65F4 06A0  32         bl    @file.open            ; Open file
     65F6 2D0C     
0128 65F8 3900                   data fh.vpab          ; \ i  p0 = Address of PAB in VRAM
0129 65FA 0012                   data io.seq.out.dis.var
0130                                                   ; / i  p1 = File type/mode
0131               
0132 65FC 21A0  32         coc   @wbit2,tmp2           ; Equal bit set?
     65FE 201C     
0133 6600 133A  14         jeq   fh.file.write.edb.error
0134                                                   ; Yes, IO error occured
0135                       ;------------------------------------------------------
0136                       ; Step 1: Write file record
0137                       ;------------------------------------------------------
0138               fh.file.write.edb.record:
0139 6602 8820  50         c     @fh.records,@parm7
     6604 A43C     
     6606 A012     
0140 6608 1340  14         jeq   fh.file.write.edb.done
0141                                                   ; Exit when all records processed
0142                       ;------------------------------------------------------
0143                       ; 1a: Unpack current line to framebuffer
0144                       ;------------------------------------------------------
0145 660A C820  54         mov   @fh.records,@parm1    ; Line to unpack
     660C A43C     
     660E A006     
0146 6610 04E0  34         clr   @parm2                ; 1st row in frame buffer
     6612 A008     
0147 6614 04E0  34         clr   @parm3                ; Column Offset must be 0 for proper save
     6616 A00A     
0148               
0149 6618 06A0  32         bl    @edb.line.unpack      ; Unpack line
     661A 6CC6     
0150                                                   ; \ i  parm1    = Line to unpack
0151                                                   ; | i  parm2    = Target row in frame buffer
0152                                                   ; | i  parm3    = Column offset
0153                                                   ; / o  outparm1 = Length of line
0154                       ;------------------------------------------------------
0155                       ; 1b: Copy unpacked line to VDP memory
0156                       ;------------------------------------------------------
0157 661C 0204  20         li    tmp0,fh.vrecbuf       ; VDP target address
     661E 3800     
0158 6620 0205  20         li    tmp1,fb.top           ; Top of frame buffer in CPU memory
     6622 D000     
0159               
0160 6624 C1A0  34         mov   @outparm1,tmp2        ; Length of line
     6626 A018     
0161 6628 C806  38         mov   tmp2,@fh.reclen       ; Set record length
     662A A43E     
0162 662C 1302  14         jeq   !                     ; Skip VDP copy if empty line
0163               
0164 662E 06A0  32         bl    @xpym2v               ; Copy CPU memory to VDP memory
     6630 248C     
0165                                                   ; \ i  tmp0 = VDP target address
0166                                                   ; | i  tmp1 = CPU source address
0167                                                   ; / i  tmp2 = Number of bytes to copy
0168                       ;------------------------------------------------------
0169                       ; 1c: Write file record
0170                       ;------------------------------------------------------
0171 6632 06A0  32 !       bl    @file.record.write    ; Write file record
     6634 2D48     
0172 6636 3900                   data fh.vpab          ; \ i  p0   = Address of PAB in VDP RAM
0173                                                   ; |           (without +9 offset!)
0174                                                   ; | o  tmp0 = Status byte
0175                                                   ; | o  tmp1 = ?????
0176                                                   ; | o  tmp2 = Status register contents
0177                                                   ; /           upon DSRLNK return
0178               
0179 6638 C804  38         mov   tmp0,@fh.pabstat      ; Save VDP PAB status byte
     663A A438     
0180 663C C806  38         mov   tmp2,@fh.ioresult     ; Save status register contents
     663E A43A     
0181                       ;------------------------------------------------------
0182                       ; 1d: Calculate kilobytes processed
0183                       ;------------------------------------------------------
0184 6640 A820  54         a     @fh.reclen,@fh.counter
     6642 A43E     
     6644 A442     
0185                                                   ; Add record length to counter
0186 6646 C160  34         mov   @fh.counter,tmp1      ;
     6648 A442     
0187 664A 0285  22         ci    tmp1,1024             ; 1 KB boundary reached ?
     664C 0400     
0188 664E 1106  14         jlt   fh.file.write.edb.check_fioerr
0189                                                   ; Not yet, goto (1e)
0190 6650 05A0  34         inc   @fh.kilobytes
     6652 A440     
0191 6654 0225  22         ai    tmp1,-1024            ; Remove KB portion, only keep bytes
     6656 FC00     
0192 6658 C805  38         mov   tmp1,@fh.counter      ; Update counter
     665A A442     
0193                       ;------------------------------------------------------
0194                       ; 1e: Check if a file error occured
0195                       ;------------------------------------------------------
0196               fh.file.write.edb.check_fioerr:
0197 665C C1A0  34         mov   @fh.ioresult,tmp2
     665E A43A     
0198 6660 21A0  32         coc   @wbit2,tmp2           ; IO error occured?
     6662 201C     
0199 6664 1602  14         jne   fh.file.write.edb.display
0200                                                   ; No, goto (2)
0201 6666 0460  28         b     @fh.file.write.edb.error
     6668 6676     
0202                                                   ; Yes, so handle file error
0203                       ;------------------------------------------------------
0204                       ; Step 2: Callback "Write line to  file"
0205                       ;------------------------------------------------------
0206               fh.file.write.edb.display:
0207 666A C120  34         mov   @fh.callback2,tmp0    ; Get pointer to "Saving indicator 2"
     666C A452     
0208 666E 0694  24         bl    *tmp0                 ; Run callback function
0209                       ;------------------------------------------------------
0210                       ; Step 3: Next record
0211                       ;------------------------------------------------------
0212 6670 05A0  34         inc   @fh.records           ; Update counter
     6672 A43C     
0213 6674 10C6  14         jmp   fh.file.write.edb.record
0214                       ;------------------------------------------------------
0215                       ; Error handler
0216                       ;------------------------------------------------------
0217               fh.file.write.edb.error:
0218 6676 C120  34         mov   @fh.pabstat,tmp0      ; Get VDP PAB status byte
     6678 A438     
0219 667A 0984  32         srl   tmp0,8                ; Right align VDP PAB 1 status byte
0220                       ;------------------------------------------------------
0221                       ; File error occured
0222                       ;------------------------------------------------------
0223 667C 06A0  32         bl    @file.close           ; Close file
     667E 2D30     
0224 6680 3900                   data fh.vpab          ; \ i  p0 = Address of PAB in VRAM
0225                       ;------------------------------------------------------
0226                       ; Callback "File I/O error"
0227                       ;------------------------------------------------------
0228 6682 C120  34         mov   @fh.callback4,tmp0    ; Get pointer to Callback "File I/O error"
     6684 A456     
0229 6686 0694  24         bl    *tmp0                 ; Run callback function
0230 6688 1006  14         jmp   fh.file.write.edb.exit
0231                       ;------------------------------------------------------
0232                       ; All records written. Close file
0233                       ;------------------------------------------------------
0234               fh.file.write.edb.done:
0235 668A 06A0  32         bl    @file.close           ; Close file
     668C 2D30     
0236 668E 3900                   data fh.vpab          ; \ i  p0 = Address of PAB in VRAM
0237                       ;------------------------------------------------------
0238                       ; Callback "Close file"
0239                       ;------------------------------------------------------
0240 6690 C120  34         mov   @fh.callback3,tmp0    ; Get pointer to Callback "Close file"
     6692 A454     
0241 6694 0694  24         bl    *tmp0                 ; Run callback function
0242               *--------------------------------------------------------------
0243               * Exit
0244               *--------------------------------------------------------------
0245               fh.file.write.edb.exit:
0246 6696 04E0  34         clr   @fh.fopmode           ; Set FOP mode to idle operation
     6698 A44A     
0247               
0248 669A 06A0  32         bl    @film
     669C 2236     
0249 669E 83A0                   data >83a0,>00,96     ; Clear any garbage left-over by DSR calls.
     66A0 0000     
     66A2 0060     
0250               
0251 66A4 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0252 66A6 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0253 66A8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0254 66AA C2F9  30         mov   *stack+,r11           ; Pop R11
0255 66AC 045B  20         b     *r11                  ; Return to caller
                   < stevie_b2.asm
0078                       copy  "fm.load.asm"         ; Load DV80 file into editor buffer
     **** ****     > fm.load.asm
0001               * FILE......: fm.load.asm
0002               * Purpose...: File Manager - Load file into editor buffer
0003               
0004               ***************************************************************
0005               * fm.loadfile
0006               * Load file into editor buffer
0007               ***************************************************************
0008               * bl  @fm.loadfile
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * parm1  = Pointer to length-prefixed string containing both
0012               *          device and filename
0013               *---------------------------------------------------------------
0014               * OUTPUT
0015               * outparm1 = >FFFF if editor bufer dirty (does not load file)
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0, tmp1
0019               ********|*****|*********************|**************************
0020               fm.loadfile:
0021 66AE 0649  14         dect  stack
0022 66B0 C64B  30         mov   r11,*stack            ; Save return address
0023 66B2 0649  14         dect  stack
0024 66B4 C644  30         mov   tmp0,*stack           ; Push tmp0
0025 66B6 0649  14         dect  stack
0026 66B8 C645  30         mov   tmp1,*stack           ; Push tmp1
0027 66BA 0649  14         dect  stack
0028 66BC C646  30         mov   tmp2,*stack           ; Push tmp2
0029                       ;-------------------------------------------------------
0030                       ; Exit early if editor buffer is dirty
0031                       ;-------------------------------------------------------
0032 66BE C160  34         mov   @edb.dirty,tmp1       ; Get dirty flag
     66C0 A506     
0033 66C2 1303  14         jeq   !                     ; Load file if not dirty
0034               
0035 66C4 0720  34         seto  @outparm1             ; \
     66C6 A018     
0036 66C8 105D  14         jmp   fm.loadfile.exit      ; / Editor buffer dirty, exit early
0037               
0038                       ;-------------------------------------------------------
0039                       ; Clear VDP screen buffer
0040                       ;-------------------------------------------------------
0041 66CA 06A0  32 !       bl    @filv
     66CC 228E     
0042 66CE 3A00                   data sprsat,>0000,16  ; Turn off sprites (cursor)
     66D0 0000     
     66D2 0010     
0043               
0044 66D4 C160  34         mov   @fb.scrrows.max,tmp1
     66D6 A31E     
0045 66D8 3960  74         mpy   @fb.colsline,tmp1     ; columns per line * rows on screen
     66DA A30E     
0046                                                   ; 16 bit part is in tmp2!
0047               
0048 66DC 06A0  32         bl    @scroff               ; Turn off screen
     66DE 2686     
0049               
0050 66E0 0204  20         li    tmp0,vdp.fb.toprow.sit
     66E2 0050     
0051                                                   ; VDP target address (2nd row on screen!)
0052 66E4 C160  34         mov   @tv.ruler.visible,tmp1
     66E6 A210     
0053 66E8 1302  14         jeq   fm.loadfile.clear     ; Skip if ruler is currently not shown
0054 66EA 0224  22         ai    tmp0,80               ; Skip ruler line
     66EC 0050     
0055               
0056               fm.loadfile.clear:
0057 66EE 0205  20         li    tmp1,32               ; Character to fill
     66F0 0020     
0058 66F2 06A0  32         bl    @xfilv                ; Fill VDP memory
     66F4 2294     
0059                                                   ; \ i  tmp0 = VDP target address
0060                                                   ; | i  tmp1 = Byte to fill
0061                                                   ; / i  tmp2 = Bytes to copy
0062                       ;-------------------------------------------------------
0063                       ; Reload colorscheme
0064                       ;-------------------------------------------------------
0065 66F6 0649  14         dect  stack
0066 66F8 C660  46         mov   @parm1,*stack         ; Push @parm1
     66FA A006     
0067 66FC 0649  14         dect  stack
0068 66FE C660  46         mov   @parm2,*stack         ; Push @parm2
     6700 A008     
0069 6702 0649  14         dect  stack
0070 6704 C660  46         mov   @parm3,*stack         ; Push @parm3
     6706 A00A     
0071               
0072 6708 0720  34         seto  @parm1                ; Do not turn screen off while
     670A A006     
0073                                                   ; reloading color scheme
0074 670C 0720  34         seto  @parm2                ; Skip marked lines colorization
     670E A008     
0075 6710 04E0  34         clr   @parm3                ; Colorize all panes
     6712 A00A     
0076               
0077 6714 06A0  32         bl    @pane.action.colorscheme.load
     6716 6D0E     
0078                                                   ; Reload color scheme
0079                                                   ; \ i  @parm1 = Skip screen off if >FFFF
0080                                                   ; | i  @parm2 = Skip colorizing marked lines
0081                                                   ; |             if >FFFF
0082                                                   ; | i  @parm3 = Only colorize CMDB pane
0083                                                   ; /             if >FFFF
0084               
0085               
0086 6718 C839  50         mov   *stack+,@parm3        ; Pop @parm3
     671A A00A     
0087 671C C839  50         mov   *stack+,@parm2        ; Pop @parm2
     671E A008     
0088 6720 C839  50         mov   *stack+,@parm1        ; Pop @parm1
     6722 A006     
0089                       ;-------------------------------------------------------
0090                       ; Reset editor
0091                       ;-------------------------------------------------------
0092 6724 06A0  32         bl    @tv.reset             ; Reset editor
     6726 333E     
0093                       ;-------------------------------------------------------
0094                       ; Change filename
0095                       ;-------------------------------------------------------
0096 6728 C120  34         mov   @parm1,tmp0           ; Source address
     672A A006     
0097 672C 0205  20         li    tmp1,edb.filename     ; Target address
     672E A51C     
0098 6730 0206  20         li    tmp2,80               ; Number of bytes to copy
     6732 0050     
0099 6734 C805  38         mov   tmp1,@edb.filename.ptr
     6736 A514     
0100                                                   ; Set filename
0101               
0102 6738 06A0  32         bl    @xpym2m               ; tmp0 = Memory source address
     673A 24E0     
0103                                                   ; tmp1 = Memory target address
0104                                                   ; tmp2 = Number of bytes to copy
0105                       ;-------------------------------------------------------
0106                       ; Read DV80 file and display
0107                       ;-------------------------------------------------------
0108 673C 0204  20         li    tmp0,fm.loadsave.cb.indicator1
     673E 68D6     
0109 6740 C804  38         mov   tmp0,@parm2           ; Register callback 1
     6742 A008     
0110               
0111 6744 0204  20         li    tmp0,fm.loadsave.cb.indicator2
     6746 69B8     
0112 6748 C804  38         mov   tmp0,@parm3           ; Register callback 2
     674A A00A     
0113               
0114 674C 0204  20         li    tmp0,fm.loadsave.cb.indicator3
     674E 6A62     
0115 6750 C804  38         mov   tmp0,@parm4           ; Register callback 3
     6752 A00C     
0116               
0117 6754 0204  20         li    tmp0,fm.loadsave.cb.fioerr
     6756 6B12     
0118 6758 C804  38         mov   tmp0,@parm5           ; Register callback 4
     675A A00E     
0119               
0120 675C 0204  20         li    tmp0,fm.load.cb.memfull
     675E 6BEC     
0121 6760 C804  38         mov   tmp0,@parm6           ; Register callback 5
     6762 A010     
0122               
0123 6764 0720  34         seto  @parm7                ; Load new file
     6766 A012     
0124               
0125 6768 0204  20         li    tmp0,id.file.loadfile
     676A 0001     
0126 676C C804  38         mov   tmp0,@parm8           ; Work mode
     676E A014     
0127               
0128 6770 06A0  32         bl    @fh.file.read.edb     ; Read file into editor buffer
     6772 6236     
0129                                                   ; \ i  @parm1 = Pointer to length prefixed
0130                                                   ; |             file descriptor
0131                                                   ; | i  @parm2 = Pointer to callback
0132                                                   ; |             "Before Open file"
0133                                                   ; | i  @parm3 = Pointer to callback
0134                                                   ; |             "Read line from file"
0135                                                   ; | i  @parm4 = Pointer to callback
0136                                                   ; |             "Close file"
0137                                                   ; | i  @parm5 = Pointer to callback
0138                                                   ; |             "File I/O error"
0139                                                   ; | i  @parm6 = Pointer to callback
0140                                                   ; |             "Memory full error"
0141                                                   ; | i  @parm7 = Line to insert file at
0142                                                   ; |             or >ffff for new file
0143                                                   ; / i  @parm8 = Work mode
0144               
0145 6774 04E0  34         clr   @edb.dirty            ; Editor buffer content replaced, not
     6776 A506     
0146                                                   ; longer dirty.
0147               
0148 6778 0204  20         li    tmp0,txt.filetype.DV80
     677A 3ABA     
0149 677C C804  38         mov   tmp0,@edb.filetype.ptr
     677E A516     
0150                                                   ; Set filetype display string
0151               
0152 6780 04E0  34         clr   @outparm1             ; Reset
     6782 A018     
0153               *--------------------------------------------------------------
0154               * Exit
0155               *--------------------------------------------------------------
0156               fm.loadfile.exit:
0157 6784 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0158 6786 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0159 6788 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0160 678A C2F9  30         mov   *stack+,r11           ; Pop R11
0161 678C 045B  20         b     *r11                  ; Return to caller
                   < stevie_b2.asm
0079                       copy  "fm.insert.asm"       ; Insert DV80 file into editor buffer
     **** ****     > fm.insert.asm
0001               * FILE......: fm.insert.asm
0002               * Purpose...: File Manager - Insert (or append) file into editor buffer
0003               
0004               ***************************************************************
0005               * fm.insertfile
0006               * Insert (or append) file into editor buffer
0007               ***************************************************************
0008               * bl  @fm.insertfile
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * parm1  = Pointer to length-prefixed string containing both
0012               *          device and filename
0013               * parm2  = Line number to load file at
0014               * parm3  = Work mode
0015               *---------------------------------------------------------------
0016               * OUTPUT
0017               * none
0018               *--------------------------------------------------------------
0019               * Register usage
0020               * tmp0, tmp1
0021               ********|*****|*********************|**************************
0022               fm.insertfile:
0023 678E 0649  14         dect  stack
0024 6790 C64B  30         mov   r11,*stack            ; Save return address
0025 6792 0649  14         dect  stack
0026 6794 C644  30         mov   tmp0,*stack           ; Push tmp0
0027 6796 0649  14         dect  stack
0028 6798 C645  30         mov   tmp1,*stack           ; Push tmp1
0029 679A 0649  14         dect  stack
0030 679C C646  30         mov   tmp2,*stack           ; Push tmp2
0031 679E 0649  14         dect  stack
0032 67A0 C660  46         mov   @parm1,*stack         ; Push @parm1
     67A2 A006     
0033 67A4 0649  14         dect  stack
0034 67A6 C660  46         mov   @parm2,*stack         ; Push @parm2
     67A8 A008     
0035 67AA 0649  14         dect  stack
0036 67AC C660  46         mov   @parm3,*stack         ; Push @parm3
     67AE A00A     
0037                       ;-------------------------------------------------------
0038                       ; Clear VDP screen buffer
0039                       ;-------------------------------------------------------
0040 67B0 06A0  32 !       bl    @filv
     67B2 228E     
0041 67B4 3A00                   data sprsat,>0000,16  ; Turn off sprites (cursor)
     67B6 0000     
     67B8 0010     
0042                       ;-------------------------------------------------------
0043                       ; Read DV80 file and display
0044                       ;-------------------------------------------------------
0045 67BA C820  54         mov   @parm2,@parm7         ; Get line number
     67BC A008     
     67BE A012     
0046 67C0 C820  54         mov   @parm3,@parm8         ; Work mode
     67C2 A00A     
     67C4 A014     
0047               
0048 67C6 0204  20         li    tmp0,fm.loadsave.cb.indicator1
     67C8 68D6     
0049 67CA C804  38         mov   tmp0,@parm2           ; Register callback 1
     67CC A008     
0050               
0051 67CE 0204  20         li    tmp0,fm.loadsave.cb.indicator2
     67D0 69B8     
0052 67D2 C804  38         mov   tmp0,@parm3           ; Register callback 2
     67D4 A00A     
0053               
0054 67D6 0204  20         li    tmp0,fm.loadsave.cb.indicator3
     67D8 6A62     
0055 67DA C804  38         mov   tmp0,@parm4           ; Register callback 3
     67DC A00C     
0056               
0057 67DE 0204  20         li    tmp0,fm.loadsave.cb.fioerr
     67E0 6B12     
0058 67E2 C804  38         mov   tmp0,@parm5           ; Register callback 4
     67E4 A00E     
0059               
0060 67E6 0204  20         li    tmp0,fm.load.cb.memfull
     67E8 6BEC     
0061 67EA C804  38         mov   tmp0,@parm6           ; Register callback 5
     67EC A010     
0062               
0063 67EE 06A0  32         bl    @fh.file.read.edb     ; Read file into editor buffer
     67F0 6236     
0064                                                   ; \ i  @parm1 = Pointer to length prefixed
0065                                                   ; |             file descriptor
0066                                                   ; | i  @parm2 = Pointer to callback
0067                                                   ; |             "Before Open file"
0068                                                   ; | i  @parm3 = Pointer to callback
0069                                                   ; |             "Read line from file"
0070                                                   ; | i  @parm4 = Pointer to callback
0071                                                   ; |             "Close file"
0072                                                   ; | i  @parm5 = Pointer to callback
0073                                                   ; |             "File I/O error"
0074                                                   ; | i  @parm6 = Pointer to callback
0075                                                   ; |             "Memory full error"
0076                                                   ; | i  @parm7 = Line to insert file at
0077                                                   ; |             or >ffff for new file
0078                                                   ; / i  @parm8 = Work mode
0079               *--------------------------------------------------------------
0080               * Exit
0081               *--------------------------------------------------------------
0082               fm.insertfile.exit:
0083 67F2 C839  50         mov   *stack+,@parm3        ; Pop @parm3
     67F4 A00A     
0084 67F6 C839  50         mov   *stack+,@parm2        ; Pop @parm2
     67F8 A008     
0085 67FA C839  50         mov   *stack+,@parm1        ; Pop @parm1
     67FC A006     
0086 67FE C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0087 6800 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0088 6802 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0089 6804 C2F9  30         mov   *stack+,r11           ; Pop R11
0090 6806 045B  20         b     *r11                  ; Return to caller
                   < stevie_b2.asm
0080                       copy  "fm.save.asm"         ; Save DV80 file from editor buffer
     **** ****     > fm.save.asm
0001               * FILE......: fm.save.asm
0002               * Purpose...: File Manager - Save file from editor buffer
0003               
0004               ***************************************************************
0005               * fm.savefile
0006               * Save file from editor buffer
0007               ***************************************************************
0008               * bl  @fm.savefile
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * parm1  = Pointer to length-prefixed string containing both
0012               *          device and filename
0013               * parm2  = First line to save (base 0)
0014               * parm3  = Last line to save  (base 0)
0015               * parm4  = Work mode (See id.file.XXXX)
0016               *---------------------------------------------------------------
0017               * OUTPUT
0018               * none
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * tmp0, tmp1
0022               ********|*****|*********************|**************************
0023               fm.savefile:
0024 6808 0649  14         dect  stack
0025 680A C64B  30         mov   r11,*stack            ; Save return address
0026 680C 0649  14         dect  stack
0027 680E C644  30         mov   tmp0,*stack           ; Push tmp0
0028 6810 0649  14         dect  stack
0029 6812 C645  30         mov   tmp1,*stack           ; Push tmp1
0030                       ;-------------------------------------------------------
0031                       ; Check if filename must be changed in editor buffer
0032                       ;-------------------------------------------------------
0033 6814 0204  20         li    tmp0,id.file.savefile ; Saving full file?
     6816 0004     
0034 6818 8120  34         c     @parm4,tmp0
     681A A00C     
0035 681C 160A  14         jne   !                     ; No, skip changing filename
0036                       ;-------------------------------------------------------
0037                       ; Change filename
0038                       ;-------------------------------------------------------
0039 681E C120  34         mov   @parm1,tmp0           ; Source address
     6820 A006     
0040 6822 0205  20         li    tmp1,edb.filename     ; Target address
     6824 A51C     
0041 6826 0206  20         li    tmp2,80               ; Number of bytes to copy
     6828 0050     
0042 682A C805  38         mov   tmp1,@edb.filename.ptr
     682C A514     
0043                                                   ; Set filename
0044               
0045 682E 06A0  32         bl    @xpym2m               ; tmp0 = Memory source address
     6830 24E0     
0046                                                   ; tmp1 = Memory target address
0047                                                   ; tmp2 = Number of bytes to copy
0048               
0049                       ;-------------------------------------------------------
0050                       ; Save DV80 file
0051                       ;-------------------------------------------------------
0052 6832 C820  54 !       mov   @parm2,@parm6         ; First line to save
     6834 A008     
     6836 A010     
0053 6838 C820  54         mov   @parm3,@parm7         ; Last line to save
     683A A00A     
     683C A012     
0054 683E C820  54         mov   @parm4,@parm8         ; Work mode
     6840 A00C     
     6842 A014     
0055               
0056 6844 0204  20         li    tmp0,fm.loadsave.cb.indicator1
     6846 68D6     
0057 6848 C804  38         mov   tmp0,@parm2           ; Register callback 1
     684A A008     
0058               
0059 684C 0204  20         li    tmp0,fm.loadsave.cb.indicator2
     684E 69B8     
0060 6850 C804  38         mov   tmp0,@parm3           ; Register callback 2
     6852 A00A     
0061               
0062 6854 0204  20         li    tmp0,fm.loadsave.cb.indicator3
     6856 6A62     
0063 6858 C804  38         mov   tmp0,@parm4           ; Register callback 3
     685A A00C     
0064               
0065 685C 0204  20         li    tmp0,fm.loadsave.cb.fioerr
     685E 6B12     
0066 6860 C804  38         mov   tmp0,@parm5           ; Register callback 4
     6862 A00E     
0067               
0068 6864 06A0  32         bl    @filv
     6866 228E     
0069 6868 3A00                   data sprsat,>0000,16  ; Turn off sprites
     686A 0000     
     686C 0010     
0070               
0071 686E 06A0  32         bl    @fh.file.write.edb    ; Save file from editor buffer
     6870 6526     
0072                                                   ; \ i  @parm1 = Pointer to length prefixed
0073                                                   ; |             file descriptor
0074                                                   ; | i  @parm2 = Pointer to callback
0075                                                   ; |             "Before Open file"
0076                                                   ; | i  @parm3 = Pointer to callback
0077                                                   ; |             "Write line to file"
0078                                                   ; | i  @parm4 = Pointer to callback
0079                                                   ; |             "Close file"
0080                                                   ; | i  @parm5 = Pointer to callback
0081                                                   ; |             "File I/O error"
0082                                                   ; | i  @parm6 = First line to save (base 0)
0083                                                   ; | i  @parm7 = Last line to save  (base 0)
0084                                                   ; | i  @parm8 = Working mode
0085                                                   ; /
0086               
0087 6872 04E0  34         clr   @edb.dirty            ; Editor buffer no longer dirty.
     6874 A506     
0088               
0089 6876 0204  20         li    tmp0,txt.filetype.DV80
     6878 3ABA     
0090 687A C804  38         mov   tmp0,@edb.filetype.ptr
     687C A516     
0091                                                   ; Set filetype display string
0092               *--------------------------------------------------------------
0093               * Exit
0094               *--------------------------------------------------------------
0095               fm.savefile.exit:
0096 687E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0097 6880 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0098 6882 C2F9  30         mov   *stack+,r11           ; Pop R11
0099 6884 045B  20         b     *r11                  ; Return to caller
                   < stevie_b2.asm
0081                       copy  "fm.new.asm"          ; New DV80 file in editor buffer
     **** ****     > fm.new.asm
0001               * FILE......: fm.new.asm
0002               * Purpose...: File Manager - New file in editor buffer
0003               
0004               ***************************************************************
0005               * fm.newfile
0006               * New file in editor buffer, clear everything out
0007               ***************************************************************
0008               * bl  @fm.newfile
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *---------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0, tmp1
0018               ********|*****|*********************|**************************
0019               fm.newfile:
0020 6886 0649  14         dect  stack
0021 6888 C64B  30         mov   r11,*stack            ; Save return address
0022 688A 0649  14         dect  stack
0023 688C C644  30         mov   tmp0,*stack           ; Push tmp0
0024 688E 0649  14         dect  stack
0025 6890 C645  30         mov   tmp1,*stack           ; Push tmp1
0026               *--------------------------------------------------------------
0027               * Put message
0028               *--------------------------------------------------------------
0029 6892 06A0  32         bl    @hchar
     6894 27D2     
0030 6896 3B00                   byte pane.botrow,0,32,50
     6898 2032     
0031 689A FFFF                   data EOL              ; Clear hint on bottom row
0032               
0033 689C C820  54         mov   @tv.busycolor,@parm1  ; Get busy color
     689E A21C     
     68A0 A006     
0034 68A2 06A0  32         bl    @pane.action.colorscheme.statlines
     68A4 6D20     
0035                                                   ; Set color combination for status line
0036                                                   ; \ i  @parm1 = Color combination
0037                                                   ; /
0038               
0039 68A6 06A0  32         bl    @putat
     68A8 2442     
0040 68AA 3B00                   byte pane.botrow,0
0041 68AC 396E                   data txt.clearmem     ; Display "Clearing memory...."
0042               *--------------------------------------------------------------
0043               * Clear SAMS pages and exit editor
0044               *--------------------------------------------------------------
0045 68AE 06A0  32         bl    @edb.clear.sams       ; Clear SAMS memory used by editor buffer
     68B0 6D32     
0046 68B2 06A0  32         bl    @tv.reset             ; Reset editor
     68B4 333E     
0047               *--------------------------------------------------------------
0048               * Remove message
0049               *--------------------------------------------------------------
0050 68B6 06A0  32         bl    @hchar
     68B8 27D2     
0051 68BA 0000                   byte 0,0,32,80
     68BC 2050     
0052 68BE 3B00                   byte pane.botrow,0,32,50
     68C0 2032     
0053 68C2 FFFF                   data EOL              ; Clear top row and hint on bottom row
0054               
0055 68C4 C820  54         mov   @tv.color,@parm1      ; Set normal color
     68C6 A218     
     68C8 A006     
0056 68CA 06A0  32         bl    @pane.action.colorscheme.statlines
     68CC 6D20     
0057                                                   ; Set color combination for status lines
0058                                                   ; \ i  @parm1 = Color combination
0059                                                   ; /
0060               *--------------------------------------------------------------
0061               * Exit
0062               *--------------------------------------------------------------
0063               fm.newfile.exit:
0064 68CE C179  30         mov   *stack+,tmp1          ; Pop tmp1
0065 68D0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0066 68D2 C2F9  30         mov   *stack+,r11           ; Pop R11
0067 68D4 045B  20         b     *r11                  ; Return to caller
                   < stevie_b2.asm
0082                       copy  "fm.callbacks.asm"    ; Callbacks for file operations
     **** ****     > fm.callbacks.asm
0001               * FILE......: fm.callbacks.asm
0002               * Purpose...: File Manager - Callbacks for file operations
0003               
0004               *---------------------------------------------------------------
0005               * Callback function "Show loading indicator 1"
0006               * Open file
0007               *---------------------------------------------------------------
0008               * INPUT
0009               * @parm1 = Pointer to length-prefixed filname descriptor
0010               *---------------------------------------------------------------
0011               * Registered as pointer in @fh.callback1
0012               *---------------------------------------------------------------
0013               fm.loadsave.cb.indicator1:
0014 68D6 0649  14         dect  stack
0015 68D8 C64B  30         mov   r11,*stack            ; Save return address
0016 68DA 0649  14         dect  stack
0017 68DC C644  30         mov   tmp0,*stack           ; Push tmp0
0018 68DE 0649  14         dect  stack
0019 68E0 C645  30         mov   tmp1,*stack           ; Push tmp1
0020 68E2 0649  14         dect  stack
0021 68E4 C660  46         mov   @parm1,*stack         ; Push @parm1
     68E6 A006     
0022                       ;------------------------------------------------------
0023                       ; Check file operation mode
0024                       ;------------------------------------------------------
0025 68E8 06A0  32         bl    @hchar
     68EA 27D2     
0026 68EC 3B00                   byte pane.botrow,0,32,55
     68EE 2037     
0027 68F0 FFFF                   data EOL              ; Clear hint on bottom row
0028               
0029               
0030 68F2 0649  14         dect  stack
0031 68F4 C660  46         mov   @parm1,*stack         ; Push @parm1
     68F6 A006     
0032               
0033 68F8 C820  54         mov   @tv.busycolor,@parm1  ; Get busy color
     68FA A21C     
     68FC A006     
0034 68FE 06A0  32         bl    @pane.action.colorscheme.statlines
     6900 6D20     
0035                                                   ; Set color combination for status line
0036                                                   ; \ i  @parm1 = Color combination
0037                                                   ; /
0038               
0039 6902 C839  50         mov   *stack+,@parm1        ; Pop @parm1
     6904 A006     
0040               
0041 6906 C120  34         mov   @fh.fopmode,tmp0      ; Check file operation mode
     6908 A44A     
0042 690A 0284  22         ci    tmp0,fh.fopmode.writefile
     690C 0002     
0043 690E 1303  14         jeq   fm.loadsave.cb.indicator1.check.saving
0044                                                   ; Saving file?
0045               
0046 6910 0284  22         ci    tmp0,fh.fopmode.readfile
     6912 0001     
0047 6914 1336  14         jeq   fm.loadsave.cb.indicator1.loading
0048                                                   ; Loading file?
0049                       ;------------------------------------------------------
0050                       ; Check saving mode
0051                       ;------------------------------------------------------
0052               fm.loadsave.cb.indicator1.check.saving:
0053 6916 0204  20         li    tmp0,id.file.savefile
     6918 0004     
0054 691A 8120  34         c     @fh.workmode,tmp0     ; Saving all of file
     691C A45A     
0055 691E 1318  14         jeq   fm.loadsave.cb.indicator1.savefile
0056               
0057 6920 0204  20         li    tmp0,id.file.saveblock
     6922 0005     
0058 6924 8120  34         c     @fh.workmode,tmp0     ; Saving code block M1-M2 ?
     6926 A45A     
0059 6928 1318  14         jeq   fm.loadsave.cb.indicator1.saveblock
0060               
0061 692A 0204  20         li    tmp0,id.file.printfile
     692C 0007     
0062 692E 8120  34         c     @fh.workmode,tmp0     ; Printing all of file
     6930 A45A     
0063 6932 1318  14         jeq   fm.loadsave.cb.indicator1.printfile
0064               
0065 6934 0204  20         li    tmp0,id.file.printblock
     6936 0008     
0066 6938 8120  34         c     @fh.workmode,tmp0     ; Printing code block M1-M2 ?
     693A A45A     
0067 693C 1318  14         jeq   fm.loadsave.cb.indicator1.printblock
0068               
0069 693E 0204  20         li    tmp0,id.file.clipblock
     6940 0006     
0070 6942 8120  34         c     @fh.workmode,tmp0     ; Saving block to clipboard ?
     6944 A45A     
0071 6946 1318  14         jeq   fm.loadsave.cb.indicator1.clipblock
0072               
0073                       ;------------------------------------------------------
0074                       ; Unknown save mode. Stop here
0075                       ;------------------------------------------------------
0076               fm.loadsave.cb.indicator1.panic:
0077 6948 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     694A FFCE     
0078 694C 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     694E 2026     
0079                       ;------------------------------------------------------
0080                       ; Display Saving....
0081                       ;------------------------------------------------------
0082               fm.loadsave.cb.indicator1.savefile:
0083 6950 06A0  32         bl    @putat
     6952 2442     
0084 6954 3B00                   byte pane.botrow,0
0085 6956 38CE                   data txt.saving       ; Display "Saving...."
0086 6958 1022  14         jmp   fm.loadsave.cb.indicator1.filename
0087                       ;------------------------------------------------------
0088                       ; Display Saving block to file....
0089                       ;------------------------------------------------------
0090               fm.loadsave.cb.indicator1.saveblock:
0091 695A 06A0  32         bl    @putat
     695C 2442     
0092 695E 3B00                   byte pane.botrow,0
0093 6960 3926                   data txt.block.save   ; Display "Saving block...."
0094               
0095 6962 1024  14         jmp   fm.loadsave.cb.indicator1.exit
0096                       ;------------------------------------------------------
0097                       ; Display Printing....
0098                       ;------------------------------------------------------
0099               fm.loadsave.cb.indicator1.printfile:
0100 6964 06A0  32         bl    @putat
     6966 2442     
0101 6968 3B00                   byte pane.botrow,0
0102 696A 38DA                   data txt.printing    ; Display "Printing...."
0103 696C 101F  14         jmp   fm.loadsave.cb.indicator1.exit
0104                       ;------------------------------------------------------
0105                       ; Display Printing block....
0106                       ;------------------------------------------------------
0107               fm.loadsave.cb.indicator1.printblock:
0108 696E 06A0  32         bl    @putat
     6970 2442     
0109 6972 3B00                   byte pane.botrow,0
0110 6974 395A                   data txt.block.print  ; Display "Printing block...."
0111 6976 101A  14         jmp   fm.loadsave.cb.indicator1.exit
0112                       ;------------------------------------------------------
0113                       ; Display Copying to clipboard....
0114                       ;------------------------------------------------------
0115               fm.loadsave.cb.indicator1.clipblock:
0116 6978 06A0  32         bl    @putat
     697A 2442     
0117 697C 3B00                   byte pane.botrow,0
0118 697E 3940                   data txt.block.clip  ; Display "Copying to clipboard...."
0119 6980 1015  14         jmp   fm.loadsave.cb.indicator1.exit
0120               
0121                       ;------------------------------------------------------
0122                       ; Display Loading....
0123                       ;------------------------------------------------------
0124               fm.loadsave.cb.indicator1.loading:
0125 6982 06A0  32         bl    @putat
     6984 2442     
0126 6986 3B00                   byte pane.botrow,0
0127 6988 38C2                   data txt.loading      ; Display "Loading file...."
0128               
0129 698A C120  34         mov   @fh.temp1,tmp0
     698C A460     
0130 698E 0284  22         ci    tmp0,>ffff
     6990 FFFF     
0131 6992 1605  14         jne   fm.loadsave.cb.indicator1.filename
0132                                                   ; Skip if inserting file
0133               
0134 6994 06A0  32         bl    @hchar
     6996 27D2     
0135 6998 0000                   byte 0,0,32,50
     699A 2032     
0136 699C FFFF                   data EOL              ; Clear filename
0137                       ;------------------------------------------------------
0138                       ; Display device/filename
0139                       ;------------------------------------------------------
0140               fm.loadsave.cb.indicator1.filename:
0141 699E 06A0  32         bl    @at
     69A0 26C6     
0142 69A2 3B0B                   byte pane.botrow,11   ; Cursor YX position
0143               
0144 69A4 C160  34         mov   @parm1,tmp1           ; Get pointer to file descriptor
     69A6 A006     
0145 69A8 06A0  32         bl    @xutst0               ; Display device/filename
     69AA 2420     
0146                       ;------------------------------------------------------
0147                       ; Exit
0148                       ;------------------------------------------------------
0149               fm.loadsave.cb.indicator1.exit:
0150 69AC C839  50         mov   *stack+,@parm1        ; Pop @parm1
     69AE A006     
0151 69B0 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0152 69B2 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0153 69B4 C2F9  30         mov   *stack+,r11           ; Pop R11
0154 69B6 045B  20         b     *r11                  ; Return to caller
0155               
0156               
0157               
0158               
0159               *---------------------------------------------------------------
0160               * Callback function "Show loading indicator 2"
0161               * Read line from file / Write line to file
0162               *---------------------------------------------------------------
0163               * Registered as pointer in @fh.callback2
0164               *---------------------------------------------------------------
0165               fm.loadsave.cb.indicator2:
0166 69B8 0649  14         dect  stack
0167 69BA C64B  30         mov   r11,*stack            ; Push return address
0168 69BC 0649  14         dect  stack
0169 69BE C644  30         mov   tmp0,*stack           ; Push tmp0
0170                       ;------------------------------------------------------
0171                       ; Check if first page processed (speedup impression)
0172                       ;------------------------------------------------------
0173               fm.loadsave.cb.indicator2.loadsave:
0174 69C0 8820  50         c     @fh.records,@fb.scrrows.max
     69C2 A43C     
     69C4 A31E     
0175 69C6 1623  14         jne   fm.loadsave.cb.indicator2.kb
0176                                                   ; Skip framebuffer refresh
0177               
0178 69C8 C120  34         mov   @fh.fopmode,tmp0      ; Check file operation mode
     69CA A44A     
0179 69CC 0284  22         ci    tmp0,fh.fopmode.writefile
     69CE 0002     
0180 69D0 1308  14         jeq   fm.loadsave.cb.indicator2.topline
0181                                                   ; Saving file
0182               
0183 69D2 C120  34         mov   @fh.temp1,tmp0
     69D4 A460     
0184 69D6 0284  22         ci    tmp0,>ffff            ; Loading file in clean editor buffer?
     69D8 FFFF     
0185 69DA 1603  14         jne   fm.loadsave.cb.indicator2.topline
0186                                                   ; No, inserting file
0187               
0188 69DC 04E0  34         clr   @parm1                ; Line to start with, "load" operation
     69DE A006     
0189 69E0 1003  14         jmp   fm.loadsave.cb.indicator2.refresh
0190               
0191               fm.loadsave.cb.indicator2.topline:
0192 69E2 C820  54         mov   @fb.topline,@parm1    ; Line to start with, other operations
     69E4 A304     
     69E6 A006     
0193                       ;------------------------------------------------------
0194                       ; Refresh framebuffer if 1st page processed, runs once
0195                       ;------------------------------------------------------
0196               fm.loadsave.cb.indicator2.refresh:
0197 69E8 06A0  32         bl    @fb.refresh           ; Refresh frame buffer
     69EA 6CD8     
0198                                                   ; \ i  @parm1 = Line to start with
0199                                                   ; /
0200               
0201 69EC C820  54         mov   @fb.scrrows,@parm1
     69EE A31C     
     69F0 A006     
0202 69F2 06A0  32         bl    @fb.vdpdump           ; Dump frame buffer to VDP SIT
     69F4 6CEA     
0203                                                   ; \ i  @parm1 = number of lines to dump
0204                                                   ; /
0205                       ;------------------------------------------------------
0206                       ; Display fast mode
0207                       ;------------------------------------------------------
0208 69F6 0760  38         abs   @fh.offsetopcode
     69F8 A44E     
0209 69FA 1309  14         jeq   fm.loadsave.cb.indicator2.kb
0210               
0211 69FC 06A0  32         bl    @hchar
     69FE 27D2     
0212 6A00 0034                   byte 0,52,32,20
     6A02 2014     
0213 6A04 FFFF                   data EOL              ; Erase any previous message
0214               
0215 6A06 06A0  32         bl    @putat
     6A08 2442     
0216 6A0A 0034                   byte 0,52             ; Position cursor
0217 6A0C 3A36                   data txt.fastmode     ; Display "FastMode"
0218                       ;------------------------------------------------------
0219                       ; Check if updated counters should be displayed
0220                       ;------------------------------------------------------
0221               fm.loadsave.cb.indicator2.kb:
0222 6A0E 8820  50         c     @fh.kilobytes,@fh.kilobytes.prev
     6A10 A440     
     6A12 A45C     
0223 6A14 1323  14         jeq   fm.loadsave.cb.indicator2.exit
0224                       ;------------------------------------------------------
0225                       ; Only show updated KB if loading/saving/printing file
0226                       ;------------------------------------------------------
0227 6A16 0204  20         li    tmp0,id.file.savefile
     6A18 0004     
0228 6A1A 8120  34         c     @fh.workmode,tmp0
     6A1C A45A     
0229 6A1E 120B  14         jle   fm.loadsave.cb.indicator2.kb.processed
0230                                                   ; includes id.file.loadfile
0231                                                   ; includes id.file.insertfile
0232                                                   ; includes id.file.appendfile
0233                                                   ; includes id.file.savefile
0234               
0235 6A20 0204  20         li    tmp0,id.file.printfile
     6A22 0007     
0236 6A24 8120  34         c     @fh.workmode,tmp0
     6A26 A45A     
0237 6A28 1306  14         jeq   fm.loadsave.cb.indicator2.kb.processed
0238               
0239 6A2A 0204  20         li    tmp0,id.file.printblock
     6A2C 0008     
0240 6A2E 8120  34         c     @fh.workmode,tmp0
     6A30 A45A     
0241 6A32 1301  14         jeq   fm.loadsave.cb.indicator2.kb.processed
0242               
0243 6A34 1013  14         jmp   fm.loadsave.cb.indicator2.exit
0244                       ;------------------------------------------------------
0245                       ; Display updated counters
0246                       ;------------------------------------------------------
0247               fm.loadsave.cb.indicator2.kb.processed:
0248 6A36 C820  54         mov   @fh.kilobytes,@fh.kilobytes.prev
     6A38 A440     
     6A3A A45C     
0249                                                   ; Save for compare
0250               
0251 6A3C 06A0  32         bl    @putnum
     6A3E 2A24     
0252 6A40 0047                   byte 0,71             ; Show kilobytes processed
0253 6A42 A440                   data fh.kilobytes,rambuf,>3020
     6A44 A100     
     6A46 3020     
0254               
0255 6A48 06A0  32         bl    @putat
     6A4A 2442     
0256 6A4C 004C                   byte 0,76
0257 6A4E 3A5E                   data txt.kb           ; Show "kb" string
0258               
0259               fm.loadsave.cb.indicator2.lines:
0260 6A50 06A0  32         bl    @putnum
     6A52 2A24     
0261 6A54 3B48                   byte pane.botrow,72   ; Show lines processed
0262 6A56 A43C                   data fh.records,rambuf,>3020
     6A58 A100     
     6A5A 3020     
0263                       ;------------------------------------------------------
0264                       ; Exit
0265                       ;------------------------------------------------------
0266               fm.loadsave.cb.indicator2.exit:
0267 6A5C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0268 6A5E C2F9  30         mov   *stack+,r11           ; Pop R11
0269 6A60 045B  20         b     *r11                  ; Return to caller
0270               
0271               
0272               
0273               
0274               *---------------------------------------------------------------
0275               * Callback function "Show loading indicator 3"
0276               * Close file
0277               *---------------------------------------------------------------
0278               * Registered as pointer in @fh.callback3
0279               *---------------------------------------------------------------
0280               fm.loadsave.cb.indicator3:
0281 6A62 0649  14         dect  stack
0282 6A64 C64B  30         mov   r11,*stack            ; Save return address
0283 6A66 0649  14         dect  stack
0284 6A68 C644  30         mov   tmp0,*stack           ; Push tmp0
0285 6A6A 0649  14         dect  stack
0286 6A6C C645  30         mov   tmp1,*stack           ; Push tmp1
0287 6A6E 0649  14         dect  stack
0288 6A70 C646  30         mov   tmp2,*stack           ; Push tmp2
0289 6A72 0649  14         dect  stack
0290 6A74 C647  30         mov   tmp3,*stack           ; Push tmp3
0291 6A76 0649  14         dect  stack
0292 6A78 C660  46         mov   @parm1,*stack         ; Push @parm1
     6A7A A006     
0293                       ;------------------------------------------------------
0294                       ; Restore status line colors
0295                       ;------------------------------------------------------
0296 6A7C 06A0  32         bl    @hchar
     6A7E 27D2     
0297 6A80 3B00                   byte pane.botrow,0,32,50
     6A82 2032     
0298 6A84 FFFF                   data EOL              ; Erase indicator in bottom row
0299               
0300 6A86 C820  54         mov   @tv.color,@parm1      ; Set normal color
     6A88 A218     
     6A8A A006     
0301 6A8C 06A0  32         bl    @pane.action.colorscheme.statlines
     6A8E 6D20     
0302                                                   ; Set color combination for status lines
0303                                                   ; \ i  @parm1 = Color combination
0304                                                   ; /
0305                       ;------------------------------------------------------
0306                       ; Only show updated KB if loading/saving full file
0307                       ;------------------------------------------------------
0308 6A90 0204  20         li    tmp0,id.file.loadfile
     6A92 0001     
0309 6A94 8120  34         c     @fh.workmode,tmp0
     6A96 A45A     
0310 6A98 1315  14         jeq   fm.loadsave.cb.message
0311               
0312 6A9A 0204  20         li    tmp0,id.file.savefile
     6A9C 0004     
0313 6A9E 8120  34         c     @fh.workmode,tmp0
     6AA0 A45A     
0314 6AA2 1610  14         jne   fm.loadsave.cb.message
0315               
0316 6AA4 06A0  32         bl    @putnum
     6AA6 2A24     
0317 6AA8 0047                   byte 0,71             ; Show kilobytes processed
0318 6AAA A440                   data fh.kilobytes,rambuf,>3020
     6AAC A100     
     6AAE 3020     
0319               
0320 6AB0 06A0  32         bl    @putat
     6AB2 2442     
0321 6AB4 004C                   byte 0,76
0322 6AB6 3A5E                   data txt.kb           ; Show "kb" string
0323               
0324 6AB8 06A0  32         bl    @putnum
     6ABA 2A24     
0325 6ABC 3B48                   byte pane.botrow,72   ; Show lines processed
0326 6ABE A504                   data edb.lines,rambuf,>3020
     6AC0 A100     
     6AC2 3020     
0327                       ;-------------------------------------------------------
0328                       ; Show message
0329                       ;-------------------------------------------------------
0330               fm.loadsave.cb.message:
0331 6AC4 06A0  32         bl    @hchar
     6AC6 27D2     
0332 6AC8 0034                   byte 0,52,32,20
     6ACA 2014     
0333 6ACC FFFF                   data EOL              ; Erase any previous message
0334               
0335 6ACE 06A0  32         bl    @at
     6AD0 26C6     
0336 6AD2 0034                   byte 0,52             ; Position cursor
0337                       ;-------------------------------------------------------
0338                       ; Get pointer and display overlay message
0339                       ;-------------------------------------------------------
0340 6AD4 C120  34         mov   @fh.workmode,tmp0     ; Get work mode
     6AD6 A45A     
0341 6AD8 0604  14         dec   tmp0                  ; Base 0 offset
0342 6ADA 0A14  18         sla   tmp0,1                ; Each entry is a word
0343 6ADC C164  34         mov   @fm.loadsave.cb.indicator3.data(tmp0),tmp1
     6ADE 6B02     
0344                                                   ; Get pointer to message
0345               
0346 6AE0 06A0  32         bl    @xutst0               ; Display string
     6AE2 2420     
0347                                                   ; \ i  tmp1 = Pointer to string
0348                                                   ; / i  @wyx = Cursor position at
0349                       ;-------------------------------------------------------
0350                       ; Setup one shot task for removing overlay message
0351                       ;-------------------------------------------------------
0352 6AE4 0204  20         li    tmp0,pane.topline.oneshot.clearmsg
     6AE6 3744     
0353 6AE8 C804  38         mov   tmp0,@tv.task.oneshot
     6AEA A226     
0354               
0355 6AEC 06A0  32         bl    @rsslot               ; \ Reset loop counter slot 3
     6AEE 2EF8     
0356 6AF0 0003                   data 3                ; / for getting consistent delay
0357                       ;------------------------------------------------------
0358                       ; Exit
0359                       ;------------------------------------------------------
0360               fm.loadsave.cb.indicator3.exit:
0361 6AF2 C839  50         mov   *stack+,@parm1        ; Pop @parm1
     6AF4 A006     
0362 6AF6 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0363 6AF8 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0364 6AFA C179  30         mov   *stack+,tmp1          ; Pop tmp1
0365 6AFC C139  30         mov   *stack+,tmp0          ; Pop tmp0
0366 6AFE C2F9  30         mov   *stack+,r11           ; Pop R11
0367 6B00 045B  20         b     *r11                  ; Return to caller
0368                       ;------------------------------------------------------
0369                       ; Table with pointers for messages to display.
0370                       ; (@fh.workmode used as index into table)
0371                       ;------------------------------------------------------
0372               fm.loadsave.cb.indicator3.data:
0373 6B02 3982             data  txt.done.load         ; id.file.loadfile
0374 6B04 3992             data  txt.done.insert       ; id.file.insertfile
0375 6B06 39A4             data  txt.done.append       ; id.file.appendfile
0376 6B08 39B6             data  txt.done.save         ; id.file.savefile
0377 6B0A 39B6             data  txt.done.save         ; id.file.saveblock
0378 6B0C 39F8             data  txt.done.clipboard    ; id.file.clipblock
0379 6B0E 39D6             data  txt.done.print        ; id.file.printfile
0380 6B10 39D6             data  txt.done.print        ; id.file.printblock
0381               
0382               *---------------------------------------------------------------
0383               * Callback function "File I/O error handler"
0384               * I/O error
0385               *---------------------------------------------------------------
0386               * Registered as pointer in @fh.callback4
0387               *---------------------------------------------------------------
0388               fm.loadsave.cb.fioerr:
0389 6B12 0649  14         dect  stack
0390 6B14 C64B  30         mov   r11,*stack            ; Save return address
0391 6B16 0649  14         dect  stack
0392 6B18 C644  30         mov   tmp0,*stack           ; Push tmp0
0393 6B1A 0649  14         dect  stack
0394 6B1C C645  30         mov   tmp1,*stack           ; Push tmp1
0395 6B1E 0649  14         dect  stack
0396 6B20 C646  30         mov   tmp2,*stack           ; Push tmp2
0397 6B22 0649  14         dect  stack
0398 6B24 C647  30         mov   tmp3,*stack           ; Push tmp3
0399 6B26 0649  14         dect  stack
0400 6B28 C648  30         mov   tmp4,*stack           ; Push tmp4
0401 6B2A 0649  14         dect  stack
0402 6B2C C660  46         mov   @parm1,*stack         ; Push @parm1
     6B2E A006     
0403                       ;------------------------------------------------------
0404                       ; Build I/O error message
0405                       ;------------------------------------------------------
0406 6B30 06A0  32         bl    @hchar
     6B32 27D2     
0407 6B34 3B00                   byte pane.botrow,0,32,80
     6B36 2050     
0408 6B38 FFFF                   data EOL              ; Erase loading/saving indicator
0409                       ;------------------------------------------------------
0410                       ; Determine message to display
0411                       ;------------------------------------------------------
0412 6B3A C120  34         mov   @fh.workmode,tmp0
     6B3C A45A     
0413 6B3E 0284  22         ci    tmp0,id.file.printfile
     6B40 0007     
0414 6B42 1318  14         jeq   fm.loadsave.cb.fioerr.print
0415 6B44 0284  22         ci    tmp0,id.file.printblock
     6B46 0008     
0416 6B48 1315  14         jeq   fm.loadsave.cb.fioerr.print
0417               
0418 6B4A 0284  22         ci    tmp0,id.file.savefile
     6B4C 0004     
0419 6B4E 130C  14         jeq   fm.loadsave.cb.fioerr.save
0420 6B50 0284  22         ci    tmp0,id.file.saveblock
     6B52 0005     
0421 6B54 1309  14         jeq   fm.loadsave.cb.fioerr.save
0422 6B56 0284  22         ci    tmp0,id.file.clipblock
     6B58 0006     
0423 6B5A 1306  14         jeq   fm.loadsave.cb.fioerr.save
0424                       ;------------------------------------------------------
0425                       ; Failed loading file
0426                       ;------------------------------------------------------
0427               fm.loadsave.cb.fioerr.load:
0428 6B5C 06A0  32         bl    @cpym2m
     6B5E 24DA     
0429 6B60 3BE4                   data txt.ioerr.load
0430 6B62 A234                   data tv.error.msg
0431 6B64 001E                   data 30               ; Error message
0432 6B66 100B  14         jmp   fm.loadsave.cb.fioerr.addmsg
0433                       ;------------------------------------------------------
0434                       ; Failed saving file
0435                       ;------------------------------------------------------
0436               fm.loadsave.cb.fioerr.save:
0437 6B68 06A0  32         bl    @cpym2m
     6B6A 24DA     
0438 6B6C 3BFA                   data txt.ioerr.save
0439 6B6E A234                   data tv.error.msg
0440 6B70 001E                   data 30               ; Error message
0441 6B72 1005  14         jmp   fm.loadsave.cb.fioerr.addmsg
0442                       ;------------------------------------------------------
0443                       ; Failed saving file
0444                       ;------------------------------------------------------
0445               fm.loadsave.cb.fioerr.print:
0446 6B74 06A0  32         bl    @cpym2m
     6B76 24DA     
0447 6B78 3C10                   data txt.ioerr.print
0448 6B7A A234                   data tv.error.msg
0449 6B7C 001E                   data 30               ; Error message
0450                       ;------------------------------------------------------
0451                       ; Add filename to error message
0452                       ;------------------------------------------------------
0453               fm.loadsave.cb.fioerr.addmsg:
0454 6B7E C120  34         mov   @fh.fname.ptr,tmp0
     6B80 A444     
0455 6B82 D194  26         movb  *tmp0,tmp2            ; Get length byte filename
0456 6B84 0986  32         srl   tmp2,8                ; Right align
0457               
0458 6B86 D1E0  34         movb  @tv.error.msg,tmp3    ; Get length byte error text
     6B88 A234     
0459 6B8A 0987  32         srl   tmp3,8                ; Right align
0460 6B8C C207  18         mov   tmp3,tmp4
0461               
0462 6B8E A1C6  18         a     tmp2,tmp3             ; \
0463 6B90 0A87  32         sla   tmp3,8                ; | Calculate length of error message
0464 6B92 D807  38         movb  tmp3,@tv.error.msg    ; / and write to length-prefix byte
     6B94 A234     
0465               
0466 6B96 0584  14         inc   tmp0                  ; RAM source address (skip length byte)
0467               
0468 6B98 0205  20         li    tmp1,tv.error.msg     ; \
     6B9A A234     
0469 6B9C A148  18         a     tmp4,tmp1             ; | RAM destination address
0470 6B9E 0585  14         inc   tmp1                  ; /
0471               
0472 6BA0 06A0  32         bl    @xpym2m               ; \ Copy CPU memory to CPU memory
     6BA2 24E0     
0473                                                   ; | i  tmp0 = ROM/RAM source
0474                                                   ; | i  tmp1 = RAM destination
0475                                                   ; / i  tmp2 = Bytes to copy
0476                       ;------------------------------------------------------
0477                       ; Reset filename to "new file"
0478                       ;------------------------------------------------------
0479 6BA4 C120  34         mov   @fh.workmode,tmp0     ; Get working mode
     6BA6 A45A     
0480 6BA8 0284  22         ci    tmp0,id.file.loadfile
     6BAA 0001     
0481 6BAC 1608  14         jne   !                     ; Only when reading full file
0482               
0483 6BAE 0204  20         li    tmp0,txt.newfile      ; New file
     6BB0 3A68     
0484 6BB2 C804  38         mov   tmp0,@edb.filename.ptr
     6BB4 A514     
0485               
0486 6BB6 0204  20         li    tmp0,txt.filetype.none
     6BB8 3BD8     
0487 6BBA C804  38         mov   tmp0,@edb.filetype.ptr
     6BBC A516     
0488                                                   ; Empty filetype string
0489                       ;------------------------------------------------------
0490                       ; Display I/O error message
0491                       ;------------------------------------------------------
0492 6BBE 06A0  32 !       bl    @pane.errline.show    ; Show error line
     6BC0 6CFC     
0493               
0494 6BC2 C820  54         mov   @tv.color,@parm1      ; Set normal color
     6BC4 A218     
     6BC6 A006     
0495 6BC8 06A0  32         bl    @pane.action.colorscheme.statlines
     6BCA 6D20     
0496                                                   ; Set color combination for status lines
0497                                                   ; \ i  @parm1 = Color combination
0498                                                   ; /
0499                       ;-------------------------------------------------------
0500                       ; Setup one shot task for removing overlay message
0501                       ;-------------------------------------------------------
0502 6BCC 0204  20         li    tmp0,pane.topline.oneshot.clearmsg
     6BCE 3744     
0503 6BD0 C804  38         mov   tmp0,@tv.task.oneshot
     6BD2 A226     
0504               
0505 6BD4 06A0  32         bl    @rsslot               ; \ Reset loop counter slot 3
     6BD6 2EF8     
0506 6BD8 0003                   data 3                ; / for getting consistent delay
0507                       ;------------------------------------------------------
0508                       ; Exit
0509                       ;------------------------------------------------------
0510               fm.loadsave.cb.fioerr.exit:
0511 6BDA C839  50         mov   *stack+,@parm1        ; Pop @parm1
     6BDC A006     
0512 6BDE C1F9  30         mov   *stack+,tmp3          ; Pop tmp4
0513 6BE0 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0514 6BE2 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0515 6BE4 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0516 6BE6 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0517 6BE8 C2F9  30         mov   *stack+,r11           ; Pop R11
0518 6BEA 045B  20         b     *r11                  ; Return to caller
0519               
0520               
0521               
0522               
0523               *---------------------------------------------------------------
0524               * Callback function "Memory full" error handler
0525               * Memory full error
0526               *---------------------------------------------------------------
0527               * Registered as pointer in @fh.callback5
0528               *---------------------------------------------------------------
0529               fm.load.cb.memfull:
0530 6BEC 0649  14         dect  stack
0531 6BEE C64B  30         mov   r11,*stack            ; Save return address
0532 6BF0 0649  14         dect  stack
0533 6BF2 C660  46         mov   @parm1,*stack         ; Push @parm1
     6BF4 A006     
0534                       ;------------------------------------------------------
0535                       ; Prepare for error message
0536                       ;------------------------------------------------------
0537 6BF6 06A0  32         bl    @hchar
     6BF8 27D2     
0538 6BFA 3B00                   byte pane.botrow,0,32,55
     6BFC 2037     
0539 6BFE FFFF                   data EOL              ; Erase loading indicator
0540                       ;------------------------------------------------------
0541                       ; Failed loading file
0542                       ;------------------------------------------------------
0543 6C00 06A0  32         bl    @cpym2m
     6C02 24DA     
0544 6C04 3C44                   data txt.memfull.load
0545 6C06 A234                   data tv.error.msg
0546 6C08 002E                   data 46               ; Error message
0547                       ;------------------------------------------------------
0548                       ; Display memory full error message
0549                       ;------------------------------------------------------
0550 6C0A 06A0  32         bl    @pane.errline.show    ; Show error line
     6C0C 6CFC     
0551               
0552 6C0E C820  54         mov   @tv.color,@parm1      ; Set normal color
     6C10 A218     
     6C12 A006     
0553 6C14 06A0  32         bl    @pane.action.colorscheme.statlines
     6C16 6D20     
0554                                                   ; Set color combination for status lines
0555                                                   ; \ i  @parm1 = Color combination
0556                                                   ; /
0557                       ;------------------------------------------------------
0558                       ; Exit
0559                       ;------------------------------------------------------
0560               fm.load.cb.memfull.exit:
0561 6C18 C839  50         mov   *stack+,@parm1        ; Pop @parm1
     6C1A A006     
0562 6C1C C2F9  30         mov   *stack+,r11           ; Pop R11
0563 6C1E 045B  20         b     *r11                  ; Return to caller
                   < stevie_b2.asm
0083                       copy  "fm.browse.asm"       ; File manager browse support routines
     **** ****     > fm.browse.asm
0001               * FILE......: fm.browse.asm
0002               * Purpose...: File Manager - File browse support routines
0003               
0004               *---------------------------------------------------------------
0005               * Increase/Decrease last-character of current filename
0006               *---------------------------------------------------------------
0007               * bl   @fm.browse.fname.suffix
0008               *---------------------------------------------------------------
0009               * INPUT
0010               * parm1        = Pointer to device and filename
0011               * parm2        = Increase (>FFFF) or Decrease (>0000) ASCII
0012               *--------------------------------------------------------------
0013               * Register usage
0014               * tmp0, tmp1
0015               ********|*****|*********************|**************************
0016               fm.browse.fname.suffix:
0017 6C20 0649  14         dect  stack
0018 6C22 C64B  30         mov   r11,*stack            ; Save return address
0019 6C24 0649  14         dect  stack
0020 6C26 C644  30         mov   tmp0,*stack           ; Push tmp0
0021 6C28 0649  14         dect  stack
0022 6C2A C645  30         mov   tmp1,*stack           ; Push tmp1
0023                       ;------------------------------------------------------
0024                       ; Assert
0025                       ;------------------------------------------------------
0026 6C2C C120  34         mov   @parm1,tmp0           ; Get pointer to filename
     6C2E A006     
0027 6C30 133C  14         jeq   fm.browse.fname.suffix.exit
0028                                                   ; Exit early if pointer is null
0029                       ;------------------------------------------------------
0030                       ; Get last character in filename
0031                       ;------------------------------------------------------
0032 6C32 D154  26         movb  *tmp0,tmp1            ; Get length of current filename
0033 6C34 0985  32         srl   tmp1,8                ; MSB to LSB
0034 6C36 A105  18         a     tmp1,tmp0             ; Move to last character
0035               
0036                       ;------------------------------------------------------
0037                       ; Get character in filename
0038                       ;------------------------------------------------------
0039               fm.browse.fname.suffix.getchar:
0040 6C38 D154  26         movb  *tmp0,tmp1            ; Get character
0041 6C3A 0985  32         srl   tmp1,8                ; MSB to LSB
0042 6C3C 1336  14         jeq   fm.browse.fname.suffix.exit
0043                                                   ; Exit early if empty filename
0044                       ;------------------------------------------------------
0045                       ; Back-off if white space character found
0046                       ;------------------------------------------------------
0047 6C3E 0285  22         ci    tmp1,32               ; ASCII 32 (space)  ?
     6C40 0020     
0048 6C42 1312  14         jeq   fm.browse.fname.backoff
0049                       ;------------------------------------------------------
0050                       ; Check mode (increase/decrease) character ASCII value
0051                       ;------------------------------------------------------
0052 6C44 C1A0  34         mov   @parm2,tmp2           ; Get mode
     6C46 A008     
0053 6C48 131D  14         jeq   fm.browse.fname.suffix.dec
0054                                                   ; Decrease ASCII if mode = 0
0055                       ;------------------------------------------------------
0056                       ; Increase ASCII value last character in filename
0057                       ;------------------------------------------------------
0058               fm.browse.fname.suffix.inc:
0059 6C4A 0285  22         ci    tmp1,48               ; ASCII 48 (char 0) ?
     6C4C 0030     
0060 6C4E 1108  14         jlt   fm.browse.fname.suffix.inc.crash
0061 6C50 0285  22         ci    tmp1,57               ; ASCII 57 (char 9) ?
     6C52 0039     
0062 6C54 1112  14         jlt   !                     ; Next character
0063 6C56 1313  14         jeq   fm.browse.fname.suffix.inc.alpha
0064                                                   ; Swith to alpha range A..Z
0065 6C58 0285  22         ci    tmp1,90               ; ASCII 132 (char Z) ?
     6C5A 005A     
0066 6C5C 1326  14         jeq   fm.browse.fname.suffix.exit
0067                                                   ; Already last alpha character, so exit
0068 6C5E 110D  14         jlt   !                     ; Next character
0069                       ;------------------------------------------------------
0070                       ; Invalid character, crash and burn
0071                       ;------------------------------------------------------
0072               fm.browse.fname.suffix.inc.crash:
0073 6C60 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     6C62 FFCE     
0074 6C64 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     6C66 2026     
0075                       ;------------------------------------------------------
0076                       ; Back to previous character
0077                       ;------------------------------------------------------
0078               fm.browse.fname.backoff:
0079 6C68 8804  34         c     tmp0,@parm1           ; Already at 1st character?
     6C6A A006     
0080 6C6C 1302  14         jeq   fm.browse.fname.backoff.crash
0081 6C6E 0604  14         dec   tmp0                  ; Back off to previous character
0082 6C70 10E3  14         jmp   fm.browse.fname.suffix.getchar
0083                       ;------------------------------------------------------
0084                       ; Backoff assert
0085                       ;------------------------------------------------------
0086               fm.browse.fname.backoff.crash:
0087 6C72 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     6C74 FFCE     
0088 6C76 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     6C78 2026     
0089                       ;------------------------------------------------------
0090                       ; Increase ASCII value last character in filename
0091                       ;------------------------------------------------------
0092 6C7A 0585  14 !       inc   tmp1                  ; Increase ASCII value
0093 6C7C 1014  14         jmp   fm.browse.fname.suffix.store
0094               fm.browse.fname.suffix.inc.alpha:
0095 6C7E 0205  20         li    tmp1,65               ; Set ASCII 65 (char A)
     6C80 0041     
0096 6C82 1011  14         jmp   fm.browse.fname.suffix.store
0097                       ;------------------------------------------------------
0098                       ; Decrease ASCII value last character in filename
0099                       ;------------------------------------------------------
0100               fm.browse.fname.suffix.dec:
0101 6C84 0285  22         ci    tmp1,48               ; ASCII 48 (char 0) ?
     6C86 0030     
0102 6C88 1310  14         jeq   fm.browse.fname.suffix.exit
0103                                                   ; Already first numeric character, so exit
0104 6C8A 0285  22         ci    tmp1,57               ; ASCII 57 (char 9) ?
     6C8C 0039     
0105 6C8E 1207  14         jle   !                     ; Previous character
0106 6C90 0285  22         ci    tmp1,65               ; ASCII 65 (char A) ?
     6C92 0041     
0107 6C94 1306  14         jeq   fm.browse.fname.suffix.dec.numeric
0108                                                   ; Switch to numeric range 0..9
0109 6C96 11E4  14         jlt   fm.browse.fname.suffix.inc.crash
0110                                                   ; Invalid character
0111 6C98 0285  22         ci    tmp1,132              ; ASCII 132 (char Z) ?
     6C9A 0084     
0112 6C9C 1306  14         jeq   fm.browse.fname.suffix.exit
0113 6C9E 0605  14 !       dec   tmp1                  ; Decrease ASCII value
0114 6CA0 1002  14         jmp   fm.browse.fname.suffix.store
0115               fm.browse.fname.suffix.dec.numeric:
0116 6CA2 0205  20         li    tmp1,57               ; Set ASCII 57 (char 9)
     6CA4 0039     
0117                       ;------------------------------------------------------
0118                       ; Store updated character
0119                       ;------------------------------------------------------
0120               fm.browse.fname.suffix.store:
0121 6CA6 0A85  32         sla   tmp1,8                ; LSB to MSB
0122 6CA8 D505  30         movb  tmp1,*tmp0            ; Store updated character
0123                       ;------------------------------------------------------
0124                       ; Exit
0125                       ;------------------------------------------------------
0126               fm.browse.fname.suffix.exit:
0127 6CAA C179  30         mov   *stack+,tmp1          ; Pop tmp1
0128 6CAC C139  30         mov   *stack+,tmp0          ; Pop tmp0
0129 6CAE C2F9  30         mov   *stack+,r11           ; Pop R11
0130 6CB0 045B  20         b     *r11                  ; Return to caller
                   < stevie_b2.asm
0084                       copy  "data.pab.tpl.asm"    ; PAB templates
     **** ****     > data.pab.tpl.asm
0001               * FILE......: data.pab.tpl.asm
0002               * Purpose...: PAB templates for accessing files
0003               
0004               
0005               ***************************************************************
0006               * PAB for accessing catalog file
0007               ********|*****|*********************|**************************
0008                       even                        ; Must always start on even address!!
0009               fh.file.pab.header.cat:
0010 6CB2 00               byte  io.op.open            ;  0    - OPEN
0011 6CB3   0D             byte  io.rel.inp.int.fix    ;  1    - INPUT, RELATIVE, INTERNAL, FIXED
0012 6CB4 3800             data  fh.vrecbuf            ;  2-3  - Record buffer in VDP memory
0013 6CB6 00               byte  00                    ;  4    - Record length (unset, DSR control)
0014 6CB7   00             byte  00                    ;  5    - Character count
0015 6CB8 0000             data  >0000                 ;  6-7  - Seek record (only for fixed recs)
0016 6CBA 00               byte  >00                   ;  8    - Screen offset (cassette DSR only)
0017                       ;------------------------------------------------------
0018                       ; Filename descriptor part (variable length)
0019                       ;------------------------------------------------------
0020                       ; byte  12                  ;  9    - File descriptor length
0021                       ; text 'DSK3.XBEADOC'       ; 10-.. - File descriptor
0022                                                   ;         (Device + '.' + File name)
0023               
0024               
0025               ***************************************************************
0026               * PAB for accessing DV/80 file
0027               ********|*****|*********************|**************************
0028                       even                        ; Must always start on even address!!
0029               fh.file.pab.header:
0030 6CBC 00               byte  io.op.open            ;  0    - OPEN
0031 6CBD   14             byte  io.seq.inp.dis.var    ;  1    - INPUT, VARIABLE, DISPLAY
0032 6CBE 3800             data  fh.vrecbuf            ;  2-3  - Record buffer in VDP memory
0033 6CC0 50               byte  80                    ;  4    - Record length (80 chars max)
0034 6CC1   00             byte  00                    ;  5    - Character count
0035 6CC2 0000             data  >0000                 ;  6-7  - Seek record (only for fixed recs)
0036 6CC4 00               byte  >00                   ;  8    - Screen offset (cassette DSR only)
0037                       ;------------------------------------------------------
0038                       ; File descriptor part (variable length)
0039                       ;------------------------------------------------------
0040                       ; byte  12                  ;  9    - File descriptor length
0041                       ; text 'DSK3.XBEADOC'       ; 10-.. - File descriptor
0042                                                   ;         (Device + '.' + File name)
                   < stevie_b2.asm
0085                       ;-----------------------------------------------------------------------
0086                       ; Stubs
0087                       ;-----------------------------------------------------------------------
0088                       copy  "rom.stubs.bank2.asm" ; Bank specific stubs
     **** ****     > rom.stubs.bank2.asm
0001               * FILE......: rom.stubs.bank2.asm
0002               * Purpose...: Bank 2 stubs for functions in other banks
0003               
0004               
0005               ***************************************************************
0006               * Stub for "edb.line.unpack"
0007               * bank1 vec.11
0008               ********|*****|*********************|**************************
0009               edb.line.unpack:
0010 6CC6 0649  14         dect  stack
0011 6CC8 C64B  30         mov   r11,*stack            ; Save return address
0012                       ;------------------------------------------------------
0013                       ; Call function in bank 1
0014                       ;------------------------------------------------------
0015 6CCA 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     6CCC 2FCA     
0016 6CCE 6002                   data bank1.rom        ; | i  p0 = bank address
0017 6CD0 7FD4                   data vec.11           ; | i  p1 = Vector with target address
0018 6CD2 6004                   data bankid           ; / i  p2 = Source ROM bank for return
0019                       ;------------------------------------------------------
0020                       ; Exit
0021                       ;------------------------------------------------------
0022 6CD4 C2F9  30         mov   *stack+,r11           ; Pop r11
0023 6CD6 045B  20         b     *r11                  ; Return to caller
0024               
0025               
0026               ***************************************************************
0027               * Stub for "fb.refresh"
0028               * bank4 vec.8
0029               ********|*****|*********************|**************************
0030               fb.refresh:
0031 6CD8 0649  14         dect  stack
0032 6CDA C64B  30         mov   r11,*stack            ; Save return address
0033                       ;------------------------------------------------------
0034                       ; Call function in bank 4
0035                       ;------------------------------------------------------
0036 6CDC 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     6CDE 2FCA     
0037 6CE0 6008                   data bank4.rom        ; | i  p0 = bank address
0038 6CE2 7FCE                   data vec.8            ; | i  p1 = Vector with target address
0039 6CE4 6004                   data bankid           ; / i  p2 = Source ROM bank for return
0040                       ;------------------------------------------------------
0041                       ; Exit
0042                       ;------------------------------------------------------
0043 6CE6 C2F9  30         mov   *stack+,r11           ; Pop r11
0044 6CE8 045B  20         b     *r11                  ; Return to caller
0045               
0046               
0047               
0048               ***************************************************************
0049               * Stub for "fb.vdpdump"
0050               * bank1 vec.21
0051               ********|*****|*********************|**************************
0052               fb.vdpdump:
0053 6CEA 0649  14         dect  stack
0054 6CEC C64B  30         mov   r11,*stack            ; Save return address
0055                       ;------------------------------------------------------
0056                       ; Call function in bank 1
0057                       ;------------------------------------------------------
0058 6CEE 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     6CF0 2FCA     
0059 6CF2 6002                   data bank1.rom        ; | i  p0 = bank address
0060 6CF4 7FE8                   data vec.21           ; | i  p1 = Vector with target address
0061 6CF6 6004                   data bankid           ; / i  p2 = Source ROM bank for return
0062                       ;------------------------------------------------------
0063                       ; Exit
0064                       ;------------------------------------------------------
0065 6CF8 C2F9  30         mov   *stack+,r11           ; Pop r11
0066 6CFA 045B  20         b     *r11                  ; Return to caller
0067               
0068               
0069               
0070               
0071               ***************************************************************
0072               * Stub for "pane.errline.show"
0073               * bank1 vec.30
0074               ********|*****|*********************|**************************
0075               pane.errline.show:
0076 6CFC 0649  14         dect  stack
0077 6CFE C64B  30         mov   r11,*stack            ; Save return address
0078                       ;------------------------------------------------------
0079                       ; Call function in bank 1
0080                       ;------------------------------------------------------
0081 6D00 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     6D02 2FCA     
0082 6D04 6002                   data bank1.rom        ; | i  p0 = bank address
0083 6D06 7FFA                   data vec.30           ; | i  p1 = Vector with target address
0084 6D08 6004                   data bankid           ; / i  p2 = Source ROM bank for return
0085                       ;------------------------------------------------------
0086                       ; Exit
0087                       ;------------------------------------------------------
0088 6D0A C2F9  30         mov   *stack+,r11           ; Pop r11
0089 6D0C 045B  20         b     *r11                  ; Return to caller
0090               
0091               
0092               ***************************************************************
0093               * Stub for "pane.action.colorscheme.load"
0094               * bank1 vec.31
0095               ********|*****|*********************|**************************
0096               pane.action.colorscheme.load
0097 6D0E 0649  14         dect  stack
0098 6D10 C64B  30         mov   r11,*stack            ; Save return address
0099                       ;------------------------------------------------------
0100                       ; Call function in bank 1
0101                       ;------------------------------------------------------
0102 6D12 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     6D14 2FCA     
0103 6D16 6002                   data bank1.rom        ; | i  p0 = bank address
0104 6D18 7FFC                   data vec.31           ; | i  p1 = Vector with target address
0105 6D1A 6004                   data bankid           ; / i  p2 = Source ROM bank for return
0106                       ;------------------------------------------------------
0107                       ; Exit
0108                       ;------------------------------------------------------
0109 6D1C C2F9  30         mov   *stack+,r11           ; Pop r11
0110 6D1E 045B  20         b     *r11                  ; Return to caller
0111               
0112               
0113               ***************************************************************
0114               * Stub for "pane.action.colorscheme.statuslines"
0115               * bank1 vec.32
0116               ********|*****|*********************|**************************
0117               pane.action.colorscheme.statlines
0118 6D20 0649  14         dect  stack
0119 6D22 C64B  30         mov   r11,*stack            ; Save return address
0120                       ;------------------------------------------------------
0121                       ; Call function in bank 1
0122                       ;------------------------------------------------------
0123 6D24 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     6D26 2FCA     
0124 6D28 6002                   data bank1.rom        ; | i  p0 = bank address
0125 6D2A 7FFE                   data vec.32           ; | i  p1 = Vector with target address
0126 6D2C 6004                   data bankid           ; / i  p2 = Source ROM bank for return
0127                       ;------------------------------------------------------
0128                       ; Exit
0129                       ;------------------------------------------------------
0130 6D2E C2F9  30         mov   *stack+,r11           ; Pop r11
0131 6D30 045B  20         b     *r11                  ; Return to caller
0132               
0133               
0134               ***************************************************************
0135               * Stub for "edb.clear.sams"
0136               * bank5 vec.1
0137               ********|*****|*********************|**************************
0138               edb.clear.sams:
0139 6D32 0649  14         dect  stack
0140 6D34 C64B  30         mov   r11,*stack            ; Save return address
0141                       ;------------------------------------------------------
0142                       ; Call function in bank 5
0143                       ;------------------------------------------------------
0144 6D36 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     6D38 2FCA     
0145 6D3A 600A                   data bank5.rom        ; | i  p0 = bank address
0146 6D3C 7FC0                   data vec.1            ; | i  p1 = Vector with target address
0147 6D3E 6004                   data bankid           ; / i  p2 = Source ROM bank for return
0148                       ;------------------------------------------------------
0149                       ; Exit
0150                       ;------------------------------------------------------
0151 6D40 C2F9  30         mov   *stack+,r11           ; Pop r11
0152 6D42 045B  20         b     *r11                  ; Return to caller
                   < stevie_b2.asm
0089                       copy  "rom.stubs.bankx.asm" ; Stubs to include in all banks > 0
     **** ****     > rom.stubs.bankx.asm
0001               * FILE......: rom.stubs.bankx.asm
0002               * Purpose...: Stubs to include in all banks > 0
0003               
0004               
0006               ***************************************************************
0007               * Stub for "mem.sams.setup.stevie"
0008               * bank1 vec.1
0009               ********|*****|*********************|**************************
0010               mem.sams.setup.stevie:
0011 6D44 0649  14         dect  stack
0012 6D46 C64B  30         mov   r11,*stack            ; Save return address
0013                       ;------------------------------------------------------
0014                       ; Call function in bank 1
0015                       ;------------------------------------------------------
0016 6D48 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     6D4A 2FCA     
0017 6D4C 6002                   data bank1.rom        ; | i  p0 = bank address
0018 6D4E 7FC0                   data vec.1            ; | i  p1 = Vector with target address
0019 6D50 6004                   data bankid           ; / i  p2 = Source ROM bank for return
0020                       ;------------------------------------------------------
0021                       ; Exit
0022                       ;------------------------------------------------------
0023 6D52 C2F9  30         mov   *stack+,r11           ; Pop r11
0024 6D54 045B  20         b     *r11                  ; Return to caller
0026               
0027               
0029               ***************************************************************
0030               * Stub for "mem.sams.set.legacy"
0031               * bank7 vec.1
0032               ********|*****|*********************|**************************
0033               mem.sams.set.legacy:
0034 6D56 0649  14         dect  stack
0035 6D58 C64B  30         mov   r11,*stack            ; Save return address
0036                       ;------------------------------------------------------
0037                       ; Dump VDP patterns
0038                       ;------------------------------------------------------
0039 6D5A 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     6D5C 2FCA     
0040 6D5E 600E                   data bank7.rom        ; | i  p0 = bank address
0041 6D60 7FC0                   data vec.1            ; | i  p1 = Vector with target address
0042 6D62 6004                   data bankid           ; / i  p2 = Source ROM bank for return
0043                       ;------------------------------------------------------
0044                       ; Exit
0045                       ;------------------------------------------------------
0046 6D64 C2F9  30         mov   *stack+,r11           ; Pop r11
0047 6D66 045B  20         b     *r11                  ; Return to caller
0049               
0050               
0052               ***************************************************************
0053               * Stub for "mem.sams.set.boot"
0054               * bank7 vec.2
0055               ********|*****|*********************|**************************
0056               mem.sams.set.boot:
0057 6D68 0649  14         dect  stack
0058 6D6A C64B  30         mov   r11,*stack            ; Save return address
0059                       ;------------------------------------------------------
0060                       ; Dump VDP patterns
0061                       ;------------------------------------------------------
0062 6D6C 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     6D6E 2FCA     
0063 6D70 600E                   data bank7.rom        ; | i  p0 = bank address
0064 6D72 7FC2                   data vec.2            ; | i  p1 = Vector with target address
0065 6D74 6004                   data bankid           ; / i  p2 = Source ROM bank for return
0066                       ;------------------------------------------------------
0067                       ; Exit
0068                       ;------------------------------------------------------
0069 6D76 C2F9  30         mov   *stack+,r11           ; Pop r11
0070 6D78 045B  20         b     *r11                  ; Return to caller
0072               
0073               
0075               ***************************************************************
0076               * Stub for "mem.sams.set.stevie"
0077               * bank7 vec.3
0078               ********|*****|*********************|**************************
0079               mem.sams.set.stevie:
0080 6D7A 0649  14         dect  stack
0081 6D7C C64B  30         mov   r11,*stack            ; Save return address
0082                       ;------------------------------------------------------
0083                       ; Dump VDP patterns
0084                       ;------------------------------------------------------
0085 6D7E 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     6D80 2FCA     
0086 6D82 600E                   data bank7.rom        ; | i  p0 = bank address
0087 6D84 7FC4                   data vec.3            ; | i  p1 = Vector with target address
0088 6D86 6004                   data bankid           ; / i  p2 = Source ROM bank for return
0089                       ;------------------------------------------------------
0090                       ; Exit
0091                       ;------------------------------------------------------
0092 6D88 C2F9  30         mov   *stack+,r11           ; Pop r11
0093 6D8A 045B  20         b     *r11                  ; Return to caller
0095               
0096               
0098               ***************************************************************
0099               * Stub for "magic.set"
0100               * bank7 vec.20
0101               ********|*****|*********************|**************************
0102               magic.set:
0103 6D8C 0649  14         dect  stack
0104 6D8E C64B  30         mov   r11,*stack            ; Save return address
0105                       ;------------------------------------------------------
0106                       ; Dump VDP patterns
0107                       ;------------------------------------------------------
0108 6D90 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     6D92 2FCA     
0109 6D94 600E                   data bank7.rom        ; | i  p0 = bank address
0110 6D96 7FE6                   data vec.20           ; | i  p1 = Vector with target address
0111 6D98 6004                   data bankid           ; / i  p2 = Source ROM bank for return
0112                       ;------------------------------------------------------
0113                       ; Exit
0114                       ;------------------------------------------------------
0115 6D9A C2F9  30         mov   *stack+,r11           ; Pop r11
0116 6D9C 045B  20         b     *r11                  ; Return to caller
0118               
0119               
0121               ***************************************************************
0122               * Stub for "magic.clear"
0123               * bank7 vec.21
0124               ********|*****|*********************|**************************
0125               magic.clear:
0126 6D9E 0649  14         dect  stack
0127 6DA0 C64B  30         mov   r11,*stack            ; Save return address
0128                       ;------------------------------------------------------
0129                       ; Dump VDP patterns
0130                       ;------------------------------------------------------
0131 6DA2 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     6DA4 2FCA     
0132 6DA6 600E                   data bank7.rom        ; | i  p0 = bank address
0133 6DA8 7FE8                   data vec.21           ; | i  p1 = Vector with target address
0134 6DAA 6004                   data bankid           ; / i  p2 = Source ROM bank for return
0135                       ;------------------------------------------------------
0136                       ; Exit
0137                       ;------------------------------------------------------
0138 6DAC C2F9  30         mov   *stack+,r11           ; Pop r11
0139 6DAE 045B  20         b     *r11                  ; Return to caller
0141               
0142               
0144               ***************************************************************
0145               * Stub for "magic.check"
0146               * bank7 vec.22
0147               ********|*****|*********************|**************************
0148               magic.check:
0149 6DB0 0649  14         dect  stack
0150 6DB2 C64B  30         mov   r11,*stack            ; Save return address
0151                       ;------------------------------------------------------
0152                       ; Dump VDP patterns
0153                       ;------------------------------------------------------
0154 6DB4 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     6DB6 2FCA     
0155 6DB8 600E                   data bank7.rom        ; | i  p0 = bank address
0156 6DBA 7FEA                   data vec.22           ; | i  p1 = Vector with target address
0157 6DBC 6004                   data bankid           ; / i  p2 = Source ROM bank for return
0158                       ;------------------------------------------------------
0159                       ; Exit
0160                       ;------------------------------------------------------
0161 6DBE C2F9  30         mov   *stack+,r11           ; Pop r11
0162 6DC0 045B  20         b     *r11                  ; Return to caller
                   < stevie_b2.asm
0090                       ;-----------------------------------------------------------------------
0091                       ; Program data
0092                       ;-----------------------------------------------------------------------
0093                                                   ; Not applicable
0094                       ;-----------------------------------------------------------------------
0095                       ; Bank full check
0096                       ;-----------------------------------------------------------------------
0100                       ;-----------------------------------------------------------------------
0101                       ; Show ROM bank in CPU crash screen
0102                       ;-----------------------------------------------------------------------
0103                       copy  "rom.crash.asm"
     **** ****     > rom.crash.asm
0001               * FILE......: rom.crash.asm
0002               * Purpose...: Show ROM bank number on CPU crash
0003               
0004               ***************************************************************
0005               * Show ROM bank number on CPU crash
0006               ********|*****|*********************|**************************
0007               cpu.crash.showbank:
0008                       aorg  bankx.crash.showbank
0009 7F50 06A0  32         bl    @putat
     7F52 2442     
0010 7F54 0314                   byte 3,20
0011 7F56 7F88                   data cpu.crash.showbank.bankstr
0012 7F58 10FF  14         jmp   $
                   < stevie_b2.asm
0104                       ;-----------------------------------------------------------------------
0105                       ; Table for VDP modes
0106                       ;-----------------------------------------------------------------------
0107                       copy  "data.vdpmodes.asm"   ; Table for VDP modes
     **** ****     > data.vdpmodes.asm
0001               * FILE......: data.vdp.modes.asm
0002               * Purpose...: VDP modes tables
0003               
0004                           aorg bankx.vdptab
0005               
0006               ; ====================================================================
0007               ; Keep the tables in sequence, or change offsets in equates.f18a.*.asm
0008               ; ====================================================================
0009               
0010               ***************************************************************
0011               * Textmode (80 columns, 30 rows) - F18A
0012               *--------------------------------------------------------------
0013               *
0014               * ; VDP#0 Control bits
0015               * ;      bit 6=0: M3 | Graphics 1 mode
0016               * ;      bit 7=0: Disable external VDP input
0017               * ; VDP#1 Control bits
0018               * ;      bit 0=1: 16K selection
0019               * ;      bit 1=1: Enable display
0020               * ;      bit 2=1: Enable VDP interrupt
0021               * ;      bit 3=1: M1 \ TEXT MODE
0022               * ;      bit 4=0: M2 /
0023               * ;      bit 5=0: reserved
0024               * ;      bit 6=0: 8x8 sprites
0025               * ;      bit 7=0: Sprite magnification (1x)
0026               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >960)
0027               * ; VDP#3 PCT (Pattern color table)      at >0FC0  (>3F * >040)
0028               * ; VDP#4 PDT (Pattern descriptor table) at >1000  (>02 * >800)
0029               * ; VDP#5 SAT (sprite attribute list)    at >2180  (>43 * >080)
0030               * ; VDP#6 SPT (Sprite pattern table)     at >2800  (>05 * >800)
0031               * ; VDP#7 Set foreground/background color
0032               ***************************************************************
0033               stevie.80x30:
0034 7F60 04F0             byte  >04,>f0,>00,>3f,>02,>43,>05,SPFCLR,0,80
     7F62 003F     
     7F64 0243     
     7F66 05F4     
     7F68 0050     
0035               
0036               
0037               ***************************************************************
0038               * Textmode (80 columns, 60 rows) - F18A
0039               *--------------------------------------------------------------
0040               *
0041               * ; VDP#0 Control bits
0042               * ;      bit 6=0: M3 | Graphics 1 mode
0043               * ;      bit 7=0: Disable external VDP input
0044               * ; VDP#1 Control bits
0045               * ;      bit 0=1: 16K selection
0046               * ;      bit 1=1: Enable display
0047               * ;      bit 2=1: Enable VDP interrupt
0048               * ;      bit 3=1: M1 \ TEXT MODE
0049               * ;      bit 4=0: M2 /
0050               * ;      bit 5=0: reserved
0051               * ;      bit 6=0: 8x8 sprites
0052               * ;      bit 7=0: Sprite magnification (1x)
0053               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >12c0)
0054               * ; VDP#3 PCT (Pattern color table)      at >0FC0  (>3F * >040) - not used!
0055               * ; VDP#4 PDT (Pattern descriptor table) at >3000  (>06 * >800)
0056               * ; VDP#5 SAT (sprite attribute list)    at >3A00  (>74 * >080)
0057               * ; VDP#6 SPT (Sprite pattern table)     at >3800  (>07 * >800)
0058               * ; VDP#7 Set foreground/background color
0059               ***************************************************************
0060               stevie.80x60:
0061 7F6A 04F0             byte  >04,>f0,>00,>3f,>06,>74,>07,SPFCLR,0,80
     7F6C 003F     
     7F6E 0674     
     7F70 07F4     
     7F72 0050     
0062               
0063               
0064               
0065               ***************************************************************
0066               * TI Basic mode (32 columns/24 rows)
0067               *--------------------------------------------------------------
0068               tibasic.32x24:
0069 7F74 00E2             byte  >00,>e2,>00,>0c,>00,>06,>00,>07,0,32
     7F76 000C     
     7F78 0006     
     7F7A 0007     
     7F7C 0020     
0070               *
0071               * ; VDP#0 Control bits
0072               * ;      bit 6=0: M3 | Graphics 1 mode
0073               * ;      bit 7=0: Disable external VDP input
0074               * ; VDP#1 Control bits
0075               * ;      bit 0=1: 16K selection
0076               * ;      bit 1=1: Enable display
0077               * ;      bit 2=1: Enable VDP interrupt
0078               * ;      bit 3=0: M1 \ Graphics 1 mode
0079               * ;      bit 4=0: M2 /
0080               * ;      bit 5=0: reserved
0081               * ;      bit 6=1: 16x16 sprites
0082               * ;      bit 7=0: Sprite magnification (1x)
0083               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0084               * ; VDP#3 PCT (Pattern color table)      at >0300  (>0C * >040)
0085               * ; VDP#4 PDT (Pattern descriptor table) at >0000  (>00 * >800)
0086               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0087               * ; VDP#6 SPT (Sprite pattern table)     at >0000  (>00 * >800)
0088               * ; VDP#7 Set screen background color
0089               
0090               
0091               
0092               
0093               
0094               
0095               ***************************************************************
0096               * TI Basic mode (32 columns/30 rows) - F18A
0097               *--------------------------------------------------------------
0098               tibasic.32x30:
0099 7F7E 00E2             byte  >00,>e2,>00,>0c,>00,>06,>00,>07,0,32
     7F80 000C     
     7F82 0006     
     7F84 0007     
     7F86 0020     
0100               *
0101               * ; VDP#0 Control bits
0102               * ;      bit 6=0: M3 | Graphics 1 mode
0103               * ;      bit 7=0: Disable external VDP input
0104               * ; VDP#1 Control bits
0105               * ;      bit 0=1: 16K selection
0106               * ;      bit 1=1: Enable display
0107               * ;      bit 2=1: Enable VDP interrupt
0108               * ;      bit 3=0: M1 \ Graphics 1 mode
0109               * ;      bit 4=0: M2 /
0110               * ;      bit 5=0: reserved
0111               * ;      bit 6=1: 16x16 sprites
0112               * ;      bit 7=0: Sprite magnification (1x)
0113               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0114               * ; VDP#3 PCT (Pattern color table)      at >0300  (>0C * >040)
0115               * ; VDP#4 PDT (Pattern descriptor table) at >0000  (>00 * >800)
0116               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0117               * ; VDP#6 SPT (Sprite pattern table)     at >0000  (>00 * >800)
0118               * ; VDP#7 Set screen background color
0119               * ;
0120               * ; The table by itself is not sufficient for turning on 30 rows
0121               * ; mode. You also need to unlock the F18a and set VR49 (>31) to
0122               * ; value >40.
                   < stevie_b2.asm
0108                       ;-----------------------------------------------------------------------
0109                       ; Vector table
0110                       ;-----------------------------------------------------------------------
0111                       copy  "rom.vectors.bank2.asm"
     **** ****     > rom.vectors.bank2.asm
0001               * FILE......: rom.vectors.bank2.asm
0002               * Purpose...: Bank 2 vectors for trampoline function
0003               
0004               *--------------------------------------------------------------
0005               * ROM identification string for CPU crash
0006               *--------------------------------------------------------------
0007               cpu.crash.showbank.bankstr:
0008 7F88 0552             stri 'ROM#2'
     7F8A 4F4D     
     7F8C 2332     
0009               
0010               *--------------------------------------------------------------
0011               * Vector table for trampoline functions
0012               *--------------------------------------------------------------
0013                       aorg  bankx.vectab
0014               
0015 7FC0 66AE     vec.1   data  fm.loadfile           ;
0016 7FC2 678E     vec.2   data  fm.insertfile         ;
0017 7FC4 6C20     vec.3   data  fm.browse.fname.suffix
0018 7FC6 6808     vec.4   data  fm.savefile           ;
0019 7FC8 6886     vec.5   data  fm.newfile            ;
0020 7FCA 2026     vec.6   data  cpu.crash             ;
0021 7FCC 2026     vec.7   data  cpu.crash             ;
0022 7FCE 2026     vec.8   data  cpu.crash             ;
0023 7FD0 2026     vec.9   data  cpu.crash             ;
0024 7FD2 2026     vec.10  data  cpu.crash             ;
0025 7FD4 2026     vec.11  data  cpu.crash             ;
0026 7FD6 2026     vec.12  data  cpu.crash             ;
0027 7FD8 2026     vec.13  data  cpu.crash             ;
0028 7FDA 2026     vec.14  data  cpu.crash             ;
0029 7FDC 2026     vec.15  data  cpu.crash             ;
0030 7FDE 2026     vec.16  data  cpu.crash             ;
0031 7FE0 2026     vec.17  data  cpu.crash             ;
0032 7FE2 2026     vec.18  data  cpu.crash             ;
0033 7FE4 2026     vec.19  data  cpu.crash             ;
0034 7FE6 2026     vec.20  data  cpu.crash             ;
0035 7FE8 2026     vec.21  data  cpu.crash             ;
0036 7FEA 2026     vec.22  data  cpu.crash             ;
0037 7FEC 2026     vec.23  data  cpu.crash             ;
0038 7FEE 2026     vec.24  data  cpu.crash             ;
0039 7FF0 2026     vec.25  data  cpu.crash             ;
0040 7FF2 2026     vec.26  data  cpu.crash             ;
0041 7FF4 2026     vec.27  data  cpu.crash             ;
0042 7FF6 2026     vec.28  data  cpu.crash             ;
0043 7FF8 2026     vec.29  data  cpu.crash             ;
0044 7FFA 2026     vec.30  data  cpu.crash             ;
0045 7FFC 2026     vec.31  data  cpu.crash             ;
0046 7FFE 2026     vec.32  data  cpu.crash             ;
                   < stevie_b2.asm
0112                                                   ; Vector table bank 2

    ANYKEY.............. >200A :     
    AT.................. >26C6 :     
    BANK0.RAM........... >6800 :     
    BANK0.ROM........... >6000 :     
    BANK1.RAM........... >6802 :     
    BANK1.ROM........... >6002 :     
    BANK2.RAM........... >6804 :     
    BANK2.ROM........... >6004 :     
    BANK3.RAM........... >6806 :     
    BANK3.ROM........... >6006 :     
    BANK4.RAM........... >6808 :     
    BANK4.ROM........... >6008 :     
    BANK5.RAM........... >680A :     
    BANK5.ROM........... >600A :     
    BANK6.RAM........... >680C :     
    BANK6.ROM........... >600C :     
    BANK7.RAM........... >680E :     
    BANK7.ROM........... >600E :     
    BANKID.............. >6004 :     
    BANKX.CRASH.SHOWBANK >7F50 :     
    BANKX.VDPTAB........ >7F60 :     
    BANKX.VECTAB........ >7FC0 :     
    BTIHI............... >8314 :     
    BVDPST.............. >831A :     
    BX.................. >832B :     
    BY.................. >832A :     
    C99_BRK............. >0113 :     
    C99_DBGR0........... >0120 :     
    C99_DBGR1........... >0121 :     
    C99_DBGR10.......... >012A :     
    C99_DBGR11.......... >012B :     
    C99_DBGR12.......... >012C :     
    C99_DBGR13.......... >012D :     
    C99_DBGR14.......... >012E :     
    C99_DBGR15.......... >012F :     
    C99_DBGR2........... >0122 :     
    C99_DBGR3........... >0123 :     
    C99_DBGR4........... >0124 :     
    C99_DBGR5........... >0125 :     
    C99_DBGR6........... >0126 :     
    C99_DBGR7........... >0127 :     
    C99_DBGR8........... >0128 :     
    C99_DBGR9........... >0129 :     
    C99_DBG_R0.......... >0120 :     
    C99_DBG_R1.......... >0121 :     
    C99_DBG_R2.......... >0122 :     
    C99_DBG_R3.......... >0123 :     
    C99_DBG_R4.......... >0124 :     
    C99_DBG_R5.......... >0125 :     
    C99_DBG_R6.......... >0126 :     
    C99_DBG_R7.......... >0127 :     
    C99_DBG_R8.......... >0128 :     
    C99_DBG_R9.......... >0199 :     
    C99_DBG_RA.......... >012A :     
    C99_DBG_RB.......... >012B :     
    C99_DBG_RC.......... >012C :     
    C99_DBG_RD.......... >012D :     
    C99_DBG_RE.......... >012E :     
    C99_DBG_RF.......... >012F :     
    C99_DBG_STCK........ >0199 :     
    C99_DBG_TMP0........ >0124 :     
    C99_DBG_TMP1........ >0125 :     
    C99_DBG_TMP2........ >0126 :     
    C99_DBG_TMP3........ >0127 :     
    C99_DBG_TMP4........ >0128 :     
    C99_NORM............ >0110 :     
    C99_OVRD............ >0111 :     
    C99_QUIT............ >0114 :     
    C99_SMAX............ >0112 :     
    CLHOOK.............. >2EC2 :     
    CLIP1............... >3100 :     
    CLIP2............... >3200 :     
    CLIP3............... >3300 :     
    CLIP4............... >3400 :     
    CLIP5............... >3500 :     
    CLSLOT.............. >2EEA :     
    CMDB.ACTION.PTR..... >A72C :     
    CMDB.CMD............ >A72F :     
    CMDB.CMDALL......... >A72E :     
    CMDB.CMDLEN......... >A72E :     
    CMDB.COLUMN......... >A714 :     
    CMDB.CURSOR......... >A70A :     
    CMDB.DEFAULT........ >A708 :     
    CMDB.DFLT.FNAME..... >A7B2 :     
    CMDB.DIALOG......... >A71C :     
    CMDB.DIALOG.VAR..... >A71E :     
    CMDB.DIRTY.......... >A71A :     
    CMDB.FB.YXSAVE...... >A704 :     
    CMDB.FREE........... >A800 :     
    CMDB.INIT........... >325A :     
    CMDB.INIT.EXIT...... >32AE :     
    CMDB.LENGTH......... >A716 :     
    CMDB.LINES.......... >A718 :     
    CMDB.PANHEAD........ >A720 :     
    CMDB.PANHEAD.BUF.... >A780 :     
    CMDB.PANHINT........ >A724 :     
    CMDB.PANHINT2....... >A726 :     
    CMDB.PANINFO........ >A722 :     
    CMDB.PANKEYS........ >A72A :     
    CMDB.PANMARKERS..... >A728 :     
    CMDB.ROWS........... >0005 :     
    CMDB.SCRROWS........ >A706 :     
    CMDB.SIZE........... >1000 :     
    CMDB.STRUCT......... >A700 :     
    CMDB.TOP............ >E000 :     
    CMDB.TOP.PTR........ >A700 :     
    CMDB.VDPTOP......... >A70E :     
    CMDB.VISIBLE........ >A702 :     
    CMDB.YXPROMPT....... >A712 :     
    CMDB.YXSAVE......... >A70C :     
    CMDB.YXTOP.......... >A710 :     
    COLORS.LINE.SET..... >604A :     
    COLORS.LINE.SET.EXIT >6082 :     
    COLROW.............. >0050 :     
    CONFIG.............. >0002 :     
    CONST.0............. >2000 :     
    CONST.1............. >2002 :     
    CONST.10............ >38A4 :     
    CONST.2............. >2004 :     
    CONST.3............. >389A :     
    CONST.4............. >2006 :     
    CONST.5............. >389C :     
    CONST.6............. >389E :     
    CONST.7............. >38A0 :     
    CONST.8............. >2008 :     
    CONST.9............. >38A2 :     
    CORE1.FREE.......... >A100 :     
    CORE1.FREE1......... >A036 :     
    CORE1.FREE2......... >A0D4 :     
    CORE1.TOP........... >A000 :     
    CORE2.FREE.......... >A200 :     
    CORE2.TOP........... >A100 :     
    CPU.CRASH........... >2026 :     
    CPU.CRASH.MAIN...... >2086 :     
    CPU.CRASH.MSG.CALLER >2198 :     
    CPU.CRASH.MSG.CRASHED >2182 :     
    CPU.CRASH.MSG.ID.... >21D8 :     
    CPU.CRASH.MSG.MARKER >21B0 :     
    CPU.CRASH.MSG.R..... >21AE :     
    CPU.CRASH.MSG.SOURCE >21C0 :     
    CPU.CRASH.MSG.ST.... >21BA :     
    CPU.CRASH.MSG.WP.... >21B4 :     
    CPU.CRASH.RESET..... >2076 :     
    CPU.CRASH.SHOWBANK.. >7F50 :     
    CPU.CRASH.SHOWBANK.BANKSTR >7F88 :     
    CPU.CRASH.SHOWREG... >20EC :     
    CPU.CRASH.SHOWREG.CONTENT >2142 :     
    CPU.CRASH.SHOWREG.LABEL >20FA :     
    CPU.SCRPAD.BACKUP... >2AF0 :     
    CPU.SCRPAD.BACKUP.COPY >2B08 :     
    CPU.SCRPAD.BACKUP.EXIT >2B22 :     
    CPU.SCRPAD.PGIN..... >2B76 :     
    CPU.SCRPAD.PGIN.EXIT >2B98 :     
    CPU.SCRPAD.PGOUT.... >2B38 :     
    CPU.SCRPAD.PGOUT.AFTER.RTWP >2B70 :     
    CPU.SCRPAD.PGOUT.EXIT >2B74 :     
    CPU.SCRPAD.RESTORE.. >2B24 :     
    CPU.SCRPAD.RESTORE.COPY >2B2C :     
    CPU.SCRPAD.RESTORE.EXIT >2B36 :     
    CPU.SCRPAD.SRC...... >7E00 :     
    CPU.SCRPAD.TGT...... >F000 :     
    CPU.SCRPAD1......... >8300 :     
    CPU.SCRPAD2......... >AD00 :     
    CPYCHK.............. >24EC :     
    CPYM0............... >24F8 :     
    CPYM1............... >2504 :     
    CPYM2............... >250C :     
    CPYM2M.............. >24DA :     
    CPYM2V.............. >2486 :     
    CPYM3............... >251C :     
    CPYM4............... >2526 :     
    CPYMZ............... >2532 :     
    CPYODD.............. >2534 :     
    CPYV2M.............. >24B8 :     
    DEBUG............... >0000 :     
    DEF.CLIP.FNAME...... >3CB7 :     
    DEF.CLIP.FNAME.B.... >3CC1 :     
    DEF.CLIP.FNAME.C.... >3CCB :     
    DEF.DEVICES......... >3CD5 :     
    DEF.MASTERCAT....... >3D05 :     
    DEF.PRINTER.FNAME... >3CB0 :     
    DEVICE.F18A......... >0001 :     
    DEVICE.FG99.MODE.ADV >0000 :     
    DOFILL.............. >2280 :     
    DOWN................ >26CC :     
    DSRLNK.............. >2B9A :     
    DSRLNK.DEVICE_NAME.GET_LENGTH >2BF4 :     
    DSRLNK.DSRLWS....... >A400 :     
    DSRLNK.DSRSCAN.CALL_DSR >2C70 :     
    DSRLNK.DSRSCAN.CARDLOOP >2C20 :     
    DSRLNK.DSRSCAN.CARDOFF >2C1A :     
    DSRLNK.DSRSCAN.DSR.8 >2CA2 :     
    DSRLNK.DSRSCAN.DSR.A >2CB2 :     
    DSRLNK.DSRSCAN.GETENTRY >2C4A :     
    DSRLNK.DSRSCAN.NEXTENTRY >2C44 :     
    DSRLNK.DSRSCAN.RETURN_DSR >2C92 :     
    DSRLNK.DSRSCAN.START >2C10 :     
    DSRLNK.DSTYPE....... >A40A :     
    DSRLNK.ERROR.DEVICENAME_INVALID >2CBE :     
    DSRLNK.ERROR.IO_ERROR >2CC0 :     
    DSRLNK.ERROR.NODSR_FOUND >2CBA :     
    DSRLNK.ERROR.NODSR_FOUND_OFF >2CB8 :     
    DSRLNK.FLGPTR....... >A434 :     
    DSRLNK.INIT......... >2B9E :     
    DSRLNK.NAMSTO....... >A420 :     
    DSRLNK.PERIOD....... >2D0A :     
    DSRLNK.REUSE........ >2CCA :     
    DSRLNK.REUSE.INIT... >2CCE :     
    DSRLNK.SAV8A........ >A428 :     
    DSRLNK.SAVCRU....... >A42A :     
    DSRLNK.SAVENT....... >A42C :     
    DSRLNK.SAVLEN....... >A432 :     
    DSRLNK.SAVPAB....... >A42E :     
    DSRLNK.SAVVER....... >A430 :     
    EDB.AUTOINSERT...... >A50C :     
    EDB.BLOCK.M1........ >A50E :     
    EDB.BLOCK.M2........ >A510 :     
    EDB.BLOCK.VAR....... >A512 :     
    EDB.CLEAR.SAMS...... >6D32 :     
    EDB.DIRTY........... >A506 :     
    EDB.FILENAME........ >A51C :     
    EDB.FILENAME.PTR.... >A514 :     
    EDB.FILETYPE.PTR.... >A516 :     
    EDB.FREE............ >A56C :     
    EDB.HIPAGE.ALLOC.... >36FE :     
    EDB.HIPAGE.ALLOC.CHECK_SETPAGE >370A :     
    EDB.HIPAGE.ALLOC.CRASH >3734 :     
    EDB.HIPAGE.ALLOC.EXIT >373C :     
    EDB.HIPAGE.ALLOC.SETPAGE >3726 :     
    EDB.INDEX.PTR....... >A502 :     
    EDB.INIT............ >3214 :     
    EDB.INIT.EXIT....... >3254 :     
    EDB.INSMODE......... >A50A :     
    EDB.LINE.GETLENGTH.. >3696 :     
    EDB.LINE.GETLENGTH.EXIT >36D2 :     
    EDB.LINE.GETLENGTH.NULL >36CE :     
    EDB.LINE.GETLENGTH2. >36DA :     
    EDB.LINE.GETLENGTH2.EXIT >36F8 :     
    EDB.LINE.MAPPAGE.... >364C :     
    EDB.LINE.MAPPAGE.EXIT >368E :     
    EDB.LINE.MAPPAGE.LOOKUP >3666 :     
    EDB.LINE.UNPACK..... >6CC6 :     
    EDB.LINES........... >A504 :     
    EDB.NEXT_FREE.PTR... >A508 :     
    EDB.SAMS.HIPAGE..... >A51A :     
    EDB.SAMS.PAGE....... >A518 :     
    EDB.SIZE............ >1000 :     
    EDB.STRUCT.......... >A500 :     
    EDB.TOP............. >C000 :     
    EDB.TOP.PTR......... >A500 :     
    ENKNL............... >200E :     
    ENUSR............... >2012 :     
    EOL................. >FFFF :     
    ERRPANE.EXIT........ >32DC :     
    ERRPANE.INIT........ >32B6 :     
    F18CHK.............. >2754 :     
    F18CHK_EXIT......... >2792 :     
    F18CHK_GPU.......... >279E :     
    F18CHK_NO........... >2788 :     
    F18CHK_YES.......... >278E :     
    F18FW1.............. >27D0 :     
    F18FWV.............. >27B6 :     
    F18IDL.............. >274A :     
    F18LCK.............. >2740 :     
    F18RST.............. >27A6 :     
    F18UNL.............. >272A :     
    FB.CALC_POINTER..... >30EC :     
    FB.CALC_POINTER.EXIT >310C :     
    FB.COLORIZE......... >A312 :     
    FB.COLSLINE......... >A30E :     
    FB.COLUMN........... >A30C :     
    FB.CURRENT.......... >A302 :     
    FB.CURTOGGLE........ >A314 :     
    FB.DIRTY............ >A318 :     
    FB.FREE............. >A3C0 :     
    FB.INIT............. >306C :     
    FB.INIT.CONT........ >30A8 :     
    FB.INIT.EXIT........ >30CA :     
    FB.REFRESH.......... >6CD8 :     
    FB.ROW.............. >A306 :     
    FB.ROW.DIRTY........ >A30A :     
    FB.ROW.LENGTH....... >A308 :     
    FB.ROW2LINE......... >30D2 :     
    FB.ROW2LINE.EXIT.... >30E6 :     
    FB.RULER.SIT........ >A320 :     
    FB.RULER.TAT........ >A370 :     
    FB.SCRROWS.......... >A31C :     
    FB.SCRROWS.MAX...... >A31E :     
    FB.SIZE............. >0F00 :     
    FB.STATUS.DIRTY..... >A31A :     
    FB.STRUCT........... >A300 :     
    FB.TOP.............. >D000 :     
    FB.TOP.PTR.......... >A300 :     
    FB.TOPLINE.......... >A304 :     
    FB.UNCRUNCH.AREA.... >D960 :     
    FB.VDPDUMP.......... >6CEA :     
    FB.VWCO............. >A310 :     
    FB.YXSAVE........... >A316 :     
    FG99................ >2DC4 :     
    FG99.CART.FBFORTH... >3D4E :     
    FG99.CART.FCMD...... >3D12 :     
    FG99.CART.RXB....... >3D3A :     
    FG99.CART.XBGEM..... >3D26 :     
    FG99.EXIT........... >2DFE :     
    FG99.RUN............ >3764 :     
    FG99.SEND.LOOP...... >2DD4 :     
    FG99.WAIT........... >2DEC :     
    FH.CALLBACK1........ >A450 :     
    FH.CALLBACK2........ >A452 :     
    FH.CALLBACK3........ >A454 :     
    FH.CALLBACK4........ >A456 :     
    FH.CALLBACK5........ >A458 :     
    FH.COUNTER.......... >A442 :     
    FH.FILE.PAB.HEADER.. >6CBC :     
    FH.FILE.PAB.HEADER.CAT >6CB2 :     
    FH.FILE.READ.CRASH.. >6336 :     
    FH.FILE.READ.EDB.... >6236 :     
    FH.FILE.READ.EDB.ASSERT1 >62DA :     
    FH.FILE.READ.EDB.ASSERT2 >62EC :     
    FH.FILE.READ.EDB.ASSERT3 >62FE :     
    FH.FILE.READ.EDB.ASSERT4 >6310 :     
    FH.FILE.READ.EDB.ASSERT5 >6322 :     
    FH.FILE.READ.EDB.CHECK_FIOERR >640E :     
    FH.FILE.READ.EDB.CHECK_SETPAGE >6380 :     
    FH.FILE.READ.EDB.DISPLAY >6490 :     
    FH.FILE.READ.EDB.EOF >64E2 :     
    FH.FILE.READ.EDB.EOF.CALLBACK >64FA :     
    FH.FILE.READ.EDB.ERR >637C :     
    FH.FILE.READ.EDB.ERROR >64C2 :     
    FH.FILE.READ.EDB.EXIT >6502 :     
    FH.FILE.READ.EDB.INSERTLINE >641C :     
    FH.FILE.READ.EDB.LOAD1 >633E :     
    FH.FILE.READ.EDB.NEWFILE >62CA :     
    FH.FILE.READ.EDB.NEXT >6498 :     
    FH.FILE.READ.EDB.NEXT.DO_IT >64BE :     
    FH.FILE.READ.EDB.OPEN >6362 :     
    FH.FILE.READ.EDB.PABHEADER >6346 :     
    FH.FILE.READ.EDB.PREPINDEX >6470 :     
    FH.FILE.READ.EDB.PREPINDEX.EMPTYLINE >647E :     
    FH.FILE.READ.EDB.PREPPOINTER >6462 :     
    FH.FILE.READ.EDB.PROCESS_LINE >6436 :     
    FH.FILE.READ.EDB.RECORD >63B4 :     
    FH.FILE.READ.EDB.UPDINDEX >648C :     
    FH.FILE.READ.EDB.VDP2CPU >645E :     
    FH.FILE.READ.MEM.... >6094 :     
    FH.FILE.READ.MEM.ASSERT1 >60FE :     
    FH.FILE.READ.MEM.ASSERT2 >6110 :     
    FH.FILE.READ.MEM.ASSERT3 >6122 :     
    FH.FILE.READ.MEM.ASSERT4 >6134 :     
    FH.FILE.READ.MEM.ASSERT5 >6146 :     
    FH.FILE.READ.MEM.CHECK_FIOERR >61BC :     
    FH.FILE.READ.MEM.CRSH >615A :     
    FH.FILE.READ.MEM.DISPLAY >61E2 :     
    FH.FILE.READ.MEM.EOF >620E :     
    FH.FILE.READ.MEM.EOF.CALLBACK >6214 :     
    FH.FILE.READ.MEM.ERROR >61F2 :     
    FH.FILE.READ.MEM.EXIT >621C :     
    FH.FILE.READ.MEM.LOAD1 >6162 :     
    FH.FILE.READ.MEM.NEWFILE >60F6 :     
    FH.FILE.READ.MEM.NEXT >61EA :     
    FH.FILE.READ.MEM.NEXT.DO_IT >61EE :     
    FH.FILE.READ.MEM.PABHEADER >616A :     
    FH.FILE.READ.MEM.PROCESS >61CA :     
    FH.FILE.READ.MEM.RECORD >61A2 :     
    FH.FILE.READ.MEM.VDP2CPU >61DE :     
    FH.FILE.WRITE.CRASH. >65CA :     
    FH.FILE.WRITE.EDB... >6526 :     
    FH.FILE.WRITE.EDB.CHECK_FIOERR >665C :     
    FH.FILE.WRITE.EDB.DISPLAY >666A :     
    FH.FILE.WRITE.EDB.DONE >668A :     
    FH.FILE.WRITE.EDB.ERROR >6676 :     
    FH.FILE.WRITE.EDB.EXIT >6696 :     
    FH.FILE.WRITE.EDB.PABHEADER >65D8 :     
    FH.FILE.WRITE.EDB.RECORD >6602 :     
    FH.FILE.WRITE.EDB.SAVE1 >65D2 :     
    FH.FILETYPE......... >A44C :     
    FH.FNAME.PTR........ >A444 :     
    FH.FOPMODE.......... >A44A :     
    FH.FOPMODE.NONE..... >0000 :     
    FH.FOPMODE.READFILE. >0001 :     
    FH.FOPMODE.WRITEFILE >0002 :     
    FH.FREE............. >A4B8 :     
    FH.FTYPE.INIT....... >A45A :     
    FH.IORESULT......... >A43A :     
    FH.KILOBYTES........ >A440 :     
    FH.KILOBYTES.PREV... >A45C :     
    FH.LINE............. >A45E :     
    FH.MEMBUFFER........ >A468 :     
    FH.OFFSETOPCODE..... >A44E :     
    FH.PAB.PTR.......... >A436 :     
    FH.PABSTAT.......... >A438 :     
    FH.PABTPL.PTR....... >A466 :     
    FH.RAM.PTR.......... >A45C :     
    FH.RECLEN........... >A43E :     
    FH.RECORDS.......... >A43C :     
    FH.SAMS.HIPAGE...... >A448 :     
    FH.SAMS.PAGE........ >A446 :     
    FH.STRUCT........... >A400 :     
    FH.TEMP1............ >A460 :     
    FH.TEMP2............ >A462 :     
    FH.TEMP3............ >A464 :     
    FH.VPAB............. >3900 :     
    FH.VRECBUF.......... >3800 :     
    FH.WORKMODE......... >A45A :     
    FIL.EXIT............ >228C :     
    FIL16B.............. >2276 :     
    FILCHK.............. >2248 :     
    FILCHK2............. >2258 :     
    FILCHK3............. >2264 :     
    FILE.CLOSE.......... >2D30 :     
    FILE.DELETE......... >2D68 :     
    FILE.IMAGE.LOAD..... >2D64 :     
    FILE.IMAGE.SAVE..... >2D66 :     
    FILE.OPEN........... >2D0C :     
    FILE.RECORD.READ.... >2D3C :     
    FILE.RECORD.SEEK.... >2D62 :     
    FILE.RECORD.WRITE... >2D48 :     
    FILE.RENAME......... >2D6A :     
    FILE.STATUS......... >2D6C :     
    FILM................ >2236 :     
    FILV................ >228E :     
    FILZZ............... >22B4 :     
    FJ.BOTTOM........... >B000 :     
    FM.BROWSE.FNAME.BACKOFF >6C68 :     
    FM.BROWSE.FNAME.BACKOFF.CRASH >6C72 :     
    FM.BROWSE.FNAME.SUFFIX >6C20 :     
    FM.BROWSE.FNAME.SUFFIX.DEC >6C84 :     
    FM.BROWSE.FNAME.SUFFIX.DEC.NUMERIC >6CA2 :     
    FM.BROWSE.FNAME.SUFFIX.EXIT >6CAA :     
    FM.BROWSE.FNAME.SUFFIX.GETCHAR >6C38 :     
    FM.BROWSE.FNAME.SUFFIX.INC >6C4A :     
    FM.BROWSE.FNAME.SUFFIX.INC.ALPHA >6C7E :     
    FM.BROWSE.FNAME.SUFFIX.INC.CRASH >6C60 :     
    FM.BROWSE.FNAME.SUFFIX.STORE >6CA6 :     
    FM.INSERTFILE....... >678E :     
    FM.INSERTFILE.EXIT.. >67F2 :     
    FM.LOAD.CB.MEMFULL.. >6BEC :     
    FM.LOAD.CB.MEMFULL.EXIT >6C18 :     
    FM.LOADFILE......... >66AE :     
    FM.LOADFILE.CLEAR... >66EE :     
    FM.LOADFILE.EXIT.... >6784 :     
    FM.LOADSAVE.CB.FIOERR >6B12 :     
    FM.LOADSAVE.CB.FIOERR.ADDMSG >6B7E :     
    FM.LOADSAVE.CB.FIOERR.EXIT >6BDA :     
    FM.LOADSAVE.CB.FIOERR.LOAD >6B5C :     
    FM.LOADSAVE.CB.FIOERR.PRINT >6B74 :     
    FM.LOADSAVE.CB.FIOERR.SAVE >6B68 :     
    FM.LOADSAVE.CB.INDICATOR1 >68D6 :     
    FM.LOADSAVE.CB.INDICATOR1.CHECK.SAVING >6916 :     
    FM.LOADSAVE.CB.INDICATOR1.CLIPBLOCK >6978 :     
    FM.LOADSAVE.CB.INDICATOR1.EXIT >69AC :     
    FM.LOADSAVE.CB.INDICATOR1.FILENAME >699E :     
    FM.LOADSAVE.CB.INDICATOR1.LOADING >6982 :     
    FM.LOADSAVE.CB.INDICATOR1.PANIC >6948 :     
    FM.LOADSAVE.CB.INDICATOR1.PRINTBLOCK >696E :     
    FM.LOADSAVE.CB.INDICATOR1.PRINTFILE >6964 :     
    FM.LOADSAVE.CB.INDICATOR1.SAVEBLOCK >695A :     
    FM.LOADSAVE.CB.INDICATOR1.SAVEFILE >6950 :     
    FM.LOADSAVE.CB.INDICATOR2 >69B8 :     
    FM.LOADSAVE.CB.INDICATOR2.EXIT >6A5C :     
    FM.LOADSAVE.CB.INDICATOR2.KB >6A0E :     
    FM.LOADSAVE.CB.INDICATOR2.KB.PROCESSED >6A36 :     
    FM.LOADSAVE.CB.INDICATOR2.LINES >6A50 :     
    FM.LOADSAVE.CB.INDICATOR2.LOADSAVE >69C0 :     
    FM.LOADSAVE.CB.INDICATOR2.REFRESH >69E8 :     
    FM.LOADSAVE.CB.INDICATOR2.TOPLINE >69E2 :     
    FM.LOADSAVE.CB.INDICATOR3 >6A62 :     
    FM.LOADSAVE.CB.INDICATOR3.DATA >6B02 :     
    FM.LOADSAVE.CB.INDICATOR3.EXIT >6AF2 :     
    FM.LOADSAVE.CB.MESSAGE >6AC4 :     
    FM.NEWFILE.......... >6886 :     
    FM.NEWFILE.EXIT..... >68CE :     
    FM.SAVEFILE......... >6808 :     
    FM.SAVEFILE.EXIT.... >687E :     
    FNOPT1.............. >0000 :     
    FNOPT2.............. >0006 :     
    FNOPT3.............. >000C :     
    FNOPT4.............. >0012 :     
    FNOPT5.............. >8000 :     
    FNOPT6.............. >8006 :     
    FNOPT7.............. >800C :     
    FNOPT8.............. >8012 :     
    FNTADR.............. >3100 :     
    GRAPH1.............. >21F2 :     
    GRMRA............... >9802 :     
    GRMRD............... >9800 :     
    GRMWA............... >9C02 :     
    GRMWD............... >9C00 :     
    HCHAR............... >27D2 :     
    HCHAR1.............. >27EC :     
    HCHAR2.............. >27F6 :     
    HCHARX.............. >27D8 :     
    HEAP.TOP............ >F000 :     
    HOOKOK.............. >2E08 :     
    ID.DIALOG.APPEND.... >000E :     
    ID.DIALOG.BASIC..... >006B :     
    ID.DIALOG.BLOCK..... >0066 :     
    ID.DIALOG.CARTRIDGE. >006A :     
    ID.DIALOG.CLIPBOARD. >0067 :     
    ID.DIALOG.CLIPDEV... >0011 :     
    ID.DIALOG.CONFIG.... >006C :     
    ID.DIALOG.EDITOR.... >006D :     
    ID.DIALOG.FILE...... >0069 :     
    ID.DIALOG.FONT...... >006E :     
    ID.DIALOG.GOTO...... >0013 :     
    ID.DIALOG.HELP...... >0068 :     
    ID.DIALOG.INSERT.... >000D :     
    ID.DIALOG.LOAD...... >000A :     
    ID.DIALOG.MENU...... >0064 :     
    ID.DIALOG.PRINT..... >000F :     
    ID.DIALOG.PRINTBLOCK >0010 :     
    ID.DIALOG.SAVE...... >000B :     
    ID.DIALOG.SAVEBLOCK. >000C :     
    ID.DIALOG.SHORTCUTS. >006F :     
    ID.DIALOG.UNSAVED... >0065 :     
    ID.FILE.APPENDFILE.. >0003 :     
    ID.FILE.CLIPBLOCK... >0006 :     
    ID.FILE.INSERTFILE.. >0002 :     
    ID.FILE.LOADFILE.... >0001 :     
    ID.FILE.PRINTBLOCK.. >0008 :     
    ID.FILE.PRINTFILE... >0007 :     
    ID.FILE.SAVEBLOCK... >0005 :     
    ID.FILE.SAVEFILE.... >0004 :     
    IDX.ENTRY.DELETE.... >3552 :     
    IDX.ENTRY.DELETE.EXIT >35AA :     
    IDX.ENTRY.DELETE.LASTLINE >357E :     
    IDX.ENTRY.DELETE.REORG >3586 :     
    IDX.ENTRY.DELETE.REORG.COMPLEX >3590 :     
    IDX.ENTRY.DELETE.REORG.SIMPLE >35A4 :     
    IDX.ENTRY.INSERT.... >35F4 :     
    IDX.ENTRY.INSERT.EXIT >3640 :     
    IDX.ENTRY.INSERT.REORG >3612 :     
    IDX.ENTRY.INSERT.REORG.COMPLEX >361C :     
    IDX.ENTRY.INSERT.REORG.SIMPLE >3630 :     
    IDX.ENTRY.UPDATE.... >34A4 :     
    IDX.ENTRY.UPDATE.CLEAR >34DE :     
    IDX.ENTRY.UPDATE.EXIT >34EE :     
    IDX.ENTRY.UPDATE.SAVE >34CC :     
    IDX.FREE............ >A606 :     
    IDX.INIT............ >3114 :     
    IDX.INIT.EXIT....... >3150 :     
    IDX.POINTER.GET..... >34F6 :     
    IDX.POINTER.GET.EXIT >3538 :     
    IDX.POINTER.GET.PARM >3526 :     
    IDX.POINTER.GET.PARM.NULL >3530 :     
    IDX.SAMS.HIPAGE..... >A604 :     
    IDX.SAMS.LOPAGE..... >A602 :     
    IDX.SAMS.PAGE....... >A600 :     
    IDX.SIZE............ >1000 :     
    IDX.STRUCT.......... >A600 :     
    IDX.TOP............. >B000 :     
    INTOFF.............. >2696 :     
    INTON............... >269E :     
    IO.ERR.BAD_DEVICE_NAME >0000 :     
    IO.ERR.BAD_OPEN_ATTRIBUTE >0002 :     
    IO.ERR.DEVICE_ERROR. >0006 :     
    IO.ERR.DEVICE_WRITE_PROTTECTED >0001 :     
    IO.ERR.EOF.......... >0005 :     
    IO.ERR.FILE_ERROR... >0007 :     
    IO.ERR.ILLEGAL_OPERATION >0003 :     
    IO.ERR.NO_ERROR_OCCURED >0000 :     
    IO.ERR.OUT_OF_TABLE_BUFFER_SPACE >0004 :     
    IO.OP.CLOSE......... >0001 :     
    IO.OP.DELFILE....... >0007 :     
    IO.OP.LOAD.......... >0005 :     
    IO.OP.OPEN.......... >0000 :     
    IO.OP.READ.......... >0002 :     
    IO.OP.REWIND........ >0004 :     
    IO.OP.SAVE.......... >0006 :     
    IO.OP.SCRATCH....... >0008 :     
    IO.OP.STATUS........ >0009 :     
    IO.OP.WRITE......... >0003 :     
    IO.REL.APP.DIS.FIX.. >0007 :     
    IO.REL.APP.DIS.VAR.. >0017 :     
    IO.REL.APP.INT.FIX.. >000F :     
    IO.REL.APP.INT.VAR.. >001F :     
    IO.REL.INP.DIS.FIX.. >0005 :     
    IO.REL.INP.DIS.VAR.. >0015 :     
    IO.REL.INP.INT.FIX.. >000D :     
    IO.REL.INP.INT.VAR.. >001D :     
    IO.REL.OUT.DIS.FIX.. >0003 :     
    IO.REL.OUT.DIS.VAR.. >0013 :     
    IO.REL.OUT.INT.FIX.. >000B :     
    IO.REL.OUT.INT.VAR.. >001B :     
    IO.REL.UPD.DIS.FIX.. >0001 :     
    IO.REL.UPD.DIS.VAR.. >0011 :     
    IO.REL.UPD.INT.FIX.. >0009 :     
    IO.REL.UPD.INT.VAR.. >0019 :     
    IO.SEQ.APP.DIS.FIX.. >0006 :     
    IO.SEQ.APP.DIS.VAR.. >0016 :     
    IO.SEQ.APP.INT.FIX.. >000E :     
    IO.SEQ.APP.INT.VAR.. >001E :     
    IO.SEQ.INP.DIS.FIX.. >0004 :     
    IO.SEQ.INP.DIS.VAR.. >0014 :     
    IO.SEQ.INP.INT.FIX.. >000C :     
    IO.SEQ.INP.INT.VAR.. >001C :     
    IO.SEQ.OUT.DIS.FIX.. >0002 :     
    IO.SEQ.OUT.DIS.VAR.. >0012 :     
    IO.SEQ.OUT.INT.FIX.. >000A :     
    IO.SEQ.OUT.INT.VAR.. >001A :     
    IO.SEQ.UPD.DIS.FIX.. >0000 :     
    IO.SEQ.UPD.DIS.VAR.. >0010 :     
    IO.SEQ.UPD.INT.FIX.. >0008 :     
    IO.SEQ.UPD.INT.VAR.. >0018 :     
    KBF.KBCLEAR......... >0001 :     
    KBFLAGS............. >A026 :     
    KEY.CTRL.0.......... >00B0 :     
    KEY.CTRL.1.......... >00B1 :     
    KEY.CTRL.2.......... >00B2 :     
    KEY.CTRL.3.......... >00B3 :     
    KEY.CTRL.4.......... >00B4 :     
    KEY.CTRL.5.......... >00B5 :     
    KEY.CTRL.6.......... >00B6 :     
    KEY.CTRL.7.......... >00B7 :     
    KEY.CTRL.8.......... >009E :     
    KEY.CTRL.9.......... >009F :     
    KEY.CTRL.A.......... >0081 :     
    KEY.CTRL.B.......... >0082 :     
    KEY.CTRL.C.......... >0083 :     
    KEY.CTRL.COMMA...... >0080 :     
    KEY.CTRL.D.......... >0084 :     
    KEY.CTRL.DOT........ >009B :     
    KEY.CTRL.E.......... >0085 :     
    KEY.CTRL.F.......... >0086 :     
    KEY.CTRL.G.......... >0087 :     
    KEY.CTRL.H.......... >0088 :     
    KEY.CTRL.I.......... >0089 :     
    KEY.CTRL.J.......... >008A :     
    KEY.CTRL.K.......... >008B :     
    KEY.CTRL.L.......... >008C :     
    KEY.CTRL.M.......... >008D :     
    KEY.CTRL.N.......... >008E :     
    KEY.CTRL.O.......... >008F :     
    KEY.CTRL.P.......... >0090 :     
    KEY.CTRL.PLUS....... >009D :     
    KEY.CTRL.Q.......... >0091 :     
    KEY.CTRL.R.......... >0092 :     
    KEY.CTRL.S.......... >0093 :     
    KEY.CTRL.SLASH...... >00BB :     
    KEY.CTRL.SPACE...... >00F0 :     
    KEY.CTRL.T.......... >0094 :     
    KEY.CTRL.U.......... >0095 :     
    KEY.CTRL.V.......... >0096 :     
    KEY.CTRL.W.......... >0097 :     
    KEY.CTRL.X.......... >0098 :     
    KEY.CTRL.Y.......... >0099 :     
    KEY.CTRL.Z.......... >009A :     
    KEY.ENTER........... >000D :     
    KEY.FCTN.0.......... >00BC :     
    KEY.FCTN.1.......... >0003 :     
    KEY.FCTN.2.......... >0004 :     
    KEY.FCTN.3.......... >0007 :     
    KEY.FCTN.4.......... >0002 :     
    KEY.FCTN.5.......... >000E :     
    KEY.FCTN.6.......... >000C :     
    KEY.FCTN.7.......... >0001 :     
    KEY.FCTN.8.......... >0006 :     
    KEY.FCTN.9.......... >000F :     
    KEY.FCTN.A.......... >0000 :     
    KEY.FCTN.B.......... >00BE :     
    KEY.FCTN.C.......... >0000 :     
    KEY.FCTN.COMMA...... >00B8 :     
    KEY.FCTN.D.......... >0009 :     
    KEY.FCTN.DOT........ >00B9 :     
    KEY.FCTN.E.......... >000B :     
    KEY.FCTN.F.......... >0000 :     
    KEY.FCTN.G.......... >0000 :     
    KEY.FCTN.H.......... >00BF :     
    KEY.FCTN.I.......... >0000 :     
    KEY.FCTN.J.......... >00C0 :     
    KEY.FCTN.K.......... >00C1 :     
    KEY.FCTN.L.......... >00C2 :     
    KEY.FCTN.M.......... >00C3 :     
    KEY.FCTN.N.......... >00C4 :     
    KEY.FCTN.O.......... >0000 :     
    KEY.FCTN.P.......... >0000 :     
    KEY.FCTN.PLUS....... >0005 :     
    KEY.FCTN.Q.......... >00C5 :     
    KEY.FCTN.R.......... >0000 :     
    KEY.FCTN.S.......... >0008 :     
    KEY.FCTN.T.......... >0000 :     
    KEY.FCTN.U.......... >0000 :     
    KEY.FCTN.V.......... >007F :     
    KEY.FCTN.W.......... >007E :     
    KEY.FCTN.X.......... >000A :     
    KEY.FCTN.Y.......... >00C6 :     
    KEY.FCTN.Z.......... >0000 :     
    KEY.LC.B............ >00A2 :     
    KEY.LC.E............ >00A5 :     
    KEY.LC.F............ >00A6 :     
    KEY.LC.H............ >00A8 :     
    KEY.LC.N............ >006E :     
    KEY.LC.O............ >006F :     
    KEY.LC.P............ >0070 :     
    KEY.LC.Q............ >0071 :     
    KEY.LC.R............ >0072 :     
    KEY.LC.S............ >0073 :     
    KEY.LC.X............ >0078 :     
    KEY.NUM.0........... >0030 :     
    KEY.NUM.1........... >0031 :     
    KEY.NUM.2........... >0032 :     
    KEY.NUM.3........... >0033 :     
    KEY.NUM.4........... >0034 :     
    KEY.NUM.5........... >0035 :     
    KEY.NUM.6........... >0036 :     
    KEY.NUM.7........... >0037 :     
    KEY.NUM.8........... >0038 :     
    KEY.NUM.9........... >0039 :     
    KEY.SPACE........... >0020 :     
    KEY.UC.A............ >0041 :     
    KEY.UC.B............ >0042 :     
    KEY.UC.C............ >0043 :     
    KEY.UC.D............ >0044 :     
    KEY.UC.E............ >0045 :     
    KEY.UC.F............ >0046 :     
    KEY.UC.G............ >0047 :     
    KEY.UC.H............ >0048 :     
    KEY.UC.I............ >0049 :     
    KEY.UC.J............ >004A :     
    KEY.UC.K............ >004B :     
    KEY.UC.L............ >004C :     
    KEY.UC.M............ >004D :     
    KEY.UC.N............ >004E :     
    KEY.UC.O............ >004F :     
    KEY.UC.P............ >0050 :     
    KEY.UC.Q............ >0051 :     
    KEY.UC.R............ >0052 :     
    KEY.UC.S............ >0053 :     
    KEY.UC.X............ >0058 :     
    KEYCODE1............ >A028 :     
    KEYCODE2............ >A02A :     
    KICKSTART.CODE1..... >6040 :     
    KICKSTART.CODE2..... >6046 :     
    KICKSTART.RESUME.... >6038 :     
    KSCAN............... >000E :     
    KTHREAD............. >2EA2 :     
    KTHREAD_EXIT........ >2EB4 :     
    KTHREAD_KB.......... >2EB0 :     
    LDFNT............... >2360 :     
    LDFNT1.............. >2378 :     
    LDFNT2.............. >23B2 :     
    LDFNT3.............. >23C6 :     
    LDFNT4.............. >23DA :     
    LOADMC.............. >221A :     
    MAGIC.CHECK......... >6DB0 :     
    MAGIC.CLEAR......... >6D9E :     
    MAGIC.SET........... >6D8C :     
    MAGIC.STR.W1........ >A000 :     
    MAGIC.STR.W2........ >A002 :     
    MAGIC.STR.W3........ >A004 :     
    MAIN................ >6046 :     
    MCCODE.............. >2210 :     
    MCLOOP.............. >8320 :     
    MCSPRD.............. >8322 :     
    MEM.SAMS.SET.BOOT... >6D68 :     
    MEM.SAMS.SET.LEGACY. >6D56 :     
    MEM.SAMS.SET.STEVIE. >6D7A :     
    MEM.SAMS.SETUP.STEVIE >6D44 :     
    MKHEX............... >2918 :     
    MKHEX1.............. >2930 :     
    MKHEX1.DIGIT09...... >2946 :     
    MKHEX1.DIGITAF...... >293C :     
    MKHEX2.............. >294C :     
    MKHEX3.............. >298E :     
    MKHOO1.............. >2EC0 :     
    MKHOOK.............. >2EB8 :     
    MKNUM............... >29A6 :     
    MKNUM1.............. >29B8 :     
    MKNUM2.............. >29D4 :     
    MKNUM3.............. >29D8 :     
    MKNUM4.............. >29E2 :     
    MKNUM5.............. >29EA :     
    MKSLO1.............. >2EE6 :     
    MKSLOT.............. >2ECC :     
    MMPLA1.............. >2884 :     
    MMPLA2.............. >288A :     
    MMPLAY.............. >287C :     
    MUTE................ >27FA :     
    MUTE2............... >27FE :     
    MUTTAB.............. >2814 :     
    NOFONT.............. >FFFF :     
    NOREP............... >0000 :     
    NOSPRITE............ >3830 :     
    NUM1................ >3030 :     
    NUM2................ >3020 :     
    OUTPARM1............ >A018 :     
    OUTPARM2............ >A01A :     
    OUTPARM3............ >A01C :     
    OUTPARM4............ >A01E :     
    OUTPARM5............ >A020 :     
    OUTPARM6............ >A022 :     
    OUTPARM7............ >A024 :     
    PALON............... >201C :     
    PANE.ACTION.COLORSCHEME.LOAD >6D0E :     
    PANE.ACTION.COLORSCHEME.STATLINES >6D20 :     
    PANE.BOTROW......... >003B :     
    PANE.ERRLINE.SHOW... >6CFC :     
    PANE.FOCUS.CMDB..... >0001 :     
    PANE.FOCUS.FB....... >0000 :     
    PANE.TOPLINE.ONESHOT.CLEARMSG >3744 :     
    PANE.TOPLINE.ONESHOT.CLEARMSG.EXIT >375C :     
    PARM1............... >A006 :     
    PARM2............... >A008 :     
    PARM3............... >A00A :     
    PARM4............... >A00C :     
    PARM5............... >A00E :     
    PARM6............... >A010 :     
    PARM7............... >A012 :     
    PARM8............... >A014 :     
    PARM9............... >A016 :     
    PCTADR.............. >0FC0 :     
    POPR0............... >2230 :     
    POPR1............... >222E :     
    POPR2............... >222C :     
    POPR3............... >222A :     
    POPRT............... >2232 :     
    PREFIX.............. >299A :     
    PUTAT............... >2442 :     
    PUTHEX.............. >299C :     
    PUTLST.............. >244A :     
    PUTLST.EXIT......... >2480 :     
    PUTLST.LOOP......... >2452 :     
    PUTNUM.............. >2A24 :     
    PUTSTR.............. >241E :     
    PUTV01.............. >2346 :     
    PUTVR............... >2332 :     
    PUTVRX.............. >2334 :     
    R0.................. >0000 :     
    R0HB................ >8300 :     
    R0LB................ >8301 :     
    R1.................. >0001 :     
    R10................. >000A :     
    R10HB............... >8314 :     
    R10LB............... >8315 :     
    R11................. >000B :     
    R11HB............... >8316 :     
    R11LB............... >8317 :     
    R12................. >000C :     
    R12HB............... >8318 :     
    R12LB............... >8319 :     
    R13................. >000D :     
    R13HB............... >831A :     
    R13LB............... >831B :     
    R14................. >000E :     
    R14HB............... >831C :     
    R14LB............... >831D :     
    R15................. >000F :     
    R15HB............... >831E :     
    R15LB............... >831F :     
    R1HB................ >8302 :     
    R1LB................ >8303 :     
    R2.................. >0002 :     
    R2HB................ >8304 :     
    R2LB................ >8305 :     
    R3.................. >0003 :     
    R3HB................ >8306 :     
    R3LB................ >8307 :     
    R4.................. >0004 :     
    R4HB................ >8308 :     
    R4LB................ >8309 :     
    R5.................. >0005 :     
    R5HB................ >830A :     
    R5LB................ >830B :     
    R6.................. >0006 :     
    R6HB................ >830C :     
    R6LB................ >830D :     
    R7.................. >0007 :     
    R7HB................ >830E :     
    R7LB................ >830F :     
    R8.................. >0008 :     
    R8HB................ >8310 :     
    R8LB................ >8311 :     
    R9.................. >0009 :     
    R9HB................ >8312 :     
    R9LB................ >8313 :     
    RAMBUF.............. >A100 :     
    RAMSAT.............. >A056 :     
    RKSCAN.............. >28B6 :     
    RKSCAN.EXIT......... >290C :     
    ROM.FARJUMP......... >2FCA :     
    ROM.FARJUMP.BANKSWITCH.CALL >302C :     
    ROM.FARJUMP.BANKSWITCH.FAILED1 >3024 :     
    ROM.FARJUMP.BANKSWITCH.FAILED2 >305A :     
    ROM.FARJUMP.BANKSWITCH.SRC.ADVFG99 >3050 :     
    ROM.FARJUMP.BANKSWITCH.SRC.ROM8K >304C :     
    ROM.FARJUMP.BANKSWITCH.TARGET.ROM8K >3008 :     
    ROM.FARJUMP.BANKSWITCH.TGT.ADVFG99 >300C :     
    ROM.FARJUMP.BANKSWITCH.TGT.DONE >3014 :     
    ROM.FARJUMP.EXIT.... >3062 :     
    ROM.FARJUMP.RETURN.. >302E :     
    ROM.PROGRAM1........ >600C :     
    ROM.PROGRAM2........ >6024 :     
    ROM0_KSCAN_ON....... >0001 :     
    ROM0_KSCAN_OUT...... >A028 :     
    ROMSAT.............. >3824 :     
    RSSLOT.............. >2EF8 :     
    RUNLI1.............. >2F10 :     
    RUNLI2.............. >2F1C :     
    RUNLI3.............. >2F20 :     
    RUNLI3A............. >2F28 :     
    RUNLI4.............. >2F32 :     
    RUNLI5.............. >2F3C :     
    RUNLI6.............. >2F4A :     
    RUNLI7.............. >2F58 :     
    RUNLI9.............. >2F5C :     
    RUNLIA.............. >2F7E :     
    RUNLIB.............. >2F0C :     
    RUNLIC.............. >2FA2 :     
    RUNLID.............. >2FB8 :     
    RUNLIE.............. >2FC2 :     
    S16X16.............. >26BE :     
    S8X8................ >26B6 :     
    SAMS.LAYOUT......... >25EE :     
    SAMS.LAYOUT.COPY.... >263E :     
    SAMS.LAYOUT.COPY.DATA >2676 :     
    SAMS.LAYOUT.COPY.EXIT >266A :     
    SAMS.LAYOUT.COPY.LOOP >265C :     
    SAMS.LAYOUT.EXIT.... >2626 :     
    SAMS.LAYOUT.STANDARD >262E :     
    SAMS.MAPPING.OFF.... >25E0 :     
    SAMS.MAPPING.OFF.EXIT >25EA :     
    SAMS.MAPPING.ON..... >25D2 :     
    SAMS.MAPPING.ON.EXIT >25DC :     
    SAMS.PAGE.GET....... >253C :     
    SAMS.PAGE.GET.EXIT.. >256A :     
    SAMS.PAGE.SET....... >2572 :     
    SAMS.PAGE.SET.EXIT.. >25C6 :     
    SAMS.PAGE.SET.SWITCH_PAGE >25B6 :     
    SCROFF.............. >2686 :     
    SCRON............... >268E :     
    SCRPAD.83C6......... >2912 :     
    SCRPAD.83FA......... >2914 :     
    SCRPAD.83FE......... >2916 :     
    SDEXI1.............. >28AE :     
    SDEXI2.............. >28B0 :     
    SDEXIT.............. >289C :     
    SDOPT1.............. >0007 :     
    SDOPT2.............. >0005 :     
    SDOPT3.............. >0006 :     
    SDOPT4.............. >0004 :     
    SDPLA1.............. >2836 :     
    SDPLA2.............. >2840 :     
    SDPLA3.............. >2842 :     
    SDPLAY.............. >282E :     
    SDPREP.............. >2818 :     
    SETX................ >26DC :     
    SKIP_CPU_CRC16...... >0001 :     
    SKIP_CPU_RLE_COMPRESS >0001 :     
    SKIP_CPU_RLE_DECOMPRESS >0001 :     
    SKIP_GROM_CPU_COPY.. >0001 :     
    SKIP_GROM_VRAM_COPY. >0001 :     
    SKIP_RANDOM_GENERATOR >0001 :     
    SKIP_ROM_BANKSWITCH. >0001 :     
    SKIP_SAMS_LAYOUT.... >0001 :     
    SKIP_SPEECH_DETECTION >0001 :     
    SKIP_SPEECH_PLAYER.. >0001 :     
    SKIP_VDP_BITMAP..... >0001 :     
    SKIP_VDP_BOXES...... >0001 :     
    SKIP_VDP_PX2YX_CALC. >0001 :     
    SKIP_VDP_RLE_DECOMPRESS >0001 :     
    SKIP_VDP_VCHAR...... >0001 :     
    SKIP_VDP_VIEWPORT... >0001 :     
    SKIP_VIRTUAL_KEYBOARD >0001 :     
    SLOTOK.............. >2E84 :     
    SMAG1X.............. >26A6 :     
    SMAG2X.............. >26AE :     
    SOUND............... >8400 :     
    SP2.STKTOP.......... >A900 :     
    SPCHRD.............. >9000 :     
    SPCHWT.............. >9400 :     
    SPCODE.............. >2216 :     
    SPFBCK.............. >0004 :     
    SPFCLR.............. >00F4 :     
    SPFONT.............. >0000 :     
    SPKOFF.............. >FF00 :     
    SPKON............... >6000 :     
    SPRITECURSOR........ >0000 :     
    SPRPDT.............. >3800 :     
    SPRSAT.............. >3A00 :     
    SPVMOD.............. >7F6A :     
    STACK............... >0009 :     
    STARTUP_KEEP_VDPMEMORY >0001 :     
    STEVIE.80X30........ >7F60 :     
    STEVIE.80X60........ >7F6A :     
    STRING.GETLENC...... >2A9A :     
    STRING.GETLENC.EXIT. >2AE6 :     
    STRING.GETLENC.LOOP. >2AC8 :     
    STRING.GETLENC.PANIC >2ADE :     
    STRING.GETLENC.PUTLENGTH >2AD6 :     
    STRING.LTRIM........ >2A2E :     
    STRING.LTRIM.EXIT... >2A8E :     
    STRING.LTRIM.MOVE... >2A74 :     
    STRING.LTRIM.PANIC.. >2A86 :     
    STRING.LTRIM.SCAN... >2A68 :     
    TALKOF.............. >00FF :     
    TALKON.............. >0060 :     
    TASK.ONESHOT........ >3818 :     
    TASK.ONESHOT.EXIT... >3820 :     
    TASK.VDP.CURSOR..... >3790 :     
    TASK.VDP.CURSOR.CMDB >37BE :     
    TASK.VDP.CURSOR.CMDB.HIDE >37CA :     
    TASK.VDP.CURSOR.DUMP >37FC :     
    TASK.VDP.CURSOR.EXIT >3808 :     
    TASK.VDP.CURSOR.FB.. >37D0 :     
    TASK.VDP.CURSOR.FB.VISIBLE >37DC :     
    TASK.VDP.CURSOR.FB.VISIBLE.NORULER >37F0 :     
    TIB.AUTOUNPK........ >A0C0 :     
    TIB.AUX............. >FF00 :     
    TIB.AUX.END......... >FFFA :     
    TIB.AUX.FNAME....... >FF00 :     
    TIB.LINES........... >A0D2 :     
    TIB.LNT.BOT.PTR..... >A0C8 :     
    TIB.LNT.TOP.PTR..... >A0C6 :     
    TIB.SAMSTAB.PTR..... >A0EA :     
    TIB.SCRPAD.PTR...... >A0C4 :     
    TIB.SESSION......... >A0B4 :     
    TIB.STAB.PTR........ >A0C2 :     
    TIB.STATUS1......... >A0B6 :     
    TIB.STATUS2......... >A0B8 :     
    TIB.STATUS3......... >A0BA :     
    TIB.STATUS4......... >A0BC :     
    TIB.STATUS5......... >A0BE :     
    TIB.STRS.BOT.PTR.... >A0D0 :     
    TIB.STRS.TOP.PTR.... >A0CE :     
    TIB.SYMT.BOT.PTR.... >A0CC :     
    TIB.SYMT.TOP.PTR.... >A0CA :     
    TIB.VAR1............ >A0EC :     
    TIB.VAR10........... >A0FE :     
    TIB.VAR2............ >A0EE :     
    TIB.VAR3............ >A0F0 :     
    TIB.VAR4............ >A0F2 :     
    TIB.VAR5............ >A0F4 :     
    TIB.VAR6............ >A0F6 :     
    TIB.VAR7............ >A0F8 :     
    TIB.VAR8............ >A0FA :     
    TIB.VAR9............ >A0FC :     
    TIBASIC.32X24....... >7F74 :     
    TIBASIC.32X30....... >7F7E :     
    TIMERS.............. >A064 :     
    TMDAT............... >2EA0 :     
    TMGR................ >2E04 :     
    TMGR1............... >2E08 :     
    TMGR10.............. >2E88 :     
    TMGR11.............. >2E96 :     
    TMGR12.............. >2E9A :     
    TMGR1A.............. >2E16 :     
    TMGR2............... >2E1C :     
    TMGR3............... >2E2C :     
    TMGR4............... >2E3E :     
    TMGR5............... >2E54 :     
    TMGR6............... >2E58 :     
    TMGR7............... >2E5C :     
    TMGR8............... >2E5E :     
    TMGR9............... >2E66 :     
    TMP0................ >0004 :     
    TMP006.............. >23E2 :     
    TMP007.............. >24D8 :     
    TMP008.............. >24B6 :     
    TMP011.............. >253A :     
    TMP0HB.............. >8308 :     
    TMP0LB.............. >8309 :     
    TMP1................ >0005 :     
    TMP1HB.............. >830A :     
    TMP1LB.............. >830B :     
    TMP2................ >0006 :     
    TMP2HB.............. >830C :     
    TMP2LB.............. >830D :     
    TMP3................ >0007 :     
    TMP3HB.............. >830E :     
    TMP3LB.............. >830F :     
    TMP4................ >0008 :     
    TMP4HB.............. >8310 :     
    TMP4LB.............. >8311 :     
    TRIMNUM............. >29FE :     
    TRIMNUM_FILL........ >2A1C :     
    TRIMNUM_SCAN........ >2A0A :     
    TRIMNUM_SETLEN...... >2A16 :     
    TRMPVECTOR.......... >A034 :     
    TV.1TIMEONLY........ >00FE :     
    TV.BUSYCOLOR........ >A21C :     
    TV.CLIP.FNAME....... >DE50 :     
    TV.CMDB.HCOLOR...... >A220 :     
    TV.COLOR............ >A218 :     
    TV.COLORIZE.RESET... >9900 :     
    TV.COLORSCHEME...... >A212 :     
    TV.COLORSCHEME.ENTRIES >000A :     
    TV.COLORSCHEME.TABLE >3832 :     
    TV.CURCOLOR......... >A216 :     
    TV.CURSHAPE......... >A214 :     
    TV.ERROR.MSG........ >A234 :     
    TV.ERROR.ROWS....... >A22C :     
    TV.ERROR.VISIBLE.... >A22A :     
    TV.FG99.IMG.PTR..... >A232 :     
    TV.FJ.STACKPNT...... >A228 :     
    TV.FONT.PTR......... >A222 :     
    TV.FREE............. >A2D4 :     
    TV.INIT............. >32E6 :     
    TV.INIT.EXIT........ >3326 :     
    TV.MARKCOLOR........ >A21A :     
    TV.PAD.STRING....... >342C :     
    TV.PAD.STRING.EXIT.. >3498 :     
    TV.PAD.STRING.LOOP.. >3482 :     
    TV.PAD.STRING.PANIC. >3490 :     
    TV.PANE.FOCUS....... >A224 :     
    TV.PRINTER.FNAME.... >DE00 :     
    TV.QUIT............. >3330 :     
    TV.RESET............ >333E :     
    TV.RESET.EXIT....... >3364 :     
    TV.RULER.VISIBLE.... >A210 :     
    TV.RULERCOLOR....... >A21E :     
    TV.SAMS.2000........ >A200 :     
    TV.SAMS.3000........ >A202 :     
    TV.SAMS.A000........ >A204 :     
    TV.SAMS.B000........ >A206 :     
    TV.SAMS.C000........ >A208 :     
    TV.SAMS.D000........ >A20A :     
    TV.SAMS.E000........ >A20C :     
    TV.SAMS.F000........ >A20E :     
    TV.SP2.CONF......... >A22E :     
    TV.SP2.STACK........ >A230 :     
    TV.TABS.TABLE.LR.... >3882 :     
    TV.TABS.TABLE.RL.... >388E :     
    TV.TASK.ONESHOT..... >A226 :     
    TV.TOP.............. >A200 :     
    TV.UINT16.MPY....... >33F6 :     
    TV.UINT16.PACK...... >3368 :     
    TV.UINT16.PACK.DONE. >33E2 :     
    TV.UINT16.PACK.ERROR >33DA :     
    TV.UINT16.PACK.EXIT. >33E6 :     
    TV.UINT16.PACK.LOOP. >33B0 :     
    TV.UINT16.UNPACK.... >3400 :     
    TV.UINT16.UNPACK.EXIT >3426 :     
    TX4024.............. >21FC :     
    TX8024.............. >2206 :     
    TXT.ALPHA.DOWN...... >3BC6 :     
    TXT.AUTOINS.OFF..... >3A26 :     
    TXT.AUTOINS.ON...... >3A16 :     
    TXT.AUTOINSERT...... >38BA :     
    TXT.BLOCK.CLIP...... >3940 :     
    TXT.BLOCK.COPY...... >3902 :     
    TXT.BLOCK.DEL....... >38EE :     
    TXT.BLOCK.INSIDE.... >3C72 :     
    TXT.BLOCK.MOVE...... >3914 :     
    TXT.BLOCK.PRINT..... >395A :     
    TXT.BLOCK.SAVE...... >3926 :     
    TXT.BOTTOM.......... >38A8 :     
    TXT.CLEARMEM........ >396E :     
    TXT.CMDB.PROMPT..... >3CA0 :     
    TXT.COLORSCHEME..... >3CA2 :     
    TXT.DELIM........... >38A6 :     
    TXT.DONE.APPEND..... >39A4 :     
    TXT.DONE.CLIPBOARD.. >39F8 :     
    TXT.DONE.CLIPDEV.... >3A08 :     
    TXT.DONE.COPY....... >39C6 :     
    TXT.DONE.DELETE..... >39E6 :     
    TXT.DONE.INSERT..... >3992 :     
    TXT.DONE.LOAD....... >3982 :     
    TXT.DONE.PRINT...... >39D6 :     
    TXT.DONE.SAVE....... >39B6 :     
    TXT.FASTMODE........ >3A36 :     
    TXT.FILETYPE.DV80... >3ABA :     
    TXT.FILETYPE.NONE... >3BD8 :     
    TXT.INSERT.......... >38B4 :     
    TXT.IO.NOFILE....... >3C2C :     
    TXT.IOERR.LOAD...... >3BE4 :     
    TXT.IOERR.PRINT..... >3C10 :     
    TXT.IOERR.SAVE...... >3BFA :     
    TXT.KB.............. >3A5E :     
    TXT.KEYMARKER....... >3BCC :     
    TXT.KEYS.BASIC1..... >3B48 :     
    TXT.KEYS.BLOCK...... >3B12 :     
    TXT.KEYS.DEFAULT.... >3AC8 :     
    TXT.KEYS.DEFAULTB... >3AE8 :     
    TXT.LINES........... >3A62 :     
    TXT.LOADING......... >38C2 :     
    TXT.M1.............. >3AC0 :     
    TXT.M2.............. >3AC4 :     
    TXT.MEMFULL.LOAD.... >3C44 :     
    TXT.NEWFILE......... >3A68 :     
    TXT.OVRWRITE........ >38AE :     
    TXT.PRINTING........ >38DA :     
    TXT.RULER........... >3B76 :     
    TXT.SAVING.......... >38CE :     
    TXT.STAR............ >38C0 :     
    TXT.TIB1............ >3A74 :     
    TXT.TIB2............ >3A82 :     
    TXT.TIB3............ >3A90 :     
    TXT.TIB4............ >3A9E :     
    TXT.TIB5............ >3AAC :     
    TXT.UNCRUNCHING..... >3A42 :     
    TXT.VERTLINE........ >3BCA :     
    TXT.WS1............. >3BCE :     
    TXT.WS2............. >3BD0 :     
    TXT.WS3............. >3BD4 :     
    TXT.WS4............. >3BD8 :     
    TXT.WS5............. >3BDE :     
    UINT16.PACKED....... >A032 :     
    UINT16.UNPACKED..... >A02C :     
    UP.................. >26D4 :     
    VDP.FB.TOPROW.SIT... >0050 :     
    VDP.FB.TOPROW.TAT... >1850 :     
    VDP.PDT.BASE........ >3000 :     
    VDP.SIT.BASE........ >0000 :     
    VDP.SIT.SIZE........ >12C0 :     
    VDP.TAT.BASE........ >1800 :     
    VDP.TAT.SIZE........ >12C0 :     
    VDPA................ >8C02 :     
    VDPLA1.............. >2860 :     
    VDPLA2.............. >2866 :     
    VDPLA3.............. >2876 :     
    VDPLAY.............. >2848 :     
    VDPR................ >8800 :     
    VDPR0............... >831C :     
    VDPR01.............. >000E :     
    VDPR1............... >831D :     
    VDPRW............... >000F :     
    VDPS................ >8802 :     
    VDPW................ >8C00 :     
    VDRA................ >22BA :     
    VDWA................ >22B6 :     
    VEC.1............... >7FC0 :     
    VEC.10.............. >7FD2 :     
    VEC.11.............. >7FD4 :     
    VEC.12.............. >7FD6 :     
    VEC.13.............. >7FD8 :     
    VEC.14.............. >7FDA :     
    VEC.15.............. >7FDC :     
    VEC.16.............. >7FDE :     
    VEC.17.............. >7FE0 :     
    VEC.18.............. >7FE2 :     
    VEC.19.............. >7FE4 :     
    VEC.2............... >7FC2 :     
    VEC.20.............. >7FE6 :     
    VEC.21.............. >7FE8 :     
    VEC.22.............. >7FEA :     
    VEC.23.............. >7FEC :     
    VEC.24.............. >7FEE :     
    VEC.25.............. >7FF0 :     
    VEC.26.............. >7FF2 :     
    VEC.27.............. >7FF4 :     
    VEC.28.............. >7FF6 :     
    VEC.29.............. >7FF8 :     
    VEC.3............... >7FC4 :     
    VEC.30.............. >7FFA :     
    VEC.31.............. >7FFC :     
    VEC.32.............. >7FFE :     
    VEC.4............... >7FC6 :     
    VEC.5............... >7FC8 :     
    VEC.6............... >7FCA :     
    VEC.7............... >7FCC :     
    VEC.8............... >7FCE :     
    VEC.9............... >7FD0 :     
    VGETB............... >22E2 :     
    VIDTA1.............. >2314 :     
    VIDTAB.............. >22F8 :     
    VPUTB............... >22C8 :     
    WAUX1............... >833C :     
    WAUX2............... >833E :     
    WAUX3............... >8340 :     
    WBASE............... >8328 :     
    WBIT0............... >2020 :     
    WBIT1............... >201E :     
    WBIT10.............. >200C :     
    WBIT11.............. >200A :     
    WBIT12.............. >2008 :     
    WBIT13.............. >2006 :     
    WBIT14.............. >2004 :     
    WBIT15.............. >2002 :     
    WBIT2............... >201C :     
    WBIT3............... >201A :     
    WBIT4............... >2018 :     
    WBIT5............... >2016 :     
    WBIT6............... >2014 :     
    WBIT7............... >2012 :     
    WBIT8............... >2010 :     
    WBIT9............... >200E :     
    WCOLMN.............. >833A :     
    WS1................. >8300 :     
    WSDLST.............. >8334 :     
    WSDTMP.............. >8336 :     
    WSPEAK.............. >8338 :     
    WTITAB.............. >832C :     
    WTITMP.............. >8330 :     
    WTIUSR.............. >832E :     
    WVRTKB.............. >8332 :     
    WYX................. >832A :     
    XCONFIG............. >0003 :     
    XCPU.SCRPAD.PGIN.... >2B78 :     
    XCPU.SCRPAD.PGOUT... >2B4A :     
    XFG99............... >2DC6 :     
    XFILE.CLOSE......... >2D32 :     
    XFILE.OPEN.......... >2D10 :     
    XFILM............... >223C :     
    XFILV............... >2294 :     
    XIDTAB.............. >22FA :     
    XLSLOT.............. >2EEC :     
    XPYM2M.............. >24E0 :     
    XPYM2V.............. >248C :     
    XPYV2M.............. >24BE :     
    XROM.FARJUMP........ >2FE2 :     
    XROM.FARJUMP.PUSH_RETURN >2FF2 :     
    XSAMS.LAYOUT........ >25F0 :     
    XSAMS.PAGE.GET...... >253E :     
    XSAMS.PAGE.SET...... >2576 :     
    XSETX............... >26DE :     
    XSTRING.GETLENC..... >2AB4 :     
    XSTRING.LTRIM....... >2A4A :     
    XUTST0.............. >2420 :     
    XUTSTR.............. >2422 :     
    XVGETB.............. >22E4 :     
    XVPUTB.............. >22CC :     
    YX2PI1.............. >2716 :     
    YX2PI2.............. >271C :     
    YX2PI3.............. >2726 :     
    YX2PNT.............. >23FA :     
    YX2PX............... >26E8 :     
    YX2PXX.............. >26EC :     
    YX2PXX_C80.......... >2728 :     
    YX2PXX_NORMAL....... >270C :     
    YX2PXX_Y_CALC....... >2710 :     
    _FILE.RECORD.FOP.... >2D6E :     
    _FILE.RECORD.FOP.EXIT >2DC0 :     
    _FILE.RECORD.FOP.OPTIMIZED >2DA4 :     
    _FILE.RECORD.FOP.PAB >2DA8 :     
    _IDX.ENTRY.DELETE.REORG >3542 :     
    _IDX.ENTRY.DELETE.REORG.LOOP >354A :     
    _IDX.ENTRY.INSERT.REORG >35B6 :     
    _IDX.ENTRY.INSERT.REORG.CRASH >35BC :     
    _IDX.ENTRY.INSERT.REORG.LOOP >35E4 :     
    _IDX.SAMS.MAPCOLUMN.OFF >318A :     
    _IDX.SAMS.MAPCOLUMN.OFF.EXIT >31B8 :     
    _IDX.SAMS.MAPCOLUMN.ON >3156 :     
    _IDX.SAMS.MAPCOLUMN.ON.EXIT >3180 :     
    _IDX.SAMSPAGE.GET... >31C4 :     
    _IDX.SAMSPAGE.GET.EXIT >320A :     
