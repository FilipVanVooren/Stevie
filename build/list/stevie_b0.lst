XAS99 CROSS-ASSEMBLER   VERSION 3.4.0
     **** ****     > stevie_b0.asm
0001               ********************************************************************************
0002               *   Stevie
0003               *   Modern Programming Editor for the Texas Instruments TI-99/4a Home Computer.
0004               *   Copyright (C) 2018-2023 / Filip van Vooren
0005               *
0006               *   This program is free software: you can redistribute it and/or modify
0007               *   it under the terms of the GNU General Public License as published by
0008               *   the Free Software Foundation, either version 3 of the License, or
0009               *   (at your option) any later version.
0010               *
0011               *   This program is distributed in the hope that it will be useful,
0012               *   but WITHOUT ANY WARRANTY; without even the implied warranty of
0013               *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
0014               *   GNU General Public License for more details.
0015               *
0016               *   You should have received a copy of the GNU General Public License
0017               *   along with this program.  If not, see <https://www.gnu.org/licenses/>.
0018               ********************************************************************************
0019               * File: stevie_b0.asm
0020               *
0021               * Bank 0 "Jill"
0022               * Setup resident SP2/Stevie modules and start SP2 kernel
0023               ********************************************************************************
0024                       copy  "buildinfo.asm"       ; "build/.buildinfo/buildinfo.asm"
     **** ****     > buildinfo.asm
0001               ***************************************************************
0002               * BUILD: 230322-1626490
0003               ***************************************************************
                   < stevie_b0.asm
0025                       copy  "rom.build.asm"       ; Cartridge build options
     **** ****     > rom.build.asm
0001               * FILE......: rom.build.asm
0002               * Purpose...: Cartridge build options
0003               
0004               *--------------------------------------------------------------
0005               * Skip unused spectra2 code modules for reduced code size
0006               *--------------------------------------------------------------
0007      0001     skip_rom_bankswitch       equ  1       ; Skip support for ROM bankswitching
0008      0001     skip_grom_cpu_copy        equ  1       ; Skip GROM to CPU copy functions
0009      0001     skip_grom_vram_copy       equ  1       ; Skip GROM to VDP vram copy functions
0010      0001     skip_vdp_vchar            equ  1       ; Skip vchar, xvchar
0011      0001     skip_vdp_boxes            equ  1       ; Skip filbox, putbox
0012      0001     skip_vdp_bitmap           equ  1       ; Skip bitmap functions
0013      0001     skip_vdp_viewport         equ  1       ; Skip viewport functions
0014      0001     skip_cpu_rle_compress     equ  1       ; Skip CPU RLE compression
0015      0001     skip_cpu_rle_decompress   equ  1       ; Skip CPU RLE decompression
0016      0001     skip_vdp_rle_decompress   equ  1       ; Skip VDP RLE decompression
0017      0001     skip_vdp_px2yx_calc       equ  1       ; Skip pixel to YX calculation
0018      0001     skip_speech_detection     equ  1       ; Skip speech synthesizer detection
0019      0001     skip_speech_player        equ  1       ; Skip inclusion of speech player code
0020      0001     skip_virtual_keyboard     equ  1       ; Skip virtual keyboard scan
0021      0001     skip_random_generator     equ  1       ; Skip random functions
0022      0001     skip_cpu_crc16            equ  1       ; Skip CPU memory CRC-16 calculation
0023      0001     skip_sams_layout          equ  1       ; Skip SAMS memory layout routine
0024                                                      ; \
0025                                                      ; | The SAMS support module needs to be
0026                                                      ; | embedded in the cartridge space, so
0027                                                      ; / do not load it here.
0028               
0029               *--------------------------------------------------------------
0030               * SPECTRA2 / Stevie startup options
0031               *--------------------------------------------------------------
0032      0001     startup_keep_vdpmemory    equ  1       ; Do not clear VDP vram on start
0033      6038     kickstart.resume          equ  >6038   ; Resume Stevie session
0034      6040     kickstart.code1           equ  >6040   ; Uniform aorg entry addr accross banks
0035      6046     kickstart.code2           equ  >6046   ; Uniform aorg entry addr accross banks
0036      0001     rom0_kscan_on             equ  1       ; Use KSCAN in console ROM#0
0037      0000     debug                     equ  0       ; Turn on debugging mode
0038               
0039               
0040               *--------------------------------------------------------------
0041               * ROM layout
0042               *--------------------------------------------------------------
0043      7F00     bankx.crash.showbank      equ  >7f00   ; Show ROM bank in CPU crash screen
0044      7F10     bankx.vdptab              equ  >7f10   ; VDP mode tables
0045      7F40     bankx.vectab              equ  >7f40   ; Vector table
0046      0000     device.fg99.mode.adv      equ  0       ; FG99 advanced mode off
                   < stevie_b0.asm
0026                       copy  "rom.order.asm"       ; ROM bank ordster "non-inverted"
     **** ****     > rom.order.asm
0001               * FILE......: rom.order.asm
0002               * Purpose...: Equates with CPU write addresses for switching banks
0003               
0004               *--------------------------------------------------------------
0005               * ROM 8K/4K banks. Bank order (non-inverted)
0006               *--------------------------------------------------------------
0007      6000     bank0.rom                 equ  >6000   ; Jill
0008      6002     bank1.rom                 equ  >6002   ; James
0009      6004     bank2.rom                 equ  >6004   ; Jacky
0010      6006     bank3.rom                 equ  >6006   ; John
0011      6008     bank4.rom                 equ  >6008   ; Janine
0012      600A     bank5.rom                 equ  >600a   ; Jumbo
0013      600C     bank6.rom                 equ  >600c   ; Jenifer
0014      600E     bank7.rom                 equ  >600e   ; Jonas
0015               *--------------------------------------------------------------
0016               * RAM 4K banks (Only valid in advanced mode FG99)
0017               *--------------------------------------------------------------
0018      6800     bank0.ram                 equ  >6800   ; Jill
0019      6802     bank1.ram                 equ  >6802   ; James
0020      6804     bank2.ram                 equ  >6804   ; Jacky
0021      6806     bank3.ram                 equ  >6806   ; John
0022      6808     bank4.ram                 equ  >6808   ; Janine
0023      680A     bank5.ram                 equ  >680a   ; Jumbo
0024      680C     bank6.ram                 equ  >680c   ; Jenifer
0025      680E     bank7.ram                 equ  >680e   ; Jonas
                   < stevie_b0.asm
0027                       copy  "equates.vdp.asm"     ; VDP configuration (F18a/9938/...)
     **** ****     > equates.vdp.asm
0001               * FILE......: equates.vdp.asm
0002               * Purpose...: VDP configuration (F18a, 9938, ...)
0003               
0004               ***************************** F18a 24x80 ***************************************
0008               
0009               ***************************** F18a 24x80 ***************************************
0013               
0014               ***************************** F18a 30x80 ***************************************
0016                   copy 'equates.f18a.3080.asm'        ; Sprite cursor/rulers
     **** ****     > equates.f18a.3080.asm
0001               * FILE......: equates.f18a.3080.asm
0002               * Purpose...: F18a 30x80 mode (with sprite cursor/rulers)
0003               
0005               
0006               *===============================================================================
0007               * VDP RAM F18a (0000-47ff)
0008               *
0009               *     Mem range   Bytes    Hex    Purpose
0010               *     =========   =====   =====   =================================
0011               *     0000-095f    2400   >0960   PNT: Pattern Name Table
0012               *     0960-09af      80   >0050   FIO: File record buffer (DIS/VAR 80)
0013               *     0fc0-0fff                   PCT: Color Table (not used in 80 cols mode)
0014               *     1000-17ff    2048   >0800   PDT: Pattern Descriptor Table
0015               *     1800-215f    2400   >0960   TAT: Tile Attribute Table
0016               *                                      (Position based colors F18a, 80 colums)
0017               *     2180                        SAT: Sprite Attribute Table
0018               *                                      (Cursor in F18a, 80 cols mode)
0019               *     2800                        SPT: Sprite Pattern Table
0020               *                                      (Cursor in F18a, 80 columns, 2K boundary)
0021               *===============================================================================
0022               
0023               *--------------------------------------------------------------
0024               * Video mode configuration (stevie) - Graphics mode 30x80
0025               *--------------------------------------------------------------
0026      0050     vdp.fb.toprow.sit         equ  >0050   ; VDP SIT address of 1st Framebuffer row
0027      1850     vdp.fb.toprow.tat         equ  >1850   ; VDP TAT address of 1st Framebuffer row
0028      0000     vdp.sit.base              equ  >0000   ; VDP SIT base address
0029      0960     vdp.sit.size              equ  30*80   ; VDP SIT size 80 columns, 30 rows
0030      1800     vdp.tat.base              equ  >1800   ; VDP TAT base address
0031      0960     vdp.tat.size              equ  30*80   ; VDP TAT size 80 columns, 60 rows
0032      1000     vdp.pdt.base              equ  >1000   ; VDP PDT base address
0033               
0034               *--------------------------------------------------------------
0035               * Video mode configuration (stevie)
0036               *--------------------------------------------------------------
0037      001D     pane.botrow               equ  29      ; Bottom row on screen
0038      0050     colrow                    equ  80      ; Columns per row
0039      0960     fh.vrecbuf                equ  >0960   ; VDP address record buffer
0040      0A60     fh.vpab                   equ  >0a60   ; VDP address PAB
0041      0001     device.f18a               equ  1       ; F18a on
0042      0001     spritecursor              equ  1       ; Use sprites for cursor and ruler
0043               
0044               
0045               *--------------------------------------------------------------
0046               * Video mode configuration (spectra2)
0047               *--------------------------------------------------------------
0048      00F4     spfclr  equ   >f4                   ; Foreground/Background color for font.
0049      0004     spfbck  equ   >04                   ; Screen background color.
0050      7F10     spvmod  equ   bankx.vdptab          ; Video mode.   See VIDTAB for details.
0051      0000     spfont  equ   0                     ; Font to load. See LDFONT for details.
0052               
0053      0FC0     pctadr  equ   >0fc0                 ; VDP color table base
0054      1100     fntadr  equ   >1100                 ; VDP font start address (in PDT range)
0055      2180     sprsat  equ   >2180                 ; VDP sprite attribute table
0056      2800     sprpdt  equ   >2800                 ; VDP sprite pattern table
0057               
                   < equates.vdp.asm
0018               
0019               ***************************** F18a 30x80 ***************************************
0023               
0024               ***************************** F18a 60x80 ***************************************
                   < stevie_b0.asm
0028                       copy  "equates.asm"         ; Stevie main configuration
     **** ****     > equates.asm
0001               * FILE......: equates.asm
0002               * Purpose...: The main equates file for Stevie editor
0003               
0004               
0005               *===============================================================================
0006               * Memory map
0007               * ==========
0008               *
0009               * CARTRIDGE SPACE (6000-7fff)
0010               *
0011               *     Mem range   Bytes    BANK   Purpose
0012               *     =========   =====    ====   ==================================
0013               *     6000-603f      64       0   Cartridge header
0014               *     6040-7fff    8128       0   SP2 library + Stevie library
0015               *                                 relocated to RAM space
0016               *     ..............................................................
0017               *     6000-603f      64     1-7   Cartridge header
0018               *     6040-7fef    7744     1-7   Stevie program code
0019               *     7f00-7fff     384     1-7   Vector table (32 vectors)
0020               *===============================================================================
0021               
0022               
0023               ;-----------------------------------------------------------------
0024               ; Stevie Dialog / Pane specific equates
0025               ;-----------------------------------------------------------------
0026      0000     pane.focus.fb             equ  0       ; Editor pane has focus
0027      0001     pane.focus.cmdb           equ  1       ; Command buffer pane has focus
0028               ;-----------------------------------------------------------------
0029               ;   Dialog ID's
0030               ;-----------------------------------------------------------------
0031      000A     id.dialog.load            equ  10      ; "Load file"
0032      000B     id.dialog.save            equ  11      ; "Save file"
0033      000C     id.dialog.saveblock       equ  12      ; "Save block to file"
0034      000D     id.dialog.insert          equ  13      ; "Insert file"
0035      000E     id.dialog.append          equ  14      ; "Append file"
0036      000F     id.dialog.print           equ  15      ; "Print file"
0037      0010     id.dialog.printblock      equ  16      ; "Print block"
0038      0011     id.dialog.cfg.clip        equ  17      ; "Configure clipboard"
0039      0012     id.dialog.cfg.mc          equ  18      ; "Configure Master Catalog"
0040      0013     id.dialog.goto            equ  19      ; "Goto"
0041               ;-----------------------------------------------------------------
0042               ;   Dialog ID's >= 100 indicate that command prompt should be
0043               ;   hidden and no characters added to CMDB keyboard buffer.
0044               ;-----------------------------------------------------------------
0045      0064     id.dialog.menu            equ  100     ; "Main Menu"
0046      0065     id.dialog.unsaved         equ  101     ; "Unsaved changes"
0047      0066     id.dialog.block           equ  102     ; "Block move/copy/delete/print/..."
0048      0067     id.dialog.clipboard       equ  103     ; "Copy clipboard to line ..."
0049      0068     id.dialog.help            equ  104     ; "About"
0050      0069     id.dialog.file            equ  105     ; "File"
0051      006A     id.dialog.cartridge       equ  106     ; "Cartridge"
0052      006B     id.dialog.basic           equ  107     ; "TI Basic"
0053      006C     id.dialog.cfg             equ  108     ; "Configure"
0054      006D     id.dialog.editor          equ  109     ; "Configure editor"
0055      006E     id.dialog.font            equ  110     ; "Configure font"
0056      006F     id.dialog.shortcuts       equ  111     ; "Shortcuts"
0057               ;-----------------------------------------------------------------
0058               ; Suffix characters for clipboards
0059               ;-----------------------------------------------------------------
0060      3100     clip1                     equ  >3100   ; '1'
0061      3200     clip2                     equ  >3200   ; '2'
0062      3300     clip3                     equ  >3300   ; '3'
0063      3400     clip4                     equ  >3400   ; '4'
0064      3500     clip5                     equ  >3500   ; '5'
0065               ;-----------------------------------------------------------------
0066               ; Keyboard flags in Stevie
0067               ;-----------------------------------------------------------------
0068      0001     kbf.kbclear               equ  >0001   ;  Keyboard buffer cleared / @w$0001
0069               ;-----------------------------------------------------------------
0070               ; File work mode
0071               ;-----------------------------------------------------------------
0072      0001     id.file.loadfile          equ  1       ; Load file
0073      0002     id.file.insertfile        equ  2       ; Insert file
0074      0003     id.file.appendfile        equ  3       ; Append file
0075      0004     id.file.savefile          equ  4       ; Save file
0076      0005     id.file.saveblock         equ  5       ; Save block to file
0077      0006     id.file.clipblock         equ  6       ; Save block to clipboard
0078      0007     id.file.printfile         equ  7       ; Print file
0079      0008     id.file.printblock        equ  8       ; Print block
0080               ;-----------------------------------------------------------------
0081               ; Special file indicator
0082               ;-----------------------------------------------------------------
0083      0000     id.special.normal         equ  0       ; Normal file
0084      0001     id.special.mastcat        equ  1       ; Master catalog
0085      0002     id.special.readonly       equ  2       ; Read-only file
0086      0003     id.special.basic          equ  3       ; TI Basic program
0087               ;-----------------------------------------------------------------
0088               ; Stevie core 1 RAM                    @>a000-a0ff   (256 bytes)
0089               ;-----------------------------------------------------------------
0090      A000     core1.top         equ  >a000           ; Structure begin
0091      A000     magic.str.w1      equ  core1.top + 0   ; Magic string word 1
0092      A002     magic.str.w2      equ  core1.top + 2   ; Magic string word 2
0093      A004     magic.str.w3      equ  core1.top + 4   ; Magic string word 3
0094      A006     parm1             equ  core1.top + 6   ; Function parameter 1
0095      A008     parm2             equ  core1.top + 8   ; Function parameter 2
0096      A00A     parm3             equ  core1.top + 10  ; Function parameter 3
0097      A00C     parm4             equ  core1.top + 12  ; Function parameter 4
0098      A00E     parm5             equ  core1.top + 14  ; Function parameter 5
0099      A010     parm6             equ  core1.top + 16  ; Function parameter 6
0100      A012     parm7             equ  core1.top + 18  ; Function parameter 7
0101      A014     parm8             equ  core1.top + 20  ; Function parameter 8
0102      A016     parm9             equ  core1.top + 22  ; Function parameter 9
0103      A018     outparm1          equ  core1.top + 24  ; Function output parameter 1
0104      A01A     outparm2          equ  core1.top + 26  ; Function output parameter 2
0105      A01C     outparm3          equ  core1.top + 28  ; Function output parameter 3
0106      A01E     outparm4          equ  core1.top + 30  ; Function output parameter 4
0107      A020     outparm5          equ  core1.top + 32  ; Function output parameter 5
0108      A022     outparm6          equ  core1.top + 34  ; Function output parameter 6
0109      A024     outparm7          equ  core1.top + 36  ; Function output parameter 7
0110      A026     kbflags           equ  core1.top + 38  ; Keyboard control flags
0111      A028     keycode1          equ  core1.top + 40  ; Current key scanned
0112      A02A     keycode2          equ  core1.top + 42  ; Previous key scanned
0113      A02C     uint16.unpacked   equ  core1.top + 44  ; Unpacked uint16 (len-prefixed string)
0114      A032     uint16.packed     equ  core1.top + 50  ; Packed uint16 (2 bytes)
0115      A034     trmpvector        equ  core1.top + 52  ; Vector trampoline (if p1|tmp1 = >ffff)
0116      A036     core1.free1       equ  core1.top + 54  ; 54-85 **free**
0117      A056     ramsat            equ  core1.top + 86  ; Sprite Attr. Table in RAM (14 bytes)
0118      A064     timers            equ  core1.top + 100 ; Timers (80 bytes)
0119                                 ;--------------------------------------------
0120                                 ; TI Basic related
0121                                 ;--------------------------------------------
0122      A0B4     tib.session       equ  core1.top + 180 ; Current TI-Basic session (1-5)
0123      A0B6     tib.status1       equ  core1.top + 182 ; Status flags TI Basic session 1
0124      A0B8     tib.status2       equ  core1.top + 184 ; Status flags TI Basic session 2
0125      A0BA     tib.status3       equ  core1.top + 186 ; Status flags TI Basic session 3
0126      A0BC     tib.status4       equ  core1.top + 188 ; Status flags TI Basic session 4
0127      A0BE     tib.status5       equ  core1.top + 190 ; Status flags TI Basic session 5
0128      A0C0     tib.autounpk      equ  core1.top + 192 ; TI-Basic AutoUnpack (uncrunch)
0129      A0C2     tib.stab.ptr      equ  core1.top + 194 ; Pointer to TI-Basic SAMS page table
0130      A0C4     tib.scrpad.ptr    equ  core1.top + 196 ; Pointer to TI-Basic scratchpad in SAMS
0131      A0C6     tib.lnt.top.ptr   equ  core1.top + 198 ; Pointer to top of line number table
0132      A0C8     tib.lnt.bot.ptr   equ  core1.top + 200 ; Pointer to bottom of line number table
0133      A0CA     tib.symt.top.ptr  equ  core1.top + 202 ; Pointer to top of symbol table
0134      A0CC     tib.symt.bot.ptr  equ  core1.top + 204 ; Pointer to bottom of symbol table
0135      A0CE     tib.strs.top.ptr  equ  core1.top + 206 ; Pointer to top of string space
0136      A0D0     tib.strs.bot.ptr  equ  core1.top + 208 ; Pointer to bottom of string space
0137      A0D2     tib.lines         equ  core1.top + 210 ; Number of lines in TI Basic program
0138      A0D4     core1.free2       equ  core1.top + 212 ; **free* up to 233
0139      A0EA     tib.samstab.ptr   equ  core1.top + 234 ; Pointer to active SAMS mem layout table
0140      A0EC     tib.var1          equ  core1.top + 236 ; Temp variable 1
0141      A0EE     tib.var2          equ  core1.top + 238 ; Temp variable 2
0142      A0F0     tib.var3          equ  core1.top + 240 ; Temp variable 3
0143      A0F2     tib.var4          equ  core1.top + 242 ; Temp variable 4
0144      A0F4     tib.var5          equ  core1.top + 244 ; Temp variable 5
0145      A0F6     tib.var6          equ  core1.top + 246 ; Temp variable 6
0146      A0F8     tib.var7          equ  core1.top + 248 ; Temp variable 7
0147      A0FA     tib.var8          equ  core1.top + 250 ; Temp variable 8
0148      A0FC     tib.var9          equ  core1.top + 252 ; Temp variable 9
0149      A0FE     tib.var10         equ  core1.top + 254 ; Temp variable 10
0150      A100     core1.free        equ  core1.top + 256 ; End of structure
0151               ;-----------------------------------------------------------------
0152               ; Stevie core 2 RAM                    @>a100-a1ff   (256 bytes)
0153               ;-----------------------------------------------------------------
0154      A100     core2.top         equ  >a100           ; Structure begin
0155      A100     rambuf            equ  core2.top       ; RAM workbuffer
0156      A200     core2.free        equ  core2.top + 256 ; End of structure
0157               ;-----------------------------------------------------------------
0158               ; Stevie Editor shared structures      @>a200-a2ff   (256 bytes)
0159               ;-----------------------------------------------------------------
0160      A200     tv.struct         equ  >a200           ; Structure begin
0161      A202     tv.sams.3000      equ  tv.struct + 2   ; SAMS page in window >3000-3fff
0162      A200     tv.sams.2000      equ  tv.struct + 0   ; SAMS page in window >2000-2fff
0163      A204     tv.sams.a000      equ  tv.struct + 4   ; SAMS page in window >a000-afff
0164      A206     tv.sams.b000      equ  tv.struct + 6   ; SAMS page in window >b000-bfff
0165      A208     tv.sams.c000      equ  tv.struct + 8   ; SAMS page in window >c000-cfff
0166      A20A     tv.sams.d000      equ  tv.struct + 10  ; SAMS page in window >d000-dfff
0167      A20C     tv.sams.e000      equ  tv.struct + 12  ; SAMS page in window >e000-efff
0168      A20E     tv.sams.f000      equ  tv.struct + 14  ; SAMS page in window >f000-ffff
0169      A210     tv.ruler.visible  equ  tv.struct + 16  ; Show ruler with tab positions
0170      A212     tv.colorscheme    equ  tv.struct + 18  ; Current color scheme (0-xx)
0171      A214     tv.curshape       equ  tv.struct + 20  ; Cursor shape and color (sprite)
0172      A216     tv.curcolor       equ  tv.struct + 22  ; Cursor color1 + color2 (color scheme)
0173      A218     tv.color          equ  tv.struct + 24  ; FG/BG-color framebuffer + status lines
0174      A21A     tv.markcolor      equ  tv.struct + 26  ; FG/BG-color marked lines in framebuffer
0175      A21C     tv.busycolor      equ  tv.struct + 28  ; FG/BG-color bottom line when busy
0176      A21E     tv.rulercolor     equ  tv.struct + 30  ; FG/BG-color ruler line
0177      A220     tv.cmdb.hcolor    equ  tv.struct + 32  ; FG/BG-color command buffer header line
0178      A222     tv.font.ptr       equ  tv.struct + 34  ; Pointer to font (in ROM bank 6 or RAM)
0179      A224     tv.pane.focus     equ  tv.struct + 36  ; Identify pane that has focus
0180      A226     tv.task.oneshot   equ  tv.struct + 38  ; Pointer to one-shot routine
0181      A228     tv.fj.stackpnt    equ  tv.struct + 40  ; Pointer to farjump return stack
0182      A22A     tv.error.visible  equ  tv.struct + 42  ; Error pane visible
0183      A22C     tv.error.rows     equ  tv.struct + 44  ; Number of rows in error pane
0184      A22E     tv.sp2.conf       equ  tv.struct + 46  ; Backup of SP2 config register
0185      A230     tv.sp2.stack      equ  tv.struct + 48  ; Backup of SP2 stack register
0186      A232     tv.fg99.img.ptr   equ  tv.struct + 50  ; Pointer to Final GROM cartridge to load
0187      A234     tv.specmsg.ptr    equ  tv.struct + 52  ; Pointer to special message above botrow
0188      A236     tv.lineterm       equ  tv.struct + 54  ; Default line termination character(s)
0189      A238     tv.error.msg      equ  tv.struct + 56  ; Error message (max. 160 characters)
0190      A2D8     tv.free           equ  tv.struct + 216 ; End of structure
0191               ;-----------------------------------------------------------------
0192               ; Frame buffer structure               @>a300-a3ff   (256 bytes)
0193               ;-----------------------------------------------------------------
0194      A300     fb.struct         equ  >a300           ; Structure begin
0195      A300     fb.top.ptr        equ  fb.struct       ; Pointer to frame buffer
0196      A302     fb.current        equ  fb.struct + 2   ; Pointer to current pos. in frame buffer
0197      A304     fb.topline        equ  fb.struct + 4   ; Top line in frame buffer (matching
0198                                                      ; line X in editor buffer).
0199      A306     fb.row            equ  fb.struct + 6   ; Current row in frame buffer
0200                                                      ; (offset 0 .. @fb.scrrows)
0201      A308     fb.row.length     equ  fb.struct + 8   ; Length of current row in frame buffer
0202      A30A     fb.row.dirty      equ  fb.struct + 10  ; Current row dirty flag in frame buffer
0203      A30C     fb.column         equ  fb.struct + 12  ; Current column (0-79) in frame buffer
0204      A30E     fb.colsline       equ  fb.struct + 14  ; Columns per line in frame buffer
0205      A310     fb.vwco           equ  fb.struct + 16  ; View window column offset (0-xxx)
0206      A312     fb.colorize       equ  fb.struct + 18  ; M1/M2 colorize refresh required
0207      A314     fb.curtoggle      equ  fb.struct + 20  ; Cursor shape toggle
0208      A316     fb.yxsave         equ  fb.struct + 22  ; Copy of cursor YX position
0209      A318     fb.dirty          equ  fb.struct + 24  ; Frame buffer dirty flag
0210      A31A     fb.status.dirty   equ  fb.struct + 26  ; Status line(s) dirty flag
0211      A31C     fb.scrrows        equ  fb.struct + 28  ; Rows on physical screen for framebuffer
0212      A31E     fb.scrrows.max    equ  fb.struct + 30  ; Max # of rows on physical screen for fb
0213      A320     fb.ruler.sit      equ  fb.struct + 32  ; 80 char ruler  (no length-prefix!)
0214      A370     fb.ruler.tat      equ  fb.struct + 112 ; 80 char colors (no length-prefix!)
0215      A3C0     fb.free           equ  fb.struct + 192 ; End of structure
0216               ;-----------------------------------------------------------------
0217               ; File handle structure                @>a400-a4ff   (256 bytes)
0218               ;-----------------------------------------------------------------
0219      A400     fh.struct         equ  >a400           ; stevie file handling structures
0220               ;*******************************************************************************
0221               ; ATTENTION: dsrlnk vars must form a continuous memory block & keep their order!
0222               ;*******************************************************************************
0223      A400     dsrlnk.dsrlws     equ  fh.struct       ; Address of dsrlnk workspace 32 bytes
0224      A420     dsrlnk.namsto     equ  fh.struct + 32  ; 8-byte RAM buf for holding device name
0225      A428     dsrlnk.sav8a      equ  fh.struct + 40  ; Save parm (8 or A) after "blwp @dsrlnk"
0226      A42A     dsrlnk.savcru     equ  fh.struct + 42  ; CRU address of device in prev. DSR call
0227      A42C     dsrlnk.savent     equ  fh.struct + 44  ; DSR entry addr of prev. DSR call
0228      A42E     dsrlnk.savpab     equ  fh.struct + 46  ; Pointer to Device or Subprogram in PAB
0229      A430     dsrlnk.savver     equ  fh.struct + 48  ; Version used in prev. DSR call
0230      A432     dsrlnk.savlen     equ  fh.struct + 50  ; Length of DSR name of prev. DSR call
0231      A434     dsrlnk.flgptr     equ  fh.struct + 52  ; Pointer to VDP PAB byte 1 (flag byte)
0232      A436     fh.pab.ptr        equ  fh.struct + 54  ; Pointer to VDP PAB, for level 3 FIO
0233      A438     fh.pabstat        equ  fh.struct + 56  ; Copy of VDP PAB status byte
0234      A43A     fh.ioresult       equ  fh.struct + 58  ; DSRLNK IO-status after file operation
0235      A43C     fh.records        equ  fh.struct + 60  ; File records counter
0236      A43E     fh.reclen         equ  fh.struct + 62  ; Current record length
0237      A440     fh.kilobytes      equ  fh.struct + 64  ; Kilobytes processed (read/written)
0238      A442     fh.counter        equ  fh.struct + 66  ; Counter used in stevie file operations
0239      A444     fh.fname.ptr      equ  fh.struct + 68  ; Pointer to device and filename
0240      A446     fh.sams.page      equ  fh.struct + 70  ; Current SAMS page during file operation
0241      A448     fh.sams.hipage    equ  fh.struct + 72  ; Highest SAMS page in file operation
0242      A44A     fh.fopmode        equ  fh.struct + 74  ; FOP mode (File Operation Mode)
0243      A44C     fh.filetype       equ  fh.struct + 76  ; Value for filetype/mode (PAB byte 1)
0244      A44E     fh.offsetopcode   equ  fh.struct + 78  ; Set to >40 for skipping VDP buffer
0245      A450     fh.callback1      equ  fh.struct + 80  ; Pointer to callback function 1
0246      A452     fh.callback2      equ  fh.struct + 82  ; Pointer to callback function 2
0247      A454     fh.callback3      equ  fh.struct + 84  ; Pointer to callback function 3
0248      A456     fh.callback4      equ  fh.struct + 86  ; Pointer to callback function 4
0249      A458     fh.callback5      equ  fh.struct + 88  ; Pointer to callback function 5
0250      A45A     fh.workmode       equ  fh.struct + 90  ; Working mode (used in callbacks)
0251      A45C     fh.kilobytes.prev equ  fh.struct + 92  ; Kilobytes processed (previous)
0252      A45E     fh.line           equ  fh.struct + 94  ; Editor buffer line currently processing
0253      A460     fh.temp1          equ  fh.struct + 96  ; Temporary variable 1
0254      A462     fh.temp2          equ  fh.struct + 98  ; Temporary variable 2
0255      A464     fh.temp3          equ  fh.struct +100  ; Temporary variable 3
0256      A466     fh.pabtpl.ptr     equ  fh.struct +102  ; Pointer to PAB template in ROM/RAM
0257      A468     fh.membuffer      equ  fh.struct +104  ; 80 bytes file memory buffer
0258      A4B8     fh.free           equ  fh.struct +184  ; End of structure
0259               ;-----------------------------------------------------------------
0260               ; File handle structure for generic    @>a400-a4ff   (256 bytes)
0261               ; Overloads file handle structure
0262               ;-----------------------------------------------------------------
0263      A45A     fh.ftype.init     equ  fh.struct + 90  ; File type/mode (becomes fh.filetype)
0264      A45C     fh.ram.ptr        equ  fh.struct + 92  ; RAM destination address
0265               ;-----------------------------------------------------------------
0266               ; Editor buffer structure              @>a500-a5ff   (256 bytes)
0267               ;-----------------------------------------------------------------
0268      A500     edb.struct        equ  >a500           ; Begin structure
0269      A500     edb.top.ptr       equ  edb.struct      ; Pointer to editor buffer
0270      A502     edb.index.ptr     equ  edb.struct + 2  ; Pointer to index
0271      A504     edb.lines         equ  edb.struct + 4  ; Total lines in editor buffer - 1
0272      A506     edb.dirty         equ  edb.struct + 6  ; Editor buffer dirty (Text changed!)
0273      A508     edb.next_free.ptr equ  edb.struct + 8  ; Pointer to next free line
0274      A50A     edb.insmode       equ  edb.struct + 10 ; Insert mode (>ffff = insert)
0275      A50C     edb.autoinsert    equ  edb.struct + 12 ; Auto-insert on ENTER flag (>ffff = on)
0276      A50E     edb.block.m1      equ  edb.struct + 14 ; Block start line marker (>ffff = unset)
0277      A510     edb.block.m2      equ  edb.struct + 16 ; Block end line marker   (>ffff = unset)
0278      A512     edb.block.var     equ  edb.struct + 18 ; Local var used in block operation
0279      A514     edb.filename.ptr  equ  edb.struct + 20 ; Pointer to length-prefixed string
0280                                                      ; with current filename.
0281      A516     edb.filetype.ptr  equ  edb.struct + 22 ; Pointer to length-prefixed string
0282                                                      ; with current file type.
0283      A518     edb.sams.page     equ  edb.struct + 24 ; Current SAMS page
0284      A51A     edb.sams.hipage   equ  edb.struct + 26 ; Highest SAMS page in use
0285      A51C     edb.bk.fb.topline equ  edb.struct + 28 ; Backup of @fb.topline before opening
0286                                                      ; other file from special file.
0287      A51E     edb.bk.fb.row     equ  edb.struct + 30 ; Backup of @fb.row before opening
0288                                                      ; other file from special file.
0289      A520     edb.special.file  equ  edb.struct + 32 ; Special file in editor buffer
0290      A522     edb.lineterm      equ  edb.struct + 34 ; Line termination character
0291                                                      ; MSB: Mode on (>ff) or off (>00)
0292                                                      ; LSB: Line termination character
0293      A524     edb.filename      equ  edb.struct + 36 ; 80 characters inline buffer reserved
0294                                                      ; for filename, but not always used.
0295      A574     edb.free          equ  edb.struct + 116; End of structure
0296               ;-----------------------------------------------------------------
0297               ; Index structure                      @>a600-a6ff   (256 bytes)
0298               ;-----------------------------------------------------------------
0299      A600     idx.struct        equ  >a600           ; stevie index structure
0300      A600     idx.sams.page     equ  idx.struct      ; Current SAMS page
0301      A602     idx.sams.lopage   equ  idx.struct + 2  ; Lowest SAMS page
0302      A604     idx.sams.hipage   equ  idx.struct + 4  ; Highest SAMS page
0303      A606     idx.free          equ  idx.struct + 6  ; End of structure
0304               ;-----------------------------------------------------------------
0305               ; Command buffer structure             @>a700-a7ff   (256 bytes)
0306               ;-----------------------------------------------------------------
0307      A700     cmdb.struct       equ  >a700           ; Command Buffer structure
0308      A700     cmdb.top.ptr      equ  cmdb.struct     ; Pointer to command buffer (history)
0309      A702     cmdb.visible      equ  cmdb.struct+ 2  ; Command buffer visible? (>ffff=visible)
0310      A704     cmdb.fb.yxsave    equ  cmdb.struct+ 4  ; Copy of FB WYX when entering cmdb pane
0311      A706     cmdb.scrrows      equ  cmdb.struct+ 6  ; Current size of CMDB pane (in rows)
0312      A708     cmdb.default      equ  cmdb.struct+ 8  ; Default size of CMDB pane (in rows)
0313      A70A     cmdb.cursor       equ  cmdb.struct+ 10 ; Screen YX of cursor in CMDB pane
0314      A70C     cmdb.yxsave       equ  cmdb.struct+ 12 ; Copy of WYX
0315      A70E     cmdb.vdptop       equ  cmdb.struct+ 14 ; VDP address CMDB pane header line (TAT)
0316      A710     cmdb.yxtop        equ  cmdb.struct+ 16 ; YX position CMDB pane header line
0317      A712     cmdb.yxprompt     equ  cmdb.struct+ 18 ; YX position of command buffer prompt
0318      A714     cmdb.column       equ  cmdb.struct+ 20 ; Current column in command buffer pane
0319      A716     cmdb.length       equ  cmdb.struct+ 22 ; Length of current row in CMDB
0320      A718     cmdb.lines        equ  cmdb.struct+ 24 ; Total lines in CMDB
0321      A71A     cmdb.dirty        equ  cmdb.struct+ 26 ; Command buffer dirty (Text changed!)
0322      A71C     cmdb.dialog       equ  cmdb.struct+ 28 ; Dialog identifier
0323      A71E     cmdb.dialog.var   equ  cmdb.struct+ 30 ; Dialog private variable or pointer
0324      A720     cmdb.panhead      equ  cmdb.struct+ 32 ; Pointer to string pane header
0325      A722     cmdb.paninfo      equ  cmdb.struct+ 34 ; Pointer to string pane info (1st line)
0326      A724     cmdb.panhint      equ  cmdb.struct+ 36 ; Pointer to string pane hint (2nd line)
0327      A726     cmdb.panhint2     equ  cmdb.struct+ 38 ; Pointer to string pane hint (extra)
0328      A728     cmdb.panmarkers   equ  cmdb.struct+ 40 ; Pointer to key marker list  (3rd line)
0329      A72A     cmdb.pankeys      equ  cmdb.struct+ 42 ; Pointer to string pane keys (stat line)
0330      A72C     cmdb.action.ptr   equ  cmdb.struct+ 44 ; Pointer to function to execute
0331      A72E     cmdb.cmdall       equ  cmdb.struct+ 46 ; Current command including length-byte
0332      A72E     cmdb.cmdlen       equ  cmdb.struct+ 46 ; Length of current command (MSB byte!)
0333      A72F     cmdb.cmd          equ  cmdb.struct+ 47 ; Current command (80 bytes max.)
0334      A780     cmdb.panhead.buf  equ  cmdb.struct+128 ; String buffer for pane header
0335      A7B2     cmdb.dflt.fname   equ  cmdb.struct+178 ; Default for filename
0336      A800     cmdb.free         equ  cmdb.struct+256 ; End of structure
0337               ;-----------------------------------------------------------------
0338               ; Stevie value stack                   @>a800-a8ff   (256 bytes)
0339               ;-----------------------------------------------------------------
0340      A900     sp2.stktop        equ  >a900           ; \
0341                                                      ; | The stack grows from high memory
0342                                                      ; | towards low memory.
0343                                                      ; |
0344                                                      ; | Stack leaking is checked in SP2
0345                                                      ; | user hook "edkey.keyscan.hook"
0346                                                      ; /
0347               ;-----------------------------------------------------------------
0348               ; Scratchpad memory work copy          @>ad00-aeff   (256 bytes)
0349               ;-----------------------------------------------------------------
0350      7E00     cpu.scrpad.src    equ  >7e00           ; \ Dump of OS monitor scratchpad
0351                                                      ; / stored in cartridge ROM bank7.asm
0352               
0353      F000     cpu.scrpad.tgt    equ  >f000           ; \ Fixed memory location used for
0354                                                      ; | scratchpad backup/restore routines.
0355                                                      ; /
0356               
0357      8300     cpu.scrpad1       equ  >8300           ; Stevie primary scratchpad
0358               
0359      AD00     cpu.scrpad2       equ  >ad00           ; Stevie secondary scratchpad, used when
0360                                                      ; calling TI Basic/External programs
0361               ;-----------------------------------------------------------------
0362               ; Farjump return stack                 @>af00-afff   (256 bytes)
0363               ;-----------------------------------------------------------------
0364      B000     fj.bottom         equ  >b000           ; Return stack for trampoline function
0365                                                      ; Grows downwards from high to low.
0366               ;-----------------------------------------------------------------
0367               ; Index                                @>b000-bfff  (4096 bytes)
0368               ;-----------------------------------------------------------------
0369      B000     idx.top           equ  >b000           ; Top of index
0370      1000     idx.size          equ  4096            ; Index size
0371               ;-----------------------------------------------------------------
0372               ; Editor buffer                        @>c000-cfff  (4096 bytes)
0373               ;-----------------------------------------------------------------
0374      C000     edb.top           equ  >c000           ; Editor buffer high memory
0375      1000     edb.size          equ  4096            ; Editor buffer size
0376               ;-----------------------------------------------------------------
0377               ; Frame buffer & uncrunch area         @>d000-dcff  (3584 bytes)
0378               ;-----------------------------------------------------------------
0379      D000     fb.top            equ  >d000           ; Frame buffer (2400 char)
0380      0960     fb.size           equ  80*30           ; Frame buffer size
0381      D960     fb.uncrunch.area  equ  >d960           ; \ Uncrunched TI Basic statement
0382                                                      ; / >d960->dcff
0383               ;-----------------------------------------------------------------
0384               ; Defaults area                        @>de00-dfff  (3584 bytes)
0385               ;-----------------------------------------------------------------
0386      DE00     tv.printer.fname  equ  >de00           ; Default printer        (80 bytes)
0387      DE50     tv.clip.fname     equ  >de50           ; Default clipboard      (80 bytes)
0388      DEA0     tv.mc.fname       equ  >dea0           ; Default Master Catalog (80 bytes)
0389               ;-----------------------------------------------------------------
0390               ; Command buffer history               @>e000-efff  (4096 bytes)
0391               ;-----------------------------------------------------------------
0392      E000     cmdb.top          equ  >e000           ; Top of command history buffer
0393      1000     cmdb.size         equ  4096            ; Command buffer size
0394               ;-----------------------------------------------------------------
0395               ; Heap                                 @>f000-ffff  (4096 bytes)
0396               ;-----------------------------------------------------------------
0397      F000     heap.top          equ  >f000           ; Top of heap
0398               ;-----------------------------------------------------------------
0399               ; Stevie specific equates
0400               ;-----------------------------------------------------------------
0401      0000     fh.fopmode.none           equ  0       ; No file operation in progress
0402      0001     fh.fopmode.readfile       equ  1       ; Read file from disk to memory
0403      0002     fh.fopmode.writefile      equ  2       ; Save file from memory to disk
0404      0005     cmdb.rows                 equ  5       ; Number of rows in CMDB pane
0405      A028     rom0_kscan_out            equ  keycode1; Where to store value of key pressed
0406               
0407      9900     tv.colorize.reset         equ  >9900   ; Colorization off
0408      00FE     tv.1timeonly              equ  254     ; One-time only flag indicator
                   < stevie_b0.asm
0029                       copy  "equates.c99.asm"     ; Classic99 emulator configuration
     **** ****     > equates.c99.asm
0001               * FILE......: equates.c99.asm
0002               * Purpose...: Equates related to classic99
0003               
0004               ***************************************************************
0005               *                 Extra opcodes for classic99
0006               ********|*****|*********************|**************************
0007      0110     c99_norm      equ  >0110            ; CPU normal
0008      0111     c99_ovrd      equ  >0111            ; CPU overdrive
0009      0112     c99_smax      equ  >0112            ; System Maximum
0010      0113     c99_brk       equ  >0113            ; Breakpoint
0011      0114     c99_quit      equ  >0114            ; Quit emulator
0012      0120     c99_dbg_r0    equ  >0120            ; Debug printf r0
0013      0121     c99_dbg_r1    equ  >0121            ; Debug printf r1
0014      0122     c99_dbg_r2    equ  >0122            ; Debug printf r2
0015      0123     c99_dbg_r3    equ  >0123            ; Debug printf r3
0016      0124     c99_dbg_r4    equ  >0124            ; Debug printf r4
0017      0125     c99_dbg_r5    equ  >0125            ; Debug printf r5
0018      0126     c99_dbg_r6    equ  >0126            ; Debug printf r6
0019      0127     c99_dbg_r7    equ  >0127            ; Debug printf r7
0020      0128     c99_dbg_r8    equ  >0128            ; Debug printf r8
0021      0199     c99_dbg_r9    equ  >0199            ; Debug printf r9
0022      012A     c99_dbg_ra    equ  >012a            ; Debug printf ra
0023      012B     c99_dbg_rb    equ  >012b            ; Debug printf rb
0024      012C     c99_dbg_rc    equ  >012c            ; Debug printf rc
0025      012D     c99_dbg_rd    equ  >012d            ; Debug printf rd
0026      012E     c99_dbg_re    equ  >012e            ; Debug printf re
0027      012F     c99_dbg_rf    equ  >012f            ; Debug printf rf
0028      0124     c99_dbg_tmp0  equ  c99_dbg_r4       ; Debug printf tmp0
0029      0125     c99_dbg_tmp1  equ  c99_dbg_r5       ; Debug printf tmp1
0030      0126     c99_dbg_tmp2  equ  c99_dbg_r6       ; Debug printf tmp2
0031      0127     c99_dbg_tmp3  equ  c99_dbg_r7       ; Debug printf tmp3
0032      0128     c99_dbg_tmp4  equ  c99_dbg_r8       ; Debug printf tmp4
0033      0199     c99_dbg_stck  equ  c99_dbg_r9       ; Debug printf stack
                   < stevie_b0.asm
0030                       copy  "equates.keys.asm"    ; Equates for keyboard mapping
     **** ****     > equates.keys.asm
0001               * FILE......: data.keymap.keys.asm
0002               * Purpose...: Keyboard mapping
0003               
0004               
0005               *---------------------------------------------------------------
0006               * Keyboard scancodes - Numeric keys
0007               *-------------|---------------------|---------------------------
0008      0030     key.num.0     equ >30               ; 0
0009      0031     key.num.1     equ >31               ; 1
0010      0032     key.num.2     equ >32               ; 2
0011      0033     key.num.3     equ >33               ; 3
0012      0034     key.num.4     equ >34               ; 4
0013      0035     key.num.5     equ >35               ; 5
0014      0036     key.num.6     equ >36               ; 6
0015      0037     key.num.7     equ >37               ; 7
0016      0038     key.num.8     equ >38               ; 8
0017      0039     key.num.9     equ >39               ; 9
0018               *---------------------------------------------------------------
0019               * Keyboard scancodes - Letter keys
0020               *-------------|---------------------|---------------------------
0021      0041     key.uc.a      equ >41               ; A
0022      0042     key.uc.b      equ >42               ; B
0023      0043     key.uc.c      equ >43               ; C
0024      0044     key.uc.d      equ >44               ; D
0025      0045     key.uc.e      equ >45               ; E
0026      0046     key.uc.f      equ >46               ; F
0027      0047     key.uc.g      equ >47               ; G
0028      0048     key.uc.h      equ >48               ; H
0029      0049     key.uc.i      equ >49               ; I
0030      004A     key.uc.j      equ >4a               ; J
0031      004B     key.uc.k      equ >4b               ; K
0032      004C     key.uc.l      equ >4c               ; L
0033      004D     key.uc.m      equ >4d               ; M
0034      004E     key.uc.n      equ >4e               ; N
0035      0052     key.uc.r      equ >52               ; R
0036      0053     key.uc.s      equ >53               ; S
0037      004F     key.uc.o      equ >4f               ; O
0038      0050     key.uc.p      equ >50               ; P
0039      0051     key.uc.q      equ >51               ; Q
0040      0052     key.uc.r      equ >52               ; R
0041      0058     key.uc.x      equ >58               ; X
0042      00A2     key.lc.b      equ >a2               ; b
0043      00A5     key.lc.e      equ >a5               ; e
0044      00A6     key.lc.f      equ >a6               ; f
0045      00A8     key.lc.h      equ >a8               ; h
0046      006E     key.lc.n      equ >6e               ; n
0047      0073     key.lc.s      equ >73               ; s
0048      006F     key.lc.o      equ >6f               ; o
0049      0070     key.lc.p      equ >70               ; p
0050      0071     key.lc.q      equ >71               ; q
0051      0072     key.lc.r      equ >72               ; r
0052      0078     key.lc.x      equ >78               ; x
0053               *---------------------------------------------------------------
0054               * Keyboard scancodes - Function keys
0055               *-------------|---------------------|---------------------------
0056      00BC     key.fctn.0    equ >bc               ; fctn + 0
0057      0003     key.fctn.1    equ >03               ; fctn + 1
0058      0004     key.fctn.2    equ >04               ; fctn + 2
0059      0007     key.fctn.3    equ >07               ; fctn + 3
0060      0002     key.fctn.4    equ >02               ; fctn + 4
0061      000E     key.fctn.5    equ >0e               ; fctn + 5
0062      000C     key.fctn.6    equ >0c               ; fctn + 6
0063      0001     key.fctn.7    equ >01               ; fctn + 7
0064      0006     key.fctn.8    equ >06               ; fctn + 8
0065      000F     key.fctn.9    equ >0f               ; fctn + 9
0066      0000     key.fctn.a    equ >00               ; fctn + a
0067      00BE     key.fctn.b    equ >be               ; fctn + b
0068      0000     key.fctn.c    equ >00               ; fctn + c
0069      0009     key.fctn.d    equ >09               ; fctn + d
0070      000B     key.fctn.e    equ >0b               ; fctn + e
0071      0000     key.fctn.f    equ >00               ; fctn + f
0072      0000     key.fctn.g    equ >00               ; fctn + g
0073      00BF     key.fctn.h    equ >bf               ; fctn + h
0074      0000     key.fctn.i    equ >00               ; fctn + i
0075      00C0     key.fctn.j    equ >c0               ; fctn + j
0076      00C1     key.fctn.k    equ >c1               ; fctn + k
0077      00C2     key.fctn.l    equ >c2               ; fctn + l
0078      00C3     key.fctn.m    equ >c3               ; fctn + m
0079      00C4     key.fctn.n    equ >c4               ; fctn + n
0080      0000     key.fctn.o    equ >00               ; fctn + o
0081      0000     key.fctn.p    equ >00               ; fctn + p
0082      00C5     key.fctn.q    equ >c5               ; fctn + q
0083      0000     key.fctn.r    equ >00               ; fctn + r
0084      0008     key.fctn.s    equ >08               ; fctn + s
0085      0000     key.fctn.t    equ >00               ; fctn + t
0086      0000     key.fctn.u    equ >00               ; fctn + u
0087      007F     key.fctn.v    equ >7f               ; fctn + v
0088      007E     key.fctn.w    equ >7e               ; fctn + w
0089      000A     key.fctn.x    equ >0a               ; fctn + x
0090      00C6     key.fctn.y    equ >c6               ; fctn + y
0091      0000     key.fctn.z    equ >00               ; fctn + z
0092               *---------------------------------------------------------------
0093               * Keyboard scancodes - Function keys extra
0094               *---------------------------------------------------------------
0095      00B9     key.fctn.dot    equ >b9             ; fctn + .
0096      00B8     key.fctn.comma  equ >b8             ; fctn + ,
0097      0005     key.fctn.plus   equ >05             ; fctn + +
0098               *---------------------------------------------------------------
0099               * Keyboard scancodes - control keys
0100               *-------------|---------------------|---------------------------
0101      00B0     key.ctrl.0    equ >b0               ; ctrl + 0
0102      00B1     key.ctrl.1    equ >b1               ; ctrl + 1
0103      00B2     key.ctrl.2    equ >b2               ; ctrl + 2
0104      00B3     key.ctrl.3    equ >b3               ; ctrl + 3
0105      00B4     key.ctrl.4    equ >b4               ; ctrl + 4
0106      00B5     key.ctrl.5    equ >b5               ; ctrl + 5
0107      00B6     key.ctrl.6    equ >b6               ; ctrl + 6
0108      00B7     key.ctrl.7    equ >b7               ; ctrl + 7
0109      009E     key.ctrl.8    equ >9e               ; ctrl + 8
0110      009F     key.ctrl.9    equ >9f               ; ctrl + 9
0111      0081     key.ctrl.a    equ >81               ; ctrl + a
0112      0082     key.ctrl.b    equ >82               ; ctrl + b
0113      0083     key.ctrl.c    equ >83               ; ctrl + c
0114      0084     key.ctrl.d    equ >84               ; ctrl + d
0115      0085     key.ctrl.e    equ >85               ; ctrl + e
0116      0086     key.ctrl.f    equ >86               ; ctrl + f
0117      0087     key.ctrl.g    equ >87               ; ctrl + g
0118      0088     key.ctrl.h    equ >88               ; ctrl + h
0119      0089     key.ctrl.i    equ >89               ; ctrl + i
0120      008A     key.ctrl.j    equ >8a               ; ctrl + j
0121      008B     key.ctrl.k    equ >8b               ; ctrl + k
0122      008C     key.ctrl.l    equ >8c               ; ctrl + l
0123      008D     key.ctrl.m    equ >8d               ; ctrl + m
0124      008E     key.ctrl.n    equ >8e               ; ctrl + n
0125      008F     key.ctrl.o    equ >8f               ; ctrl + o
0126      0090     key.ctrl.p    equ >90               ; ctrl + p
0127      0091     key.ctrl.q    equ >91               ; ctrl + q
0128      0092     key.ctrl.r    equ >92               ; ctrl + r
0129      0093     key.ctrl.s    equ >93               ; ctrl + s
0130      0094     key.ctrl.t    equ >94               ; ctrl + t
0131      0095     key.ctrl.u    equ >95               ; ctrl + u
0132      0096     key.ctrl.v    equ >96               ; ctrl + v
0133      0097     key.ctrl.w    equ >97               ; ctrl + w
0134      0098     key.ctrl.x    equ >98               ; ctrl + x
0135      0099     key.ctrl.y    equ >99               ; ctrl + y
0136      009A     key.ctrl.z    equ >9a               ; ctrl + z
0137               *---------------------------------------------------------------
0138               * Keyboard scancodes - control keys extra
0139               *---------------------------------------------------------------
0140      009B     key.ctrl.dot    equ >9b             ; ctrl + .
0141      0080     key.ctrl.comma  equ >80             ; ctrl + ,
0142      009D     key.ctrl.plus   equ >9d             ; ctrl + +
0143      00BB     key.ctrl.slash  equ >bb             ; ctrl + /
0144      00F0     key.ctrl.space  equ >f0             ; ctrl + SPACE
0145               *---------------------------------------------------------------
0146               * Special keys
0147               *---------------------------------------------------------------
0148      000D     key.enter     equ >0d               ; enter
0149      0020     key.space     equ >20               ; space
                   < stevie_b0.asm
0031               
0032               ***************************************************************
0033               * BANK 0
0034               ********|*****|*********************|**************************
0035      6000     bankid  equ   bank0.rom             ; Set bank identifier to current bank
0036                       aorg  >6000
0037                       save  >6000,>8000           ; Save bank
0038                       copy  "rom.header.asm"      ; Include cartridge header
     **** ****     > rom.header.asm
0001               * FILE......: rom.header.asm
0002               * Purpose...: Cartridge header
0003               
0004               *--------------------------------------------------------------
0005               * Cartridge header
0006               ********|*****|*********************|**************************
0007 6000 AA               byte  >aa                   ; 0  Standard header                   >6000
0008 6001   01             byte  >01                   ; 1  Version number
0009 6002 02               byte  >02                   ; 2  Number of programs (optional)     >6002
0010 6003   00             byte  0                     ; 3  Reserved ('R' = adv. mode FG99)
0011               
0012 6004 0000             data  >0000                 ; 4  \ Pointer to power-up list        >6004
0013                                                   ; 5  /
0014               
0015                       ;
0016                       ; Change to rom.program1 to add the menu option RESET STEVIE MEMORY.
0017                       ; That option can be used in the case where we jump to TI Basic, but
0018                       ; resuming fails afterwards (e.g. memory overwritten by ext. program).
0019                       ;
0020                       ; If resume fails, you can only reset the TI-99/4a by turning of
0021                       ; the memory expansion, it's not sufficient to reset the console.
0022                       ;
0023 6006 600C             data  rom.program1          ; 6  \ Pointer to program list         >6006
0024                                                   ; 7  /
0025               
0026 6008 0000             data  >0000                 ; 8  \ Pointer to DSR list             >6008
0027                                                   ; 9  /
0028               
0029 600A 0000             data  >0000                 ; 10 \ Pointer to subprogram list      >600a
0030                                                   ; 11 /
0031               
0032                       ;-----------------------------------------------------------------------
0033                       ; Program list entry
0034                       ;-----------------------------------------------------------------------
0035               rom.program1:
0036 600C 6024             data  rom.program2          ; 12 \ Next program list entry         >600c
0037                                                   ; 13 / (no more items following)
0038               
0039 600E 6040             data  kickstart.code1       ; 14 \ Program address                 >600e
0040                                                   ; 15 /
0041               
0042 6010 1352             stri 'RESET STEVIE MEMORY'
     6012 4553     
     6014 4554     
     6016 2053     
     6018 5445     
     601A 5649     
     601C 4520     
     601E 4D45     
     6020 4D4F     
     6022 5259     
0043               
0044                       ;-----------------------------------------------------------------------
0045                       ; Program list entry
0046                       ;-----------------------------------------------------------------------
0047               rom.program2:
0048 6024 0000             data  >0000                 ; 12 \ Next program list entry         >600c
0049                                                   ; 13 / (no more items following)
0050               
0051 6026 6038             data  kickstart.resume      ; 14 \ Program address                 >600e
0052                                                   ; 15 /
0053               
0055 6028 0C53                 stri 'STEVIE 1.5.0'
     602A 5445     
     602C 5649     
     602E 4520     
     6030 312E     
     6032 352E     
     6034 30       
0057               
0061               
0065               
0069               
                   < stevie_b0.asm
0039               
0040               ***************************************************************
0041               * Step 1: Switch to bank 7 (Resume Stevie session)
0042               ********|*****|*********************|**************************
0043               resume.stevie:
0044                       aorg  >6038
0045 6038 04E0  34         clr   @bank7.rom            ; Switch to bank 7 "Jill"
     603A 600E     
0046               
0047               ***************************************************************
0048               * Step 1: Switch to bank 0 (uniform code accross all banks)
0049               ********|*****|*********************|**************************
0050               new.stevie:
0051                       aorg  kickstart.code1       ; >6040
0052 6040 04E0  34         clr   @bank0.rom            ; Switch to bank 0 "Jill"
     6042 6000     
0053               ***************************************************************
0054               * Step 2: Setup SAMS banks (inline code because no SP2 yet!)
0055               ********|*****|*********************|**************************
0056 6044 020C  20         li    r12,>1e00             ; SAMS CRU address
     6046 1E00     
0057 6048 1E01  16         sbz   1                     ; Disable SAMS mapper
0058 604A 1D00  16         sbo   0                     ; Enable access to SAMS registers
0059 604C 0200  20         li    r0,>0200              ; \ Page 2 in >2000 - >2fff
     604E 0200     
0060 6050 D800  38         movb  r0,@>4004             ; /
     6052 4004     
0061               
0062 6054 0200  20         li    r0,>0300              ; \ Page 3 in >3000 - >3fff
     6056 0300     
0063 6058 D800  38         movb  r0,@>4006             ; /
     605A 4006     
0064               
0065 605C 0200  20         li    r0,>0400              ; \ Page 4 in >a000 - >afff
     605E 0400     
0066 6060 D800  38         movb  r0,@>4014             ; /
     6062 4014     
0067               
0068 6064 0200  20         li    r0,>2000              ; \ Page 20 in >b000 - >bfff
     6066 2000     
0069 6068 D800  38         movb  r0,@>4016             ; /
     606A 4016     
0070               
0071 606C 0200  20         li    r0,>4000              ; \ Page 40 in >c000 - >bfff
     606E 4000     
0072 6070 D800  38         movb  r0,@>4018             ; /
     6072 4018     
0073               
0074 6074 0200  20         li    r0,>0500              ; \ Page 5 in >d000 - >dfff
     6076 0500     
0075 6078 D800  38         movb  r0,@>401a             ; /
     607A 401A     
0076               
0077 607C 0200  20         li    r0,>0600              ; \ Page 6 in >ec000 - >efff
     607E 0600     
0078 6080 D800  38         movb  r0,@>401c             ; /
     6082 401C     
0079               
0080 6084 0200  20         li    r0,>0700              ; \ Page 7 in >f000 - >ffff
     6086 0700     
0081 6088 D800  38         movb  r0,@>401e             ; /
     608A 401E     
0082               
0083 608C 1E00  16         sbz   0                     ; Disable access to SAMS registers
0084 608E 1D01  16         sbo   1                     ; Enable SAMS mapper
0085               
0086               ***************************************************************
0087               * Step 3: Copy resident modules from ROM to RAM >2000 - >3fff
0088               ********|*****|*********************|**************************
0089 6090 0200  20         li    r0,reloc.resident     ; Start of code to relocate
     6092 60C0     
0090 6094 0201  20         li    r1,>2000
     6096 2000     
0091 6098 0202  20         li    r2,512                ; Copy 8K (320 * 16 bytes)
     609A 0200     
0092                       ;------------------------------------------------------
0093                       ; Copy memory to destination
0094                       ; r0 = Source CPU address
0095                       ; r1 = Target CPU address
0096                       ; r2 = Bytes to copy/16
0097                       ;------------------------------------------------------
0098 609C CC70  46 !       mov   *r0+,*r1+             ; Copy word 1
0099 609E CC70  46         mov   *r0+,*r1+             ; Copy word 2
0100 60A0 CC70  46         mov   *r0+,*r1+             ; Copy word 3
0101 60A2 CC70  46         mov   *r0+,*r1+             ; Copy word 4
0102 60A4 CC70  46         mov   *r0+,*r1+             ; Copy word 5
0103 60A6 CC70  46         mov   *r0+,*r1+             ; Copy word 6
0104 60A8 CC70  46         mov   *r0+,*r1+             ; Copy word 7
0105 60AA CC70  46         mov   *r0+,*r1+             ; Copy word 8
0106 60AC 0602  14         dec   r2
0107 60AE 16F6  14         jne   -!                    ; Loop until done
0108               ***************************************************************
0109               * Step 4: Start SP2 kernel (runs in low MEMEXP)
0110               ********|*****|*********************|**************************
0111 60B0 0460  28         b     @runlib               ; \ Start spectra2 library
     60B2 2F0C     
0112                                                   ; | "main" in low MEMEXP is automatically
0113                                                   ; / called by SP2 runlib.
0114                       ;------------------------------------------------------
0115                       ; Assert. Should not get here!
0116                       ;------------------------------------------------------
0117 60B4 0200  20         li    r0,$                  ; Current location
     60B6 60B4     
0118 60B8 C800  38         mov   r0,@>ffce             ; \ Save caller address
     60BA FFCE     
0119 60BC 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     60BE 2026     
0120               
0121               ***************************************************************
0122               * Code data: Relocated code
0123               ********|*****|*********************|**************************
0124               reloc.resident:
0125                       ;------------------------------------------------------
0126                       ; Resident libraries
0127                       ;------------------------------------------------------
0128                       xorg  >2000                 ; Relocate to >2000
0129                       copy  "runlib.asm"
     **** ****     > runlib.asm
0001               *******************************************************************************
0002               *              ___  ____  ____  ___  ____  ____    __    ___
0003               *             / __)(  _ \( ___)/ __)(_  _)(  _ \  /__\  (__ \  v.2021
0004               *             \__ \ )___/ )__)( (__   )(   )   / /(__)\  / _/
0005               *             (___/(__)  (____)\___) (__) (_)\_)(__)(__)(____)
0006               *
0007               *                TMS9900 Monitor with Arcade Game support
0008               *                                  for
0009               *              the Texas Instruments TI-99/4A Home Computer
0010               *
0011               *                      2010-2022 by Filip Van Vooren
0012               *
0013               *              https://github.com/FilipVanVooren/spectra2.git
0014               *******************************************************************************
0015               * This file: runlib.a99
0016               *******************************************************************************
0017               * Use following equates to skip/exclude support modules and to control startup
0018               * behaviour.
0019               *
0020               * == Memory
0021               * skip_rom_bankswitch       equ  1  ; Skip support for ROM bankswitching
0022               * skip_vram_cpu_copy        equ  1  ; Skip VRAM to CPU copy functions
0023               * skip_cpu_vram_copy        equ  1  ; Skip CPU  to VRAM copy functions
0024               * skip_cpu_cpu_copy         equ  1  ; Skip CPU  to CPU copy functions
0025               * skip_grom_cpu_copy        equ  1  ; Skip GROM to CPU copy functions
0026               * skip_grom_vram_copy       equ  1  ; Skip GROM to VRAM copy functions
0027               * skip_sams                 equ  1  ; Skip support for SAMS memory expansion
0028               * skip_sams_layout          equ  1  ; Skip SAMS memory layout routine
0029               *
0030               * == VDP
0031               * skip_textmode             equ  1  ; Skip 40x24 textmode support
0032               * skip_vdp_f18a             equ  1  ; Skip f18a support
0033               * skip_vdp_hchar            equ  1  ; Skip hchar, xchar
0034               * skip_vdp_vchar            equ  1  ; Skip vchar, xvchar
0035               * skip_vdp_boxes            equ  1  ; Skip filbox, putbox
0036               * skip_vdp_hexsupport       equ  1  ; Skip mkhex, puthex
0037               * skip_vdp_bitmap           equ  1  ; Skip bitmap functions
0038               * skip_vdp_intscr           equ  1  ; Skip interrupt+screen on/off
0039               * skip_vdp_viewport         equ  1  ; Skip viewport functions
0040               * skip_vdp_yx2px_calc       equ  1  ; Skip YX to pixel calculation
0041               * skip_vdp_px2yx_calc       equ  1  ; Skip pixel to YX calculation
0042               * skip_vdp_sprites          equ  1  ; Skip sprites support
0043               * skip_vdp_cursor           equ  1  ; Skip cursor support
0044               *
0045               * == Sound & speech
0046               * skip_snd_player           equ  1  ; Skip inclusionm of sound player code
0047               * skip_speech_detection     equ  1  ; Skip speech synthesizer detection
0048               * skip_speech_player        equ  1  ; Skip inclusion of speech player code
0049               *
0050               * == Keyboard
0051               * skip_virtual_keyboard     equ  1  ; Skip virtual keyboard scann
0052               * skip_real_keyboard        equ  1  ; Skip real keyboard scan
0053               * use_rom0_kscan            equ  1  ; Use KSCAN in console ROM#0
0054               *
0055               * == Utilities
0056               * skip_random_generator     equ  1  ; Skip random generator functions
0057               * skip_cpu_rle_compress     equ  1  ; Skip CPU RLE compression
0058               * skip_cpu_rle_decompress   equ  1  ; Skip CPU RLE decompression
0059               * skip_vdp_rle_decompress   equ  1  ; Skip VDP RLE decompression
0060               * skip_cpu_hexsupport       equ  1  ; Skip mkhex, puthex
0061               * skip_cpu_numsupport       equ  1  ; Skip mknum, putnum, trimnum
0062               * skip_cpu_crc16            equ  1  ; Skip CPU memory CRC-16 calculation
0063               * skip_cpu_strings          equ  1  ; Skip string support utilities
0064               
0065               * == Kernel/Multitasking
0066               * skip_timer_alloc          equ  1  ; Skip support for timers allocation
0067               * skip_mem_paging           equ  1  ; Skip support for memory paging
0068               * skip_fio                  equ  1  ; Skip support for file I/O, dsrlnk
0069               * skip_fg99                 equ  1  ; Skip support for FinalGROM99 loading
0070               *
0071               * == Startup behaviour
0072               * startup_backup_scrpad     equ  1  ; Backup scratchpad @>8300->83ff
0073               *                                   ; to pre-defined backup address
0074               * startup_keep_vdpmemory    equ  1  ; Do not clear VDP vram upon startup
0075               *******************************************************************************
0076               
0077               *//////////////////////////////////////////////////////////////
0078               *                       RUNLIB SETUP
0079               *//////////////////////////////////////////////////////////////
0080               
0081                       copy  "memsetup.equ"             ; runlib scratchpad memory setup
     **** ****     > memsetup.equ
0001               * FILE......: memsetup.equ
0002               * Purpose...: Equates for spectra2 memory layout
0003               
0004               ***************************************************************
0005               * >8300 - >8341     Scratchpad memory layout (66 bytes)
0006               ********|*****|*********************|**************************
0007      8300     ws1     equ   >8300                 ; 32 - Primary workspace
0008      8320     mcloop  equ   >8320                 ; 08 - Machine code for loop & speech
0009      8328     wbase   equ   >8328                 ; 02 - PNT base address
0010      832A     wyx     equ   >832a                 ; 02 - Cursor YX position
0011      832C     wtitab  equ   >832c                 ; 02 - Timers: Address of timer table
0012      832E     wtiusr  equ   >832e                 ; 02 - Timers: Address of user hook
0013      8330     wtitmp  equ   >8330                 ; 02 - Timers: Internal use
0014      8332     wvrtkb  equ   >8332                 ; 02 - Virtual keyboard flags
0015      8334     wsdlst  equ   >8334                 ; 02 - Sound player: Tune address
0016      8336     wsdtmp  equ   >8336                 ; 02 - Sound player: Temporary use
0017      8338     wspeak  equ   >8338                 ; 02 - Speech player: Address of LPC data
0018      833A     wcolmn  equ   >833a                 ; 02 - Screen size, columns per row
0019      833C     waux1   equ   >833c                 ; 02 - Temporary storage 1
0020      833E     waux2   equ   >833e                 ; 02 - Temporary storage 2
0021      8340     waux3   equ   >8340                 ; 02 - Temporary storage 3
0022               ***************************************************************
0023      832A     by      equ   wyx                   ;      Cursor Y position
0024      832B     bx      equ   wyx+1                 ;      Cursor X position
0025      8322     mcsprd  equ   mcloop+2              ;      Speech read routine
0026               ***************************************************************
                   < runlib.asm
0082                       copy  "registers.equ"            ; runlib registers
     **** ****     > registers.equ
0001               * FILE......: registers.equ
0002               * Purpose...: Equates for registers
0003               
0004               ***************************************************************
0005               * Register usage
0006               * R0      **free not used**
0007               * R1      **free not used**
0008               * R2      Config register
0009               * R3      Extended config register
0010               * R4      Temporary register/variable tmp0
0011               * R5      Temporary register/variable tmp1
0012               * R6      Temporary register/variable tmp2
0013               * R7      Temporary register/variable tmp3
0014               * R8      Temporary register/variable tmp4
0015               * R9      Stack pointer
0016               * R10     Highest slot in use + Timer counter
0017               * R11     Subroutine return address
0018               * R12     CRU
0019               * R13     Copy of VDP status byte and counter for sound player
0020               * R14     Copy of VDP register #0 and VDP register #1 bytes
0021               * R15     VDP read/write address
0022               *--------------------------------------------------------------
0023               * Special purpose registers
0024               * R0      shift count
0025               * R12     CRU
0026               * R13     WS     - when using LWPI, BLWP, RTWP
0027               * R14     PC     - when using LWPI, BLWP, RTWP
0028               * R15     STATUS - when using LWPI, BLWP, RTWP
0029               ***************************************************************
0030               * Define registers
0031               ********|*****|*********************|**************************
0032      0000     r0      equ   0
0033      0001     r1      equ   1
0034      0002     r2      equ   2
0035      0003     r3      equ   3
0036      0004     r4      equ   4
0037      0005     r5      equ   5
0038      0006     r6      equ   6
0039      0007     r7      equ   7
0040      0008     r8      equ   8
0041      0009     r9      equ   9
0042      000A     r10     equ   10
0043      000B     r11     equ   11
0044      000C     r12     equ   12
0045      000D     r13     equ   13
0046      000E     r14     equ   14
0047      000F     r15     equ   15
0048               ***************************************************************
0049               * Define register equates
0050               ********|*****|*********************|**************************
0051      0002     config  equ   r2                    ; Config register
0052      0003     xconfig equ   r3                    ; Extended config register
0053      0004     tmp0    equ   r4                    ; Temp register 0
0054      0005     tmp1    equ   r5                    ; Temp register 1
0055      0006     tmp2    equ   r6                    ; Temp register 2
0056      0007     tmp3    equ   r7                    ; Temp register 3
0057      0008     tmp4    equ   r8                    ; Temp register 4
0058      0009     stack   equ   r9                    ; Stack pointer
0059      000E     vdpr01  equ   r14                   ; Copy of VDP#0 and VDP#1 bytes
0060      000F     vdprw   equ   r15                   ; Contains VDP read/write address
0061               ***************************************************************
0062               * Define MSB/LSB equates for registers
0063               ********|*****|*********************|**************************
0064      8300     r0hb    equ   ws1                   ; HI byte R0
0065      8301     r0lb    equ   ws1+1                 ; LO byte R0
0066      8302     r1hb    equ   ws1+2                 ; HI byte R1
0067      8303     r1lb    equ   ws1+3                 ; LO byte R1
0068      8304     r2hb    equ   ws1+4                 ; HI byte R2
0069      8305     r2lb    equ   ws1+5                 ; LO byte R2
0070      8306     r3hb    equ   ws1+6                 ; HI byte R3
0071      8307     r3lb    equ   ws1+7                 ; LO byte R3
0072      8308     r4hb    equ   ws1+8                 ; HI byte R4
0073      8309     r4lb    equ   ws1+9                 ; LO byte R4
0074      830A     r5hb    equ   ws1+10                ; HI byte R5
0075      830B     r5lb    equ   ws1+11                ; LO byte R5
0076      830C     r6hb    equ   ws1+12                ; HI byte R6
0077      830D     r6lb    equ   ws1+13                ; LO byte R6
0078      830E     r7hb    equ   ws1+14                ; HI byte R7
0079      830F     r7lb    equ   ws1+15                ; LO byte R7
0080      8310     r8hb    equ   ws1+16                ; HI byte R8
0081      8311     r8lb    equ   ws1+17                ; LO byte R8
0082      8312     r9hb    equ   ws1+18                ; HI byte R9
0083      8313     r9lb    equ   ws1+19                ; LO byte R9
0084      8314     r10hb   equ   ws1+20                ; HI byte R10
0085      8315     r10lb   equ   ws1+21                ; LO byte R10
0086      8316     r11hb   equ   ws1+22                ; HI byte R11
0087      8317     r11lb   equ   ws1+23                ; LO byte R11
0088      8318     r12hb   equ   ws1+24                ; HI byte R12
0089      8319     r12lb   equ   ws1+25                ; LO byte R12
0090      831A     r13hb   equ   ws1+26                ; HI byte R13
0091      831B     r13lb   equ   ws1+27                ; LO byte R13
0092      831C     r14hb   equ   ws1+28                ; HI byte R14
0093      831D     r14lb   equ   ws1+29                ; LO byte R14
0094      831E     r15hb   equ   ws1+30                ; HI byte R15
0095      831F     r15lb   equ   ws1+31                ; LO byte R15
0096               ********|*****|*********************|**************************
0097      8308     tmp0hb  equ   ws1+8                 ; HI byte R4
0098      8309     tmp0lb  equ   ws1+9                 ; LO byte R4
0099      830A     tmp1hb  equ   ws1+10                ; HI byte R5
0100      830B     tmp1lb  equ   ws1+11                ; LO byte R5
0101      830C     tmp2hb  equ   ws1+12                ; HI byte R6
0102      830D     tmp2lb  equ   ws1+13                ; LO byte R6
0103      830E     tmp3hb  equ   ws1+14                ; HI byte R7
0104      830F     tmp3lb  equ   ws1+15                ; LO byte R7
0105      8310     tmp4hb  equ   ws1+16                ; HI byte R8
0106      8311     tmp4lb  equ   ws1+17                ; LO byte R8
0107               ********|*****|*********************|**************************
0108      8314     btihi   equ   ws1+20                ; Highest slot in use (HI byte R10)
0109      831A     bvdpst  equ   ws1+26                ; Copy of VDP status register (HI byte R13)
0110      831C     vdpr0   equ   ws1+28                ; High byte of R14. Is VDP#0 byte
0111      831D     vdpr1   equ   ws1+29                ; Low byte  of R14. Is VDP#1 byte
0112               ***************************************************************
                   < runlib.asm
0083                       copy  "portaddr.equ"             ; runlib hardware port addresses
     **** ****     > portaddr.equ
0001               * FILE......: portaddr.equ
0002               * Purpose...: Equates for hardware port addresses and vectors
0003               
0004               ***************************************************************
0005               * Equates for VDP, GROM, SOUND, SPEECH ports
0006               ********|*****|*********************|**************************
0007      8400     sound   equ   >8400                 ; Sound generator address
0008      8800     vdpr    equ   >8800                 ; VDP read data window address
0009      8C00     vdpw    equ   >8c00                 ; VDP write data window address
0010      8802     vdps    equ   >8802                 ; VDP status register
0011      8C02     vdpa    equ   >8c02                 ; VDP address register
0012      9C02     grmwa   equ   >9c02                 ; GROM set write address
0013      9802     grmra   equ   >9802                 ; GROM set read address
0014      9800     grmrd   equ   >9800                 ; GROM read byte
0015      9C00     grmwd   equ   >9c00                 ; GROM write byte
0016      9000     spchrd  equ   >9000                 ; Address of speech synth Read Data Register
0017      9400     spchwt  equ   >9400                 ; Address of speech synth Write Data Register
0018               
0019      000E     kscan   equ   >000e                 ; Address of KSCAN routine in console ROM 0
                   < runlib.asm
0084                       copy  "param.equ"                ; runlib parameters
     **** ****     > param.equ
0001               * FILE......: param.equ
0002               * Purpose...: Equates used for subroutine parameters
0003               
0004               ***************************************************************
0005               * Subroutine parameter equates
0006               ***************************************************************
0007      FFFF     eol     equ   >ffff                 ; End-Of-List
0008      FFFF     nofont  equ   >ffff                 ; Skip loading font in RUNLIB
0009      0000     norep   equ   0                     ; PUTBOX > Value for P3. Don't repeat box
0010      3030     num1    equ   >3030                 ; MKNUM  > ASCII 0-9, leading 0's
0011      3020     num2    equ   >3020                 ; MKNUM  > ASCII 0-9, leading spaces
0012      0007     sdopt1  equ   7                     ; SDPLAY > 111 (Player on, repeat, tune in CPU memory)
0013      0005     sdopt2  equ   5                     ; SDPLAY > 101 (Player on, no repeat, tune in CPU memory)
0014      0006     sdopt3  equ   6                     ; SDPLAY > 110 (Player on, repeat, tune in VRAM)
0015      0004     sdopt4  equ   4                     ; SDPLAY > 100 (Player on, no repeat, tune in VRAM)
0016      0000     fnopt1  equ   >0000                 ; LDFNT  > Load TI title screen font
0017      0006     fnopt2  equ   >0006                 ; LDFNT  > Load upper case font
0018      000C     fnopt3  equ   >000c                 ; LDFNT  > Load upper/lower case font
0019      0012     fnopt4  equ   >0012                 ; LDFNT  > Load lower case font
0020      8000     fnopt5  equ   >8000                 ; LDFNT  > Load TI title screen font  & bold
0021      8006     fnopt6  equ   >8006                 ; LDFNT  > Load upper case font       & bold
0022      800C     fnopt7  equ   >800c                 ; LDFNT  > Load upper/lower case font & bold
0023      8012     fnopt8  equ   >8012                 ; LDFNT  > Load lower case font       & bold
0024               *--------------------------------------------------------------
0025               *   Speech player
0026               *--------------------------------------------------------------
0027      0060     talkon  equ   >60                   ; 'start talking' command code for speech synth
0028      00FF     talkof  equ   >ff                   ; 'stop talking' command code for speech synth
0029      6000     spkon   equ   >6000                 ; 'start talking' command code for speech synth
0030      FF00     spkoff  equ   >ff00                 ; 'stop talking' command code for speech synth
                   < runlib.asm
0085                       copy  "classic99.equ"            ; classic99 emulator opcodes
     **** ****     > classic99.equ
0001               * FILE......: classic99.equ
0002               * Purpose...: Extra opcodes for the classic99 emulator
0003               
0004               ***************************************************************
0005               *              Extra opcodes for classic99
0006               ********|*****|*********************|**************************
0007      0110     c99_norm      equ  >0110            ; CPU normal
0008      0111     c99_ovrd      equ  >0111            ; CPU overdrive
0009      0112     c99_smax      equ  >0112            ; System Maximum
0010      0113     c99_brk       equ  >0113            ; Breakpoint
0011      0114     c99_quit      equ  >0114            ; Quit emulator
0012               *--------------------------------------------------------------
0013               * Attention:
0014               * Debug opcodes are part of a 3 words instruction!
0015               * See classic99 user manual for details on proper usage.
0016               *--------------------------------------------------------------
0017      0120     c99_dbgr0     equ  >0120            ; debug printf R0
0018      0121     c99_dbgr1     equ  >0121            ; debug printf R1
0019      0122     c99_dbgr2     equ  >0122            ; debug printf R2
0020      0123     c99_dbgr3     equ  >0123            ; debug printf R3
0021      0124     c99_dbgr4     equ  >0124            ; debug printf R4
0022      0125     c99_dbgr5     equ  >0125            ; debug printf R5
0023      0126     c99_dbgr6     equ  >0126            ; debug printf R6
0024      0127     c99_dbgr7     equ  >0127            ; debug printf R7
0025      0128     c99_dbgr8     equ  >0128            ; debug printf R8
0026      0129     c99_dbgr9     equ  >0129            ; debug printf R9
0027      012A     c99_dbgr10    equ  >012a            ; debug printf R10
0028      012B     c99_dbgr11    equ  >012b            ; debug printf R11
0029      012C     c99_dbgr12    equ  >012c            ; debug printf R12
0030      012D     c99_dbgr13    equ  >012d            ; debug printf R13
0031      012E     c99_dbgr14    equ  >012e            ; debug printf R14
0032      012F     c99_dbgr15    equ  >012f            ; debug printf R15
                   < runlib.asm
0086               
0090               
0091                       copy  "cpu_constants.asm"        ; Define constants for word/MSB/LSB
     **** ****     > cpu_constants.asm
0001               * FILE......: cpu_constants.asm
0002               * Purpose...: Constants used by Spectra2 and for own use
0003               
0004               ***************************************************************
0005               *                      Some constants
0006               ********|*****|*********************|**************************
0007               
0008               *--------------------------------------------------------------
0009               * Word values
0010               *--------------------------------------------------------------
0011               ;                                   ;       0123456789ABCDEF
0012 60C0 0000     w$0000  data  >0000                 ; >0000 0000000000000000
0013 60C2 0001     w$0001  data  >0001                 ; >0001 0000000000000001
0014 60C4 0002     w$0002  data  >0002                 ; >0002 0000000000000010
0015 60C6 0004     w$0004  data  >0004                 ; >0004 0000000000000100
0016 60C8 0008     w$0008  data  >0008                 ; >0008 0000000000001000
0017 60CA 0010     w$0010  data  >0010                 ; >0010 0000000000010000
0018 60CC 0020     w$0020  data  >0020                 ; >0020 0000000000100000
0019 60CE 0040     w$0040  data  >0040                 ; >0040 0000000001000000
0020 60D0 0080     w$0080  data  >0080                 ; >0080 0000000010000000
0021 60D2 0100     w$0100  data  >0100                 ; >0100 0000000100000000
0022 60D4 0200     w$0200  data  >0200                 ; >0200 0000001000000000
0023 60D6 0400     w$0400  data  >0400                 ; >0400 0000010000000000
0024 60D8 0800     w$0800  data  >0800                 ; >0800 0000100000000000
0025 60DA 1000     w$1000  data  >1000                 ; >1000 0001000000000000
0026 60DC 2000     w$2000  data  >2000                 ; >2000 0010000000000000
0027 60DE 4000     w$4000  data  >4000                 ; >4000 0100000000000000
0028 60E0 8000     w$8000  data  >8000                 ; >8000 1000000000000000
0029 60E2 FFFF     w$ffff  data  >ffff                 ; >ffff 1111111111111111
0030 60E4 D000     w$d000  data  >d000                 ; >d000
0031               *--------------------------------------------------------------
0032               * Byte values - High byte (=MSB) for byte operations
0033               *--------------------------------------------------------------
0034      2000     hb$00   equ   w$0000                ; >0000
0035      2012     hb$01   equ   w$0100                ; >0100
0036      2014     hb$02   equ   w$0200                ; >0200
0037      2016     hb$04   equ   w$0400                ; >0400
0038      2018     hb$08   equ   w$0800                ; >0800
0039      201A     hb$10   equ   w$1000                ; >1000
0040      201C     hb$20   equ   w$2000                ; >2000
0041      201E     hb$40   equ   w$4000                ; >4000
0042      2020     hb$80   equ   w$8000                ; >8000
0043      2024     hb$d0   equ   w$d000                ; >d000
0044               *--------------------------------------------------------------
0045               * Byte values - Low byte (=LSB) for byte operations
0046               *--------------------------------------------------------------
0047      2000     lb$00   equ   w$0000                ; >0000
0048      2002     lb$01   equ   w$0001                ; >0001
0049      2004     lb$02   equ   w$0002                ; >0002
0050      2006     lb$04   equ   w$0004                ; >0004
0051      2008     lb$08   equ   w$0008                ; >0008
0052      200A     lb$10   equ   w$0010                ; >0010
0053      200C     lb$20   equ   w$0020                ; >0020
0054      200E     lb$40   equ   w$0040                ; >0040
0055      2010     lb$80   equ   w$0080                ; >0080
0056               *--------------------------------------------------------------
0057               * Bit values
0058               *--------------------------------------------------------------
0059               ;                                   ;       0123456789ABCDEF
0060      2002     wbit15  equ   w$0001                ; >0001 0000000000000001
0061      2004     wbit14  equ   w$0002                ; >0002 0000000000000010
0062      2006     wbit13  equ   w$0004                ; >0004 0000000000000100
0063      2008     wbit12  equ   w$0008                ; >0008 0000000000001000
0064      200A     wbit11  equ   w$0010                ; >0010 0000000000010000
0065      200C     wbit10  equ   w$0020                ; >0020 0000000000100000
0066      200E     wbit9   equ   w$0040                ; >0040 0000000001000000
0067      2010     wbit8   equ   w$0080                ; >0080 0000000010000000
0068      2012     wbit7   equ   w$0100                ; >0100 0000000100000000
0069      2014     wbit6   equ   w$0200                ; >0200 0000001000000000
0070      2016     wbit5   equ   w$0400                ; >0400 0000010000000000
0071      2018     wbit4   equ   w$0800                ; >0800 0000100000000000
0072      201A     wbit3   equ   w$1000                ; >1000 0001000000000000
0073      201C     wbit2   equ   w$2000                ; >2000 0010000000000000
0074      201E     wbit1   equ   w$4000                ; >4000 0100000000000000
0075      2020     wbit0   equ   w$8000                ; >8000 1000000000000000
                   < runlib.asm
0092                       copy  "config.equ"               ; Equates for bits in config register
     **** ****     > config.equ
0001               * FILE......: config.equ
0002               * Purpose...: Equates for bits in config register
0003               
0004               ***************************************************************
0005               * The config register equates
0006               *--------------------------------------------------------------
0007               * Configuration flags
0008               * ===================
0009               *
0010               * ; 15  Sound player: tune source       1=ROM/RAM      0=VDP MEMORY
0011               * ; 14  Sound player: repeat tune       1=yes          0=no
0012               * ; 13  Sound player: enabled           1=yes          0=no (or pause)
0013               * ; 12  VDP9918 sprite collision?       1=yes          0=no
0014               * ; 11  Keyboard: ANY key pressed       1=yes          0=no
0015               * ; 10  Keyboard: Alpha lock key down   1=yes          0=no
0016               * ; 09  Timer: Kernel thread enabled    1=yes          0=no
0017               * ; 08  Timer: Block kernel thread      1=yes          0=no
0018               * ; 07  Timer: User hook enabled        1=yes          0=no
0019               * ; 06  Timer: Block user hook          1=yes          0=no
0020               * ; 05  Speech synthesizer present      1=yes          0=no
0021               * ; 04  Speech player: busy             1=yes          0=no
0022               * ; 03  Speech player: enabled          1=yes          0=no
0023               * ; 02  VDP9918 PAL version             1=yes(50)      0=no(60)
0024               * ; 01  F18A present                    1=on           0=off
0025               * ; 00  Subroutine state flag           1=on           0=off
0026               ********|*****|*********************|**************************
0027      201C     palon   equ   wbit2                 ; bit 2=1   (VDP9918 PAL version)
0028      2012     enusr   equ   wbit7                 ; bit 7=1   (Enable user hook)
0029      200E     enknl   equ   wbit9                 ; bit 9=1   (Enable kernel thread)
0030      200A     anykey  equ   wbit11                ; BIT 11 in the CONFIG register
0031               ***************************************************************
                   < runlib.asm
0093                       copy  "cpu_crash.asm"            ; CPU crash handler
     **** ****     > cpu_crash.asm
0001               * FILE......: cpu_crash.asm
0002               * Purpose...: Custom crash handler module
0003               
0004               
0005               ***************************************************************
0006               * cpu.crash - CPU program crashed handler
0007               ***************************************************************
0008               *  bl   @cpu.crash
0009               *--------------------------------------------------------------
0010               * Crash and halt system. Upon crash entry register contents are
0011               * copied to the memory region >ffe0 - >fffe and displayed after
0012               * resetting the spectra2 runtime library, video modes, etc.
0013               *
0014               * Diagnostics
0015               * >ffce  caller address
0016               *
0017               * Register contents
0018               * >ffdc  wp
0019               * >ffde  st
0020               * >ffe0  r0
0021               * >ffe2  r1
0022               * >ffe4  r2  (config)
0023               * >ffe6  r3
0024               * >ffe8  r4  (tmp0)
0025               * >ffea  r5  (tmp1)
0026               * >ffec  r6  (tmp2)
0027               * >ffee  r7  (tmp3)
0028               * >fff0  r8  (tmp4)
0029               * >fff2  r9  (stack)
0030               * >fff4  r10
0031               * >fff6  r11
0032               * >fff8  r12
0033               * >fffa  r13
0034               * >fffc  r14
0035               * >fffe  r15
0036               ********|*****|*********************|**************************
0037               cpu.crash:
0038 60E6 022B  22         ai    r11,-4                ; Remove opcode offset
     60E8 FFFC     
0039               *--------------------------------------------------------------
0040               *    Save registers to high memory
0041               *--------------------------------------------------------------
0042 60EA C800  38         mov   r0,@>ffe0
     60EC FFE0     
0043 60EE C801  38         mov   r1,@>ffe2
     60F0 FFE2     
0044 60F2 C802  38         mov   r2,@>ffe4
     60F4 FFE4     
0045 60F6 C803  38         mov   r3,@>ffe6
     60F8 FFE6     
0046 60FA C804  38         mov   r4,@>ffe8
     60FC FFE8     
0047 60FE C805  38         mov   r5,@>ffea
     6100 FFEA     
0048 6102 C806  38         mov   r6,@>ffec
     6104 FFEC     
0049 6106 C807  38         mov   r7,@>ffee
     6108 FFEE     
0050 610A C808  38         mov   r8,@>fff0
     610C FFF0     
0051 610E C809  38         mov   r9,@>fff2
     6110 FFF2     
0052 6112 C80A  38         mov   r10,@>fff4
     6114 FFF4     
0053 6116 C80B  38         mov   r11,@>fff6
     6118 FFF6     
0054 611A C80C  38         mov   r12,@>fff8
     611C FFF8     
0055 611E C80D  38         mov   r13,@>fffa
     6120 FFFA     
0056 6122 C80E  38         mov   r14,@>fffc
     6124 FFFC     
0057 6126 C80F  38         mov   r15,@>ffff
     6128 FFFF     
0058 612A 02A0  12         stwp  r0
0059 612C C800  38         mov   r0,@>ffdc
     612E FFDC     
0060 6130 02C0  12         stst  r0
0061 6132 C800  38         mov   r0,@>ffde
     6134 FFDE     
0062               *--------------------------------------------------------------
0063               *    Reset system
0064               *--------------------------------------------------------------
0065               cpu.crash.reset:
0066 6136 02E0  18         lwpi  ws1                   ; Activate workspace 1
     6138 8300     
0067 613A 04E0  26         clr   @>8302                ; Reset exit flag (R1 in workspace WS1!)
     613C 8302     
0068 613E 0200  20         li    r0,>4a4a              ; Note that a crash occured (Flag = >4a4a)
     6140 4A4A     
0069 6142 0460  28         b     @runli1               ; Initialize system again (VDP, Memory, etc.)
     6144 2F10     
0070               *--------------------------------------------------------------
0071               *    Show diagnostics after system reset
0072               *--------------------------------------------------------------
0073               cpu.crash.main:
0074                       ;------------------------------------------------------
0075                       ; Load "32x24" video mode & font
0076                       ;------------------------------------------------------
0077 6146 06A0  32         bl    @vidtab               ; Load video mode table into VDP
     6148 22F8     
0078 614A 21F2                   data graph1           ; \ i  p0 = pointer to video mode table
0079                                                   ; /
0080               
0081 614C 06A0  32         bl    @ldfnt
     614E 2360     
0082 6150 0900                   data >0900,fnopt3     ; Load font (upper & lower case)
     6152 000C     
0083               
0084 6154 06A0  32         bl    @filv
     6156 228E     
0085 6158 0000                   data >0000,32,32*24   ; Clear screen
     615A 0020     
     615C 0300     
0086               
0087 615E 06A0  32         bl    @filv
     6160 228E     
0088 6162 0380                   data >0380,>f0,32*24  ; Load color table
     6164 00F0     
     6166 0300     
0089                       ;------------------------------------------------------
0090                       ; Show crash address
0091                       ;------------------------------------------------------
0092 6168 06A0  32         bl    @putat                ; Show crash message
     616A 2442     
0093 616C 0000                   data >0000,cpu.crash.msg.crashed
     616E 2182     
0094               
0095 6170 06A0  32         bl    @puthex               ; Put hex value on screen
     6172 299C     
0096 6174 0015                   byte 0,21             ; \ i  p0 = YX position
0097 6176 FFF6                   data >fff6            ; | i  p1 = Pointer to 16 bit word
0098 6178 A100                   data rambuf           ; | i  p2 = Pointer to ram buffer
0099 617A 4130                   byte 65,48            ; | i  p3 = MSB offset for ASCII digit a-f
0100                                                   ; /         LSB offset for ASCII digit 0-9
0101                       ;------------------------------------------------------
0102                       ; Show caller address
0103                       ;------------------------------------------------------
0104 617C 06A0  32         bl    @putat                ; Show caller message
     617E 2442     
0105 6180 0100                   data >0100,cpu.crash.msg.caller
     6182 2198     
0106               
0107 6184 06A0  32         bl    @puthex               ; Put hex value on screen
     6186 299C     
0108 6188 0115                   byte 1,21             ; \ i  p0 = YX position
0109 618A FFCE                   data >ffce            ; | i  p1 = Pointer to 16 bit word
0110 618C A100                   data rambuf           ; | i  p2 = Pointer to ram buffer
0111 618E 4130                   byte 65,48            ; | i  p3 = MSB offset for ASCII digit a-f
0112                                                   ; /         LSB offset for ASCII digit 0-9
0113                       ;------------------------------------------------------
0114                       ; Display labels
0115                       ;------------------------------------------------------
0116 6190 06A0  32         bl    @putat
     6192 2442     
0117 6194 0300                   byte 3,0
0118 6196 21B4                   data cpu.crash.msg.wp
0119 6198 06A0  32         bl    @putat
     619A 2442     
0120 619C 0400                   byte 4,0
0121 619E 21BA                   data cpu.crash.msg.st
0122                       ;------------------------------------------------------
0123                       ; Show crash registers WP, ST, R0 - R15
0124                       ;------------------------------------------------------
0125 61A0 06A0  32         bl    @at                   ; Put cursor at YX
     61A2 26C6     
0126 61A4 0304                   byte 3,4              ; \ i p0 = YX position
0127                                                   ; /
0128               
0129 61A6 0204  20         li    tmp0,>ffdc            ; Crash registers >ffdc - >ffff
     61A8 FFDC     
0130 61AA 04C6  14         clr   tmp2                  ; Loop counter
0131               
0132               cpu.crash.showreg:
0133 61AC C034  30         mov   *tmp0+,r0             ; Move crash register content to r0
0134               
0135 61AE 0649  14         dect  stack
0136 61B0 C644  30         mov   tmp0,*stack           ; Push tmp0
0137 61B2 0649  14         dect  stack
0138 61B4 C645  30         mov   tmp1,*stack           ; Push tmp1
0139 61B6 0649  14         dect  stack
0140 61B8 C646  30         mov   tmp2,*stack           ; Push tmp2
0141                       ;------------------------------------------------------
0142                       ; Display crash register number
0143                       ;------------------------------------------------------
0144               cpu.crash.showreg.label:
0145 61BA C046  18         mov   tmp2,r1               ; Save register number
0146 61BC 0286  22         ci    tmp2,1                ; Skip labels WP/ST?
     61BE 0001     
0147 61C0 1220  14         jle   cpu.crash.showreg.content
0148                                                   ; Yes, skip
0149               
0150 61C2 0641  14         dect  r1                    ; Adjust because of "dummy" WP/ST registers
0151 61C4 06A0  32         bl    @mknum
     61C6 29A6     
0152 61C8 8302                   data r1hb             ; \ i  p0 = Pointer to 16 bit unsigned word
0153 61CA A100                   data rambuf           ; | i  p1 = Pointer to ram buffer
0154 61CC 3020                   byte 48,32            ; | i  p2 = MSB offset for ASCII digit a-f
0155                                                   ; /         LSB offset for ASCII digit 0-9
0156               
0157 61CE 06A0  32         bl    @setx                 ; Set cursor X position
     61D0 26DC     
0158 61D2 0000                   data 0                ; \ i  p0 =  Cursor Y position
0159                                                   ; /
0160               
0161 61D4 0204  20         li    tmp0,>0400            ; Set string length-prefix byte
     61D6 0400     
0162 61D8 D804  38         movb  tmp0,@rambuf          ;
     61DA A100     
0163               
0164 61DC 06A0  32         bl    @putstr               ; Put length-byte prefixed string at current YX
     61DE 241E     
0165 61E0 A100                   data rambuf           ; \ i  p0 = Pointer to ram buffer
0166                                                   ; /
0167               
0168 61E2 06A0  32         bl    @setx                 ; Set cursor X position
     61E4 26DC     
0169 61E6 0002                   data 2                ; \ i  p0 =  Cursor Y position
0170                                                   ; /
0171               
0172 61E8 0281  22         ci    r1,10
     61EA 000A     
0173 61EC 1102  14         jlt   !
0174 61EE 0620  26         dec   @wyx                  ; x=x-1
     61F0 832A     
0175               
0176 61F2 06A0  32 !       bl    @putstr
     61F4 241E     
0177 61F6 21AE                   data cpu.crash.msg.r
0178               
0179 61F8 06A0  32         bl    @mknum
     61FA 29A6     
0180 61FC 8302                   data r1hb             ; \ i  p0 = Pointer to 16 bit unsigned word
0181 61FE A100                   data rambuf           ; | i  p1 = Pointer to ram buffer
0182 6200 3020                   byte 48,32            ; | i  p2 = MSB offset for ASCII digit a-f
0183                                                   ; /         LSB offset for ASCII digit 0-9
0184                       ;------------------------------------------------------
0185                       ; Display crash register content
0186                       ;------------------------------------------------------
0187               cpu.crash.showreg.content:
0188 6202 06A0  32         bl    @mkhex                ; Convert hex word to string
     6204 2918     
0189 6206 8300                   data r0hb             ; \ i  p0 = Pointer to 16 bit word
0190 6208 A100                   data rambuf           ; | i  p1 = Pointer to ram buffer
0191 620A 4130                   byte 65,48            ; | i  p2 = MSB offset for ASCII digit a-f
0192                                                   ; /         LSB offset for ASCII digit 0-9
0193               
0194 620C 06A0  32         bl    @setx                 ; Set cursor X position
     620E 26DC     
0195 6210 0004                   data 4                ; \ i  p0 =  Cursor Y position
0196                                                   ; /
0197               
0198 6212 06A0  32         bl    @putstr               ; Put '  >'
     6214 241E     
0199 6216 21B0                   data cpu.crash.msg.marker
0200               
0201 6218 06A0  32         bl    @setx                 ; Set cursor X position
     621A 26DC     
0202 621C 0007                   data 7                ; \ i  p0 =  Cursor Y position
0203                                                   ; /
0204               
0205 621E 0204  20         li    tmp0,>0400            ; Set string length-prefix byte
     6220 0400     
0206 6222 D804  38         movb  tmp0,@rambuf          ;
     6224 A100     
0207               
0208 6226 06A0  32         bl    @putstr               ; Put length-byte prefixed string at current YX
     6228 241E     
0209 622A A100                   data rambuf           ; \ i  p0 = Pointer to ram buffer
0210                                                   ; /
0211               
0212 622C C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0213 622E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0214 6230 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0215               
0216 6232 06A0  32         bl    @down                 ; y=y+1
     6234 26CC     
0217               
0218 6236 0586  14         inc   tmp2
0219 6238 0286  22         ci    tmp2,17
     623A 0011     
0220 623C 12B7  14         jle   cpu.crash.showreg     ; Show next register
0221                       ;------------------------------------------------------
0222                       ; Kernel takes over
0223                       ;------------------------------------------------------
0224 623E 0460  28         b     @cpu.crash.showbank   ; Expected to be included in
     6240 7F00     
0225               
0226               
0227 6242 1553     cpu.crash.msg.crashed      stri 'System crashed near >'
     6244 7973     
     6246 7465     
     6248 6D20     
     624A 6372     
     624C 6173     
     624E 6865     
     6250 6420     
     6252 6E65     
     6254 6172     
     6256 203E     
0228                                          even
0229 6258 1543     cpu.crash.msg.caller       stri 'Caller address near >'
     625A 616C     
     625C 6C65     
     625E 7220     
     6260 6164     
     6262 6472     
     6264 6573     
     6266 7320     
     6268 6E65     
     626A 6172     
     626C 203E     
0230                                          even
0231 626E 0152     cpu.crash.msg.r            stri 'R'
0232                                          even
0233 6270 0320     cpu.crash.msg.marker       stri '  >'
     6272 203E     
0234                                          even
0235 6274 042A     cpu.crash.msg.wp           stri '**WP'
     6276 2A57     
     6278 50       
0236                                          even
0237 627A 042A     cpu.crash.msg.st           stri '**ST'
     627C 2A53     
     627E 54       
0238                                          even
0239 6280 1753     cpu.crash.msg.source       stri 'Source    %%build_src%%'
     6282 6F75     
     6284 7263     
     6286 6520     
     6288 2020     
     628A 2025     
     628C 2562     
     628E 7569     
     6290 6C64     
     6292 5F73     
     6294 7263     
     6296 2525     
0240                                          even
0241 6298 1842     cpu.crash.msg.id           stri 'Build-ID  %%build_date%%'
     629A 7569     
     629C 6C64     
     629E 2D49     
     62A0 4420     
     62A2 2025     
     62A4 2562     
     62A6 7569     
     62A8 6C64     
     62AA 5F64     
     62AC 6174     
     62AE 6525     
     62B0 25       
0242                                          even
                   < runlib.asm
0094                       copy  "vdp_tables.asm"           ; Data used by runtime library
     **** ****     > vdp_tables.asm
0001               * FILE......: vdp_tables.a99
0002               * Purpose...: Video mode tables
0003               
0004               ***************************************************************
0005               * Graphics mode 1 (32 columns/24 rows)
0006               *--------------------------------------------------------------
0007 62B2 00E2     graph1  byte  >00,>e2,>00,>0e,>01,>06,>02,SPFBCK,0,32
     62B4 000E     
     62B6 0106     
     62B8 0204     
     62BA 0020     
0008               *
0009               * ; VDP#0 Control bits
0010               * ;      bit 6=0: M3 | Graphics 1 mode
0011               * ;      bit 7=0: Disable external VDP input
0012               * ; VDP#1 Control bits
0013               * ;      bit 0=1: 16K selection
0014               * ;      bit 1=1: Enable display
0015               * ;      bit 2=1: Enable VDP interrupt
0016               * ;      bit 3=0: M1 \ Graphics 1 mode
0017               * ;      bit 4=0: M2 /
0018               * ;      bit 5=0: reserved
0019               * ;      bit 6=1: 16x16 sprites
0020               * ;      bit 7=0: Sprite magnification (1x)
0021               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0022               * ; VDP#3 PCT (Pattern color table)      at >0380  (>0E * >040)
0023               * ; VDP#4 PDT (Pattern descriptor table) at >0800  (>01 * >800)
0024               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0025               * ; VDP#6 SPT (Sprite pattern table)     at >1000  (>02 * >800)
0026               * ; VDP#7 Set screen background color
0027               
0028               
0029               ***************************************************************
0030               * Textmode (40 columns/24 rows)
0031               *--------------------------------------------------------------
0032 62BC 00F2     tx4024  byte  >00,>f2,>00,>0e,>01,>06,>00,SPFCLR,0,40
     62BE 000E     
     62C0 0106     
     62C2 00F4     
     62C4 0028     
0033               *
0034               * ; VDP#0 Control bits
0035               * ;      bit 6=0: M3 | Graphics 1 mode
0036               * ;      bit 7=0: Disable external VDP input
0037               * ; VDP#1 Control bits
0038               * ;      bit 0=1: 16K selection
0039               * ;      bit 1=1: Enable display
0040               * ;      bit 2=1: Enable VDP interrupt
0041               * ;      bit 3=1: M1 \ TEXT MODE
0042               * ;      bit 4=0: M2 /
0043               * ;      bit 5=0: reserved
0044               * ;      bit 6=1: 16x16 sprites
0045               * ;      bit 7=0: Sprite magnification (1x)
0046               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0047               * ; VDP#3 PCT (Pattern color table)      at >0380  (>0E * >040)
0048               * ; VDP#4 PDT (Pattern descriptor table) at >0800  (>01 * >800)
0049               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0050               * ; VDP#6 SPT (Sprite pattern table)     at >0000  (>00 * >800)
0051               * ; VDP#7 Set foreground/background color
0052               ***************************************************************
0053               
0054               
0055               ***************************************************************
0056               * Textmode (80 columns, 24 rows) - F18A
0057               *--------------------------------------------------------------
0058 62C6 04F0     tx8024  byte  >04,>f0,>00,>3f,>02,>40,>03,SPFCLR,0,80
     62C8 003F     
     62CA 0240     
     62CC 03F4     
     62CE 0050     
0059               *
0060               * ; VDP#0 Control bits
0061               * ;      bit 6=0: M3 | Graphics 1 mode
0062               * ;      bit 7=0: Disable external VDP input
0063               * ; VDP#1 Control bits
0064               * ;      bit 0=1: 16K selection
0065               * ;      bit 1=1: Enable display
0066               * ;      bit 2=1: Enable VDP interrupt
0067               * ;      bit 3=1: M1 \ TEXT MODE
0068               * ;      bit 4=0: M2 /
0069               * ;      bit 5=0: reserved
0070               * ;      bit 6=0: 8x8 sprites
0071               * ;      bit 7=0: Sprite magnification (1x)
0072               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0073               * ; VDP#3 PCT (Pattern color table)      at >0FC0  (>3F * >040)
0074               * ; VDP#4 PDT (Pattern descriptor table) at >1000  (>02 * >800)
0075               * ; VDP#5 SAT (sprite attribute list)    at >2000  (>40 * >080)
0076               * ; VDP#6 SPT (Sprite pattern table)     at >1800  (>03 * >800)
0077               * ; VDP#7 Set foreground/background color
0078               ***************************************************************
                   < runlib.asm
0095                       copy  "basic_cpu_vdp.asm"        ; Basic CPU & VDP functions
     **** ****     > basic_cpu_vdp.asm
0001               * FILE......: basic_cpu_vdp.asm
0002               * Purpose...: Basic CPU & VDP functions used by other modules
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *       Support Machine Code for copy & fill functions
0006               *//////////////////////////////////////////////////////////////
0007               
0008               *--------------------------------------------------------------
0009               * ; Machine code for tight loop.
0010               * ; The MOV operation at MCLOOP must be injected by the calling routine.
0011               *--------------------------------------------------------------
0012               *       DATA  >????                 ; \ mcloop  mov   ...
0013 62D0 0606     mccode  data  >0606                 ; |         dec   r6 (tmp2)
0014 62D2 16FD             data  >16fd                 ; |         jne   mcloop
0015 62D4 045B             data  >045b                 ; /         b     *r11
0016               *--------------------------------------------------------------
0017               * ; Machine code for reading from the speech synthesizer
0018               * ; The SRC instruction takes 12 uS for execution in scratchpad RAM.
0019               * ; Is required for the 12 uS delay. It destroys R5.
0020               *--------------------------------------------------------------
0021 62D6 D114     spcode  data  >d114                 ; \         movb  *r4,r4 (tmp0)
0022 62D8 0BC5             data  >0bc5                 ; /         src   r5,12  (tmp1)
0023                       even
0024               
0025               
0026               ***************************************************************
0027               * loadmc - Load machine code into scratchpad  >8322 - >8328
0028               ***************************************************************
0029               *  bl  @loadmc
0030               *--------------------------------------------------------------
0031               *  REMARKS
0032               *  Machine instruction in location @>8320 will be set by
0033               *  SP2 copy/fill routine that is called later on.
0034               ********|*****|*********************|**************************
0035               loadmc:
0036 62DA 0201  20         li    r1,mccode             ; Machinecode to patch
     62DC 2210     
0037 62DE 0202  20         li    r2,mcloop+2           ; Scratch-pad reserved for machine code
     62E0 8322     
0038 62E2 CCB1  46         mov   *r1+,*r2+             ; Copy 1st instruction
0039 62E4 CCB1  46         mov   *r1+,*r2+             ; Copy 2nd instruction
0040 62E6 CCB1  46         mov   *r1+,*r2+             ; Copy 3rd instruction
0041 62E8 045B  20         b     *r11                  ; Return to caller
0042               
0043               
0044               *//////////////////////////////////////////////////////////////
0045               *                    STACK SUPPORT FUNCTIONS
0046               *//////////////////////////////////////////////////////////////
0047               
0048               ***************************************************************
0049               * POPR. - Pop registers & return to caller
0050               ***************************************************************
0051               *  B  @POPRG.
0052               *--------------------------------------------------------------
0053               *  REMARKS
0054               *  R11 must be at stack bottom
0055               ********|*****|*********************|**************************
0056 62EA C0F9  30 popr3   mov   *stack+,r3
0057 62EC C0B9  30 popr2   mov   *stack+,r2
0058 62EE C079  30 popr1   mov   *stack+,r1
0059 62F0 C039  30 popr0   mov   *stack+,r0
0060 62F2 C2F9  30 poprt   mov   *stack+,r11
0061 62F4 045B  20         b     *r11
0062               
0063               
0064               
0065               *//////////////////////////////////////////////////////////////
0066               *                   MEMORY FILL FUNCTIONS
0067               *//////////////////////////////////////////////////////////////
0068               
0069               ***************************************************************
0070               * FILM - Fill CPU memory with byte
0071               ***************************************************************
0072               *  bl   @film
0073               *  data P0,P1,P2
0074               *--------------------------------------------------------------
0075               *  P0 = Memory start address
0076               *  P1 = Byte to fill
0077               *  P2 = Number of bytes to fill
0078               *--------------------------------------------------------------
0079               *  bl   @xfilm
0080               *
0081               *  TMP0 = Memory start address
0082               *  TMP1 = Byte to fill
0083               *  TMP2 = Number of bytes to fill
0084               ********|*****|*********************|**************************
0085 62F6 C13B  30 film    mov   *r11+,tmp0            ; Memory start
0086 62F8 C17B  30         mov   *r11+,tmp1            ; Byte to fill
0087 62FA C1BB  30         mov   *r11+,tmp2            ; Repeat count
0088               *--------------------------------------------------------------
0089               * Assert
0090               *--------------------------------------------------------------
0091 62FC C1C6  18 xfilm   mov   tmp2,tmp3             ; Bytes to fill = 0 ?
0092 62FE 1604  14         jne   filchk                ; No, continue checking
0093               
0094 6300 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     6302 FFCE     
0095 6304 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     6306 2026     
0096               *--------------------------------------------------------------
0097               *       Check: 1 byte fill
0098               *--------------------------------------------------------------
0099 6308 D820  42 filchk  movb  @tmp1lb,@tmp1hb       ; Duplicate value
     630A 830B     
     630C 830A     
0100               
0101 630E 0286  22         ci    tmp2,1                ; Bytes to fill = 1 ?
     6310 0001     
0102 6312 1602  14         jne   filchk2
0103 6314 DD05  32         movb  tmp1,*tmp0+
0104 6316 045B  20         b     *r11                  ; Exit
0105               *--------------------------------------------------------------
0106               *       Check: 2 byte fill
0107               *--------------------------------------------------------------
0108 6318 0286  22 filchk2 ci    tmp2,2                ; Byte to fill = 2 ?
     631A 0002     
0109 631C 1603  14         jne   filchk3
0110 631E DD05  32         movb  tmp1,*tmp0+           ; Deal with possible uneven start address
0111 6320 DD05  32         movb  tmp1,*tmp0+
0112 6322 045B  20         b     *r11                  ; Exit
0113               *--------------------------------------------------------------
0114               *       Check: Handle uneven start address
0115               *--------------------------------------------------------------
0116 6324 C1C4  18 filchk3 mov   tmp0,tmp3
0117 6326 0247  22         andi  tmp3,1                ; TMP3=1 -> ODD else EVEN
     6328 0001     
0118 632A 1305  14         jeq   fil16b
0119 632C DD05  32         movb  tmp1,*tmp0+           ; Copy 1st byte
0120 632E 0606  14         dec   tmp2
0121 6330 0286  22         ci    tmp2,2                ; Do we only have 1 word left?
     6332 0002     
0122 6334 13F1  14         jeq   filchk2               ; Yes, copy word and exit
0123               *--------------------------------------------------------------
0124               *       Fill memory with 16 bit words
0125               *--------------------------------------------------------------
0126 6336 C1C6  18 fil16b  mov   tmp2,tmp3
0127 6338 0247  22         andi  tmp3,1                ; TMP3=1 -> ODD else EVEN
     633A 0001     
0128 633C 1301  14         jeq   dofill
0129 633E 0606  14         dec   tmp2                  ; Make TMP2 even
0130 6340 CD05  34 dofill  mov   tmp1,*tmp0+
0131 6342 0646  14         dect  tmp2
0132 6344 16FD  14         jne   dofill
0133               *--------------------------------------------------------------
0134               * Fill last byte if ODD
0135               *--------------------------------------------------------------
0136 6346 C1C7  18         mov   tmp3,tmp3
0137 6348 1301  14         jeq   fil.exit
0138 634A DD05  32         movb  tmp1,*tmp0+
0139               fil.exit:
0140 634C 045B  20         b     *r11
0141               
0142               
0143               ***************************************************************
0144               * FILV - Fill VRAM with byte
0145               ***************************************************************
0146               *  BL   @FILV
0147               *  DATA P0,P1,P2
0148               *--------------------------------------------------------------
0149               *  P0 = VDP start address
0150               *  P1 = Byte to fill
0151               *  P2 = Number of bytes to fill
0152               *--------------------------------------------------------------
0153               *  BL   @XFILV
0154               *
0155               *  TMP0 = VDP start address
0156               *  TMP1 = Byte to fill
0157               *  TMP2 = Number of bytes to fill
0158               ********|*****|*********************|**************************
0159 634E C13B  30 filv    mov   *r11+,tmp0            ; Memory start
0160 6350 C17B  30         mov   *r11+,tmp1            ; Byte to fill
0161 6352 C1BB  30         mov   *r11+,tmp2            ; Repeat count
0162               *--------------------------------------------------------------
0163               *    Setup VDP write address
0164               *--------------------------------------------------------------
0165 6354 0264  22 xfilv   ori   tmp0,>4000
     6356 4000     
0166 6358 06C4  14         swpb  tmp0
0167 635A D804  30         movb  tmp0,@vdpa
     635C 8C02     
0168 635E 06C4  14         swpb  tmp0
0169 6360 D804  30         movb  tmp0,@vdpa
     6362 8C02     
0170               *--------------------------------------------------------------
0171               *    Fill bytes in VDP memory
0172               *--------------------------------------------------------------
0173 6364 020F  20         li    r15,vdpw              ; Set VDP write address
     6366 8C00     
0174 6368 06C5  14         swpb  tmp1
0175 636A C820  46         mov   @filzz,@mcloop        ; Setup move command
     636C 22B4     
     636E 8320     
0176 6370 0460  24         b     @mcloop               ; Write data to VDP
     6372 8320     
0177               *--------------------------------------------------------------
0181 6374 D7C5     filzz   data  >d7c5                 ; MOVB TMP1,*R15
0183               
0184               
0185               
0186               *//////////////////////////////////////////////////////////////
0187               *                  VDP LOW LEVEL FUNCTIONS
0188               *//////////////////////////////////////////////////////////////
0189               
0190               ***************************************************************
0191               * VDWA / VDRA - Setup VDP write or read address
0192               ***************************************************************
0193               *  BL   @VDWA
0194               *
0195               *  TMP0 = VDP destination address for write
0196               *--------------------------------------------------------------
0197               *  BL   @VDRA
0198               *
0199               *  TMP0 = VDP source address for read
0200               ********|*****|*********************|**************************
0201 6376 0264  22 vdwa    ori   tmp0,>4000            ; Prepare VDP address for write
     6378 4000     
0202 637A 06C4  14 vdra    swpb  tmp0
0203 637C D804  30         movb  tmp0,@vdpa
     637E 8C02     
0204 6380 06C4  14         swpb  tmp0
0205 6382 D804  30         movb  tmp0,@vdpa            ; Set VDP address
     6384 8C02     
0206 6386 045B  20         b     *r11                  ; Exit
0207               
0208               ***************************************************************
0209               * VPUTB - VDP put single byte
0210               ***************************************************************
0211               *  BL @VPUTB
0212               *  DATA P0,P1
0213               *--------------------------------------------------------------
0214               *  P0 = VDP target address
0215               *  P1 = Byte to write
0216               ********|*****|*********************|**************************
0217 6388 C13B  30 vputb   mov   *r11+,tmp0            ; Get VDP target address
0218 638A C17B  30         mov   *r11+,tmp1            ; Get byte to write
0219               *--------------------------------------------------------------
0220               * Set VDP write address
0221               *--------------------------------------------------------------
0222 638C 0264  22 xvputb  ori   tmp0,>4000            ; Prepare VDP address for write
     638E 4000     
0223 6390 06C4  14         swpb  tmp0                  ; \
0224 6392 D804  30         movb  tmp0,@vdpa            ; | Set VDP write address
     6394 8C02     
0225 6396 06C4  14         swpb  tmp0                  ; | inlined @vdwa call
0226 6398 D804  30         movb  tmp0,@vdpa            ; /
     639A 8C02     
0227               *--------------------------------------------------------------
0228               * Write byte
0229               *--------------------------------------------------------------
0230 639C 06C5  14         swpb  tmp1                  ; LSB to MSB
0231 639E D7C5  30         movb  tmp1,*r15             ; Write byte
0232 63A0 045B  20         b     *r11                  ; Exit
0233               
0234               
0235               ***************************************************************
0236               * VGETB - VDP get single byte
0237               ***************************************************************
0238               *  bl   @vgetb
0239               *  data p0
0240               *--------------------------------------------------------------
0241               *  P0 = VDP source address
0242               *--------------------------------------------------------------
0243               *  bl   @xvgetb
0244               *
0245               *  tmp0 = VDP source address
0246               *--------------------------------------------------------------
0247               *  Output:
0248               *  tmp0 MSB = >00
0249               *  tmp0 LSB = VDP byte read
0250               ********|*****|*********************|**************************
0251 63A2 C13B  30 vgetb   mov   *r11+,tmp0            ; Get VDP source address
0252               *--------------------------------------------------------------
0253               * Set VDP read address
0254               *--------------------------------------------------------------
0255 63A4 06C4  14 xvgetb  swpb  tmp0                  ; \
0256 63A6 D804  30         movb  tmp0,@vdpa            ; | Set VDP read address
     63A8 8C02     
0257 63AA 06C4  14         swpb  tmp0                  ; | inlined @vdra call
0258 63AC D804  30         movb  tmp0,@vdpa            ; /
     63AE 8C02     
0259               *--------------------------------------------------------------
0260               * Read byte
0261               *--------------------------------------------------------------
0262 63B0 D120  30         movb  @vdpr,tmp0            ; Read byte
     63B2 8800     
0263 63B4 0984  32         srl   tmp0,8                ; Right align
0264 63B6 045B  20         b     *r11                  ; Exit
0265               
0266               
0267               ***************************************************************
0268               * VIDTAB - Dump videomode table
0269               ***************************************************************
0270               *  BL   @VIDTAB
0271               *  DATA P0
0272               *--------------------------------------------------------------
0273               *  P0 = Address of video mode table
0274               *--------------------------------------------------------------
0275               *  BL   @XIDTAB
0276               *
0277               *  TMP0 = Address of video mode table
0278               *--------------------------------------------------------------
0279               *  Remarks
0280               *  TMP1 = MSB is the VDP target register
0281               *         LSB is the value to write
0282               ********|*****|*********************|**************************
0283 63B8 C13B  30 vidtab  mov   *r11+,tmp0            ; Get video mode table
0284 63BA C394  26 xidtab  mov   *tmp0,r14             ; Store copy of VDP#0 and #1 in RAM
0285               *--------------------------------------------------------------
0286               * Calculate PNT base address
0287               *--------------------------------------------------------------
0288 63BC C144  18         mov   tmp0,tmp1
0289 63BE 05C5  14         inct  tmp1
0290 63C0 D155  26         movb  *tmp1,tmp1            ; Get value for VDP#2
0291 63C2 0245  22         andi  tmp1,>ff00            ; Only keep MSB
     63C4 FF00     
0292 63C6 0A25  20         sla   tmp1,2                ; TMP1 *= 400
0293 63C8 C805  30         mov   tmp1,@wbase           ; Store calculated base
     63CA 8328     
0294               *--------------------------------------------------------------
0295               * Dump VDP shadow registers
0296               *--------------------------------------------------------------
0297 63CC 0205  20         li    tmp1,>8000            ; Start with VDP register 0
     63CE 8000     
0298 63D0 0206  20         li    tmp2,8
     63D2 0008     
0299 63D4 D834  40 vidta1  movb  *tmp0+,@tmp1lb        ; Write value to VDP register
     63D6 830B     
0300 63D8 06C5  14         swpb  tmp1
0301 63DA D805  30         movb  tmp1,@vdpa
     63DC 8C02     
0302 63DE 06C5  14         swpb  tmp1
0303 63E0 D805  30         movb  tmp1,@vdpa
     63E2 8C02     
0304 63E4 0225  22         ai    tmp1,>0100
     63E6 0100     
0305 63E8 0606  14         dec   tmp2
0306 63EA 16F4  14         jne   vidta1                ; Next register
0307 63EC C814  38         mov   *tmp0,@wcolmn         ; Store # of columns per row
     63EE 833A     
0308 63F0 045B  20         b     *r11
0309               
0310               
0311               ***************************************************************
0312               * PUTVR  - Put single VDP register
0313               ***************************************************************
0314               *  BL   @PUTVR
0315               *  DATA P0
0316               *--------------------------------------------------------------
0317               *  P0 = MSB is the VDP target register
0318               *       LSB is the value to write
0319               *--------------------------------------------------------------
0320               *  BL   @PUTVRX
0321               *
0322               *  TMP0 = MSB is the VDP target register
0323               *         LSB is the value to write
0324               ********|*****|*********************|**************************
0325 63F2 C13B  30 putvr   mov   *r11+,tmp0
0326 63F4 0264  22 putvrx  ori   tmp0,>8000
     63F6 8000     
0327 63F8 06C4  14         swpb  tmp0
0328 63FA D804  30         movb  tmp0,@vdpa
     63FC 8C02     
0329 63FE 06C4  14         swpb  tmp0
0330 6400 D804  30         movb  tmp0,@vdpa
     6402 8C02     
0331 6404 045B  20         b     *r11
0332               
0333               
0334               ***************************************************************
0335               * PUTV01  - Put VDP registers #0 and #1
0336               ***************************************************************
0337               *  BL   @PUTV01
0338               ********|*****|*********************|**************************
0339 6406 C20B  18 putv01  mov   r11,tmp4              ; Save R11
0340 6408 C10E  18         mov   r14,tmp0
0341 640A 0984  32         srl   tmp0,8
0342 640C 06A0  32         bl    @putvrx               ; Write VR#0
     640E 2334     
0343 6410 0204  20         li    tmp0,>0100
     6412 0100     
0344 6414 D820  42         movb  @r14lb,@tmp0lb
     6416 831D     
     6418 8309     
0345 641A 06A0  32         bl    @putvrx               ; Write VR#1
     641C 2334     
0346 641E 0458  20         b     *tmp4                 ; Exit
0347               
0348               
0349               ***************************************************************
0350               * LDFNT - Load TI-99/4A font from GROM into VDP
0351               ***************************************************************
0352               *  BL   @LDFNT
0353               *  DATA P0,P1
0354               *--------------------------------------------------------------
0355               *  P0 = VDP Target address
0356               *  P1 = Font options
0357               *--------------------------------------------------------------
0358               * Uses registers tmp0-tmp4
0359               ********|*****|*********************|**************************
0360 6420 C20B  18 ldfnt   mov   r11,tmp4              ; Save R11
0361 6422 05CB  14         inct  r11                   ; Get 2nd parameter (font options)
0362 6424 C11B  26         mov   *r11,tmp0             ; Get P0
0363 6426 0242  22         andi  config,>7fff          ; CONFIG register bit 0=0
     6428 7FFF     
0364 642A 2120  32         coc   @wbit0,tmp0
     642C 2020     
0365 642E 1604  14         jne   ldfnt1
0366 6430 0262  22         ori   config,>8000          ; CONFIG register bit 0=1
     6432 8000     
0367 6434 0244  22         andi  tmp0,>7fff            ; Parameter value bit 0=0
     6436 7FFF     
0368               *--------------------------------------------------------------
0369               * Read font table address from GROM into tmp1
0370               *--------------------------------------------------------------
0371 6438 C124  34 ldfnt1  mov   @tmp006(tmp0),tmp0    ; Load GROM index address into tmp0
     643A 23E2     
0372 643C D804  38         movb  tmp0,@grmwa           ; Setup GROM source byte 1 for reading
     643E 9C02     
0373 6440 06C4  14         swpb  tmp0
0374 6442 D804  38         movb  tmp0,@grmwa           ; Setup GROM source byte 2 for reading
     6444 9C02     
0375 6446 D160  34         movb  @grmrd,tmp1           ; Read font table address byte 1
     6448 9800     
0376 644A 06C5  14         swpb  tmp1
0377 644C D160  34         movb  @grmrd,tmp1           ; Read font table address byte 2
     644E 9800     
0378 6450 06C5  14         swpb  tmp1
0379               *--------------------------------------------------------------
0380               * Setup GROM source address from tmp1
0381               *--------------------------------------------------------------
0382 6452 D805  38         movb  tmp1,@grmwa
     6454 9C02     
0383 6456 06C5  14         swpb  tmp1
0384 6458 D805  38         movb  tmp1,@grmwa           ; Setup GROM address for reading
     645A 9C02     
0385               *--------------------------------------------------------------
0386               * Setup VDP target address
0387               *--------------------------------------------------------------
0388 645C C118  26         mov   *tmp4,tmp0            ; Get P1 (VDP destination)
0389 645E 06A0  32         bl    @vdwa                 ; Setup VDP destination address
     6460 22B6     
0390 6462 05C8  14         inct  tmp4                  ; R11=R11+2
0391 6464 C158  26         mov   *tmp4,tmp1            ; Get font options into TMP1
0392 6466 0245  22         andi  tmp1,>7fff            ; Parameter value bit 0=0
     6468 7FFF     
0393 646A C1A5  34         mov   @tmp006+2(tmp1),tmp2  ; Get number of patterns to copy
     646C 23E4     
0394 646E C165  34         mov   @tmp006+4(tmp1),tmp1  ; 7 or 8 byte pattern ?
     6470 23E6     
0395               *--------------------------------------------------------------
0396               * Copy from GROM to VRAM
0397               *--------------------------------------------------------------
0398 6472 0B15  18 ldfnt2  src   tmp1,1                ; Carry set ?
0399 6474 1812  14         joc   ldfnt4                ; Yes, go insert a >00
0400 6476 D120  34         movb  @grmrd,tmp0
     6478 9800     
0401               *--------------------------------------------------------------
0402               *   Make font fat
0403               *--------------------------------------------------------------
0404 647A 20A0  32         coc   @wbit0,config         ; Fat flag set ?
     647C 2020     
0405 647E 1603  14         jne   ldfnt3                ; No, so skip
0406 6480 D1C4  18         movb  tmp0,tmp3
0407 6482 0917  18         srl   tmp3,1
0408 6484 E107  18         soc   tmp3,tmp0
0409               *--------------------------------------------------------------
0410               *   Dump byte to VDP and do housekeeping
0411               *--------------------------------------------------------------
0412 6486 D804  30 ldfnt3  movb  tmp0,@vdpw            ; Dump byte to VRAM
     6488 8C00     
0413 648A 0606  14         dec   tmp2
0414 648C 16F2  14         jne   ldfnt2
0415 648E 05C8  14         inct  tmp4                  ; R11=R11+2
0416 6490 020F  20         li    r15,vdpw              ; Set VDP write address
     6492 8C00     
0417 6494 0242  22         andi  config,>7fff          ; CONFIG register bit 0=0
     6496 7FFF     
0418 6498 0458  20         b     *tmp4                 ; Exit
0419 649A D820  46 ldfnt4  movb  @hb$00,@vdpw          ; Insert byte >00 into VRAM
     649C 2000     
     649E 8C00     
0420 64A0 10E8  14         jmp   ldfnt2
0421               *--------------------------------------------------------------
0422               * Fonts pointer table
0423               *--------------------------------------------------------------
0424 64A2 004C     tmp006  data  >004c,64*8,>0000      ; Pointer to TI title screen font
     64A4 0200     
     64A6 0000     
0425 64A8 004E             data  >004e,64*7,>0101      ; Pointer to upper case font
     64AA 01C0     
     64AC 0101     
0426 64AE 004E             data  >004e,96*7,>0101      ; Pointer to upper & lower case font
     64B0 02A0     
     64B2 0101     
0427 64B4 0050             data  >0050,32*7,>0101      ; Pointer to lower case font
     64B6 00E0     
     64B8 0101     
0428               
0429               
0430               
0431               ***************************************************************
0432               * YX2PNT - Get VDP PNT address for current YX cursor position
0433               ***************************************************************
0434               *  BL   @YX2PNT
0435               *--------------------------------------------------------------
0436               *  INPUT
0437               *  @WYX = Cursor YX position
0438               *--------------------------------------------------------------
0439               *  OUTPUT
0440               *  TMP0 = VDP address for entry in Pattern Name Table
0441               *--------------------------------------------------------------
0442               *  Register usage
0443               *  TMP0, R14, R15
0444               ********|*****|*********************|**************************
0445 64BA C10E  18 yx2pnt  mov   r14,tmp0              ; Save VDP#0 & VDP#1
0446 64BC C3A0  30         mov   @wyx,r14              ; Get YX
     64BE 832A     
0447 64C0 098E  32         srl   r14,8                 ; Right justify (remove X)
0448 64C2 3BA0  70         mpy   @wcolmn,r14           ; pos = Y * (columns per row)
     64C4 833A     
0449               *--------------------------------------------------------------
0450               * Do rest of calculation with R15 (16 bit part is there)
0451               * Re-use R14
0452               *--------------------------------------------------------------
0453 64C6 C3A0  30         mov   @wyx,r14              ; Get YX
     64C8 832A     
0454 64CA 024E  22         andi  r14,>00ff             ; Remove Y
     64CC 00FF     
0455 64CE A3CE  18         a     r14,r15               ; pos = pos + X
0456 64D0 A3E0  30         a     @wbase,r15            ; pos = pos + (PNT base address)
     64D2 8328     
0457               *--------------------------------------------------------------
0458               * Clean up before exit
0459               *--------------------------------------------------------------
0460 64D4 C384  18         mov   tmp0,r14              ; Restore VDP#0 & VDP#1
0461 64D6 C10F  18         mov   r15,tmp0              ; Return pos in TMP0
0462 64D8 020F  20         li    r15,vdpw              ; VDP write address
     64DA 8C00     
0463 64DC 045B  20         b     *r11
0464               
0465               
0466               
0467               ***************************************************************
0468               * Put length-byte prefixed string at current YX
0469               ***************************************************************
0470               *  BL   @PUTSTR
0471               *  DATA P0
0472               *
0473               *  P0 = Pointer to string
0474               *--------------------------------------------------------------
0475               *  REMARKS
0476               *  First byte of string must contain length
0477               *--------------------------------------------------------------
0478               *  Register usage
0479               *  tmp1, tmp2, tmp3
0480               ********|*****|*********************|**************************
0481 64DE C17B  30 putstr  mov   *r11+,tmp1
0482 64E0 D1B5  28 xutst0  movb  *tmp1+,tmp2           ; Get length byte
0483 64E2 C1CB  18 xutstr  mov   r11,tmp3
0484 64E4 06A0  32         bl    @yx2pnt               ; Get VDP destination address
     64E6 23FA     
0485 64E8 C2C7  18         mov   tmp3,r11
0486 64EA 0986  32         srl   tmp2,8                ; Right justify length byte
0487               *--------------------------------------------------------------
0488               * Put string
0489               *--------------------------------------------------------------
0490 64EC C186  18         mov   tmp2,tmp2             ; Length = 0 ?
0491 64EE 1305  14         jeq   !                     ; Yes, crash and burn
0492               
0493 64F0 0286  22         ci    tmp2,255              ; Length > 255 ?
     64F2 00FF     
0494 64F4 1502  14         jgt   !                     ; Yes, crash and burn
0495               
0496 64F6 0460  28         b     @xpym2v               ; Display string
     64F8 248C     
0497               *--------------------------------------------------------------
0498               * Crash handler
0499               *--------------------------------------------------------------
0500 64FA C80B  38 !       mov   r11,@>ffce            ; \ Save caller address
     64FC FFCE     
0501 64FE 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     6500 2026     
0502               
0503               
0504               
0505               ***************************************************************
0506               * Put length-byte prefixed string at YX
0507               ***************************************************************
0508               *  BL   @PUTAT
0509               *  DATA P0,P1
0510               *
0511               *  P0 = YX position
0512               *  P1 = Pointer to string
0513               *--------------------------------------------------------------
0514               *  REMARKS
0515               *  First byte of string must contain length
0516               ********|*****|*********************|**************************
0517 6502 C83B  42 putat   mov   *r11+,@wyx            ; Set YX position
     6504 832A     
0518 6506 0460  28         b     @putstr
     6508 241E     
0519               
0520               
0521               ***************************************************************
0522               * putlst
0523               * Loop over string list and display
0524               ***************************************************************
0525               * bl  @putlst
0526               *--------------------------------------------------------------
0527               * INPUT
0528               * @wyx = Cursor position
0529               * tmp1 = Pointer to first length-prefixed string in list
0530               * tmp2 = Number of strings to display
0531               *--------------------------------------------------------------
0532               * OUTPUT
0533               * none
0534               *--------------------------------------------------------------
0535               * Register usage
0536               * tmp0, tmp1, tmp2, tmp3
0537               ********|*****|*********************|**************************
0538               putlst:
0539 650A 0649  14         dect  stack
0540 650C C64B  30         mov   r11,*stack            ; Save return address
0541 650E 0649  14         dect  stack
0542 6510 C644  30         mov   tmp0,*stack           ; Push tmp0
0543                       ;------------------------------------------------------
0544                       ; Dump strings to VDP
0545                       ;------------------------------------------------------
0546               putlst.loop:
0547 6512 D1D5  26         movb  *tmp1,tmp3            ; Get string length byte
0548 6514 0987  32         srl   tmp3,8                ; Right align
0549               
0550 6516 0649  14         dect  stack
0551 6518 C645  30         mov   tmp1,*stack           ; Push tmp1
0552 651A 0649  14         dect  stack
0553 651C C646  30         mov   tmp2,*stack           ; Push tmp2
0554 651E 0649  14         dect  stack
0555 6520 C647  30         mov   tmp3,*stack           ; Push tmp3
0556               
0557 6522 06A0  32         bl    @xutst0               ; Display string
     6524 2420     
0558                                                   ; \ i  tmp1 = Pointer to string
0559                                                   ; / i  @wyx = Cursor position at
0560               
0561 6526 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0562 6528 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0563 652A C179  30         mov   *stack+,tmp1          ; Pop tmp1
0564               
0565 652C 06A0  32         bl    @down                 ; Move cursor down
     652E 26CC     
0566               
0567 6530 A147  18         a     tmp3,tmp1             ; Add string length to pointer
0568 6532 0585  14         inc   tmp1                  ; Consider length byte
0569 6534 2560  32         czc   @w$0001,tmp1          ; Is address even ?
     6536 2002     
0570 6538 1301  14         jeq   !                     ; Yes, skip adjustment
0571 653A 0585  14         inc   tmp1                  ; Make address even
0572 653C 0606  14 !       dec   tmp2
0573 653E 15E9  14         jgt   putlst.loop
0574                       ;------------------------------------------------------
0575                       ; Exit
0576                       ;------------------------------------------------------
0577               putlst.exit:
0578 6540 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0579 6542 C2F9  30         mov   *stack+,r11           ; Pop r11
0580 6544 045B  20         b     *r11                  ; Return
                   < runlib.asm
0096               
0098                       copy  "copy_cpu_vram.asm"        ; CPU to VRAM copy functions
     **** ****     > copy_cpu_vram.asm
0001               * FILE......: copy_cpu_vram.asm
0002               * Purpose...: CPU memory to VRAM copy support module
0003               
0004               ***************************************************************
0005               * CPYM2V - Copy CPU memory to VRAM
0006               ***************************************************************
0007               *  BL   @CPYM2V
0008               *  DATA P0,P1,P2
0009               *--------------------------------------------------------------
0010               *  P0 = VDP start address
0011               *  P1 = RAM/ROM start address
0012               *  P2 = Number of bytes to copy
0013               *--------------------------------------------------------------
0014               *  BL @XPYM2V
0015               *
0016               *  TMP0 = VDP start address
0017               *  TMP1 = RAM/ROM start address
0018               *  TMP2 = Number of bytes to copy
0019               ********|*****|*********************|**************************
0020 6546 C13B  30 cpym2v  mov   *r11+,tmp0            ; VDP Start address
0021 6548 C17B  30         mov   *r11+,tmp1            ; RAM/ROM start address
0022 654A C1BB  30         mov   *r11+,tmp2            ; Bytes to copy
0023               *--------------------------------------------------------------
0024               *    Assert
0025               *--------------------------------------------------------------
0026 654C C186  18 xpym2v  mov   tmp2,tmp2             ; Bytes to copy = 0 ?
0027 654E 1604  14         jne   !                     ; No, continue
0028               
0029 6550 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     6552 FFCE     
0030 6554 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     6556 2026     
0031               *--------------------------------------------------------------
0032               *    Setup VDP write address
0033               *--------------------------------------------------------------
0034 6558 0264  22 !       ori   tmp0,>4000
     655A 4000     
0035 655C 06C4  14         swpb  tmp0
0036 655E D804  30         movb  tmp0,@vdpa
     6560 8C02     
0037 6562 06C4  14         swpb  tmp0
0038 6564 D804  30         movb  tmp0,@vdpa
     6566 8C02     
0039               *--------------------------------------------------------------
0040               *    Copy bytes from CPU memory to VRAM
0041               *--------------------------------------------------------------
0042 6568 020F  20         li    r15,vdpw              ; Set VDP write address
     656A 8C00     
0043 656C C820  46         mov   @tmp008,@mcloop       ; Setup copy command
     656E 24B6     
     6570 8320     
0044 6572 0460  24         b     @mcloop               ; Write data to VDP and return
     6574 8320     
0045               *--------------------------------------------------------------
0046               * Data
0047               *--------------------------------------------------------------
0048 6576 D7F5     tmp008  data  >d7f5                 ; MOVB *TMP1+,*R15
                   < runlib.asm
0100               
0102                       copy  "copy_vram_cpu.asm"        ; VRAM to CPU copy functions
     **** ****     > copy_vram_cpu.asm
0001               * FILE......: copy_vram_cpu.asm
0002               * Purpose...: VRAM to CPU memory copy support module
0003               
0004               ***************************************************************
0005               * CPYV2M - Copy VRAM to CPU memory
0006               ***************************************************************
0007               *  BL   @CPYV2M
0008               *  DATA P0,P1,P2
0009               *--------------------------------------------------------------
0010               *  P0 = VDP source address
0011               *  P1 = RAM target address
0012               *  P2 = Number of bytes to copy
0013               *--------------------------------------------------------------
0014               *  BL @XPYV2M
0015               *
0016               *  TMP0 = VDP source address
0017               *  TMP1 = RAM target address
0018               *  TMP2 = Number of bytes to copy
0019               ********|*****|*********************|**************************
0020 6578 C13B  30 cpyv2m  mov   *r11+,tmp0            ; VDP source address
0021 657A C17B  30         mov   *r11+,tmp1            ; Target address in RAM
0022 657C C1BB  30         mov   *r11+,tmp2            ; Bytes to copy
0023               *--------------------------------------------------------------
0024               *    Setup VDP read address
0025               *--------------------------------------------------------------
0026 657E 06C4  14 xpyv2m  swpb  tmp0
0027 6580 D804  30         movb  tmp0,@vdpa
     6582 8C02     
0028 6584 06C4  14         swpb  tmp0
0029 6586 D804  30         movb  tmp0,@vdpa
     6588 8C02     
0030               *--------------------------------------------------------------
0031               *    Copy bytes from VDP memory to RAM
0032               *--------------------------------------------------------------
0033 658A 020F  20         li    r15,vdpr              ; Set VDP read address
     658C 8800     
0034 658E C820  46         mov   @tmp007,@mcloop       ; Setup copy command
     6590 24D8     
     6592 8320     
0035 6594 0460  24         b     @mcloop               ; Read data from VDP
     6596 8320     
0036 6598 DD5F     tmp007  data  >dd5f                 ; MOVB *R15,*TMP+
                   < runlib.asm
0104               
0106                       copy  "copy_cpu_cpu.asm"         ; CPU to CPU copy functions
     **** ****     > copy_cpu_cpu.asm
0001               * FILE......: copy_cpu_cpu.asm
0002               * Purpose...: CPU to CPU memory copy support module
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                       CPU COPY FUNCTIONS
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * CPYM2M - Copy CPU memory to CPU memory
0010               ***************************************************************
0011               *  BL   @CPYM2M
0012               *  DATA P0,P1,P2
0013               *--------------------------------------------------------------
0014               *  P0 = Memory source address
0015               *  P1 = Memory target address
0016               *  P2 = Number of bytes to copy
0017               *--------------------------------------------------------------
0018               *  BL @XPYM2M
0019               *
0020               *  TMP0 = Memory source address
0021               *  TMP1 = Memory target address
0022               *  TMP2 = Number of bytes to copy
0023               ********|*****|*********************|**************************
0024 659A C13B  30 cpym2m  mov   *r11+,tmp0            ; Memory source address
0025 659C C17B  30         mov   *r11+,tmp1            ; Memory target address
0026 659E C1BB  30         mov   *r11+,tmp2            ; Number of bytes to copy
0027               *--------------------------------------------------------------
0028               * Do some checks first
0029               *--------------------------------------------------------------
0030 65A0 C186  18 xpym2m  mov   tmp2,tmp2             ; Bytes to copy = 0 ?
0031 65A2 1604  14         jne   cpychk                ; No, continue checking
0032               
0033 65A4 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     65A6 FFCE     
0034 65A8 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     65AA 2026     
0035               *--------------------------------------------------------------
0036               *    Check: 1 byte copy
0037               *--------------------------------------------------------------
0038 65AC 0286  22 cpychk  ci    tmp2,1                ; Bytes to copy = 1 ?
     65AE 0001     
0039 65B0 1603  14         jne   cpym0                 ; No, continue checking
0040 65B2 DD74  42         movb  *tmp0+,*tmp1+         ; Copy byte
0041 65B4 04C6  14         clr   tmp2                  ; Reset counter
0042 65B6 045B  20         b     *r11                  ; Return to caller
0043               *--------------------------------------------------------------
0044               *    Check: Uneven address handling
0045               *--------------------------------------------------------------
0046 65B8 0242  22 cpym0   andi  config,>7fff          ; Clear CONFIG bit 0
     65BA 7FFF     
0047 65BC C1C4  18         mov   tmp0,tmp3
0048 65BE 0247  22         andi  tmp3,1
     65C0 0001     
0049 65C2 1618  14         jne   cpyodd                ; Odd source address handling
0050 65C4 C1C5  18 cpym1   mov   tmp1,tmp3
0051 65C6 0247  22         andi  tmp3,1
     65C8 0001     
0052 65CA 1614  14         jne   cpyodd                ; Odd target address handling
0053               *--------------------------------------------------------------
0054               * 8 bit copy
0055               *--------------------------------------------------------------
0056 65CC 20A0  32 cpym2   coc   @wbit0,config         ; CONFIG bit 0 set ?
     65CE 2020     
0057 65D0 1605  14         jne   cpym3
0058 65D2 C820  46         mov   @tmp011,@mcloop       ; Setup byte copy command
     65D4 253A     
     65D6 8320     
0059 65D8 0460  24         b     @mcloop               ; Copy memory and exit
     65DA 8320     
0060               *--------------------------------------------------------------
0061               * 16 bit copy
0062               *--------------------------------------------------------------
0063 65DC C1C6  18 cpym3   mov   tmp2,tmp3
0064 65DE 0247  22         andi  tmp3,1                ; TMP3=1 -> ODD else EVEN
     65E0 0001     
0065 65E2 1301  14         jeq   cpym4
0066 65E4 0606  14         dec   tmp2                  ; Make TMP2 even
0067 65E6 CD74  46 cpym4   mov   *tmp0+,*tmp1+
0068 65E8 0646  14         dect  tmp2
0069 65EA 16FD  14         jne   cpym4
0070               *--------------------------------------------------------------
0071               * Copy last byte if ODD
0072               *--------------------------------------------------------------
0073 65EC C1C7  18         mov   tmp3,tmp3
0074 65EE 1301  14         jeq   cpymz
0075 65F0 D554  38         movb  *tmp0,*tmp1
0076 65F2 045B  20 cpymz   b     *r11                  ; Return to caller
0077               *--------------------------------------------------------------
0078               * Handle odd source/target address
0079               *--------------------------------------------------------------
0080 65F4 0262  22 cpyodd  ori   config,>8000          ; Set CONFIG bit 0
     65F6 8000     
0081 65F8 10E9  14         jmp   cpym2
0082 65FA DD74     tmp011  data  >dd74                 ; MOVB *TMP0+,*TMP1+
                   < runlib.asm
0108               
0112               
0116               
0118                       copy  "cpu_sams.asm"             ; Support for SAMS memory card
     **** ****     > cpu_sams.asm
0001               * FILE......: cpu_sams.asm
0002               * Purpose...: Low level support for SAMS memory expansion card
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                SAMS Memory Expansion support
0006               *//////////////////////////////////////////////////////////////
0007               
0008               *--------------------------------------------------------------
0009               * ACCESS and MAPPING
0010               * (by the late Bruce Harisson):
0011               *
0012               * To use other than the default setup, you have to do two
0013               * things:
0014               *
0015               * 1. You have to "turn on" the card's memory in the
0016               *    >4000 block and write to the mapping registers there.
0017               *    (bl  @sams.page.set)
0018               *
0019               * 2. You have to "turn on" the mapper function to make what
0020               *    you've written into the >4000 block take effect.
0021               *    (bl  @sams.mapping.on)
0022               *--------------------------------------------------------------
0023               *  SAMS                          Default SAMS page
0024               *  Register     Memory bank      (system startup)
0025               *  =======      ===========      ================
0026               *  >4004        >2000-2fff          >002
0027               *  >4006        >3000-4fff          >003
0028               *  >4014        >a000-afff          >00a
0029               *  >4016        >b000-bfff          >00b
0030               *  >4018        >c000-cfff          >00c
0031               *  >401a        >d000-dfff          >00d
0032               *  >401c        >e000-efff          >00e
0033               *  >401e        >f000-ffff          >00f
0034               *  Others       Inactive
0035               *--------------------------------------------------------------
0036               
0037               
0038               
0039               
0040               ***************************************************************
0041               * sams.page.get - Get SAMS page number for memory address
0042               ***************************************************************
0043               * bl   @sams.page.get
0044               *      data P0
0045               *--------------------------------------------------------------
0046               * P0 = Memory address (e.g. address >a100 will map to SAMS
0047               *      register >4014 (bank >a000 - >afff)
0048               *--------------------------------------------------------------
0049               * bl   @xsams.page.get
0050               *
0051               * tmp0 = Memory address (e.g. address >a100 will map to SAMS
0052               *        register >4014 (bank >a000 - >afff)
0053               *--------------------------------------------------------------
0054               * OUTPUT
0055               * waux1 = SAMS page number
0056               * waux2 = Address of affected SAMS register
0057               *--------------------------------------------------------------
0058               * Register usage
0059               * r0, tmp0, r12
0060               ********|*****|*********************|**************************
0061               sams.page.get:
0062 65FC C13B  30         mov   *r11+,tmp0            ; Memory address
0063               xsams.page.get:
0064 65FE 0649  14         dect  stack
0065 6600 C64B  30         mov   r11,*stack            ; Push return address
0066 6602 0649  14         dect  stack
0067 6604 C640  30         mov   r0,*stack             ; Push r0
0068 6606 0649  14         dect  stack
0069 6608 C64C  30         mov   r12,*stack            ; Push r12
0070               *--------------------------------------------------------------
0071               * Determine memory bank
0072               *--------------------------------------------------------------
0073 660A 09C4  40         srl   tmp0,12               ; Reduce address to 4K chunks
0074 660C 0A14  18         sla   tmp0,1                ; Registers are 2 bytes appart
0075               
0076 660E 0224  22         ai    tmp0,>4000            ; Add base address of "DSR" space
     6610 4000     
0077 6612 C804  30         mov   tmp0,@waux2           ; Save address of SAMS register
     6614 833E     
0078               *--------------------------------------------------------------
0079               * Get SAMS page number
0080               *--------------------------------------------------------------
0081 6616 020C  20         li    r12,>1e00             ; SAMS CRU address
     6618 1E00     
0082 661A 04C0  14         clr   r0
0083 661C 1D00  16         sbo   0                     ; Enable access to SAMS registers
0084 661E D014  26         movb  *tmp0,r0              ; Get SAMS page number
0085 6620 D100  18         movb  r0,tmp0
0086 6622 0984  32         srl   tmp0,8                ; Right align
0087 6624 C804  30         mov   tmp0,@waux1           ; Save SAMS page number
     6626 833C     
0088 6628 1E00  16         sbz   0                     ; Disable access to SAMS registers
0089               *--------------------------------------------------------------
0090               * Exit
0091               *--------------------------------------------------------------
0092               sams.page.get.exit:
0093 662A C339  30         mov   *stack+,r12           ; Pop r12
0094 662C C039  30         mov   *stack+,r0            ; Pop r0
0095 662E C2F9  30         mov   *stack+,r11           ; Pop return address
0096 6630 045B  20         b     *r11                  ; Return to caller
0097               
0098               
0099               
0100               
0101               ***************************************************************
0102               * sams.page.set - Set SAMS memory page
0103               ***************************************************************
0104               * bl   sams.page.set
0105               *      data P0,P1
0106               *--------------------------------------------------------------
0107               * P0 = SAMS page number
0108               * P1 = Memory address (e.g. address >a100 will map to SAMS
0109               *      register >4014 (bank >a000 - >afff)
0110               *--------------------------------------------------------------
0111               * bl   @xsams.page.set
0112               *
0113               * tmp0 = SAMS page number
0114               * tmp1 = Memory address (e.g. address >a100 will map to SAMS
0115               *        register >4014 (bank >a000 - >afff)
0116               *--------------------------------------------------------------
0117               * Register usage
0118               * r0, tmp0, tmp1, r12
0119               *--------------------------------------------------------------
0120               * SAMS page number should be in range 0-255 (>00 to >ff)
0121               *
0122               *  Page         Memory
0123               *  ====         ======
0124               *  >00             32K
0125               *  >1f            128K
0126               *  >3f            256K
0127               *  >7f            512K
0128               *  >ff           1024K
0129               ********|*****|*********************|**************************
0130               sams.page.set:
0131 6632 C13B  30         mov   *r11+,tmp0            ; Get SAMS page
0132 6634 C17B  30         mov   *r11+,tmp1            ; Get memory address
0133               xsams.page.set:
0134 6636 0649  14         dect  stack
0135 6638 C64B  30         mov   r11,*stack            ; Push return address
0136 663A 0649  14         dect  stack
0137 663C C640  30         mov   r0,*stack             ; Push r0
0138 663E 0649  14         dect  stack
0139 6640 C64C  30         mov   r12,*stack            ; Push r12
0140 6642 0649  14         dect  stack
0141 6644 C644  30         mov   tmp0,*stack           ; Push tmp0
0142 6646 0649  14         dect  stack
0143 6648 C645  30         mov   tmp1,*stack           ; Push tmp1
0144               *--------------------------------------------------------------
0145               * Determine memory bank
0146               *--------------------------------------------------------------
0147 664A 09C5  40         srl   tmp1,12               ; Reduce address to 4K chunks
0148 664C 0A15  18         sla   tmp1,1                ; Registers are 2 bytes appart
0149               *--------------------------------------------------------------
0150               * Assert on SAMS page number
0151               *--------------------------------------------------------------
0152 664E 0284  22         ci    tmp0,255              ; Crash if page > 255
     6650 00FF     
0153 6652 150D  14         jgt   !
0154               *--------------------------------------------------------------
0155               * Assert on SAMS register
0156               *--------------------------------------------------------------
0157 6654 0285  22         ci    tmp1,>1e              ; r@401e   >f000 - >ffff
     6656 001E     
0158 6658 150A  14         jgt   !
0159 665A 0285  22         ci    tmp1,>04              ; r@4004   >2000 - >2fff
     665C 0004     
0160 665E 1107  14         jlt   !
0161 6660 0285  22         ci    tmp1,>12              ; r@4014   >a000 - >ffff
     6662 0012     
0162 6664 1508  14         jgt   sams.page.set.switch_page
0163 6666 0285  22         ci    tmp1,>06              ; r@4006   >3000 - >3fff
     6668 0006     
0164 666A 1501  14         jgt   !
0165 666C 1004  14         jmp   sams.page.set.switch_page
0166                       ;------------------------------------------------------
0167                       ; Crash the system
0168                       ;------------------------------------------------------
0169 666E C80B  38 !       mov   r11,@>ffce            ; \ Save caller address
     6670 FFCE     
0170 6672 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     6674 2026     
0171               *--------------------------------------------------------------
0172               * Switch memory bank to specified SAMS page
0173               *--------------------------------------------------------------
0174               sams.page.set.switch_page
0175 6676 020C  20         li    r12,>1e00             ; SAMS CRU address
     6678 1E00     
0176 667A C004  18         mov   tmp0,r0               ; Must be in r0 for CRU use
0177 667C 06C0  14         swpb  r0                    ; LSB to MSB
0178 667E 1D00  16         sbo   0                     ; Enable access to SAMS registers
0179 6680 D940  38         movb  r0,@>4000(tmp1)       ; Set SAMS bank number
     6682 4000     
0180 6684 1E00  16         sbz   0                     ; Disable access to SAMS registers
0181               *--------------------------------------------------------------
0182               * Exit
0183               *--------------------------------------------------------------
0184               sams.page.set.exit:
0185 6686 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0186 6688 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0187 668A C339  30         mov   *stack+,r12           ; Pop r12
0188 668C C039  30         mov   *stack+,r0            ; Pop r0
0189 668E C2F9  30         mov   *stack+,r11           ; Pop return address
0190 6690 045B  20         b     *r11                  ; Return to caller
0191               
0192               
0193               
0194               
0195               ***************************************************************
0196               * sams.mapping.on - Enable SAMS mapping mode
0197               ***************************************************************
0198               *  bl   @sams.mapping.on
0199               *--------------------------------------------------------------
0200               *  Register usage
0201               *  r12
0202               ********|*****|*********************|**************************
0203               sams.mapping.on:
0204 6692 0649  14         dect  stack
0205 6694 C64C  30         mov   r12,*stack            ; Push r12
0206 6696 020C  20         li    r12,>1e00             ; SAMS CRU address
     6698 1E00     
0207 669A 1D01  16         sbo   1                     ; Enable SAMS mapper
0208               *--------------------------------------------------------------
0209               * Exit
0210               *--------------------------------------------------------------
0211               sams.mapping.on.exit:
0212 669C C339  30         mov   *stack+,r12           ; Pop r12
0213 669E 045B  20         b     *r11                  ; Return to caller
0214               
0215               
0216               
0217               
0218               ***************************************************************
0219               * sams.mapping.off - Disable SAMS mapping mode
0220               ***************************************************************
0221               * bl  @sams.mapping.off
0222               *--------------------------------------------------------------
0223               * OUTPUT
0224               * none
0225               *--------------------------------------------------------------
0226               * Register usage
0227               * r12
0228               ********|*****|*********************|**************************
0229               sams.mapping.off:
0230 66A0 0649  14         dect  stack
0231 66A2 C64C  30         mov   r12,*stack            ; Push r12
0232 66A4 020C  20         li    r12,>1e00             ; SAMS CRU address
     66A6 1E00     
0233 66A8 1E01  16         sbz   1                     ; Disable SAMS mapper
0234               *--------------------------------------------------------------
0235               * Exit
0236               *--------------------------------------------------------------
0237               sams.mapping.off.exit:
0238 66AA C339  30         mov   *stack+,r12           ; Pop r12
0239 66AC 045B  20         b     *r11                  ; Return to caller
0240               
0241               
0242               
0243               
0244               
0245               ***************************************************************
0246               * sams.layout
0247               * Setup SAMS memory banks
0248               ***************************************************************
0249               * bl  @sams.layout
0250               *     data P0
0251               *--------------------------------------------------------------
0252               * INPUT
0253               * P0 = Pointer to SAMS page layout table
0254               *--------------------------------------------------------------
0255               * bl  @xsams.layout
0256               *
0257               * tmp0 = Pointer to SAMS page layout table
0258               *--------------------------------------------------------------
0259               * OUTPUT
0260               * none
0261               *--------------------------------------------------------------
0262               * Register usage
0263               * tmp0, r12
0264               ********|*****|*********************|**************************
0265               
0266               
0267               sams.layout:
0268 66AE C13B  30         mov   *r11+,tmp0            ; Get P0
0269               xsams.layout:
0270 66B0 0649  14         dect  stack
0271 66B2 C64B  30         mov   r11,*stack            ; Save return address
0272 66B4 0649  14         dect  stack
0273 66B6 C644  30         mov   tmp0,*stack           ; Save tmp0
0274 66B8 0649  14         dect  stack
0275 66BA C64C  30         mov   r12,*stack            ; Save r12
0276                       ;------------------------------------------------------
0277                       ; Set SAMS registers
0278                       ;------------------------------------------------------
0279 66BC 020C  20         li    r12,>1e00             ; SAMS CRU address
     66BE 1E00     
0280 66C0 1D00  16         sbo   0                     ; Enable access to SAMS registers
0281               
0282 66C2 C834  50         mov  *tmp0+,@>4004          ; Set page for >2000 - >2fff
     66C4 4004     
0283 66C6 C834  50         mov  *tmp0+,@>4006          ; Set page for >3000 - >3fff
     66C8 4006     
0284 66CA C834  50         mov  *tmp0+,@>4014          ; Set page for >a000 - >afff
     66CC 4014     
0285 66CE C834  50         mov  *tmp0+,@>4016          ; Set page for >b000 - >bfff
     66D0 4016     
0286 66D2 C834  50         mov  *tmp0+,@>4018          ; Set page for >c000 - >cfff
     66D4 4018     
0287 66D6 C834  50         mov  *tmp0+,@>401a          ; Set page for >d000 - >dfff
     66D8 401A     
0288 66DA C834  50         mov  *tmp0+,@>401c          ; Set page for >e000 - >efff
     66DC 401C     
0289 66DE C834  50         mov  *tmp0+,@>401e          ; Set page for >f000 - >ffff
     66E0 401E     
0290               
0291 66E2 1E00  16         sbz   0                     ; Disable access to SAMS registers
0292 66E4 1D01  16         sbo   1                     ; Enable SAMS mapper
0293                       ;------------------------------------------------------
0294                       ; Exit
0295                       ;------------------------------------------------------
0296               sams.layout.exit:
0297 66E6 C339  30         mov   *stack+,r12           ; Pop r12
0298 66E8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0299 66EA C2F9  30         mov   *stack+,r11           ; Pop r11
0300 66EC 045B  20         b     *r11                  ; Return to caller
0301               ***************************************************************
0302               * SAMS standard page layout table
0303               *--------------------------------------------------------------
0304               sams.layout.standard:
0305 66EE 0200             data  >0200                 ; >2000-2fff, SAMS page >02
0306 66F0 0300             data  >0300                 ; >3000-3fff, SAMS page >03
0307 66F2 0A00             data  >0a00                 ; >a000-afff, SAMS page >0a
0308 66F4 0B00             data  >0b00                 ; >b000-bfff, SAMS page >0b
0309 66F6 0C00             data  >0c00                 ; >c000-cfff, SAMS page >0c
0310 66F8 0D00             data  >0d00                 ; >d000-dfff, SAMS page >0d
0311 66FA 0E00             data  >0e00                 ; >e000-efff, SAMS page >0e
0312 66FC 0F00             data  >0f00                 ; >f000-ffff, SAMS page >0f
0313               
0314               
0315               ***************************************************************
0316               * sams.layout.copy
0317               * Copy SAMS memory layout
0318               ***************************************************************
0319               * bl  @sams.layout.copy
0320               *     data P0
0321               *--------------------------------------------------------------
0322               * P0 = Pointer to 8 words RAM buffer for results
0323               *--------------------------------------------------------------
0324               * OUTPUT
0325               * RAM buffer will have the SAMS page number for each range
0326               * 2000-2fff, 3000-3fff, a000-afff, b000-bfff, ...
0327               *--------------------------------------------------------------
0328               * Register usage
0329               * tmp0, tmp1, tmp2, tmp3
0330               ***************************************************************
0331               sams.layout.copy:
0332 66FE C1FB  30         mov   *r11+,tmp3            ; Get P0
0333               
0334 6700 0649  14         dect  stack
0335 6702 C64B  30         mov   r11,*stack            ; Push return address
0336 6704 0649  14         dect  stack
0337 6706 C644  30         mov   tmp0,*stack           ; Push tmp0
0338 6708 0649  14         dect  stack
0339 670A C645  30         mov   tmp1,*stack           ; Push tmp1
0340 670C 0649  14         dect  stack
0341 670E C646  30         mov   tmp2,*stack           ; Push tmp2
0342 6710 0649  14         dect  stack
0343 6712 C647  30         mov   tmp3,*stack           ; Push tmp3
0344                       ;------------------------------------------------------
0345                       ; Copy SAMS layout
0346                       ;------------------------------------------------------
0347 6714 0205  20         li    tmp1,sams.layout.copy.data
     6716 2676     
0348 6718 0206  20         li    tmp2,8                ; Set loop counter
     671A 0008     
0349                       ;------------------------------------------------------
0350                       ; Set SAMS memory pages
0351                       ;------------------------------------------------------
0352               sams.layout.copy.loop:
0353 671C C135  30         mov   *tmp1+,tmp0           ; Get memory address
0354 671E 06A0  32         bl    @xsams.page.get       ; \ Get SAMS page
     6720 253E     
0355                                                   ; | i  tmp0   = Memory address
0356                                                   ; / o  @waux1 = SAMS page
0357               
0358 6722 CDE0  46         mov   @waux1,*tmp3+         ; Copy SAMS page number
     6724 833C     
0359               
0360 6726 0606  14         dec   tmp2                  ; Next iteration
0361 6728 16F9  14         jne   sams.layout.copy.loop ; Loop until done
0362                       ;------------------------------------------------------
0363                       ; Exit
0364                       ;------------------------------------------------------
0365               sams.layout.copy.exit:
0366 672A C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0367 672C C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0368 672E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0369 6730 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0370 6732 C2F9  30         mov   *stack+,r11           ; Pop r11
0371 6734 045B  20         b     *r11                  ; Return to caller
0372               ***************************************************************
0373               * SAMS memory range table
0374               *--------------------------------------------------------------
0375               sams.layout.copy.data:
0376 6736 2000             data  >2000                 ; >2000-2fff
0377 6738 3000             data  >3000                 ; >3000-3fff
0378 673A A000             data  >a000                 ; >a000-afff
0379 673C B000             data  >b000                 ; >b000-bfff
0380 673E C000             data  >c000                 ; >c000-cfff
0381 6740 D000             data  >d000                 ; >d000-dfff
0382 6742 E000             data  >e000                 ; >e000-efff
0383 6744 F000             data  >f000                 ; >f000-ffff
                   < runlib.asm
0120               
0124               
0126                       copy  "vdp_intscr.asm"           ; VDP interrupt & screen on/off
     **** ****     > vdp_intscr.asm
0001               * FILE......: vdp_intscr.asm
0002               * Purpose...: VDP interrupt & screen on/off
0003               
0004               ***************************************************************
0005               * SCROFF - Disable screen display
0006               ***************************************************************
0007               *  BL @SCROFF
0008               ********|*****|*********************|**************************
0009 6746 024E  22 scroff  andi  r14,>ffbf             ; VDP#R1 bit 1=0 (Disable screen display)
     6748 FFBF     
0010 674A 0460  28         b     @putv01
     674C 2346     
0011               
0012               ***************************************************************
0013               * SCRON - Disable screen display
0014               ***************************************************************
0015               *  BL @SCRON
0016               ********|*****|*********************|**************************
0017 674E 026E  22 scron   ori   r14,>0040             ; VDP#R1 bit 1=1 (Enable screen display)
     6750 0040     
0018 6752 0460  28         b     @putv01
     6754 2346     
0019               
0020               ***************************************************************
0021               * INTOFF - Disable VDP interrupt
0022               ***************************************************************
0023               *  BL @INTOFF
0024               ********|*****|*********************|**************************
0025 6756 024E  22 intoff  andi  r14,>ffdf             ; VDP#R1 bit 2=0 (Disable VDP interrupt)
     6758 FFDF     
0026 675A 0460  28         b     @putv01
     675C 2346     
0027               
0028               ***************************************************************
0029               * INTON - Enable VDP interrupt
0030               ***************************************************************
0031               *  BL @INTON
0032               ********|*****|*********************|**************************
0033 675E 026E  22 inton   ori   r14,>0020             ; VDP#R1 bit 2=1 (Enable VDP interrupt)
     6760 0020     
0034 6762 0460  28         b     @putv01
     6764 2346     
                   < runlib.asm
0128               
0130                       copy  "vdp_sprites.asm"          ; VDP sprites
     **** ****     > vdp_sprites.asm
0001               ***************************************************************
0002               * FILE......: vdp_sprites.asm
0003               * Purpose...: Sprites support
0004               
0005               ***************************************************************
0006               * SMAG1X - Set sprite magnification 1x
0007               ***************************************************************
0008               *  BL @SMAG1X
0009               ********|*****|*********************|**************************
0010 6766 024E  22 smag1x  andi  r14,>fffe             ; VDP#R1 bit 7=0 (Sprite magnification 1x)
     6768 FFFE     
0011 676A 0460  28         b     @putv01
     676C 2346     
0012               
0013               ***************************************************************
0014               * SMAG2X - Set sprite magnification 2x
0015               ***************************************************************
0016               *  BL @SMAG2X
0017               ********|*****|*********************|**************************
0018 676E 026E  22 smag2x  ori   r14,>0001             ; VDP#R1 bit 7=1 (Sprite magnification 2x)
     6770 0001     
0019 6772 0460  28         b     @putv01
     6774 2346     
0020               
0021               ***************************************************************
0022               * S8X8 - Set sprite size 8x8 bits
0023               ***************************************************************
0024               *  BL @S8X8
0025               ********|*****|*********************|**************************
0026 6776 024E  22 s8x8    andi  r14,>fffd             ; VDP#R1 bit 6=0 (Sprite size 8x8)
     6778 FFFD     
0027 677A 0460  28         b     @putv01
     677C 2346     
0028               
0029               ***************************************************************
0030               * S16X16 - Set sprite size 16x16 bits
0031               ***************************************************************
0032               *  BL @S16X16
0033               ********|*****|*********************|**************************
0034 677E 026E  22 s16x16  ori   r14,>0002             ; VDP#R1 bit 6=1 (Sprite size 16x16)
     6780 0002     
0035 6782 0460  28         b     @putv01
     6784 2346     
                   < runlib.asm
0132               
0134                       copy  "vdp_cursor.asm"           ; VDP cursor handling
     **** ****     > vdp_cursor.asm
0001               * FILE......: vdp_cursor.asm
0002               * Purpose...: VDP cursor handling
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *               VDP cursor movement functions
0006               *//////////////////////////////////////////////////////////////
0007               
0008               
0009               ***************************************************************
0010               * AT - Set cursor YX position
0011               ***************************************************************
0012               *  bl   @yx
0013               *  data p0
0014               *--------------------------------------------------------------
0015               *  INPUT
0016               *  P0 = New Cursor YX position
0017               ********|*****|*********************|**************************
0018 6786 C83B  42 at      mov   *r11+,@wyx
     6788 832A     
0019 678A 045B  20         b     *r11
0020               
0021               
0022               ***************************************************************
0023               * down - Increase cursor Y position
0024               ***************************************************************
0025               *  bl   @down
0026               ********|*****|*********************|**************************
0027 678C B820  46 down    ab    @hb$01,@wyx
     678E 2012     
     6790 832A     
0028 6792 045B  20         b     *r11
0029               
0030               
0031               ***************************************************************
0032               * up - Decrease cursor Y position
0033               ***************************************************************
0034               *  bl   @up
0035               ********|*****|*********************|**************************
0036 6794 7820  46 up      sb    @hb$01,@wyx
     6796 2012     
     6798 832A     
0037 679A 045B  20         b     *r11
0038               
0039               
0040               ***************************************************************
0041               * setx - Set cursor X position
0042               ***************************************************************
0043               *  bl   @setx
0044               *  data p0
0045               *--------------------------------------------------------------
0046               *  Register usage
0047               *  TMP0
0048               ********|*****|*********************|**************************
0049 679C C13B  30 setx    mov   *r11+,tmp0            ; Set cursor X position
0050 679E D120  30 xsetx   movb  @wyx,tmp0             ; Overwrite Y position
     67A0 832A     
0051 67A2 C804  30         mov   tmp0,@wyx             ; Save as new YX position
     67A4 832A     
0052 67A6 045B  20         b     *r11
                   < runlib.asm
0136               
0138                       copy  "vdp_yx2px_calc.asm"       ; VDP calculate pixel pos for YX coord
     **** ****     > vdp_yx2px_calc.asm
0001               * FILE......: vdp_yx2px_calc.asm
0002               * Purpose...: Calculate pixel position for YX coordinate
0003               
0004               ***************************************************************
0005               * YX2PX - Get pixel position for cursor YX position
0006               ***************************************************************
0007               *  BL   @YX2PX
0008               *
0009               *  (CONFIG:0 = 1) = Skip sprite adjustment
0010               *--------------------------------------------------------------
0011               *  INPUT
0012               *  @WYX   = Cursor YX position
0013               *--------------------------------------------------------------
0014               *  OUTPUT
0015               *  TMP0HB = Y pixel position
0016               *  TMP0LB = X pixel position
0017               *--------------------------------------------------------------
0018               *  Remarks
0019               *  This subroutine does not support multicolor mode
0020               ********|*****|*********************|**************************
0021 67A8 C120  30 yx2px   mov   @wyx,tmp0
     67AA 832A     
0022 67AC C18B  18 yx2pxx  mov   r11,tmp2              ; Save return address
0023 67AE 06C4  14         swpb  tmp0                  ; Y<->X
0024 67B0 04C5  14         clr   tmp1                  ; Clear before copy
0025 67B2 D144  18         movb  tmp0,tmp1             ; Copy X to TMP1
0026               *--------------------------------------------------------------
0027               * X pixel - Special F18a 80 colums treatment
0028               *--------------------------------------------------------------
0029 67B4 20A0  32         coc   @wbit1,config         ; f18a present ?
     67B6 201E     
0030 67B8 1609  14         jne   yx2pxx_normal         ; No, skip 80 cols handling
0031 67BA 8820  46         c     @wcolmn,@yx2pxx_c80   ; 80 columns mode enabled ?
     67BC 833A     
     67BE 2728     
0032 67C0 1605  14         jne   yx2pxx_normal         ; No, skip 80 cols handling
0033               
0034 67C2 0A15  18         sla   tmp1,1                ; X = X * 2
0035 67C4 B144  18         ab    tmp0,tmp1             ; X = X + (original X)
0036 67C6 0225  22         ai    tmp1,>0500            ; X = X + 5 (F18a mystery offset)
     67C8 0500     
0037 67CA 1002  14         jmp   yx2pxx_y_calc
0038               *--------------------------------------------------------------
0039               * X pixel - Normal VDP treatment
0040               *--------------------------------------------------------------
0041               yx2pxx_normal:
0042 67CC D144  18         movb  tmp0,tmp1             ; Copy X to TMP1
0043               *--------------------------------------------------------------
0044 67CE 0A35  22         sla   tmp1,3                ; X=X*8
0045               *--------------------------------------------------------------
0046               * Calculate Y pixel position
0047               *--------------------------------------------------------------
0048               yx2pxx_y_calc:
0049 67D0 0A34  22         sla   tmp0,3                ; Y=Y*8
0050 67D2 D105  18         movb  tmp1,tmp0
0051 67D4 06C4  14         swpb  tmp0                  ; X<->Y
0052 67D6 20A0  32 yx2pi1  coc   @wbit0,config         ; Skip sprite adjustment ?
     67D8 2020     
0053 67DA 1305  14         jeq   yx2pi3                ; Yes, exit
0054               *--------------------------------------------------------------
0055               * Adjust for Y sprite location
0056               * See VDP Programmers Guide, Section 9.2.1
0057               *--------------------------------------------------------------
0058 67DC 7120  34 yx2pi2  sb    @hb$01,tmp0           ; Adjust Y. Top of screen is at >FF
     67DE 2012     
0059 67E0 9120  34         cb    @hb$d0,tmp0           ; Y position = >D0 ?
     67E2 2024     
0060 67E4 13FB  14         jeq   yx2pi2                ; Yes, but that's not allowed, adjust
0061 67E6 0456  20 yx2pi3  b     *tmp2                 ; Exit
0062               *--------------------------------------------------------------
0063               * Local constants
0064               *--------------------------------------------------------------
0065               yx2pxx_c80:
0066 67E8 0050            data   80
0067               
0068               
                   < runlib.asm
0140               
0144               
0148               
0150                       copy  "vdp_f18a.asm"             ; VDP F18a low-level functions
     **** ****     > vdp_f18a.asm
0001               * FILE......: vdp_f18a.asm
0002               * Purpose...: VDP F18A Support module
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                 VDP F18A LOW-LEVEL FUNCTIONS
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * f18unl - Unlock F18A VDP
0010               ***************************************************************
0011               *  bl   @f18unl
0012               ********|*****|*********************|**************************
0013 67EA C20B  18 f18unl  mov   r11,tmp4              ; Save R11
0014 67EC 06A0  32         bl    @putvr                ; Write once
     67EE 2332     
0015 67F0 391C             data  >391c                 ; VR1/57, value 00011100
0016 67F2 06A0  32         bl    @putvr                ; Write twice
     67F4 2332     
0017 67F6 391C             data  >391c                 ; VR1/57, value 00011100
0018 67F8 06A0  32         bl    @putvr
     67FA 2332     
0019 67FC 01E0             data  >01e0                 ; VR1, value 11100000, a sane setting
0020 67FE 0458  20         b     *tmp4                 ; Exit
0021               
0022               
0023               ***************************************************************
0024               * f18lck - Lock F18A VDP
0025               ***************************************************************
0026               *  bl   @f18lck
0027               ********|*****|*********************|**************************
0028 6800 C20B  18 f18lck  mov   r11,tmp4              ; Save R11
0029 6802 06A0  32         bl    @putvr                ; VR1/57, value 00000000
     6804 2332     
0030 6806 3900             data  >3900
0031 6808 0458  20         b     *tmp4                 ; Exit
0032               
0033               
0034               ***************************************************************
0035               * f18idl - Put GPU in F18A VDP in idle mode (stop GPU program)
0036               ***************************************************************
0037               *  bl   @f18idl
0038               *--------------------------------------------------------------
0039               *  REMARKS
0040               *  Expects that the f18a is unlocked when calling this function.
0041               ********|*****|*********************|**************************
0042 680A C20B  18 f18idl  mov   r11,tmp4              ; Save R11
0043 680C 06A0  32         bl    @putvr                ; VR56 >38, value 00000000
     680E 2332     
0044 6810 3800             data  >3800                 ; Reset and load PC (GPU idle!)
0045 6812 0458  20         b     *tmp4                 ; Exit
0046               
0047               
0048               
0049               ***************************************************************
0050               * f18chk - Check if F18A VDP present
0051               ***************************************************************
0052               *  bl   @f18chk
0053               *--------------------------------------------------------------
0054               *  REMARKS
0055               *  Expects that the f18a is unlocked when calling this function.
0056               *  Runs GPU code at VDP >3f00
0057               ********|*****|*********************|**************************
0058 6814 C20B  18 f18chk  mov   r11,tmp4              ; Save R11
0059 6816 06A0  32         bl    @cpym2v
     6818 2486     
0060 681A 3F00             data  >3f00,f18chk_gpu,8    ; Copy F18A GPU code to VRAM
     681C 279E     
     681E 0008     
0061 6820 06A0  32         bl    @putvr
     6822 2332     
0062 6824 363F             data  >363f                 ; Load MSB of GPU PC (>3f) into VR54 (>36)
0063 6826 06A0  32         bl    @putvr
     6828 2332     
0064 682A 3700             data  >3700                 ; Load LSB of GPU PC (>00) into VR55 (>37)
0065                                                   ; GPU code should run now
0066               
0067 682C 06A0  32         bl    @putvr                ; VR56 >38, value 00000000
     682E 2332     
0068 6830 3800             data  >3800                 ; Reset and load PC (GPU idle!)
0069               ***************************************************************
0070               * VDP @>3f00 == 0 ? F18A present : F18a not present
0071               ***************************************************************
0072 6832 0204  20         li    tmp0,>3f00
     6834 3F00     
0073 6836 06A0  32         bl    @vdra                 ; Set VDP read address to >3f00
     6838 22BA     
0074 683A D120  30         movb  @vdpr,tmp0            ; Read MSB byte
     683C 8800     
0075 683E 0984  32         srl   tmp0,8
0076 6840 D120  30         movb  @vdpr,tmp0            ; Read LSB byte
     6842 8800     
0077 6844 C104  18         mov   tmp0,tmp0             ; For comparing with 0
0078 6846 1303  14         jeq   f18chk_yes
0079               f18chk_no:
0080 6848 0242  22         andi  config,>bfff          ; CONFIG Register bit 1=0
     684A BFFF     
0081 684C 1002  14         jmp   f18chk_exit
0082               f18chk_yes:
0083 684E 0262  22         ori   config,>4000          ; CONFIG Register bit 1=1
     6850 4000     
0084               
0085               f18chk_exit:
0086 6852 06A0  32         bl    @filv                 ; Clear VDP mem >3f00->3f05
     6854 228E     
0087 6856 3F00             data  >3f00,>00,6
     6858 0000     
     685A 0006     
0088 685C 0458  20         b     *tmp4                 ; Exit
0089               ***************************************************************
0090               * GPU code
0091               ********|*****|*********************|**************************
0092               f18chk_gpu
0093 685E 04E0             data  >04e0                 ; 3f00 \ 04e0  clr @>3f00
0094 6860 3F00             data  >3f00                 ; 3f02 / 3f00
0095 6862 0340             data  >0340                 ; 3f04   0340  idle
0096 6864 10FF             data  >10ff                 ; 3f06   10ff  \ jmp $
0097                                                   ;              | Make classic99 debugger
0098                                                   ;              | happy if break on illegal
0099                                                   ;              / opcode is on.
0100               
0101               ***************************************************************
0102               * f18rst - Reset f18a into standard settings
0103               ***************************************************************
0104               *  bl   @f18rst
0105               *--------------------------------------------------------------
0106               *  REMARKS
0107               *  This is used to leave the F18A mode and revert all settings
0108               *  that could lead to corruption when doing BLWP @0
0109               *
0110               *  Is expected to run while the f18a is unlocked.
0111               *
0112               *  There are some F18a settings that stay on when doing blwp @0
0113               *  and the TI title screen cannot recover from that.
0114               *
0115               *  It is your responsibility to set video mode tables should
0116               *  you want to continue instead of doing blwp @0 after your
0117               *  program cleanup
0118               ********|*****|*********************|**************************
0119 6866 C20B  18 f18rst  mov   r11,tmp4              ; Save R11
0120                       ;------------------------------------------------------
0121                       ; Reset all F18a VDP registers to power-on defaults
0122                       ;------------------------------------------------------
0123 6868 06A0  32         bl    @putvr
     686A 2332     
0124 686C 3280             data  >3280                 ; F18a VR50 (>32), MSB 8=1
0125               
0126 686E 06A0  32         bl    @putvr                ; VR1/57, value 00000000
     6870 2332     
0127 6872 3900             data  >3900                 ; Lock the F18a
0128 6874 0458  20         b     *tmp4                 ; Exit
0129               
0130               
0131               
0132               ***************************************************************
0133               * f18fwv - Get F18A Firmware Version
0134               ***************************************************************
0135               *  bl   @f18fwv
0136               *--------------------------------------------------------------
0137               *  REMARKS
0138               *  Successfully tested with F18A v1.8, note that this does not
0139               *  work with F18 v1.3 but you shouldn't be using such old F18A
0140               *  firmware to begin with.
0141               *--------------------------------------------------------------
0142               *  TMP0 High nibble = major version
0143               *  TMP0 Low nibble  = minor version
0144               *
0145               *  Example: >0018     F18a Firmware v1.8
0146               ********|*****|*********************|**************************
0147 6876 C20B  18 f18fwv  mov   r11,tmp4              ; Save R11
0148 6878 20A0  32         coc   @wbit1,config         ; CONFIG bit 1 set ?
     687A 201E     
0149 687C 1609  14         jne   f18fw1
0150               ***************************************************************
0151               * Read F18A major/minor version
0152               ***************************************************************
0153 687E C120  30         mov   @vdps,tmp0            ; Clear VDP status register
     6880 8802     
0154 6882 06A0  32         bl    @putvr                ; Write to VR#15 for setting F18A status
     6884 2332     
0155 6886 0F0E             data  >0f0e                 ; register to read (0e=VR#14)
0156 6888 04C4  14         clr   tmp0
0157 688A D120  30         movb  @vdps,tmp0
     688C 8802     
0158 688E 0984  32         srl   tmp0,8
0159 6890 0458  20 f18fw1  b     *tmp4                 ; Exit
                   < runlib.asm
0152               
0154                       copy  "vdp_hchar.asm"            ; VDP hchar functions
     **** ****     > vdp_hchar.asm
0001               * FILE......: vdp_hchar.a99
0002               * Purpose...: VDP hchar module
0003               
0004               ***************************************************************
0005               * Repeat characters horizontally at YX
0006               ***************************************************************
0007               *  BL    @HCHAR
0008               *  DATA  P0,P1
0009               *  ...
0010               *  DATA  EOL                        ; End-of-list
0011               *--------------------------------------------------------------
0012               *  P0HB = Y position
0013               *  P0LB = X position
0014               *  P1HB = Byte to write
0015               *  P1LB = Number of times to repeat
0016               ********|*****|*********************|**************************
0017 6892 C83B  42 hchar   mov   *r11+,@wyx            ; Set YX position
     6894 832A     
0018 6896 D17B  28         movb  *r11+,tmp1
0019 6898 0985  32 hcharx  srl   tmp1,8                ; Byte to write
0020 689A D1BB  28         movb  *r11+,tmp2
0021 689C 0986  32         srl   tmp2,8                ; Repeat count
0022 689E C1CB  18         mov   r11,tmp3
0023 68A0 06A0  32         bl    @yx2pnt               ; Get VDP address into TMP0
     68A2 23FA     
0024               *--------------------------------------------------------------
0025               *    Draw line
0026               *--------------------------------------------------------------
0027 68A4 020B  20         li    r11,hchar1
     68A6 27EC     
0028 68A8 0460  28         b     @xfilv                ; Draw
     68AA 2294     
0029               *--------------------------------------------------------------
0030               *    Do housekeeping
0031               *--------------------------------------------------------------
0032 68AC 8817  42 hchar1  c     *tmp3,@w$ffff         ; End-Of-List marker found ?
     68AE 2022     
0033 68B0 1302  14         jeq   hchar2                ; Yes, exit
0034 68B2 C2C7  18         mov   tmp3,r11
0035 68B4 10EE  14         jmp   hchar                 ; Next one
0036 68B6 05C7  14 hchar2  inct  tmp3
0037 68B8 0457  20         b     *tmp3                 ; Exit
                   < runlib.asm
0156               
0160               
0164               
0168               
0170                       copy  "snd_player.asm"           ; Sound player
     **** ****     > snd_player.asm
0001               * FILE......: snd_player.asm
0002               * Purpose...: Sound player support code
0003               
0004               
0005               ***************************************************************
0006               * MUTE - Mute all sound generators
0007               ***************************************************************
0008               *  BL  @MUTE
0009               *  Mute sound generators and clear sound pointer
0010               *
0011               *  BL  @MUTE2
0012               *  Mute sound generators without clearing sound pointer
0013               ********|*****|*********************|**************************
0014 68BA 04E0  26 mute    clr   @wsdlst               ; Clear sound pointer
     68BC 8334     
0015 68BE 40A0  34 mute2   szc   @wbit13,config        ; Turn off/pause sound player
     68C0 2006     
0016 68C2 0204  20         li    tmp0,muttab
     68C4 2814     
0017 68C6 0205  20         li    tmp1,sound            ; Sound generator port >8400
     68C8 8400     
0018 68CA D574  40         movb  *tmp0+,*tmp1          ; Generator 0
0019 68CC D574  40         movb  *tmp0+,*tmp1          ; Generator 1
0020 68CE D574  40         movb  *tmp0+,*tmp1          ; Generator 2
0021 68D0 D554  38         movb  *tmp0,*tmp1           ; Generator 3
0022 68D2 045B  20         b     *r11
0023 68D4 9FBF     muttab  byte  >9f,>bf,>df,>ff       ; Table for muting all generators
     68D6 DFFF     
0024               
0025               
0026               ***************************************************************
0027               * SDPREP - Prepare for playing sound
0028               ***************************************************************
0029               *  BL   @SDPREP
0030               *  DATA P0,P1
0031               *
0032               *  P0 = Address where tune is stored
0033               *  P1 = Option flags for sound player
0034               *--------------------------------------------------------------
0035               *  REMARKS
0036               *  Use the below equates for P1:
0037               *
0038               *  SDOPT1 => Tune is in CPU memory + loop
0039               *  SDOPT2 => Tune is in CPU memory
0040               *  SDOPT3 => Tune is in VRAM + loop
0041               *  SDOPT4 => Tune is in VRAM
0042               ********|*****|*********************|**************************
0043 68D8 C81B  38 sdprep  mov   *r11,@wsdlst          ; Set tune address
     68DA 8334     
0044 68DC C83B  42         mov   *r11+,@wsdtmp         ; Set tune address in temp
     68DE 8336     
0045 68E0 0242  22         andi  config,>fff8          ; Clear bits 13-14-15
     68E2 FFF8     
0046 68E4 E0BB  30         soc   *r11+,config          ; Set options
0047 68E6 D820  46         movb  @hb$01,@r13lb         ; Set initial duration
     68E8 2012     
     68EA 831B     
0048 68EC 045B  20         b     *r11
0049               
0050               ***************************************************************
0051               * SDPLAY - Sound player for tune in VRAM or CPU memory
0052               ***************************************************************
0053               *  BL  @SDPLAY
0054               *--------------------------------------------------------------
0055               *  REMARKS
0056               *  Set config register bit13=0 to pause player.
0057               *  Set config register bit14=1 to repeat (or play next tune).
0058               ********|*****|*********************|**************************
0059 68EE 20A0  32 sdplay  coc   @wbit13,config        ; Play tune ?
     68F0 2006     
0060 68F2 1301  14         jeq   sdpla1                ; Yes, play
0061 68F4 045B  20         b     *r11
0062               *--------------------------------------------------------------
0063               * Initialisation
0064               *--------------------------------------------------------------
0065 68F6 060D  14 sdpla1  dec   r13                   ; duration = duration - 1
0066 68F8 9820  46         cb    @r13lb,@hb$00         ; R13LB == 0 ?
     68FA 831B     
     68FC 2000     
0067 68FE 1301  14         jeq   sdpla3                ; Play next note
0068 6900 045B  20 sdpla2  b     *r11                  ; Note still busy, exit
0069 6902 20A0  32 sdpla3  coc   @wbit15,config        ; Play tune from CPU memory ?
     6904 2002     
0070 6906 131A  14         jeq   mmplay
0071               *--------------------------------------------------------------
0072               * Play tune from VDP memory
0073               *--------------------------------------------------------------
0074 6908 C120  30 vdplay  mov   @wsdtmp,tmp0          ; Get tune address
     690A 8336     
0075 690C 06C4  14         swpb  tmp0
0076 690E D804  30         movb  tmp0,@vdpa
     6910 8C02     
0077 6912 06C4  14         swpb  tmp0
0078 6914 D804  30         movb  tmp0,@vdpa
     6916 8C02     
0079 6918 04C4  14         clr   tmp0
0080 691A D120  30         movb  @vdpr,tmp0            ; length = 0 (end of tune) ?
     691C 8800     
0081 691E 131E  14         jeq   sdexit                ; Yes. exit
0082 6920 0984  32 vdpla1  srl   tmp0,8                ; Right justify length byte
0083 6922 A804  30         a     tmp0,@wsdtmp          ; Adjust for next table entry
     6924 8336     
0084 6926 D820  42 vdpla2  movb  @vdpr,@>8400          ; Feed byte to sound generator
     6928 8800     
     692A 8400     
0085 692C 0604  14         dec   tmp0
0086 692E 16FB  14         jne   vdpla2
0087 6930 D820  42         movb  @vdpr,@r13lb          ; Set duration counter
     6932 8800     
     6934 831B     
0088 6936 05E0  26 vdpla3  inct  @wsdtmp               ; Adjust for next table entry, honour byte (1) + (n+1)
     6938 8336     
0089 693A 045B  20         b     *r11
0090               *--------------------------------------------------------------
0091               * Play tune from CPU memory
0092               *--------------------------------------------------------------
0093 693C C120  30 mmplay  mov   @wsdtmp,tmp0
     693E 8336     
0094 6940 D174  28         movb  *tmp0+,tmp1           ; length = 0 (end of tune) ?
0095 6942 130C  14         jeq   sdexit                ; Yes, exit
0096 6944 0985  32 mmpla1  srl   tmp1,8                ; Right justify length byte
0097 6946 A805  30         a     tmp1,@wsdtmp          ; Adjust for next table entry
     6948 8336     
0098 694A D834  40 mmpla2  movb  *tmp0+,@>8400         ; Feed byte to sound generator
     694C 8400     
0099 694E 0605  14         dec   tmp1
0100 6950 16FC  14         jne   mmpla2
0101 6952 D814  38         movb  *tmp0,@r13lb          ; Set duration counter
     6954 831B     
0102 6956 05E0  26         inct  @wsdtmp               ; Adjust for next table entry, honour byte (1) + (n+1)
     6958 8336     
0103 695A 045B  20         b     *r11
0104               *--------------------------------------------------------------
0105               * Exit. Check if tune must be looped
0106               *--------------------------------------------------------------
0107 695C 20A0  32 sdexit  coc   @wbit14,config        ; Loop flag set ?
     695E 2004     
0108 6960 1607  14         jne   sdexi2                ; No, exit
0109 6962 C820  42         mov   @wsdlst,@wsdtmp
     6964 8334     
     6966 8336     
0110 6968 D820  46         movb  @hb$01,@r13lb          ; Set initial duration
     696A 2012     
     696C 831B     
0111 696E 045B  20 sdexi1  b     *r11                  ; Exit
0112 6970 0242  22 sdexi2  andi  config,>fff8          ; Reset music player
     6972 FFF8     
0113 6974 045B  20         b     *r11                  ; Exit
0114               
                   < runlib.asm
0172               
0176               
0180               
0184               
0187                       copy  "keyb_rkscan.asm"          ; Use ROM#0 OS monitor KSCAN
     **** ****     > keyb_rkscan.asm
0001               * FILE......: keyb_rkscan.asm
0002               * Purpose...: Full (real) keyboard support module
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                     KEYBOARD FUNCTIONS
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * RKSCAN - Scan keyboard using ROM#0 OS monitor KSCAN
0010               ***************************************************************
0011               *  BL @RKSCAN
0012               *--------------------------------------------------------------
0013               * Register usage
0014               * none
0015               *--------------------------------------------------------------
0016               * Scratchpad usage by console KSCAN:
0017               *
0018               * >8373  I/O:    LSB of GPL subroutine stack pointer 80 = (>8380)
0019               * >8374  Input:  keyboard scan mode (default=0)
0020               * >8375  Output: ASCII code detected by keyboard scan
0021               * >8376  Output: Joystick Y-status by keyboard scan
0022               * >8377  Output: Joystick X-status by keyboard scan
0023               * >837c  Output: GPL status byte (>20 if key pressed)
0024               * >838a  I/O:    GPL substack
0025               * >838c  I/O:    GPL substack
0026               * >83c6  I/O:    ISRWS R3 Keyboard state and debounce info
0027               * >83c8  I/O:    ISRWS R4 Keyboard state and debounce info
0028               * >83ca  I/O:    ISRWS R5 Keyboard state and debounce info
0029               * >83d4  I/O:    ISRWS R10 Contents of VDP register 01
0030               * >83d6  I/O:    ISRWS R11 Screen timeout counter, blanks when 0000
0031               * >83d8  I/O:    ISRWS R12 (Backup return address old R11 in GPLWS)
0032               * >83f8  output: GPLWS R12 (CRU base address for key scan)
0033               * >83fa  output: GPLWS R13 (GROM/GRAM read data port 9800)
0034               * >83fe  I/O:    GPLWS R15 (VDP write address port 8c02)
0035               ********|*****|*********************|**************************
0036               rkscan:
0037 6976 0649  14         dect  stack
0038 6978 C64B  30         mov   r11,*stack            ; Push return address
0039 697A 0649  14         dect  stack
0040 697C C644  30         mov   tmp0,*stack           ; Push tmp0
0041                       ;------------------------------------------------------
0042                       ; (1) Check for alpha lock
0043                       ;------------------------------------------------------
0044 697E 40A0  34         szc   @wbit10,config        ; Reset CONFIG register bit 10=0
     6980 200C     
0045                                                   ; (alpha lock off)
0046               
0047                       ; See CRU interface and keyboard sections for details
0048                       ; http://www.nouspikel.com/ti99/titechpages.htm
0049               
0050 6982 04CC  14         clr   r12                   ; Set base address (to bit 0) so
0051                                                   ; following offsets correspond
0052               
0053 6984 1E15  16         sbz   21                    ; \ Set bit 21 (PIN 5 attached to alpha
0054                                                   ; / lock column) to 0.
0055               
0056 6986 0BEC  44         src   r12,14                ; Burn some time (r12=0 no problem shifting)
0057               
0058 6988 1F07  16         tb    7                     ; \ Copy CRU bit 7 into EQ bit
0059                                                   ; | That is CRU INT7*/P15 pin (keyboard row
0060                                                   ; | with keys FCTN, 2,3,4,5,1,
0061                                                   ; / [joy1-up,joy2-up, Alpha Lock])
0062               
0063 698A 1302  14         jeq   !                     ; No, alpha lock is off
0064               
0065 698C E0A0  34         soc   @wbit10,config        ; \ Yes, alpha lock is on.
     698E 200C     
0066                                                   ; / Set CONFIG register bit 10=1
0067               
0068 6990 1D15  16 !       sbo   21                    ; \ Reset bit 21 (Pin 5 attached to alpha
0069                                                   ; / lock column) to 1.
0070                       ;------------------------------------------------------
0071                       ; (2) Prepare for OS monitor kscan
0072                       ;------------------------------------------------------
0073 6992 C820  46         mov   @scrpad.83c6,@>83c6   ; Required for lowercase support
     6994 2912     
     6996 83C6     
0074 6998 C820  46         mov   @scrpad.83fa,@>83fa   ; Load GPLWS R13
     699A 2914     
     699C 83FA     
0075 699E C820  46         mov   @scrpad.83fe,@>83fe   ; Load GPLWS R15
     69A0 2916     
     69A2 83FE     
0076               
0077 69A4 04C4  14         clr   tmp0                  ; \ Keyboard mode in MSB
0078                                                   ; / 00=Scan all of keyboard
0079               
0080 69A6 D804  30         movb  tmp0,@>8374           ; Set keyboard mode at @>8374
     69A8 8374     
0081                                                   ; (scan entire keyboard)
0082               
0083 69AA 02E0  18         lwpi  >83e0                 ; Activate GPL workspace
     69AC 83E0     
0084               
0085 69AE 06A0  28         bl    @kscan                ; Call KSCAN
     69B0 000E     
0086 69B2 02E0  18         lwpi  ws1                   ; Activate user workspace
     69B4 8300     
0087                       ;------------------------------------------------------
0088                       ; (3) Check if key pressed
0089                       ;------------------------------------------------------
0090 69B6 D120  30         movb  @>837c,tmp0           ; Get flag
     69B8 837C     
0091 69BA 0A34  22         sla   tmp0,3                ; Flag value is >20
0092 69BC 1707  14         jnc   rkscan.exit           ; No key pressed, exit early
0093                       ;------------------------------------------------------
0094                       ; (4) Key detected, store in memory
0095                       ;------------------------------------------------------
0096 69BE D120  30         movb  @>8375,tmp0           ; \ Key pressed is at @>8375
     69C0 8375     
0097 69C2 0984  32         srl   tmp0,8                ; / Move to LSB
0099 69C4 C804  38         mov   tmp0,@rom0_kscan_out  ; Store ASCII value in user location
     69C6 A028     
0103 69C8 E0A0  34         soc   @wbit11,config        ; Set ANYKEY flag in CONFIG register
     69CA 200A     
0104                       ;------------------------------------------------------
0105                       ; Exit
0106                       ;------------------------------------------------------
0107               rkscan.exit:
0108 69CC C139  30         mov   *stack+,tmp0          ; Pop tmp0
0109 69CE C2F9  30         mov   *stack+,r11           ; Pop r11
0110 69D0 045B  20         b     *r11                  ; Return to caller
0111               
0112               
0113 69D2 0200     scrpad.83c6   data >0200            ; Required for KSCAN to support lowercase
0114 69D4 9800     scrpad.83fa   data >9800
0115               
0116               ; Dummy value for GPLWS R15 (instead of VDP write address port 8c02)
0117               ; We do not want console KSCAN to fiddle with VDP registers while Stevie
0118               ; is running
0119               
0120 69D6 83A0     scrpad.83fe   data >83a0            ; 8c02
                   < runlib.asm
0192               
0194                       copy  "cpu_hexsupport.asm"       ; CPU hex numbers support
     **** ****     > cpu_hexsupport.asm
0001               * FILE......: cpu_hexsupport.asm
0002               * Purpose...: CPU create, display hex numbers module
0003               
0004               ***************************************************************
0005               * mkhex - Convert hex word to string
0006               ***************************************************************
0007               *  bl   @mkhex
0008               *       data P0,P1,P2
0009               *--------------------------------------------------------------
0010               *  P0 = Pointer to 16 bit word
0011               *  P1 = Pointer to string buffer
0012               *  P2 = Offset for ASCII digit
0013               *       MSB determines offset for chars A-F
0014               *       LSB determines offset for chars 0-9
0015               *  (CONFIG#0 = 1) = Display number at cursor YX
0016               *--------------------------------------------------------------
0017               *  Memory usage:
0018               *  tmp0, tmp1, tmp2, tmp3, tmp4
0019               *  waux1, waux2, waux3
0020               *--------------------------------------------------------------
0021               *  Memory variables waux1-waux3 are used as temporary variables
0022               ********|*****|*********************|**************************
0023 69D8 C13B  30 mkhex   mov   *r11+,tmp0            ; P0: Address of word
0024 69DA C83B  42         mov   *r11+,@waux3          ; P1: Pointer to string buffer
     69DC 8340     
0025 69DE 04E0  26         clr   @waux1
     69E0 833C     
0026 69E2 04E0  26         clr   @waux2
     69E4 833E     
0027 69E6 0207  20         li    tmp3,waux1            ; We store results in WAUX1 and WAUX2
     69E8 833C     
0028 69EA C114  26         mov   *tmp0,tmp0            ; Get word
0029               *--------------------------------------------------------------
0030               *    Convert nibbles to bytes (is in wrong order)
0031               *--------------------------------------------------------------
0032 69EC 0205  20         li    tmp1,4                ; 4 nibbles
     69EE 0004     
0033 69F0 C184  18 mkhex1  mov   tmp0,tmp2             ; Make work copy
0034 69F2 0246  22         andi  tmp2,>000f            ; Only keep LSN
     69F4 000F     
0035                       ;------------------------------------------------------
0036                       ; Determine offset for ASCII char
0037                       ;------------------------------------------------------
0038 69F6 0286  22         ci    tmp2,>000a
     69F8 000A     
0039 69FA 1105  14         jlt   mkhex1.digit09
0040                       ;------------------------------------------------------
0041                       ; Add ASCII offset for digits A-F
0042                       ;------------------------------------------------------
0043               mkhex1.digitaf:
0044 69FC C21B  26         mov   *r11,tmp4
0045 69FE 0988  32         srl   tmp4,8                ; Right justify
0046 6A00 0228  22         ai    tmp4,-10              ; Adjust offset for 'A-F'
     6A02 FFF6     
0047 6A04 1003  14         jmp   mkhex2
0048               
0049               mkhex1.digit09:
0050                       ;------------------------------------------------------
0051                       ; Add ASCII offset for digits 0-9
0052                       ;------------------------------------------------------
0053 6A06 C21B  26         mov   *r11,tmp4
0054 6A08 0248  22         andi  tmp4,>00ff            ; Only keep LSB
     6A0A 00FF     
0055               
0056 6A0C A188  18 mkhex2  a     tmp4,tmp2             ; Add ASCII-offset
0057 6A0E 06C6  14         swpb  tmp2
0058 6A10 DDC6  32         movb  tmp2,*tmp3+           ; Save byte
0059 6A12 0944  24         srl   tmp0,4                ; Next nibble
0060 6A14 0605  14         dec   tmp1
0061 6A16 16EC  14         jne   mkhex1                ; Repeat until all nibbles processed
0062 6A18 0242  22         andi  config,>bfff          ; Reset bit 1 in config register
     6A1A BFFF     
0063               *--------------------------------------------------------------
0064               *    Build first 2 bytes in correct order
0065               *--------------------------------------------------------------
0066 6A1C C160  30         mov   @waux3,tmp1           ; Get pointer
     6A1E 8340     
0067 6A20 04D5  26         clr   *tmp1                 ; Set length byte to 0
0068 6A22 0585  14         inc   tmp1                  ; Next byte, not word!
0069 6A24 C120  30         mov   @waux2,tmp0
     6A26 833E     
0070 6A28 06C4  14         swpb  tmp0
0071 6A2A DD44  32         movb  tmp0,*tmp1+
0072 6A2C 06C4  14         swpb  tmp0
0073 6A2E DD44  32         movb  tmp0,*tmp1+
0074               *--------------------------------------------------------------
0075               *    Set length byte
0076               *--------------------------------------------------------------
0077 6A30 C120  30         mov   @waux3,tmp0           ; Get start of string buffer
     6A32 8340     
0078 6A34 D520  46         movb  @hb$04,*tmp0          ; Set lengh byte to 4
     6A36 2016     
0079 6A38 05CB  14         inct  r11                   ; Skip Parameter P2
0080               *--------------------------------------------------------------
0081               *    Build last 2 bytes in correct order
0082               *--------------------------------------------------------------
0083 6A3A C120  30         mov   @waux1,tmp0
     6A3C 833C     
0084 6A3E 06C4  14         swpb  tmp0
0085 6A40 DD44  32         movb  tmp0,*tmp1+
0086 6A42 06C4  14         swpb  tmp0
0087 6A44 DD44  32         movb  tmp0,*tmp1+
0088               *--------------------------------------------------------------
0089               *    Display hex number ?
0090               *--------------------------------------------------------------
0091 6A46 20A0  32         coc   @wbit0,config         ; Check if 'display' bit is set
     6A48 2020     
0092 6A4A 1301  14         jeq   mkhex3                ; Yes, so show at current YX position
0093 6A4C 045B  20         b     *r11                  ; Exit
0094               *--------------------------------------------------------------
0095               *  Display hex number on screen at current YX position
0096               *--------------------------------------------------------------
0097 6A4E 0242  22 mkhex3  andi  config,>7fff          ; Reset bit 0
     6A50 7FFF     
0098 6A52 C160  30         mov   @waux3,tmp1           ; Get Pointer to string
     6A54 8340     
0099 6A56 0460  28         b     @xutst0               ; Display string
     6A58 2420     
0100 6A5A 0610     prefix  data  >0610                 ; Length byte + blank
0101               
0102               
0103               
0104               ***************************************************************
0105               * puthex - Put 16 bit word on screen
0106               ***************************************************************
0107               *  bl   @mkhex
0108               *       data P0,P1,P2,P3
0109               *--------------------------------------------------------------
0110               *  P0 = YX position
0111               *  P1 = Pointer to 16 bit word
0112               *  P2 = Pointer to string buffer
0113               *  P3 = Offset for ASCII digit
0114               *       MSB determines offset for chars A-F
0115               *       LSB determines offset for chars 0-9
0116               *--------------------------------------------------------------
0117               *  Memory usage:
0118               *  tmp0, tmp1, tmp2, tmp3
0119               *  waux1, waux2, waux3
0120               ********|*****|*********************|**************************
0121 6A5C C83B  42 puthex  mov   *r11+,@wyx            ; Set cursor
     6A5E 832A     
0122 6A60 0262  22         ori   config,>8000          ; CONFIG register bit 0=1
     6A62 8000     
0123 6A64 10B9  14         jmp   mkhex                 ; Convert number and display
0124               
                   < runlib.asm
0196               
0198                       copy  "cpu_numsupport.asm"       ; CPU unsigned numbers support
     **** ****     > cpu_numsupport.asm
0001               * FILE......: cpu_numsupport.asm
0002               * Purpose...: CPU create, display numbers module
0003               
0004               ***************************************************************
0005               * MKNUM - Convert unsigned number to string
0006               ***************************************************************
0007               *  BL   @MKNUM
0008               *  DATA P0,P1,P2
0009               *
0010               *  P0   = Pointer to 16 bit unsigned number
0011               *  P1   = Pointer to 5 byte string buffer
0012               *  P2HB = Offset for ASCII digit
0013               *  P2LB = Character for replacing leading 0's
0014               *
0015               *  (CONFIG:0 = 1) = Display number at cursor YX
0016               *-------------------------------------------------------------
0017               *  Destroys registers tmp0-tmp4
0018               ********|*****|*********************|**************************
0019 6A66 0207  20 mknum   li    tmp3,5                ; Digit counter
     6A68 0005     
0020 6A6A C17B  30         mov   *r11+,tmp1            ; \ Get 16 bit unsigned number
0021 6A6C C155  26         mov   *tmp1,tmp1            ; /
0022 6A6E C23B  30         mov   *r11+,tmp4            ; Pointer to string buffer
0023 6A70 0228  22         ai    tmp4,4                ; Get end of buffer
     6A72 0004     
0024 6A74 0206  20         li    tmp2,10               ; Divide by 10 to isolate last digit
     6A76 000A     
0025               *--------------------------------------------------------------
0026               *  Do string conversion
0027               *--------------------------------------------------------------
0028 6A78 04C4  14 mknum1  clr   tmp0                  ; Clear the high word of the dividend
0029 6A7A 3D06 128         div   tmp2,tmp0             ; (TMP0:TMP1) / 10 (TMP2)
0030 6A7C 06C5  14         swpb  tmp1                  ; Move to high-byte for writing to buffer
0031 6A7E B15B  26         ab    *r11,tmp1             ; Add offset for ASCII digit
0032 6A80 D605  30         movb  tmp1,*tmp4            ; Write remainder to string buffer
0033 6A82 C144  18         mov   tmp0,tmp1             ; Move integer result into R4 for next digit
0034 6A84 0608  14         dec   tmp4                  ; Adjust string pointer for next digit
0035 6A86 0607  14         dec   tmp3                  ; Decrease counter
0036 6A88 16F7  14         jne   mknum1                ; Do next digit
0037               *--------------------------------------------------------------
0038               *  Replace leading 0's with fill character
0039               *--------------------------------------------------------------
0040 6A8A 0207  20         li    tmp3,4                ; Check first 4 digits
     6A8C 0004     
0041 6A8E 0588  14         inc   tmp4                  ; Too far, back to buffer start
0042 6A90 C11B  26         mov   *r11,tmp0
0043 6A92 0A84  32         sla   tmp0,8                ; Only keep fill character in HB
0044 6A94 96D8  34 mknum2  cb    *tmp4,*r11            ; Digit = 0 ?
0045 6A96 1305  14         jeq   mknum4                ; Yes, replace with fill character
0046 6A98 05CB  14 mknum3  inct  r11
0047 6A9A 20A0  32         coc   @wbit0,config         ; Check if 'display' bit is set
     6A9C 2020     
0048 6A9E 1305  14         jeq   mknum5                ; Yes, so show at current YX position
0049 6AA0 045B  20         b     *r11                  ; Exit
0050 6AA2 DE04  32 mknum4  movb  tmp0,*tmp4+           ; Replace leading 0 with fill character
0051 6AA4 0607  14         dec   tmp3                  ; 4th digit processed ?
0052 6AA6 13F8  14         jeq   mknum3                ; Yes, exit
0053 6AA8 10F5  14         jmp   mknum2                ; No, next one
0054               *--------------------------------------------------------------
0055               *  Display integer on screen at current YX position
0056               *--------------------------------------------------------------
0057 6AAA 0242  22 mknum5  andi  config,>7fff          ; Reset bit 0
     6AAC 7FFF     
0058 6AAE C10B  18         mov   r11,tmp0
0059 6AB0 0224  22         ai    tmp0,-4
     6AB2 FFFC     
0060 6AB4 C154  26         mov   *tmp0,tmp1            ; Get buffer address
0061 6AB6 0206  20         li    tmp2,>0500            ; String length = 5
     6AB8 0500     
0062 6ABA 0460  28         b     @xutstr               ; Display string
     6ABC 2422     
0063               
0064               
0065               
0066               
0067               ***************************************************************
0068               * trimnum - Trim unsigned number string
0069               ***************************************************************
0070               *  bl   @trimnum
0071               *  data p0,p1,p2
0072               *--------------------------------------------------------------
0073               *  p0   = Pointer to 5 byte string buffer (no length byte!)
0074               *  p1   = Pointer to output variable
0075               *  p2   = Padding character to match against
0076               *--------------------------------------------------------------
0077               *  Copy unsigned number string into a length-padded, left
0078               *  justified string for display with putstr, putat, ...
0079               *
0080               *  The new string starts at index 5 in buffer, overwriting
0081               *  anything that is located there !
0082               *
0083               *               01234|56789A
0084               *  Before...:   XXXXX          length
0085               *  After....:   XXXXY|zY       z=1
0086               *               XXXYY|zYY      z=2
0087               *               XXYYY|zYYY     z=3
0088               *               XYYYY|zYYYY    z=4
0089               *               YYYYY|zYYYYY   z=5
0090               *--------------------------------------------------------------
0091               *  Destroys registers tmp0-tmp3
0092               ********|*****|*********************|**************************
0093               trimnum:
0094 6ABE C13B  30         mov   *r11+,tmp0            ; Get pointer to input string
0095 6AC0 C17B  30         mov   *r11+,tmp1            ; Get pointer to output string
0096 6AC2 C1BB  30         mov   *r11+,tmp2            ; Get padding character
0097 6AC4 06C6  14         swpb  tmp2                  ; LO <-> HI
0098 6AC6 0207  20         li    tmp3,5                ; Set counter
     6AC8 0005     
0099                       ;------------------------------------------------------
0100                       ; Scan for padding character from left to right
0101                       ;------------------------------------------------------:
0102               trimnum_scan:
0103 6ACA 9194  26         cb    *tmp0,tmp2            ; Matches padding character ?
0104 6ACC 1604  14         jne   trimnum_setlen        ; No, exit loop
0105 6ACE 0584  14         inc   tmp0                  ; Next character
0106 6AD0 0607  14         dec   tmp3                  ; Last digit reached ?
0107 6AD2 1301  14         jeq   trimnum_setlen        ; yes, exit loop
0108 6AD4 10FA  14         jmp   trimnum_scan
0109                       ;------------------------------------------------------
0110                       ; Scan completed, set length byte new string
0111                       ;------------------------------------------------------
0112               trimnum_setlen:
0113 6AD6 06C7  14         swpb  tmp3                  ; LO <-> HI
0114 6AD8 DD47  32         movb  tmp3,*tmp1+           ; Update string-length in work buffer
0115 6ADA 06C7  14         swpb  tmp3                  ; LO <-> HI
0116                       ;------------------------------------------------------
0117                       ; Start filling new string
0118                       ;------------------------------------------------------
0119               trimnum_fill:
0120 6ADC DD74  42         movb  *tmp0+,*tmp1+         ; Copy character
0121 6ADE 0607  14         dec   tmp3                  ; Last character ?
0122 6AE0 16FD  14         jne   trimnum_fill          ; Not yet, repeat
0123 6AE2 045B  20         b     *r11                  ; Return
0124               
0125               
0126               
0127               
0128               ***************************************************************
0129               * PUTNUM - Put unsigned number on screen
0130               ***************************************************************
0131               *  BL   @PUTNUM
0132               *  DATA P0,P1,P2,P3
0133               *--------------------------------------------------------------
0134               *  P0   = YX position
0135               *  P1   = Pointer to 16 bit unsigned number
0136               *  P2   = Pointer to 5 byte string buffer
0137               *  P3HB = Offset for ASCII digit
0138               *  P3LB = Character for replacing leading 0's
0139               ********|*****|*********************|**************************
0140 6AE4 C83B  42 putnum  mov   *r11+,@wyx            ; Set cursor
     6AE6 832A     
0141 6AE8 0262  22         ori   config,>8000          ; CONFIG register bit 0=1
     6AEA 8000     
0142 6AEC 10BC  14         jmp   mknum                 ; Convert number and display
                   < runlib.asm
0200               
0204               
0208               
0212               
0216               
0218                       copy  "cpu_strings.asm"          ; String utilities support
     **** ****     > cpu_strings.asm
0001               * FILE......: cpu_strings.asm
0002               * Purpose...: CPU string manipulation library
0003               
0004               
0005               ***************************************************************
0006               * string.ltrim - Left justify string
0007               ***************************************************************
0008               *  bl   @string.ltrim
0009               *       data p0,p1,p2
0010               *--------------------------------------------------------------
0011               *  P0 = Pointer to length-prefix string
0012               *  P1 = Pointer to RAM work buffer
0013               *  P2 = Fill character
0014               *--------------------------------------------------------------
0015               *  BL   @xstring.ltrim
0016               *
0017               *  TMP0 = Pointer to length-prefix string
0018               *  TMP1 = Pointer to RAM work buffer
0019               *  TMP2 = Fill character
0020               ********|*****|*********************|**************************
0021               string.ltrim:
0022 6AEE 0649  14         dect  stack
0023 6AF0 C64B  30         mov   r11,*stack            ; Save return address
0024 6AF2 0649  14         dect  stack
0025 6AF4 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 6AF6 0649  14         dect  stack
0027 6AF8 C645  30         mov   tmp1,*stack           ; Push tmp1
0028 6AFA 0649  14         dect  stack
0029 6AFC C646  30         mov   tmp2,*stack           ; Push tmp2
0030 6AFE 0649  14         dect  stack
0031 6B00 C647  30         mov   tmp3,*stack           ; Push tmp3
0032                       ;-----------------------------------------------------------------------
0033                       ; Get parameter values
0034                       ;-----------------------------------------------------------------------
0035 6B02 C13B  30         mov   *r11+,tmp0            ; Pointer to length-prefixed string
0036 6B04 C17B  30         mov   *r11+,tmp1            ; RAM work buffer
0037 6B06 C1BB  30         mov   *r11+,tmp2            ; Fill character
0038 6B08 100A  14         jmp   !
0039                       ;-----------------------------------------------------------------------
0040                       ; Register version
0041                       ;-----------------------------------------------------------------------
0042               xstring.ltrim:
0043 6B0A 0649  14         dect  stack
0044 6B0C C64B  30         mov   r11,*stack            ; Save return address
0045 6B0E 0649  14         dect  stack
0046 6B10 C644  30         mov   tmp0,*stack           ; Push tmp0
0047 6B12 0649  14         dect  stack
0048 6B14 C645  30         mov   tmp1,*stack           ; Push tmp1
0049 6B16 0649  14         dect  stack
0050 6B18 C646  30         mov   tmp2,*stack           ; Push tmp2
0051 6B1A 0649  14         dect  stack
0052 6B1C C647  30         mov   tmp3,*stack           ; Push tmp3
0053                       ;-----------------------------------------------------------------------
0054                       ; Start
0055                       ;-----------------------------------------------------------------------
0056 6B1E C1D4  26 !       mov   *tmp0,tmp3
0057 6B20 06C7  14         swpb  tmp3                  ; LO <-> HI
0058 6B22 0247  22         andi  tmp3,>00ff            ; Discard HI byte tmp2 (only keep length)
     6B24 00FF     
0059 6B26 0A86  32         sla   tmp2,8                ; LO -> HI fill character
0060                       ;-----------------------------------------------------------------------
0061                       ; Scan string from left to right and compare with fill character
0062                       ;-----------------------------------------------------------------------
0063               string.ltrim.scan:
0064 6B28 9194  26         cb    *tmp0,tmp2            ; Do we have a fill character?
0065 6B2A 1604  14         jne   string.ltrim.move     ; No, now move string left
0066 6B2C 0584  14         inc   tmp0                  ; Next byte
0067 6B2E 0607  14         dec   tmp3                  ; Shorten string length
0068 6B30 1301  14         jeq   string.ltrim.move     ; Exit if all characters processed
0069 6B32 10FA  14         jmp   string.ltrim.scan     ; Scan next characer
0070                       ;-----------------------------------------------------------------------
0071                       ; Copy part of string to RAM work buffer (This is the left-justify)
0072                       ;-----------------------------------------------------------------------
0073               string.ltrim.move:
0074 6B34 9194  26         cb    *tmp0,tmp2            ; Do we have a fill character?
0075 6B36 C1C7  18         mov   tmp3,tmp3             ; String length = 0 ?
0076 6B38 1306  14         jeq   string.ltrim.panic    ; File length assert
0077 6B3A C187  18         mov   tmp3,tmp2
0078 6B3C 06C7  14         swpb  tmp3                  ; HI <-> LO
0079 6B3E DD47  32         movb  tmp3,*tmp1+           ; Set new string length byte in RAM workbuf
0080               
0081 6B40 06A0  32         bl    @xpym2m               ; tmp0 = Memory source address
     6B42 24E0     
0082                                                   ; tmp1 = Memory target address
0083                                                   ; tmp2 = Number of bytes to copy
0084 6B44 1004  14         jmp   string.ltrim.exit
0085                       ;-----------------------------------------------------------------------
0086                       ; CPU crash
0087                       ;-----------------------------------------------------------------------
0088               string.ltrim.panic:
0089 6B46 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     6B48 FFCE     
0090 6B4A 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     6B4C 2026     
0091                       ;----------------------------------------------------------------------
0092                       ; Exit
0093                       ;----------------------------------------------------------------------
0094               string.ltrim.exit:
0095 6B4E C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0096 6B50 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0097 6B52 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0098 6B54 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0099 6B56 C2F9  30         mov   *stack+,r11           ; Pop r11
0100 6B58 045B  20         b     *r11                  ; Return to caller
0101               
0102               
0103               
0104               
0105               ***************************************************************
0106               * string.getlenc - Get length of C-style string
0107               ***************************************************************
0108               *  bl   @string.getlenc
0109               *       data p0,p1
0110               *--------------------------------------------------------------
0111               *  P0 = Pointer to C-style string
0112               *  P1 = String termination character
0113               *--------------------------------------------------------------
0114               *  bl   @xstring.getlenc
0115               *
0116               *  TMP0 = Pointer to C-style string
0117               *  TMP1 = Termination character
0118               *--------------------------------------------------------------
0119               *  OUTPUT:
0120               *  @waux1 = Length of string
0121               ********|*****|*********************|**************************
0122               string.getlenc:
0123 6B5A 0649  14         dect  stack
0124 6B5C C64B  30         mov   r11,*stack            ; Save return address
0125 6B5E 05D9  26         inct  *stack                ; Skip "data P0"
0126 6B60 05D9  26         inct  *stack                ; Skip "data P1"
0127 6B62 0649  14         dect  stack
0128 6B64 C644  30         mov   tmp0,*stack           ; Push tmp0
0129 6B66 0649  14         dect  stack
0130 6B68 C645  30         mov   tmp1,*stack           ; Push tmp1
0131 6B6A 0649  14         dect  stack
0132 6B6C C646  30         mov   tmp2,*stack           ; Push tmp2
0133                       ;-----------------------------------------------------------------------
0134                       ; Get parameter values
0135                       ;-----------------------------------------------------------------------
0136 6B6E C13B  30         mov   *r11+,tmp0            ; Pointer to C-style string
0137 6B70 C17B  30         mov   *r11+,tmp1            ; String termination character
0138 6B72 1008  14         jmp   !
0139                       ;-----------------------------------------------------------------------
0140                       ; Register version
0141                       ;-----------------------------------------------------------------------
0142               xstring.getlenc:
0143 6B74 0649  14         dect  stack
0144 6B76 C64B  30         mov   r11,*stack            ; Save return address
0145 6B78 0649  14         dect  stack
0146 6B7A C644  30         mov   tmp0,*stack           ; Push tmp0
0147 6B7C 0649  14         dect  stack
0148 6B7E C645  30         mov   tmp1,*stack           ; Push tmp1
0149 6B80 0649  14         dect  stack
0150 6B82 C646  30         mov   tmp2,*stack           ; Push tmp2
0151                       ;-----------------------------------------------------------------------
0152                       ; Start
0153                       ;-----------------------------------------------------------------------
0154 6B84 0A85  32 !       sla   tmp1,8                ; LSB to MSB
0155 6B86 04C6  14         clr   tmp2                  ; Loop counter
0156                       ;-----------------------------------------------------------------------
0157                       ; Scan string for termination character
0158                       ;-----------------------------------------------------------------------
0159               string.getlenc.loop:
0160 6B88 0586  14         inc   tmp2
0161 6B8A 9174  28         cb    *tmp0+,tmp1           ; Compare character
0162 6B8C 1304  14         jeq   string.getlenc.putlength
0163                       ;-----------------------------------------------------------------------
0164                       ; Assert on string length
0165                       ;-----------------------------------------------------------------------
0166 6B8E 0286  22         ci    tmp2,255
     6B90 00FF     
0167 6B92 1505  14         jgt   string.getlenc.panic
0168 6B94 10F9  14         jmp   string.getlenc.loop
0169                       ;-----------------------------------------------------------------------
0170                       ; Return length
0171                       ;-----------------------------------------------------------------------
0172               string.getlenc.putlength:
0173 6B96 0606  14         dec   tmp2                  ; One time adjustment
0174 6B98 C806  30         mov   tmp2,@waux1           ; Store length
     6B9A 833C     
0175 6B9C 1004  14         jmp   string.getlenc.exit   ; Exit
0176                       ;-----------------------------------------------------------------------
0177                       ; CPU crash
0178                       ;-----------------------------------------------------------------------
0179               string.getlenc.panic:
0180 6B9E C80B  38         mov   r11,@>ffce            ; \ Save caller address
     6BA0 FFCE     
0181 6BA2 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     6BA4 2026     
0182                       ;----------------------------------------------------------------------
0183                       ; Exit
0184                       ;----------------------------------------------------------------------
0185               string.getlenc.exit:
0186 6BA6 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0187 6BA8 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0188 6BAA C139  30         mov   *stack+,tmp0          ; Pop tmp0
0189 6BAC C2F9  30         mov   *stack+,r11           ; Pop r11
0190 6BAE 045B  20         b     *r11                  ; Return to caller
                   < runlib.asm
0220               
0224               
0226                       copy  "cpu_scrpad_backrest.asm"  ; Scratchpad backup/restore
     **** ****     > cpu_scrpad_backrest.asm
0001               * FILE......: cpu_scrpad_backrest.asm
0002               * Purpose...: Scratchpad memory backup/restore functions
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                Scratchpad memory backup/restore
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * cpu.scrpad.backup - Backup 256 bytes of scratchpad >8300 to
0010               *                     predefined memory target @cpu.scrpad.tgt
0011               ***************************************************************
0012               *  bl   @cpu.scrpad.backup
0013               *--------------------------------------------------------------
0014               *  Register usage
0015               *  r0-r2, but values restored before exit
0016               *--------------------------------------------------------------
0017               *  Backup 256 bytes of scratchpad memory >8300 to destination
0018               *  @cpu.scrpad.tgt (+ >ff)
0019               *
0020               *  Expects current workspace to be in scratchpad memory.
0021               ********|*****|*********************|**************************
0022               cpu.scrpad.backup:
0023 6BB0 C800  38         mov   r0,@cpu.scrpad.tgt    ; Save @>8300 (r0)
     6BB2 F000     
0024 6BB4 C801  38         mov   r1,@cpu.scrpad.tgt+2  ; Save @>8302 (r1)
     6BB6 F002     
0025 6BB8 C802  38         mov   r2,@cpu.scrpad.tgt+4  ; Save @>8304 (r2)
     6BBA F004     
0026                       ;------------------------------------------------------
0027                       ; Prepare for copy loop
0028                       ;------------------------------------------------------
0029 6BBC 0200  20         li    r0,>8306              ; Scratchpad source address
     6BBE 8306     
0030 6BC0 0201  20         li    r1,cpu.scrpad.tgt+6   ; RAM target address
     6BC2 F006     
0031 6BC4 0202  20         li    r2,62                 ; Loop counter
     6BC6 003E     
0032                       ;------------------------------------------------------
0033                       ; Copy memory range >8306 - >83ff
0034                       ;------------------------------------------------------
0035               cpu.scrpad.backup.copy:
0036 6BC8 CC70  46         mov   *r0+,*r1+
0037 6BCA CC70  46         mov   *r0+,*r1+
0038 6BCC 0642  14         dect  r2
0039 6BCE 16FC  14         jne   cpu.scrpad.backup.copy
0040 6BD0 C820  50         mov   @>83fe,@cpu.scrpad.tgt + >fe
     6BD2 83FE     
     6BD4 F0FE     
0041                                                   ; Copy last word
0042                       ;------------------------------------------------------
0043                       ; Restore register r0 - r2
0044                       ;------------------------------------------------------
0045 6BD6 C020  34         mov   @cpu.scrpad.tgt,r0    ; Restore r0
     6BD8 F000     
0046 6BDA C060  34         mov   @cpu.scrpad.tgt+2,r1  ; Restore r1
     6BDC F002     
0047 6BDE C0A0  34         mov   @cpu.scrpad.tgt+4,r2  ; Restore r2
     6BE0 F004     
0048                       ;------------------------------------------------------
0049                       ; Exit
0050                       ;------------------------------------------------------
0051               cpu.scrpad.backup.exit:
0052 6BE2 045B  20         b     *r11                  ; Return to caller
0053               
0054               
0055               ***************************************************************
0056               * cpu.scrpad.restore - Restore 256 bytes of scratchpad from
0057               *                      predefined target @cpu.scrpad.tgt
0058               *                      to destination >8300
0059               ***************************************************************
0060               *  bl   @cpu.scrpad.restore
0061               *--------------------------------------------------------------
0062               *  Register usage
0063               *  r0-r1
0064               *--------------------------------------------------------------
0065               *  Restore scratchpad from memory area @cpu.scrpad.tgt (+ >ff).
0066               *  Current workspace may not be in scratchpad >8300 when called.
0067               *
0068               *  Destroys r0,r1
0069               ********|*****|*********************|**************************
0070               cpu.scrpad.restore:
0071                       ;------------------------------------------------------
0072                       ; Prepare for copy loop, WS
0073                       ;------------------------------------------------------
0074 6BE4 0200  20         li    r0,cpu.scrpad.tgt
     6BE6 F000     
0075 6BE8 0201  20         li    r1,>8300
     6BEA 8300     
0076                       ;------------------------------------------------------
0077                       ; Copy 256 bytes from @cpu.scrpad.tgt to >8300
0078                       ;------------------------------------------------------
0079               cpu.scrpad.restore.copy:
0080 6BEC CC70  46         mov   *r0+,*r1+
0081 6BEE CC70  46         mov   *r0+,*r1+
0082 6BF0 0281  22         ci    r1,>8400
     6BF2 8400     
0083 6BF4 11FB  14         jlt   cpu.scrpad.restore.copy
0084                       ;------------------------------------------------------
0085                       ; Exit
0086                       ;------------------------------------------------------
0087               cpu.scrpad.restore.exit:
0088 6BF6 045B  20         b     *r11                  ; Return to caller
                   < runlib.asm
0227                       copy  "cpu_scrpad_paging.asm"    ; Scratchpad memory paging
     **** ****     > cpu_scrpad_paging.asm
0001               * FILE......: cpu_scrpad_paging.asm
0002               * Purpose...: CPU memory paging functions
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                     CPU memory paging
0006               *//////////////////////////////////////////////////////////////
0007               
0008               
0009               ***************************************************************
0010               * cpu.scrpad.pgout - Page out 256 bytes of scratchpad at >8300
0011               *                    to CPU memory destination P0 (tmp1)
0012               *                    and replace with 256 bytes of memory from
0013               *                    predefined destination @cpu.scrpad.target
0014               ***************************************************************
0015               *  bl   @cpu.scrpad.pgout
0016               *       DATA p0
0017               *
0018               *  P0 = CPU memory destination
0019               *--------------------------------------------------------------
0020               *  bl   @xcpu.scrpad.pgout
0021               *  tmp1 = CPU memory destination
0022               *--------------------------------------------------------------
0023               *  Register usage
0024               *  tmp3      = Copy of CPU memory destination
0025               *  tmp0-tmp2 = Used as temporary registers
0026               *  @waux1    = Copy of r5 (tmp1)
0027               *--------------------------------------------------------------
0028               *  Remarks
0029               *  Copies 256 bytes from scratchpad to CPU memory destination
0030               *  specified in P0 (tmp1).
0031               *
0032               *  Then switches to the newly copied workspace in P0 (tmp1).
0033               *
0034               *  Finally it copies 256 bytes from @cpu.scrpad.tgt
0035               *  to scratchpad >8300 and activates workspace at >8300
0036               ********|*****|*********************|**************************
0037               cpu.scrpad.pgout:
0038 6BF8 C15B  26         mov   *r11,tmp1             ; tmp1 = Memory target address
0039                       ;------------------------------------------------------
0040                       ; Copy registers r0-r7
0041                       ;------------------------------------------------------
0042 6BFA CD40  34         mov   r0,*tmp1+             ; Backup r0
0043 6BFC CD41  34         mov   r1,*tmp1+             ; Backup r1
0044 6BFE CD42  34         mov   r2,*tmp1+             ; Backup r2
0045 6C00 CD43  34         mov   r3,*tmp1+             ; Backup r3
0046 6C02 CD44  34         mov   r4,*tmp1+             ; Backup r4
0047 6C04 CD45  34         mov   r5,*tmp1+             ; Backup r5 (is tmp1, so is bogus)
0048 6C06 CD46  34         mov   r6,*tmp1+             ; Backup r6
0049 6C08 CD47  34         mov   r7,*tmp1+             ; Backup r7
0050                       ;------------------------------------------------------
0051                       ; Copy scratchpad memory to destination
0052                       ;------------------------------------------------------
0053               xcpu.scrpad.pgout:
0054 6C0A 0204  20         li    tmp0,>8310            ; tmp0 = Memory source address
     6C0C 8310     
0055                                                   ;        as of register r8
0056 6C0E 0206  20         li    tmp2,15               ; tmp2 = 15 iterations
     6C10 000F     
0057                       ;------------------------------------------------------
0058                       ; Copy memory
0059                       ;------------------------------------------------------
0060 6C12 CD74  46 !       mov   *tmp0+,*tmp1+         ; Copy word 1
0061 6C14 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 2
0062 6C16 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 3
0063 6C18 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 4
0064 6C1A CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 5
0065 6C1C CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 6
0066 6C1E CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 7
0067 6C20 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 8
0068 6C22 0606  14         dec   tmp2
0069 6C24 16F6  14         jne   -!                    ; Loop until done
0070                       ;------------------------------------------------------
0071                       ; Switch to newly copied workspace
0072                       ;------------------------------------------------------
0073 6C26 C37B  30         mov   *r11+,r13             ; R13=WP   (pop tmp1 from stack)
0074 6C28 020E  20         li    r14,cpu.scrpad.pgout.after.rtwp
     6C2A 2B70     
0075                                                   ; R14=PC
0076 6C2C 04CF  14         clr   r15                   ; R15=STATUS
0077                       ;------------------------------------------------------
0078                       ; If we get here, WS was copied to specified
0079                       ; destination.  Also contents of r13,r14,r15
0080                       ; are about to be overwritten by rtwp instruction.
0081                       ;------------------------------------------------------
0082 6C2E 0380  18         rtwp                        ; Activate copied workspace
0083                                                   ; in non-scratchpad memory!
0084               
0085               cpu.scrpad.pgout.after.rtwp:
0086 6C30 0460  28         b     @cpu.scrpad.restore   ; Restore scratchpad memory
     6C32 2B24     
0087                                                   ; from @cpu.scrpad.tgt to @>8300
0088                                                   ; and switch workspace to >8300.
0089                       ;------------------------------------------------------
0090                       ; Exit
0091                       ;------------------------------------------------------
0092               cpu.scrpad.pgout.exit:
0093 6C34 045B  20         b     *r11                  ; Return to caller
0094               
0095               
0096               ***************************************************************
0097               * cpu.scrpad.pgin - Page in 256 bytes of scratchpad memory
0098               *                   at >8300 from CPU memory specified in
0099               *                   p0 (tmp0)
0100               ***************************************************************
0101               *  bl   @cpu.scrpad.pgin
0102               *       DATA p0
0103               *
0104               *  P0 = CPU memory source
0105               *--------------------------------------------------------------
0106               *  bl   @memx.scrpad.pgin
0107               *  TMP0 = CPU memory source
0108               *--------------------------------------------------------------
0109               *  Register usage
0110               *  tmp0-tmp2 = Used as temporary registers
0111               *--------------------------------------------------------------
0112               *  Remarks
0113               *  Copies 256 bytes from CPU memory source to scratchpad >8300
0114               *  and activates workspace in scratchpad >8300
0115               *
0116               *  It's expected that the workspace is outside scratchpad >8300
0117               *  when calling this function.
0118               ********|*****|*********************|**************************
0119               cpu.scrpad.pgin:
0120 6C36 C13B  30         mov   *r11+,tmp0            ; tmp0 = Memory source address
0121                       ;------------------------------------------------------
0122                       ; Copy scratchpad memory to destination
0123                       ;------------------------------------------------------
0124               xcpu.scrpad.pgin:
0125 6C38 0205  20         li    tmp1,>8300            ; tmp1 = Memory destination address
     6C3A 8300     
0126 6C3C 0206  20         li    tmp2,16               ; tmp2 = 256/16
     6C3E 0010     
0127                       ;------------------------------------------------------
0128                       ; Copy memory
0129                       ;------------------------------------------------------
0130 6C40 CD74  46 !       mov   *tmp0+,*tmp1+         ; Copy word 1
0131 6C42 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 2
0132 6C44 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 3
0133 6C46 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 4
0134 6C48 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 5
0135 6C4A CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 6
0136 6C4C CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 7
0137 6C4E CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 8
0138 6C50 0606  14         dec   tmp2
0139 6C52 16F6  14         jne   -!                    ; Loop until done
0140                       ;------------------------------------------------------
0141                       ; Switch workspace to scratchpad memory
0142                       ;------------------------------------------------------
0143 6C54 02E0  18         lwpi  >8300                 ; Activate copied workspace
     6C56 8300     
0144                       ;------------------------------------------------------
0145                       ; Exit
0146                       ;------------------------------------------------------
0147               cpu.scrpad.pgin.exit:
0148 6C58 045B  20         b     *r11                  ; Return to caller
                   < runlib.asm
0229               
0231                       copy  "fio.equ"                  ; File I/O equates
     **** ****     > fio.equ
0001               * FILE......: fio.equ
0002               * Purpose...: Equates for file I/O operations
0003               
0004               ***************************************************************
0005               * File IO operations - Byte 0 in PAB
0006               ************************************@**************************
0007      0000     io.op.open       equ >00            ; OPEN
0008      0001     io.op.close      equ >01            ; CLOSE
0009      0002     io.op.read       equ >02            ; READ
0010      0003     io.op.write      equ >03            ; WRITE
0011      0004     io.op.rewind     equ >04            ; RESTORE/REWIND
0012      0005     io.op.load       equ >05            ; LOAD
0013      0006     io.op.save       equ >06            ; SAVE
0014      0007     io.op.delfile    equ >07            ; DELETE FILE
0015      0008     io.op.scratch    equ >08            ; SCRATCH
0016      0009     io.op.status     equ >09            ; STATUS
0017               ***************************************************************
0018               * File & data type - Byte 1 in PAB (Bit 0-4)
0019               ***************************************************************
0020               * Bit position: 4  3  21  0
0021               *               |  |  ||   \
0022               *               |  |  ||    File type
0023               *               |  |  ||    0 = INTERNAL
0024               *               |  |  ||    1 = FIXED
0025               *               |  |  \\
0026               *               |  |   File operation
0027               *               |  |   00 - UPDATE
0028               *               |  |   01 - OUTPUT
0029               *               |  |   10 - INPUT
0030               *               |  |   11 - APPEND
0031               *               |  |
0032               *               |  \
0033               *               |   Data type
0034               *               |   0 = DISPLAY
0035               *               |   1 = INTERNAL
0036               *               |
0037               *               \
0038               *                Record type
0039               *                0 = FIXED
0040               *                1 = VARIABLE
0041               ***************************************************************
0042               ; Bit position           43210
0043               ************************************|**************************
0044      0000     io.seq.upd.dis.fix  equ :00000      ; 00
0045      0001     io.rel.upd.dis.fix  equ :00001      ; 01
0046      0003     io.rel.out.dis.fix  equ :00011      ; 02
0047      0002     io.seq.out.dis.fix  equ :00010      ; 03
0048      0004     io.seq.inp.dis.fix  equ :00100      ; 04
0049      0005     io.rel.inp.dis.fix  equ :00101      ; 05
0050      0006     io.seq.app.dis.fix  equ :00110      ; 06
0051      0007     io.rel.app.dis.fix  equ :00111      ; 07
0052      0008     io.seq.upd.int.fix  equ :01000      ; 08
0053      0009     io.rel.upd.int.fix  equ :01001      ; 09
0054      000A     io.seq.out.int.fix  equ :01010      ; 0A
0055      000B     io.rel.out.int.fix  equ :01011      ; 0B
0056      000C     io.seq.inp.int.fix  equ :01100      ; 0C
0057      000D     io.rel.inp.int.fix  equ :01101      ; 0D
0058      000E     io.seq.app.int.fix  equ :01110      ; 0E
0059      000F     io.rel.app.int.fix  equ :01111      ; 0F
0060      0010     io.seq.upd.dis.var  equ :10000      ; 10
0061      0011     io.rel.upd.dis.var  equ :10001      ; 11
0062      0012     io.seq.out.dis.var  equ :10010      ; 12
0063      0013     io.rel.out.dis.var  equ :10011      ; 13
0064      0014     io.seq.inp.dis.var  equ :10100      ; 14
0065      0015     io.rel.inp.dis.var  equ :10101      ; 15
0066      0016     io.seq.app.dis.var  equ :10110      ; 16
0067      0017     io.rel.app.dis.var  equ :10111      ; 17
0068      0018     io.seq.upd.int.var  equ :11000      ; 18
0069      0019     io.rel.upd.int.var  equ :11001      ; 19
0070      001A     io.seq.out.int.var  equ :11010      ; 1A
0071      001B     io.rel.out.int.var  equ :11011      ; 1B
0072      001C     io.seq.inp.int.var  equ :11100      ; 1C
0073      001D     io.rel.inp.int.var  equ :11101      ; 1D
0074      001E     io.seq.app.int.var  equ :11110      ; 1E
0075      001F     io.rel.app.int.var  equ :11111      ; 1F
0076               ***************************************************************
0077               * File error codes - Byte 1 in PAB (Bits 5-7)
0078               ************************************|**************************
0079      0000     io.err.no_error_occured             equ 0
0080                       ; Error code 0 with condition bit reset, indicates that
0081                       ; no error has occured
0082               
0083      0000     io.err.bad_device_name              equ 0
0084                       ; Device indicated not in system
0085                       ; Error code 0 with condition bit set, indicates a
0086                       ; device not present in system
0087               
0088      0001     io.err.device_write_prottected      equ 1
0089                       ; Device is write protected
0090               
0091      0002     io.err.bad_open_attribute           equ 2
0092                       ; One or more of the OPEN attributes are illegal or do
0093                       ; not match the file's actual characteristics.
0094                       ; This could be:
0095                       ;   * File type
0096                       ;   * Record length
0097                       ;   * I/O mode
0098                       ;   * File organization
0099               
0100      0003     io.err.illegal_operation            equ 3
0101                       ; Either an issued I/O command was not supported, or a
0102                       ; conflict with the OPEN mode has occured
0103               
0104      0004     io.err.out_of_table_buffer_space    equ 4
0105                       ; The amount of space left on the device is insufficient
0106                       ; for the requested operation
0107               
0108      0005     io.err.eof                          equ 5
0109                       ; Attempt to read past end of file.
0110                       ; This error may also be given for non-existing records
0111                       ; in a relative record file
0112               
0113      0006     io.err.device_error                 equ 6
0114                       ; Covers all hard device errors, such as parity and
0115                       ; bad medium errors
0116               
0117      0007     io.err.file_error                   equ 7
0118                       ; Covers all file-related error like: program/data
0119                       ; file mismatch, non-existing file opened for input mode, etc.
                   < runlib.asm
0232                       copy  "fio_dsrlnk.asm"           ; DSRLNK for peripheral communication
     **** ****     > fio_dsrlnk.asm
0001               * FILE......: fio_dsrlnk.asm
0002               * Purpose...: Custom DSRLNK implementation
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                          DSRLNK
0006               *//////////////////////////////////////////////////////////////
0007               
0008               
0009               ***************************************************************
0010               * dsrlnk - DSRLNK for file I/O in DSR space >1000 - >1F00
0011               ***************************************************************
0012               *  blwp @dsrlnk
0013               *  data p0
0014               *--------------------------------------------------------------
0015               *  Input:
0016               *  P0     = 8 or 10 (a)
0017               *  @>8356 = Pointer to VDP PAB file descriptor length (PAB+9)
0018               *--------------------------------------------------------------
0019               *  Output:
0020               *  r0 LSB = Bits 13-15 from VDP PAB byte 1, right aligned
0021               *--------------------------------------------------------------
0022               *  Remarks:
0023               *
0024               *  You need to specify following equates in main program
0025               *
0026               *  dsrlnk.dsrlws      equ >????     ; Address of dsrlnk workspace
0027               *  dsrlnk.namsto      equ >????     ; 8-byte RAM buffer for storing device name
0028               *
0029               *  Scratchpad memory usage
0030               *  >8322            Parameter (>08) or (>0A) passed to dsrlnk
0031               *  >8356            Pointer to PAB
0032               *  >83D0            CRU address of current device
0033               *  >83D2            DSR entry address
0034               *  >83e0 - >83ff    GPL / DSRLNK workspace
0035               *
0036               *  Credits
0037               *  Originally appeared in Miller Graphics The Smart Programmer.
0038               *  This version based on version of Paolo Bagnaresi.
0039               *
0040               *  The following memory address can be used to directly jump
0041               *  into the DSR in consequtive calls without having to
0042               *  scan the PEB cards again:
0043               *
0044               *  dsrlnk.namsto  -  8-byte RAM buf for holding device name
0045               *  dsrlnk.savcru  -  CRU address of device in prev. DSR call
0046               *  dsrlnk.savent  -  DSR entry addr of prev. DSR call
0047               *  dsrlnk.savpab  -  Pointer to Device or Subprogram in PAB
0048               *  dsrlnk.savver  -  Version used in prev. DSR call
0049               *  dsrlnk.savlen  -  Length of DSR name of prev. DSR call (in MSB)
0050               *  dsrlnk.flgptr  -  Pointer to VDP PAB byte 1 (flag byte)
0051               
0052               *--------------------------------------------------------------
0053      A40A     dsrlnk.dstype equ   dsrlnk.dsrlws + 10
0054                                                   ; dstype is address of R5 of DSRLNK ws.
0055               ********|*****|*********************|**************************
0056 6C5A A400     dsrlnk  data  dsrlnk.dsrlws         ; dsrlnk workspace
0057 6C5C 2B9E             data  dsrlnk.init           ; Entry point
0058                       ;------------------------------------------------------
0059                       ; DSRLNK entry point
0060                       ;------------------------------------------------------
0061               dsrlnk.init:
0062 6C5E C17E  30         mov   *r14+,r5              ; Get pgm type for link
0063 6C60 C805  38         mov   r5,@dsrlnk.sav8a      ; Save data following blwp @dsrlnk (8 or >a)
     6C62 A428     
0064 6C64 53E0  34         szcb  @hb$20,r15            ; Reset equal bit in status register
     6C66 201C     
0065 6C68 C020  30         mov   @>8356,r0             ; Get pointer to PAB+9 in VDP
     6C6A 8356     
0066 6C6C C240  18         mov   r0,r9                 ; Save pointer
0067                       ;------------------------------------------------------
0068                       ; Fetch file descriptor length from PAB
0069                       ;------------------------------------------------------
0070 6C6E 0229  22         ai    r9,>fff8              ; Adjust r9 to addr PAB byte 1
     6C70 FFF8     
0071                                                   ; FLAG byte->(pabaddr+9)-8
0072 6C72 C809  38         mov   r9,@dsrlnk.flgptr     ; Save pointer to PAB byte 1
     6C74 A434     
0073                       ;---------------------------; Inline VSBR start
0074 6C76 06C0  14         swpb  r0                    ;
0075 6C78 D800  30         movb  r0,@vdpa              ; Send low byte
     6C7A 8C02     
0076 6C7C 06C0  14         swpb  r0                    ;
0077 6C7E D800  30         movb  r0,@vdpa              ; Send high byte
     6C80 8C02     
0078 6C82 D0E0  30         movb  @vdpr,r3              ; Read byte from VDP RAM
     6C84 8800     
0079                       ;---------------------------; Inline VSBR end
0080 6C86 0983  32         srl   r3,8                  ; Move to low byte
0081               
0082                       ;------------------------------------------------------
0083                       ; Fetch file descriptor device name from PAB
0084                       ;------------------------------------------------------
0085 6C88 0704  14         seto  r4                    ; Init counter
0086 6C8A 0202  20         li    r2,dsrlnk.namsto      ; Point to 8-byte CPU buffer
     6C8C A420     
0087 6C8E 0580  14 !       inc   r0                    ; Point to next char of name
0088 6C90 0584  14         inc   r4                    ; Increment char counter
0089 6C92 0284  22         ci    r4,>0007              ; Check if length more than 7 chars
     6C94 0007     
0090 6C96 1573  14         jgt   dsrlnk.error.devicename_invalid
0091                                                   ; Yes, error
0092 6C98 80C4  18         c     r4,r3                 ; End of name?
0093 6C9A 130C  14         jeq   dsrlnk.device_name.get_length
0094                                                   ; Yes
0095               
0096                       ;---------------------------; Inline VSBR start
0097 6C9C 06C0  14         swpb  r0                    ;
0098 6C9E D800  30         movb  r0,@vdpa              ; Send low byte
     6CA0 8C02     
0099 6CA2 06C0  14         swpb  r0                    ;
0100 6CA4 D800  30         movb  r0,@vdpa              ; Send high byte
     6CA6 8C02     
0101 6CA8 D060  30         movb  @vdpr,r1              ; Read byte from VDP RAM
     6CAA 8800     
0102                       ;---------------------------; Inline VSBR end
0103               
0104                       ;------------------------------------------------------
0105                       ; Look for end of device name, for example "DSK1."
0106                       ;------------------------------------------------------
0107 6CAC DC81  32         movb  r1,*r2+               ; Move into buffer
0108 6CAE 9801  34         cb    r1,@dsrlnk.period     ; Is character a '.'
     6CB0 2D0A     
0109 6CB2 16ED  14         jne   -!                    ; No, loop next char
0110                       ;------------------------------------------------------
0111                       ; Determine device name length
0112                       ;------------------------------------------------------
0113               dsrlnk.device_name.get_length:
0114 6CB4 C104  18         mov   r4,r4                 ; Check if length = 0
0115 6CB6 1363  14         jeq   dsrlnk.error.devicename_invalid
0116                                                   ; Yes, error
0117 6CB8 04E0  26         clr   @>83d0
     6CBA 83D0     
0118 6CBC C804  30         mov   r4,@>8354             ; Save name length for search (length
     6CBE 8354     
0119                                                   ; goes to >8355 but overwrites >8354!)
0120 6CC0 C804  38         mov   r4,@dsrlnk.savlen     ; Save name length for nextr dsrlnk call
     6CC2 A432     
0121               
0122 6CC4 0584  14         inc   r4                    ; Adjust for dot
0123 6CC6 A804  30         a     r4,@>8356             ; Point to position after name
     6CC8 8356     
0124 6CCA C820  50         mov   @>8356,@dsrlnk.savpab ; Save pointer for next dsrlnk call
     6CCC 8356     
     6CCE A42E     
0125                       ;------------------------------------------------------
0126                       ; Prepare for DSR scan >1000 - >1f00
0127                       ;------------------------------------------------------
0128               dsrlnk.dsrscan.start:
0129 6CD0 02E0  18         lwpi  >83e0                 ; Use GPL WS
     6CD2 83E0     
0130 6CD4 04C1  14         clr   r1                    ; Version found of dsr
0131 6CD6 020C  20         li    r12,>0f00             ; Init cru address
     6CD8 0F00     
0132                       ;------------------------------------------------------
0133                       ; Turn off ROM on current card
0134                       ;------------------------------------------------------
0135               dsrlnk.dsrscan.cardoff:
0136 6CDA C30C  18         mov   r12,r12               ; Anything to turn off?
0137 6CDC 1301  14         jeq   dsrlnk.dsrscan.cardloop
0138                                                   ; No, loop over cards
0139 6CDE 1E00  16         sbz   0                     ; Yes, turn off
0140                       ;------------------------------------------------------
0141                       ; Loop over cards and look if DSR present
0142                       ;------------------------------------------------------
0143               dsrlnk.dsrscan.cardloop:
0144 6CE0 022C  22         ai    r12,>0100             ; Next ROM to turn on
     6CE2 0100     
0145 6CE4 04E0  26         clr   @>83d0                ; Clear in case we are done
     6CE6 83D0     
0146 6CE8 028C  22         ci    r12,>2000             ; Card scan complete? (>1000 to >1F00)
     6CEA 2000     
0147 6CEC 1346  14         jeq   dsrlnk.error.nodsr_found
0148                                                   ; Yes, no matching DSR found
0149 6CEE C80C  30         mov   r12,@>83d0            ; Save address of next cru
     6CF0 83D0     
0150                       ;------------------------------------------------------
0151                       ; Look at card ROM (@>4000 eq 'AA' ?)
0152                       ;------------------------------------------------------
0153 6CF2 1D00  16         sbo   0                     ; Turn on ROM
0154 6CF4 0202  20         li    r2,>4000              ; Start at beginning of ROM
     6CF6 4000     
0155 6CF8 9812  42         cb    *r2,@dsrlnk.$aa00     ; Check for a valid DSR header
     6CFA 2D06     
0156 6CFC 16EE  14         jne   dsrlnk.dsrscan.cardoff
0157                                                   ; No ROM found on card
0158                       ;------------------------------------------------------
0159                       ; Valid DSR ROM found. Now loop over chain/subprograms
0160                       ;------------------------------------------------------
0161                       ; dstype is the address of R5 of the DSRLNK workspace,
0162                       ; which is where 8 for a DSR or 10 (>A) for a subprogram
0163                       ; is stored before the DSR ROM is searched.
0164                       ;------------------------------------------------------
0165 6CFE A0A0  34         a     @dsrlnk.dstype,r2     ; Goto first pointer (byte 8 or 10)
     6D00 A40A     
0166 6D02 1003  14         jmp   dsrlnk.dsrscan.getentry
0167                       ;------------------------------------------------------
0168                       ; Next DSR entry
0169                       ;------------------------------------------------------
0170               dsrlnk.dsrscan.nextentry:
0171 6D04 C0A0  30         mov   @>83d2,r2             ; Offset 0 > Fetch link to next DSR or
     6D06 83D2     
0172                                                   ; subprogram
0173               
0174 6D08 1D00  16         sbo   0                     ; Turn ROM back on
0175                       ;------------------------------------------------------
0176                       ; Get DSR entry
0177                       ;------------------------------------------------------
0178               dsrlnk.dsrscan.getentry:
0179 6D0A C092  26         mov   *r2,r2                ; Is address a zero? (end of chain?)
0180 6D0C 13E6  14         jeq   dsrlnk.dsrscan.cardoff
0181                                                   ; Yes, no more DSRs or programs to check
0182 6D0E C802  30         mov   r2,@>83d2             ; Offset 0 > Store link to next DSR or
     6D10 83D2     
0183                                                   ; subprogram
0184               
0185 6D12 05C2  14         inct  r2                    ; Offset 2 > Has call address of current
0186                                                   ; DSR/subprogram code
0187               
0188 6D14 C272  30         mov   *r2+,r9               ; Store call address in r9. Move r2 to
0189                                                   ; offset 4 (DSR/subprogram name)
0190                       ;------------------------------------------------------
0191                       ; Check file descriptor in DSR
0192                       ;------------------------------------------------------
0193 6D16 04C5  14         clr   r5                    ; Remove any old stuff
0194 6D18 D160  30         movb  @>8355,r5             ; Get length as counter
     6D1A 8355     
0195 6D1C 1309  14         jeq   dsrlnk.dsrscan.call_dsr
0196                                                   ; If zero, do not further check, call DSR
0197                                                   ; program
0198               
0199 6D1E 9C85  28         cb    r5,*r2+               ; See if length matches
0200 6D20 16F1  14         jne   dsrlnk.dsrscan.nextentry
0201                                                   ; No, length does not match.
0202                                                   ; Go process next DSR entry
0203               
0204 6D22 0985  32         srl   r5,8                  ; Yes, move to low byte
0205 6D24 0206  20         li    r6,dsrlnk.namsto      ; Point to 8-byte CPU buffer
     6D26 A420     
0206 6D28 9CB6  38 !       cb    *r6+,*r2+             ; Compare byte in CPU buffer with byte in
0207                                                   ; DSR ROM
0208 6D2A 16EC  14         jne   dsrlnk.dsrscan.nextentry
0209                                                   ; Try next DSR entry if no match
0210 6D2C 0605  14         dec   r5                    ; Update loop counter
0211 6D2E 16FC  14         jne   -!                    ; Loop until full length checked
0212                       ;------------------------------------------------------
0213                       ; Call DSR program in card/device
0214                       ;------------------------------------------------------
0215               dsrlnk.dsrscan.call_dsr:
0216 6D30 0581  14         inc   r1                    ; Next version found
0217 6D32 C80C  38         mov   r12,@dsrlnk.savcru    ; Save CRU address
     6D34 A42A     
0218 6D36 C809  38         mov   r9,@dsrlnk.savent     ; Save DSR entry address
     6D38 A42C     
0219 6D3A C801  38         mov   r1,@dsrlnk.savver     ; Save DSR Version number
     6D3C A430     
0220               
0221 6D3E 020D  20         li    r13,>9800             ; Set GROM base to >9800 to prevent
     6D40 9800     
0222                                                   ; lockup of TI Disk Controller DSR.
0223               
0224 6D42 020F  20         li    r15,>8C02             ; Set VDP port address, needed to prevent
     6D44 8C02     
0225                                                   ; lockup of TI Disk Controller DSR.
0226               
0227 6D46 0699  24         bl    *r9                   ; Execute DSR
0228                       ;
0229                       ; Depending on IO result the DSR in card ROM does RET
0230                       ; or (INCT R11 + RET), meaning either (1) or (2) get executed.
0231                       ;
0232 6D48 10DD  14         jmp   dsrlnk.dsrscan.nextentry
0233                                                   ; (1) error return
0234 6D4A 1E00  16         sbz   0                     ; (2) turn off card/device if good return
0235 6D4C 02E0  18         lwpi  dsrlnk.dsrlws         ; (2) restore workspace
     6D4E A400     
0236 6D50 C009  30         mov   r9,r0                 ; Point to flag byte (PAB+1) in VDP PAB
0237                       ;------------------------------------------------------
0238                       ; Returned from DSR
0239                       ;------------------------------------------------------
0240               dsrlnk.dsrscan.return_dsr:
0241 6D52 C060  42         mov   @dsrlnk.sav8a,r1      ; get back data following blwp @dsrlnk
     6D54 A428     
0242                                                   ; (8 or >a)
0243 6D56 0281  26         ci    r1,8                  ; was it 8?
     6D58 0008     
0244 6D5A 1303  14         jeq   dsrlnk.dsrscan.dsr.8  ; yes, jump: normal dsrlnk
0245 6D5C D060  38         movb  @>8350,r1             ; no, we have a data >a.
     6D5E 8350     
0246                                                   ; Get error byte from @>8350
0247 6D60 1008  14         jmp   dsrlnk.dsrscan.dsr.a  ; go and return error byte to the caller
0248               
0249                       ;------------------------------------------------------
0250                       ; Read VDP PAB byte 1 after DSR call completed (status)
0251                       ;------------------------------------------------------
0252               dsrlnk.dsrscan.dsr.8:
0253                       ;---------------------------; Inline VSBR start
0254 6D62 06C0  22         swpb  r0                    ;
0255 6D64 D800  34         movb  r0,@vdpa              ; send low byte
     6D66 8C02     
0256 6D68 06C0  22         swpb  r0                    ;
0257 6D6A D800  34         movb  r0,@vdpa              ; send high byte
     6D6C 8C02     
0258 6D6E D060  38         movb  @vdpr,r1              ; read byte from VDP ram
     6D70 8800     
0259                       ;---------------------------; Inline VSBR end
0260               
0261                       ;------------------------------------------------------
0262                       ; Return DSR error to caller
0263                       ;------------------------------------------------------
0264               dsrlnk.dsrscan.dsr.a:
0265 6D72 09D1  50         srl   r1,13                 ; just keep error bits
0266 6D74 1605  14         jne   dsrlnk.error.io_error
0267                                                   ; handle IO error
0268 6D76 0380  30         rtwp                        ; Return from DSR workspace to caller
0269                                                   ; workspace
0270               
0271                       ;------------------------------------------------------
0272                       ; IO-error handler
0273                       ;------------------------------------------------------
0274               dsrlnk.error.nodsr_found_off:
0275 6D78 1E00  20         sbz   >00                   ; Turn card off, nomatter what
0276               dsrlnk.error.nodsr_found:
0277 6D7A 02E0  18         lwpi  dsrlnk.dsrlws         ; No DSR found, restore workspace
     6D7C A400     
0278               dsrlnk.error.devicename_invalid:
0279 6D7E 04C1  22         clr   r1                    ; clear flag for error 0 = bad device name
0280               dsrlnk.error.io_error:
0281 6D80 06C1  22         swpb  r1                    ; put error in hi byte
0282 6D82 D741  38         movb  r1,*r13               ; store error flags in callers r0
0283 6D84 F3E0  42         socb  @hb$20,r15            ; \ Set equal bit in copy of status register
     6D86 201C     
0284                                                   ; / to indicate error
0285 6D88 0380  30         rtwp                        ; Return from DSR workspace to caller
0286                                                   ; workspace
0287               
0288               
0289               ***************************************************************
0290               * dsrln.reuse - Reuse previous DSRLNK call for improved speed
0291               ***************************************************************
0292               *  blwp @dsrlnk.reuse
0293               *--------------------------------------------------------------
0294               *  Input:
0295               *  @>8356         = Pointer to VDP PAB file descriptor length byte (PAB+9)
0296               *  @dsrlnk.savcru = CRU address of device in previous DSR call
0297               *  @dsrlnk.savent = DSR entry address of previous DSR call
0298               *  @dsrlnk.savver = Version used in previous DSR call
0299               *  @dsrlnk.pabptr = Pointer to PAB in VDP memory, set in previous DSR call
0300               *--------------------------------------------------------------
0301               *  Output:
0302               *  r0 LSB = Bits 13-15 from VDP PAB byte 1, right aligned
0303               *--------------------------------------------------------------
0304               *  Remarks:
0305               *   Call the same DSR entry again without having to scan through
0306               *   all devices again.
0307               *
0308               *   Expects dsrlnk.savver, @dsrlnk.savent, @dsrlnk.savcru to be
0309               *   set by previous DSRLNK call.
0310               ********|*****|*********************|**************************
0311               dsrlnk.reuse:
0312 6D8A A400             data  dsrlnk.dsrlws         ; dsrlnk workspace
0313 6D8C 2CCE             data  dsrlnk.reuse.init     ; entry point
0314                       ;------------------------------------------------------
0315                       ; DSRLNK entry point
0316                       ;------------------------------------------------------
0317               dsrlnk.reuse.init:
0318 6D8E 02E0  18         lwpi  >83e0                 ; Use GPL WS
     6D90 83E0     
0319               
0320 6D92 53E0  34         szcb  @hb$20,r15            ; reset equal bit in status register
     6D94 201C     
0321                       ;------------------------------------------------------
0322                       ; Restore dsrlnk variables of previous DSR call
0323                       ;------------------------------------------------------
0324 6D96 020B  20         li    r11,dsrlnk.savcru     ; Get pointer to last used CRU
     6D98 A42A     
0325 6D9A C33B  30         mov   *r11+,r12             ; Get CRU address         < @dsrlnk.savcru
0326 6D9C C27B  30         mov   *r11+,r9              ; Get DSR entry address   < @dsrlnk.savent
0327 6D9E C83B  42         mov   *r11+,@>8356          ; \ Get pointer to Device name or
     6DA0 8356     
0328                                                   ; / or subprogram in PAB  < @dsrlnk.savpab
0329 6DA2 C07B  30         mov   *r11+,R1              ; Get DSR Version number  < @dsrlnk.savver
0330 6DA4 C81B  38         mov   *r11,@>8354           ; Get device name length  < @dsrlnk.savlen
     6DA6 8354     
0331                       ;------------------------------------------------------
0332                       ; Call DSR program in card/device
0333                       ;------------------------------------------------------
0334 6DA8 020F  20         li    r15,>8C02             ; Set VDP port address, needed to prevent
     6DAA 8C02     
0335                                                   ; lockup of TI Disk Controller DSR.
0336               
0337 6DAC 1D00  16         sbo   >00                   ; Open card/device ROM
0338               
0339 6DAE 9820  50         cb    @>4000,@dsrlnk.$aa00  ; Valid identifier found?
     6DB0 4000     
     6DB2 2D06     
0340 6DB4 16E2  14         jne   dsrlnk.error.nodsr_found
0341                                                   ; No, error code 0 = Bad Device name
0342                                                   ; The above jump may happen only in case of
0343                                                   ; either card hardware malfunction or if
0344                                                   ; there are 2 cards opened at the same time.
0345               
0346 6DB6 0699  24         bl    *r9                   ; Execute DSR
0347                       ;
0348                       ; Depending on IO result the DSR in card ROM does RET
0349                       ; or (INCT R11 + RET), meaning either (1) or (2) get executed.
0350                       ;
0351 6DB8 10DF  14         jmp   dsrlnk.error.nodsr_found_off
0352                                                   ; (1) error return
0353 6DBA 1E00  16         sbz   >00                   ; (2) turn off card ROM if good return
0354                       ;------------------------------------------------------
0355                       ; Now check if any DSR error occured
0356                       ;------------------------------------------------------
0357 6DBC 02E0  18         lwpi  dsrlnk.dsrlws         ; Restore workspace
     6DBE A400     
0358 6DC0 C020  42         mov   @dsrlnk.flgptr,r0     ; Get pointer to VDP PAB byte 1
     6DC2 A434     
0359               
0360 6DC4 10C6  14         jmp   dsrlnk.dsrscan.return_dsr
0361                                                   ; Rest is the same as with normal DSRLNK
0362               
0363               
0364               ********************************************************************************
0365               
0366 6DC6 AA00     dsrlnk.$aa00      data   >aa00      ; Used for identifying DSR header
0367 6DC8 0008     dsrlnk.$0008      data   >0008      ; 8 is the data that usually follows
0368                                                   ; a @blwp @dsrlnk
0369 6DCA 2E       dsrlnk.period     text  '.'         ; For finding end of device name
0370               
0371                       even
                   < runlib.asm
0233                       copy  "fio_level3.asm"           ; File I/O level 3 support
     **** ****     > fio_level3.asm
0001               * FILE......: fio_level3.asm
0002               * Purpose...: File I/O level 3 support
0003               
0004               
0005               ***************************************************************
0006               * PAB  - Peripheral Access Block
0007               ********|*****|*********************|**************************
0008               ; my_pab:
0009               ;       byte  io.op.open            ;  0    - OPEN
0010               ;       byte  io.seq.inp.dis.var    ;  1    - INPUT, VARIABLE, DISPLAY
0011               ;                                   ;         Bit 13-15 used by DSR to return
0012               ;                                   ;         file error details to DSRLNK
0013               ;       data  vrecbuf               ;  2-3  - Record buffer in VDP memory
0014               ;       byte  80                    ;  4    - Record length (80 chars maximum)
0015               ;       byte  0                     ;  5    - Character count (bytes read)
0016               ;       data  >0000                 ;  6-7  - Seek record (fixed records only)
0017               ;       byte  >00                   ;  8    - Screen offset (cassette DSR only)
0018               ; -------------------------------------------------------------
0019               ;       byte  11                    ;  9    - File descriptor length
0020               ;       text 'DSK1.MYFILE'          ; 10-.. - File descriptor name
0021               ;                                             (Device + '.' + File name)
0022               ;       even
0023               ***************************************************************
0024               
0025               
0026               ***************************************************************
0027               * file.open - Open File for procesing
0028               ***************************************************************
0029               *  bl   @file.open
0030               *       data P0,P1
0031               *--------------------------------------------------------------
0032               *  P0 = Address of PAB in VDP RAM
0033               *  P1 = LSB contains File type/mode
0034               *--------------------------------------------------------------
0035               *  bl   @xfile.open
0036               *
0037               *  R0 = Address of PAB in VDP RAM
0038               *  R1 = LSB contains File type/mode
0039               *--------------------------------------------------------------
0040               *  Output:
0041               *  tmp0     = Copy of VDP PAB byte 1 after operation
0042               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0043               *  tmp2 LSB = Copy of status register after operation
0044               ********|*****|*********************|**************************
0045               file.open:
0046 6DCC C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0047 6DCE C07B  46         mov   *r11+,r1              ; Get file type/mode
0048               *--------------------------------------------------------------
0049               * Initialisation
0050               *--------------------------------------------------------------
0051               xfile.open:
0052 6DD0 0649  22         dect  stack
0053 6DD2 C64B  38         mov   r11,*stack            ; Save return address
0054                       ;------------------------------------------------------
0055                       ; Initialisation
0056                       ;------------------------------------------------------
0057 6DD4 0204  24         li    tmp0,dsrlnk.savcru
     6DD6 A42A     
0058 6DD8 04F4  38         clr   *tmp0+                ; Clear @dsrlnk.savcru
0059 6DDA 04F4  38         clr   *tmp0+                ; Clear @dsrlnk.savent
0060 6DDC 04F4  38         clr   *tmp0+                ; Clear @dsrlnk.savver
0061 6DDE 04D4  30         clr   *tmp0                 ; Clear @dsrlnk.pabflg
0062                       ;------------------------------------------------------
0063                       ; Set pointer to VDP disk buffer header
0064                       ;------------------------------------------------------
0065 6DE0 0205  24         li    tmp1,>37D7            ; \ VDP Disk buffer header
     6DE2 37D7     
0066 6DE4 C805  34         mov   tmp1,@>8370           ; | Pointer at Fixed scratchpad
     6DE6 8370     
0067                                                   ; / location
0068 6DE8 C801  42         mov   r1,@fh.filetype       ; Set file type/mode
     6DEA A44C     
0069 6DEC 04C5  22         clr   tmp1                  ; io.op.open
0070 6DEE 101F  14         jmp   _file.record.fop      ; Do file operation
0071               
0072               
0073               
0074               ***************************************************************
0075               * file.close - Close currently open file
0076               ***************************************************************
0077               *  bl   @file.close
0078               *       data P0
0079               *--------------------------------------------------------------
0080               *  P0 = Address of PAB in VDP RAM
0081               *--------------------------------------------------------------
0082               *  bl   @xfile.close
0083               *
0084               *  R0 = Address of PAB in VDP RAM
0085               *--------------------------------------------------------------
0086               *  Output:
0087               *  tmp0 LSB = Copy of VDP PAB byte 1 after operation
0088               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0089               *  tmp2 LSB = Copy of status register after operation
0090               ********|*****|*********************|**************************
0091               file.close:
0092 6DF0 C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0093               *--------------------------------------------------------------
0094               * Initialisation
0095               *--------------------------------------------------------------
0096               xfile.close:
0097 6DF2 0649  22         dect  stack
0098 6DF4 C64B  38         mov   r11,*stack            ; Save return address
0099 6DF6 0205  24         li    tmp1,io.op.close      ; io.op.close
     6DF8 0001     
0100 6DFA 1019  14         jmp   _file.record.fop      ; Do file operation
0101               
0102               
0103               ***************************************************************
0104               * file.record.read - Read record from file
0105               ***************************************************************
0106               *  bl   @file.record.read
0107               *       data P0
0108               *--------------------------------------------------------------
0109               *  P0 = Address of PAB in VDP RAM (without +9 offset!)
0110               *--------------------------------------------------------------
0111               *  bl   @xfile.record.read
0112               *
0113               *  R0 = Address of PAB in VDP RAM
0114               *--------------------------------------------------------------
0115               *  Output:
0116               *  tmp0     = Copy of VDP PAB byte 1 after operation
0117               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0118               *  tmp2 LSB = Copy of status register after operation
0119               ********|*****|*********************|**************************
0120               file.record.read:
0121 6DFC C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0122               *--------------------------------------------------------------
0123               * Initialisation
0124               *--------------------------------------------------------------
0125 6DFE 0649  22         dect  stack
0126 6E00 C64B  38         mov   r11,*stack            ; Save return address
0127               
0128 6E02 0205  24         li    tmp1,io.op.read       ; io.op.read
     6E04 0002     
0129 6E06 1013  14         jmp   _file.record.fop      ; Do file operation
0130               
0131               
0132               
0133               ***************************************************************
0134               * file.record.write - Write record to file
0135               ***************************************************************
0136               *  bl   @file.record.write
0137               *       data P0
0138               *--------------------------------------------------------------
0139               *  P0 = Address of PAB in VDP RAM (without +9 offset!)
0140               *--------------------------------------------------------------
0141               *  bl   @xfile.record.write
0142               *
0143               *  R0 = Address of PAB in VDP RAM
0144               *--------------------------------------------------------------
0145               *  Output:
0146               *  tmp0     = Copy of VDP PAB byte 1 after operation
0147               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0148               *  tmp2 LSB = Copy of status register after operation
0149               ********|*****|*********************|**************************
0150               file.record.write:
0151 6E08 C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0152               *--------------------------------------------------------------
0153               * Initialisation
0154               *--------------------------------------------------------------
0155 6E0A 0649  22         dect  stack
0156 6E0C C64B  38         mov   r11,*stack            ; Save return address
0157               
0158 6E0E C100  30         mov   r0,tmp0               ; VDP write address (PAB byte 0)
0159 6E10 0224  30         ai    tmp0,5                ; Position to PAB byte 5
     6E12 0005     
0160               
0161 6E14 C160  42         mov   @fh.reclen,tmp1       ; Get record length
     6E16 A43E     
0162               
0163 6E18 06A0  36         bl    @xvputb               ; Write character count to PAB
     6E1A 22CC     
0164                                                   ; \ i  tmp0 = VDP target address
0165                                                   ; / i  tmp1 = Byte to write
0166               
0167 6E1C 0205  24         li    tmp1,io.op.write      ; io.op.write
     6E1E 0003     
0168 6E20 1006  14         jmp   _file.record.fop      ; Do file operation
0169               
0170               
0171               
0172               file.record.seek:
0173 6E22 1000  14         nop                         ; Not yet supported
0174               
0175               
0176               file.image.load:
0177 6E24 1000  14         nop                         ; Not yet supported
0178               
0179               
0180               file.image.save:
0181 6E26 1000  14         nop                         ; Not yet supported
0182               
0183               
0184               file.delete:
0185 6E28 1000  14         nop                         ; Not yet supported
0186               
0187               file.rename:
0188 6E2A 1000  14         nop                         ; Not yet supported
0189               
0190               
0191               file.status:
0192 6E2C 1000  14         nop
0193               
0194               
0195               
0196               ***************************************************************
0197               * _file.record.fop - File operation
0198               ***************************************************************
0199               * Called internally via JMP/B by file operations
0200               *--------------------------------------------------------------
0201               *  Input:
0202               *  r0   = Address of PAB in VDP RAM
0203               *  r1   = File type/mode
0204               *  tmp1 = File operation opcode
0205               *
0206               *  @fh.offsetopcode = >00  Data buffer in VDP RAM
0207               *  @fh.offsetopcode = >40  Data buffer in CPU RAM
0208               *--------------------------------------------------------------
0209               *  Output:
0210               *  tmp0     = Copy of VDP PAB byte 1 after operation
0211               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0212               *  tmp2 LSB = Copy of status register after operation
0213               *--------------------------------------------------------------
0214               *  Register usage:
0215               *  r0, r1, tmp0, tmp1, tmp2
0216               *--------------------------------------------------------------
0217               *  Remarks
0218               *  Private, only to be called from inside fio_level3 module
0219               *  via jump or branch instruction.
0220               *
0221               *  Uses @waux1 for backup/restore of memory word @>8322
0222               ********|*****|*********************|**************************
0223               _file.record.fop:
0224                       ;------------------------------------------------------
0225                       ; Write to PAB required?
0226                       ;------------------------------------------------------
0227 6E2E C800  42         mov   r0,@fh.pab.ptr        ; Backup of pointer to current VDP PAB
     6E30 A436     
0228                       ;------------------------------------------------------
0229                       ; Set file opcode in VDP PAB
0230                       ;------------------------------------------------------
0231 6E32 C100  30         mov   r0,tmp0               ; VDP write address (PAB byte 0)
0232               
0233 6E34 A160  42         a     @fh.offsetopcode,tmp1 ; Inject offset for file I/O opcode
     6E36 A44E     
0234                                                   ; >00 = Data buffer in VDP RAM
0235                                                   ; >40 = Data buffer in CPU RAM
0236               
0237 6E38 06A0  36         bl    @xvputb               ; Write file I/O opcode to VDP
     6E3A 22CC     
0238                                                   ; \ i  tmp0 = VDP target address
0239                                                   ; / i  tmp1 = Byte to write
0240                       ;------------------------------------------------------
0241                       ; Set file type/mode in VDP PAB
0242                       ;------------------------------------------------------
0243 6E3C C100  30         mov   r0,tmp0               ; VDP write address (PAB byte 0)
0244 6E3E 0584  22         inc   tmp0                  ; Next byte in PAB
0245 6E40 C160  42         mov   @fh.filetype,tmp1     ; Get file type/mode
     6E42 A44C     
0246               
0247 6E44 06A0  36         bl    @xvputb               ; Write file type/mode to VDP
     6E46 22CC     
0248                                                   ; \ i  tmp0 = VDP target address
0249                                                   ; / i  tmp1 = Byte to write
0250                       ;------------------------------------------------------
0251                       ; Prepare for DSRLNK
0252                       ;------------------------------------------------------
0253 6E48 0220  30 !       ai    r0,9                  ; Move to file descriptor length
     6E4A 0009     
0254 6E4C C800  34         mov   r0,@>8356             ; Pass file descriptor to DSRLNK
     6E4E 8356     
0255               *--------------------------------------------------------------
0256               * Call DSRLINK for doing file operation
0257               *--------------------------------------------------------------
0258 6E50 C820  42         mov   @>8322,@waux1         ; Save word at @>8322
     6E52 8322     
     6E54 833C     
0259               
0260 6E56 C120  42         mov   @dsrlnk.savcru,tmp0   ; Call optimized or standard version?
     6E58 A42A     
0261 6E5A 1504  14         jgt   _file.record.fop.optimized
0262                                                   ; Optimized version
0263               
0264                       ;------------------------------------------------------
0265                       ; First IO call. Call standard DSRLNK
0266                       ;------------------------------------------------------
0267 6E5C 0420  62         blwp  @dsrlnk               ; Call DSRLNK
     6E5E 2B9A     
0268 6E60 0008                   data >8               ; \ i  p0 = >8 (DSR)
0269                                                   ; / o  r0 = Copy of VDP PAB byte 1
0270 6E62 1002  14         jmp  _file.record.fop.pab   ; Return PAB to caller
0271               
0272                       ;------------------------------------------------------
0273                       ; Recurring IO call. Call optimized DSRLNK
0274                       ;------------------------------------------------------
0275               _file.record.fop.optimized:
0276 6E64 0420  62         blwp  @dsrlnk.reuse         ; Call DSRLNK
     6E66 2CCA     
0277               
0278               *--------------------------------------------------------------
0279               * Return PAB details to caller
0280               *--------------------------------------------------------------
0281               _file.record.fop.pab:
0282 6E68 02C6  12         stst  tmp2                  ; Store status register contents in tmp2
0283                                                   ; Upon DSRLNK return status register EQ bit
0284                                                   ; 1 = No file error
0285                                                   ; 0 = File error occured
0286               
0287 6E6A C820  42         mov   @waux1,@>8322         ; Restore word at @>8322
     6E6C 833C     
     6E6E 8322     
0288               *--------------------------------------------------------------
0289               * Get PAB byte 5 from VDP ram into tmp1 (character count)
0290               *--------------------------------------------------------------
0291 6E70 C120  42         mov   @fh.pab.ptr,tmp0      ; Get VDP address of current PAB
     6E72 A436     
0292 6E74 0224  30         ai    tmp0,5                ; Get address of VDP PAB byte 5
     6E76 0005     
0293 6E78 06A0  36         bl    @xvgetb               ; VDP read PAB status byte into tmp0
     6E7A 22E4     
0294 6E7C C144  30         mov   tmp0,tmp1             ; Move to destination
0295               *--------------------------------------------------------------
0296               * Get PAB byte 1 from VDP ram into tmp0 (status)
0297               *--------------------------------------------------------------
0298 6E7E C100  30         mov   r0,tmp0               ; VDP PAB byte 1 (status)
0299                                                   ; as returned by DSRLNK
0300               *--------------------------------------------------------------
0301               * Exit
0302               *--------------------------------------------------------------
0303               ; If an error occured during the IO operation, then the
0304               ; equal bit in the saved status register (=tmp2) is set to 1.
0305               ;
0306               ; Upon return from this IO call you should basically test with:
0307               ;       coc   @wbit2,tmp2           ; Equal bit set?
0308               ;       jeq   my_file_io_handler    ; Yes, IO error occured
0309               ;
0310               ; Then look for further details in the copy of VDP PAB byte 1
0311               ; in register tmp0, bits 13-15
0312               ;
0313               ;       srl   tmp0,8                ; Right align (only for DSR type >8
0314               ;                                   ; calls, skip for type >A subprograms!)
0315               ;       ci    tmp0,io.err.<code>    ; Check for error pattern
0316               ;       jeq   my_error_handler
0317               *--------------------------------------------------------------
0318               _file.record.fop.exit:
0319 6E80 C2F9  46         mov   *stack+,r11           ; Pop R11
0320 6E82 045B  24         b     *r11                  ; Return to caller
                   < runlib.asm
0235               
0237                       copy  "rom_fg99.asm"             ; FinalGROM 99 support
     **** ****     > rom_fg99.asm
0001               * FILE......: rom_fg99.asm
0002               * Purpose...: FinalGROM 99 reload code
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *               FinalGROM 99 reload cartridge code
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * fg99 - Load cartridge from flash card into FinalGROM99
0010               ***************************************************************
0011               *  bl   @fg99
0012               *       data p0
0013               *
0014               *  p0 = Pointer to FG99 cartridge table entry
0015               *--------------------------------------------------------------
0016               *  bl   @xfg99
0017               *
0018               *  tmp0 = Pointer to FG99 cartridge table entry
0019               *--------------------------------------------------------------
0020               * Remark
0021               * https://github.com/endlos99/finalgrom99/blob/master/lib/reload_example.a99
0022               *
0023               * NOTE: You must use shortened 8.3 upper-case filenames here.
0024               *       For example, to reload "mylongfile.bin", use "MYLONG~1.BIN".
0025               *       If there are multiple files with prefix "MYLONG" in the
0026               *       folder, you may have to replace the suffix "~1" by "~2",
0027               *       "~3", ... to select the correct file.
0028               *
0029               *       PAD filename with >00 bytes so that it's always 8 bytes.
0030               *       Code is expected to run from RAM, not from the cartridge space.
0031               ********|*****|*********************|**************************
0032 6E84 C13B  46 fg99    mov   *r11+,tmp0            ; Get p0
0033               *--------------------------------------------------------------
0034               * Register version
0035               *--------------------------------------------------------------
0036               xfg99:
0037 6E86 0649  22         dect  stack
0038 6E88 C64B  38         mov   r11,*stack            ; Save return address
0039 6E8A 0649  22         dect  stack
0040 6E8C C644  38         mov   tmp0,*stack           ; Push tmp0
0041               *--------------------------------------------------------------
0042               * (1) Send prefix and filename to FinalGROM
0043               *--------------------------------------------------------------
0044 6E8E C004  30         mov   tmp0,r0               ; Get Pointer
0045 6E90 0202  24         li    r2,20                 ; Len = prefix (8) + fname (8) + suffix (4)
     6E92 0014     
0046               fg99.send.loop:
0047 6E94 04E0  34         clr   @>6000                ; Signal new byte
     6E96 6000     
0048 6E98 0201  24         li    r1,>0038              ; >7000 >> 9
     6E9A 0038     
0049 6E9C D070  44         movb  *r0+,r1
0050 6E9E 0B71  38         src   r1,7                  ; >7000 + (byte << 1)
0051               
0052 6EA0 04D1  30         clr   *r1                   ; Send byte
0053 6EA2 0602  22         dec   r2                    ; Prepare for next iteration
0054 6EA4 16F7  14         jne   fg99.send.loop        ; Next byte
0055               
0056 6EA6 04E0  34         clr   @>6000                ; Done sending filename
     6EA8 6000     
0057 6EAA 0B80  40         src   r0,8                  ; Burn at least 21 cycles
0058               *--------------------------------------------------------------
0059               * (3) Wait for image to be loaded by FinalGROM
0060               *--------------------------------------------------------------
0061               fg99.wait:
0062 6EAC 0200  24         li    r0,>6000              ; check >6000->6200
     6EAE 6000     
0063 6EB0 0202  24         li    r2,>100
     6EB2 0100     
0064 6EB4 C070  46 !       mov   *r0+, r1
0065 6EB6 1603  14         jne   fg99.exit             ; Done loading, run cartridge
0066 6EB8 0602  22         dec   r2
0067 6EBA 16FC  14         jne   -!
0068 6EBC 10F7  14         jmp   fg99.wait
0069               *--------------------------------------------------------------
0070               * (4) Image finished loading
0071               *--------------------------------------------------------------
0072               fg99.exit:
0073 6EBE C139  46         mov   *stack+,tmp0          ; Pop tmp0
0074 6EC0 C2F9  46         mov   *stack+,r11           ; Pop R11
0075 6EC2 045B  24         b     *r11                  ; Return to caller
                   < runlib.asm
0239               
0240               *//////////////////////////////////////////////////////////////
0241               *                            TIMERS
0242               *//////////////////////////////////////////////////////////////
0243               
0244                       copy  "timers_tmgr.asm"          ; Timers / Thread scheduler
     **** ****     > timers_tmgr.asm
0001               * FILE......: timers_tmgr.asm
0002               * Purpose...: Timers / Thread scheduler
0003               
0004               ***************************************************************
0005               * TMGR - X - Start Timers/Thread scheduler
0006               ***************************************************************
0007               *  B @TMGR
0008               *--------------------------------------------------------------
0009               *  REMARKS
0010               *  Timer/Thread scheduler. Normally called from MAIN.
0011               *  This is basically the kernel keeping everything together.
0012               *  Do not forget to set BTIHI to highest slot in use.
0013               *
0014               *  Register usage in TMGR8 - TMGR11
0015               *  TMP0  = Pointer to timer table
0016               *  R10LB = Use as slot counter
0017               *  TMP2  = 2nd word of slot data
0018               *  TMP3  = Address of routine to call
0019               ********|*****|*********************|**************************
0020 6EC4 0300  22 tmgr    limi  0                     ; No interrupt processing
     6EC6 0000     
0021               *--------------------------------------------------------------
0022               * Read VDP status register
0023               *--------------------------------------------------------------
0024 6EC8 D360  38 tmgr1   movb  @vdps,r13             ; Save copy of VDP status register in R13
     6ECA 8802     
0025               *--------------------------------------------------------------
0026               * Latch sprite collision flag
0027               *--------------------------------------------------------------
0028 6ECC 2360  32         coc   @wbit2,r13            ; C flag on ?
     6ECE 201C     
0029 6ED0 1602  14         jne   tmgr1a                ; No, so move on
0030 6ED2 E0A0  42         soc   @wbit12,config        ; Latch bit 12 in config register
     6ED4 2008     
0031               *--------------------------------------------------------------
0032               * Interrupt flag
0033               *--------------------------------------------------------------
0034 6ED6 2360  32 tmgr1a  coc   @wbit0,r13            ; Interupt flag set ?
     6ED8 2020     
0035 6EDA 1311  14         jeq   tmgr4                 ; Yes, process slots 0..n
0036               *--------------------------------------------------------------
0037               * Run speech player
0038               *--------------------------------------------------------------
0044               *--------------------------------------------------------------
0045               * Run kernel thread
0046               *--------------------------------------------------------------
0047 6EDC 20A0  32 tmgr2   coc   @wbit8,config         ; Kernel thread blocked ?
     6EDE 2010     
0048 6EE0 1305  14         jeq   tmgr3                 ; Yes, skip to user hook
0049 6EE2 20A0  32         coc   @wbit9,config         ; Kernel thread enabled ?
     6EE4 200E     
0050 6EE6 1602  14         jne   tmgr3                 ; No, skip to user hook
0051 6EE8 0460  28         b     @kthread              ; Run kernel thread
     6EEA 2EA2     
0052               *--------------------------------------------------------------
0053               * Run user hook
0054               *--------------------------------------------------------------
0055 6EEC 20A0  32 tmgr3   coc   @wbit6,config         ; User hook blocked ?
     6EEE 2014     
0056 6EF0 13EB  14         jeq   tmgr1
0057 6EF2 20A0  32         coc   @wbit7,config         ; User hook enabled ?
     6EF4 2012     
0058 6EF6 16E8  14         jne   tmgr1
0059 6EF8 C120  38         mov   @wtiusr,tmp0
     6EFA 832E     
0060 6EFC 0454  24         b     *tmp0                 ; Run user hook
0061               *--------------------------------------------------------------
0062               * Do internal housekeeping
0063               *--------------------------------------------------------------
0064 6EFE 40A0  42 tmgr4   szc   @tmdat,config         ; Unblock kernel thread and user hook
     6F00 2EA0     
0065 6F02 C10A  30         mov   r10,tmp0
0066 6F04 0244  30         andi  tmp0,>00ff            ; Clear HI byte
     6F06 00FF     
0067 6F08 20A0  32         coc   @wbit2,config         ; PAL flag set ?
     6F0A 201C     
0068 6F0C 1303  14         jeq   tmgr5
0069 6F0E 0284  26         ci    tmp0,60               ; 1 second reached ?
     6F10 003C     
0070 6F12 1002  14         jmp   tmgr6
0071 6F14 0284  26 tmgr5   ci    tmp0,50
     6F16 0032     
0072 6F18 1101  14 tmgr6   jlt   tmgr7                 ; No, continue
0073 6F1A 1001  14         jmp   tmgr8
0074 6F1C 058A  22 tmgr7   inc   r10                   ; Increase tick counter
0075               *--------------------------------------------------------------
0076               * Loop over slots
0077               *--------------------------------------------------------------
0078 6F1E C120  38 tmgr8   mov   @wtitab,tmp0          ; Pointer to timer table
     6F20 832C     
0079 6F22 024A  30         andi  r10,>ff00             ; Use R10LB as slot counter. Reset.
     6F24 FF00     
0080 6F26 C1D4  38 tmgr9   mov   *tmp0,tmp3            ; Is slot empty ?
0081 6F28 1316  14         jeq   tmgr11                ; Yes, get next slot
0082               *--------------------------------------------------------------
0083               *  Check if slot should be executed
0084               *--------------------------------------------------------------
0085 6F2A 05C4  22         inct  tmp0                  ; Second word of slot data
0086 6F2C 0594  30         inc   *tmp0                 ; Update tick count in slot
0087 6F2E C194  38         mov   *tmp0,tmp2            ; Get second word of slot data
0088 6F30 9820  42         cb    @tmp2hb,@tmp2lb       ; Slot target count = Slot internal counter ?
     6F32 830C     
     6F34 830D     
0089 6F36 1608  14         jne   tmgr10                ; No, get next slot
0090 6F38 0246  30         andi  tmp2,>ff00            ; Clear internal counter
     6F3A FF00     
0091 6F3C C506  38         mov   tmp2,*tmp0            ; Update timer table
0092               *--------------------------------------------------------------
0093               *  Run slot, we only need TMP0 to survive
0094               *--------------------------------------------------------------
0095 6F3E C804  34         mov   tmp0,@wtitmp          ; Save TMP0
     6F40 8330     
0096 6F42 0697  32         bl    *tmp3                 ; Call routine in slot
0097 6F44 C120  38 slotok  mov   @wtitmp,tmp0          ; Restore TMP0
     6F46 8330     
0098               *--------------------------------------------------------------
0099               *  Prepare for next slot
0100               *--------------------------------------------------------------
0101 6F48 058A  22 tmgr10  inc   r10                   ; Next slot
0102 6F4A 9820  42         cb    @r10lb,@btihi         ; Last slot done ?
     6F4C 8315     
     6F4E 8314     
0103 6F50 1504  14         jgt   tmgr12                ; yes, Wait for next VDP interrupt
0104 6F52 05C4  22         inct  tmp0                  ; Offset for next slot
0105 6F54 10E8  14         jmp   tmgr9                 ; Process next slot
0106 6F56 05C4  22 tmgr11  inct  tmp0                  ; Skip 2nd word of slot data
0107 6F58 10F7  14         jmp   tmgr10                ; Process next slot
0108 6F5A 024A  30 tmgr12  andi  r10,>ff00             ; Use R10LB as tick counter. Reset.
     6F5C FF00     
0109 6F5E 10B4  14         jmp   tmgr1
0110 6F60 0280     tmdat   data  >0280                 ; Bit 8 (kernel thread) and bit 6 (user hook)
0111               
                   < runlib.asm
0245                       copy  "timers_kthread.asm"       ; Timers / Kernel thread
     **** ****     > timers_kthread.asm
0001               * FILE......: timers_kthread.asm
0002               * Purpose...: Timers / The kernel thread
0003               
0004               
0005               ***************************************************************
0006               * KTHREAD - The kernel thread
0007               *--------------------------------------------------------------
0008               *  REMARKS
0009               *  You should not call the kernel thread manually.
0010               *  Instead control it via the CONFIG register.
0011               *
0012               *  The kernel thread is responsible for running the sound
0013               *  player and doing keyboard scan.
0014               ********|*****|*********************|**************************
0015 6F62 E0A0  42 kthread soc   @wbit8,config         ; Block kernel thread
     6F64 2010     
0016               *--------------------------------------------------------------
0017               * Run sound player
0018               *--------------------------------------------------------------
0022 6F66 20A0  32         coc   @wbit13,config        ; Sound player on ?
     6F68 2006     
0023 6F6A 1602  14         jne   kthread_kb
0024 6F6C 06A0  36         bl    @sdpla1               ; Run sound player
     6F6E 2836     
0026               *--------------------------------------------------------------
0027               * Scan virtual keyboard
0028               *--------------------------------------------------------------
0029               kthread_kb
0031               *       <<skipped>>
0035               *--------------------------------------------------------------
0036               * Scan real keyboard
0037               *--------------------------------------------------------------
0042 6F70 06A0  36         bl    @rkscan               ; Scan full keyboard with ROM#0 KSCAN
     6F72 28B6     
0047               *--------------------------------------------------------------
0048               kthread_exit
0049 6F74 0460  28         b     @tmgr3                ; Exit
     6F76 2E2C     
                   < runlib.asm
0246                       copy  "timers_hooks.asm"         ; Timers / User hooks
     **** ****     > timers_hooks.asm
0001               * FILE......: timers_kthread.asm
0002               * Purpose...: Timers / User hooks
0003               
0004               
0005               ***************************************************************
0006               * MKHOOK - Allocate user hook
0007               ***************************************************************
0008               *  BL    @MKHOOK
0009               *  DATA  P0
0010               *--------------------------------------------------------------
0011               *  P0 = Address of user hook
0012               *--------------------------------------------------------------
0013               *  REMARKS
0014               *  The user hook gets executed after the kernel thread.
0015               *  The user hook must always exit with "B @HOOKOK"
0016               ********|*****|*********************|**************************
0017 6F78 C83B  50 mkhook  mov   *r11+,@wtiusr         ; Set user hook address
     6F7A 832E     
0018 6F7C E0A0  42         soc   @wbit7,config         ; Enable user hook
     6F7E 2012     
0019 6F80 045B  24 mkhoo1  b     *r11                  ; Return
0020      2E08     hookok  equ   tmgr1                 ; Exit point for user hook
0021               
0022               
0023               ***************************************************************
0024               * CLHOOK - Clear user hook
0025               ***************************************************************
0026               *  BL    @CLHOOK
0027               ********|*****|*********************|**************************
0028 6F82 04E0  26 clhook  clr   @wtiusr               ; Unset user hook address
     6F84 832E     
0029 6F86 0242  30         andi  config,>feff          ; Disable user hook (bit 7=0)
     6F88 FEFF     
0030 6F8A 045B  24         b     *r11                  ; Return
                   < runlib.asm
0247               
0249                       copy  "timers_alloc.asm"         ; Timers / Slot calculation
     **** ****     > timers_alloc.asm
0001               * FILE......: timer_alloc.asm
0002               * Purpose...: Timers / Timer allocation
0003               
0004               
0005               ***************************************************************
0006               * MKSLOT - Allocate timer slot(s)
0007               ***************************************************************
0008               *  BL    @MKSLOT
0009               *  BYTE  P0HB,P0LB
0010               *  DATA  P1
0011               *  ....
0012               *  DATA  EOL                        ; End-of-list
0013               *--------------------------------------------------------------
0014               *  P0 = Slot number, target count
0015               *  P1 = Subroutine to call via BL @xxxx if slot is fired
0016               ********|*****|*********************|**************************
0017 6F8C C13B  46 mkslot  mov   *r11+,tmp0
0018 6F8E C17B  46         mov   *r11+,tmp1
0019               *--------------------------------------------------------------
0020               *  Calculate address of slot
0021               *--------------------------------------------------------------
0022 6F90 C184  30         mov   tmp0,tmp2
0023 6F92 0966  36         srl   tmp2,6                ; Right align & TMP2 = TMP2 * 4
0024 6F94 A1A0  38         a     @wtitab,tmp2          ; Add table base
     6F96 832C     
0025               *--------------------------------------------------------------
0026               *  Add slot to table
0027               *--------------------------------------------------------------
0028 6F98 CD85  46         mov   tmp1,*tmp2+           ; Store address of subroutine
0029 6F9A 0A84  40         sla   tmp0,8                ; Get rid of slot number
0030 6F9C C584  38         mov   tmp0,*tmp2            ; Store target count and reset tick count
0031               *--------------------------------------------------------------
0032               *  Check for end of list
0033               *--------------------------------------------------------------
0034 6F9E 881B  46         c     *r11,@w$ffff          ; End of list ?
     6FA0 2022     
0035 6FA2 1301  14         jeq   mkslo1                ; Yes, exit
0036 6FA4 10F3  14         jmp   mkslot                ; Process next entry
0037               *--------------------------------------------------------------
0038               *  Exit
0039               *--------------------------------------------------------------
0040 6FA6 05CB  22 mkslo1  inct  r11
0041 6FA8 045B  24         b     *r11                  ; Exit
0042               
0043               
0044               ***************************************************************
0045               * CLSLOT - Clear single timer slot
0046               ***************************************************************
0047               *  BL    @CLSLOT
0048               *  DATA  P0
0049               *--------------------------------------------------------------
0050               *  P0 = Slot number
0051               ********|*****|*********************|**************************
0052 6FAA C13B  46 clslot  mov   *r11+,tmp0
0053 6FAC 0A24  28 xlslot  sla   tmp0,2                ; TMP0 = TMP0*4
0054 6FAE A120  38         a     @wtitab,tmp0          ; Add table base
     6FB0 832C     
0055 6FB2 04F4  38         clr   *tmp0+                ; Clear 1st word of slot
0056 6FB4 04D4  30         clr   *tmp0                 ; Clear 2nd word of slot
0057 6FB6 045B  24         b     *r11                  ; Exit
0058               
0059               
0060               ***************************************************************
0061               * RSSLOT - Reset single timer slot loop counter
0062               ***************************************************************
0063               *  BL    @RSSLOT
0064               *  DATA  P0
0065               *--------------------------------------------------------------
0066               *  P0 = Slot number
0067               ********|*****|*********************|**************************
0068 6FB8 C13B  46 rsslot  mov   *r11+,tmp0
0069 6FBA 0A24  28         sla   tmp0,2                ; TMP0 = TMP0*4
0070 6FBC A120  38         a     @wtitab,tmp0          ; Add table base
     6FBE 832C     
0071 6FC0 05C4  22         inct  tmp0                  ; Skip 1st word of slot
0072 6FC2 C154  38         mov   *tmp0,tmp1
0073 6FC4 0245  30         andi  tmp1,>ff00            ; Clear LSB (loop counter)
     6FC6 FF00     
0074 6FC8 C505  38         mov   tmp1,*tmp0
0075 6FCA 045B  24         b     *r11                  ; Exit
                   < runlib.asm
0251               
0252               
0253               
0254               *//////////////////////////////////////////////////////////////
0255               *                    RUNLIB INITIALISATION
0256               *//////////////////////////////////////////////////////////////
0257               
0258               ***************************************************************
0259               *  RUNLIB - Runtime library initalisation
0260               ***************************************************************
0261               *  B  @RUNLIB
0262               *--------------------------------------------------------------
0263               *  REMARKS
0264               *  if R0 in WS1 equals >4a4a we were called from the system
0265               *  crash handler so we return there after initialisation.
0266               
0267               *  If R1 in WS1 equals >FFFF we return to the TI title screen
0268               *  after clearing scratchpad memory. This has higher priority
0269               *  as crash handler flag R0.
0270               ********|*****|*********************|**************************
0277 6FCC 04E0  26 runlib  clr   @>8302                ; Reset exit flag (R1 in workspace WS1!)
     6FCE 8302     
0279               *--------------------------------------------------------------
0280               * Alternative entry point
0281               *--------------------------------------------------------------
0282 6FD0 0300  22 runli1  limi  0                     ; Turn off interrupts
     6FD2 0000     
0283 6FD4 02E0  18         lwpi  ws1                   ; Activate workspace 1
     6FD6 8300     
0284 6FD8 C0E0  30         mov   @>83c0,r3             ; Get random seed from OS monitor
     6FDA 83C0     
0285               *--------------------------------------------------------------
0286               * Clear scratch-pad memory from R4 upwards
0287               *--------------------------------------------------------------
0288 6FDC 0202  20 runli2  li    r2,>8308
     6FDE 8308     
0289 6FE0 04F2  30 runli3  clr   *r2+                  ; Clear scratchpad >8306->83FF
0290 6FE2 0282  22         ci    r2,>8400
     6FE4 8400     
0291 6FE6 16FC  14         jne   runli3
0292               *--------------------------------------------------------------
0293               * Exit to TI-99/4A title screen ?
0294               *--------------------------------------------------------------
0295 6FE8 0281  22 runli3a ci    r1,>ffff              ; Exit flag set ?
     6FEA FFFF     
0296 6FEC 1602  14         jne   runli4                ; No, continue
0297 6FEE 0420  42         blwp  @0                    ; Yes, bye bye
     6FF0 0000     
0298               *--------------------------------------------------------------
0299               * Determine if VDP is PAL or NTSC
0300               *--------------------------------------------------------------
0301 6FF2 C803  30 runli4  mov   r3,@waux1             ; Store random seed
     6FF4 833C     
0302 6FF6 04C1  14         clr   r1                    ; Reset counter
0303 6FF8 0202  20         li    r2,10                 ; We test 10 times
     6FFA 000A     
0304 6FFC C0E0  30 runli5  mov   @vdps,r3
     6FFE 8802     
0305 7000 20E0  32         coc   @wbit0,r3             ; Interupt flag set ?
     7002 2020     
0306 7004 1302  14         jeq   runli6
0307 7006 0581  14         inc   r1                    ; Increase counter
0308 7008 10F9  14         jmp   runli5
0309 700A 0602  14 runli6  dec   r2                    ; Next test
0310 700C 16F7  14         jne   runli5
0311 700E 0281  22         ci    r1,>1250              ; Max for NTSC reached ?
     7010 1250     
0312 7012 1202  14         jle   runli7                ; No, so it must be NTSC
0313 7014 0262  22         ori   config,palon          ; Yes, it must be PAL, set flag
     7016 201C     
0314               *--------------------------------------------------------------
0315               * Copy machine code to scratchpad (prepare tight loop)
0316               *--------------------------------------------------------------
0317 7018 06A0  32 runli7  bl    @loadmc
     701A 221A     
0318               *--------------------------------------------------------------
0319               * Initialize registers, memory, ...
0320               *--------------------------------------------------------------
0321 701C 04C1  14 runli9  clr   r1
0322 701E 04C2  14         clr   r2
0323 7020 04C3  14         clr   r3
0324 7022 0209  20         li    stack,sp2.stktop      ; Set top of stack (grows downwards!)
     7024 A900     
0325 7026 020F  20         li    r15,vdpw              ; Set VDP write address
     7028 8C00     
0327 702A 06A0  32         bl    @mute                 ; Mute sound generators
     702C 27FA     
0329               *--------------------------------------------------------------
0330               * Setup video memory
0331               *--------------------------------------------------------------
0333 702E 0280  22         ci    r0,>4a4a              ; Crash flag set?
     7030 4A4A     
0334 7032 1605  14         jne   runlia
0335 7034 06A0  32         bl    @filv                 ; Clear 12K VDP memory instead
     7036 228E     
0336 7038 0000             data  >0000,>00,>3000       ; of 16K, so that PABs survive
     703A 0000     
     703C 3000     
0341 703E 06A0  32 runlia  bl    @filv
     7040 228E     
0342 7042 0FC0             data  pctadr,spfclr,16      ; Load color table
     7044 00F4     
     7046 0010     
0343               *--------------------------------------------------------------
0344               * Check if there is a F18A present
0345               *--------------------------------------------------------------
0349 7048 06A0  32         bl    @f18unl               ; Unlock the F18A
     704A 272A     
0350 704C 06A0  32         bl    @f18chk               ; Check if F18A is there \
     704E 2754     
0351 7050 06A0  32         bl    @f18chk               ; Check if F18A is there | js99er bug?
     7052 2754     
0352 7054 06A0  32         bl    @f18chk               ; Check if F18A is there /
     7056 2754     
0353 7058 06A0  32         bl    @f18lck               ; Lock the F18A again
     705A 2740     
0354               
0355 705C 06A0  32         bl    @putvr                ; Reset all F18a extended registers
     705E 2332     
0356 7060 3201                   data >3201            ; F18a VR50 (>32), bit 1
0358               *--------------------------------------------------------------
0359               * Check if there is a speech synthesizer attached
0360               *--------------------------------------------------------------
0362               *       <<skipped>>
0366               *--------------------------------------------------------------
0367               * Load video mode table & font
0368               *--------------------------------------------------------------
0369 7062 06A0  32 runlic  bl    @vidtab               ; Load video mode table into VDP
     7064 22F8     
0370 7066 7F10             data  spvmod                ; Equate selected video mode table
0371 7068 0204  20         li    tmp0,spfont           ; Get font option
     706A 0000     
0372 706C 0544  14         inv   tmp0                  ; NOFONT (>FFFF) specified ?
0373 706E 1304  14         jeq   runlid                ; Yes, skip it
0374 7070 06A0  32         bl    @ldfnt
     7072 2360     
0375 7074 1100             data  fntadr,spfont         ; Load specified font
     7076 0000     
0376               *--------------------------------------------------------------
0377               * Did a system crash occur before runlib was called?
0378               *--------------------------------------------------------------
0379 7078 0280  22 runlid  ci    r0,>4a4a              ; Crash flag set?
     707A 4A4A     
0380 707C 1602  14         jne   runlie                ; No, continue
0381 707E 0460  28         b     @cpu.crash.main       ; Yes, back to crash handler
     7080 2086     
0382               *--------------------------------------------------------------
0383               * Branch to main program
0384               *--------------------------------------------------------------
0385 7082 0262  22 runlie  ori   config,>0040          ; Enable kernel thread (bit 9 on)
     7084 0040     
0386 7086 0460  28         b     @main                 ; Give control to main program
     7088 3E28     
                   < stevie_b0.asm
0130                       copy  "rom.resident.asm"    ; Resident modules relocated to RAM
     **** ****     > rom.resident.asm
0001               * FILE......: rom.resident.asm
0002               * Purpose...: Resident modules in LOW MEMEXP RAM callable from all ROM banks.
0003               
0004                       ;------------------------------------------------------
0005                       ; Low-level modules
0006                       ;------------------------------------------------------
0007                       copy  "rom.farjump.asm"        ; ROM bankswitch trampoline
     **** ****     > rom.farjump.asm
0001               * FILE......: rom.farjump.asm
0002               * Purpose...: Trampoline to routine in other ROM bank
0003               
0004               ***************************************************************
0005               * rom.farjump - Jump to routine in specified bank
0006               ***************************************************************
0007               *  bl   @rom.farjump
0008               *       data p0,p1,p2
0009               *--------------------------------------------------------------
0010               *  p0 = Write address of target ROM bank
0011               *  p1 = Vector address with target address to jump to
0012               *  p2 = Write address of source ROM bank
0013               *--------------------------------------------------------------
0014               *  bl @xrom.farjump
0015               *
0016               *  tmp0 = Write address of target ROM bank
0017               *  tmp1 = Vector address with target address to jump to
0018               *  tmp2 = Write address of source ROM bank
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * tmp0,tmp1,tmp2,tmp3
0022               *--------------------------------------------------------------
0023               *  Remarks
0024               *  r11 gets pushed/popped from farjump stack, not from normal
0025               *  value stack.
0026               ********|*****|*********************|**************************
0027               rom.farjump:
0028 708A 0649  14         dect  stack
0029 708C C644  30         mov   tmp0,*stack           ; Push tmp0
0030 708E 0649  14         dect  stack
0031 7090 C645  30         mov   tmp1,*stack           ; Push tmp1
0032 7092 0649  14         dect  stack
0033 7094 C646  30         mov   tmp2,*stack           ; Push tmp2
0034 7096 0649  14         dect  stack
0035 7098 C647  30         mov   tmp3,*stack           ; Push tmp3
0036                       ;------------------------------------------------------
0037                       ; Parameters
0038                       ;------------------------------------------------------
0039 709A C13B  30         mov   *r11+,tmp0            ; P0
0040 709C C17B  30         mov   *r11+,tmp1            ; P1
0041 709E C1BB  30         mov   *r11+,tmp2            ; P2
0042 70A0 1008  14         jmp   xrom.farjump.push_return
0043                       ;------------------------------------------------------
0044                       ; Push registers to value stack (but not r11!)
0045                       ;------------------------------------------------------
0046               xrom.farjump:
0047 70A2 0649  14         dect  stack
0048 70A4 C644  30         mov   tmp0,*stack           ; Push tmp0
0049 70A6 0649  14         dect  stack
0050 70A8 C645  30         mov   tmp1,*stack           ; Push tmp1
0051 70AA 0649  14         dect  stack
0052 70AC C646  30         mov   tmp2,*stack           ; Push tmp2
0053 70AE 0649  14         dect  stack
0054 70B0 C647  30         mov   tmp3,*stack           ; Push tmp3
0055                       ;------------------------------------------------------
0056                       ; Push to farjump return stack
0057                       ;------------------------------------------------------
0058               xrom.farjump.push_return:
0059 70B2 0284  22         ci    tmp0,>6000            ; Invalid bank write address?
     70B4 6000     
0060 70B6 1116  14         jlt   rom.farjump.bankswitch.failed1
0061                                                   ; Crash if bogus value in bank write address
0062               
0063 70B8 C1E0  34         mov   @tv.fj.stackpnt,tmp3  ; Get farjump stack pointer
     70BA A228     
0064 70BC 0647  14         dect  tmp3
0065 70BE C5CB  30         mov   r11,*tmp3             ; Push return address to farjump stack
0066 70C0 0647  14         dect  tmp3
0067 70C2 C5C6  30         mov   tmp2,*tmp3            ; Push source ROM bank to farjump stack
0068 70C4 C807  38         mov   tmp3,@tv.fj.stackpnt  ; Set farjump stack pointer
     70C6 A228     
0069               
0073               
0074                       ;------------------------------------------------------
0075                       ; Bankswitch to target 8K ROM bank
0076                       ;------------------------------------------------------
0077               rom.farjump.bankswitch.target.rom8k:
0078 70C8 04D4  26         clr   *tmp0                 ; Switch to target ROM bank 8K >6000
0079 70CA 1004  14         jmp   rom.farjump.bankswitch.tgt.done
0080                       ;------------------------------------------------------
0081                       ; Bankswitch to target 4K ROM / 4K RAM banks (FG99 advanced mode)
0082                       ;------------------------------------------------------
0083               rom.farjump.bankswitch.tgt.advfg99:
0084 70CC 04D4  26         clr   *tmp0                 ; Switch to target ROM bank 4K >6000
0085 70CE 0224  22         ai    tmp0,>0800
     70D0 0800     
0086 70D2 04D4  26         clr   *tmp0                 ; Switch to target RAM bank 4K >7000
0087                       ;------------------------------------------------------
0088                       ; Bankswitch to target bank(s) completed
0089                       ;------------------------------------------------------
0090               rom.farjump.bankswitch.tgt.done:
0091                       ;------------------------------------------------------
0092                       ; Deref vector from @trmpvector if >ffff
0093                       ;------------------------------------------------------
0094 70D4 0285  22         ci    tmp1,>ffff
     70D6 FFFF     
0095 70D8 1602  14         jne   !
0096 70DA C160  34         mov   @trmpvector,tmp1
     70DC A034     
0097                       ;------------------------------------------------------
0098                       ; Deref value in vector
0099                       ;------------------------------------------------------
0100 70DE C115  26 !       mov   *tmp1,tmp0            ; Deref value in vector address
0101 70E0 1301  14         jeq   rom.farjump.bankswitch.failed1
0102                                                   ; Crash if null-pointer in vector
0103               
0104 70E2 1004  14         jmp   rom.farjump.bankswitch.call
0105                                                   ; Call function in target bank
0106                       ;------------------------------------------------------
0107                       ; Assert 1 failed before bank-switch
0108                       ;------------------------------------------------------
0109               rom.farjump.bankswitch.failed1:
0110 70E4 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     70E6 FFCE     
0111 70E8 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     70EA 2026     
0112                       ;------------------------------------------------------
0113                       ; Call function in target bank
0114                       ;------------------------------------------------------
0115               rom.farjump.bankswitch.call:
0116 70EC 0694  24         bl    *tmp0                 ; Call function
0117                       ;------------------------------------------------------
0118                       ; Bankswitch back to source bank
0119                       ;------------------------------------------------------
0120               rom.farjump.return:
0121 70EE C120  34         mov   @tv.fj.stackpnt,tmp0  ; Get farjump stack pointer
     70F0 A228     
0122 70F2 C154  26         mov   *tmp0,tmp1            ; Get bank write address of caller
0123 70F4 1312  14         jeq   rom.farjump.bankswitch.failed2
0124                                                   ; Crash if null-pointer in address
0125               
0126 70F6 04F4  30         clr   *tmp0+                ; Remove bank write address from
0127                                                   ; farjump stack
0128               
0129 70F8 C2D4  26         mov   *tmp0,r11             ; Get return addr of caller for return
0130               
0131 70FA 04F4  30         clr   *tmp0+                ; Remove return address of caller from
0132                                                   ; farjump stack
0133               
0134 70FC 028B  22         ci    r11,>6000
     70FE 6000     
0135 7100 110C  14         jlt   rom.farjump.bankswitch.failed2
0136 7102 028B  22         ci    r11,>7fff
     7104 7FFF     
0137 7106 1509  14         jgt   rom.farjump.bankswitch.failed2
0138               
0139 7108 C804  38         mov   tmp0,@tv.fj.stackpnt  ; Update farjump return stack pointer
     710A A228     
0140               
0144               
0145                       ;------------------------------------------------------
0146                       ; Bankswitch to source 8K ROM bank
0147                       ;------------------------------------------------------
0148               rom.farjump.bankswitch.src.rom8k:
0149 710C 04D5  26         clr   *tmp1                 ; Switch to source ROM bank 8K >6000
0150 710E 1009  14         jmp   rom.farjump.exit
0151                       ;------------------------------------------------------
0152                       ; Bankswitch to source 4K ROM / 4K RAM banks (FG99 advanced mode)
0153                       ;------------------------------------------------------
0154               rom.farjump.bankswitch.src.advfg99:
0155 7110 04D5  26         clr   *tmp1                 ; Switch to source ROM bank 4K >6000
0156 7112 0225  22         ai    tmp1,>0800
     7114 0800     
0157 7116 04D5  26         clr   *tmp1                 ; Switch to source RAM bank 4K >7000
0158 7118 1004  14         jmp   rom.farjump.exit
0159                       ;------------------------------------------------------
0160                       ; Assert 2 failed after bank-switch
0161                       ;------------------------------------------------------
0162               rom.farjump.bankswitch.failed2:
0163 711A C80B  38         mov   r11,@>ffce            ; \ Save caller address
     711C FFCE     
0164 711E 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     7120 2026     
0165                       ;-------------------------------------------------------
0166                       ; Exit
0167                       ;-------------------------------------------------------
0168               rom.farjump.exit:
0169 7122 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0170 7124 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0171 7126 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0172 7128 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0173                       ;
0174                       ; Attention!
0175                       ; r11 was popped from farjump stack, not from value stack!
0176                       ; See rom.farjump.return
0177                       ;
0178 712A 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0008                       copy  "fb.asm"                 ; Framebuffer
     **** ****     > fb.asm
0001               * FILE......: fb.asm
0002               * Purpose...: Initialize framebuffer
0003               
0004               ***************************************************************
0005               * fb.init
0006               * Initialize framebuffer
0007               ***************************************************************
0008               *  bl   @fb.init
0009               *--------------------------------------------------------------
0010               *  INPUT
0011               *  none
0012               *--------------------------------------------------------------
0013               *  OUTPUT
0014               *  none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               ********|*****|*********************|**************************
0019               fb.init:
0020 712C 0649  14         dect  stack
0021 712E C64B  30         mov   r11,*stack            ; Save return address
0022 7130 0649  14         dect  stack
0023 7132 C644  30         mov   tmp0,*stack           ; Push tmp0
0024 7134 0649  14         dect  stack
0025 7136 C645  30         mov   tmp1,*stack           ; Push tmp1
0026                       ;------------------------------------------------------
0027                       ; Initialize
0028                       ;------------------------------------------------------
0029 7138 0204  20         li    tmp0,fb.top
     713A D000     
0030 713C C804  38         mov   tmp0,@fb.top.ptr      ; Set pointer to framebuffer
     713E A300     
0031 7140 04E0  34         clr   @fb.topline           ; Top line in framebuffer
     7142 A304     
0032 7144 04E0  34         clr   @fb.row               ; Current row=0
     7146 A306     
0033 7148 04E0  34         clr   @fb.column            ; Current column=0
     714A A30C     
0034               
0035 714C 0204  20         li    tmp0,colrow
     714E 0050     
0036 7150 C804  38         mov   tmp0,@fb.colsline     ; Columns per row=80
     7152 A30E     
0037 7154 04E0  34         clr   @fb.vwco              ; Set view window column offset
     7156 A310     
0038               
0039 7158 0204  20         li    tmp0,pane.botrow-1    ; \ Framebuffer
     715A 001C     
0040 715C C804  38         mov   tmp0,@fb.scrrows.max  ; / Maximum number of physical rows for fb
     715E A31E     
0041               
0042 7160 06A0  32         bl    @fb.calc.scrrows      ; Calculate number of rows
     7162 3108     
0043                                                   ; \ i  @tv.ruler.visible = Ruler visible
0044                                                   ; | i  @edb.special.file = Special file flag
0045                                                   ; / i  @tv.error.visible = Error visible
0046               
0047 7164 04E0  34         clr   @tv.pane.focus        ; Frame buffer has focus!
     7166 A224     
0048 7168 04E0  34         clr   @fb.colorize          ; Don't colorize M1/M2 lines
     716A A312     
0049 716C 0720  34         seto  @fb.dirty             ; Set dirty flag (trigger screen update)
     716E A318     
0050 7170 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     7172 A31A     
0051                       ;------------------------------------------------------
0052                       ; Clear frame buffer
0053                       ;------------------------------------------------------
0054 7174 06A0  32         bl    @film
     7176 2236     
0055 7178 D000             data  fb.top,>00,fb.size    ; Clear it all the way
     717A 0000     
     717C 0960     
0056                       ;------------------------------------------------------
0057                       ; Exit
0058                       ;------------------------------------------------------
0059               fb.init.exit:
0060 717E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0061 7180 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0062 7182 C2F9  30         mov   *stack+,r11           ; Pop r11
0063 7184 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0009                       copy  "fb.row2line.asm"        ; Calculate line in editor buffer
     **** ****     > fb.row2line.asm
0001               * FILE......: fb.row2line.asm
0002               * Purpose...: Calculate line in editor buffer
0003               
0004               ***************************************************************
0005               * fb.row2line
0006               * Calculate line in editor buffer
0007               ***************************************************************
0008               * bl @fb.row2line
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @fb.topline = Top line in frame buffer
0012               * @parm1      = Row in frame buffer (offset 0..@fb.scrrows)
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * @outparm1 = Matching line in editor buffer
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0
0019               *--------------------------------------------------------------
0020               * Formula
0021               * outparm1 = @fb.topline + @parm1
0022               ********|*****|*********************|**************************
0023               fb.row2line:
0024 7186 0649  14         dect  stack
0025 7188 C64B  30         mov   r11,*stack            ; Save return address
0026 718A 0649  14         dect  stack
0027 718C C644  30         mov   tmp0,*stack           ; Push tmp0
0028                       ;------------------------------------------------------
0029                       ; Calculate line in editor buffer
0030                       ;------------------------------------------------------
0031 718E C120  34         mov   @parm1,tmp0
     7190 A006     
0032 7192 A120  34         a     @fb.topline,tmp0
     7194 A304     
0033 7196 C804  38         mov   tmp0,@outparm1
     7198 A018     
0034                       ;------------------------------------------------------
0035                       ; Exit
0036                       ;------------------------------------------------------
0037               fb.row2line.exit:
0038 719A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0039 719C C2F9  30         mov   *stack+,r11           ; Pop r11
0040 719E 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0010                       copy  "fb.calc.pointer.asm"    ; Calculate pointer address frame buffer
     **** ****     > fb.calc.pointer.asm
0001               * FILE......: fb.calc.pointer.asm
0002               * Purpose...: Calculate pointer address in frame buffer
0003               
0004               ***************************************************************
0005               * fb.calc.pointer
0006               * Calculate pointer address in frame buffer
0007               ***************************************************************
0008               * bl @fb.calc.pointer
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @fb.top       = Address of top row in frame buffer
0012               * @fb.topline   = Top line in frame buffer
0013               * @fb.row       = Current row in frame buffer (offset 0..@fb.scrrows)
0014               * @fb.column    = Current column in frame buffer
0015               * @fb.colsline  = Columns per line in frame buffer
0016               *--------------------------------------------------------------
0017               * OUTPUT
0018               * @fb.current   = Updated pointer
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * tmp0,tmp1
0022               *--------------------------------------------------------------
0023               * Formula
0024               * pointer = row * colsline + column + deref(@fb.top.ptr)
0025               ********|*****|*********************|**************************
0026               fb.calc.pointer:
0027 71A0 0649  14         dect  stack
0028 71A2 C64B  30         mov   r11,*stack            ; Save return address
0029 71A4 0649  14         dect  stack
0030 71A6 C644  30         mov   tmp0,*stack           ; Push tmp0
0031 71A8 0649  14         dect  stack
0032 71AA C645  30         mov   tmp1,*stack           ; Push tmp1
0033                       ;------------------------------------------------------
0034                       ; Calculate pointer
0035                       ;------------------------------------------------------
0036 71AC C120  34         mov   @fb.row,tmp0
     71AE A306     
0037 71B0 3920  74         mpy   @fb.colsline,tmp0     ; tmp1 = row  * colsline
     71B2 A30E     
0038 71B4 A160  34         a     @fb.column,tmp1       ; tmp1 = tmp1 + column
     71B6 A30C     
0039 71B8 A160  34         a     @fb.top.ptr,tmp1      ; tmp1 = tmp1 + base
     71BA A300     
0040 71BC C805  38         mov   tmp1,@fb.current
     71BE A302     
0041                       ;------------------------------------------------------
0042                       ; Exit
0043                       ;------------------------------------------------------
0044               fb.calc.pointer.exit:
0045 71C0 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0046 71C2 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0047 71C4 C2F9  30         mov   *stack+,r11           ; Pop r11
0048 71C6 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0011                       copy  "fb.calc.scrrows.asm"    ; Calculate number of rows frame buffer
     **** ****     > fb.calc.scrrows.asm
0001               * FILE......: fb.calc.scrrows.asm
0002               * Purpose...: Calculate number of available rows in frame buffer
0003               
0004               ***************************************************************
0005               * fb.calc.scrrows
0006               * Calculate number of available rows in frame buffer
0007               ***************************************************************
0008               * bl @fb.calc.scrrows
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @tv.ruler.visible = Ruler visible on screen flag
0012               * @edb.special.file = Special file flag (e.g. Master Catalog)
0013               * @tv.error.visible = Error area visible on screen flag
0014               *--------------------------------------------------------------
0015               * OUTPUT
0016               * @fb.scrrows = Number of available rows in frame buffer
0017               *--------------------------------------------------------------
0018               * Register usage
0019               * none
0020               *--------------------------------------------------------------
0021               * Remarks
0022               * none
0023               ********|*****|*********************|**************************
0024               fb.calc.scrrows:
0025 71C8 0649  14         dect  stack
0026 71CA C64B  30         mov   r11,*stack            ; Save return address
0027                       ;------------------------------------------------------
0028                       ; Initialisation
0029                       ;------------------------------------------------------
0030 71CC C820  54         mov   @fb.scrrows.max,@fb.scrrows
     71CE A31E     
     71D0 A31C     
0031                                                   ; Set maximum number of available rows
0032                       ;------------------------------------------------------
0033                       ; (1) Handle ruler visible on screen
0034                       ;------------------------------------------------------
0035               fb.calc.scrrows.handle.ruler:
0036 71D2 0760  38         abs   @tv.ruler.visible     ; Ruler visible?
     71D4 A210     
0037 71D6 1302  14         jeq   fb.calc.scrrows.handle.mc
0038 71D8 0620  34         dec   @fb.scrrows           ; Yes, adjust rows
     71DA A31C     
0039                       ;------------------------------------------------------
0040                       ; (2) Handle Master Catalog
0041                       ;------------------------------------------------------
0042               fb.calc.scrrows.handle.mc:
0043 71DC 8820  50         c     @edb.special.file,@const.0
     71DE A520     
     71E0 2000     
0044 71E2 1302  14         jeq   fb.calc.scrrows.handle.errors
0045 71E4 0620  34         dec   @fb.scrrows           ; Yes, adjust rows
     71E6 A31C     
0046                       ;------------------------------------------------------
0047                       ; (3) Handle error area
0048                       ;------------------------------------------------------
0049               fb.calc.scrrows.handle.errors:
0050 71E8 0760  38         abs   @tv.error.visible     ; Error area visible?
     71EA A22A     
0051 71EC 1303  14         jeq   fb.calc.scrrows.exit
0052 71EE 6820  54         s     @tv.error.rows,@fb.scrrows
     71F0 A22C     
     71F2 A31C     
0053                                                   ; Yes, adjust rows
0054                       ;-------------------------------------------------------
0055                       ; Exit
0056                       ;-------------------------------------------------------
0057               fb.calc.scrrows.exit:
0058 71F4 C2F9  30         mov   *stack+,r11           ; Pop r11
0059 71F6 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0012                       copy  "idx.asm"                ; Index management
     **** ****     > idx.asm
0001               * FILE......: idx.asm
0002               * Purpose...: Index management
0003               
0004               ***************************************************************
0005               *  Size of index page is 4K and allows indexing of 2048 lines
0006               *  per page.
0007               *
0008               *  Each index slot (word) has the format:
0009               *    +-----+-----+
0010               *    | MSB | LSB |
0011               *    +-----|-----+   LSB = Pointer offset 00-ff.
0012               *
0013               *  MSB = SAMS Page 40-ff
0014               *        Allows addressing of up to 256 4K SAMS pages (1024 KB)
0015               *
0016               *  LSB = Pointer offset in range 00-ff
0017               *
0018               *        To calculate pointer to line in Editor buffer:
0019               *        Pointer address = edb.top + (LSB * 16)
0020               *
0021               *        Note that the editor buffer itself resides in own 4K memory range
0022               *        starting at edb.top
0023               *
0024               *        All support routines must assure that length-prefixed string in
0025               *        Editor buffer always start on a 16 byte boundary for being
0026               *        accessible via index.
0027               *
0028               *
0029               * The index starts at SAMS page >20 and can allocate up to page >3f
0030               * for a total of 32 pages (128 K). With that up to 65536 lines of text
0031               * can be addressed.
0032               ***************************************************************
0033               
0034               
0035               ***************************************************************
0036               * idx.init
0037               * Initialize index
0038               ***************************************************************
0039               * bl @idx.init
0040               *--------------------------------------------------------------
0041               * INPUT
0042               * none
0043               *--------------------------------------------------------------
0044               * OUTPUT
0045               * none
0046               *--------------------------------------------------------------
0047               * Register usage
0048               * tmp0
0049               ********|*****|*********************|**************************
0050               idx.init:
0051 71F8 0649  14         dect  stack
0052 71FA C64B  30         mov   r11,*stack            ; Save return address
0053 71FC 0649  14         dect  stack
0054 71FE C644  30         mov   tmp0,*stack           ; Push tmp0
0055                       ;------------------------------------------------------
0056                       ; Initialize
0057                       ;------------------------------------------------------
0058 7200 0204  20         li    tmp0,idx.top
     7202 B000     
0059 7204 C804  38         mov   tmp0,@edb.index.ptr   ; Set pointer to index in editor structure
     7206 A502     
0060               
0061 7208 C120  34         mov   @tv.sams.b000,tmp0
     720A A206     
0062 720C C804  38         mov   tmp0,@idx.sams.page   ; Set current SAMS page
     720E A600     
0063 7210 C804  38         mov   tmp0,@idx.sams.lopage ; Set 1st SAMS page
     7212 A602     
0064                       ;------------------------------------------------------
0065                       ; Clear all index pages
0066                       ;------------------------------------------------------
0067 7214 0224  22         ai    tmp0,4                ; \ Let's clear all index pages
     7216 0004     
0068 7218 C804  38         mov   tmp0,@idx.sams.hipage ; /
     721A A604     
0069               
0070 721C 06A0  32         bl    @_idx.sams.mapcolumn.on
     721E 317A     
0071                                                   ; Index in continuous memory region
0072               
0073 7220 06A0  32         bl    @film
     7222 2236     
0074 7224 B000                   data idx.top,>00,idx.size * 5
     7226 0000     
     7228 5000     
0075                                                   ; Clear index
0076               
0077 722A 06A0  32         bl    @_idx.sams.mapcolumn.off
     722C 31AE     
0078                                                   ; Restore memory window layout
0079               
0080 722E C820  54         mov   @idx.sams.lopage,@idx.sams.hipage
     7230 A602     
     7232 A604     
0081                                                   ; Reset last SAMS page
0082                       ;------------------------------------------------------
0083                       ; Exit
0084                       ;------------------------------------------------------
0085               idx.init.exit:
0086 7234 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0087 7236 C2F9  30         mov   *stack+,r11           ; Pop r11
0088 7238 045B  20         b     *r11                  ; Return to caller
0089               
0090               
0091               ***************************************************************
0092               * bl @_idx.sams.mapcolumn.on
0093               *--------------------------------------------------------------
0094               * Register usage
0095               * tmp0, tmp1, tmp2
0096               *--------------------------------------------------------------
0097               *  Remarks
0098               *  Private, only to be called from inside idx module
0099               ********|*****|*********************|**************************
0100               _idx.sams.mapcolumn.on:
0101 723A 0649  14         dect  stack
0102 723C C64B  30         mov   r11,*stack            ; Push return address
0103 723E 0649  14         dect  stack
0104 7240 C644  30         mov   tmp0,*stack           ; Push tmp0
0105 7242 0649  14         dect  stack
0106 7244 C645  30         mov   tmp1,*stack           ; Push tmp1
0107 7246 0649  14         dect  stack
0108 7248 C646  30         mov   tmp2,*stack           ; Push tmp2
0109               *--------------------------------------------------------------
0110               * Map index pages into memory window  (b000-ffff)
0111               *--------------------------------------------------------------
0112 724A C120  34         mov   @idx.sams.lopage,tmp0 ; Get lowest index page
     724C A602     
0113 724E 0205  20         li    tmp1,idx.top
     7250 B000     
0114 7252 0206  20         li    tmp2,5                ; Set loop counter. all pages of index
     7254 0005     
0115                       ;-------------------------------------------------------
0116                       ; Loop over banks
0117                       ;-------------------------------------------------------
0118 7256 06A0  32 !       bl    @xsams.page.set       ; Set SAMS page
     7258 2576     
0119                                                   ; \ i  tmp0  = SAMS page number
0120                                                   ; / i  tmp1  = Memory address
0121               
0122 725A 0584  14         inc   tmp0                  ; Next SAMS index page
0123 725C 0225  22         ai    tmp1,>1000            ; Next memory region
     725E 1000     
0124 7260 0606  14         dec   tmp2                  ; Update loop counter
0125 7262 15F9  14         jgt   -!                    ; Next iteration
0126               *--------------------------------------------------------------
0127               * Exit
0128               *--------------------------------------------------------------
0129               _idx.sams.mapcolumn.on.exit:
0130 7264 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0131 7266 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0132 7268 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0133 726A C2F9  30         mov   *stack+,r11           ; Pop return address
0134 726C 045B  20         b     *r11                  ; Return to caller
0135               
0136               
0137               ***************************************************************
0138               * _idx.sams.mapcolumn.off
0139               * Restore normal SAMS layout again (single index page)
0140               ***************************************************************
0141               * bl @_idx.sams.mapcolumn.off
0142               *--------------------------------------------------------------
0143               * Register usage
0144               * tmp0, tmp1, tmp2, tmp3
0145               *--------------------------------------------------------------
0146               *  Remarks
0147               *  Private, only to be called from inside idx module
0148               ********|*****|*********************|**************************
0149               _idx.sams.mapcolumn.off:
0150 726E 0649  14         dect  stack
0151 7270 C64B  30         mov   r11,*stack            ; Push return address
0152 7272 0649  14         dect  stack
0153 7274 C644  30         mov   tmp0,*stack           ; Push tmp0
0154 7276 0649  14         dect  stack
0155 7278 C645  30         mov   tmp1,*stack           ; Push tmp1
0156 727A 0649  14         dect  stack
0157 727C C646  30         mov   tmp2,*stack           ; Push tmp2
0158 727E 0649  14         dect  stack
0159 7280 C647  30         mov   tmp3,*stack           ; Push tmp3
0160               *--------------------------------------------------------------
0161               * Map index pages into memory window  (b000-????)
0162               *--------------------------------------------------------------
0163 7282 0205  20         li    tmp1,idx.top
     7284 B000     
0164 7286 0206  20         li    tmp2,5                ; Always 5 pages
     7288 0005     
0165 728A 0207  20         li    tmp3,tv.sams.b000     ; Pointer to fist SAMS page
     728C A206     
0166                       ;-------------------------------------------------------
0167                       ; Loop over table in memory (@tv.sams.b000:@tv.sams.f000)
0168                       ;-------------------------------------------------------
0169 728E C137  30 !       mov   *tmp3+,tmp0           ; Get SAMS page
0170               
0171 7290 06A0  32         bl    @xsams.page.set       ; Set SAMS page
     7292 2576     
0172                                                   ; \ i  tmp0  = SAMS page number
0173                                                   ; / i  tmp1  = Memory address
0174               
0175 7294 0225  22         ai    tmp1,>1000            ; Next memory region
     7296 1000     
0176 7298 0606  14         dec   tmp2                  ; Update loop counter
0177 729A 15F9  14         jgt   -!                    ; Next iteration
0178               *--------------------------------------------------------------
0179               * Exit
0180               *--------------------------------------------------------------
0181               _idx.sams.mapcolumn.off.exit:
0182 729C C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0183 729E C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0184 72A0 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0185 72A2 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0186 72A4 C2F9  30         mov   *stack+,r11           ; Pop return address
0187 72A6 045B  20         b     *r11                  ; Return to caller
0188               
0189               
0190               
0191               ***************************************************************
0192               * _idx.samspage.get
0193               * Get SAMS page for index
0194               ***************************************************************
0195               * bl @_idx.samspage.get
0196               *--------------------------------------------------------------
0197               * INPUT
0198               * tmp0 = Line number
0199               *--------------------------------------------------------------
0200               * OUTPUT
0201               * @outparm1 = Offset for index entry in index SAMS page
0202               *--------------------------------------------------------------
0203               * Register usage
0204               * tmp0, tmp1, tmp2
0205               *--------------------------------------------------------------
0206               *  Remarks
0207               *  Private, only to be called from inside idx module.
0208               *  Activates SAMS page containing required index slot entry.
0209               ********|*****|*********************|**************************
0210               _idx.samspage.get:
0211 72A8 0649  14         dect  stack
0212 72AA C64B  30         mov   r11,*stack            ; Save return address
0213 72AC 0649  14         dect  stack
0214 72AE C644  30         mov   tmp0,*stack           ; Push tmp0
0215 72B0 0649  14         dect  stack
0216 72B2 C645  30         mov   tmp1,*stack           ; Push tmp1
0217 72B4 0649  14         dect  stack
0218 72B6 C646  30         mov   tmp2,*stack           ; Push tmp2
0219                       ;------------------------------------------------------
0220                       ; Determine SAMS index page
0221                       ;------------------------------------------------------
0222 72B8 C184  18         mov   tmp0,tmp2             ; Line number
0223 72BA 04C5  14         clr   tmp1                  ; MSW (tmp1) = 0 / LSW (tmp2) = Line number
0224 72BC 0204  20         li    tmp0,2048             ; Index entries in 4K SAMS page
     72BE 0800     
0225               
0226 72C0 3D44 128         div   tmp0,tmp1             ; \ Divide 32 bit value by 2048
0227                                                   ; | tmp1 = quotient  (SAMS page offset)
0228                                                   ; / tmp2 = remainder
0229               
0230 72C2 0A16  18         sla   tmp2,1                ; line number * 2
0231 72C4 C806  38         mov   tmp2,@outparm1        ; Offset index entry
     72C6 A018     
0232               
0233 72C8 A160  34         a     @idx.sams.lopage,tmp1 ; Add SAMS page base
     72CA A602     
0234 72CC 8805  34         c     tmp1,@idx.sams.page   ; Page already active?
     72CE A600     
0235               
0236 72D0 130E  14         jeq   _idx.samspage.get.exit
0237                                                   ; Yes, so exit
0238                       ;------------------------------------------------------
0239                       ; Activate SAMS index page
0240                       ;------------------------------------------------------
0241 72D2 C805  38         mov   tmp1,@idx.sams.page   ; Set current SAMS page
     72D4 A600     
0242 72D6 C805  38         mov   tmp1,@tv.sams.b000    ; Also keep SAMS window synced in Stevie
     72D8 A206     
0243 72DA C105  18         mov   tmp1,tmp0             ; Destination SAMS page
0244               
0245 72DC 0205  20         li    tmp1,>b000            ; Memory window for index page
     72DE B000     
0246               
0247 72E0 06A0  32         bl    @xsams.page.set       ; Switch to SAMS page
     72E2 2576     
0248                                                   ; \ i  tmp0 = SAMS page
0249                                                   ; / i  tmp1 = Memory address
0250                       ;------------------------------------------------------
0251                       ; Check if new highest SAMS index page
0252                       ;------------------------------------------------------
0253 72E4 8804  34         c     tmp0,@idx.sams.hipage ; New highest page?
     72E6 A604     
0254 72E8 1202  14         jle   _idx.samspage.get.exit
0255                                                   ; No, exit
0256 72EA C804  38         mov   tmp0,@idx.sams.hipage ; Yes, set highest SAMS index page
     72EC A604     
0257                       ;------------------------------------------------------
0258                       ; Exit
0259                       ;------------------------------------------------------
0260               _idx.samspage.get.exit:
0261 72EE C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0262 72F0 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0263 72F2 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0264 72F4 C2F9  30         mov   *stack+,r11           ; Pop r11
0265 72F6 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0013                       copy  "edb.asm"                ; Editor Buffer
     **** ****     > edb.asm
0001               * FILE......: edb.asm
0002               * Purpose...: Stevie Editor - Editor Buffer module
0003               
0004               ***************************************************************
0005               * edb.init
0006               * Initialize Editor buffer
0007               ***************************************************************
0008               * bl @edb.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ***************************************************************
0021               edb.init:
0022 72F8 0649  14         dect  stack
0023 72FA C64B  30         mov   r11,*stack            ; Save return address
0024 72FC 0649  14         dect  stack
0025 72FE C644  30         mov   tmp0,*stack           ; Push tmp0
0026                       ;------------------------------------------------------
0027                       ; Initialize
0028                       ;------------------------------------------------------
0029 7300 0204  20         li    tmp0,edb.top          ; \
     7302 C000     
0030 7304 C804  38         mov   tmp0,@edb.top.ptr     ; / Set pointer to top of editor buffer
     7306 A500     
0031 7308 C804  38         mov   tmp0,@edb.next_free.ptr
     730A A508     
0032                                                   ; Set pointer to next free line
0033               
0034 730C 0720  34         seto  @edb.insmode          ; Turn on insert mode for this editor buffer
     730E A50A     
0035               
0036 7310 0204  20         li    tmp0,1
     7312 0001     
0037 7314 C804  38         mov   tmp0,@edb.lines       ; Lines=1
     7316 A504     
0038               
0039 7318 0720  34         seto  @edb.block.m1         ; Reset block start line
     731A A50E     
0040 731C 0720  34         seto  @edb.block.m2         ; Reset block end line
     731E A510     
0041               
0042 7320 C820  54         mov   @tv.lineterm,@edb.lineterm
     7322 A236     
     7324 A522     
0043                                                   ; Set line termination char from default
0044               
0045 7326 0204  20         li    tmp0,txt.newfile      ; "New file"
     7328 3B10     
0046 732A C804  38         mov   tmp0,@edb.filename.ptr
     732C A514     
0047               
0048 732E 04E0  34         clr   @fh.kilobytes         ; \ Clear kilobytes processed
     7330 A440     
0049 7332 04E0  34         clr   @fh.kilobytes.prev    ; /
     7334 A45C     
0050               
0051 7336 0204  20         li    tmp0,txt.filetype.none
     7338 3C30     
0052 733A C804  38         mov   tmp0,@edb.filetype.ptr
     733C A516     
0053               
0054               edb.init.exit:
0055                       ;------------------------------------------------------
0056                       ; Exit
0057                       ;------------------------------------------------------
0058 733E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0059 7340 C2F9  30         mov   *stack+,r11           ; Pop r11
0060 7342 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0014                       copy  "cmdb.asm"               ; Command buffer
     **** ****     > cmdb.asm
0001               * FILE......: cmdb.asm
0002               * Purpose...: Stevie Editor - Command Buffer module
0003               
0004               ***************************************************************
0005               * cmdb.init
0006               * Initialize Command Buffer
0007               ***************************************************************
0008               * bl @cmdb.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               cmdb.init:
0022 7344 0649  14         dect  stack
0023 7346 C64B  30         mov   r11,*stack            ; Save return address
0024 7348 0649  14         dect  stack
0025 734A C644  30         mov   tmp0,*stack           ; Push tmp0
0026 734C 0649  14         dect  stack
0027 734E C645  30         mov   tmp1,*stack           ; Push tmp1
0028                       ;------------------------------------------------------
0029                       ; Initialize
0030                       ;------------------------------------------------------
0031 7350 0204  20         li    tmp0,cmdb.top         ; \ Set pointer to command buffer
     7352 E000     
0032 7354 C804  38         mov   tmp0,@cmdb.top.ptr    ; /
     7356 A700     
0033               
0034 7358 04E0  34         clr   @cmdb.visible         ; Hide command buffer
     735A A702     
0035 735C 0204  20         li    tmp0,6
     735E 0006     
0036 7360 C804  38         mov   tmp0,@cmdb.scrrows    ; Set current command buffer size
     7362 A706     
0037 7364 C804  38         mov   tmp0,@cmdb.default    ; Set default command buffer size
     7366 A708     
0038               
0039 7368 04E0  34         clr   @cmdb.lines           ; Number of lines in cmdb buffer
     736A A718     
0040 736C 04E0  34         clr   @cmdb.dirty           ; Command buffer is clean
     736E A71A     
0041 7370 04E0  34         clr   @cmdb.action.ptr      ; Reset action to execute pointer
     7372 A72C     
0042 7374 0720  34         seto  @cmdb.fb.yxsave       ; Reset (removes "write protection")
     7376 A704     
0043                       ;------------------------------------------------------
0044                       ; Calculate VDP address of CMDB top row (TAT!)
0045                       ;------------------------------------------------------
0046 7378 0204  20         li    tmp0,pane.botrow      ; \
     737A 001D     
0047 737C 6120  34         s     @cmdb.scrrows,tmp0    ; | pos = Y * (columns per row)
     737E A706     
0048 7380 3920  70         mpy   @wcolmn,tmp0          ; | result is in tmp1
     7382 833A     
0049 7384 C105  18         mov   tmp1,tmp0             ; | Get result
0050 7386 0224  22         ai    tmp0,vdp.tat.base     ; | Add VDP TAT base address
     7388 1800     
0051 738A C804  38         mov   tmp0,@cmdb.vdptop     ; /
     738C A70E     
0052                       ;------------------------------------------------------
0053                       ; Clear command buffer
0054                       ;------------------------------------------------------
0055 738E 06A0  32         bl    @film
     7390 2236     
0056 7392 E000                   data  cmdb.top,>00,cmdb.size
     7394 0000     
     7396 1000     
0057                                                   ; Clear it all the way
0058                       ;------------------------------------------------------
0059                       ; Exit
0060                       ;------------------------------------------------------
0061               cmdb.init.exit:
0062 7398 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0063 739A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0064 739C C2F9  30         mov   *stack+,r11           ; Pop r11
0065 739E 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0015                       copy  "errpane.asm"            ; Error pane
     **** ****     > errpane.asm
0001               * FILE......: errpane.asm
0002               * Purpose...: Error pane utilities
0003               
0004               ***************************************************************
0005               * errpane.init
0006               * Initialize error pane
0007               ***************************************************************
0008               * bl @errpane.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0,tmp1,tmp2
0018               *--------------------------------------------------------------
0019               * Notes
0020               ***************************************************************
0021               errpane.init:
0022 73A0 0649  14         dect  stack
0023 73A2 C64B  30         mov   r11,*stack            ; Save return address
0024 73A4 0649  14         dect  stack
0025 73A6 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 73A8 0649  14         dect  stack
0027 73AA C645  30         mov   tmp1,*stack           ; Push tmp1
0028 73AC 0649  14         dect  stack
0029 73AE C646  30         mov   tmp2,*stack           ; Push tmp2
0030                       ;------------------------------------------------------
0031                       ; Initialize
0032                       ;------------------------------------------------------
0033 73B0 04E0  34         clr   @tv.error.visible     ; Set to hidden
     73B2 A22A     
0034 73B4 0204  20         li    tmp0,3
     73B6 0003     
0035 73B8 C804  38         mov   tmp0,@tv.error.rows   ; Number of rows in error pane
     73BA A22C     
0036               
0037 73BC 06A0  32         bl    @film
     73BE 2236     
0038 73C0 A238                   data tv.error.msg,0,160
     73C2 0000     
     73C4 00A0     
0039                       ;-------------------------------------------------------
0040                       ; Exit
0041                       ;-------------------------------------------------------
0042               errpane.exit:
0043 73C6 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0044 73C8 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0045 73CA C139  30         mov   *stack+,tmp0          ; Pop tmp0
0046 73CC C2F9  30         mov   *stack+,r11           ; Pop R11
0047 73CE 045B  20         b     *r11                  ; Return to caller
0048               
                   < rom.resident.asm
0016                       copy  "tv.asm"                 ; Main editor configuration
     **** ****     > tv.asm
0001               * FILE......: tv.asm
0002               * Purpose...: Initialize editor
0003               
0004               ***************************************************************
0005               * tv.init
0006               * Initialize editor settings
0007               ***************************************************************
0008               * bl @tv.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ***************************************************************
0021               tv.init:
0022 73D0 0649  14         dect  stack
0023 73D2 C64B  30         mov   r11,*stack            ; Save return address
0024 73D4 0649  14         dect  stack
0025 73D6 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 73D8 0649  14         dect  stack
0027 73DA C645  30         mov   tmp1,*stack           ; Push tmp1
0028 73DC 0649  14         dect  stack
0029 73DE C646  30         mov   tmp2,*stack           ; Push tmp2
0030                       ;------------------------------------------------------
0031                       ; Initialize
0032                       ;------------------------------------------------------
0033 73E0 0204  20         li    tmp0,1                ; \ Set default color scheme
     73E2 0001     
0034 73E4 C804  38         mov   tmp0,@tv.colorscheme  ; /
     73E6 A212     
0035               
0036 73E8 04E0  34         clr   @tv.task.oneshot      ; Reset pointer to oneshot task
     73EA A226     
0037 73EC E0A0  34         soc   @wbit10,config        ; Assume ALPHA LOCK is down
     73EE 200C     
0038               
0039 73F0 0204  20         li    tmp0,fj.bottom
     73F2 B000     
0040 73F4 C804  38         mov   tmp0,@tv.fj.stackpnt  ; Set pointer to farjump return stack
     73F6 A228     
0041               
0042 73F8 04E0  34         clr   @tv.specmsg.ptr       ; No special message
     73FA A234     
0043                       ;------------------------------------------------------
0044                       ; Set defaults
0045                       ;------------------------------------------------------
0046 73FC 06A0  32         bl    @cpym2m
     73FE 24DA     
0047 7400 3D5C                   data def.printer.fname,tv.printer.fname,7
     7402 DE00     
     7404 0007     
0048               
0049 7406 06A0  32         bl    @cpym2m
     7408 24DA     
0050 740A 3D63                   data def.clip.fname.a,tv.clip.fname,10
     740C DE50     
     740E 000A     
0051               
0052 7410 06A0  32         bl    @cpym2m
     7412 24DA     
0053 7414 3D9B                   data def.mc.fname.c,tv.mc.fname,13
     7416 DEA0     
     7418 000D     
0054               
0055 741A 04E0  34         clr   @edb.autoinsert       ; Set AutoInsert off by default
     741C A50C     
0056                       ;-------------------------------------------------------
0057                       ; Exit
0058                       ;-------------------------------------------------------
0059               tv.init.exit:
0060 741E C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0061 7420 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0062 7422 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0063 7424 C2F9  30         mov   *stack+,r11           ; Pop R11
0064 7426 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0017                       copy  "tv.quit.asm"            ; Exit Stevie and return to monitor
     **** ****     > tv.quit.asm
0001               * FILE......: tv.quit.asm
0002               * Purpose...: Quit Stevie and return to monitor
0003               
0004               ***************************************************************
0005               * tv.quit
0006               * Quit stevie and return to monitor
0007               ***************************************************************
0008               * b    @tv.quit
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               ***************************************************************
0019               tv.quit:
0020                       ;-------------------------------------------------------
0021                       ; Reset/lock F18a
0022                       ;-------------------------------------------------------
0023 7428 06A0  32         bl    @f18rst               ; Reset and lock the F18A
     742A 27A6     
0024                       ;-------------------------------------------------------
0025                       ; Load legacy SAMS page layout and exit to monitor
0026                       ;-------------------------------------------------------
0027 742C 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     742E 2FCA     
0028 7430 600E                   data bank7.rom        ; | i  p0 = bank address
0029 7432 7F40                   data bankx.vectab     ; | i  p1 = Vector with target address
0030 7434 6000                   data bankid           ; / i  p2 = Source ROM bank for return
0031               
0032                       ; We never return here. We call @mem.sams.set.legacy (vector1) and
0033                       ; in there activate bank 0 in cartridge space and return to monitor.
0034                       ;
0035                       ; Reason for doing so is that @tv.quit is located in
0036                       ; low memory expansion. So switching SAMS banks or turning off the SAMS
0037                       ; mapper results in invalid OPCODE's because the program just isn't
0038                       ; there in low memory expansion anymore.
                   < rom.resident.asm
0018                       copy  "tv.reset.asm"           ; Reset editor (clear buffers)
     **** ****     > tv.reset.asm
0001               * FILE......: tv.reset.asm
0002               * Purpose...: Reset editor (clear buffers)
0003               
0004               
0005               ***************************************************************
0006               * tv.reset
0007               * Reset editor (clear buffers)
0008               ***************************************************************
0009               * bl @tv.reset
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * none
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * r11
0019               *--------------------------------------------------------------
0020               * Notes
0021               ********|*****|*********************|**************************
0022               tv.reset:
0023 7436 0649  14         dect  stack
0024 7438 C64B  30         mov   r11,*stack            ; Save return address
0025                       ;------------------------------------------------------
0026                       ; Reset editor
0027                       ;------------------------------------------------------
0028 743A 06A0  32         bl    @cmdb.init            ; Initialize command buffer
     743C 3284     
0029 743E 06A0  32         bl    @edb.init             ; Initialize editor buffer
     7440 3238     
0030 7442 06A0  32         bl    @idx.init             ; Initialize index
     7444 3138     
0031 7446 06A0  32         bl    @fb.init              ; Initialize framebuffer
     7448 306C     
0032 744A 06A0  32         bl    @errpane.init         ; Initialize error pane
     744C 32E0     
0033                       ;------------------------------------------------------
0034                       ; Remove markers and shortcuts
0035                       ;------------------------------------------------------
0036 744E 06A0  32         bl    @hchar
     7450 27D2     
0037 7452 0034                   byte 0,52,32,18       ; Remove markers
     7454 2012     
0038 7456 1D00                   byte pane.botrow,0,32,51
     7458 2033     
0039 745A FFFF                   data eol              ; Remove block shortcuts
0040                       ;-------------------------------------------------------
0041                       ; Exit
0042                       ;-------------------------------------------------------
0043               tv.reset.exit:
0044 745C C2F9  30         mov   *stack+,r11           ; Pop R11
0045 745E 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0019                       copy  "tv.uint16.pack.asm"     ; Pack string to 16bit unsigned integer
     **** ****     > tv.uint16.pack.asm
0001               * FILE......: tv.uint16.pack.asm
0002               * Purpose...: Pack string to 16bit unsigned integer
0003               
0004               ***************************************************************
0005               * tv.uint16.pack
0006               * Pack (number) string to 16bit unsigned integer
0007               ***************************************************************
0008               * bl @tv.uint16.pack
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Pointer to input string (no length-byte prefix!)
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @outparm1 = 16bit unsigned integer
0015               * @outparm2 = 0 conversion ok, >FFFF invalid input
0016               *--------------------------------------------------------------
0017               * REMARK
0018               * None
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * tmp0, tmp1, tmp2, tmp3, r0, r1
0022               ***************************************************************
0023               tv.uint16.pack:
0024 7460 0649  14         dect  stack
0025 7462 C64B  30         mov   r11,*stack            ; Push return address
0026 7464 0649  14         dect  stack
0027 7466 C644  30         mov   tmp0,*stack           ; Push tmp0
0028 7468 0649  14         dect  stack
0029 746A C645  30         mov   tmp1,*stack           ; Push tmp1
0030 746C 0649  14         dect  stack
0031 746E C646  30         mov   tmp2,*stack           ; Push tmp2
0032 7470 0649  14         dect  stack
0033 7472 C647  30         mov   tmp3,*stack           ; Push tmp3
0034 7474 0649  14         dect  stack
0035 7476 C640  30         mov   r0,*stack             ; Push r0
0036 7478 0649  14         dect  stack
0037 747A C641  30         mov   r1,*stack             ; Push r1
0038                       ;------------------------------------------------------
0039                       ; Initialisation
0040                       ;------------------------------------------------------
0041 747C C120  34         mov   @parm1,tmp0           ; Pointer to input string
     747E A006     
0042 7480 04C5  14         clr   tmp1                  ; Termination character >00
0043 7482 04E0  34         clr   @outparm1             ; Reset output parameters
     7484 A018     
0044 7486 04E0  34         clr   @outparm2             ; Reset output parameters
     7488 A01A     
0045                       ;------------------------------------------------------
0046                       ; Get string length
0047                       ;------------------------------------------------------
0048 748A 06A0  32         bl    @xstring.getlenc      ; Get length of C-style string
     748C 2AB4     
0049                                                   ; \ i  tmp0   = Pointer to C-style string
0050                                                   ; | i  tmp1   = Termination character
0051                                                   ; / o  @waux1 = Length of string
0052                       ;------------------------------------------------------
0053                       ; Assert
0054                       ;------------------------------------------------------
0055 748E C1A0  30         mov   @waux1,tmp2           ; Get string length
     7490 833C     
0056 7492 131F  14         jeq   tv.uint16.pack.error  ; No input string given
0057 7494 0286  22         ci    tmp2,5                ; Maximum 5 digits ?
     7496 0005     
0058 7498 151C  14         jgt   tv.uint16.pack.error  ; Input string too long
0059                       ;------------------------------------------------------
0060                       ; Prepare register values
0061                       ;------------------------------------------------------
0062 749A C120  34         mov   @parm1,tmp0           ; Pointer to input string
     749C A006     
0063               
0064 749E A186  18         a     tmp2,tmp2             ; \ Starting offset in tv.uint16.mpy
0065 74A0 0226  22         ai    tmp2,-10              ; |    10 - (tmp2 * 2)
     74A2 FFF6     
0066 74A4 0746  18         abs   tmp2                  ; /
0067               
0068 74A6 04C7  14         clr   tmp3                  ; Clear final uint16
0069                       ;------------------------------------------------------
0070                       ; Get character
0071                       ;------------------------------------------------------
0072               tv.uint16.pack.loop:
0073 74A8 D174  28         movb  *tmp0+,tmp1           ; Get character
0074 74AA 0985  32         srl   tmp1,8                ; MSB to LSB
0075                       ;------------------------------------------------------
0076                       ; Character is ASCII 0 or blank (ASCII 32) ?
0077                       ;------------------------------------------------------
0078 74AC 1318  14         jeq   tv.uint16.pack.exit   ; End of string reached
0079 74AE 0285  22         ci    tmp1,32               ; Blank ?
     74B0 0020     
0080 74B2 1315  14         jeq   tv.uint16.pack.exit   ; End of string reached
0081                       ;------------------------------------------------------
0082                       ; Character in range 0..9 ?
0083                       ;------------------------------------------------------
0084 74B4 0225  22         ai    tmp1,-48              ; Remove ASCII offset
     74B6 FFD0     
0085 74B8 110C  14         jlt   tv.uint16.pack.error  ; Invalid character, exit
0086 74BA 0285  22         ci    tmp1,9
     74BC 0009     
0087 74BE 1509  14         jgt   tv.uint16.pack.error  ; Invalid character, exit
0088                       ;------------------------------------------------------
0089                       ; Get base 10 multiplier for digit
0090                       ;------------------------------------------------------
0091 74C0 C026  34         mov   @tv.uint16.mpy(tmp2),r0
     74C2 342E     
0092                       ;------------------------------------------------------
0093                       ; Convert number to decimal 10 (final result in tmp3)
0094                       ;------------------------------------------------------
0095 74C4 3805  58         mpy   tmp1,r0               ; Multiply digit with r0, 32bit result is
0096                                                   ; in r0 and r1. We need r1 (LSW)
0097 74C6 A1C1  18         a     r1,tmp3               ; Add base10 value to final uint16
0098                       ;------------------------------------------------------
0099                       ; Prepare for next digit
0100                       ;------------------------------------------------------
0101 74C8 05C6  14         inct  tmp2                  ; Update loop counter
0102 74CA 0286  22         ci    tmp2,8                ; Last digit done?
     74CC 0008     
0103 74CE 12EC  14         jle   tv.uint16.pack.loop   ; Next iteration
0104 74D0 1004  14         jmp   tv.uint16.pack.done   ; Done packing uint16, exit
0105                       ;------------------------------------------------------
0106                       ; Invalid character, stop packing and exit
0107                       ;------------------------------------------------------
0108               tv.uint16.pack.error:
0109 74D2 04E0  34         clr   @outparm1             ; Empty uint16
     74D4 A018     
0110 74D6 0720  34         seto  @outparm2             ; Invalid input string
     74D8 A01A     
0111                       ;-------------------------------------------------------
0112                       ; Save final uint16
0113                       ;-------------------------------------------------------
0114               tv.uint16.pack.done:
0115 74DA C807  38         mov   tmp3,@outparm1
     74DC A018     
0116                       ;-------------------------------------------------------
0117                       ; Exit
0118                       ;-------------------------------------------------------
0119               tv.uint16.pack.exit:
0120 74DE C079  30         mov   *stack+,r1            ; Pop r1
0121 74E0 C039  30         mov   *stack+,r0            ; Pop r0
0122 74E2 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0123 74E4 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0124 74E6 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0125 74E8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0126 74EA C2F9  30         mov   *stack+,r11           ; Pop r11
0127 74EC 045B  20         b     *r11                  ; Return to caller
0128                       ;-------------------------------------------------------
0129                       ; Constants for base 10 mmultipliers
0130                       ;-------------------------------------------------------
0131               tv.uint16.mpy:
0132 74EE 2710             data  10000,1000,100,10,1
     74F0 03E8     
     74F2 0064     
     74F4 000A     
     74F6 0001     
0133               
                   < rom.resident.asm
0020                       copy  "tv.uint16.unpack.asm"   ; Unpack 16bit unsigned integer to string
     **** ****     > tv.uint16.unpack.asm
0001               * FILE......: tv.uint16.unpack.asm
0002               * Purpose...: Unpack 16bit unsigned integer to string
0003               
0004               ***************************************************************
0005               * tv.uint16.unpack
0006               * Unpack 16bit unsigned integer to string
0007               ***************************************************************
0008               * bl @tv.uint16.unpack
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = 16bit unsigned integer
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @uint16.unpacked = Length-prefixed string with unpacked uint16
0015               *                    (6 bytes max)
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0
0019               ***************************************************************
0020               tv.uint16.unpack:
0021 74F8 0649  14         dect  stack
0022 74FA C64B  30         mov   r11,*stack            ; Save return address
0023 74FC 0649  14         dect  stack
0024 74FE C644  30         mov   tmp0,*stack           ; Push tmp0
0025                       ;------------------------------------------------------
0026                       ; Initialize
0027                       ;------------------------------------------------------
0028 7500 06A0  32         bl    @mknum                ; Convert unsigned number to string
     7502 29A6     
0029 7504 A006                   data parm1            ; \ i p0  = Pointer to 16bit unsigned number
0030 7506 A100                   data rambuf           ; | i p1  = Pointer to 5 byte string buffer
0031 7508 30                     byte 48               ; | i p2H = Offset for ASCII digit 0
0032 7509   20                   byte 32               ; / i p2L = Char for replacing leading 0's
0033               
0034 750A 0204  20         li    tmp0,uint16.unpacked
     750C A02C     
0035 750E 04F4  30         clr   *tmp0+                ; Clear string 01
0036 7510 04F4  30         clr   *tmp0+                ; Clear string 23
0037 7512 04F4  30         clr   *tmp0+                ; Clear string 34
0038               
0039 7514 06A0  32         bl    @trimnum              ; Trim unsigned number string
     7516 29FE     
0040 7518 A100                   data rambuf           ; \ i p0  = Pointer to 5 byte string buffer
0041 751A A02C                   data uint16.unpacked  ; | i p1  = Pointer to output buffer
0042 751C 0020                   data 32               ; / i p2  = Padding char to match against
0043                       ;-------------------------------------------------------
0044                       ; Exit
0045                       ;-------------------------------------------------------
0046               tv.uint16.unpack.exit:
0047 751E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0048 7520 C2F9  30         mov   *stack+,r11           ; Pop r11
0049 7522 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0021                       copy  "tv.pad.string.asm"      ; Pad string to specified length
     **** ****     > tv.pad.string.asm
0001               * FILE......: tv.pad.string.asm
0002               * Purpose...: pad string to specified length
0003               
0004               
0005               ***************************************************************
0006               * tv.pad.string
0007               * pad string to specified length
0008               ***************************************************************
0009               * bl @tv.pad.string
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @parm1 = Pointer to length-prefixed string
0013               * @parm2 = Requested length
0014               * @parm3 = Fill character
0015               * @parm4 = Pointer to string buffer
0016               *--------------------------------------------------------------
0017               * OUTPUT
0018               * @outparm1 = Pointer to padded string
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * none
0022               ***************************************************************
0023               tv.pad.string:
0024 7524 0649  14         dect  stack
0025 7526 C64B  30         mov   r11,*stack            ; Push return address
0026 7528 0649  14         dect  stack
0027 752A C644  30         mov   tmp0,*stack           ; Push tmp0
0028 752C 0649  14         dect  stack
0029 752E C645  30         mov   tmp1,*stack           ; Push tmp1
0030 7530 0649  14         dect  stack
0031 7532 C646  30         mov   tmp2,*stack           ; Push tmp2
0032 7534 0649  14         dect  stack
0033 7536 C647  30         mov   tmp3,*stack           ; Push tmp3
0034                       ;------------------------------------------------------
0035                       ; Asserts
0036                       ;------------------------------------------------------
0037 7538 C120  34         mov   @parm1,tmp0           ; \ Get string prefix (length-byte)
     753A A006     
0038 753C D194  26         movb  *tmp0,tmp2            ; /
0039 753E 0986  32         srl   tmp2,8                ; Right align
0040 7540 C1C6  18         mov   tmp2,tmp3             ; Make copy of length-byte for later use
0041               
0042 7542 8806  34         c     tmp2,@parm2           ; String length > requested length?
     7544 A008     
0043 7546 1520  14         jgt   tv.pad.string.panic   ; Yes, crash
0044                       ;------------------------------------------------------
0045                       ; Copy string to buffer
0046                       ;------------------------------------------------------
0047 7548 C120  34         mov   @parm1,tmp0           ; Get source address
     754A A006     
0048 754C C160  34         mov   @parm4,tmp1           ; Get destination address
     754E A00C     
0049 7550 0586  14         inc   tmp2                  ; Also include length-byte in copy
0050               
0051 7552 0649  14         dect  stack
0052 7554 C647  30         mov   tmp3,*stack           ; Push tmp3 (get overwritten by xpym2m)
0053               
0054 7556 06A0  32         bl    @xpym2m               ; Copy length-prefix string to buffer
     7558 24E0     
0055                                                   ; \ i  tmp0 = Source CPU memory address
0056                                                   ; | i  tmp1 = Target CPU memory address
0057                                                   ; / i  tmp2 = Number of bytes to copy
0058               
0059 755A C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0060                       ;------------------------------------------------------
0061                       ; Set length of new string
0062                       ;------------------------------------------------------
0063 755C C120  34         mov   @parm2,tmp0           ; Get requested length
     755E A008     
0064 7560 0A84  32         sla   tmp0,8                ; Left align
0065 7562 C160  34         mov   @parm4,tmp1           ; Get pointer to buffer
     7564 A00C     
0066 7566 D544  30         movb  tmp0,*tmp1            ; Set new length of string
0067 7568 A147  18         a     tmp3,tmp1             ; \ Skip to end of string
0068 756A 0585  14         inc   tmp1                  ; /
0069                       ;------------------------------------------------------
0070                       ; Prepare for padding string
0071                       ;------------------------------------------------------
0072 756C C1A0  34         mov   @parm2,tmp2           ; \ Get number of bytes to fill
     756E A008     
0073 7570 6187  18         s     tmp3,tmp2             ; |
0074 7572 0586  14         inc   tmp2                  ; /
0075               
0076 7574 C120  34         mov   @parm3,tmp0           ; Get byte to padd
     7576 A00A     
0077 7578 0A84  32         sla   tmp0,8                ; Left align
0078                       ;------------------------------------------------------
0079                       ; Right-pad string to destination length
0080                       ;------------------------------------------------------
0081               tv.pad.string.loop:
0082 757A DD44  32         movb  tmp0,*tmp1+           ; Pad character
0083 757C 0606  14         dec   tmp2                  ; Update loop counter
0084 757E 15FD  14         jgt   tv.pad.string.loop    ; Next character
0085               
0086 7580 C820  54         mov   @parm4,@outparm1      ; Set pointer to padded string
     7582 A00C     
     7584 A018     
0087 7586 1004  14         jmp   tv.pad.string.exit    ; Exit
0088                       ;-----------------------------------------------------------------------
0089                       ; CPU crash
0090                       ;-----------------------------------------------------------------------
0091               tv.pad.string.panic:
0092 7588 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     758A FFCE     
0093 758C 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     758E 2026     
0094                       ;------------------------------------------------------
0095                       ; Exit
0096                       ;------------------------------------------------------
0097               tv.pad.string.exit:
0098 7590 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0099 7592 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0100 7594 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0101 7596 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0102 7598 C2F9  30         mov   *stack+,r11           ; Pop r11
0103 759A 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0022                       ;-----------------------------------------------------------------------
0023                       ; Logic for Index management
0024                       ;-----------------------------------------------------------------------
0025                       copy  "idx.update.asm"         ; Index management - Update entry
     **** ****     > idx.update.asm
0001               * FILE......: idx.update.asm
0002               * Purpose...: Update index entry
0003               
0004               ***************************************************************
0005               * idx.entry.update
0006               * Update index entry - Each entry corresponds to a line
0007               ***************************************************************
0008               * bl @idx.entry.update
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1    = Line number in editor buffer
0012               * @parm2    = Pointer to line in editor buffer
0013               * @parm3    = SAMS page
0014               *--------------------------------------------------------------
0015               * OUTPUT
0016               * @outparm1 = Pointer to updated index entry
0017               *--------------------------------------------------------------
0018               * Register usage
0019               * tmp0,tmp1,tmp2
0020               ********|*****|*********************|**************************
0021               idx.entry.update:
0022 759C 0649  14         dect  stack
0023 759E C64B  30         mov   r11,*stack            ; Save return address
0024 75A0 0649  14         dect  stack
0025 75A2 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 75A4 0649  14         dect  stack
0027 75A6 C645  30         mov   tmp1,*stack           ; Push tmp1
0028                       ;------------------------------------------------------
0029                       ; Get parameters
0030                       ;------------------------------------------------------
0031 75A8 C120  34         mov   @parm1,tmp0           ; Get line number
     75AA A006     
0032 75AC C160  34         mov   @parm2,tmp1           ; Get pointer
     75AE A008     
0033 75B0 1312  14         jeq   idx.entry.update.clear
0034                                                   ; Special handling for "null"-pointer
0035                       ;------------------------------------------------------
0036                       ; Calculate LSB value index slot (pointer offset)
0037                       ;------------------------------------------------------
0038 75B2 0245  22         andi  tmp1,>0fff            ; Remove high-nibble from pointer
     75B4 0FFF     
0039 75B6 0945  24         srl   tmp1,4                ; Get offset (divide by 16)
0040                       ;------------------------------------------------------
0041                       ; Calculate MSB value index slot (SAMS page editor buffer)
0042                       ;------------------------------------------------------
0043 75B8 06E0  34         swpb  @parm3
     75BA A00A     
0044 75BC D160  34         movb  @parm3,tmp1           ; Put SAMS page in MSB
     75BE A00A     
0045 75C0 06E0  34         swpb  @parm3                ; \ Restore original order again,
     75C2 A00A     
0046                                                   ; / important for messing up caller parm3!
0047                       ;------------------------------------------------------
0048                       ; Update index slot
0049                       ;------------------------------------------------------
0050               idx.entry.update.save:
0051 75C4 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     75C6 31E8     
0052                                                   ; \ i  tmp0     = Line number
0053                                                   ; / o  outparm1 = Slot offset in SAMS page
0054               
0055 75C8 C120  34         mov   @outparm1,tmp0        ; \ Update index slot
     75CA A018     
0056 75CC C905  38         mov   tmp1,@idx.top(tmp0)   ; /
     75CE B000     
0057 75D0 C804  38         mov   tmp0,@outparm1        ; Pointer to updated index entry
     75D2 A018     
0058 75D4 1008  14         jmp   idx.entry.update.exit
0059                       ;------------------------------------------------------
0060                       ; Special handling for "null"-pointer
0061                       ;------------------------------------------------------
0062               idx.entry.update.clear:
0063 75D6 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     75D8 31E8     
0064                                                   ; \ i  tmp0     = Line number
0065                                                   ; / o  outparm1 = Slot offset in SAMS page
0066               
0067 75DA C120  34         mov   @outparm1,tmp0        ; \ Clear index slot
     75DC A018     
0068 75DE 04E4  34         clr   @idx.top(tmp0)        ; /
     75E0 B000     
0069 75E2 C804  38         mov   tmp0,@outparm1        ; Pointer to updated index entry
     75E4 A018     
0070                       ;------------------------------------------------------
0071                       ; Exit
0072                       ;------------------------------------------------------
0073               idx.entry.update.exit:
0074 75E6 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0075 75E8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0076 75EA C2F9  30         mov   *stack+,r11           ; Pop r11
0077 75EC 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0026                       copy  "idx.pointer.asm"        ; Index management - Get pointer to line
     **** ****     > idx.pointer.asm
0001               * FILE......: idx.pointer.asm
0002               * Purpose...: Get pointer to line in editor buffer
0003               
0004               ***************************************************************
0005               * idx.pointer.get
0006               * Get pointer to editor buffer line content
0007               ***************************************************************
0008               * bl @idx.pointer.get
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Line number in editor buffer
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @outparm1 = Pointer to editor buffer line content
0015               * @outparm2 = SAMS page
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0,tmp1,tmp2
0019               ********|*****|*********************|**************************
0020               idx.pointer.get:
0021 75EE 0649  14         dect  stack
0022 75F0 C64B  30         mov   r11,*stack            ; Save return address
0023 75F2 0649  14         dect  stack
0024 75F4 C644  30         mov   tmp0,*stack           ; Push tmp0
0025 75F6 0649  14         dect  stack
0026 75F8 C645  30         mov   tmp1,*stack           ; Push tmp1
0027 75FA 0649  14         dect  stack
0028 75FC C646  30         mov   tmp2,*stack           ; Push tmp2
0029                       ;------------------------------------------------------
0030                       ; Get slot entry
0031                       ;------------------------------------------------------
0032 75FE C120  34         mov   @parm1,tmp0           ; Line number in editor buffer
     7600 A006     
0033               
0034 7602 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page with index slot
     7604 31E8     
0035                                                   ; \ i  tmp0     = Line number
0036                                                   ; / o  outparm1 = Slot offset in SAMS page
0037               
0038 7606 C120  34         mov   @outparm1,tmp0        ; \ Get slot entry
     7608 A018     
0039 760A C164  34         mov   @idx.top(tmp0),tmp1   ; /
     760C B000     
0040               
0041 760E 130C  14         jeq   idx.pointer.get.parm.null
0042                                                   ; Skip if index slot empty
0043                       ;------------------------------------------------------
0044                       ; Calculate MSB (SAMS page)
0045                       ;------------------------------------------------------
0046 7610 C185  18         mov   tmp1,tmp2             ; \
0047 7612 0986  32         srl   tmp2,8                ; / Right align SAMS page
0048                       ;------------------------------------------------------
0049                       ; Calculate LSB (pointer address)
0050                       ;------------------------------------------------------
0051 7614 0245  22         andi  tmp1,>00ff            ; Get rid of MSB (SAMS page)
     7616 00FF     
0052 7618 0A45  24         sla   tmp1,4                ; Multiply with 16
0053 761A 0225  22         ai    tmp1,edb.top          ; Add editor buffer base address
     761C C000     
0054                       ;------------------------------------------------------
0055                       ; Return parameters
0056                       ;------------------------------------------------------
0057               idx.pointer.get.parm:
0058 761E C805  38         mov   tmp1,@outparm1        ; Index slot -> Pointer
     7620 A018     
0059 7622 C806  38         mov   tmp2,@outparm2        ; Index slot -> SAMS page
     7624 A01A     
0060 7626 1004  14         jmp   idx.pointer.get.exit
0061                       ;------------------------------------------------------
0062                       ; Special handling for "null"-pointer
0063                       ;------------------------------------------------------
0064               idx.pointer.get.parm.null:
0065 7628 04E0  34         clr   @outparm1
     762A A018     
0066 762C 04E0  34         clr   @outparm2
     762E A01A     
0067                       ;------------------------------------------------------
0068                       ; Exit
0069                       ;------------------------------------------------------
0070               idx.pointer.get.exit:
0071 7630 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0072 7632 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0073 7634 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0074 7636 C2F9  30         mov   *stack+,r11           ; Pop r11
0075 7638 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0027                       copy  "idx.delete.asm"         ; Index management - delete slot
     **** ****     > idx.delete.asm
0001               * FILE......: idx_delete.asm
0002               * Purpose...: Delete index entry
0003               
0004               ***************************************************************
0005               * _idx.entry.delete.reorg
0006               * Reorganize index slot entries
0007               ***************************************************************
0008               * bl @_idx.entry.delete.reorg
0009               *--------------------------------------------------------------
0010               *  Remarks
0011               *  Private, only to be called from idx_entry_delete
0012               ********|*****|*********************|**************************
0013               _idx.entry.delete.reorg:
0014                       ;------------------------------------------------------
0015                       ; Reorganize index entries
0016                       ;------------------------------------------------------
0017 763A 0224  22         ai    tmp0,idx.top          ; Add index base to offset
     763C B000     
0018 763E C144  18         mov   tmp0,tmp1             ; a = current slot
0019 7640 05C5  14         inct  tmp1                  ; b = current slot + 2
0020                       ;------------------------------------------------------
0021                       ; Loop forward until end of index
0022                       ;------------------------------------------------------
0023               _idx.entry.delete.reorg.loop:
0024 7642 CD35  46         mov   *tmp1+,*tmp0+         ; Copy b -> a
0025 7644 0606  14         dec   tmp2                  ; tmp2--
0026 7646 16FD  14         jne   _idx.entry.delete.reorg.loop
0027                                                   ; Loop unless completed
0028 7648 045B  20         b     *r11                  ; Return to caller
0029               
0030               
0031               
0032               ***************************************************************
0033               * idx.entry.delete
0034               * Delete index entry - Close gap created by delete
0035               ***************************************************************
0036               * bl @idx.entry.delete
0037               *--------------------------------------------------------------
0038               * INPUT
0039               * @parm1    = Line number in editor buffer to delete
0040               * @parm2    = Line number of last line to check for reorg
0041               *--------------------------------------------------------------
0042               * Register usage
0043               * tmp0,tmp1,tmp2,tmp3
0044               ********|*****|*********************|**************************
0045               idx.entry.delete:
0046 764A 0649  14         dect  stack
0047 764C C64B  30         mov   r11,*stack            ; Save return address
0048 764E 0649  14         dect  stack
0049 7650 C644  30         mov   tmp0,*stack           ; Push tmp0
0050 7652 0649  14         dect  stack
0051 7654 C645  30         mov   tmp1,*stack           ; Push tmp1
0052 7656 0649  14         dect  stack
0053 7658 C646  30         mov   tmp2,*stack           ; Push tmp2
0054 765A 0649  14         dect  stack
0055 765C C647  30         mov   tmp3,*stack           ; Push tmp3
0056                       ;------------------------------------------------------
0057                       ; Get index slot
0058                       ;------------------------------------------------------
0059 765E C120  34         mov   @parm1,tmp0           ; Line number in editor buffer
     7660 A006     
0060               
0061 7662 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     7664 31E8     
0062                                                   ; \ i  tmp0     = Line number
0063                                                   ; / o  outparm1 = Slot offset in SAMS page
0064               
0065 7666 C120  34         mov   @outparm1,tmp0        ; Index offset
     7668 A018     
0066                       ;------------------------------------------------------
0067                       ; Prepare for index reorg
0068                       ;------------------------------------------------------
0069 766A C1A0  34         mov   @parm2,tmp2           ; Get last line to check
     766C A008     
0070 766E 1303  14         jeq   idx.entry.delete.lastline
0071                                                   ; Exit early if last line = 0
0072               
0073 7670 61A0  34         s     @parm1,tmp2           ; Calculate loop
     7672 A006     
0074 7674 1504  14         jgt   idx.entry.delete.reorg
0075                                                   ; Reorganize if loop counter > 0
0076                       ;------------------------------------------------------
0077                       ; Special treatment for last line
0078                       ;------------------------------------------------------
0079               idx.entry.delete.lastline:
0080 7676 0224  22         ai    tmp0,idx.top          ; Add index base to offset
     7678 B000     
0081 767A 04D4  26         clr   *tmp0                 ; Clear index entry
0082 767C 1012  14         jmp   idx.entry.delete.exit ; Exit early
0083                       ;------------------------------------------------------
0084                       ; Reorganize index entries
0085                       ;------------------------------------------------------
0086               idx.entry.delete.reorg:
0087 767E C1E0  34         mov   @parm2,tmp3           ; Get last line to reorganize
     7680 A008     
0088 7682 0287  22         ci    tmp3,2048
     7684 0800     
0089 7686 120A  14         jle   idx.entry.delete.reorg.simple
0090                                                   ; Do simple reorg only if single
0091                                                   ; SAMS index page, otherwise complex reorg.
0092                       ;------------------------------------------------------
0093                       ; Complex index reorganization (multiple SAMS pages)
0094                       ;------------------------------------------------------
0095               idx.entry.delete.reorg.complex:
0096 7688 06A0  32         bl    @_idx.sams.mapcolumn.on
     768A 317A     
0097                                                   ; Index in continuous memory region
0098               
0099                       ;-------------------------------------------------------
0100                       ; Recalculate index offset in continuous memory region
0101                       ;-------------------------------------------------------
0102 768C C120  34         mov   @parm1,tmp0           ; Restore line number
     768E A006     
0103 7690 0A14  18         sla   tmp0,1                ; Calculate offset
0104               
0105 7692 06A0  32         bl    @_idx.entry.delete.reorg
     7694 357A     
0106                                                   ; Reorganize index
0107                                                   ; \ i  tmp0 = Index offset
0108                                                   ; / i  tmp2 = Loop count
0109               
0110 7696 06A0  32         bl    @_idx.sams.mapcolumn.off
     7698 31AE     
0111                                                   ; Restore memory window layout
0112               
0113 769A 1002  14         jmp   !
0114                       ;------------------------------------------------------
0115                       ; Simple index reorganization
0116                       ;------------------------------------------------------
0117               idx.entry.delete.reorg.simple:
0118 769C 06A0  32         bl    @_idx.entry.delete.reorg
     769E 357A     
0119                       ;------------------------------------------------------
0120                       ; Clear index entry (base + offset already set)
0121                       ;------------------------------------------------------
0122 76A0 04D4  26 !       clr   *tmp0                 ; Clear index entry
0123                       ;------------------------------------------------------
0124                       ; Exit
0125                       ;------------------------------------------------------
0126               idx.entry.delete.exit:
0127 76A2 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0128 76A4 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0129 76A6 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0130 76A8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0131 76AA C2F9  30         mov   *stack+,r11           ; Pop r11
0132 76AC 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0028                       copy  "idx.insert.asm"         ; Index management - insert slot
     **** ****     > idx.insert.asm
0001               * FILE......: idx.insert.asm
0002               * Purpose...: Insert index entry
0003               
0004               ***************************************************************
0005               * _idx.entry.insert.reorg
0006               * Reorganize index slot entries
0007               ***************************************************************
0008               * bl @_idx.entry.insert.reorg
0009               *--------------------------------------------------------------
0010               *  Remarks
0011               *  Private, only to be called from idx_entry_insert
0012               ********|*****|*********************|**************************
0013               _idx.entry.insert.reorg:
0014                       ;------------------------------------------------------
0015                       ; Assert 1
0016                       ;------------------------------------------------------
0017 76AE 0286  22         ci    tmp2,2048*5           ; Crash if loop counter value is unrealistic
     76B0 2800     
0018                                                   ; Max. 5 SAMS pages, each with 2048 index
0019                                                   ; entries.
0020               
0021 76B2 1204  14         jle   !                     ; Continue if ok
0022                       ;------------------------------------------------------
0023                       ; Crash and burn
0024                       ;------------------------------------------------------
0025               _idx.entry.insert.reorg.crash:
0026 76B4 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     76B6 FFCE     
0027 76B8 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     76BA 2026     
0028                       ;------------------------------------------------------
0029                       ; Reorganize index entries
0030                       ;------------------------------------------------------
0031 76BC 0224  22 !       ai    tmp0,idx.top          ; Add index base to offset
     76BE B000     
0032 76C0 C144  18         mov   tmp0,tmp1             ; a = current slot
0033 76C2 05C5  14         inct  tmp1                  ; b = current slot + 2
0034 76C4 0586  14         inc   tmp2                  ; One time adjustment for current line
0035                       ;------------------------------------------------------
0036                       ; Assert 2
0037                       ;------------------------------------------------------
0038 76C6 C1C6  18         mov   tmp2,tmp3             ; Number of slots to reorganize
0039 76C8 0A17  18         sla   tmp3,1                ; adjust to slot size
0040 76CA 0507  14         neg   tmp3                  ; tmp3 = -tmp3
0041 76CC A1C4  18         a     tmp0,tmp3             ; tmp3 = tmp3 + tmp0
0042 76CE 0287  22         ci    tmp3,idx.top - 4      ; Address before top of index ?
     76D0 AFFC     
0043 76D2 1504  14         jgt   _idx.entry.insert.reorg.loop
0044                                                   ; No, jump to loop start
0045                       ;------------------------------------------------------
0046                       ; Crash and burn
0047                       ;------------------------------------------------------
0048 76D4 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     76D6 FFCE     
0049 76D8 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     76DA 2026     
0050                       ;------------------------------------------------------
0051                       ; Loop backwards from end of index up to insert point
0052                       ;------------------------------------------------------
0053               _idx.entry.insert.reorg.loop:
0054 76DC C554  38         mov   *tmp0,*tmp1           ; Copy a -> b
0055 76DE 0644  14         dect  tmp0                  ; Move pointer up
0056 76E0 0645  14         dect  tmp1                  ; Move pointer up
0057 76E2 0606  14         dec   tmp2                  ; Next index entry
0058 76E4 15FB  14         jgt   _idx.entry.insert.reorg.loop
0059                                                   ; Repeat until done
0060                       ;------------------------------------------------------
0061                       ; Clear index entry at insert point
0062                       ;------------------------------------------------------
0063 76E6 05C4  14         inct  tmp0                  ; \ Clear index entry for line
0064 76E8 04D4  26         clr   *tmp0                 ; / following insert point
0065               
0066 76EA 045B  20         b     *r11                  ; Return to caller
0067               
0068               
0069               
0070               
0071               ***************************************************************
0072               * idx.entry.insert
0073               * Insert index entry
0074               ***************************************************************
0075               * bl @idx.entry.insert
0076               *--------------------------------------------------------------
0077               * INPUT
0078               * @parm1    = Line number in editor buffer to insert
0079               * @parm2    = Line number of last line to check for reorg
0080               *--------------------------------------------------------------
0081               * OUTPUT
0082               * NONE
0083               *--------------------------------------------------------------
0084               * Register usage
0085               * tmp0,tmp2
0086               ********|*****|*********************|**************************
0087               idx.entry.insert:
0088 76EC 0649  14         dect  stack
0089 76EE C64B  30         mov   r11,*stack            ; Save return address
0090 76F0 0649  14         dect  stack
0091 76F2 C644  30         mov   tmp0,*stack           ; Push tmp0
0092 76F4 0649  14         dect  stack
0093 76F6 C645  30         mov   tmp1,*stack           ; Push tmp1
0094 76F8 0649  14         dect  stack
0095 76FA C646  30         mov   tmp2,*stack           ; Push tmp2
0096 76FC 0649  14         dect  stack
0097 76FE C647  30         mov   tmp3,*stack           ; Push tmp3
0098                       ;------------------------------------------------------
0099                       ; Prepare for index reorg
0100                       ;------------------------------------------------------
0101 7700 C1A0  34         mov   @parm2,tmp2           ; Get last line to check
     7702 A008     
0102 7704 61A0  34         s     @parm1,tmp2           ; Calculate loop
     7706 A006     
0103 7708 130F  14         jeq   idx.entry.insert.reorg.simple
0104                                                   ; Special treatment if last line
0105                       ;------------------------------------------------------
0106                       ; Reorganize index entries
0107                       ;------------------------------------------------------
0108               idx.entry.insert.reorg:
0109 770A C1E0  34         mov   @parm2,tmp3
     770C A008     
0110 770E 0287  22         ci    tmp3,2048
     7710 0800     
0111 7712 110A  14         jlt   idx.entry.insert.reorg.simple
0112                                                   ; Do simple reorg only if single
0113                                                   ; SAMS index page, otherwise complex reorg.
0114                       ;------------------------------------------------------
0115                       ; Complex index reorganization (multiple SAMS pages)
0116                       ;------------------------------------------------------
0117               idx.entry.insert.reorg.complex:
0118 7714 06A0  32         bl    @_idx.sams.mapcolumn.on
     7716 317A     
0119                                                   ; Index in continuous memory region
0120                                                   ; b000 - ffff (5 SAMS pages)
0121               
0122 7718 C120  34         mov   @parm2,tmp0           ; Last line number in editor buffer
     771A A008     
0123 771C 0A14  18         sla   tmp0,1                ; tmp0 * 2
0124               
0125 771E 06A0  32         bl    @_idx.entry.insert.reorg
     7720 35EE     
0126                                                   ; Reorganize index
0127                                                   ; \ i  tmp0 = Last line in index
0128                                                   ; / i  tmp2 = Num. of index entries to move
0129               
0130 7722 06A0  32         bl    @_idx.sams.mapcolumn.off
     7724 31AE     
0131                                                   ; Restore memory window layout
0132               
0133 7726 1008  14         jmp   idx.entry.insert.exit
0134                       ;------------------------------------------------------
0135                       ; Simple index reorganization
0136                       ;------------------------------------------------------
0137               idx.entry.insert.reorg.simple:
0138 7728 C120  34         mov   @parm2,tmp0           ; Last line number in editor buffer
     772A A008     
0139               
0140 772C 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     772E 31E8     
0141                                                   ; \ i  tmp0     = Line number
0142                                                   ; / o  outparm1 = Slot offset in SAMS page
0143               
0144 7730 C120  34         mov   @outparm1,tmp0        ; Index offset
     7732 A018     
0145               
0146 7734 06A0  32         bl    @_idx.entry.insert.reorg
     7736 35EE     
0147                                                   ; Reorganize index
0148                                                   ; \ i  tmp0 = Last line in index
0149                                                   ; / i  tmp2 = Num. of index entries to move
0150               
0151                       ;------------------------------------------------------
0152                       ; Exit
0153                       ;------------------------------------------------------
0154               idx.entry.insert.exit:
0155 7738 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0156 773A C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0157 773C C179  30         mov   *stack+,tmp1          ; Pop tmp1
0158 773E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0159 7740 C2F9  30         mov   *stack+,r11           ; Pop r11
0160 7742 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0029                       ;-----------------------------------------------------------------------
0030                       ; Logic for editor buffer
0031                       ;-----------------------------------------------------------------------
0032                       copy  "edb.line.mappage.asm"   ; Activate edbuf SAMS page for line
     **** ****     > edb.line.mappage.asm
0001               * FILE......: edb.line.mappage.asm
0002               * Purpose...: Editor buffer SAMS setup
0003               
0004               
0005               ***************************************************************
0006               * edb.line.mappage
0007               * Activate editor buffer SAMS page for line
0008               ***************************************************************
0009               * bl  @edb.line.mappage
0010               *
0011               * tmp0 = Line number in editor buffer
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * outparm1 = Pointer to line in editor buffer
0015               * outparm2 = SAMS page
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0, tmp1
0019               ***************************************************************
0020               edb.line.mappage:
0021 7744 0649  14         dect  stack
0022 7746 C64B  30         mov   r11,*stack            ; Push return address
0023 7748 0649  14         dect  stack
0024 774A C644  30         mov   tmp0,*stack           ; Push tmp0
0025 774C 0649  14         dect  stack
0026 774E C645  30         mov   tmp1,*stack           ; Push tmp1
0027                       ;------------------------------------------------------
0028                       ; Assert
0029                       ;------------------------------------------------------
0030 7750 8804  34         c     tmp0,@edb.lines       ; Non-existing line?
     7752 A504     
0031 7754 1204  14         jle   edb.line.mappage.lookup
0032                                                   ; All checks passed, continue
0033                                                   ;--------------------------
0034                                                   ; Assert failed
0035                                                   ;--------------------------
0036 7756 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     7758 FFCE     
0037 775A 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     775C 2026     
0038                       ;------------------------------------------------------
0039                       ; Lookup SAMS page for line in parm1
0040                       ;------------------------------------------------------
0041               edb.line.mappage.lookup:
0042 775E C804  38         mov   tmp0,@parm1           ; Set line number in editor buffer
     7760 A006     
0043               
0044 7762 06A0  32         bl    @idx.pointer.get      ; Get pointer to line
     7764 352E     
0045                                                   ; \ i  parm1    = Line number
0046                                                   ; | o  outparm1 = Pointer to line
0047                                                   ; / o  outparm2 = SAMS page
0048               
0049 7766 C120  34         mov   @outparm2,tmp0        ; SAMS page
     7768 A01A     
0050 776A C160  34         mov   @outparm1,tmp1        ; Pointer to line
     776C A018     
0051 776E 130B  14         jeq   edb.line.mappage.exit ; Nothing to page-in if NULL pointer
0052                                                   ; (=empty line)
0053                       ;------------------------------------------------------
0054                       ; Determine if requested SAMS page is already active
0055                       ;------------------------------------------------------
0056 7770 8120  34         c     @tv.sams.c000,tmp0    ; Compare with active page editor buffer
     7772 A208     
0057 7774 1308  14         jeq   edb.line.mappage.exit ; Request page already active, so exit
0058                       ;------------------------------------------------------
0059                       ; Activate requested SAMS page
0060                       ;-----------------------------------------------------
0061 7776 06A0  32         bl    @xsams.page.set       ; Switch SAMS memory page
     7778 2576     
0062                                                   ; \ i  tmp0 = SAMS page
0063                                                   ; / i  tmp1 = Memory address
0064               
0065 777A C820  54         mov   @outparm2,@tv.sams.c000
     777C A01A     
     777E A208     
0066                                                   ; Set page in shadow registers
0067               
0068 7780 C820  54         mov   @outparm2,@edb.sams.page
     7782 A01A     
     7784 A518     
0069                                                   ; Set current SAMS page
0070                       ;------------------------------------------------------
0071                       ; Exit
0072                       ;------------------------------------------------------
0073               edb.line.mappage.exit:
0074 7786 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0075 7788 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0076 778A C2F9  30         mov   *stack+,r11           ; Pop r11
0077 778C 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0033                       copy  "edb.line.getlen.asm"    ; Get line length
     **** ****     > edb.line.getlen.asm
0001               * FILE......: edb.line.getlen.asm
0002               * Purpose...: Get length of specified line in editor buffer
0003               
0004               ***************************************************************
0005               * edb.line.getlength
0006               * Get length of specified line
0007               ***************************************************************
0008               *  bl   @edb.line.getlength
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Line number (base 0)
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @outparm1 = Length of line
0015               * @outparm2 = SAMS page
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0,tmp1
0019               ********|*****|*********************|**************************
0020               edb.line.getlength:
0021 778E 0649  14         dect  stack
0022 7790 C64B  30         mov   r11,*stack            ; Push return address
0023 7792 0649  14         dect  stack
0024 7794 C644  30         mov   tmp0,*stack           ; Push tmp0
0025 7796 0649  14         dect  stack
0026 7798 C645  30         mov   tmp1,*stack           ; Push tmp1
0027                       ;------------------------------------------------------
0028                       ; Initialisation
0029                       ;------------------------------------------------------
0030 779A 04E0  34         clr   @outparm1             ; Reset length
     779C A018     
0031 779E 04E0  34         clr   @outparm2             ; Reset SAMS bank
     77A0 A01A     
0032                       ;------------------------------------------------------
0033                       ; Exit if requested line beyond editor buffer
0034                       ;------------------------------------------------------
0035 77A2 C120  34         mov   @parm1,tmp0           ; \
     77A4 A006     
0036 77A6 0584  14         inc   tmp0                  ; /  base 1
0037               
0038 77A8 8804  34         c     tmp0,@edb.lines       ; Requested line at BOT?
     77AA A504     
0039 77AC 1101  14         jlt   !                     ; No, continue processing
0040 77AE 100B  14         jmp   edb.line.getlength.null
0041                                                   ; Set length 0 and exit early
0042                       ;------------------------------------------------------
0043                       ; Map SAMS page
0044                       ;------------------------------------------------------
0045 77B0 C120  34 !       mov   @parm1,tmp0           ; Get line
     77B2 A006     
0046               
0047 77B4 06A0  32         bl    @edb.line.mappage     ; Activate editor buffer SAMS page for line
     77B6 3684     
0048                                                   ; \ i  tmp0     = Line number
0049                                                   ; | o  outparm1 = Pointer to line
0050                                                   ; / o  outparm2 = SAMS page
0051               
0052 77B8 C120  34         mov   @outparm1,tmp0        ; Store pointer in tmp0
     77BA A018     
0053 77BC 1304  14         jeq   edb.line.getlength.null
0054                                                   ; Set length to 0 if null-pointer
0055                       ;------------------------------------------------------
0056                       ; Process line prefix and exit
0057                       ;------------------------------------------------------
0058 77BE C154  26         mov   *tmp0,tmp1            ; Get length into tmp1
0059 77C0 C805  38         mov   tmp1,@outparm1        ; Save length
     77C2 A018     
0060 77C4 1002  14         jmp   edb.line.getlength.exit
0061                       ;------------------------------------------------------
0062                       ; Set length to 0 if null-pointer
0063                       ;------------------------------------------------------
0064               edb.line.getlength.null:
0065 77C6 04E0  34         clr   @outparm1             ; Set length to 0, was a null-pointer
     77C8 A018     
0066                       ;------------------------------------------------------
0067                       ; Exit
0068                       ;------------------------------------------------------
0069               edb.line.getlength.exit:
0070 77CA C179  30         mov   *stack+,tmp1          ; Pop tmp1
0071 77CC C139  30         mov   *stack+,tmp0          ; Pop tmp0
0072 77CE C2F9  30         mov   *stack+,r11           ; Pop r11
0073 77D0 045B  20         b     *r11                  ; Return to caller
0074               
0075               
0076               
0077               ***************************************************************
0078               * edb.line.getlength2
0079               * Get length of current row (as seen from editor buffer side)
0080               ***************************************************************
0081               *  bl   @edb.line.getlength2
0082               *--------------------------------------------------------------
0083               * INPUT
0084               * @fb.row = Row in frame buffer
0085               *--------------------------------------------------------------
0086               * OUTPUT
0087               * @fb.row.length = Length of row
0088               *--------------------------------------------------------------
0089               * Register usage
0090               * tmp0
0091               ********|*****|*********************|**************************
0092               edb.line.getlength2:
0093 77D2 0649  14         dect  stack
0094 77D4 C64B  30         mov   r11,*stack            ; Save return address
0095 77D6 0649  14         dect  stack
0096 77D8 C644  30         mov   tmp0,*stack           ; Push tmp0
0097                       ;------------------------------------------------------
0098                       ; Calculate line in editor buffer
0099                       ;------------------------------------------------------
0100 77DA C120  34         mov   @fb.topline,tmp0      ; Get top line in frame buffer
     77DC A304     
0101 77DE A120  34         a     @fb.row,tmp0          ; Get current row in frame buffer
     77E0 A306     
0102                       ;------------------------------------------------------
0103                       ; Get length
0104                       ;------------------------------------------------------
0105 77E2 C804  38         mov   tmp0,@parm1
     77E4 A006     
0106 77E6 06A0  32         bl    @edb.line.getlength
     77E8 36CE     
0107 77EA C820  54         mov   @outparm1,@fb.row.length
     77EC A018     
     77EE A308     
0108                                                   ; Save row length
0109                       ;------------------------------------------------------
0110                       ; Exit
0111                       ;------------------------------------------------------
0112               edb.line.getlength2.exit:
0113 77F0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0114 77F2 C2F9  30         mov   *stack+,r11           ; Pop R11
0115 77F4 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0034                       copy  "edb.hipage.alloc.asm"   ; Check/increase highest SAMS page
     **** ****     > edb.hipage.alloc.asm
0001               * FILE......: edb.hipage.alloc.asm
0002               * Purpose...: Editor buffer utilities
0003               
0004               
0005               ***************************************************************
0006               * edb.hipage.alloc
0007               * Check and increase highest SAMS page of editor buffer
0008               ***************************************************************
0009               *  bl   @edb.hipage.alloc
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @edb.next_free.ptr = Pointer to next free line
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0,tmp1
0018               ********|*****|*********************|**************************
0019               edb.hipage.alloc:
0020 77F6 0649  14         dect  stack
0021 77F8 C64B  30         mov   r11,*stack            ; Save return address
0022 77FA 0649  14         dect  stack
0023 77FC C644  30         mov   tmp0,*stack           ; Push tmp0
0024 77FE 0649  14         dect  stack
0025 7800 C645  30         mov   tmp1,*stack           ; Push tmp1
0026                       ;------------------------------------------------------
0027                       ; 1a. Check if highest SAMS page needs to be increased
0028                       ;------------------------------------------------------
0029               edb.hipage.alloc.check_setpage:
0030 7802 C120  34         mov   @edb.next_free.ptr,tmp0
     7804 A508     
0031                                                   ;--------------------------
0032                                                   ; Check for page overflow
0033                                                   ;--------------------------
0034 7806 0244  22         andi  tmp0,>0fff            ; Get rid of highest nibble
     7808 0FFF     
0035 780A 0224  22         ai    tmp0,82               ; Assume line of 80 chars (+2 bytes prefix)
     780C 0052     
0036 780E 0284  22         ci    tmp0,>1000 - 16       ; 4K boundary reached?
     7810 0FF0     
0037 7812 1105  14         jlt   edb.hipage.alloc.setpage
0038                                                   ; Not yet, don't increase SAMS page
0039                       ;------------------------------------------------------
0040                       ; 1b. Increase highest SAMS page (copy-on-write!)
0041                       ;------------------------------------------------------
0042 7814 05A0  34         inc   @edb.sams.hipage      ; Set highest SAMS page
     7816 A51A     
0043 7818 C820  54         mov   @edb.top.ptr,@edb.next_free.ptr
     781A A500     
     781C A508     
0044                                                   ; Start at top of SAMS page again
0045                       ;------------------------------------------------------
0046                       ; 1c. Switch to SAMS page and exit
0047                       ;------------------------------------------------------
0048               edb.hipage.alloc.setpage:
0049 781E C120  34         mov   @edb.sams.hipage,tmp0
     7820 A51A     
0050 7822 C160  34         mov   @edb.top.ptr,tmp1
     7824 A500     
0051 7826 06A0  32         bl    @xsams.page.set       ; Set SAMS page
     7828 2576     
0052                                                   ; \ i  tmp0 = SAMS page number
0053                                                   ; / i  tmp1 = Memory address
0054               
0055 782A 1004  14         jmp   edb.hipage.alloc.exit
0056                       ;------------------------------------------------------
0057                       ; Check failed, crash CPU!
0058                       ;------------------------------------------------------
0059               edb.hipage.alloc.crash:
0060 782C C80B  38         mov   r11,@>ffce            ; \ Save caller address
     782E FFCE     
0061 7830 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     7832 2026     
0062                       ;------------------------------------------------------
0063                       ; Exit
0064                       ;------------------------------------------------------
0065               edb.hipage.alloc.exit:
0066 7834 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0067 7836 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0068 7838 C2F9  30         mov   *stack+,r11           ; Pop R11
0069 783A 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0035                       ;-----------------------------------------------------------------------
0036                       ; Utility functions
0037                       ;-----------------------------------------------------------------------
0038                       copy  "pane.topline.clearmsg.asm"   ; Remove overlay msg in top line
     **** ****     > pane.topline.clearmsg.asm
0001               * FILE......: pane.topline.clearmsg.asm
0002               * Purpose...: One-shot task for clearing overlay message in top line
0003               
0004               
0005               ***************************************************************
0006               * pane.topline.oneshot.clearmsg
0007               * Remove overlay message in top line
0008               ***************************************************************
0009               * Runs as one-shot task in slot 3
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * none
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * none
0019               ********|*****|*********************|**************************
0020               pane.topline.oneshot.clearmsg:
0021 783C 0649  14         dect  stack
0022 783E C64B  30         mov   r11,*stack            ; Push return address
0023 7840 0649  14         dect  stack
0024 7842 C660  42         mov   @wyx,*stack           ; Push cursor position
     7844 832A     
0025                       ;-------------------------------------------------------
0026                       ; Clear message
0027                       ;-------------------------------------------------------
0028 7846 06A0  32         bl    @hchar
     7848 27D2     
0029 784A 0034                   byte 0,52,32,18
     784C 2012     
0030 784E FFFF                   data EOL              ; Clear message
0031               
0032 7850 04E0  34         clr   @tv.task.oneshot      ; Reset oneshot task
     7852 A226     
0033                       ;-------------------------------------------------------
0034                       ; Exit
0035                       ;-------------------------------------------------------
0036               pane.topline.oneshot.clearmsg.exit:
0037 7854 C839  42         mov   *stack+,@wyx          ; Pop cursor position
     7856 832A     
0038 7858 C2F9  30         mov   *stack+,r11           ; Pop R11
0039 785A 045B  20         b     *r11                  ; Return to task
                   < rom.resident.asm
0039                       copy  "fg99.run.asm"                ; Run FinalGROM cartridge image
     **** ****     > fg99.run.asm
0001               * FILE......: fg99.run.asm
0002               * Purpose...: Run FinalGROM cartridge image
0003               
0004               
0005               ***************************************************************
0006               * fg99.run
0007               * Run FinalGROM cartridge image
0008               ***************************************************************
0009               * bl   @fg99.run
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @tv.fg99.img.ptr = Pointer to cartridge image entry
0013               *
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * r1 in GPL WS, tmp0, tmp1, tmp2, r12
0019               *--------------------------------------------------------------
0020               * Remarks
0021               * Based on tib.run
0022               ********|*****|*********************|**************************
0023               fg99.run:
0024                       ;-------------------------------------------------------
0025                       ; Put VDP in TI Basic compatible mode (32x24)
0026                       ;-------------------------------------------------------
0027 785C 06A0  32         bl    @f18rst               ; Reset and lock the F18A
     785E 27A6     
0028               
0029 7860 06A0  32         bl    @vidtab               ; Load video mode table into VDP
     7862 22F8     
0030 7864 7F24                   data tibasic.32x24    ; Equate selected video mode table
0031               
0032 7866 06A0  32         bl    @scroff               ; Turn off screen
     7868 2686     
0033                       ;------------------------------------------------------
0034                       ; Clear magic string
0035                       ;------------------------------------------------------
0036                       ; Clear the bytes 'DEAD994ABEEF' in core memory.
0037                       ; Indicate it's unsafe to resume Stevie and initialization
0038                       ; is necessary.
0039 786A 04E0  34         clr   @magic.str.w1
     786C A000     
0040 786E 04E0  34         clr   @magic.str.w2
     7870 A002     
0041 7872 04E0  34         clr   @magic.str.w3
     7874 A004     
0042                       ;-------------------------------------------------------
0043                       ; Load FG99 cartridge, but do not start cartridge yet
0044                       ;-------------------------------------------------------
0045 7876 C120  34         mov   @tv.fg99.img.ptr,tmp0 ; Get pointer to cartridge image
     7878 A232     
0046 787A 06A0  32         bl    @xfg99                ; Run FinalGROM cartridge image
     787C 2DC6     
0047                                                   ; \ i tmp0 = Pointer to cartridge image
0048                                                   ; /
0049                       ;-------------------------------------------------------
0050                       ; Turn SAMS mapper off and exit to monitor
0051                       ;-------------------------------------------------------
0052 787E 020C  20         li    r12,>1e00             ; SAMS CRU address
     7880 1E00     
0053 7882 1E01  16         sbz   1                     ; Disable SAMS mapper
0054                                                   ; \ We keep the mapper off while
0055                                                   ; | running TI Basic or other external
0056                                                   ; / programs.
0057               
0058 7884 0420  42         blwp @0                     ; Return to monitor
     7886 0000     
                   < rom.resident.asm
0040                       ;-----------------------------------------------------------------------
0041                       ; Background tasks
0042                       ;-----------------------------------------------------------------------
0044                       copy  "task.vdp.cursor.sat.asm"     ; Copy cursor SAT to VDP
     **** ****     > task.vdp.cursor.sat.asm
0001               * FILE......: task.vdp.cursor.sat.asm
0002               * Purpose...: Copy cursor SAT to VDP
0003               
0004               ***************************************************************
0005               * Task - Copy Sprite Attribute Table (SAT) to VDP
0006               ********|*****|*********************|**************************
0007               task.vdp.copy.sat:
0008 7888 0649  14         dect  stack
0009 788A C64B  30         mov   r11,*stack            ; Save return address
0010 788C 0649  14         dect  stack
0011 788E C644  30         mov   tmp0,*stack           ; Push tmp0
0012 7890 0649  14         dect  stack
0013 7892 C645  30         mov   tmp1,*stack           ; Push tmp1
0014 7894 0649  14         dect  stack
0015 7896 C646  30         mov   tmp2,*stack           ; Push tmp2
0016                       ;------------------------------------------------------
0017                       ; Get pane with focus
0018                       ;------------------------------------------------------
0019 7898 C120  34         mov   @tv.pane.focus,tmp0   ; Get pane with focus
     789A A224     
0020               
0021 789C 0284  22         ci    tmp0,pane.focus.fb
     789E 0000     
0022 78A0 130F  14         jeq   task.vdp.copy.sat.fb  ; Frame buffer has focus
0023               
0024 78A2 0284  22         ci    tmp0,pane.focus.cmdb
     78A4 0001     
0025 78A6 1304  14         jeq   task.vdp.copy.sat.cmdb
0026                                                   ; CMDB buffer has focus
0027                       ;------------------------------------------------------
0028                       ; Assert failed. Invalid value
0029                       ;------------------------------------------------------
0030 78A8 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     78AA FFCE     
0031 78AC 06A0  32         bl    @cpu.crash            ; / Halt system.
     78AE 2026     
0032                       ;------------------------------------------------------
0033                       ; CMDB buffer has focus, position cursor
0034                       ;------------------------------------------------------
0035               task.vdp.copy.sat.cmdb:
0036 78B0 C820  46         mov   @cmdb.cursor,@wyx     ; Position cursor in CMDB pane
     78B2 A70A     
     78B4 832A     
0037 78B6 E0A0  34         soc   @wbit0,config         ; Sprite adjustment on
     78B8 2020     
0038 78BA 06A0  32         bl    @yx2px                ; \ Calculate pixel position
     78BC 26E8     
0039                                                   ; | i  @WYX = Cursor YX
0040                                                   ; / o  tmp0 = Pixel YX
0041               
0042 78BE 100C  14         jmp   task.vdp.copy.sat.write
0043                       ;------------------------------------------------------
0044                       ; Frame buffer has focus, position cursor
0045                       ;------------------------------------------------------
0046               task.vdp.copy.sat.fb:
0047 78C0 E0A0  34         soc   @wbit0,config         ; Sprite adjustment on
     78C2 2020     
0048 78C4 06A0  32         bl    @yx2px                ; \ Calculate pixel position
     78C6 26E8     
0049                                                   ; | i  @WYX = Cursor YX
0050                                                   ; / o  tmp0 = Pixel YX
0051               
0052                       ;------------------------------------------------------
0053                       ; Cursor Y adjustment (topline, ruler, ...)
0054                       ;------------------------------------------------------
0055 78C8 C160  34         mov   @tv.ruler.visible,tmp1
     78CA A210     
0056 78CC 1303  14         jeq   task.vdp.copy.sat.fb.noruler
0057 78CE 0224  22         ai    tmp0,>1000            ; Adjust VDP cursor because of topline+ruler
     78D0 1000     
0058 78D2 1002  14         jmp   task.vdp.copy.sat.write
0059               
0060               task.vdp.copy.sat.fb.noruler:
0061 78D4 0224  22         ai    tmp0,>0800            ; Adjust VDP cursor because of topline
     78D6 0800     
0062                       ;------------------------------------------------------
0063                       ; Dump sprite attribute table
0064                       ;------------------------------------------------------
0065               task.vdp.copy.sat.write:
0066 78D8 C804  38         mov   tmp0,@ramsat          ; Set cursor YX
     78DA A056     
0067                       ;------------------------------------------------------
0068                       ; Handle column and row indicators
0069                       ;------------------------------------------------------
0070 78DC C160  34         mov   @tv.ruler.visible,tmp1
     78DE A210     
0071                                                   ; Ruler visible?
0072 78E0 1314  14         jeq   task.vdp.copy.sat.hide.indicators
0073                                                   ; Not visible, skip
0074               
0075 78E2 C160  34         mov   @cmdb.visible,tmp1
     78E4 A702     
0076 78E6 0285  22         ci    tmp1,>ffff            ; CMDB pane visible?
     78E8 FFFF     
0077 78EA 130F  14         jeq   task.vdp.copy.sat.hide.indicators
0078                                                   ; Not visible, skip
0079               
0080 78EC 0244  22         andi  tmp0,>ff00            ; \ Clear X position
     78EE FF00     
0081 78F0 0264  22         ori   tmp0,240              ; | Line indicator on pixel X 240
     78F2 00F0     
0082 78F4 C804  38         mov   tmp0,@ramsat+4        ; / Set line indicator    <
     78F6 A05A     
0083               
0084 78F8 C120  34         mov   @ramsat,tmp0
     78FA A056     
0085 78FC 0244  22         andi  tmp0,>00ff            ; \ Clear Y position
     78FE 00FF     
0086 7900 0264  22         ori   tmp0,>0800            ; | Column indicator on pixel Y 8
     7902 0800     
0087 7904 C804  38         mov   tmp0,@ramsat+8        ; / Set column indicator  v
     7906 A05E     
0088               
0089 7908 1005  14         jmp   task.vdp.copy.sat.write2
0090                       ;------------------------------------------------------
0091                       ; Do not show column and row indicators
0092                       ;------------------------------------------------------
0093               task.vdp.copy.sat.hide.indicators:
0094 790A 04C5  14         clr   tmp1
0095 790C D805  38         movb  tmp1,@ramsat+7        ; \ Hide line indicator    <
     790E A05D     
0096                                                   ; / by transparant color
0097 7910 D805  38         movb  tmp1,@ramsat+11       ; \ Hide column indicator  v
     7912 A061     
0098                                                   ; / by transparant color
0099                       ;------------------------------------------------------
0100                       ; Dump to VDP
0101                       ;------------------------------------------------------
0102               task.vdp.copy.sat.write2:
0103 7914 06A0  32         bl    @cpym2v               ; Copy sprite SAT to VDP
     7916 2486     
0104 7918 2180                   data sprsat,ramsat,14 ; \ i  p0 = VDP destination
     791A A056     
     791C 000E     
0105                                                   ; | i  p1 = ROM/RAM source
0106                                                   ; / i  p2 = Number of bytes to write
0107                       ;------------------------------------------------------
0108                       ; Exit
0109                       ;------------------------------------------------------
0110               task.vdp.copy.sat.exit:
0111 791E C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0112 7920 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0113 7922 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0114 7924 C2F9  30         mov   *stack+,r11           ; Pop r11
0115 7926 0460  28         b     @slotok               ; Exit task
     7928 2E84     
                   < rom.resident.asm
0045                       copy  "task.vdp.cursor.sprite.asm"  ; Set cursor shape in VDP (blink)
     **** ****     > task.vdp.cursor.sprite.asm
0001               * FILE......: task.vdp.cursor.sprite.asm
0002               * Purpose...: VDP sprite cursor shape (sprite version)
0003               
0004               ***************************************************************
0005               * Task - Update cursor shape (blink)
0006               ********|*****|*********************|**************************
0007               task.vdp.cursor:
0008 792A 0649  14         dect  stack
0009 792C C64B  30         mov   r11,*stack            ; Save return address
0010 792E 0649  14         dect  stack
0011 7930 C644  30         mov   tmp0,*stack           ; Push tmp0
0012                       ;------------------------------------------------------
0013                       ; Toggle cursor
0014                       ;------------------------------------------------------
0015 7932 0560  34         inv   @fb.curtoggle         ; Flip cursor shape flag
     7934 A314     
0016 7936 1304  14         jeq   task.vdp.cursor.visible
0017                       ;------------------------------------------------------
0018                       ; Hide cursor
0019                       ;------------------------------------------------------
0020 7938 04C4  14         clr   tmp0
0021 793A D804  38         movb  tmp0,@ramsat+3        ; Hide cursor
     793C A059     
0022 793E 1003  14         jmp   task.vdp.cursor.copy.sat
0023                                                   ; Update VDP SAT and exit task
0024                       ;------------------------------------------------------
0025                       ; Show cursor
0026                       ;------------------------------------------------------
0027               task.vdp.cursor.visible:
0028 7940 C820  54         mov   @tv.curshape,@ramsat+2
     7942 A214     
     7944 A058     
0029                                                   ; Get cursor shape and color
0030                       ;------------------------------------------------------
0031                       ; Copy SAT
0032                       ;------------------------------------------------------
0033               task.vdp.cursor.copy.sat:
0034 7946 06A0  32         bl    @cpym2v               ; Copy sprite SAT to VDP
     7948 2486     
0035 794A 2180                   data sprsat,ramsat,4  ; \ i  p0 = VDP destination
     794C A056     
     794E 0004     
0036                                                   ; | i  p1 = ROM/RAM source
0037                                                   ; / i  p2 = Number of bytes to write
0038                       ;------------------------------------------------------
0039                       ; Exit
0040                       ;------------------------------------------------------
0041               task.vdp.cursor.exit:
0042 7950 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0043 7952 C2F9  30         mov   *stack+,r11           ; Pop r11
0044 7954 0460  28         b     @slotok               ; Exit task
     7956 2E84     
                   < rom.resident.asm
0049               
0050                       copy  "task.oneshot.asm"            ; Run "one shot" task
     **** ****     > task.oneshot.asm
0001               * FILE......: task.oneshot.asm
0002               * Purpose...: Trigger one-shot task
0003               
0004               ***************************************************************
0005               * Task - One-shot
0006               ***************************************************************
0007               
0008               task.oneshot:
0009 7958 C120  34         mov   @tv.task.oneshot,tmp0  ; Get pointer to one-shot task
     795A A226     
0010 795C 1301  14         jeq   task.oneshot.exit
0011               
0012 795E 0694  24         bl    *tmp0                  ; Execute one-shot task
0013                       ;------------------------------------------------------
0014                       ; Exit
0015                       ;------------------------------------------------------
0016               task.oneshot.exit:
0017 7960 0460  28         b     @slotok                ; Exit task
     7962 2E84     
                   < rom.resident.asm
0051                       ;------------------------------------------------------
0052                       ; Program data
0053                       ;------------------------------------------------------
0054                       even
0055                       copy  "data.constants.asm"          ; Constants
     **** ****     > data.constants.asm
0001               * FILE......: data.constants.asm
0002               * Purpose...: Stevie Editor - data segment (constants)
0003               
0004               ***************************************************************
0005               *                      Constants
0006               ********|*****|*********************|**************************
0007               
0008               ***************************************************************
0009               * Sprite Attribute Table
0010               *--------------------------------------------------------------
0011               romsat:
0012                                                   ; YX, initial shape and color
0013 7964 0000             data  >0000,>0001           ; Cursor
     7966 0001     
0014 7968 0000             data  >0000,>0101           ; Current line indicator     <
     796A 0101     
0015 796C 0820             data  >0820,>0201           ; Current column indicator   v
     796E 0201     
0016               nosprite:
0017 7970 D000             data  >d000                 ; End-of-Sprites list
0018               
0019               
0020               
0021               
0022               ***************************************************************
0023               * Stevie color schemes table
0024               *--------------------------------------------------------------
0025               * ; Word 1
0026               * ; A  MSB  high-nibble    Foreground color text line in frame buffer
0027               * ; B  MSB  low-nibble     Background color text line in frame buffer
0028               * ; C  LSB  high-nibble    Foreground color top/bottom line
0029               * ; D  LSB  low-nibble     Background color top/bottom line
0030               * ; Word 2
0031               * ; E  MSB  high-nibble    Foreground color cmdb pane
0032               * ; F  MSB  low-nibble     Background color cmdb pane
0033               * ; G  LSB  high-nibble    Cursor foreground color cmdb pane
0034               * ; H  LSB  low-nibble     Cursor foreground color frame buffer
0035               * ; Word 3
0036               * ; I  MSB  high-nibble    Foreground color busy top/bottom line
0037               * ; J  MSB  low-nibble     Background color busy top/bottom line
0038               * ; K  LSB  high-nibble    Foreground color marked line in frame buffer
0039               * ; L  LSB  low-nibble     Background color marked line in frame buffer
0040               * ; Word 4
0041               * ; M  MSB  high-nibble    Foreground color command buffer header line
0042               * ; N  MSB  low-nibble     Background color command buffer header line
0043               * ; O  LSB  high-nibble    Foreground color line+column indicator frame buffer
0044               * ; P  LSB  low-nibble     Foreground color ruler frame buffer
0045               *
0046               * ; Colors
0047               * ; 0  Transparant      8  Red
0048               * ; 1  black            9  Light Red
0049               * ; 2  Green            A  Yellow
0050               * ; 3  Light Green      B  Light Yellow
0051               * ; 4  Blue             C  Dark Green
0052               * ; 5  Light Blue       D  Magenta
0053               * ; 6  Dark Red         E  Grey
0054               * ; 7  Cyan             F  White
0055               *--------------------------------------------------------------
0056      000C     tv.colorscheme.entries  equ 12        ; Entries in table
0057               tv.colorscheme.table:
0058                       ;                             ; #
0059                       ;      ABCD  EFGH  IJKL  MNOP ; -
0060 7972 F417             data  >f417,>f171,>1b1f,>7111 ; 1  White on blue with cyan touch
     7974 F171     
     7976 1B1F     
     7978 7111     
0061 797A 21F0             data  >21f0,>21ff,>f112,>21ff ; 2  Dark green on black (minimalistic)
     797C 21FF     
     797E F112     
     7980 21FF     
0062 7982 A11A             data  >a11a,>f0ff,>1f1a,>f1ff ; 3  Dark yellow on black
     7984 F0FF     
     7986 1F1A     
     7988 F1FF     
0063 798A 1E1E             data  >1e1e,>1e11,>1ee1,>1e11 ; 4  Black on grey (minimalistic)
     798C 1E11     
     798E 1EE1     
     7990 1E11     
0064 7992 151F             data  >151f,>1511,>1f1f,>1511 ; 5  Black on light blue
     7994 1511     
     7996 1F1F     
     7998 1511     
0065 799A 1313             data  >1313,>1311,>1331,>1311 ; 6  Black on light green (minimalistic)
     799C 1311     
     799E 1331     
     79A0 1311     
0066 79A2 1771             data  >1771,>1011,>0171,>1711 ; 7  Black on cyan
     79A4 1011     
     79A6 0171     
     79A8 1711     
0067 79AA 2112             data  >2112,>f0ff,>1f12,>f1f6 ; 8  Dark green on black
     79AC F0FF     
     79AE 1F12     
     79B0 F1F6     
0068 79B2 1FF1             data  >1ff1,>1011,>f1f1,>1f11 ; 9  Black on white
     79B4 1011     
     79B6 F1F1     
     79B8 1F11     
0069 79BA 1AF1             data  >1af1,>a111,>1f1f,>f11f ; 10 Black on dark yellow
     79BC A111     
     79BE 1F1F     
     79C0 F11F     
0070 79C2 1919             data  >1919,>1911,>1991,>1911 ; 11 Black on light red (minimalistic)
     79C4 1911     
     79C6 1991     
     79C8 1911     
0071 79CA FDF1             data  >fdf1,>1d11,>fddf,>1d11 ; 12 White on magenta
     79CC 1D11     
     79CE FDDF     
     79D0 1D11     
0072               
0073                       even
0074               
0075               tv.tabs.table.lr:
0076 79D2 0007             byte  0,7,12,25             ; \   Default tab positions as used
     79D4 0C19     
0077 79D6 1E2D             byte  30,45,59,79           ; |   in Editor/Assembler module.
     79D8 3B4F     
0078 79DA FF00             byte  >ff,0,0,0             ; |   Up to 11 positions supported.
     79DC 0000     
0079                                                   ; /   >ff means end-of-list.
0080               
0081               tv.tabs.table.rl:
0082 79DE 4F3B             byte  79,59,45,30           ; \   Default tab positions as used
     79E0 2D1E     
0083 79E2 190C             byte  25,12,7,0             ; |   in Editor/Assembler module.
     79E4 0700     
0084 79E6 FF00             byte  >ff,0,0,0             ; |   Up to 11 positions supported.
     79E8 0000     
0085                                                   ; /   >ff means end-of-list.
0086               
0087               ***************************************************************
0088               * Constants for numbers 0-10
0089               ********|*****|*********************|**************************
0090      2000     const.0       equ   w$0000          ; 0
0091      2002     const.1       equ   w$0001          ; 1
0092      2004     const.2       equ   w$0002          ; 2
0093 79EA 0003     const.3       data  3               ; 3
0094      2006     const.4       equ   w$0004          ; 4
0095 79EC 0005     const.5       data  5               ; 5
0096 79EE 0006     const.6       data  6               ; 6
0097 79F0 0007     const.7       data  7               ; 7
0098      2008     const.8       equ   w$0008          ; 8
0099 79F2 0009     const.9       data  9               ; 9
0100 79F4 000A     const.10      data  10              ; 10
0101 79F6 0020     const.32      data  32              ; 32
0102 79F8 0050     const.80      data  80              ; 80
                   < rom.resident.asm
0056                       copy  "data.strings.asm"            ; Strings
     **** ****     > data.strings.asm
0001               * FILE......: data.strings.asm
0002               * Purpose...: Stevie Editor - data segment (strings)
0003               
0004               ***************************************************************
0005               *                       Strings
0006               ***************************************************************
0007               
0008 79FA 012C     txt.delim          stri ','
0009                                  even
0010 79FC 0520     txt.bottom         stri '  BOT'
     79FE 2042     
     7A00 4F54     
0011                                  even
0012 7A02 044F     txt.ovrwrite       stri 'OVR '
     7A04 5652     
     7A06 20       
0013                                  even
0014 7A08 0449     txt.insert         stri 'INS '
     7A0A 4E53     
     7A0C 20       
0015                                  even
0016 7A0E 0449     txt.autoinsert     stri 'INS+'
     7A10 4E53     
     7A12 2B       
0017                                  even
0018 7A14 012A     txt.star           stri '*'
0019                                  even
0020 7A16 0A4C     txt.loading        stri 'Loading...'
     7A18 6F61     
     7A1A 6469     
     7A1C 6E67     
     7A1E 2E2E     
     7A20 2E       
0021                                  even
0022 7A22 0A53     txt.saving         stri 'Saving....'
     7A24 6176     
     7A26 696E     
     7A28 672E     
     7A2A 2E2E     
     7A2C 2E       
0023                                  even
0024 7A2E 1250     txt.printing       stri 'Printing file.....'
     7A30 7269     
     7A32 6E74     
     7A34 696E     
     7A36 6720     
     7A38 6669     
     7A3A 6C65     
     7A3C 2E2E     
     7A3E 2E2E     
     7A40 2E       
0025                                  even
0026 7A42 1244     txt.block.del      stri 'Deleting block....'
     7A44 656C     
     7A46 6574     
     7A48 696E     
     7A4A 6720     
     7A4C 626C     
     7A4E 6F63     
     7A50 6B2E     
     7A52 2E2E     
     7A54 2E       
0027                                  even
0028 7A56 1143     txt.block.copy     stri 'Copying block....'
     7A58 6F70     
     7A5A 7969     
     7A5C 6E67     
     7A5E 2062     
     7A60 6C6F     
     7A62 636B     
     7A64 2E2E     
     7A66 2E2E     
0029                                  even
0030 7A68 104D     txt.block.move     stri 'Moving block....'
     7A6A 6F76     
     7A6C 696E     
     7A6E 6720     
     7A70 626C     
     7A72 6F63     
     7A74 6B2E     
     7A76 2E2E     
     7A78 2E       
0031                                  even
0032 7A7A 1853     txt.block.save     stri 'Saving block to file....'
     7A7C 6176     
     7A7E 696E     
     7A80 6720     
     7A82 626C     
     7A84 6F63     
     7A86 6B20     
     7A88 746F     
     7A8A 2066     
     7A8C 696C     
     7A8E 652E     
     7A90 2E2E     
     7A92 2E       
0033                                  even
0034 7A94 1843     txt.block.clip     stri 'Copying to clipboard....'
     7A96 6F70     
     7A98 7969     
     7A9A 6E67     
     7A9C 2074     
     7A9E 6F20     
     7AA0 636C     
     7AA2 6970     
     7AA4 626F     
     7AA6 6172     
     7AA8 642E     
     7AAA 2E2E     
     7AAC 2E       
0035                                  even
0036 7AAE 1250     txt.block.print    stri 'Printing block....'
     7AB0 7269     
     7AB2 6E74     
     7AB4 696E     
     7AB6 6720     
     7AB8 626C     
     7ABA 6F63     
     7ABC 6B2E     
     7ABE 2E2E     
     7AC0 2E       
0037                                  even
0038 7AC2 1343     txt.clearmem       stri 'Clearing memory....'
     7AC4 6C65     
     7AC6 6172     
     7AC8 696E     
     7ACA 6720     
     7ACC 6D65     
     7ACE 6D6F     
     7AD0 7279     
     7AD2 2E2E     
     7AD4 2E2E     
0039                                  even
0040 7AD6 0E4C     txt.done.load      stri 'Load completed'
     7AD8 6F61     
     7ADA 6420     
     7ADC 636F     
     7ADE 6D70     
     7AE0 6C65     
     7AE2 7465     
     7AE4 64       
0041                                  even
0042 7AE6 1049     txt.done.insert    stri 'Insert completed'
     7AE8 6E73     
     7AEA 6572     
     7AEC 7420     
     7AEE 636F     
     7AF0 6D70     
     7AF2 6C65     
     7AF4 7465     
     7AF6 64       
0043                                  even
0044 7AF8 1041     txt.done.append    stri 'Append completed'
     7AFA 7070     
     7AFC 656E     
     7AFE 6420     
     7B00 636F     
     7B02 6D70     
     7B04 6C65     
     7B06 7465     
     7B08 64       
0045                                  even
0046 7B0A 0E53     txt.done.save      stri 'Save completed'
     7B0C 6176     
     7B0E 6520     
     7B10 636F     
     7B12 6D70     
     7B14 6C65     
     7B16 7465     
     7B18 64       
0047                                  even
0048 7B1A 0E43     txt.done.copy      stri 'Copy completed'
     7B1C 6F70     
     7B1E 7920     
     7B20 636F     
     7B22 6D70     
     7B24 6C65     
     7B26 7465     
     7B28 64       
0049                                  even
0050 7B2A 0F50     txt.done.print     stri 'Print completed'
     7B2C 7269     
     7B2E 6E74     
     7B30 2063     
     7B32 6F6D     
     7B34 706C     
     7B36 6574     
     7B38 6564     
0051                                  even
0052 7B3A 1044     txt.done.delete    stri 'Delete completed'
     7B3C 656C     
     7B3E 6574     
     7B40 6520     
     7B42 636F     
     7B44 6D70     
     7B46 6C65     
     7B48 7465     
     7B4A 64       
0053                                  even
0054 7B4C 0F43     txt.done.clipboard stri 'Clipboard saved'
     7B4E 6C69     
     7B50 7062     
     7B52 6F61     
     7B54 7264     
     7B56 2073     
     7B58 6176     
     7B5A 6564     
0055                                  even
0056 7B5C 0D43     txt.done.clipdev   stri 'Clipboard set'
     7B5E 6C69     
     7B60 7062     
     7B62 6F61     
     7B64 7264     
     7B66 2073     
     7B68 6574     
0057                                  even
0058 7B6A 124D     txt.done.mc        stri 'Master Catalog set'
     7B6C 6173     
     7B6E 7465     
     7B70 7220     
     7B72 4361     
     7B74 7461     
     7B76 6C6F     
     7B78 6720     
     7B7A 7365     
     7B7C 74       
0059                                  even
0060 7B7E 0E41     txt.autoins.on     stri 'Autoinsert: on'
     7B80 7574     
     7B82 6F69     
     7B84 6E73     
     7B86 6572     
     7B88 743A     
     7B8A 206F     
     7B8C 6E       
0061                                  even
0062 7B8E 0F41     txt.autoins.off    stri 'Autoinsert: off'
     7B90 7574     
     7B92 6F69     
     7B94 6E73     
     7B96 6572     
     7B98 743A     
     7B9A 206F     
     7B9C 6666     
0063                                  even
0064 7B9E 0B46     txt.fastmode       stri 'Fastmode IO'
     7BA0 6173     
     7BA2 746D     
     7BA4 6F64     
     7BA6 6520     
     7BA8 494F     
0065                                  even
0066 7BAA 1B45     txt.uncrunching    stri 'Expanding TI Basic line....'
     7BAC 7870     
     7BAE 616E     
     7BB0 6469     
     7BB2 6E67     
     7BB4 2054     
     7BB6 4920     
     7BB8 4261     
     7BBA 7369     
     7BBC 6320     
     7BBE 6C69     
     7BC0 6E65     
     7BC2 2E2E     
     7BC4 2E2E     
0067                                  even
0068 7BC6 026B     txt.kb             stri 'kb'
     7BC8 62       
0069                                  even
0070 7BCA 054C     txt.lines          stri 'Lines'
     7BCC 696E     
     7BCE 6573     
0071                                  even
0072 7BD0 0A5B     txt.newfile        stri '[New file]'
     7BD2 4E65     
     7BD4 7720     
     7BD6 6669     
     7BD8 6C65     
     7BDA 5D       
0073                                  even
0074 7BDC 0D5B     txt.tib1           stri '[TI Basic #1]'
     7BDE 5449     
     7BE0 2042     
     7BE2 6173     
     7BE4 6963     
     7BE6 2023     
     7BE8 315D     
0075                                  even
0076 7BEA 0D5B     txt.tib2           stri '[TI Basic #2]'
     7BEC 5449     
     7BEE 2042     
     7BF0 6173     
     7BF2 6963     
     7BF4 2023     
     7BF6 325D     
0077                                  even
0078 7BF8 0D5B     txt.tib3           stri '[TI Basic #3]'
     7BFA 5449     
     7BFC 2042     
     7BFE 6173     
     7C00 6963     
     7C02 2023     
     7C04 335D     
0079                                  even
0080 7C06 0D5B     txt.tib4           stri '[TI Basic #4]'
     7C08 5449     
     7C0A 2042     
     7C0C 6173     
     7C0E 6963     
     7C10 2023     
     7C12 345D     
0081                                  even
0082 7C14 0D5B     txt.tib5           stri '[TI Basic #5]'
     7C16 5449     
     7C18 2042     
     7C1A 6173     
     7C1C 6963     
     7C1E 2023     
     7C20 355D     
0083                                  even
0084 7C22 0444     txt.filetype.dv80  stri 'DV80'
     7C24 5638     
     7C26 30       
0085                                  even
0086 7C28 034D     txt.m1             stri 'M1='
     7C2A 313D     
0087                                  even
0088 7C2C 034D     txt.m2             stri 'M2='
     7C2E 323D     
0089                                  even
0090 7C30 1E46     txt.keys.default   stri 'F9-Menu  ^H-Help  ^U-Shortcuts'
     7C32 392D     
     7C34 4D65     
     7C36 6E75     
     7C38 2020     
     7C3A 5E48     
     7C3C 2D48     
     7C3E 656C     
     7C40 7020     
     7C42 205E     
     7C44 552D     
     7C46 5368     
     7C48 6F72     
     7C4A 7463     
     7C4C 7574     
     7C4E 73       
0091                                  even
0092 7C50 2946     txt.keys.defaultb  stri 'F9-Menu  ^H-Help  ^U-Shortcuts  F0-Basic#'
     7C52 392D     
     7C54 4D65     
     7C56 6E75     
     7C58 2020     
     7C5A 5E48     
     7C5C 2D48     
     7C5E 656C     
     7C60 7020     
     7C62 205E     
     7C64 552D     
     7C66 5368     
     7C68 6F72     
     7C6A 7463     
     7C6C 7574     
     7C6E 7320     
     7C70 2046     
     7C72 302D     
     7C74 4261     
     7C76 7369     
     7C78 6323     
0093                                  even
0094 7C7A 3446     txt.keys.block     stri 'F9-Exit  ^Copy ^Move ^Del ^Save ^Print ^[1-3]Clipbrd'
     7C7C 392D     
     7C7E 4578     
     7C80 6974     
     7C82 2020     
     7C84 5E43     
     7C86 6F70     
     7C88 7920     
     7C8A 5E4D     
     7C8C 6F76     
     7C8E 6520     
     7C90 5E44     
     7C92 656C     
     7C94 205E     
     7C96 5361     
     7C98 7665     
     7C9A 205E     
     7C9C 5072     
     7C9E 696E     
     7CA0 7420     
     7CA2 5E5B     
     7CA4 312D     
     7CA6 335D     
     7CA8 436C     
     7CAA 6970     
     7CAC 6272     
     7CAE 64       
0095                                  even
0096 7CB0 2C46     txt.keys.basic1    stri 'F9-Back  F5-AutoUnpack  SPACE-Unpack program'
     7CB2 392D     
     7CB4 4261     
     7CB6 636B     
     7CB8 2020     
     7CBA 4635     
     7CBC 2D41     
     7CBE 7574     
     7CC0 6F55     
     7CC2 6E70     
     7CC4 6163     
     7CC6 6B20     
     7CC8 2053     
     7CCA 5041     
     7CCC 4345     
     7CCE 2D55     
     7CD0 6E70     
     7CD2 6163     
     7CD4 6B20     
     7CD6 7072     
     7CD8 6F67     
     7CDA 7261     
     7CDC 6D       
0097                                  even
0098               
0099 7CDE 020E     txt.alpha.down     data >020e,>0f00
     7CE0 0F00     
0100 7CE2 0110     txt.vertline       data >0110
0101 7CE4 011C     txt.keymarker      byte 1,28
0102               
0103 7CE6 0120     txt.ws1            stri ' '
0104                                  even
0105 7CE8 0220     txt.ws2            stri '  '
     7CEA 20       
0106                                  even
0107 7CEC 0320     txt.ws3            stri '   '
     7CEE 2020     
0108                                  even
0109 7CF0 0420     txt.ws4            stri '    '
     7CF2 2020     
     7CF4 20       
0110                                  even
0111 7CF6 0520     txt.ws5            stri '     '
     7CF8 2020     
     7CFA 2020     
0112                                  even
0113      3C30     txt.filetype.none  equ txt.ws4
0114               
0115 7CFC 3550     txt.msg.mastcat    stri 'Put cursor on file in list and press ^O to load file.'
     7CFE 7574     
     7D00 2063     
     7D02 7572     
     7D04 736F     
     7D06 7220     
     7D08 6F6E     
     7D0A 2066     
     7D0C 696C     
     7D0E 6520     
     7D10 696E     
     7D12 206C     
     7D14 6973     
     7D16 7420     
     7D18 616E     
     7D1A 6420     
     7D1C 7072     
     7D1E 6573     
     7D20 7320     
     7D22 5E4F     
     7D24 2074     
     7D26 6F20     
     7D28 6C6F     
     7D2A 6164     
     7D2C 2066     
     7D2E 696C     
     7D30 652E     
0116                                  even
0117               
0118 7D32 1D54     txt.msg.tibasic    stri 'TI Basic program mode active.'
     7D34 4920     
     7D36 4261     
     7D38 7369     
     7D3A 6320     
     7D3C 7072     
     7D3E 6F67     
     7D40 7261     
     7D42 6D20     
     7D44 6D6F     
     7D46 6465     
     7D48 2061     
     7D4A 6374     
     7D4C 6976     
     7D4E 652E     
0119               ;--------------------------------------------------------------
0120               ; Strings for error line pane
0121               ;--------------------------------------------------------------
0122 7D50 1546     txt.ioerr.load     stri 'Failed loading file: '
     7D52 6169     
     7D54 6C65     
     7D56 6420     
     7D58 6C6F     
     7D5A 6164     
     7D5C 696E     
     7D5E 6720     
     7D60 6669     
     7D62 6C65     
     7D64 3A20     
0123                                  even
0124 7D66 1446     txt.ioerr.save     stri 'Failed saving file: '
     7D68 6169     
     7D6A 6C65     
     7D6C 6420     
     7D6E 7361     
     7D70 7669     
     7D72 6E67     
     7D74 2066     
     7D76 696C     
     7D78 653A     
     7D7A 20       
0125                                  even
0126 7D7C 1B46     txt.ioerr.print    stri 'Failed printing to device: '
     7D7E 6169     
     7D80 6C65     
     7D82 6420     
     7D84 7072     
     7D86 696E     
     7D88 7469     
     7D8A 6E67     
     7D8C 2074     
     7D8E 6F20     
     7D90 6465     
     7D92 7669     
     7D94 6365     
     7D96 3A20     
0127                                  even
0128 7D98 164E     txt.io.nofile      stri 'No filename specified.'
     7D9A 6F20     
     7D9C 6669     
     7D9E 6C65     
     7DA0 6E61     
     7DA2 6D65     
     7DA4 2073     
     7DA6 7065     
     7DA8 6369     
     7DAA 6669     
     7DAC 6564     
     7DAE 2E       
0129                                  even
0130 7DB0 2D49     txt.memfull.load   stri 'Index full. File too large for editor buffer.'
     7DB2 6E64     
     7DB4 6578     
     7DB6 2066     
     7DB8 756C     
     7DBA 6C2E     
     7DBC 2046     
     7DBE 696C     
     7DC0 6520     
     7DC2 746F     
     7DC4 6F20     
     7DC6 6C61     
     7DC8 7267     
     7DCA 6520     
     7DCC 666F     
     7DCE 7220     
     7DD0 6564     
     7DD2 6974     
     7DD4 6F72     
     7DD6 2062     
     7DD8 7566     
     7DDA 6665     
     7DDC 722E     
0131                                  even
0132 7DDE 2D43     txt.block.inside   stri 'Copy/Move target must be outside M1-M2 range.'
     7DE0 6F70     
     7DE2 792F     
     7DE4 4D6F     
     7DE6 7665     
     7DE8 2074     
     7DEA 6172     
     7DEC 6765     
     7DEE 7420     
     7DF0 6D75     
     7DF2 7374     
     7DF4 2062     
     7DF6 6520     
     7DF8 6F75     
     7DFA 7473     
     7DFC 6964     
     7DFE 6520     
     7E00 4D31     
     7E02 2D4D     
     7E04 3220     
     7E06 7261     
     7E08 6E67     
     7E0A 652E     
0133                                  even
0134               
0135               ;--------------------------------------------------------------
0136               ; Strings for command buffer
0137               ;--------------------------------------------------------------
0138 7E0C 013E     txt.cmdb.prompt    stri '>'
0139                                  even
0140 7E0E 0D43     txt.colorscheme    stri 'Color scheme:'
     7E10 6F6C     
     7E12 6F72     
     7E14 2073     
     7E16 6368     
     7E18 656D     
     7E1A 653A     
0141                                  even
                   < rom.resident.asm
0057                       copy  "data.defaults.asm"           ; Default values (devices, ...)
     **** ****     > data.defaults.asm
0001               * FILE......: data.defaults.asm
0002               * Purpose...: Default values for Stevie
0003               
0004               ***************************************************************
0005               *                     Default values
0006               ********|*****|*********************|**************************
0007 7E1C 0650     def.printer.fname   stri 'PI.PIO'
     7E1E 492E     
     7E20 5049     
     7E22 4F       
0008 7E23   09     def.clip.fname.a    stri 'DSK1.CLIP'
     7E24 4453     
     7E26 4B31     
     7E28 2E43     
     7E2A 4C49     
     7E2C 50       
0009 7E2D   09     def.clip.fname.b    stri 'DSK6.CLIP'
     7E2E 4453     
     7E30 4B36     
     7E32 2E43     
     7E34 4C49     
     7E36 50       
0010 7E37   09     def.clip.fname.c    stri 'TIPI.CLIP'
     7E38 5449     
     7E3A 5049     
     7E3C 2E43     
     7E3E 4C49     
     7E40 50       
0011 7E41   0C     def.mc.fname.a      stri 'DSK1.MASTCAT'
     7E42 4453     
     7E44 4B31     
     7E46 2E4D     
     7E48 4153     
     7E4A 5443     
     7E4C 4154     
0012 7E4E 0C44     def.mc.fname.b      stri 'DSK6.MASTCAT'
     7E50 534B     
     7E52 362E     
     7E54 4D41     
     7E56 5354     
     7E58 4341     
     7E5A 54       
0013 7E5B   0C     def.mc.fname.c      stri 'TIPI.MASTCAT'
     7E5C 5449     
     7E5E 5049     
     7E60 2E4D     
     7E62 4153     
     7E64 5443     
     7E66 4154     
0014 7E68 2F2C     def.devices         stri ',DSK,HDX,IDE,PI.,PIO,TIPI.,RD,SCS,SDD,WDS,RS232'
     7E6A 4453     
     7E6C 4B2C     
     7E6E 4844     
     7E70 582C     
     7E72 4944     
     7E74 452C     
     7E76 5049     
     7E78 2E2C     
     7E7A 5049     
     7E7C 4F2C     
     7E7E 5449     
     7E80 5049     
     7E82 2E2C     
     7E84 5244     
     7E86 2C53     
     7E88 4353     
     7E8A 2C53     
     7E8C 4444     
     7E8E 2C57     
     7E90 4453     
     7E92 2C52     
     7E94 5332     
     7E96 3332     
                   < rom.resident.asm
0058                       copy  "data.fg99.carts.asm"         ; Cartridge images
     **** ****     > data.fg99.carts.asm
0001               * FILE......: data.fg99.carts.asm
0002               * Purpose...: FinalGROM cartridge images
0003               
0004               ***************************************************************
0005               *                   Cartridge images
0006               ***************************************************************
0007                      even
0008               *--------------------------------------------------------------
0009               * Cartridge 'Force Command'
0010               *--------------------------------------------------------------
0011               fg99.cart.fcmd:
0012 7E98 99              byte   >99                   ; \
0013 7E99   4F            text   'OKFG99'              ; | Send this to reload
     7E9A 4B46     
     7E9C 4739     
     7E9E 39       
0014 7E9F   99            byte   >99                   ; /
0015 7EA0 4643            text   "FCMDG"               ; \ File to load (8 chars, pad with >00)
     7EA2 4D44     
     7EA4 47       
0016 7EA5   00            byte   >00, >00, >00         ; /
     7EA6 0000     
0017 7EA8 0000            data   >0000                 ; >0000 for GROM/mixed, >FFFF for ROM only
0018 7EAA 0000            data   >0000                 ; Start address
0019                      even
0020               
0021               *--------------------------------------------------------------
0022               * Cartridge 'Extended Basic GEM'
0023               *--------------------------------------------------------------
0024               fg99.cart.xbgem:
0025 7EAC 99              byte   >99                   ; \
0026 7EAD   4F            text   'OKFG99'              ; | Send this to reload
     7EAE 4B46     
     7EB0 4739     
     7EB2 39       
0027 7EB3   99            byte   >99                   ; /
0028 7EB4 5842            text   "XB29GEMG"            ; \ File to load (8 chars, pad with >00)
     7EB6 3239     
     7EB8 4745     
     7EBA 4D47     
0029                      ;                            ; /
0030 7EBC 0000            data   >0000                 ; >0000 for GROM/mixed, >FFFF for ROM only
0031 7EBE 0000            data   >0000                 ; Start address
0032                      even
0033               
0034               *--------------------------------------------------------------
0035               * Cartridge 'Rich Extended Basic'
0036               *--------------------------------------------------------------
0037               fg99.cart.rxb:
0038 7EC0 99              byte   >99                   ; \
0039 7EC1   4F            text   'OKFG99'              ; | Send this to reload
     7EC2 4B46     
     7EC4 4739     
     7EC6 39       
0040 7EC7   99            byte   >99                   ; /
0041 7EC8 5258            text   "RXBG"                ; \ File to load (8 chars, pad with >00)
     7ECA 4247     
0042 7ECC 0000            byte   >00, >00, >00, >00    ; /
     7ECE 0000     
0043 7ED0 0000            data   >0000                 ; >0000 for GROM/mixed, >FFFF for ROM only
0044 7ED2 0000            data   >0000                 ; Start address
0045                      even
0046               
0047               *--------------------------------------------------------------
0048               * Cartridge 'fbForth'
0049               *--------------------------------------------------------------
0050               fg99.cart.fbforth:
0051 7ED4 99              byte   >99                   ; \
0052 7ED5   4F            text   'OKFG99'              ; | Send this to reload
     7ED6 4B46     
     7ED8 4739     
     7EDA 39       
0053 7EDB   99            byte   >99                   ; /
0054 7EDC 4642            text   "FBFORTHC"            ; \ File to load (8 chars, pad with >00)
     7EDE 464F     
     7EE0 5254     
     7EE2 4843     
0055                      ;                            ; /
0056 7EE4 0000            data   >0000                 ; >0000 for GROM/mixed, >FFFF for ROM only
0057 7EE6 0000            data   >0000                 ; Start address
0058                      even
                   < rom.resident.asm
                   < stevie_b0.asm
0131                       ;------------------------------------------------------
0132                       ; Stevie main entry point
0133                       ;------------------------------------------------------
0134               main:
0135 7EE8 04E0  34         clr   @bank1.rom            ; Activate bank 1 "James" ROM
     7EEA 6002     
0136               
0140               
0141 7EEC 0460  28         b     @kickstart.code2      ; Jump to entry routine >6046
     7EEE 6046     
0142                       ;------------------------------------------------------
0143                       ; Memory full check
0144                       ;------------------------------------------------------
0151 7EF0 3E30                   data $                ; Bank 0 ROM size OK.
0153                       ;-----------------------------------------------------------------------
0154                       ; Show ROM bank in CPU crash screen
0155                       ;-----------------------------------------------------------------------
0156                       copy  "rom.crash.asm"
     **** ****     > rom.crash.asm
0001               * FILE......: rom.crash.asm
0002               * Purpose...: Show ROM bank number on CPU crash
0003               
0004               ***************************************************************
0005               * Show ROM bank number on CPU crash
0006               ********|*****|*********************|**************************
0007               cpu.crash.showbank:
0008                       aorg  bankx.crash.showbank
0009 7F00 06A0  32         bl    @putat
     7F02 2442     
0010 7F04 0314                   byte 3,20
0011 7F06 7F0A                   data cpu.crash.showbank.bankstr
0012 7F08 10FF  14         jmp   $
                   < stevie_b0.asm
0157               
0158               cpu.crash.showbank.bankstr:
0159 7F0A 0552             stri 'ROM#0'
     7F0C 4F4D     
     7F0E 2330     
0160               
0161                       ;-----------------------------------------------------------------------
0162                       ; Table for VDP modes
0163                       ;-----------------------------------------------------------------------
0164                       copy  "data.vdpmodes.asm"   ; Table for VDP modes
     **** ****     > data.vdpmodes.asm
0001               * FILE......: data.vdp.modes.asm
0002               * Purpose...: VDP modes tables
0003               
0004                           aorg bankx.vdptab
0005               
0006               ; ====================================================================
0007               ; Keep the tables in sequence, or change offsets in equates.f18a.*.asm
0008               ; ====================================================================
0009               
0010               ***************************************************************
0011               * Textmode (80 columns, 30 rows) - F18A
0012               *--------------------------------------------------------------
0013               *
0014               * ; VDP#0 Control bits
0015               * ;      bit 6=0: M3 | Graphics 1 mode
0016               * ;      bit 7=0: Disable external VDP input
0017               * ; VDP#1 Control bits
0018               * ;      bit 0=1: 16K selection
0019               * ;      bit 1=1: Enable display
0020               * ;      bit 2=1: Enable VDP interrupt
0021               * ;      bit 3=1: M1 \ TEXT MODE
0022               * ;      bit 4=0: M2 /
0023               * ;      bit 5=0: reserved
0024               * ;      bit 6=0: 8x8 sprites
0025               * ;      bit 7=0: Sprite magnification (1x)
0026               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >960)
0027               * ; VDP#3 PCT (Pattern color table)      at >0FC0  (>3F * >040)
0028               * ; VDP#4 PDT (Pattern descriptor table) at >1000  (>02 * >800)
0029               * ; VDP#5 SAT (sprite attribute list)    at >2180  (>43 * >080)
0030               * ; VDP#6 SPT (Sprite pattern table)     at >2800  (>05 * >800)
0031               * ; VDP#7 Set foreground/background color
0032               ***************************************************************
0033               stevie.80x30:
0034 7F10 04F0             byte  >04,>f0,>00,>3f,>02,>43,>05,SPFCLR,0,80
     7F12 003F     
     7F14 0243     
     7F16 05F4     
     7F18 0050     
0035               
0036               
0037               ***************************************************************
0038               * Textmode (80 columns, 60 rows) - F18A
0039               *--------------------------------------------------------------
0040               *
0041               * ; VDP#0 Control bits
0042               * ;      bit 6=0: M3 | Graphics 1 mode
0043               * ;      bit 7=0: Disable external VDP input
0044               * ; VDP#1 Control bits
0045               * ;      bit 0=1: 16K selection
0046               * ;      bit 1=1: Enable display
0047               * ;      bit 2=1: Enable VDP interrupt
0048               * ;      bit 3=1: M1 \ TEXT MODE
0049               * ;      bit 4=0: M2 /
0050               * ;      bit 5=0: reserved
0051               * ;      bit 6=0: 8x8 sprites
0052               * ;      bit 7=0: Sprite magnification (1x)
0053               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >12c0)
0054               * ; VDP#3 PCT (Pattern color table)      at >0FC0  (>3F * >040) - not used!
0055               * ; VDP#4 PDT (Pattern descriptor table) at >3000  (>06 * >800)
0056               * ; VDP#5 SAT (sprite attribute list)    at >3A00  (>74 * >080)
0057               * ; VDP#6 SPT (Sprite pattern table)     at >3800  (>07 * >800)
0058               * ; VDP#7 Set foreground/background color
0059               ***************************************************************
0060               stevie.80x60:
0061 7F1A 04F0             byte  >04,>f0,>00,>3f,>06,>74,>07,SPFCLR,0,80
     7F1C 003F     
     7F1E 0674     
     7F20 07F4     
     7F22 0050     
0062               
0063               
0064               
0065               ***************************************************************
0066               * TI Basic mode (32 columns/24 rows)
0067               *--------------------------------------------------------------
0068               tibasic.32x24:
0069 7F24 00E2             byte  >00,>e2,>00,>0c,>00,>06,>00,>07,0,32
     7F26 000C     
     7F28 0006     
     7F2A 0007     
     7F2C 0020     
0070               *
0071               * ; VDP#0 Control bits
0072               * ;      bit 6=0: M3 | Graphics 1 mode
0073               * ;      bit 7=0: Disable external VDP input
0074               * ; VDP#1 Control bits
0075               * ;      bit 0=1: 16K selection
0076               * ;      bit 1=1: Enable display
0077               * ;      bit 2=1: Enable VDP interrupt
0078               * ;      bit 3=0: M1 \ Graphics 1 mode
0079               * ;      bit 4=0: M2 /
0080               * ;      bit 5=0: reserved
0081               * ;      bit 6=1: 16x16 sprites
0082               * ;      bit 7=0: Sprite magnification (1x)
0083               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0084               * ; VDP#3 PCT (Pattern color table)      at >0300  (>0C * >040)
0085               * ; VDP#4 PDT (Pattern descriptor table) at >0000  (>00 * >800)
0086               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0087               * ; VDP#6 SPT (Sprite pattern table)     at >0000  (>00 * >800)
0088               * ; VDP#7 Set screen background color
0089               
0090               
0091               
0092               
0093               
0094               
0095               ***************************************************************
0096               * TI Basic mode (32 columns/30 rows) - F18A
0097               *--------------------------------------------------------------
0098               tibasic.32x30:
0099 7F2E 00E2             byte  >00,>e2,>00,>0c,>00,>06,>00,>07,0,32
     7F30 000C     
     7F32 0006     
     7F34 0007     
     7F36 0020     
0100               *
0101               * ; VDP#0 Control bits
0102               * ;      bit 6=0: M3 | Graphics 1 mode
0103               * ;      bit 7=0: Disable external VDP input
0104               * ; VDP#1 Control bits
0105               * ;      bit 0=1: 16K selection
0106               * ;      bit 1=1: Enable display
0107               * ;      bit 2=1: Enable VDP interrupt
0108               * ;      bit 3=0: M1 \ Graphics 1 mode
0109               * ;      bit 4=0: M2 /
0110               * ;      bit 5=0: reserved
0111               * ;      bit 6=1: 16x16 sprites
0112               * ;      bit 7=0: Sprite magnification (1x)
0113               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0114               * ; VDP#3 PCT (Pattern color table)      at >0300  (>0C * >040)
0115               * ; VDP#4 PDT (Pattern descriptor table) at >0000  (>00 * >800)
0116               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0117               * ; VDP#6 SPT (Sprite pattern table)     at >0000  (>00 * >800)
0118               * ; VDP#7 Set screen background color
0119               * ;
0120               * ; The table by itself is not sufficient for turning on 30 rows
0121               * ; mode. You also need to unlock the F18a and set VR49 (>31) to
0122               * ; value >40.
                   < stevie_b0.asm

    ANYKEY.............. >200A :     
    AT.................. >26C6 :     
    BANK0.RAM........... >6800 :     
    BANK0.ROM........... >6000 :     
    BANK1.RAM........... >6802 :     
    BANK1.ROM........... >6002 :     
    BANK2.RAM........... >6804 :     
    BANK2.ROM........... >6004 :     
    BANK3.RAM........... >6806 :     
    BANK3.ROM........... >6006 :     
    BANK4.RAM........... >6808 :     
    BANK4.ROM........... >6008 :     
    BANK5.RAM........... >680A :     
    BANK5.ROM........... >600A :     
    BANK6.RAM........... >680C :     
    BANK6.ROM........... >600C :     
    BANK7.RAM........... >680E :     
    BANK7.ROM........... >600E :     
    BANKID.............. >6000 :     
    BANKX.CRASH.SHOWBANK >7F00 :     
    BANKX.VDPTAB........ >7F10 :     
    BANKX.VECTAB........ >7F40 :     
    BTIHI............... >8314 :     
    BVDPST.............. >831A :     
    BX.................. >832B :     
    BY.................. >832A :     
    C99_BRK............. >0113 :     
    C99_DBGR0........... >0120 :     
    C99_DBGR1........... >0121 :     
    C99_DBGR10.......... >012A :     
    C99_DBGR11.......... >012B :     
    C99_DBGR12.......... >012C :     
    C99_DBGR13.......... >012D :     
    C99_DBGR14.......... >012E :     
    C99_DBGR15.......... >012F :     
    C99_DBGR2........... >0122 :     
    C99_DBGR3........... >0123 :     
    C99_DBGR4........... >0124 :     
    C99_DBGR5........... >0125 :     
    C99_DBGR6........... >0126 :     
    C99_DBGR7........... >0127 :     
    C99_DBGR8........... >0128 :     
    C99_DBGR9........... >0129 :     
    C99_DBG_R0.......... >0120 :     
    C99_DBG_R1.......... >0121 :     
    C99_DBG_R2.......... >0122 :     
    C99_DBG_R3.......... >0123 :     
    C99_DBG_R4.......... >0124 :     
    C99_DBG_R5.......... >0125 :     
    C99_DBG_R6.......... >0126 :     
    C99_DBG_R7.......... >0127 :     
    C99_DBG_R8.......... >0128 :     
    C99_DBG_R9.......... >0199 :     
    C99_DBG_RA.......... >012A :     
    C99_DBG_RB.......... >012B :     
    C99_DBG_RC.......... >012C :     
    C99_DBG_RD.......... >012D :     
    C99_DBG_RE.......... >012E :     
    C99_DBG_RF.......... >012F :     
    C99_DBG_STCK........ >0199 :     
    C99_DBG_TMP0........ >0124 :     
    C99_DBG_TMP1........ >0125 :     
    C99_DBG_TMP2........ >0126 :     
    C99_DBG_TMP3........ >0127 :     
    C99_DBG_TMP4........ >0128 :     
    C99_NORM............ >0110 :     
    C99_OVRD............ >0111 :     
    C99_QUIT............ >0114 :     
    C99_SMAX............ >0112 :     
    CLHOOK.............. >2EC2 :     
    CLIP1............... >3100 :     
    CLIP2............... >3200 :     
    CLIP3............... >3300 :     
    CLIP4............... >3400 :     
    CLIP5............... >3500 :     
    CLSLOT.............. >2EEA :     
    CMDB.ACTION.PTR..... >A72C :     
    CMDB.CMD............ >A72F :     
    CMDB.CMDALL......... >A72E :     
    CMDB.CMDLEN......... >A72E :     
    CMDB.COLUMN......... >A714 :     
    CMDB.CURSOR......... >A70A :     
    CMDB.DEFAULT........ >A708 :     
    CMDB.DFLT.FNAME..... >A7B2 :     
    CMDB.DIALOG......... >A71C :     
    CMDB.DIALOG.VAR..... >A71E :     
    CMDB.DIRTY.......... >A71A :     
    CMDB.FB.YXSAVE...... >A704 :     
    CMDB.FREE........... >A800 :     
    CMDB.INIT........... >3284 :     
    CMDB.INIT.EXIT...... >32D8 :     
    CMDB.LENGTH......... >A716 :     
    CMDB.LINES.......... >A718 :     
    CMDB.PANHEAD........ >A720 :     
    CMDB.PANHEAD.BUF.... >A780 :     
    CMDB.PANHINT........ >A724 :     
    CMDB.PANHINT2....... >A726 :     
    CMDB.PANINFO........ >A722 :     
    CMDB.PANKEYS........ >A72A :     
    CMDB.PANMARKERS..... >A728 :     
    CMDB.ROWS........... >0005 :     
    CMDB.SCRROWS........ >A706 :     
    CMDB.SIZE........... >1000 :     
    CMDB.STRUCT......... >A700 :     
    CMDB.TOP............ >E000 :     
    CMDB.TOP.PTR........ >A700 :     
    CMDB.VDPTOP......... >A70E :     
    CMDB.VISIBLE........ >A702 :     
    CMDB.YXPROMPT....... >A712 :     
    CMDB.YXSAVE......... >A70C :     
    CMDB.YXTOP.......... >A710 :     
    COLROW.............. >0050 :     
    CONFIG.............. >0002 :     
    CONST.0............. >2000 :     
    CONST.1............. >2002 :     
    CONST.10............ >3934 :     
    CONST.2............. >2004 :     
    CONST.3............. >392A :     
    CONST.32............ >3936 :     
    CONST.4............. >2006 :     
    CONST.5............. >392C :     
    CONST.6............. >392E :     
    CONST.7............. >3930 :     
    CONST.8............. >2008 :     
    CONST.80............ >3938 :     
    CONST.9............. >3932 :     
    CORE1.FREE.......... >A100 :     
    CORE1.FREE1......... >A036 :     
    CORE1.FREE2......... >A0D4 :     
    CORE1.TOP........... >A000 :     
    CORE2.FREE.......... >A200 :     
    CORE2.TOP........... >A100 :     
    CPU.CRASH........... >2026 :     
    CPU.CRASH.MAIN...... >2086 :     
    CPU.CRASH.MSG.CALLER >2198 :     
    CPU.CRASH.MSG.CRASHED >2182 :     
    CPU.CRASH.MSG.ID.... >21D8 :     
    CPU.CRASH.MSG.MARKER >21B0 :     
    CPU.CRASH.MSG.R..... >21AE :     
    CPU.CRASH.MSG.SOURCE >21C0 :     
    CPU.CRASH.MSG.ST.... >21BA :     
    CPU.CRASH.MSG.WP.... >21B4 :     
    CPU.CRASH.RESET..... >2076 :     
    CPU.CRASH.SHOWBANK.. >7F00 :     
    CPU.CRASH.SHOWBANK.BANKSTR >7F0A :     
    CPU.CRASH.SHOWREG... >20EC :     
    CPU.CRASH.SHOWREG.CONTENT >2142 :     
    CPU.CRASH.SHOWREG.LABEL >20FA :     
    CPU.SCRPAD.BACKUP... >2AF0 :     
    CPU.SCRPAD.BACKUP.COPY >2B08 :     
    CPU.SCRPAD.BACKUP.EXIT >2B22 :     
    CPU.SCRPAD.PGIN..... >2B76 :     
    CPU.SCRPAD.PGIN.EXIT >2B98 :     
    CPU.SCRPAD.PGOUT.... >2B38 :     
    CPU.SCRPAD.PGOUT.AFTER.RTWP >2B70 :     
    CPU.SCRPAD.PGOUT.EXIT >2B74 :     
    CPU.SCRPAD.RESTORE.. >2B24 :     
    CPU.SCRPAD.RESTORE.COPY >2B2C :     
    CPU.SCRPAD.RESTORE.EXIT >2B36 :     
    CPU.SCRPAD.SRC...... >7E00 :     
    CPU.SCRPAD.TGT...... >F000 :     
    CPU.SCRPAD1......... >8300 :     
    CPU.SCRPAD2......... >AD00 :     
    CPYCHK.............. >24EC :     
    CPYM0............... >24F8 :     
    CPYM1............... >2504 :     
    CPYM2............... >250C :     
    CPYM2M.............. >24DA :     
    CPYM2V.............. >2486 :     
    CPYM3............... >251C :     
    CPYM4............... >2526 :     
    CPYMZ............... >2532 :     
    CPYODD.............. >2534 :     
    CPYV2M.............. >24B8 :     
    DEBUG............... >0000 :     
    DEF.CLIP.FNAME.A.... >3D63 :     
    DEF.CLIP.FNAME.B.... >3D6D :     
    DEF.CLIP.FNAME.C.... >3D77 :     
    DEF.DEVICES......... >3DA8 :     
    DEF.MC.FNAME.A...... >3D81 :     
    DEF.MC.FNAME.B...... >3D8E :     
    DEF.MC.FNAME.C...... >3D9B :     
    DEF.PRINTER.FNAME... >3D5C :     
    DEVICE.F18A......... >0001 :     
    DEVICE.FG99.MODE.ADV >0000 :     
    DOFILL.............. >2280 :     
    DOWN................ >26CC :     
    DSRLNK.............. >2B9A :     
    DSRLNK.DEVICE_NAME.GET_LENGTH >2BF4 :     
    DSRLNK.DSRLWS....... >A400 :     
    DSRLNK.DSRSCAN.CALL_DSR >2C70 :     
    DSRLNK.DSRSCAN.CARDLOOP >2C20 :     
    DSRLNK.DSRSCAN.CARDOFF >2C1A :     
    DSRLNK.DSRSCAN.DSR.8 >2CA2 :     
    DSRLNK.DSRSCAN.DSR.A >2CB2 :     
    DSRLNK.DSRSCAN.GETENTRY >2C4A :     
    DSRLNK.DSRSCAN.NEXTENTRY >2C44 :     
    DSRLNK.DSRSCAN.RETURN_DSR >2C92 :     
    DSRLNK.DSRSCAN.START >2C10 :     
    DSRLNK.DSTYPE....... >A40A :     
    DSRLNK.ERROR.DEVICENAME_INVALID >2CBE :     
    DSRLNK.ERROR.IO_ERROR >2CC0 :     
    DSRLNK.ERROR.NODSR_FOUND >2CBA :     
    DSRLNK.ERROR.NODSR_FOUND_OFF >2CB8 :     
    DSRLNK.FLGPTR....... >A434 :     
    DSRLNK.INIT......... >2B9E :     
    DSRLNK.NAMSTO....... >A420 :     
    DSRLNK.PERIOD....... >2D0A :     
    DSRLNK.REUSE........ >2CCA :     
    DSRLNK.REUSE.INIT... >2CCE :     
    DSRLNK.SAV8A........ >A428 :     
    DSRLNK.SAVCRU....... >A42A :     
    DSRLNK.SAVENT....... >A42C :     
    DSRLNK.SAVLEN....... >A432 :     
    DSRLNK.SAVPAB....... >A42E :     
    DSRLNK.SAVVER....... >A430 :     
    EDB.AUTOINSERT...... >A50C :     
    EDB.BK.FB.ROW....... >A51E :     
    EDB.BK.FB.TOPLINE... >A51C :     
    EDB.BLOCK.M1........ >A50E :     
    EDB.BLOCK.M2........ >A510 :     
    EDB.BLOCK.VAR....... >A512 :     
    EDB.DIRTY........... >A506 :     
    EDB.FILENAME........ >A524 :     
    EDB.FILENAME.PTR.... >A514 :     
    EDB.FILETYPE.PTR.... >A516 :     
    EDB.FREE............ >A574 :     
    EDB.HIPAGE.ALLOC.... >3736 :     
    EDB.HIPAGE.ALLOC.CHECK_SETPAGE >3742 :     
    EDB.HIPAGE.ALLOC.CRASH >376C :     
    EDB.HIPAGE.ALLOC.EXIT >3774 :     
    EDB.HIPAGE.ALLOC.SETPAGE >375E :     
    EDB.INDEX.PTR....... >A502 :     
    EDB.INIT............ >3238 :     
    EDB.INIT.EXIT....... >327E :     
    EDB.INSMODE......... >A50A :     
    EDB.LINE.GETLENGTH.. >36CE :     
    EDB.LINE.GETLENGTH.EXIT >370A :     
    EDB.LINE.GETLENGTH.NULL >3706 :     
    EDB.LINE.GETLENGTH2. >3712 :     
    EDB.LINE.GETLENGTH2.EXIT >3730 :     
    EDB.LINE.MAPPAGE.... >3684 :     
    EDB.LINE.MAPPAGE.EXIT >36C6 :     
    EDB.LINE.MAPPAGE.LOOKUP >369E :     
    EDB.LINES........... >A504 :     
    EDB.LINETERM........ >A522 :     
    EDB.NEXT_FREE.PTR... >A508 :     
    EDB.SAMS.HIPAGE..... >A51A :     
    EDB.SAMS.PAGE....... >A518 :     
    EDB.SIZE............ >1000 :     
    EDB.SPECIAL.FILE.... >A520 :     
    EDB.STRUCT.......... >A500 :     
    EDB.TOP............. >C000 :     
    EDB.TOP.PTR......... >A500 :     
    ENKNL............... >200E :     
    ENUSR............... >2012 :     
    EOL................. >FFFF :     
    ERRPANE.EXIT........ >3306 :     
    ERRPANE.INIT........ >32E0 :     
    F18CHK.............. >2754 :     
    F18CHK_EXIT......... >2792 :     
    F18CHK_GPU.......... >279E :     
    F18CHK_NO........... >2788 :     
    F18CHK_YES.......... >278E :     
    F18FW1.............. >27D0 :     
    F18FWV.............. >27B6 :     
    F18IDL.............. >274A :     
    F18LCK.............. >2740 :     
    F18RST.............. >27A6 :     
    F18UNL.............. >272A :     
    FB.CALC.POINTER..... >30E0 :     
    FB.CALC.POINTER.EXIT >3100 :     
    FB.CALC.SCRROWS..... >3108 :     
    FB.CALC.SCRROWS.EXIT >3134 :     
    FB.CALC.SCRROWS.HANDLE.ERRORS >3128 :     
    FB.CALC.SCRROWS.HANDLE.MC >311C :     
    FB.CALC.SCRROWS.HANDLE.RULER >3112 :     
    FB.COLORIZE......... >A312 :     
    FB.COLSLINE......... >A30E :     
    FB.COLUMN........... >A30C :     
    FB.CURRENT.......... >A302 :     
    FB.CURTOGGLE........ >A314 :     
    FB.DIRTY............ >A318 :     
    FB.FREE............. >A3C0 :     
    FB.INIT............. >306C :     
    FB.INIT.EXIT........ >30BE :     
    FB.ROW.............. >A306 :     
    FB.ROW.DIRTY........ >A30A :     
    FB.ROW.LENGTH....... >A308 :     
    FB.ROW2LINE......... >30C6 :     
    FB.ROW2LINE.EXIT.... >30DA :     
    FB.RULER.SIT........ >A320 :     
    FB.RULER.TAT........ >A370 :     
    FB.SCRROWS.......... >A31C :     
    FB.SCRROWS.MAX...... >A31E :     
    FB.SIZE............. >0960 :     
    FB.STATUS.DIRTY..... >A31A :     
    FB.STRUCT........... >A300 :     
    FB.TOP.............. >D000 :     
    FB.TOP.PTR.......... >A300 :     
    FB.TOPLINE.......... >A304 :     
    FB.UNCRUNCH.AREA.... >D960 :     
    FB.VWCO............. >A310 :     
    FB.YXSAVE........... >A316 :     
    FG99................ >2DC4 :     
    FG99.CART.FBFORTH... >3E14 :     
    FG99.CART.FCMD...... >3DD8 :     
    FG99.CART.RXB....... >3E00 :     
    FG99.CART.XBGEM..... >3DEC :     
    FG99.EXIT........... >2DFE :     
    FG99.RUN............ >379C :     
    FG99.SEND.LOOP...... >2DD4 :     
    FG99.WAIT........... >2DEC :     
    FH.CALLBACK1........ >A450 :     
    FH.CALLBACK2........ >A452 :     
    FH.CALLBACK3........ >A454 :     
    FH.CALLBACK4........ >A456 :     
    FH.CALLBACK5........ >A458 :     
    FH.COUNTER.......... >A442 :     
    FH.FILETYPE......... >A44C :     
    FH.FNAME.PTR........ >A444 :     
    FH.FOPMODE.......... >A44A :     
    FH.FOPMODE.NONE..... >0000 :     
    FH.FOPMODE.READFILE. >0001 :     
    FH.FOPMODE.WRITEFILE >0002 :     
    FH.FREE............. >A4B8 :     
    FH.FTYPE.INIT....... >A45A :     
    FH.IORESULT......... >A43A :     
    FH.KILOBYTES........ >A440 :     
    FH.KILOBYTES.PREV... >A45C :     
    FH.LINE............. >A45E :     
    FH.MEMBUFFER........ >A468 :     
    FH.OFFSETOPCODE..... >A44E :     
    FH.PAB.PTR.......... >A436 :     
    FH.PABSTAT.......... >A438 :     
    FH.PABTPL.PTR....... >A466 :     
    FH.RAM.PTR.......... >A45C :     
    FH.RECLEN........... >A43E :     
    FH.RECORDS.......... >A43C :     
    FH.SAMS.HIPAGE...... >A448 :     
    FH.SAMS.PAGE........ >A446 :     
    FH.STRUCT........... >A400 :     
    FH.TEMP1............ >A460 :     
    FH.TEMP2............ >A462 :     
    FH.TEMP3............ >A464 :     
    FH.VPAB............. >0A60 :     
    FH.VRECBUF.......... >0960 :     
    FH.WORKMODE......... >A45A :     
    FIL.EXIT............ >228C :     
    FIL16B.............. >2276 :     
    FILCHK.............. >2248 :     
    FILCHK2............. >2258 :     
    FILCHK3............. >2264 :     
    FILE.CLOSE.......... >2D30 :     
    FILE.DELETE......... >2D68 :     
    FILE.IMAGE.LOAD..... >2D64 :     
    FILE.IMAGE.SAVE..... >2D66 :     
    FILE.OPEN........... >2D0C :     
    FILE.RECORD.READ.... >2D3C :     
    FILE.RECORD.SEEK.... >2D62 :     
    FILE.RECORD.WRITE... >2D48 :     
    FILE.RENAME......... >2D6A :     
    FILE.STATUS......... >2D6C :     
    FILM................ >2236 :     
    FILV................ >228E :     
    FILZZ............... >22B4 :     
    FJ.BOTTOM........... >B000 :     
    FNOPT1.............. >0000 :     
    FNOPT2.............. >0006 :     
    FNOPT3.............. >000C :     
    FNOPT4.............. >0012 :     
    FNOPT5.............. >8000 :     
    FNOPT6.............. >8006 :     
    FNOPT7.............. >800C :     
    FNOPT8.............. >8012 :     
    FNTADR.............. >1100 :     
    GRAPH1.............. >21F2 :     
    GRMRA............... >9802 :     
    GRMRD............... >9800 :     
    GRMWA............... >9C02 :     
    GRMWD............... >9C00 :     
    HCHAR............... >27D2 :     
    HCHAR1.............. >27EC :     
    HCHAR2.............. >27F6 :     
    HCHARX.............. >27D8 :     
    HEAP.TOP............ >F000 :     
    HOOKOK.............. >2E08 :     
    ID.DIALOG.APPEND.... >000E :     
    ID.DIALOG.BASIC..... >006B :     
    ID.DIALOG.BLOCK..... >0066 :     
    ID.DIALOG.CARTRIDGE. >006A :     
    ID.DIALOG.CFG....... >006C :     
    ID.DIALOG.CFG.CLIP.. >0011 :     
    ID.DIALOG.CFG.MC.... >0012 :     
    ID.DIALOG.CLIPBOARD. >0067 :     
    ID.DIALOG.EDITOR.... >006D :     
    ID.DIALOG.FILE...... >0069 :     
    ID.DIALOG.FONT...... >006E :     
    ID.DIALOG.GOTO...... >0013 :     
    ID.DIALOG.HELP...... >0068 :     
    ID.DIALOG.INSERT.... >000D :     
    ID.DIALOG.LOAD...... >000A :     
    ID.DIALOG.MENU...... >0064 :     
    ID.DIALOG.PRINT..... >000F :     
    ID.DIALOG.PRINTBLOCK >0010 :     
    ID.DIALOG.SAVE...... >000B :     
    ID.DIALOG.SAVEBLOCK. >000C :     
    ID.DIALOG.SHORTCUTS. >006F :     
    ID.DIALOG.UNSAVED... >0065 :     
    ID.FILE.APPENDFILE.. >0003 :     
    ID.FILE.CLIPBLOCK... >0006 :     
    ID.FILE.INSERTFILE.. >0002 :     
    ID.FILE.LOADFILE.... >0001 :     
    ID.FILE.PRINTBLOCK.. >0008 :     
    ID.FILE.PRINTFILE... >0007 :     
    ID.FILE.SAVEBLOCK... >0005 :     
    ID.FILE.SAVEFILE.... >0004 :     
    ID.SPECIAL.BASIC.... >0003 :     
    ID.SPECIAL.MASTCAT.. >0001 :     
    ID.SPECIAL.NORMAL... >0000 :     
    ID.SPECIAL.READONLY. >0002 :     
    IDX.ENTRY.DELETE.... >358A :     
    IDX.ENTRY.DELETE.EXIT >35E2 :     
    IDX.ENTRY.DELETE.LASTLINE >35B6 :     
    IDX.ENTRY.DELETE.REORG >35BE :     
    IDX.ENTRY.DELETE.REORG.COMPLEX >35C8 :     
    IDX.ENTRY.DELETE.REORG.SIMPLE >35DC :     
    IDX.ENTRY.INSERT.... >362C :     
    IDX.ENTRY.INSERT.EXIT >3678 :     
    IDX.ENTRY.INSERT.REORG >364A :     
    IDX.ENTRY.INSERT.REORG.COMPLEX >3654 :     
    IDX.ENTRY.INSERT.REORG.SIMPLE >3668 :     
    IDX.ENTRY.UPDATE.... >34DC :     
    IDX.ENTRY.UPDATE.CLEAR >3516 :     
    IDX.ENTRY.UPDATE.EXIT >3526 :     
    IDX.ENTRY.UPDATE.SAVE >3504 :     
    IDX.FREE............ >A606 :     
    IDX.INIT............ >3138 :     
    IDX.INIT.EXIT....... >3174 :     
    IDX.POINTER.GET..... >352E :     
    IDX.POINTER.GET.EXIT >3570 :     
    IDX.POINTER.GET.PARM >355E :     
    IDX.POINTER.GET.PARM.NULL >3568 :     
    IDX.SAMS.HIPAGE..... >A604 :     
    IDX.SAMS.LOPAGE..... >A602 :     
    IDX.SAMS.PAGE....... >A600 :     
    IDX.SIZE............ >1000 :     
    IDX.STRUCT.......... >A600 :     
    IDX.TOP............. >B000 :     
    INTOFF.............. >2696 :     
    INTON............... >269E :     
    IO.ERR.BAD_DEVICE_NAME >0000 :     
    IO.ERR.BAD_OPEN_ATTRIBUTE >0002 :     
    IO.ERR.DEVICE_ERROR. >0006 :     
    IO.ERR.DEVICE_WRITE_PROTTECTED >0001 :     
    IO.ERR.EOF.......... >0005 :     
    IO.ERR.FILE_ERROR... >0007 :     
    IO.ERR.ILLEGAL_OPERATION >0003 :     
    IO.ERR.NO_ERROR_OCCURED >0000 :     
    IO.ERR.OUT_OF_TABLE_BUFFER_SPACE >0004 :     
    IO.OP.CLOSE......... >0001 :     
    IO.OP.DELFILE....... >0007 :     
    IO.OP.LOAD.......... >0005 :     
    IO.OP.OPEN.......... >0000 :     
    IO.OP.READ.......... >0002 :     
    IO.OP.REWIND........ >0004 :     
    IO.OP.SAVE.......... >0006 :     
    IO.OP.SCRATCH....... >0008 :     
    IO.OP.STATUS........ >0009 :     
    IO.OP.WRITE......... >0003 :     
    IO.REL.APP.DIS.FIX.. >0007 :     
    IO.REL.APP.DIS.VAR.. >0017 :     
    IO.REL.APP.INT.FIX.. >000F :     
    IO.REL.APP.INT.VAR.. >001F :     
    IO.REL.INP.DIS.FIX.. >0005 :     
    IO.REL.INP.DIS.VAR.. >0015 :     
    IO.REL.INP.INT.FIX.. >000D :     
    IO.REL.INP.INT.VAR.. >001D :     
    IO.REL.OUT.DIS.FIX.. >0003 :     
    IO.REL.OUT.DIS.VAR.. >0013 :     
    IO.REL.OUT.INT.FIX.. >000B :     
    IO.REL.OUT.INT.VAR.. >001B :     
    IO.REL.UPD.DIS.FIX.. >0001 :     
    IO.REL.UPD.DIS.VAR.. >0011 :     
    IO.REL.UPD.INT.FIX.. >0009 :     
    IO.REL.UPD.INT.VAR.. >0019 :     
    IO.SEQ.APP.DIS.FIX.. >0006 :     
    IO.SEQ.APP.DIS.VAR.. >0016 :     
    IO.SEQ.APP.INT.FIX.. >000E :     
    IO.SEQ.APP.INT.VAR.. >001E :     
    IO.SEQ.INP.DIS.FIX.. >0004 :     
    IO.SEQ.INP.DIS.VAR.. >0014 :     
    IO.SEQ.INP.INT.FIX.. >000C :     
    IO.SEQ.INP.INT.VAR.. >001C :     
    IO.SEQ.OUT.DIS.FIX.. >0002 :     
    IO.SEQ.OUT.DIS.VAR.. >0012 :     
    IO.SEQ.OUT.INT.FIX.. >000A :     
    IO.SEQ.OUT.INT.VAR.. >001A :     
    IO.SEQ.UPD.DIS.FIX.. >0000 :     
    IO.SEQ.UPD.DIS.VAR.. >0010 :     
    IO.SEQ.UPD.INT.FIX.. >0008 :     
    IO.SEQ.UPD.INT.VAR.. >0018 :     
    KBF.KBCLEAR......... >0001 :     
    KBFLAGS............. >A026 :     
    KEY.CTRL.0.......... >00B0 :     
    KEY.CTRL.1.......... >00B1 :     
    KEY.CTRL.2.......... >00B2 :     
    KEY.CTRL.3.......... >00B3 :     
    KEY.CTRL.4.......... >00B4 :     
    KEY.CTRL.5.......... >00B5 :     
    KEY.CTRL.6.......... >00B6 :     
    KEY.CTRL.7.......... >00B7 :     
    KEY.CTRL.8.......... >009E :     
    KEY.CTRL.9.......... >009F :     
    KEY.CTRL.A.......... >0081 :     
    KEY.CTRL.B.......... >0082 :     
    KEY.CTRL.C.......... >0083 :     
    KEY.CTRL.COMMA...... >0080 :     
    KEY.CTRL.D.......... >0084 :     
    KEY.CTRL.DOT........ >009B :     
    KEY.CTRL.E.......... >0085 :     
    KEY.CTRL.F.......... >0086 :     
    KEY.CTRL.G.......... >0087 :     
    KEY.CTRL.H.......... >0088 :     
    KEY.CTRL.I.......... >0089 :     
    KEY.CTRL.J.......... >008A :     
    KEY.CTRL.K.......... >008B :     
    KEY.CTRL.L.......... >008C :     
    KEY.CTRL.M.......... >008D :     
    KEY.CTRL.N.......... >008E :     
    KEY.CTRL.O.......... >008F :     
    KEY.CTRL.P.......... >0090 :     
    KEY.CTRL.PLUS....... >009D :     
    KEY.CTRL.Q.......... >0091 :     
    KEY.CTRL.R.......... >0092 :     
    KEY.CTRL.S.......... >0093 :     
    KEY.CTRL.SLASH...... >00BB :     
    KEY.CTRL.SPACE...... >00F0 :     
    KEY.CTRL.T.......... >0094 :     
    KEY.CTRL.U.......... >0095 :     
    KEY.CTRL.V.......... >0096 :     
    KEY.CTRL.W.......... >0097 :     
    KEY.CTRL.X.......... >0098 :     
    KEY.CTRL.Y.......... >0099 :     
    KEY.CTRL.Z.......... >009A :     
    KEY.ENTER........... >000D :     
    KEY.FCTN.0.......... >00BC :     
    KEY.FCTN.1.......... >0003 :     
    KEY.FCTN.2.......... >0004 :     
    KEY.FCTN.3.......... >0007 :     
    KEY.FCTN.4.......... >0002 :     
    KEY.FCTN.5.......... >000E :     
    KEY.FCTN.6.......... >000C :     
    KEY.FCTN.7.......... >0001 :     
    KEY.FCTN.8.......... >0006 :     
    KEY.FCTN.9.......... >000F :     
    KEY.FCTN.A.......... >0000 :     
    KEY.FCTN.B.......... >00BE :     
    KEY.FCTN.C.......... >0000 :     
    KEY.FCTN.COMMA...... >00B8 :     
    KEY.FCTN.D.......... >0009 :     
    KEY.FCTN.DOT........ >00B9 :     
    KEY.FCTN.E.......... >000B :     
    KEY.FCTN.F.......... >0000 :     
    KEY.FCTN.G.......... >0000 :     
    KEY.FCTN.H.......... >00BF :     
    KEY.FCTN.I.......... >0000 :     
    KEY.FCTN.J.......... >00C0 :     
    KEY.FCTN.K.......... >00C1 :     
    KEY.FCTN.L.......... >00C2 :     
    KEY.FCTN.M.......... >00C3 :     
    KEY.FCTN.N.......... >00C4 :     
    KEY.FCTN.O.......... >0000 :     
    KEY.FCTN.P.......... >0000 :     
    KEY.FCTN.PLUS....... >0005 :     
    KEY.FCTN.Q.......... >00C5 :     
    KEY.FCTN.R.......... >0000 :     
    KEY.FCTN.S.......... >0008 :     
    KEY.FCTN.T.......... >0000 :     
    KEY.FCTN.U.......... >0000 :     
    KEY.FCTN.V.......... >007F :     
    KEY.FCTN.W.......... >007E :     
    KEY.FCTN.X.......... >000A :     
    KEY.FCTN.Y.......... >00C6 :     
    KEY.FCTN.Z.......... >0000 :     
    KEY.LC.B............ >00A2 :     
    KEY.LC.E............ >00A5 :     
    KEY.LC.F............ >00A6 :     
    KEY.LC.H............ >00A8 :     
    KEY.LC.N............ >006E :     
    KEY.LC.O............ >006F :     
    KEY.LC.P............ >0070 :     
    KEY.LC.Q............ >0071 :     
    KEY.LC.R............ >0072 :     
    KEY.LC.S............ >0073 :     
    KEY.LC.X............ >0078 :     
    KEY.NUM.0........... >0030 :     
    KEY.NUM.1........... >0031 :     
    KEY.NUM.2........... >0032 :     
    KEY.NUM.3........... >0033 :     
    KEY.NUM.4........... >0034 :     
    KEY.NUM.5........... >0035 :     
    KEY.NUM.6........... >0036 :     
    KEY.NUM.7........... >0037 :     
    KEY.NUM.8........... >0038 :     
    KEY.NUM.9........... >0039 :     
    KEY.SPACE........... >0020 :     
    KEY.UC.A............ >0041 :     
    KEY.UC.B............ >0042 :     
    KEY.UC.C............ >0043 :     
    KEY.UC.D............ >0044 :     
    KEY.UC.E............ >0045 :     
    KEY.UC.F............ >0046 :     
    KEY.UC.G............ >0047 :     
    KEY.UC.H............ >0048 :     
    KEY.UC.I............ >0049 :     
    KEY.UC.J............ >004A :     
    KEY.UC.K............ >004B :     
    KEY.UC.L............ >004C :     
    KEY.UC.M............ >004D :     
    KEY.UC.N............ >004E :     
    KEY.UC.O............ >004F :     
    KEY.UC.P............ >0050 :     
    KEY.UC.Q............ >0051 :     
    KEY.UC.R............ >0052 :     
    KEY.UC.S............ >0053 :     
    KEY.UC.X............ >0058 :     
    KEYCODE1............ >A028 :     
    KEYCODE2............ >A02A :     
    KICKSTART.CODE1..... >6040 :     
    KICKSTART.CODE2..... >6046 :     
    KICKSTART.RESUME.... >6038 :     
    KSCAN............... >000E :     
    KTHREAD............. >2EA2 :     
    KTHREAD_EXIT........ >2EB4 :     
    KTHREAD_KB.......... >2EB0 :     
    LDFNT............... >2360 :     
    LDFNT1.............. >2378 :     
    LDFNT2.............. >23B2 :     
    LDFNT3.............. >23C6 :     
    LDFNT4.............. >23DA :     
    LOADMC.............. >221A :     
    MAGIC.STR.W1........ >A000 :     
    MAGIC.STR.W2........ >A002 :     
    MAGIC.STR.W3........ >A004 :     
    MAIN................ >3E28 :     
    MCCODE.............. >2210 :     
    MCLOOP.............. >8320 :     
    MCSPRD.............. >8322 :     
    MKHEX............... >2918 :     
    MKHEX1.............. >2930 :     
    MKHEX1.DIGIT09...... >2946 :     
    MKHEX1.DIGITAF...... >293C :     
    MKHEX2.............. >294C :     
    MKHEX3.............. >298E :     
    MKHOO1.............. >2EC0 :     
    MKHOOK.............. >2EB8 :     
    MKNUM............... >29A6 :     
    MKNUM1.............. >29B8 :     
    MKNUM2.............. >29D4 :     
    MKNUM3.............. >29D8 :     
    MKNUM4.............. >29E2 :     
    MKNUM5.............. >29EA :     
    MKSLO1.............. >2EE6 :     
    MKSLOT.............. >2ECC :     
    MMPLA1.............. >2884 :     
    MMPLA2.............. >288A :     
    MMPLAY.............. >287C :     
    MUTE................ >27FA :     
    MUTE2............... >27FE :     
    MUTTAB.............. >2814 :     
    NEW.STEVIE.......... >6040 :     
    NOFONT.............. >FFFF :     
    NOREP............... >0000 :     
    NOSPRITE............ >38B0 :     
    NUM1................ >3030 :     
    NUM2................ >3020 :     
    OUTPARM1............ >A018 :     
    OUTPARM2............ >A01A :     
    OUTPARM3............ >A01C :     
    OUTPARM4............ >A01E :     
    OUTPARM5............ >A020 :     
    OUTPARM6............ >A022 :     
    OUTPARM7............ >A024 :     
    PALON............... >201C :     
    PANE.BOTROW......... >001D :     
    PANE.FOCUS.CMDB..... >0001 :     
    PANE.FOCUS.FB....... >0000 :     
    PANE.TOPLINE.ONESHOT.CLEARMSG >377C :     
    PANE.TOPLINE.ONESHOT.CLEARMSG.EXIT >3794 :     
    PARM1............... >A006 :     
    PARM2............... >A008 :     
    PARM3............... >A00A :     
    PARM4............... >A00C :     
    PARM5............... >A00E :     
    PARM6............... >A010 :     
    PARM7............... >A012 :     
    PARM8............... >A014 :     
    PARM9............... >A016 :     
    PCTADR.............. >0FC0 :     
    POPR0............... >2230 :     
    POPR1............... >222E :     
    POPR2............... >222C :     
    POPR3............... >222A :     
    POPRT............... >2232 :     
    PREFIX.............. >299A :     
    PUTAT............... >2442 :     
    PUTHEX.............. >299C :     
    PUTLST.............. >244A :     
    PUTLST.EXIT......... >2480 :     
    PUTLST.LOOP......... >2452 :     
    PUTNUM.............. >2A24 :     
    PUTSTR.............. >241E :     
    PUTV01.............. >2346 :     
    PUTVR............... >2332 :     
    PUTVRX.............. >2334 :     
    R0.................. >0000 :     
    R0HB................ >8300 :     
    R0LB................ >8301 :     
    R1.................. >0001 :     
    R10................. >000A :     
    R10HB............... >8314 :     
    R10LB............... >8315 :     
    R11................. >000B :     
    R11HB............... >8316 :     
    R11LB............... >8317 :     
    R12................. >000C :     
    R12HB............... >8318 :     
    R12LB............... >8319 :     
    R13................. >000D :     
    R13HB............... >831A :     
    R13LB............... >831B :     
    R14................. >000E :     
    R14HB............... >831C :     
    R14LB............... >831D :     
    R15................. >000F :     
    R15HB............... >831E :     
    R15LB............... >831F :     
    R1HB................ >8302 :     
    R1LB................ >8303 :     
    R2.................. >0002 :     
    R2HB................ >8304 :     
    R2LB................ >8305 :     
    R3.................. >0003 :     
    R3HB................ >8306 :     
    R3LB................ >8307 :     
    R4.................. >0004 :     
    R4HB................ >8308 :     
    R4LB................ >8309 :     
    R5.................. >0005 :     
    R5HB................ >830A :     
    R5LB................ >830B :     
    R6.................. >0006 :     
    R6HB................ >830C :     
    R6LB................ >830D :     
    R7.................. >0007 :     
    R7HB................ >830E :     
    R7LB................ >830F :     
    R8.................. >0008 :     
    R8HB................ >8310 :     
    R8LB................ >8311 :     
    R9.................. >0009 :     
    R9HB................ >8312 :     
    R9LB................ >8313 :     
    RAMBUF.............. >A100 :     
    RAMSAT.............. >A056 :     
    RELOC.RESIDENT...... >60C0 :     
    RESUME.STEVIE....... >6038 :     
    RKSCAN.............. >28B6 :     
    RKSCAN.EXIT......... >290C :     
    ROM.FARJUMP......... >2FCA :     
    ROM.FARJUMP.BANKSWITCH.CALL >302C :     
    ROM.FARJUMP.BANKSWITCH.FAILED1 >3024 :     
    ROM.FARJUMP.BANKSWITCH.FAILED2 >305A :     
    ROM.FARJUMP.BANKSWITCH.SRC.ADVFG99 >3050 :     
    ROM.FARJUMP.BANKSWITCH.SRC.ROM8K >304C :     
    ROM.FARJUMP.BANKSWITCH.TARGET.ROM8K >3008 :     
    ROM.FARJUMP.BANKSWITCH.TGT.ADVFG99 >300C :     
    ROM.FARJUMP.BANKSWITCH.TGT.DONE >3014 :     
    ROM.FARJUMP.EXIT.... >3062 :     
    ROM.FARJUMP.RETURN.. >302E :     
    ROM.PROGRAM1........ >600C :     
    ROM.PROGRAM2........ >6024 :     
    ROM0_KSCAN_ON....... >0001 :     
    ROM0_KSCAN_OUT...... >A028 :     
    ROMSAT.............. >38A4 :     
    RSSLOT.............. >2EF8 :     
    RUNLI1.............. >2F10 :     
    RUNLI2.............. >2F1C :     
    RUNLI3.............. >2F20 :     
    RUNLI3A............. >2F28 :     
    RUNLI4.............. >2F32 :     
    RUNLI5.............. >2F3C :     
    RUNLI6.............. >2F4A :     
    RUNLI7.............. >2F58 :     
    RUNLI9.............. >2F5C :     
    RUNLIA.............. >2F7E :     
    RUNLIB.............. >2F0C :     
    RUNLIC.............. >2FA2 :     
    RUNLID.............. >2FB8 :     
    RUNLIE.............. >2FC2 :     
    S16X16.............. >26BE :     
    S8X8................ >26B6 :     
    SAMS.LAYOUT......... >25EE :     
    SAMS.LAYOUT.COPY.... >263E :     
    SAMS.LAYOUT.COPY.DATA >2676 :     
    SAMS.LAYOUT.COPY.EXIT >266A :     
    SAMS.LAYOUT.COPY.LOOP >265C :     
    SAMS.LAYOUT.EXIT.... >2626 :     
    SAMS.LAYOUT.STANDARD >262E :     
    SAMS.MAPPING.OFF.... >25E0 :     
    SAMS.MAPPING.OFF.EXIT >25EA :     
    SAMS.MAPPING.ON..... >25D2 :     
    SAMS.MAPPING.ON.EXIT >25DC :     
    SAMS.PAGE.GET....... >253C :     
    SAMS.PAGE.GET.EXIT.. >256A :     
    SAMS.PAGE.SET....... >2572 :     
    SAMS.PAGE.SET.EXIT.. >25C6 :     
    SAMS.PAGE.SET.SWITCH_PAGE >25B6 :     
    SCROFF.............. >2686 :     
    SCRON............... >268E :     
    SCRPAD.83C6......... >2912 :     
    SCRPAD.83FA......... >2914 :     
    SCRPAD.83FE......... >2916 :     
    SDEXI1.............. >28AE :     
    SDEXI2.............. >28B0 :     
    SDEXIT.............. >289C :     
    SDOPT1.............. >0007 :     
    SDOPT2.............. >0005 :     
    SDOPT3.............. >0006 :     
    SDOPT4.............. >0004 :     
    SDPLA1.............. >2836 :     
    SDPLA2.............. >2840 :     
    SDPLA3.............. >2842 :     
    SDPLAY.............. >282E :     
    SDPREP.............. >2818 :     
    SETX................ >26DC :     
    SKIP_CPU_CRC16...... >0001 :     
    SKIP_CPU_RLE_COMPRESS >0001 :     
    SKIP_CPU_RLE_DECOMPRESS >0001 :     
    SKIP_GROM_CPU_COPY.. >0001 :     
    SKIP_GROM_VRAM_COPY. >0001 :     
    SKIP_RANDOM_GENERATOR >0001 :     
    SKIP_ROM_BANKSWITCH. >0001 :     
    SKIP_SAMS_LAYOUT.... >0001 :     
    SKIP_SPEECH_DETECTION >0001 :     
    SKIP_SPEECH_PLAYER.. >0001 :     
    SKIP_VDP_BITMAP..... >0001 :     
    SKIP_VDP_BOXES...... >0001 :     
    SKIP_VDP_PX2YX_CALC. >0001 :     
    SKIP_VDP_RLE_DECOMPRESS >0001 :     
    SKIP_VDP_VCHAR...... >0001 :     
    SKIP_VDP_VIEWPORT... >0001 :     
    SKIP_VIRTUAL_KEYBOARD >0001 :     
    SLOTOK.............. >2E84 :     
    SMAG1X.............. >26A6 :     
    SMAG2X.............. >26AE :     
    SOUND............... >8400 :     
    SP2.STKTOP.......... >A900 :     
    SPCHRD.............. >9000 :     
    SPCHWT.............. >9400 :     
    SPCODE.............. >2216 :     
    SPFBCK.............. >0004 :     
    SPFCLR.............. >00F4 :     
    SPFONT.............. >0000 :     
    SPKOFF.............. >FF00 :     
    SPKON............... >6000 :     
    SPRITECURSOR........ >0001 :     
    SPRPDT.............. >2800 :     
    SPRSAT.............. >2180 :     
    SPVMOD.............. >7F10 :     
    STACK............... >0009 :     
    STARTUP_KEEP_VDPMEMORY >0001 :     
    STEVIE.80X30........ >7F10 :     
    STEVIE.80X60........ >7F1A :     
    STRING.GETLENC...... >2A9A :     
    STRING.GETLENC.EXIT. >2AE6 :     
    STRING.GETLENC.LOOP. >2AC8 :     
    STRING.GETLENC.PANIC >2ADE :     
    STRING.GETLENC.PUTLENGTH >2AD6 :     
    STRING.LTRIM........ >2A2E :     
    STRING.LTRIM.EXIT... >2A8E :     
    STRING.LTRIM.MOVE... >2A74 :     
    STRING.LTRIM.PANIC.. >2A86 :     
    STRING.LTRIM.SCAN... >2A68 :     
    TALKOF.............. >00FF :     
    TALKON.............. >0060 :     
    TASK.ONESHOT........ >3898 :     
    TASK.ONESHOT.EXIT... >38A0 :     
    TASK.VDP.COPY.SAT... >37C8 :     
    TASK.VDP.COPY.SAT.CMDB >37F0 :     
    TASK.VDP.COPY.SAT.EXIT >385E :     
    TASK.VDP.COPY.SAT.FB >3800 :     
    TASK.VDP.COPY.SAT.FB.NORULER >3814 :     
    TASK.VDP.COPY.SAT.HIDE.INDICATORS >384A :     
    TASK.VDP.COPY.SAT.WRITE >3818 :     
    TASK.VDP.COPY.SAT.WRITE2 >3854 :     
    TASK.VDP.CURSOR..... >386A :     
    TASK.VDP.CURSOR.COPY.SAT >3886 :     
    TASK.VDP.CURSOR.EXIT >3890 :     
    TASK.VDP.CURSOR.VISIBLE >3880 :     
    TIB.AUTOUNPK........ >A0C0 :     
    TIB.LINES........... >A0D2 :     
    TIB.LNT.BOT.PTR..... >A0C8 :     
    TIB.LNT.TOP.PTR..... >A0C6 :     
    TIB.SAMSTAB.PTR..... >A0EA :     
    TIB.SCRPAD.PTR...... >A0C4 :     
    TIB.SESSION......... >A0B4 :     
    TIB.STAB.PTR........ >A0C2 :     
    TIB.STATUS1......... >A0B6 :     
    TIB.STATUS2......... >A0B8 :     
    TIB.STATUS3......... >A0BA :     
    TIB.STATUS4......... >A0BC :     
    TIB.STATUS5......... >A0BE :     
    TIB.STRS.BOT.PTR.... >A0D0 :     
    TIB.STRS.TOP.PTR.... >A0CE :     
    TIB.SYMT.BOT.PTR.... >A0CC :     
    TIB.SYMT.TOP.PTR.... >A0CA :     
    TIB.VAR1............ >A0EC :     
    TIB.VAR10........... >A0FE :     
    TIB.VAR2............ >A0EE :     
    TIB.VAR3............ >A0F0 :     
    TIB.VAR4............ >A0F2 :     
    TIB.VAR5............ >A0F4 :     
    TIB.VAR6............ >A0F6 :     
    TIB.VAR7............ >A0F8 :     
    TIB.VAR8............ >A0FA :     
    TIB.VAR9............ >A0FC :     
    TIBASIC.32X24....... >7F24 :     
    TIBASIC.32X30....... >7F2E :     
    TIMERS.............. >A064 :     
    TMDAT............... >2EA0 :     
    TMGR................ >2E04 :     
    TMGR1............... >2E08 :     
    TMGR10.............. >2E88 :     
    TMGR11.............. >2E96 :     
    TMGR12.............. >2E9A :     
    TMGR1A.............. >2E16 :     
    TMGR2............... >2E1C :     
    TMGR3............... >2E2C :     
    TMGR4............... >2E3E :     
    TMGR5............... >2E54 :     
    TMGR6............... >2E58 :     
    TMGR7............... >2E5C :     
    TMGR8............... >2E5E :     
    TMGR9............... >2E66 :     
    TMP0................ >0004 :     
    TMP006.............. >23E2 :     
    TMP007.............. >24D8 :     
    TMP008.............. >24B6 :     
    TMP011.............. >253A :     
    TMP0HB.............. >8308 :     
    TMP0LB.............. >8309 :     
    TMP1................ >0005 :     
    TMP1HB.............. >830A :     
    TMP1LB.............. >830B :     
    TMP2................ >0006 :     
    TMP2HB.............. >830C :     
    TMP2LB.............. >830D :     
    TMP3................ >0007 :     
    TMP3HB.............. >830E :     
    TMP3LB.............. >830F :     
    TMP4................ >0008 :     
    TMP4HB.............. >8310 :     
    TMP4LB.............. >8311 :     
    TRIMNUM............. >29FE :     
    TRIMNUM_FILL........ >2A1C :     
    TRIMNUM_SCAN........ >2A0A :     
    TRIMNUM_SETLEN...... >2A16 :     
    TRMPVECTOR.......... >A034 :     
    TV.1TIMEONLY........ >00FE :     
    TV.BUSYCOLOR........ >A21C :     
    TV.CLIP.FNAME....... >DE50 :     
    TV.CMDB.HCOLOR...... >A220 :     
    TV.COLOR............ >A218 :     
    TV.COLORIZE.RESET... >9900 :     
    TV.COLORSCHEME...... >A212 :     
    TV.COLORSCHEME.ENTRIES >000C :     
    TV.COLORSCHEME.TABLE >38B2 :     
    TV.CURCOLOR......... >A216 :     
    TV.CURSHAPE......... >A214 :     
    TV.ERROR.MSG........ >A238 :     
    TV.ERROR.ROWS....... >A22C :     
    TV.ERROR.VISIBLE.... >A22A :     
    TV.FG99.IMG.PTR..... >A232 :     
    TV.FJ.STACKPNT...... >A228 :     
    TV.FONT.PTR......... >A222 :     
    TV.FREE............. >A2D8 :     
    TV.INIT............. >3310 :     
    TV.INIT.EXIT........ >335E :     
    TV.LINETERM......... >A236 :     
    TV.MARKCOLOR........ >A21A :     
    TV.MC.FNAME......... >DEA0 :     
    TV.PAD.STRING....... >3464 :     
    TV.PAD.STRING.EXIT.. >34D0 :     
    TV.PAD.STRING.LOOP.. >34BA :     
    TV.PAD.STRING.PANIC. >34C8 :     
    TV.PANE.FOCUS....... >A224 :     
    TV.PRINTER.FNAME.... >DE00 :     
    TV.QUIT............. >3368 :     
    TV.RESET............ >3376 :     
    TV.RESET.EXIT....... >339C :     
    TV.RULER.VISIBLE.... >A210 :     
    TV.RULERCOLOR....... >A21E :     
    TV.SAMS.2000........ >A200 :     
    TV.SAMS.3000........ >A202 :     
    TV.SAMS.A000........ >A204 :     
    TV.SAMS.B000........ >A206 :     
    TV.SAMS.C000........ >A208 :     
    TV.SAMS.D000........ >A20A :     
    TV.SAMS.E000........ >A20C :     
    TV.SAMS.F000........ >A20E :     
    TV.SP2.CONF......... >A22E :     
    TV.SP2.STACK........ >A230 :     
    TV.SPECMSG.PTR...... >A234 :     
    TV.STRUCT........... >A200 :     
    TV.TABS.TABLE.LR.... >3912 :     
    TV.TABS.TABLE.RL.... >391E :     
    TV.TASK.ONESHOT..... >A226 :     
    TV.UINT16.MPY....... >342E :     
    TV.UINT16.PACK...... >33A0 :     
    TV.UINT16.PACK.DONE. >341A :     
    TV.UINT16.PACK.ERROR >3412 :     
    TV.UINT16.PACK.EXIT. >341E :     
    TV.UINT16.PACK.LOOP. >33E8 :     
    TV.UINT16.UNPACK.... >3438 :     
    TV.UINT16.UNPACK.EXIT >345E :     
    TX4024.............. >21FC :     
    TX8024.............. >2206 :     
    TXT.ALPHA.DOWN...... >3C1E :     
    TXT.AUTOINS.OFF..... >3ACE :     
    TXT.AUTOINS.ON...... >3ABE :     
    TXT.AUTOINSERT...... >394E :     
    TXT.BLOCK.CLIP...... >39D4 :     
    TXT.BLOCK.COPY...... >3996 :     
    TXT.BLOCK.DEL....... >3982 :     
    TXT.BLOCK.INSIDE.... >3D1E :     
    TXT.BLOCK.MOVE...... >39A8 :     
    TXT.BLOCK.PRINT..... >39EE :     
    TXT.BLOCK.SAVE...... >39BA :     
    TXT.BOTTOM.......... >393C :     
    TXT.CLEARMEM........ >3A02 :     
    TXT.CMDB.PROMPT..... >3D4C :     
    TXT.COLORSCHEME..... >3D4E :     
    TXT.DELIM........... >393A :     
    TXT.DONE.APPEND..... >3A38 :     
    TXT.DONE.CLIPBOARD.. >3A8C :     
    TXT.DONE.CLIPDEV.... >3A9C :     
    TXT.DONE.COPY....... >3A5A :     
    TXT.DONE.DELETE..... >3A7A :     
    TXT.DONE.INSERT..... >3A26 :     
    TXT.DONE.LOAD....... >3A16 :     
    TXT.DONE.MC......... >3AAA :     
    TXT.DONE.PRINT...... >3A6A :     
    TXT.DONE.SAVE....... >3A4A :     
    TXT.FASTMODE........ >3ADE :     
    TXT.FILETYPE.DV80... >3B62 :     
    TXT.FILETYPE.NONE... >3C30 :     
    TXT.INSERT.......... >3948 :     
    TXT.IO.NOFILE....... >3CD8 :     
    TXT.IOERR.LOAD...... >3C90 :     
    TXT.IOERR.PRINT..... >3CBC :     
    TXT.IOERR.SAVE...... >3CA6 :     
    TXT.KB.............. >3B06 :     
    TXT.KEYMARKER....... >3C24 :     
    TXT.KEYS.BASIC1..... >3BF0 :     
    TXT.KEYS.BLOCK...... >3BBA :     
    TXT.KEYS.DEFAULT.... >3B70 :     
    TXT.KEYS.DEFAULTB... >3B90 :     
    TXT.LINES........... >3B0A :     
    TXT.LOADING......... >3956 :     
    TXT.M1.............. >3B68 :     
    TXT.M2.............. >3B6C :     
    TXT.MEMFULL.LOAD.... >3CF0 :     
    TXT.MSG.MASTCAT..... >3C3C :     
    TXT.MSG.TIBASIC..... >3C72 :     
    TXT.NEWFILE......... >3B10 :     
    TXT.OVRWRITE........ >3942 :     
    TXT.PRINTING........ >396E :     
    TXT.SAVING.......... >3962 :     
    TXT.STAR............ >3954 :     
    TXT.TIB1............ >3B1C :     
    TXT.TIB2............ >3B2A :     
    TXT.TIB3............ >3B38 :     
    TXT.TIB4............ >3B46 :     
    TXT.TIB5............ >3B54 :     
    TXT.UNCRUNCHING..... >3AEA :     
    TXT.VERTLINE........ >3C22 :     
    TXT.WS1............. >3C26 :     
    TXT.WS2............. >3C28 :     
    TXT.WS3............. >3C2C :     
    TXT.WS4............. >3C30 :     
    TXT.WS5............. >3C36 :     
    UINT16.PACKED....... >A032 :     
    UINT16.UNPACKED..... >A02C :     
    UP.................. >26D4 :     
    VDP.FB.TOPROW.SIT... >0050 :     
    VDP.FB.TOPROW.TAT... >1850 :     
    VDP.PDT.BASE........ >1000 :     
    VDP.SIT.BASE........ >0000 :     
    VDP.SIT.SIZE........ >0960 :     
    VDP.TAT.BASE........ >1800 :     
    VDP.TAT.SIZE........ >0960 :     
    VDPA................ >8C02 :     
    VDPLA1.............. >2860 :     
    VDPLA2.............. >2866 :     
    VDPLA3.............. >2876 :     
    VDPLAY.............. >2848 :     
    VDPR................ >8800 :     
    VDPR0............... >831C :     
    VDPR01.............. >000E :     
    VDPR1............... >831D :     
    VDPRW............... >000F :     
    VDPS................ >8802 :     
    VDPW................ >8C00 :     
    VDRA................ >22BA :     
    VDWA................ >22B6 :     
    VGETB............... >22E2 :     
    VIDTA1.............. >2314 :     
    VIDTAB.............. >22F8 :     
    VPUTB............... >22C8 :     
    WAUX1............... >833C :     
    WAUX2............... >833E :     
    WAUX3............... >8340 :     
    WBASE............... >8328 :     
    WBIT0............... >2020 :     
    WBIT1............... >201E :     
    WBIT10.............. >200C :     
    WBIT11.............. >200A :     
    WBIT12.............. >2008 :     
    WBIT13.............. >2006 :     
    WBIT14.............. >2004 :     
    WBIT15.............. >2002 :     
    WBIT2............... >201C :     
    WBIT3............... >201A :     
    WBIT4............... >2018 :     
    WBIT5............... >2016 :     
    WBIT6............... >2014 :     
    WBIT7............... >2012 :     
    WBIT8............... >2010 :     
    WBIT9............... >200E :     
    WCOLMN.............. >833A :     
    WS1................. >8300 :     
    WSDLST.............. >8334 :     
    WSDTMP.............. >8336 :     
    WSPEAK.............. >8338 :     
    WTITAB.............. >832C :     
    WTITMP.............. >8330 :     
    WTIUSR.............. >832E :     
    WVRTKB.............. >8332 :     
    WYX................. >832A :     
    XCONFIG............. >0003 :     
    XCPU.SCRPAD.PGIN.... >2B78 :     
    XCPU.SCRPAD.PGOUT... >2B4A :     
    XFG99............... >2DC6 :     
    XFILE.CLOSE......... >2D32 :     
    XFILE.OPEN.......... >2D10 :     
    XFILM............... >223C :     
    XFILV............... >2294 :     
    XIDTAB.............. >22FA :     
    XLSLOT.............. >2EEC :     
    XPYM2M.............. >24E0 :     
    XPYM2V.............. >248C :     
    XPYV2M.............. >24BE :     
    XROM.FARJUMP........ >2FE2 :     
    XROM.FARJUMP.PUSH_RETURN >2FF2 :     
    XSAMS.LAYOUT........ >25F0 :     
    XSAMS.PAGE.GET...... >253E :     
    XSAMS.PAGE.SET...... >2576 :     
    XSETX............... >26DE :     
    XSTRING.GETLENC..... >2AB4 :     
    XSTRING.LTRIM....... >2A4A :     
    XUTST0.............. >2420 :     
    XUTSTR.............. >2422 :     
    XVGETB.............. >22E4 :     
    XVPUTB.............. >22CC :     
    YX2PI1.............. >2716 :     
    YX2PI2.............. >271C :     
    YX2PI3.............. >2726 :     
    YX2PNT.............. >23FA :     
    YX2PX............... >26E8 :     
    YX2PXX.............. >26EC :     
    YX2PXX_C80.......... >2728 :     
    YX2PXX_NORMAL....... >270C :     
    YX2PXX_Y_CALC....... >2710 :     
    _FILE.RECORD.FOP.... >2D6E :     
    _FILE.RECORD.FOP.EXIT >2DC0 :     
    _FILE.RECORD.FOP.OPTIMIZED >2DA4 :     
    _FILE.RECORD.FOP.PAB >2DA8 :     
    _IDX.ENTRY.DELETE.REORG >357A :     
    _IDX.ENTRY.DELETE.REORG.LOOP >3582 :     
    _IDX.ENTRY.INSERT.REORG >35EE :     
    _IDX.ENTRY.INSERT.REORG.CRASH >35F4 :     
    _IDX.ENTRY.INSERT.REORG.LOOP >361C :     
    _IDX.SAMS.MAPCOLUMN.OFF >31AE :     
    _IDX.SAMS.MAPCOLUMN.OFF.EXIT >31DC :     
    _IDX.SAMS.MAPCOLUMN.ON >317A :     
    _IDX.SAMS.MAPCOLUMN.ON.EXIT >31A4 :     
    _IDX.SAMSPAGE.GET... >31E8 :     
    _IDX.SAMSPAGE.GET.EXIT >322E :     
