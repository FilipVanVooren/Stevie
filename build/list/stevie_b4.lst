XAS99 CROSS-ASSEMBLER   VERSION 3.4.0
     **** ****     > stevie_b4.asm
0001               ********************************************************************************
0002               *   Stevie
0003               *   Modern Programming Editor for the Texas Instruments TI-99/4a Home Computer.
0004               *   Copyright (C) 2018-2023 / Filip van Vooren
0005               *
0006               *   This program is free software: you can redistribute it and/or modify
0007               *   it under the terms of the GNU General Public License as published by
0008               *   the Free Software Foundation, either version 3 of the License, or
0009               *   (at your option) any later version.
0010               *
0011               *   This program is distributed in the hope that it will be useful,
0012               *   but WITHOUT ANY WARRANTY; without even the implied warranty of
0013               *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
0014               *   GNU General Public License for more details.
0015               *
0016               *   You should have received a copy of the GNU General Public License
0017               *   along with this program.  If not, see <https://www.gnu.org/licenses/>.
0018               ********************************************************************************
0019               * File: stevie_b4.asm
0020               *
0021               * Bank 4 "Janine"
0022               * Delegated Frame Buffer methods & Pane utilities
0023               ********************************************************************************
0024                       copy  "buildinfo.asm"       ; "build/.buildinfo/buildinfo.asm"
     **** ****     > buildinfo.asm
0001               ***************************************************************
0002               * BUILD: 230730-1949310
0003               ***************************************************************
                   < stevie_b4.asm
0025                       copy  "equ.rom.build.asm"   ; Cartridge build options
     **** ****     > equ.rom.build.asm
0001               * FILE......: equ.rom.build.asm
0002               * Purpose...: Cartridge build options
0003               
0004               *--------------------------------------------------------------
0005               * Skip unused spectra2 code modules for reduced code size
0006               *--------------------------------------------------------------
0007      0001     skip_rom_bankswitch       equ  1       ; Skip support for ROM bankswitching
0008      0001     skip_grom_cpu_copy        equ  1       ; Skip GROM to CPU copy functions
0009      0001     skip_grom_vram_copy       equ  1       ; Skip GROM to VDP vram copy functions
0010      0001     skip_vdp_vchar            equ  1       ; Skip vchar, xvchar
0011      0001     skip_vdp_boxes            equ  1       ; Skip filbox, putbox
0012      0001     skip_vdp_bitmap           equ  1       ; Skip bitmap functions
0013      0001     skip_vdp_viewport         equ  1       ; Skip viewport functions
0014      0001     skip_cpu_rle_compress     equ  1       ; Skip CPU RLE compression
0015      0001     skip_cpu_rle_decompress   equ  1       ; Skip CPU RLE decompression
0016      0001     skip_vdp_rle_decompress   equ  1       ; Skip VDP RLE decompression
0017      0001     skip_vdp_px2yx_calc       equ  1       ; Skip pixel to YX calculation
0018      0001     skip_speech_detection     equ  1       ; Skip speech synthesizer detection
0019      0001     skip_speech_player        equ  1       ; Skip inclusion of speech player code
0020      0001     skip_virtual_keyboard     equ  1       ; Skip virtual keyboard scan
0021      0001     skip_random_generator     equ  1       ; Skip random functions
0022      0001     skip_cpu_crc16            equ  1       ; Skip CPU memory CRC-16 calculation
0023               *--------------------------------------------------------------
0024               * Skip (manually included) spectra2 modules from resident RAM
0025               *--------------------------------------------------------------
0026      0001     skip_sams_layout          equ  1       ; Skip SAMS memory layout routine
0027      0001     skip_sams_size            equ  1       ; Skip SAMS card size check
0028               
0029               *--------------------------------------------------------------
0030               * SPECTRA2 / Stevie startup options
0031               *--------------------------------------------------------------
0032      0001     startup_keep_vdpmemory    equ  1       ; Do not clear VDP vram on start
0033      6038     kickstart.resume          equ  >6038   ; Resume Stevie session
0034      6040     kickstart.code1           equ  >6040   ; Uniform aorg entry addr accross banks
0035      6046     kickstart.code2           equ  >6046   ; Uniform aorg entry addr accross banks
0036      0001     rom0_kscan_on             equ  1       ; Use KSCAN in console ROM#0
0037      0000     debug                     equ  0       ; Turn on debugging mode
0038               
0039               
0040               *--------------------------------------------------------------
0041               * ROM layout
0042               *--------------------------------------------------------------
0043      7F00     bankx.crash.showbank      equ  >7f00   ; Show ROM bank in CPU crash screen
0044      7F10     bankx.vdptab              equ  >7f10   ; VDP mode tables
0045      7F40     bankx.vectab              equ  >7f40   ; Vector table
0046      0000     device.fg99.mode.adv      equ  0       ; FG99 advanced mode off
                   < stevie_b4.asm
0026                       copy  "rom.order.asm"       ; ROM bank order "non-inverted"
     **** ****     > rom.order.asm
0001               * FILE......: rom.order.asm
0002               * Purpose...: Equates with CPU write addresses for switching banks
0003               
0004               *--------------------------------------------------------------
0005               * ROM 8K/4K banks. Bank order (non-inverted)
0006               *--------------------------------------------------------------
0007      6000     bank0.rom                 equ  >6000   ; Jill
0008      6002     bank1.rom                 equ  >6002   ; James
0009      6004     bank2.rom                 equ  >6004   ; Jacky
0010      6006     bank3.rom                 equ  >6006   ; John
0011      6008     bank4.rom                 equ  >6008   ; Janine
0012      600A     bank5.rom                 equ  >600a   ; Jumbo
0013      600C     bank6.rom                 equ  >600c   ; Jenifer
0014      600E     bank7.rom                 equ  >600e   ; Jonas
0015               *--------------------------------------------------------------
0016               * RAM 4K banks (Only valid in advanced mode FG99)
0017               *--------------------------------------------------------------
0018      6800     bank0.ram                 equ  >6800   ; Jill
0019      6802     bank1.ram                 equ  >6802   ; James
0020      6804     bank2.ram                 equ  >6804   ; Jacky
0021      6806     bank3.ram                 equ  >6806   ; John
0022      6808     bank4.ram                 equ  >6808   ; Janine
0023      680A     bank5.ram                 equ  >680a   ; Jumbo
0024      680C     bank6.ram                 equ  >680c   ; Jenifer
0025      680E     bank7.ram                 equ  >680e   ; Jonas
                   < stevie_b4.asm
0027                       copy  "equ.vdp.asm"         ; VDP configuration (F18a/9938/...)
     **** ****     > equ.vdp.asm
0001               * FILE......: equ.vdp.asm
0002               * Purpose...: VDP configuration (F18a, 9938, ...)
0003               
0004               ***************************** F18a 24x80 ***************************************
0008               
0009               ***************************** F18a 24x80 ***************************************
0013               
0014               ***************************** F18a 30x80 ***************************************
0016                   copy 'equ.f18a.3080.asm'        ; Sprite cursor/rulers
     **** ****     > equ.f18a.3080.asm
0001               * FILE......: equ.f18a.3080.asm
0002               * Purpose...: F18a 30x80 mode (with sprite cursor/rulers)
0003               
0005               
0006               *===============================================================================
0007               * VDP RAM F18a (0000-47ff)
0008               *
0009               *     Mem range   Bytes    Hex    Purpose
0010               *     =========   =====   =====   =================================
0011               *     0000-095f    2400   >0960   PNT: Pattern Name Table
0012               *     0960-09af      80   >0050   FIO: File record buffer (DIS/VAR 80)
0013               *     0fc0-0fff                   PCT: Color Table (not used in 80 cols mode)
0014               *     1000-17ff    2048   >0800   PDT: Pattern Descriptor Table
0015               *     1800-215f    2400   >0960   TAT: Tile Attribute Table
0016               *                                      (Position based colors F18a, 80 colums)
0017               *     2180                        SAT: Sprite Attribute Table
0018               *                                      (Cursor in F18a, 80 cols mode)
0019               *     2800                        SPT: Sprite Pattern Table
0020               *                                      (Cursor in F18a, 80 columns, 2K boundary)
0021               *===============================================================================
0022               
0023               *--------------------------------------------------------------
0024               * Video mode configuration (stevie) - Graphics mode 30x80
0025               *--------------------------------------------------------------
0026      0050     vdp.fb.toprow.sit         equ  >0050   ; VDP SIT address of 1st Framebuffer row
0027      1850     vdp.fb.toprow.tat         equ  >1850   ; VDP TAT address of 1st Framebuffer row
0028      0000     vdp.sit.base              equ  >0000   ; VDP SIT base address
0029      0960     vdp.sit.size              equ  30*80   ; VDP SIT size 80 columns, 30 rows
0030      1800     vdp.tat.base              equ  >1800   ; VDP TAT base address
0031      0960     vdp.tat.size              equ  30*80   ; VDP TAT size 80 columns, 60 rows
0032      1000     vdp.pdt.base              equ  >1000   ; VDP PDT base address
0033               
0034               *--------------------------------------------------------------
0035               * Video mode configuration (stevie)
0036               *--------------------------------------------------------------
0037      001D     pane.botrow               equ  29      ; Bottom row on screen
0038      0050     colrow                    equ  80      ; Columns per row
0039      0960     fh.vrecbuf                equ  >0960   ; VDP address record buffer
0040      0A60     fh.vpab                   equ  >0a60   ; VDP address PAB
0041      0001     device.f18a               equ  1       ; F18a on
0042      0001     spritecursor              equ  1       ; Use sprites for cursor and ruler
0043               
0044               
0045               *--------------------------------------------------------------
0046               * Video mode configuration (spectra2)
0047               *--------------------------------------------------------------
0048      00F4     spfclr  equ   >f4                   ; Foreground/Background color for font.
0049      0004     spfbck  equ   >04                   ; Screen background color.
0050      7F10     spvmod  equ   bankx.vdptab          ; Video mode.   See VIDTAB for details.
0051      0000     spfont  equ   0                     ; Font to load. See LDFONT for details.
0052               
0053      0FC0     pctadr  equ   >0fc0                 ; VDP color table base
0054      1100     fntadr  equ   >1100                 ; VDP font start address (in PDT range)
0055      2180     sprsat  equ   >2180                 ; VDP sprite attribute table
0056      2800     sprpdt  equ   >2800                 ; VDP sprite pattern table
0057               
                   < equ.vdp.asm
0018               
0019               ***************************** F18a 30x80 ***************************************
                   < stevie_b4.asm
0028                       copy  "equ.asm"             ; Stevie main configuration
     **** ****     > equ.asm
0001               * FILE......: equ.asm
0002               * Purpose...: The main equates file for Stevie editor
0003               
0004               
0005               *===============================================================================
0006               * Memory map
0007               * ==========
0008               *
0009               * CARTRIDGE SPACE (6000-7fff)
0010               *
0011               *     Mem range   Bytes    BANK   Purpose
0012               *     =========   =====    ====   ==================================
0013               *     6000-603f      64       0   Cartridge header
0014               *     6040-7fff    8128       0   SP2 library + Stevie library
0015               *                                 relocated to RAM space
0016               *     ..............................................................
0017               *     6000-603f      64     1-7   Cartridge header
0018               *     6040-7fef    7744     1-7   Stevie program code
0019               *     7f00-7fff     384     1-7   Vector table (32 vectors)
0020               *===============================================================================
0021               
0022               
0023               ;-----------------------------------------------------------------
0024               ; Stevie Dialog / Pane specific equates
0025               ;-----------------------------------------------------------------
0026      0000     pane.focus.fb             equ  0       ; Editor pane has focus
0027      0001     pane.focus.cmdb           equ  1       ; Command buffer pane has focus
0028               ;-----------------------------------------------------------------
0029               ;   Dialog ID's
0030               ;-----------------------------------------------------------------
0031      000A     id.dialog.load            equ  10      ; "Load file"
0032      000B     id.dialog.save            equ  11      ; "Save file"
0033      000C     id.dialog.saveblock       equ  12      ; "Save block to file"
0034      000D     id.dialog.insert          equ  13      ; "Insert file"
0035      000E     id.dialog.append          equ  14      ; "Append file"
0036      000F     id.dialog.print           equ  15      ; "Print file"
0037      0010     id.dialog.printblock      equ  16      ; "Print block"
0038      0011     id.dialog.cfg.clip        equ  17      ; "Configure clipboard"
0039      0012     id.dialog.cfg.mc          equ  18      ; "Configure Master Catalog"
0040      0013     id.dialog.goto            equ  19      ; "Goto"
0041               ;-----------------------------------------------------------------
0042               ;   Dialog ID's >= 100 indicate that command prompt should be
0043               ;   hidden and no characters added to CMDB keyboard buffer.
0044               ;-----------------------------------------------------------------
0045      0064     id.dialog.menu            equ  100     ; "Main Menu"
0046      0065     id.dialog.unsaved         equ  101     ; "Unsaved changes"
0047      0066     id.dialog.block           equ  102     ; "Block move/copy/delete/print/..."
0048      0067     id.dialog.clipboard       equ  103     ; "Copy clipboard to line ..."
0049      0068     id.dialog.help            equ  104     ; "About"
0050      0069     id.dialog.file            equ  105     ; "File"
0051      006A     id.dialog.cartridge       equ  106     ; "Cartridge"
0052      006B     id.dialog.basic           equ  107     ; "TI Basic"
0053      006C     id.dialog.cfg             equ  108     ; "Configure"
0054      006D     id.dialog.editor          equ  109     ; "Configure editor"
0055      006E     id.dialog.font            equ  110     ; "Configure font"
0056      006F     id.dialog.shortcuts       equ  111     ; "Shortcuts"
0057               ;-----------------------------------------------------------------
0058               ; Suffix characters for clipboards
0059               ;-----------------------------------------------------------------
0060      3100     clip1                     equ  >3100   ; '1'
0061      3200     clip2                     equ  >3200   ; '2'
0062      3300     clip3                     equ  >3300   ; '3'
0063      3400     clip4                     equ  >3400   ; '4'
0064      3500     clip5                     equ  >3500   ; '5'
0065               ;-----------------------------------------------------------------
0066               ; Keyboard flags in Stevie
0067               ;-----------------------------------------------------------------
0068      0001     kbf.kbclear               equ  >0001   ;  Keyboard buffer cleared / @w$0001
0069               ;-----------------------------------------------------------------
0070               ; File work mode
0071               ;-----------------------------------------------------------------
0072      0001     id.file.loadfile          equ  1       ; Load file
0073      0002     id.file.insertfile        equ  2       ; Insert file
0074      0003     id.file.appendfile        equ  3       ; Append file
0075      0004     id.file.savefile          equ  4       ; Save file
0076      0005     id.file.saveblock         equ  5       ; Save block to file
0077      0006     id.file.clipblock         equ  6       ; Save block to clipboard
0078      0007     id.file.printfile         equ  7       ; Print file
0079      0008     id.file.printblock        equ  8       ; Print block
0080               ;-----------------------------------------------------------------
0081               ; Special file indicator
0082               ;-----------------------------------------------------------------
0083      0000     id.special.normal         equ  0       ; Normal file
0084      0001     id.special.mastcat        equ  1       ; Master catalog
0085      0002     id.special.readonly       equ  2       ; Read-only file
0086      0003     id.special.basic          equ  3       ; TI Basic program
0087               ;-----------------------------------------------------------------
0088               ; Stevie core 1 RAM                    @>a000-a0ff   (256 bytes)
0089               ;-----------------------------------------------------------------
0090      A000     core1.top         equ  >a000           ; Structure begin
0091      A000     magic.str.w1      equ  core1.top + 0   ; Magic string word 1
0092      A002     magic.str.w2      equ  core1.top + 2   ; Magic string word 2
0093      A004     magic.str.w3      equ  core1.top + 4   ; Magic string word 3
0094      A006     parm1             equ  core1.top + 6   ; Function parameter 1
0095      A008     parm2             equ  core1.top + 8   ; Function parameter 2
0096      A00A     parm3             equ  core1.top + 10  ; Function parameter 3
0097      A00C     parm4             equ  core1.top + 12  ; Function parameter 4
0098      A00E     parm5             equ  core1.top + 14  ; Function parameter 5
0099      A010     parm6             equ  core1.top + 16  ; Function parameter 6
0100      A012     parm7             equ  core1.top + 18  ; Function parameter 7
0101      A014     parm8             equ  core1.top + 20  ; Function parameter 8
0102      A016     parm9             equ  core1.top + 22  ; Function parameter 9
0103      A018     outparm1          equ  core1.top + 24  ; Function output parameter 1
0104      A01A     outparm2          equ  core1.top + 26  ; Function output parameter 2
0105      A01C     outparm3          equ  core1.top + 28  ; Function output parameter 3
0106      A01E     outparm4          equ  core1.top + 30  ; Function output parameter 4
0107      A020     outparm5          equ  core1.top + 32  ; Function output parameter 5
0108      A022     outparm6          equ  core1.top + 34  ; Function output parameter 6
0109      A024     outparm7          equ  core1.top + 36  ; Function output parameter 7
0110      A026     kbflags           equ  core1.top + 38  ; Keyboard control flags
0111      A028     keycode1          equ  core1.top + 40  ; Current key scanned
0112      A02A     keycode2          equ  core1.top + 42  ; Previous key scanned
0113      A02C     uint16.unpacked   equ  core1.top + 44  ; Unpacked uint16 (len-prefixed string)
0114      A032     uint16.packed     equ  core1.top + 50  ; Packed uint16 (2 bytes)
0115      A034     trmpvector        equ  core1.top + 52  ; Vector trampoline (if p1|tmp1 = >ffff)
0116      A036     core1.free1       equ  core1.top + 54  ; 54-85 **free**
0117      A056     ramsat            equ  core1.top + 86  ; Sprite Attr. Table in RAM (14 bytes)
0118      A064     timers            equ  core1.top + 100 ; Timers (80 bytes)
0119                                 ;--------------------------------------------
0120                                 ; TI Basic related
0121                                 ;--------------------------------------------
0122      A0B4     tib.session       equ  core1.top + 180 ; Current TI-Basic session (1-5)
0123      A0B6     tib.status1       equ  core1.top + 182 ; Status flags TI Basic session 1
0124      A0B8     tib.status2       equ  core1.top + 184 ; Status flags TI Basic session 2
0125      A0BA     tib.status3       equ  core1.top + 186 ; Status flags TI Basic session 3
0126      A0BC     tib.status4       equ  core1.top + 188 ; Status flags TI Basic session 4
0127      A0BE     tib.status5       equ  core1.top + 190 ; Status flags TI Basic session 5
0128      A0C0     tib.autounpk      equ  core1.top + 192 ; TI-Basic AutoUnpack (uncrunch)
0129      A0C2     tib.stab.ptr      equ  core1.top + 194 ; Pointer to TI-Basic SAMS page table
0130      A0C4     tib.scrpad.ptr    equ  core1.top + 196 ; Pointer to TI-Basic scratchpad in SAMS
0131      A0C6     tib.lnt.top.ptr   equ  core1.top + 198 ; Pointer to top of line number table
0132      A0C8     tib.lnt.bot.ptr   equ  core1.top + 200 ; Pointer to bottom of line number table
0133      A0CA     tib.symt.top.ptr  equ  core1.top + 202 ; Pointer to top of symbol table
0134      A0CC     tib.symt.bot.ptr  equ  core1.top + 204 ; Pointer to bottom of symbol table
0135      A0CE     tib.strs.top.ptr  equ  core1.top + 206 ; Pointer to top of string space
0136      A0D0     tib.strs.bot.ptr  equ  core1.top + 208 ; Pointer to bottom of string space
0137      A0D2     tib.lines         equ  core1.top + 210 ; Number of lines in TI Basic program
0138      A0D4     core1.free2       equ  core1.top + 212 ; **free* up to 233
0139      A0EA     tib.samstab.ptr   equ  core1.top + 234 ; Pointer to active SAMS mem layout table
0140      A0EC     tib.var1          equ  core1.top + 236 ; Temp variable 1
0141      A0EE     tib.var2          equ  core1.top + 238 ; Temp variable 2
0142      A0F0     tib.var3          equ  core1.top + 240 ; Temp variable 3
0143      A0F2     tib.var4          equ  core1.top + 242 ; Temp variable 4
0144      A0F4     tib.var5          equ  core1.top + 244 ; Temp variable 5
0145      A0F6     tib.var6          equ  core1.top + 246 ; Temp variable 6
0146      A0F8     tib.var7          equ  core1.top + 248 ; Temp variable 7
0147      A0FA     tib.var8          equ  core1.top + 250 ; Temp variable 8
0148      A0FC     tib.var9          equ  core1.top + 252 ; Temp variable 9
0149      A0FE     tib.var10         equ  core1.top + 254 ; Temp variable 10
0150      A100     core1.free        equ  core1.top + 256 ; End of structure
0151               ;-----------------------------------------------------------------
0152               ; Stevie core 2 RAM                    @>a100-a1ff   (256 bytes)
0153               ;-----------------------------------------------------------------
0154      A100     core2.top         equ  >a100           ; Structure begin
0155      A100     rambuf            equ  core2.top       ; RAM workbuffer
0156      A200     core2.free        equ  core2.top + 256 ; End of structure
0157               ;-----------------------------------------------------------------
0158               ; Stevie Editor shared structures      @>a200-a2ff   (256 bytes)
0159               ;-----------------------------------------------------------------
0160      A200     tv.struct         equ  >a200           ; Structure begin
0161      A202     tv.sams.3000      equ  tv.struct + 2   ; SAMS page in window >3000-3fff
0162      A200     tv.sams.2000      equ  tv.struct + 0   ; SAMS page in window >2000-2fff
0163      A204     tv.sams.a000      equ  tv.struct + 4   ; SAMS page in window >a000-afff
0164      A206     tv.sams.b000      equ  tv.struct + 6   ; SAMS page in window >b000-bfff
0165      A208     tv.sams.c000      equ  tv.struct + 8   ; SAMS page in window >c000-cfff
0166      A20A     tv.sams.d000      equ  tv.struct + 10  ; SAMS page in window >d000-dfff
0167      A20C     tv.sams.e000      equ  tv.struct + 12  ; SAMS page in window >e000-efff
0168      A20E     tv.sams.f000      equ  tv.struct + 14  ; SAMS page in window >f000-ffff
0169      A210     tv.ruler.visible  equ  tv.struct + 16  ; Show ruler with tab positions
0170      A212     tv.colorscheme    equ  tv.struct + 18  ; Current color scheme (0-xx)
0171      A214     tv.curshape       equ  tv.struct + 20  ; Cursor shape and color (sprite)
0172      A216     tv.curcolor       equ  tv.struct + 22  ; Cursor color1 + color2 (color scheme)
0173      A218     tv.color          equ  tv.struct + 24  ; FG/BG-color framebuffer + status lines
0174      A21A     tv.markcolor      equ  tv.struct + 26  ; FG/BG-color marked lines in framebuffer
0175      A21C     tv.busycolor      equ  tv.struct + 28  ; FG/BG-color bottom line when busy
0176      A21E     tv.rulercolor     equ  tv.struct + 30  ; FG/BG-color ruler line
0177      A220     tv.cmdb.hcolor    equ  tv.struct + 32  ; FG/BG-color command buffer header line
0178      A222     tv.font.ptr       equ  tv.struct + 34  ; Pointer to font (in ROM bank 6 or RAM)
0179      A224     tv.pane.focus     equ  tv.struct + 36  ; Identify pane that has focus
0180      A226     tv.task.oneshot   equ  tv.struct + 38  ; Pointer to one-shot routine
0181      A228     tv.fj.stackpnt    equ  tv.struct + 40  ; Pointer to farjump return stack
0182      A22A     tv.error.visible  equ  tv.struct + 42  ; Error pane visible
0183      A22C     tv.error.rows     equ  tv.struct + 44  ; Number of rows in error pane
0184      A22E     tv.sp2.conf       equ  tv.struct + 46  ; Backup of SP2 config register
0185      A230     tv.sp2.stack      equ  tv.struct + 48  ; Backup of SP2 stack register
0186      A232     tv.fg99.img.ptr   equ  tv.struct + 50  ; Pointer to Final GROM cartridge to load
0187      A234     tv.specmsg.ptr    equ  tv.struct + 52  ; Pointer to special message above botrow
0188      A236     tv.lineterm       equ  tv.struct + 54  ; Default line termination character(s)
0189      A238     tv.error.msg      equ  tv.struct + 56  ; Error message (max. 160 characters)
0190      A2D8     tv.free           equ  tv.struct + 216 ; End of structure
0191               ;-----------------------------------------------------------------
0192               ; Frame buffer structure               @>a300-a3ff   (256 bytes)
0193               ;-----------------------------------------------------------------
0194      A300     fb.struct         equ  >a300           ; Structure begin
0195      A300     fb.top.ptr        equ  fb.struct       ; Pointer to frame buffer
0196      A302     fb.current        equ  fb.struct + 2   ; Pointer to current pos. in frame buffer
0197      A304     fb.topline        equ  fb.struct + 4   ; Top line in frame buffer (matching
0198                                                      ; line X in editor buffer).
0199      A306     fb.row            equ  fb.struct + 6   ; Current row in frame buffer
0200                                                      ; (offset 0 .. @fb.scrrows)
0201      A308     fb.row.length     equ  fb.struct + 8   ; Length of current row in frame buffer
0202      A30A     fb.row.dirty      equ  fb.struct + 10  ; Current row dirty flag in frame buffer
0203      A30C     fb.column         equ  fb.struct + 12  ; Current column (0-79) in frame buffer
0204      A30E     fb.colsline       equ  fb.struct + 14  ; Columns per line in frame buffer
0205      A310     fb.vwco           equ  fb.struct + 16  ; View window column offset (0-xxx)
0206      A312     fb.colorize       equ  fb.struct + 18  ; M1/M2 colorize refresh required
0207      A314     fb.curtoggle      equ  fb.struct + 20  ; Cursor shape toggle (00=on <>00=off)
0208      A316     fb.yxsave         equ  fb.struct + 22  ; Copy of cursor YX position
0209      A318     fb.dirty          equ  fb.struct + 24  ; Frame buffer dirty flag
0210      A31A     fb.status.dirty   equ  fb.struct + 26  ; Status line(s) dirty flag
0211      A31C     fb.scrrows        equ  fb.struct + 28  ; Rows on physical screen for framebuffer
0212      A31E     fb.scrrows.max    equ  fb.struct + 30  ; Max # of rows on physical screen for fb
0213      A320     fb.ruler.sit      equ  fb.struct + 32  ; 80 char ruler  (no length-prefix!)
0214      A370     fb.ruler.tat      equ  fb.struct + 112 ; 80 char colors (no length-prefix!)
0215      A3C0     fb.free           equ  fb.struct + 192 ; End of structure
0216               ;-----------------------------------------------------------------
0217               ; File handle structure                @>a400-a4ff   (256 bytes)
0218               ;-----------------------------------------------------------------
0219      A400     fh.struct         equ  >a400           ; stevie file handling structures
0220               ;*******************************************************************************
0221               ; ATTENTION: dsrlnk vars must form a continuous memory block & keep their order!
0222               ;*******************************************************************************
0223      A400     dsrlnk.dsrlws     equ  fh.struct       ; dsrlnk workspace 32 bytes
0224      A420     dsrlnk.namsto     equ  fh.struct + 32  ; 8-byte RAM buf for holding device name
0225      A428     dsrlnk.sav8a      equ  fh.struct + 40  ; Save parm (8 or A) after "blwp @dsrlnk"
0226      A42A     dsrlnk.savcru     equ  fh.struct + 42  ; CRU address of device in prev. DSR call
0227      A42C     dsrlnk.savent     equ  fh.struct + 44  ; DSR entry addr of prev. DSR call
0228      A42E     dsrlnk.savpab     equ  fh.struct + 46  ; Pointer to Device or Subprogram in PAB
0229      A430     dsrlnk.savver     equ  fh.struct + 48  ; Version used in prev. DSR call
0230      A432     dsrlnk.savlen     equ  fh.struct + 50  ; Length of DSR name of prev. DSR call
0231      A434     dsrlnk.flgptr     equ  fh.struct + 52  ; Pointer to VDP PAB byte 1 (flag byte)
0232      A436     fh.pab.ptr        equ  fh.struct + 54  ; Pointer to VDP PAB, for level 3 FIO
0233      A438     fh.pabstat        equ  fh.struct + 56  ; Copy of VDP PAB status byte
0234      A43A     fh.ioresult       equ  fh.struct + 58  ; DSRLNK IO-status after file operation
0235      A43C     fh.records        equ  fh.struct + 60  ; File records counter
0236      A43E     fh.reclen         equ  fh.struct + 62  ; Current record length
0237      A440     fh.kilobytes      equ  fh.struct + 64  ; Kilobytes processed (read/written)
0238      A442     fh.counter        equ  fh.struct + 66  ; Counter used in stevie file operations
0239      A444     fh.fname.ptr      equ  fh.struct + 68  ; Pointer to device and filename
0240      A446     fh.sams.page      equ  fh.struct + 70  ; Current SAMS page during file operation
0241      A448     fh.sams.hipage    equ  fh.struct + 72  ; Highest SAMS page in file operation
0242      A44A     fh.fopmode        equ  fh.struct + 74  ; FOP mode (File Operation Mode)
0243      A44C     fh.filetype       equ  fh.struct + 76  ; Value for filetype/mode (PAB byte 1)
0244      A44E     fh.offsetopcode   equ  fh.struct + 78  ; Set to >40 for skipping VDP buffer
0245      A450     fh.callback1      equ  fh.struct + 80  ; Pointer to callback function 1
0246      A452     fh.callback2      equ  fh.struct + 82  ; Pointer to callback function 2
0247      A454     fh.callback3      equ  fh.struct + 84  ; Pointer to callback function 3
0248      A456     fh.callback4      equ  fh.struct + 86  ; Pointer to callback function 4
0249      A458     fh.callback5      equ  fh.struct + 88  ; Pointer to callback function 5
0250      A45A     fh.workmode       equ  fh.struct + 90  ; Working mode (used in callbacks)
0251      A45C     fh.kilobytes.prev equ  fh.struct + 92  ; Kilobytes processed (previous)
0252      A45E     fh.line           equ  fh.struct + 94  ; Editor buffer line currently processing
0253      A460     fh.temp1          equ  fh.struct + 96  ; Temporary variable 1
0254      A462     fh.temp2          equ  fh.struct + 98  ; Temporary variable 2
0255      A464     fh.temp3          equ  fh.struct +100  ; Temporary variable 3
0256      A466     fh.pabtpl.ptr     equ  fh.struct +102  ; Pointer to PAB template in ROM/RAM
0257      A468     fh.dir.rec.ptr    equ  fh.struct +104  ; Pointer to directory record
0258      A46A     fh.membuffer      equ  fh.struct +106  ; 80 bytes file memory buffer
0259      A4BA     fh.free           equ  fh.struct +186  ; End of structure
0260               ;-----------------------------------------------------------------
0261               ; File handle structure for generic    @>a400-a4ff   (256 bytes)
0262               ; Overloads file handle structure
0263               ;-----------------------------------------------------------------
0264      A45A     fh.ftype.init     equ  fh.struct + 90  ; File type/mode (becomes fh.filetype)
0265      A45C     fh.ram.ptr        equ  fh.struct + 92  ; RAM destination address
0266               ;-----------------------------------------------------------------
0267               ; Editor buffer structure              @>a500-a5ff   (256 bytes)
0268               ;-----------------------------------------------------------------
0269      A500     edb.struct        equ  >a500           ; Begin structure
0270      A500     edb.top.ptr       equ  edb.struct      ; Pointer to editor buffer
0271      A502     edb.index.ptr     equ  edb.struct + 2  ; Pointer to index
0272      A504     edb.lines         equ  edb.struct + 4  ; Total lines in editor buffer - 1
0273      A506     edb.dirty         equ  edb.struct + 6  ; Editor buffer dirty (Text changed!)
0274      A508     edb.next_free.ptr equ  edb.struct + 8  ; Pointer to next free line
0275      A50A     edb.insmode       equ  edb.struct + 10 ; Insert mode (>ffff = insert)
0276      A50C     edb.autoinsert    equ  edb.struct + 12 ; Auto-insert on ENTER flag (>ffff = on)
0277      A50E     edb.block.m1      equ  edb.struct + 14 ; Block start line marker (>ffff = unset)
0278      A510     edb.block.m2      equ  edb.struct + 16 ; Block end line marker   (>ffff = unset)
0279      A512     edb.block.var     equ  edb.struct + 18 ; Local var used in block operation
0280      A514     edb.filename.ptr  equ  edb.struct + 20 ; Pointer to length-prefixed string
0281                                                      ; with current filename.
0282      A516     edb.filetype.ptr  equ  edb.struct + 22 ; Pointer to length-prefixed string
0283                                                      ; with current file type.
0284      A518     edb.sams.page     equ  edb.struct + 24 ; Current SAMS page
0285      A51A     edb.sams.lopage   equ  edb.struct + 26 ; Lowest SAMS page in use
0286      A51C     edb.sams.hipage   equ  edb.struct + 28 ; Highest SAMS page in use
0287      A51E     edb.bk.fb.topline equ  edb.struct + 30 ; Backup of @fb.topline before opening
0288                                                      ; other file from special file.
0289      A520     edb.bk.fb.row     equ  edb.struct + 32 ; Backup of @fb.row before opening
0290                                                      ; other file from special file.
0291      A522     edb.special.file  equ  edb.struct + 34 ; Special file in editor buffer
0292      A524     edb.lineterm      equ  edb.struct + 36 ; Line termination character
0293                                                      ; MSB: Mode on (>ff) or off (>00)
0294                                                      ; LSB: Line termination character
0295      A526     edb.filename      equ  edb.struct + 38 ; 80 characters inline buffer reserved
0296                                                      ; for filename, but not always used.
0297      A576     edb.free          equ  edb.struct + 118; End of structure
0298               ;-----------------------------------------------------------------
0299               ; Index structure                      @>a600-a6ff   (256 bytes)
0300               ;-----------------------------------------------------------------
0301      A600     idx.struct        equ  >a600           ; stevie index structure
0302      A600     idx.sams.page     equ  idx.struct      ; Current SAMS page
0303      A602     idx.sams.lopage   equ  idx.struct + 2  ; Lowest SAMS page
0304      A604     idx.sams.hipage   equ  idx.struct + 4  ; Highest SAMS page
0305      A606     idx.free          equ  idx.struct + 6  ; End of structure
0306               ;-----------------------------------------------------------------
0307               ; Command buffer structure             @>a700-a7ff   (256 bytes)
0308               ;-----------------------------------------------------------------
0309      A700     cmdb.struct       equ  >a700           ; Command Buffer structure
0310      A700     cmdb.top.ptr      equ  cmdb.struct     ; Pointer to command buffer (history)
0311      A702     cmdb.visible      equ  cmdb.struct+ 2  ; Command buffer visible? (>ffff=visible)
0312      A704     cmdb.fb.yxsave    equ  cmdb.struct+ 4  ; Copy of FB WYX when entering cmdb pane
0313      A706     cmdb.scrrows      equ  cmdb.struct+ 6  ; Current size of CMDB pane (in rows)
0314      A708     cmdb.default      equ  cmdb.struct+ 8  ; Default size of CMDB pane (in rows)
0315      A70A     cmdb.cursor       equ  cmdb.struct+ 10 ; Screen YX of cursor in CMDB pane
0316      A70C     cmdb.yxsave       equ  cmdb.struct+ 12 ; Copy of WYX
0317      A70E     cmdb.vdptop       equ  cmdb.struct+ 14 ; VDP address CMDB pane header line (TAT)
0318      A710     cmdb.yxtop        equ  cmdb.struct+ 16 ; YX position CMDB pane header line
0319      A712     cmdb.yxprompt     equ  cmdb.struct+ 18 ; YX position of command buffer prompt
0320      A714     cmdb.column       equ  cmdb.struct+ 20 ; Current column in command buffer pane
0321      A716     cmdb.length       equ  cmdb.struct+ 22 ; Length of current row in CMDB
0322      A718     cmdb.lines        equ  cmdb.struct+ 24 ; Total lines in CMDB
0323      A71A     cmdb.dirty        equ  cmdb.struct+ 26 ; Command buffer dirty (Text changed!)
0324      A71C     cmdb.dialog       equ  cmdb.struct+ 28 ; Dialog identifier
0325      A71E     cmdb.dialog.var   equ  cmdb.struct+ 30 ; Dialog private variable or pointer
0326      A720     cmdb.panhead      equ  cmdb.struct+ 32 ; Pointer to string pane header
0327      A722     cmdb.paninfo      equ  cmdb.struct+ 34 ; Pointer to string pane info (1st line)
0328      A724     cmdb.panhint      equ  cmdb.struct+ 36 ; Pointer to string pane hint (2nd line)
0329      A726     cmdb.panhint2     equ  cmdb.struct+ 38 ; Pointer to string pane hint (extra)
0330      A728     cmdb.panmarkers   equ  cmdb.struct+ 40 ; Pointer to key marker list  (3rd line)
0331      A72A     cmdb.pankeys      equ  cmdb.struct+ 42 ; Pointer to string pane keys (stat line)
0332      A72C     cmdb.action.ptr   equ  cmdb.struct+ 44 ; Pointer to function to execute
0333      A72E     cmdb.cmdall       equ  cmdb.struct+ 46 ; Current command including length-byte
0334      A72E     cmdb.cmdlen       equ  cmdb.struct+ 46 ; Length of current command (MSB byte!)
0335      A72F     cmdb.cmd          equ  cmdb.struct+ 47 ; Current command (80 bytes max.)
0336      A780     cmdb.panhead.buf  equ  cmdb.struct+128 ; String buffer for pane header
0337      A7B2     cmdb.dflt.fname   equ  cmdb.struct+178 ; Default for filename
0338      A800     cmdb.free         equ  cmdb.struct+256 ; End of structure
0339               ;-----------------------------------------------------------------
0340               ; Stevie value stack                   @>a800-a8ff     (256 bytes)
0341               ;-----------------------------------------------------------------
0342      A900     sp2.stktop        equ  >a900           ; \
0343                                                      ; | The stack grows from high memory
0344                                                      ; | towards low memory.
0345                                                      ; |
0346                                                      ; | Stack leaking is checked in SP2
0347                                                      ; | user hook "edkey.keyscan.hook"
0348                                                      ; /
0349               ;-----------------------------------------------------------------
0350               ; Scratchpad memory work copy          @>ad00-aeff     (256 bytes)
0351               ;-----------------------------------------------------------------
0352      7E00     cpu.scrpad.src    equ  >7e00           ; \ Dump of OS monitor scratchpad
0353                                                      ; / stored in cartridge ROM bank7.asm
0354               
0355      F000     cpu.scrpad.tgt    equ  >f000           ; \ Fixed memory location used for
0356                                                      ; | scratchpad backup/restore routines.
0357                                                      ; /
0358               
0359      8300     cpu.scrpad1       equ  >8300           ; Stevie primary scratchpad
0360               
0361      AD00     cpu.scrpad2       equ  >ad00           ; Stevie secondary scratchpad, used when
0362                                                      ; calling TI Basic/External programs
0363               ;-----------------------------------------------------------------
0364               ; Farjump return stack                 @>af00-afff     (256 bytes)
0365               ;-----------------------------------------------------------------
0366      B000     fj.bottom         equ  >b000           ; Return stack for trampoline function
0367                                                      ; Grows downwards from high to low.
0368               ;-----------------------------------------------------------------
0369               ; Index                                @>b000-bfff    (4096 bytes)
0370               ;-----------------------------------------------------------------
0371      B000     idx.top           equ  >b000           ; Top of index
0372      1000     idx.size          equ  4096            ; Index size
0373               ;-----------------------------------------------------------------
0374               ; Editor buffer                        @>c000-cfff    (4096 bytes)
0375               ;-----------------------------------------------------------------
0376      C000     edb.top           equ  >c000           ; Editor buffer high memory
0377      1000     edb.size          equ  4096            ; Editor buffer size
0378               ;-----------------------------------------------------------------
0379               ; Frame buffer & uncrunch area         @>d000-dcff    (3584 bytes)
0380               ;-----------------------------------------------------------------
0381      D000     fb.top            equ  >d000           ; Frame buffer (2400 char)
0382      0960     fb.size           equ  80*30           ; Frame buffer size
0383      D960     fb.uncrunch.area  equ  >d960           ; \ Uncrunched TI Basic statement
0384                                                      ; / >d960->dcff
0385               ;-----------------------------------------------------------------
0386               ; Defaults area                        @>de00-dfff     (512 bytes)
0387               ;-----------------------------------------------------------------
0388      DE00     tv.printer.fname  equ  >de00           ; Default printer        (80 bytes)
0389      DE50     tv.clip.fname     equ  >de50           ; Default clipboard      (80 bytes)
0390      DEA0     tv.mc.fname       equ  >dea0           ; Default Master Catalog (80 bytes)
0391               ;-----------------------------------------------------------------
0392               ; Command buffer history               @>e000-efff    (4096 bytes)
0393               ;-----------------------------------------------------------------
0394      E000     cmdb.top          equ  >e000           ; Top of command history buffer
0395      1000     cmdb.size         equ  4096            ; Command buffer size
0396               ;-----------------------------------------------------------------
0397               ; Heap & Strings area                  @>f000-ffff    (4096 bytes)
0398               ;-----------------------------------------------------------------
0399      F000     heap.top          equ  >f000           ; 80 Current filename
0400      F050     ram.msg1          equ  >f050           ; 80 txt.hint.memstat
0401      F0A0     ram.msg2          equ  >f0a0           ; 80 txt.hint.lineterm
0402               ;-----------------------------------------------------------------
0403               ; Stevie specific equates
0404               ;-----------------------------------------------------------------
0405      0000     fh.fopmode.none           equ  0       ; No file operation in progress
0406      0001     fh.fopmode.readfile       equ  1       ; Read file from disk to memory
0407      0002     fh.fopmode.writefile      equ  2       ; Save file from memory to disk
0408      0005     cmdb.rows                 equ  5       ; Number of rows in CMDB pane
0409      A028     rom0_kscan_out            equ  keycode1; Where to store value of key pressed
0410               
0411      9900     tv.colorize.reset         equ  >9900   ; Colorization off
0412      00FE     tv.1timeonly              equ  254     ; One-time only flag indicator
0413      0100     tv.sams.maxpage           equ  256     ; Max SAMS pages supported
                   < stevie_b4.asm
0029                       copy  "equ.c99.asm"         ; Classic99 emulator configuration
     **** ****     > equ.c99.asm
0001               * FILE......: equ.c99.asm
0002               * Purpose...: Equates related to classic99
0003               
0004               ***************************************************************
0005               *                 Extra opcodes for classic99
0006               ********|*****|*********************|**************************
0007      0110     c99_norm      equ  >0110            ; CPU normal
0008      0111     c99_ovrd      equ  >0111            ; CPU overdrive
0009      0112     c99_smax      equ  >0112            ; System Maximum
0010      0113     c99_brk       equ  >0113            ; Breakpoint
0011      0114     c99_quit      equ  >0114            ; Quit emulator
0012      0120     c99_dbg_r0    equ  >0120            ; Debug printf r0
0013      0121     c99_dbg_r1    equ  >0121            ; Debug printf r1
0014      0122     c99_dbg_r2    equ  >0122            ; Debug printf r2
0015      0123     c99_dbg_r3    equ  >0123            ; Debug printf r3
0016      0124     c99_dbg_r4    equ  >0124            ; Debug printf r4
0017      0125     c99_dbg_r5    equ  >0125            ; Debug printf r5
0018      0126     c99_dbg_r6    equ  >0126            ; Debug printf r6
0019      0127     c99_dbg_r7    equ  >0127            ; Debug printf r7
0020      0128     c99_dbg_r8    equ  >0128            ; Debug printf r8
0021      0199     c99_dbg_r9    equ  >0199            ; Debug printf r9
0022      012A     c99_dbg_ra    equ  >012a            ; Debug printf ra
0023      012B     c99_dbg_rb    equ  >012b            ; Debug printf rb
0024      012C     c99_dbg_rc    equ  >012c            ; Debug printf rc
0025      012D     c99_dbg_rd    equ  >012d            ; Debug printf rd
0026      012E     c99_dbg_re    equ  >012e            ; Debug printf re
0027      012F     c99_dbg_rf    equ  >012f            ; Debug printf rf
0028      0124     c99_dbg_tmp0  equ  c99_dbg_r4       ; Debug printf tmp0
0029      0125     c99_dbg_tmp1  equ  c99_dbg_r5       ; Debug printf tmp1
0030      0126     c99_dbg_tmp2  equ  c99_dbg_r6       ; Debug printf tmp2
0031      0127     c99_dbg_tmp3  equ  c99_dbg_r7       ; Debug printf tmp3
0032      0128     c99_dbg_tmp4  equ  c99_dbg_r8       ; Debug printf tmp4
0033      0199     c99_dbg_stck  equ  c99_dbg_r9       ; Debug printf stack
                   < stevie_b4.asm
0030                       copy  "equ.tib.asm"         ; Equates related to TI Basic session
     **** ****     > equ.tib.asm
0001               * FILE......: equ.tib.asm
0002               * Purpose...: Equates for TI Basic session
0003               
0004               *--------------------------------------------------------------
0005               * Equates mainly used while TI Basic session is running
0006               *--------------------------------------------------------------
0007      FF00     tib.aux           equ  >ff00           ; Auxiliary memory 256 bytes
0008      FF00     tib.aux.fname     equ  tib.aux         ; TI Basic program filename
0009      FFFA     tib.aux.end       equ  >fffa           ; \ End of auxiliary memory
0010                                                      ; | >fffc-ffff is reserved
0011                                                      ; / for NMI vector.
                   < stevie_b4.asm
0031                       copy  "equ.keys.asm"        ; Equates for keyboard mapping
     **** ****     > equ.keys.asm
0001               * FILE......: data.keymap.keys.asm
0002               * Purpose...: Keyboard mapping
0003               
0004               
0005               *---------------------------------------------------------------
0006               * Keyboard scancodes - Numeric keys
0007               *-------------|---------------------|---------------------------
0008      0030     key.num.0     equ >30               ; 0
0009      0031     key.num.1     equ >31               ; 1
0010      0032     key.num.2     equ >32               ; 2
0011      0033     key.num.3     equ >33               ; 3
0012      0034     key.num.4     equ >34               ; 4
0013      0035     key.num.5     equ >35               ; 5
0014      0036     key.num.6     equ >36               ; 6
0015      0037     key.num.7     equ >37               ; 7
0016      0038     key.num.8     equ >38               ; 8
0017      0039     key.num.9     equ >39               ; 9
0018               *---------------------------------------------------------------
0019               * Keyboard scancodes - Letter keys
0020               *-------------|---------------------|---------------------------
0021      0041     key.uc.a      equ >41               ; A
0022      0042     key.uc.b      equ >42               ; B
0023      0043     key.uc.c      equ >43               ; C
0024      0044     key.uc.d      equ >44               ; D
0025      0045     key.uc.e      equ >45               ; E
0026      0046     key.uc.f      equ >46               ; F
0027      0047     key.uc.g      equ >47               ; G
0028      0048     key.uc.h      equ >48               ; H
0029      0049     key.uc.i      equ >49               ; I
0030      004A     key.uc.j      equ >4a               ; J
0031      004B     key.uc.k      equ >4b               ; K
0032      004C     key.uc.l      equ >4c               ; L
0033      004D     key.uc.m      equ >4d               ; M
0034      004E     key.uc.n      equ >4e               ; N
0035      0052     key.uc.r      equ >52               ; R
0036      0053     key.uc.s      equ >53               ; S
0037      004F     key.uc.o      equ >4f               ; O
0038      0050     key.uc.p      equ >50               ; P
0039      0051     key.uc.q      equ >51               ; Q
0040      0052     key.uc.r      equ >52               ; R
0041      0058     key.uc.x      equ >58               ; X
0042      00A2     key.lc.b      equ >a2               ; b
0043      00A5     key.lc.e      equ >a5               ; e
0044      00A6     key.lc.f      equ >a6               ; f
0045      00A8     key.lc.h      equ >a8               ; h
0046      006E     key.lc.n      equ >6e               ; n
0047      0073     key.lc.s      equ >73               ; s
0048      006F     key.lc.o      equ >6f               ; o
0049      0070     key.lc.p      equ >70               ; p
0050      0071     key.lc.q      equ >71               ; q
0051      0072     key.lc.r      equ >72               ; r
0052      0078     key.lc.x      equ >78               ; x
0053               *---------------------------------------------------------------
0054               * Keyboard scancodes - Function keys
0055               *-------------|---------------------|---------------------------
0056      00BC     key.fctn.0    equ >bc               ; fctn + 0
0057      0003     key.fctn.1    equ >03               ; fctn + 1
0058      0004     key.fctn.2    equ >04               ; fctn + 2
0059      0007     key.fctn.3    equ >07               ; fctn + 3
0060      0002     key.fctn.4    equ >02               ; fctn + 4
0061      000E     key.fctn.5    equ >0e               ; fctn + 5
0062      000C     key.fctn.6    equ >0c               ; fctn + 6
0063      0001     key.fctn.7    equ >01               ; fctn + 7
0064      0006     key.fctn.8    equ >06               ; fctn + 8
0065      000F     key.fctn.9    equ >0f               ; fctn + 9
0066      0000     key.fctn.a    equ >00               ; fctn + a
0067      00BE     key.fctn.b    equ >be               ; fctn + b
0068      0000     key.fctn.c    equ >00               ; fctn + c
0069      0009     key.fctn.d    equ >09               ; fctn + d
0070      000B     key.fctn.e    equ >0b               ; fctn + e
0071      0000     key.fctn.f    equ >00               ; fctn + f
0072      0000     key.fctn.g    equ >00               ; fctn + g
0073      00BF     key.fctn.h    equ >bf               ; fctn + h
0074      0000     key.fctn.i    equ >00               ; fctn + i
0075      00C0     key.fctn.j    equ >c0               ; fctn + j
0076      00C1     key.fctn.k    equ >c1               ; fctn + k
0077      00C2     key.fctn.l    equ >c2               ; fctn + l
0078      00C3     key.fctn.m    equ >c3               ; fctn + m
0079      00C4     key.fctn.n    equ >c4               ; fctn + n
0080      0000     key.fctn.o    equ >00               ; fctn + o
0081      0000     key.fctn.p    equ >00               ; fctn + p
0082      00C5     key.fctn.q    equ >c5               ; fctn + q
0083      0000     key.fctn.r    equ >00               ; fctn + r
0084      0008     key.fctn.s    equ >08               ; fctn + s
0085      0000     key.fctn.t    equ >00               ; fctn + t
0086      0000     key.fctn.u    equ >00               ; fctn + u
0087      007F     key.fctn.v    equ >7f               ; fctn + v
0088      007E     key.fctn.w    equ >7e               ; fctn + w
0089      000A     key.fctn.x    equ >0a               ; fctn + x
0090      00C6     key.fctn.y    equ >c6               ; fctn + y
0091      0000     key.fctn.z    equ >00               ; fctn + z
0092               *---------------------------------------------------------------
0093               * Keyboard scancodes - Function keys extra
0094               *---------------------------------------------------------------
0095      00B9     key.fctn.dot    equ >b9             ; fctn + .
0096      00B8     key.fctn.comma  equ >b8             ; fctn + ,
0097      0005     key.fctn.plus   equ >05             ; fctn + +
0098               *---------------------------------------------------------------
0099               * Keyboard scancodes - control keys
0100               *-------------|---------------------|---------------------------
0101      00B0     key.ctrl.0    equ >b0               ; ctrl + 0
0102      00B1     key.ctrl.1    equ >b1               ; ctrl + 1
0103      00B2     key.ctrl.2    equ >b2               ; ctrl + 2
0104      00B3     key.ctrl.3    equ >b3               ; ctrl + 3
0105      00B4     key.ctrl.4    equ >b4               ; ctrl + 4
0106      00B5     key.ctrl.5    equ >b5               ; ctrl + 5
0107      00B6     key.ctrl.6    equ >b6               ; ctrl + 6
0108      00B7     key.ctrl.7    equ >b7               ; ctrl + 7
0109      009E     key.ctrl.8    equ >9e               ; ctrl + 8
0110      009F     key.ctrl.9    equ >9f               ; ctrl + 9
0111      0081     key.ctrl.a    equ >81               ; ctrl + a
0112      0082     key.ctrl.b    equ >82               ; ctrl + b
0113      0083     key.ctrl.c    equ >83               ; ctrl + c
0114      0084     key.ctrl.d    equ >84               ; ctrl + d
0115      0085     key.ctrl.e    equ >85               ; ctrl + e
0116      0086     key.ctrl.f    equ >86               ; ctrl + f
0117      0087     key.ctrl.g    equ >87               ; ctrl + g
0118      0088     key.ctrl.h    equ >88               ; ctrl + h
0119      0089     key.ctrl.i    equ >89               ; ctrl + i
0120      008A     key.ctrl.j    equ >8a               ; ctrl + j
0121      008B     key.ctrl.k    equ >8b               ; ctrl + k
0122      008C     key.ctrl.l    equ >8c               ; ctrl + l
0123      008D     key.ctrl.m    equ >8d               ; ctrl + m
0124      008E     key.ctrl.n    equ >8e               ; ctrl + n
0125      008F     key.ctrl.o    equ >8f               ; ctrl + o
0126      0090     key.ctrl.p    equ >90               ; ctrl + p
0127      0091     key.ctrl.q    equ >91               ; ctrl + q
0128      0092     key.ctrl.r    equ >92               ; ctrl + r
0129      0093     key.ctrl.s    equ >93               ; ctrl + s
0130      0094     key.ctrl.t    equ >94               ; ctrl + t
0131      0095     key.ctrl.u    equ >95               ; ctrl + u
0132      0096     key.ctrl.v    equ >96               ; ctrl + v
0133      0097     key.ctrl.w    equ >97               ; ctrl + w
0134      0098     key.ctrl.x    equ >98               ; ctrl + x
0135      0099     key.ctrl.y    equ >99               ; ctrl + y
0136      009A     key.ctrl.z    equ >9a               ; ctrl + z
0137               *---------------------------------------------------------------
0138               * Keyboard scancodes - control keys extra
0139               *---------------------------------------------------------------
0140      009B     key.ctrl.dot    equ >9b             ; ctrl + .
0141      0080     key.ctrl.comma  equ >80             ; ctrl + ,
0142      009D     key.ctrl.plus   equ >9d             ; ctrl + +
0143      00BB     key.ctrl.slash  equ >bb             ; ctrl + /
0144      00F0     key.ctrl.space  equ >f0             ; ctrl + SPACE
0145               *---------------------------------------------------------------
0146               * Special keys
0147               *---------------------------------------------------------------
0148      000D     key.enter     equ >0d               ; enter
0149      0020     key.space     equ >20               ; space
                   < stevie_b4.asm
0032               
0033               ***************************************************************
0034               * BANK 4
0035               ********|*****|*********************|**************************
0036      6008     bankid  equ   bank4.rom             ; Set bank identifier to current bank
0037                       aorg  >6000
0038                       save  >6000,>8000           ; Save bank
0039                       copy  "rom.header.asm"      ; Include cartridge header
     **** ****     > rom.header.asm
0001               * FILE......: rom.header.asm
0002               * Purpose...: Cartridge header
0003               
0004               *--------------------------------------------------------------
0005               * Cartridge header
0006               ********|*****|*********************|**************************
0007 6000 AA               byte  >aa                   ; 0  Standard header                   >6000
0008 6001   01             byte  >01                   ; 1  Version number
0009 6002 02               byte  >02                   ; 2  Number of programs (optional)     >6002
0010 6003   00             byte  0                     ; 3  Reserved ('R' = adv. mode FG99)
0011               
0012 6004 0000             data  >0000                 ; 4  \ Pointer to power-up list        >6004
0013                                                   ; 5  /
0014               
0015                       ;
0016                       ; Change to rom.program1 to add the menu option RESET STEVIE MEMORY.
0017                       ; That option can be used in the case where we jump to TI Basic, but
0018                       ; resuming fails afterwards (e.g. memory overwritten by ext. program).
0019                       ;
0020                       ; If resume fails, you can only reset the TI-99/4a by turning of
0021                       ; the memory expansion, it's not sufficient to reset the console.
0022                       ;
0023 6006 6024             data  rom.program2          ; 6  \ Pointer to program list         >6006
0024                                                   ; 7  /
0025               
0026 6008 0000             data  >0000                 ; 8  \ Pointer to DSR list             >6008
0027                                                   ; 9  /
0028               
0029 600A 0000             data  >0000                 ; 10 \ Pointer to subprogram list      >600a
0030                                                   ; 11 /
0031               
0032                       ;-----------------------------------------------------------------------
0033                       ; Program list entry
0034                       ;-----------------------------------------------------------------------
0035               rom.program1:
0036 600C 6024             data  rom.program2          ; 12 \ Next program list entry         >600c
0037                                                   ; 13 / (no more items following)
0038               
0039 600E 6040             data  kickstart.code1       ; 14 \ Program address                 >600e
0040                                                   ; 15 /
0041               
0042 6010 1352             stri 'RESET STEVIE MEMORY'
     6012 4553     
     6014 4554     
     6016 2053     
     6018 5445     
     601A 5649     
     601C 4520     
     601E 4D45     
     6020 4D4F     
     6022 5259     
0043               
0044                       ;-----------------------------------------------------------------------
0045                       ; Program list entry
0046                       ;-----------------------------------------------------------------------
0047               rom.program2:
0048 6024 0000             data  >0000                 ; 12 \ Next program list entry         >600c
0049                                                   ; 13 / (no more items following)
0050               
0051 6026 6038             data  kickstart.resume      ; 14 \ Program address                 >600e
0052                                                   ; 15 /
0053               
0055 6028 0C53                 stri 'STEVIE 1.5.9'
     602A 5445     
     602C 5649     
     602E 4520     
     6030 312E     
     6032 352E     
     6034 39       
0057               
0061               
0065               
                   < stevie_b4.asm
0040               
0041               ***************************************************************
0042               * Step 1: Switch to bank 0 (uniform code accross all banks)
0043               ********|*****|*********************|**************************
0044                       aorg  kickstart.code1       ; >6040
0045 6040 04E0  34         clr   @bank0.rom            ; Switch to bank 0 "Jill"
     6042 6000     
0046               ***************************************************************
0047               * Step 2: Satisfy assembler, must know relocated code
0048               ********|*****|*********************|**************************
0049                       aorg  >2000                 ; Relocate to >2000
0050                       copy  "runlib.asm"
     **** ****     > runlib.asm
0001               *******************************************************************************
0002               *              ___  ____  ____  ___  ____  ____    __    ___
0003               *             / __)(  _ \( ___)/ __)(_  _)(  _ \  /__\  (__ \  v.2021
0004               *             \__ \ )___/ )__)( (__   )(   )   / /(__)\  / _/
0005               *             (___/(__)  (____)\___) (__) (_)\_)(__)(__)(____)
0006               *
0007               *                TMS9900 Monitor with Arcade Game support
0008               *                                  for
0009               *              the Texas Instruments TI-99/4A Home Computer
0010               *
0011               *                      2010-2023 by Filip Van Vooren
0012               *
0013               *              https://github.com/FilipVanVooren/spectra2.git
0014               *******************************************************************************
0015               * This file: runlib.a99
0016               *******************************************************************************
0017               * Use following equates to skip/exclude support modules and to control startup
0018               * behaviour.
0019               *
0020               * == Memory
0021               * skip_rom_bankswitch       equ  1  ; Skip support for ROM bankswitching
0022               * skip_vram_cpu_copy        equ  1  ; Skip VRAM to CPU copy functions
0023               * skip_cpu_vram_copy        equ  1  ; Skip CPU  to VRAM copy functions
0024               * skip_cpu_cpu_copy         equ  1  ; Skip CPU  to CPU copy functions
0025               * skip_grom_cpu_copy        equ  1  ; Skip GROM to CPU copy functions
0026               * skip_grom_vram_copy       equ  1  ; Skip GROM to VRAM copy functions
0027               * skip_sams                 equ  1  ; Skip support for SAMS memory expansion
0028               * skip_sams_layout          equ  1  ; Skip SAMS memory layout routine
0029               * skip_sams_size            equ  1  ; Skip SAMS card size check
0030               *
0031               * == VDP
0032               * skip_textmode             equ  1  ; Skip 40x24 textmode support
0033               * skip_vdp_f18a             equ  1  ; Skip f18a support
0034               * skip_vdp_hchar            equ  1  ; Skip hchar, xchar
0035               * skip_vdp_vchar            equ  1  ; Skip vchar, xvchar
0036               * skip_vdp_boxes            equ  1  ; Skip filbox, putbox
0037               * skip_vdp_hexsupport       equ  1  ; Skip mkhex, puthex
0038               * skip_vdp_bitmap           equ  1  ; Skip bitmap functions
0039               * skip_vdp_intscr           equ  1  ; Skip interrupt+screen on/off
0040               * skip_vdp_viewport         equ  1  ; Skip viewport functions
0041               * skip_vdp_yx2px_calc       equ  1  ; Skip YX to pixel calculation
0042               * skip_vdp_px2yx_calc       equ  1  ; Skip pixel to YX calculation
0043               * skip_vdp_sprites          equ  1  ; Skip sprites support
0044               * skip_vdp_cursor           equ  1  ; Skip cursor support
0045               *
0046               * == Sound & speech
0047               * skip_snd_player           equ  1  ; Skip inclusionm of sound player code
0048               * skip_speech_detection     equ  1  ; Skip speech synthesizer detection
0049               * skip_speech_player        equ  1  ; Skip inclusion of speech player code
0050               *
0051               * == Keyboard
0052               * skip_virtual_keyboard     equ  1  ; Skip virtual keyboard scann
0053               * skip_real_keyboard        equ  1  ; Skip real keyboard scan
0054               * use_rom0_kscan            equ  1  ; Use KSCAN in console ROM#0
0055               *
0056               * == Utilities
0057               * skip_random_generator     equ  1  ; Skip random generator functions
0058               * skip_cpu_rle_compress     equ  1  ; Skip CPU RLE compression
0059               * skip_cpu_rle_decompress   equ  1  ; Skip CPU RLE decompression
0060               * skip_vdp_rle_decompress   equ  1  ; Skip VDP RLE decompression
0061               * skip_cpu_hexsupport       equ  1  ; Skip mkhex, puthex
0062               * skip_cpu_numsupport       equ  1  ; Skip mknum, putnum, trimnum
0063               * skip_cpu_crc16            equ  1  ; Skip CPU memory CRC-16 calculation
0064               * skip_cpu_strings          equ  1  ; Skip string support utilities
0065               
0066               * == Kernel/Multitasking
0067               * skip_timer_alloc          equ  1  ; Skip support for timers allocation
0068               * skip_mem_paging           equ  1  ; Skip support for memory paging
0069               * skip_fio                  equ  1  ; Skip support for file I/O, dsrlnk
0070               * skip_fg99                 equ  1  ; Skip support for FinalGROM99 loading
0071               *
0072               * == Startup behaviour
0073               * startup_backup_scrpad     equ  1  ; Backup scratchpad @>8300->83ff
0074               *                                   ; to pre-defined backup address
0075               * startup_keep_vdpmemory    equ  1  ; Do not clear VDP vram upon startup
0076               *******************************************************************************
0077               
0078               *//////////////////////////////////////////////////////////////
0079               *                       RUNLIB SETUP
0080               *//////////////////////////////////////////////////////////////
0081               
0082                       copy  "memsetup.equ"             ; runlib scratchpad memory setup
     **** ****     > memsetup.equ
0001               * FILE......: memsetup.equ
0002               * Purpose...: Equates for spectra2 memory layout
0003               
0004               ***************************************************************
0005               * >8300 - >8341     Scratchpad memory layout (66 bytes)
0006               ********|*****|*********************|**************************
0007      8300     ws1     equ   >8300                 ; 32 - Primary workspace
0008      8320     mcloop  equ   >8320                 ; 08 - Machine code for loop & speech
0009      8328     wbase   equ   >8328                 ; 02 - PNT base address
0010      832A     wyx     equ   >832a                 ; 02 - Cursor YX position
0011      832C     wtitab  equ   >832c                 ; 02 - Timers: Address of timer table
0012      832E     wtiusr  equ   >832e                 ; 02 - Timers: Address of user hook
0013      8330     wtitmp  equ   >8330                 ; 02 - Timers: Internal use
0014      8332     wvrtkb  equ   >8332                 ; 02 - Virtual keyboard flags
0015      8334     wsdlst  equ   >8334                 ; 02 - Sound player: Tune address
0016      8336     wsdtmp  equ   >8336                 ; 02 - Sound player: Temporary use
0017      8338     wspeak  equ   >8338                 ; 02 - Speech player: Address of LPC data
0018      833A     wcolmn  equ   >833a                 ; 02 - Screen size, columns per row
0019      833C     waux1   equ   >833c                 ; 02 - Temporary storage 1
0020      833E     waux2   equ   >833e                 ; 02 - Temporary storage 2
0021      8340     waux3   equ   >8340                 ; 02 - Temporary storage 3
0022               ***************************************************************
0023      832A     by      equ   wyx                   ;      Cursor Y position
0024      832B     bx      equ   wyx+1                 ;      Cursor X position
0025      8322     mcsprd  equ   mcloop+2              ;      Speech read routine
0026               ***************************************************************
                   < runlib.asm
0083                       copy  "registers.equ"            ; runlib registers
     **** ****     > registers.equ
0001               * FILE......: registers.equ
0002               * Purpose...: Equates for registers
0003               
0004               ***************************************************************
0005               * Register usage
0006               * R0      **free not used**
0007               * R1      **free not used**
0008               * R2      Config register
0009               * R3      Extended config register
0010               * R4      Temporary register/variable tmp0
0011               * R5      Temporary register/variable tmp1
0012               * R6      Temporary register/variable tmp2
0013               * R7      Temporary register/variable tmp3
0014               * R8      Temporary register/variable tmp4
0015               * R9      Stack pointer
0016               * R10     Highest slot in use + Timer counter
0017               * R11     Subroutine return address
0018               * R12     CRU
0019               * R13     Copy of VDP status byte and counter for sound player
0020               * R14     Copy of VDP register #0 and VDP register #1 bytes
0021               * R15     VDP read/write address
0022               *--------------------------------------------------------------
0023               * Special purpose registers
0024               * R0      shift count
0025               * R12     CRU
0026               * R13     WS     - when using LWPI, BLWP, RTWP
0027               * R14     PC     - when using LWPI, BLWP, RTWP
0028               * R15     STATUS - when using LWPI, BLWP, RTWP
0029               ***************************************************************
0030               * Define registers
0031               ********|*****|*********************|**************************
0032      0000     r0      equ   0
0033      0001     r1      equ   1
0034      0002     r2      equ   2
0035      0003     r3      equ   3
0036      0004     r4      equ   4
0037      0005     r5      equ   5
0038      0006     r6      equ   6
0039      0007     r7      equ   7
0040      0008     r8      equ   8
0041      0009     r9      equ   9
0042      000A     r10     equ   10
0043      000B     r11     equ   11
0044      000C     r12     equ   12
0045      000D     r13     equ   13
0046      000E     r14     equ   14
0047      000F     r15     equ   15
0048               ***************************************************************
0049               * Define register equates
0050               ********|*****|*********************|**************************
0051      0002     config  equ   r2                    ; Config register
0052      0003     xconfig equ   r3                    ; Extended config register
0053      0004     tmp0    equ   r4                    ; Temp register 0
0054      0005     tmp1    equ   r5                    ; Temp register 1
0055      0006     tmp2    equ   r6                    ; Temp register 2
0056      0007     tmp3    equ   r7                    ; Temp register 3
0057      0008     tmp4    equ   r8                    ; Temp register 4
0058      0009     stack   equ   r9                    ; Stack pointer
0059      000E     vdpr01  equ   r14                   ; Copy of VDP#0 and VDP#1 bytes
0060      000F     vdprw   equ   r15                   ; Contains VDP read/write address
0061               ***************************************************************
0062               * Define MSB/LSB equates for registers
0063               ********|*****|*********************|**************************
0064      8300     r0hb    equ   ws1                   ; HI byte R0
0065      8301     r0lb    equ   ws1+1                 ; LO byte R0
0066      8302     r1hb    equ   ws1+2                 ; HI byte R1
0067      8303     r1lb    equ   ws1+3                 ; LO byte R1
0068      8304     r2hb    equ   ws1+4                 ; HI byte R2
0069      8305     r2lb    equ   ws1+5                 ; LO byte R2
0070      8306     r3hb    equ   ws1+6                 ; HI byte R3
0071      8307     r3lb    equ   ws1+7                 ; LO byte R3
0072      8308     r4hb    equ   ws1+8                 ; HI byte R4
0073      8309     r4lb    equ   ws1+9                 ; LO byte R4
0074      830A     r5hb    equ   ws1+10                ; HI byte R5
0075      830B     r5lb    equ   ws1+11                ; LO byte R5
0076      830C     r6hb    equ   ws1+12                ; HI byte R6
0077      830D     r6lb    equ   ws1+13                ; LO byte R6
0078      830E     r7hb    equ   ws1+14                ; HI byte R7
0079      830F     r7lb    equ   ws1+15                ; LO byte R7
0080      8310     r8hb    equ   ws1+16                ; HI byte R8
0081      8311     r8lb    equ   ws1+17                ; LO byte R8
0082      8312     r9hb    equ   ws1+18                ; HI byte R9
0083      8313     r9lb    equ   ws1+19                ; LO byte R9
0084      8314     r10hb   equ   ws1+20                ; HI byte R10
0085      8315     r10lb   equ   ws1+21                ; LO byte R10
0086      8316     r11hb   equ   ws1+22                ; HI byte R11
0087      8317     r11lb   equ   ws1+23                ; LO byte R11
0088      8318     r12hb   equ   ws1+24                ; HI byte R12
0089      8319     r12lb   equ   ws1+25                ; LO byte R12
0090      831A     r13hb   equ   ws1+26                ; HI byte R13
0091      831B     r13lb   equ   ws1+27                ; LO byte R13
0092      831C     r14hb   equ   ws1+28                ; HI byte R14
0093      831D     r14lb   equ   ws1+29                ; LO byte R14
0094      831E     r15hb   equ   ws1+30                ; HI byte R15
0095      831F     r15lb   equ   ws1+31                ; LO byte R15
0096               ********|*****|*********************|**************************
0097      8308     tmp0hb  equ   ws1+8                 ; HI byte R4
0098      8309     tmp0lb  equ   ws1+9                 ; LO byte R4
0099      830A     tmp1hb  equ   ws1+10                ; HI byte R5
0100      830B     tmp1lb  equ   ws1+11                ; LO byte R5
0101      830C     tmp2hb  equ   ws1+12                ; HI byte R6
0102      830D     tmp2lb  equ   ws1+13                ; LO byte R6
0103      830E     tmp3hb  equ   ws1+14                ; HI byte R7
0104      830F     tmp3lb  equ   ws1+15                ; LO byte R7
0105      8310     tmp4hb  equ   ws1+16                ; HI byte R8
0106      8311     tmp4lb  equ   ws1+17                ; LO byte R8
0107               ********|*****|*********************|**************************
0108      8314     btihi   equ   ws1+20                ; Highest slot in use (HI byte R10)
0109      831A     bvdpst  equ   ws1+26                ; Copy of VDP status register (HI byte R13)
0110      831C     vdpr0   equ   ws1+28                ; High byte of R14. Is VDP#0 byte
0111      831D     vdpr1   equ   ws1+29                ; Low byte  of R14. Is VDP#1 byte
0112               ***************************************************************
                   < runlib.asm
0084                       copy  "portaddr.equ"             ; runlib hardware port addresses
     **** ****     > portaddr.equ
0001               * FILE......: portaddr.equ
0002               * Purpose...: Equates for hardware port addresses and vectors
0003               
0004               ***************************************************************
0005               * Equates for VDP, GROM, SOUND, SPEECH ports
0006               ********|*****|*********************|**************************
0007      8400     sound   equ   >8400                 ; Sound generator address
0008      8800     vdpr    equ   >8800                 ; VDP read data window address
0009      8C00     vdpw    equ   >8c00                 ; VDP write data window address
0010      8802     vdps    equ   >8802                 ; VDP status register
0011      8C02     vdpa    equ   >8c02                 ; VDP address register
0012      9C02     grmwa   equ   >9c02                 ; GROM set write address
0013      9802     grmra   equ   >9802                 ; GROM set read address
0014      9800     grmrd   equ   >9800                 ; GROM read byte
0015      9C00     grmwd   equ   >9c00                 ; GROM write byte
0016      9000     spchrd  equ   >9000                 ; Address of speech synth Read Data Register
0017      9400     spchwt  equ   >9400                 ; Address of speech synth Write Data Register
0018               
0019      000E     kscan   equ   >000e                 ; Address of KSCAN routine in console ROM 0
                   < runlib.asm
0085                       copy  "param.equ"                ; runlib parameters
     **** ****     > param.equ
0001               * FILE......: param.equ
0002               * Purpose...: Equates used for subroutine parameters
0003               
0004               ***************************************************************
0005               * Subroutine parameter equates
0006               ***************************************************************
0007      FFFF     eol     equ   >ffff                 ; End-Of-List
0008      FFFF     nofont  equ   >ffff                 ; Skip loading font in RUNLIB
0009      0000     norep   equ   0                     ; PUTBOX > Value for P3. Don't repeat box
0010      3030     num1    equ   >3030                 ; MKNUM  > ASCII 0-9, leading 0's
0011      3020     num2    equ   >3020                 ; MKNUM  > ASCII 0-9, leading spaces
0012      0007     sdopt1  equ   7                     ; SDPLAY > 111 (Player on, repeat, tune in CPU memory)
0013      0005     sdopt2  equ   5                     ; SDPLAY > 101 (Player on, no repeat, tune in CPU memory)
0014      0006     sdopt3  equ   6                     ; SDPLAY > 110 (Player on, repeat, tune in VRAM)
0015      0004     sdopt4  equ   4                     ; SDPLAY > 100 (Player on, no repeat, tune in VRAM)
0016      0000     fnopt1  equ   >0000                 ; LDFNT  > Load TI title screen font
0017      0006     fnopt2  equ   >0006                 ; LDFNT  > Load upper case font
0018      000C     fnopt3  equ   >000c                 ; LDFNT  > Load upper/lower case font
0019      0012     fnopt4  equ   >0012                 ; LDFNT  > Load lower case font
0020      8000     fnopt5  equ   >8000                 ; LDFNT  > Load TI title screen font  & bold
0021      8006     fnopt6  equ   >8006                 ; LDFNT  > Load upper case font       & bold
0022      800C     fnopt7  equ   >800c                 ; LDFNT  > Load upper/lower case font & bold
0023      8012     fnopt8  equ   >8012                 ; LDFNT  > Load lower case font       & bold
0024               *--------------------------------------------------------------
0025               *   Speech player
0026               *--------------------------------------------------------------
0027      0060     talkon  equ   >60                   ; 'start talking' command code for speech synth
0028      00FF     talkof  equ   >ff                   ; 'stop talking' command code for speech synth
0029      6000     spkon   equ   >6000                 ; 'start talking' command code for speech synth
0030      FF00     spkoff  equ   >ff00                 ; 'stop talking' command code for speech synth
                   < runlib.asm
0086                       copy  "classic99.equ"            ; classic99 emulator opcodes
     **** ****     > classic99.equ
0001               * FILE......: classic99.equ
0002               * Purpose...: Extra opcodes for the classic99 emulator
0003               
0004               ***************************************************************
0005               *              Extra opcodes for classic99
0006               ********|*****|*********************|**************************
0007      0110     c99_norm      equ  >0110            ; CPU normal
0008      0111     c99_ovrd      equ  >0111            ; CPU overdrive
0009      0112     c99_smax      equ  >0112            ; System Maximum
0010      0113     c99_brk       equ  >0113            ; Breakpoint
0011      0114     c99_quit      equ  >0114            ; Quit emulator
0012               *--------------------------------------------------------------
0013               * Attention:
0014               * Debug opcodes are part of a 3 words instruction!
0015               * See classic99 user manual for details on proper usage.
0016               *--------------------------------------------------------------
0017      0120     c99_dbgr0     equ  >0120            ; debug printf R0
0018      0121     c99_dbgr1     equ  >0121            ; debug printf R1
0019      0122     c99_dbgr2     equ  >0122            ; debug printf R2
0020      0123     c99_dbgr3     equ  >0123            ; debug printf R3
0021      0124     c99_dbgr4     equ  >0124            ; debug printf R4
0022      0125     c99_dbgr5     equ  >0125            ; debug printf R5
0023      0126     c99_dbgr6     equ  >0126            ; debug printf R6
0024      0127     c99_dbgr7     equ  >0127            ; debug printf R7
0025      0128     c99_dbgr8     equ  >0128            ; debug printf R8
0026      0129     c99_dbgr9     equ  >0129            ; debug printf R9
0027      012A     c99_dbgr10    equ  >012a            ; debug printf R10
0028      012B     c99_dbgr11    equ  >012b            ; debug printf R11
0029      012C     c99_dbgr12    equ  >012c            ; debug printf R12
0030      012D     c99_dbgr13    equ  >012d            ; debug printf R13
0031      012E     c99_dbgr14    equ  >012e            ; debug printf R14
0032      012F     c99_dbgr15    equ  >012f            ; debug printf R15
                   < runlib.asm
0087               
0091               
0092                       copy  "cpu_constants.asm"        ; Define constants for word/MSB/LSB
     **** ****     > cpu_constants.asm
0001               * FILE......: cpu_constants.asm
0002               * Purpose...: Constants used by Spectra2 and for own use
0003               
0004               ***************************************************************
0005               *                      Some constants
0006               ********|*****|*********************|**************************
0007               
0008               *--------------------------------------------------------------
0009               * Word values
0010               *--------------------------------------------------------------
0011               ;                                   ;       0123456789ABCDEF
0012 2000 0000     w$0000  data  >0000                 ; >0000 0000000000000000
0013 2002 0001     w$0001  data  >0001                 ; >0001 0000000000000001
0014 2004 0002     w$0002  data  >0002                 ; >0002 0000000000000010
0015 2006 0004     w$0004  data  >0004                 ; >0004 0000000000000100
0016 2008 0008     w$0008  data  >0008                 ; >0008 0000000000001000
0017 200A 0010     w$0010  data  >0010                 ; >0010 0000000000010000
0018 200C 0020     w$0020  data  >0020                 ; >0020 0000000000100000
0019 200E 0040     w$0040  data  >0040                 ; >0040 0000000001000000
0020 2010 0080     w$0080  data  >0080                 ; >0080 0000000010000000
0021 2012 0100     w$0100  data  >0100                 ; >0100 0000000100000000
0022 2014 0200     w$0200  data  >0200                 ; >0200 0000001000000000
0023 2016 0400     w$0400  data  >0400                 ; >0400 0000010000000000
0024 2018 0800     w$0800  data  >0800                 ; >0800 0000100000000000
0025 201A 1000     w$1000  data  >1000                 ; >1000 0001000000000000
0026 201C 2000     w$2000  data  >2000                 ; >2000 0010000000000000
0027 201E 4000     w$4000  data  >4000                 ; >4000 0100000000000000
0028 2020 8000     w$8000  data  >8000                 ; >8000 1000000000000000
0029 2022 FFFF     w$ffff  data  >ffff                 ; >ffff 1111111111111111
0030 2024 D000     w$d000  data  >d000                 ; >d000
0031               *--------------------------------------------------------------
0032               * Byte values - High byte (=MSB) for byte operations
0033               *--------------------------------------------------------------
0034      2000     hb$00   equ   w$0000                ; >0000
0035      2012     hb$01   equ   w$0100                ; >0100
0036      2014     hb$02   equ   w$0200                ; >0200
0037      2016     hb$04   equ   w$0400                ; >0400
0038      2018     hb$08   equ   w$0800                ; >0800
0039      201A     hb$10   equ   w$1000                ; >1000
0040      201C     hb$20   equ   w$2000                ; >2000
0041      201E     hb$40   equ   w$4000                ; >4000
0042      2020     hb$80   equ   w$8000                ; >8000
0043      2024     hb$d0   equ   w$d000                ; >d000
0044               *--------------------------------------------------------------
0045               * Byte values - Low byte (=LSB) for byte operations
0046               *--------------------------------------------------------------
0047      2000     lb$00   equ   w$0000                ; >0000
0048      2002     lb$01   equ   w$0001                ; >0001
0049      2004     lb$02   equ   w$0002                ; >0002
0050      2006     lb$04   equ   w$0004                ; >0004
0051      2008     lb$08   equ   w$0008                ; >0008
0052      200A     lb$10   equ   w$0010                ; >0010
0053      200C     lb$20   equ   w$0020                ; >0020
0054      200E     lb$40   equ   w$0040                ; >0040
0055      2010     lb$80   equ   w$0080                ; >0080
0056               *--------------------------------------------------------------
0057               * Bit values
0058               *--------------------------------------------------------------
0059               ;                                   ;       0123456789ABCDEF
0060      2002     wbit15  equ   w$0001                ; >0001 0000000000000001
0061      2004     wbit14  equ   w$0002                ; >0002 0000000000000010
0062      2006     wbit13  equ   w$0004                ; >0004 0000000000000100
0063      2008     wbit12  equ   w$0008                ; >0008 0000000000001000
0064      200A     wbit11  equ   w$0010                ; >0010 0000000000010000
0065      200C     wbit10  equ   w$0020                ; >0020 0000000000100000
0066      200E     wbit9   equ   w$0040                ; >0040 0000000001000000
0067      2010     wbit8   equ   w$0080                ; >0080 0000000010000000
0068      2012     wbit7   equ   w$0100                ; >0100 0000000100000000
0069      2014     wbit6   equ   w$0200                ; >0200 0000001000000000
0070      2016     wbit5   equ   w$0400                ; >0400 0000010000000000
0071      2018     wbit4   equ   w$0800                ; >0800 0000100000000000
0072      201A     wbit3   equ   w$1000                ; >1000 0001000000000000
0073      201C     wbit2   equ   w$2000                ; >2000 0010000000000000
0074      201E     wbit1   equ   w$4000                ; >4000 0100000000000000
0075      2020     wbit0   equ   w$8000                ; >8000 1000000000000000
                   < runlib.asm
0093                       copy  "config.equ"               ; Equates for bits in config register
     **** ****     > config.equ
0001               * FILE......: config.equ
0002               * Purpose...: Equates for bits in config register
0003               
0004               ***************************************************************
0005               * The config register equates
0006               *--------------------------------------------------------------
0007               * Configuration flags
0008               * ===================
0009               *
0010               * ; 15  Sound player: tune source       1=ROM/RAM      0=VDP MEMORY
0011               * ; 14  Sound player: repeat tune       1=yes          0=no
0012               * ; 13  Sound player: enabled           1=yes          0=no (or pause)
0013               * ; 12  VDP9918 sprite collision?       1=yes          0=no
0014               * ; 11  Keyboard: ANY key pressed       1=yes          0=no
0015               * ; 10  Keyboard: Alpha lock key down   1=yes          0=no
0016               * ; 09  Timer: Kernel thread enabled    1=yes          0=no
0017               * ; 08  Timer: Block kernel thread      1=yes          0=no
0018               * ; 07  Timer: User hook enabled        1=yes          0=no
0019               * ; 06  Timer: Block user hook          1=yes          0=no
0020               * ; 05  Speech synthesizer present      1=yes          0=no
0021               * ; 04  Speech player: busy             1=yes          0=no
0022               * ; 03  Speech player: enabled          1=yes          0=no
0023               * ; 02  VDP9918 PAL version             1=yes(50)      0=no(60)
0024               * ; 01  F18A present                    1=on           0=off
0025               * ; 00  Subroutine state flag           1=on           0=off
0026               ********|*****|*********************|**************************
0027      201C     palon   equ   wbit2                 ; bit 2=1   (VDP9918 PAL version)
0028      2012     enusr   equ   wbit7                 ; bit 7=1   (Enable user hook)
0029      200E     enknl   equ   wbit9                 ; bit 9=1   (Enable kernel thread)
0030      200A     anykey  equ   wbit11                ; BIT 11 in the CONFIG register
0031               ***************************************************************
                   < runlib.asm
0094                       copy  "cpu_crash.asm"            ; CPU crash handler
     **** ****     > cpu_crash.asm
0001               * FILE......: cpu_crash.asm
0002               * Purpose...: Custom crash handler module
0003               
0004               
0005               ***************************************************************
0006               * cpu.crash - CPU program crashed handler
0007               ***************************************************************
0008               *  bl   @cpu.crash
0009               *--------------------------------------------------------------
0010               * Crash and halt system. Upon crash entry register contents are
0011               * copied to the memory region >ffe0 - >fffe and displayed after
0012               * resetting the spectra2 runtime library, video modes, etc.
0013               *
0014               * Diagnostics
0015               * >ffce  caller address
0016               *
0017               * Register contents
0018               * >ffdc  wp
0019               * >ffde  st
0020               * >ffe0  r0
0021               * >ffe2  r1
0022               * >ffe4  r2  (config)
0023               * >ffe6  r3
0024               * >ffe8  r4  (tmp0)
0025               * >ffea  r5  (tmp1)
0026               * >ffec  r6  (tmp2)
0027               * >ffee  r7  (tmp3)
0028               * >fff0  r8  (tmp4)
0029               * >fff2  r9  (stack)
0030               * >fff4  r10
0031               * >fff6  r11
0032               * >fff8  r12
0033               * >fffa  r13
0034               * >fffc  r14
0035               * >fffe  r15
0036               ********|*****|*********************|**************************
0037               cpu.crash:
0038 2026 022B  22         ai    r11,-4                ; Remove opcode offset
     2028 FFFC     
0039               *--------------------------------------------------------------
0040               *    Save registers to high memory
0041               *--------------------------------------------------------------
0042 202A C800  38         mov   r0,@>ffe0
     202C FFE0     
0043 202E C801  38         mov   r1,@>ffe2
     2030 FFE2     
0044 2032 C802  38         mov   r2,@>ffe4
     2034 FFE4     
0045 2036 C803  38         mov   r3,@>ffe6
     2038 FFE6     
0046 203A C804  38         mov   r4,@>ffe8
     203C FFE8     
0047 203E C805  38         mov   r5,@>ffea
     2040 FFEA     
0048 2042 C806  38         mov   r6,@>ffec
     2044 FFEC     
0049 2046 C807  38         mov   r7,@>ffee
     2048 FFEE     
0050 204A C808  38         mov   r8,@>fff0
     204C FFF0     
0051 204E C809  38         mov   r9,@>fff2
     2050 FFF2     
0052 2052 C80A  38         mov   r10,@>fff4
     2054 FFF4     
0053 2056 C80B  38         mov   r11,@>fff6
     2058 FFF6     
0054 205A C80C  38         mov   r12,@>fff8
     205C FFF8     
0055 205E C80D  38         mov   r13,@>fffa
     2060 FFFA     
0056 2062 C80E  38         mov   r14,@>fffc
     2064 FFFC     
0057 2066 C80F  38         mov   r15,@>ffff
     2068 FFFF     
0058 206A 02A0  12         stwp  r0
0059 206C C800  38         mov   r0,@>ffdc
     206E FFDC     
0060 2070 02C0  12         stst  r0
0061 2072 C800  38         mov   r0,@>ffde
     2074 FFDE     
0062               *--------------------------------------------------------------
0063               *    Reset system
0064               *--------------------------------------------------------------
0065               cpu.crash.reset:
0066 2076 02E0  18         lwpi  ws1                   ; Activate workspace 1
     2078 8300     
0067 207A 04E0  26         clr   @>8302                ; Reset exit flag (R1 in workspace WS1!)
     207C 8302     
0068 207E 0200  20         li    r0,>4a4a              ; Note that a crash occured (Flag = >4a4a)
     2080 4A4A     
0069 2082 0460  28         b     @runli1               ; Initialize system again (VDP, Memory, etc.)
     2084 2F2A     
0070               *--------------------------------------------------------------
0071               *    Show diagnostics after system reset
0072               *--------------------------------------------------------------
0073               cpu.crash.main:
0074                       ;------------------------------------------------------
0075                       ; Load "32x24" video mode & font
0076                       ;------------------------------------------------------
0077 2086 06A0  32         bl    @vidtab               ; Load video mode table into VDP
     2088 22F8     
0078 208A 21F2                   data graph1           ; \ i  p0 = pointer to video mode table
0079                                                   ; /
0080               
0081 208C 06A0  32         bl    @ldfnt
     208E 2360     
0082 2090 0900                   data >0900,fnopt3     ; Load font (upper & lower case)
     2092 000C     
0083               
0084 2094 06A0  32         bl    @filv
     2096 228E     
0085 2098 0000                   data >0000,32,32*24   ; Clear screen
     209A 0020     
     209C 0300     
0086               
0087 209E 06A0  32         bl    @filv
     20A0 228E     
0088 20A2 0380                   data >0380,>f0,32*24  ; Load color table
     20A4 00F0     
     20A6 0300     
0089                       ;------------------------------------------------------
0090                       ; Show crash address
0091                       ;------------------------------------------------------
0092 20A8 06A0  32         bl    @putat                ; Show crash message
     20AA 2442     
0093 20AC 0000                   data >0000,cpu.crash.msg.crashed
     20AE 2182     
0094               
0095 20B0 06A0  32         bl    @puthex               ; Put hex value on screen
     20B2 29B6     
0096 20B4 0015                   byte 0,21             ; \ i  p0 = YX position
0097 20B6 FFF6                   data >fff6            ; | i  p1 = Pointer to 16 bit word
0098 20B8 A100                   data rambuf           ; | i  p2 = Pointer to ram buffer
0099 20BA 4130                   byte 65,48            ; | i  p3 = MSB offset for ASCII digit a-f
0100                                                   ; /         LSB offset for ASCII digit 0-9
0101                       ;------------------------------------------------------
0102                       ; Show caller address
0103                       ;------------------------------------------------------
0104 20BC 06A0  32         bl    @putat                ; Show caller message
     20BE 2442     
0105 20C0 0100                   data >0100,cpu.crash.msg.caller
     20C2 2198     
0106               
0107 20C4 06A0  32         bl    @puthex               ; Put hex value on screen
     20C6 29B6     
0108 20C8 0115                   byte 1,21             ; \ i  p0 = YX position
0109 20CA FFCE                   data >ffce            ; | i  p1 = Pointer to 16 bit word
0110 20CC A100                   data rambuf           ; | i  p2 = Pointer to ram buffer
0111 20CE 4130                   byte 65,48            ; | i  p3 = MSB offset for ASCII digit a-f
0112                                                   ; /         LSB offset for ASCII digit 0-9
0113                       ;------------------------------------------------------
0114                       ; Display labels
0115                       ;------------------------------------------------------
0116 20D0 06A0  32         bl    @putat
     20D2 2442     
0117 20D4 0300                   byte 3,0
0118 20D6 21B4                   data cpu.crash.msg.wp
0119 20D8 06A0  32         bl    @putat
     20DA 2442     
0120 20DC 0400                   byte 4,0
0121 20DE 21BA                   data cpu.crash.msg.st
0122                       ;------------------------------------------------------
0123                       ; Show crash registers WP, ST, R0 - R15
0124                       ;------------------------------------------------------
0125 20E0 06A0  32         bl    @at                   ; Put cursor at YX
     20E2 26E0     
0126 20E4 0304                   byte 3,4              ; \ i p0 = YX position
0127                                                   ; /
0128               
0129 20E6 0204  20         li    tmp0,>ffdc            ; Crash registers >ffdc - >ffff
     20E8 FFDC     
0130 20EA 04C6  14         clr   tmp2                  ; Loop counter
0131               
0132               cpu.crash.showreg:
0133 20EC C034  30         mov   *tmp0+,r0             ; Move crash register content to r0
0134               
0135 20EE 0649  14         dect  stack
0136 20F0 C644  30         mov   tmp0,*stack           ; Push tmp0
0137 20F2 0649  14         dect  stack
0138 20F4 C645  30         mov   tmp1,*stack           ; Push tmp1
0139 20F6 0649  14         dect  stack
0140 20F8 C646  30         mov   tmp2,*stack           ; Push tmp2
0141                       ;------------------------------------------------------
0142                       ; Display crash register number
0143                       ;------------------------------------------------------
0144               cpu.crash.showreg.label:
0145 20FA C046  18         mov   tmp2,r1               ; Save register number
0146 20FC 0286  22         ci    tmp2,1                ; Skip labels WP/ST?
     20FE 0001     
0147 2100 1220  14         jle   cpu.crash.showreg.content
0148                                                   ; Yes, skip
0149               
0150 2102 0641  14         dect  r1                    ; Adjust because of "dummy" WP/ST registers
0151 2104 06A0  32         bl    @mknum
     2106 29C0     
0152 2108 8302                   data r1hb             ; \ i  p0 = Pointer to 16 bit unsigned word
0153 210A A100                   data rambuf           ; | i  p1 = Pointer to ram buffer
0154 210C 3020                   byte 48,32            ; | i  p2 = MSB offset for ASCII digit a-f
0155                                                   ; /         LSB offset for ASCII digit 0-9
0156               
0157 210E 06A0  32         bl    @setx                 ; Set cursor X position
     2110 26F6     
0158 2112 0000                   data 0                ; \ i  p0 =  Cursor Y position
0159                                                   ; /
0160               
0161 2114 0204  20         li    tmp0,>0400            ; Set string length-prefix byte
     2116 0400     
0162 2118 D804  38         movb  tmp0,@rambuf          ;
     211A A100     
0163               
0164 211C 06A0  32         bl    @putstr               ; Put length-byte prefixed string at current YX
     211E 241E     
0165 2120 A100                   data rambuf           ; \ i  p0 = Pointer to ram buffer
0166                                                   ; /
0167               
0168 2122 06A0  32         bl    @setx                 ; Set cursor X position
     2124 26F6     
0169 2126 0002                   data 2                ; \ i  p0 =  Cursor Y position
0170                                                   ; /
0171               
0172 2128 0281  22         ci    r1,10
     212A 000A     
0173 212C 1102  14         jlt   !
0174 212E 0620  26         dec   @wyx                  ; x=x-1
     2130 832A     
0175               
0176 2132 06A0  32 !       bl    @putstr
     2134 241E     
0177 2136 21AE                   data cpu.crash.msg.r
0178               
0179 2138 06A0  32         bl    @mknum
     213A 29C0     
0180 213C 8302                   data r1hb             ; \ i  p0 = Pointer to 16 bit unsigned word
0181 213E A100                   data rambuf           ; | i  p1 = Pointer to ram buffer
0182 2140 3020                   byte 48,32            ; | i  p2 = MSB offset for ASCII digit a-f
0183                                                   ; /         LSB offset for ASCII digit 0-9
0184                       ;------------------------------------------------------
0185                       ; Display crash register content
0186                       ;------------------------------------------------------
0187               cpu.crash.showreg.content:
0188 2142 06A0  32         bl    @mkhex                ; Convert hex word to string
     2144 2932     
0189 2146 8300                   data r0hb             ; \ i  p0 = Pointer to 16 bit word
0190 2148 A100                   data rambuf           ; | i  p1 = Pointer to ram buffer
0191 214A 4130                   byte 65,48            ; | i  p2 = MSB offset for ASCII digit a-f
0192                                                   ; /         LSB offset for ASCII digit 0-9
0193               
0194 214C 06A0  32         bl    @setx                 ; Set cursor X position
     214E 26F6     
0195 2150 0004                   data 4                ; \ i  p0 =  Cursor Y position
0196                                                   ; /
0197               
0198 2152 06A0  32         bl    @putstr               ; Put '  >'
     2154 241E     
0199 2156 21B0                   data cpu.crash.msg.marker
0200               
0201 2158 06A0  32         bl    @setx                 ; Set cursor X position
     215A 26F6     
0202 215C 0007                   data 7                ; \ i  p0 =  Cursor Y position
0203                                                   ; /
0204               
0205 215E 0204  20         li    tmp0,>0400            ; Set string length-prefix byte
     2160 0400     
0206 2162 D804  38         movb  tmp0,@rambuf          ;
     2164 A100     
0207               
0208 2166 06A0  32         bl    @putstr               ; Put length-byte prefixed string at current YX
     2168 241E     
0209 216A A100                   data rambuf           ; \ i  p0 = Pointer to ram buffer
0210                                                   ; /
0211               
0212 216C C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0213 216E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0214 2170 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0215               
0216 2172 06A0  32         bl    @down                 ; y=y+1
     2174 26E6     
0217               
0218 2176 0586  14         inc   tmp2
0219 2178 0286  22         ci    tmp2,17
     217A 0011     
0220 217C 12B7  14         jle   cpu.crash.showreg     ; Show next register
0221                       ;------------------------------------------------------
0222                       ; Kernel takes over
0223                       ;------------------------------------------------------
0224 217E 0460  28         b     @cpu.crash.showbank   ; Expected to be included in
     2180 7F00     
0225               
0226               
0227 2182 1553     cpu.crash.msg.crashed      stri 'System crashed near >'
     2184 7973     
     2186 7465     
     2188 6D20     
     218A 6372     
     218C 6173     
     218E 6865     
     2190 6420     
     2192 6E65     
     2194 6172     
     2196 203E     
0228                                          even
0229 2198 1543     cpu.crash.msg.caller       stri 'Caller address near >'
     219A 616C     
     219C 6C65     
     219E 7220     
     21A0 6164     
     21A2 6472     
     21A4 6573     
     21A6 7320     
     21A8 6E65     
     21AA 6172     
     21AC 203E     
0230                                          even
0231 21AE 0152     cpu.crash.msg.r            stri 'R'
0232                                          even
0233 21B0 0320     cpu.crash.msg.marker       stri '  >'
     21B2 203E     
0234                                          even
0235 21B4 042A     cpu.crash.msg.wp           stri '**WP'
     21B6 2A57     
     21B8 50       
0236                                          even
0237 21BA 042A     cpu.crash.msg.st           stri '**ST'
     21BC 2A53     
     21BE 54       
0238                                          even
0239 21C0 1753     cpu.crash.msg.source       stri 'Source    %%build_src%%'
     21C2 6F75     
     21C4 7263     
     21C6 6520     
     21C8 2020     
     21CA 2025     
     21CC 2562     
     21CE 7569     
     21D0 6C64     
     21D2 5F73     
     21D4 7263     
     21D6 2525     
0240                                          even
0241 21D8 1842     cpu.crash.msg.id           stri 'Build-ID  %%build_date%%'
     21DA 7569     
     21DC 6C64     
     21DE 2D49     
     21E0 4420     
     21E2 2025     
     21E4 2562     
     21E6 7569     
     21E8 6C64     
     21EA 5F64     
     21EC 6174     
     21EE 6525     
     21F0 25       
0242                                          even
                   < runlib.asm
0095                       copy  "vdp_tables.asm"           ; Data used by runtime library
     **** ****     > vdp_tables.asm
0001               * FILE......: vdp_tables.a99
0002               * Purpose...: Video mode tables
0003               
0004               ***************************************************************
0005               * Graphics mode 1 (32 columns/24 rows)
0006               *--------------------------------------------------------------
0007 21F2 00E2     graph1  byte  >00,>e2,>00,>0e,>01,>06,>02,SPFBCK,0,32
     21F4 000E     
     21F6 0106     
     21F8 0204     
     21FA 0020     
0008               *
0009               * ; VDP#0 Control bits
0010               * ;      bit 6=0: M3 | Graphics 1 mode
0011               * ;      bit 7=0: Disable external VDP input
0012               * ; VDP#1 Control bits
0013               * ;      bit 0=1: 16K selection
0014               * ;      bit 1=1: Enable display
0015               * ;      bit 2=1: Enable VDP interrupt
0016               * ;      bit 3=0: M1 \ Graphics 1 mode
0017               * ;      bit 4=0: M2 /
0018               * ;      bit 5=0: reserved
0019               * ;      bit 6=1: 16x16 sprites
0020               * ;      bit 7=0: Sprite magnification (1x)
0021               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0022               * ; VDP#3 PCT (Pattern color table)      at >0380  (>0E * >040)
0023               * ; VDP#4 PDT (Pattern descriptor table) at >0800  (>01 * >800)
0024               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0025               * ; VDP#6 SPT (Sprite pattern table)     at >1000  (>02 * >800)
0026               * ; VDP#7 Set screen background color
0027               
0028               
0029               ***************************************************************
0030               * Textmode (40 columns/24 rows)
0031               *--------------------------------------------------------------
0032 21FC 00F2     tx4024  byte  >00,>f2,>00,>0e,>01,>06,>00,SPFCLR,0,40
     21FE 000E     
     2200 0106     
     2202 00F4     
     2204 0028     
0033               *
0034               * ; VDP#0 Control bits
0035               * ;      bit 6=0: M3 | Graphics 1 mode
0036               * ;      bit 7=0: Disable external VDP input
0037               * ; VDP#1 Control bits
0038               * ;      bit 0=1: 16K selection
0039               * ;      bit 1=1: Enable display
0040               * ;      bit 2=1: Enable VDP interrupt
0041               * ;      bit 3=1: M1 \ TEXT MODE
0042               * ;      bit 4=0: M2 /
0043               * ;      bit 5=0: reserved
0044               * ;      bit 6=1: 16x16 sprites
0045               * ;      bit 7=0: Sprite magnification (1x)
0046               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0047               * ; VDP#3 PCT (Pattern color table)      at >0380  (>0E * >040)
0048               * ; VDP#4 PDT (Pattern descriptor table) at >0800  (>01 * >800)
0049               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0050               * ; VDP#6 SPT (Sprite pattern table)     at >0000  (>00 * >800)
0051               * ; VDP#7 Set foreground/background color
0052               ***************************************************************
0053               
0054               
0055               ***************************************************************
0056               * Textmode (80 columns, 24 rows) - F18A
0057               *--------------------------------------------------------------
0058 2206 04F0     tx8024  byte  >04,>f0,>00,>3f,>02,>40,>03,SPFCLR,0,80
     2208 003F     
     220A 0240     
     220C 03F4     
     220E 0050     
0059               *
0060               * ; VDP#0 Control bits
0061               * ;      bit 6=0: M3 | Graphics 1 mode
0062               * ;      bit 7=0: Disable external VDP input
0063               * ; VDP#1 Control bits
0064               * ;      bit 0=1: 16K selection
0065               * ;      bit 1=1: Enable display
0066               * ;      bit 2=1: Enable VDP interrupt
0067               * ;      bit 3=1: M1 \ TEXT MODE
0068               * ;      bit 4=0: M2 /
0069               * ;      bit 5=0: reserved
0070               * ;      bit 6=0: 8x8 sprites
0071               * ;      bit 7=0: Sprite magnification (1x)
0072               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0073               * ; VDP#3 PCT (Pattern color table)      at >0FC0  (>3F * >040)
0074               * ; VDP#4 PDT (Pattern descriptor table) at >1000  (>02 * >800)
0075               * ; VDP#5 SAT (sprite attribute list)    at >2000  (>40 * >080)
0076               * ; VDP#6 SPT (Sprite pattern table)     at >1800  (>03 * >800)
0077               * ; VDP#7 Set foreground/background color
0078               ***************************************************************
                   < runlib.asm
0096                       copy  "basic_cpu_vdp.asm"        ; Basic CPU & VDP functions
     **** ****     > basic_cpu_vdp.asm
0001               * FILE......: basic_cpu_vdp.asm
0002               * Purpose...: Basic CPU & VDP functions used by other modules
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *       Support Machine Code for copy & fill functions
0006               *//////////////////////////////////////////////////////////////
0007               
0008               *--------------------------------------------------------------
0009               * ; Machine code for tight loop.
0010               * ; The MOV operation at MCLOOP must be injected by the calling routine.
0011               *--------------------------------------------------------------
0012               *       DATA  >????                 ; \ mcloop  mov   ...
0013 2210 0606     mccode  data  >0606                 ; |         dec   r6 (tmp2)
0014 2212 16FD             data  >16fd                 ; |         jne   mcloop
0015 2214 045B             data  >045b                 ; /         b     *r11
0016               *--------------------------------------------------------------
0017               * ; Machine code for reading from the speech synthesizer
0018               * ; The SRC instruction takes 12 uS for execution in scratchpad RAM.
0019               * ; Is required for the 12 uS delay. It destroys R5.
0020               *--------------------------------------------------------------
0021 2216 D114     spcode  data  >d114                 ; \         movb  *r4,r4 (tmp0)
0022 2218 0BC5             data  >0bc5                 ; /         src   r5,12  (tmp1)
0023                       even
0024               
0025               
0026               ***************************************************************
0027               * loadmc - Load machine code into scratchpad  >8322 - >8328
0028               ***************************************************************
0029               *  bl  @loadmc
0030               *--------------------------------------------------------------
0031               *  REMARKS
0032               *  Machine instruction in location @>8320 will be set by
0033               *  SP2 copy/fill routine that is called later on.
0034               ********|*****|*********************|**************************
0035               loadmc:
0036 221A 0201  20         li    r1,mccode             ; Machinecode to patch
     221C 2210     
0037 221E 0202  20         li    r2,mcloop+2           ; Scratch-pad reserved for machine code
     2220 8322     
0038 2222 CCB1  46         mov   *r1+,*r2+             ; Copy 1st instruction
0039 2224 CCB1  46         mov   *r1+,*r2+             ; Copy 2nd instruction
0040 2226 CCB1  46         mov   *r1+,*r2+             ; Copy 3rd instruction
0041 2228 045B  20         b     *r11                  ; Return to caller
0042               
0043               
0044               *//////////////////////////////////////////////////////////////
0045               *                    STACK SUPPORT FUNCTIONS
0046               *//////////////////////////////////////////////////////////////
0047               
0048               ***************************************************************
0049               * POPR. - Pop registers & return to caller
0050               ***************************************************************
0051               *  B  @POPRG.
0052               *--------------------------------------------------------------
0053               *  REMARKS
0054               *  R11 must be at stack bottom
0055               ********|*****|*********************|**************************
0056 222A C0F9  30 popr3   mov   *stack+,r3
0057 222C C0B9  30 popr2   mov   *stack+,r2
0058 222E C079  30 popr1   mov   *stack+,r1
0059 2230 C039  30 popr0   mov   *stack+,r0
0060 2232 C2F9  30 poprt   mov   *stack+,r11
0061 2234 045B  20         b     *r11
0062               
0063               
0064               
0065               *//////////////////////////////////////////////////////////////
0066               *                   MEMORY FILL FUNCTIONS
0067               *//////////////////////////////////////////////////////////////
0068               
0069               ***************************************************************
0070               * FILM - Fill CPU memory with byte
0071               ***************************************************************
0072               *  bl   @film
0073               *  data P0,P1,P2
0074               *--------------------------------------------------------------
0075               *  P0 = Memory start address
0076               *  P1 = Byte to fill
0077               *  P2 = Number of bytes to fill
0078               *--------------------------------------------------------------
0079               *  bl   @xfilm
0080               *
0081               *  TMP0 = Memory start address
0082               *  TMP1 = Byte to fill
0083               *  TMP2 = Number of bytes to fill
0084               ********|*****|*********************|**************************
0085 2236 C13B  30 film    mov   *r11+,tmp0            ; Memory start
0086 2238 C17B  30         mov   *r11+,tmp1            ; Byte to fill
0087 223A C1BB  30         mov   *r11+,tmp2            ; Repeat count
0088               *--------------------------------------------------------------
0089               * Assert
0090               *--------------------------------------------------------------
0091 223C C1C6  18 xfilm   mov   tmp2,tmp3             ; Bytes to fill = 0 ?
0092 223E 1604  14         jne   filchk                ; No, continue checking
0093               
0094 2240 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2242 FFCE     
0095 2244 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2246 2026     
0096               *--------------------------------------------------------------
0097               *       Check: 1 byte fill
0098               *--------------------------------------------------------------
0099 2248 D820  42 filchk  movb  @tmp1lb,@tmp1hb       ; Duplicate value
     224A 830B     
     224C 830A     
0100               
0101 224E 0286  22         ci    tmp2,1                ; Bytes to fill = 1 ?
     2250 0001     
0102 2252 1602  14         jne   filchk2
0103 2254 DD05  32         movb  tmp1,*tmp0+
0104 2256 045B  20         b     *r11                  ; Exit
0105               *--------------------------------------------------------------
0106               *       Check: 2 byte fill
0107               *--------------------------------------------------------------
0108 2258 0286  22 filchk2 ci    tmp2,2                ; Byte to fill = 2 ?
     225A 0002     
0109 225C 1603  14         jne   filchk3
0110 225E DD05  32         movb  tmp1,*tmp0+           ; Deal with possible uneven start address
0111 2260 DD05  32         movb  tmp1,*tmp0+
0112 2262 045B  20         b     *r11                  ; Exit
0113               *--------------------------------------------------------------
0114               *       Check: Handle uneven start address
0115               *--------------------------------------------------------------
0116 2264 C1C4  18 filchk3 mov   tmp0,tmp3
0117 2266 0247  22         andi  tmp3,1                ; TMP3=1 -> ODD else EVEN
     2268 0001     
0118 226A 1305  14         jeq   fil16b
0119 226C DD05  32         movb  tmp1,*tmp0+           ; Copy 1st byte
0120 226E 0606  14         dec   tmp2
0121 2270 0286  22         ci    tmp2,2                ; Do we only have 1 word left?
     2272 0002     
0122 2274 13F1  14         jeq   filchk2               ; Yes, copy word and exit
0123               *--------------------------------------------------------------
0124               *       Fill memory with 16 bit words
0125               *--------------------------------------------------------------
0126 2276 C1C6  18 fil16b  mov   tmp2,tmp3
0127 2278 0247  22         andi  tmp3,1                ; TMP3=1 -> ODD else EVEN
     227A 0001     
0128 227C 1301  14         jeq   dofill
0129 227E 0606  14         dec   tmp2                  ; Make TMP2 even
0130 2280 CD05  34 dofill  mov   tmp1,*tmp0+
0131 2282 0646  14         dect  tmp2
0132 2284 16FD  14         jne   dofill
0133               *--------------------------------------------------------------
0134               * Fill last byte if ODD
0135               *--------------------------------------------------------------
0136 2286 C1C7  18         mov   tmp3,tmp3
0137 2288 1301  14         jeq   fil.exit
0138 228A DD05  32         movb  tmp1,*tmp0+
0139               fil.exit:
0140 228C 045B  20         b     *r11
0141               
0142               
0143               ***************************************************************
0144               * FILV - Fill VRAM with byte
0145               ***************************************************************
0146               *  BL   @FILV
0147               *  DATA P0,P1,P2
0148               *--------------------------------------------------------------
0149               *  P0 = VDP start address
0150               *  P1 = Byte to fill
0151               *  P2 = Number of bytes to fill
0152               *--------------------------------------------------------------
0153               *  BL   @XFILV
0154               *
0155               *  TMP0 = VDP start address
0156               *  TMP1 = Byte to fill
0157               *  TMP2 = Number of bytes to fill
0158               ********|*****|*********************|**************************
0159 228E C13B  30 filv    mov   *r11+,tmp0            ; Memory start
0160 2290 C17B  30         mov   *r11+,tmp1            ; Byte to fill
0161 2292 C1BB  30         mov   *r11+,tmp2            ; Repeat count
0162               *--------------------------------------------------------------
0163               *    Setup VDP write address
0164               *--------------------------------------------------------------
0165 2294 0264  22 xfilv   ori   tmp0,>4000
     2296 4000     
0166 2298 06C4  14         swpb  tmp0
0167 229A D804  30         movb  tmp0,@vdpa
     229C 8C02     
0168 229E 06C4  14         swpb  tmp0
0169 22A0 D804  30         movb  tmp0,@vdpa
     22A2 8C02     
0170               *--------------------------------------------------------------
0171               *    Fill bytes in VDP memory
0172               *--------------------------------------------------------------
0173 22A4 020F  20         li    r15,vdpw              ; Set VDP write address
     22A6 8C00     
0174 22A8 06C5  14         swpb  tmp1
0175 22AA C820  46         mov   @filzz,@mcloop        ; Setup move command
     22AC 22B4     
     22AE 8320     
0176 22B0 0460  24         b     @mcloop               ; Write data to VDP
     22B2 8320     
0177               *--------------------------------------------------------------
0181 22B4 D7C5     filzz   data  >d7c5                 ; MOVB TMP1,*R15
0183               
0184               
0185               
0186               *//////////////////////////////////////////////////////////////
0187               *                  VDP LOW LEVEL FUNCTIONS
0188               *//////////////////////////////////////////////////////////////
0189               
0190               ***************************************************************
0191               * VDWA / VDRA - Setup VDP write or read address
0192               ***************************************************************
0193               *  BL   @VDWA
0194               *
0195               *  TMP0 = VDP destination address for write
0196               *--------------------------------------------------------------
0197               *  BL   @VDRA
0198               *
0199               *  TMP0 = VDP source address for read
0200               ********|*****|*********************|**************************
0201 22B6 0264  22 vdwa    ori   tmp0,>4000            ; Prepare VDP address for write
     22B8 4000     
0202 22BA 06C4  14 vdra    swpb  tmp0
0203 22BC D804  30         movb  tmp0,@vdpa
     22BE 8C02     
0204 22C0 06C4  14         swpb  tmp0
0205 22C2 D804  30         movb  tmp0,@vdpa            ; Set VDP address
     22C4 8C02     
0206 22C6 045B  20         b     *r11                  ; Exit
0207               
0208               ***************************************************************
0209               * VPUTB - VDP put single byte
0210               ***************************************************************
0211               *  BL @VPUTB
0212               *  DATA P0,P1
0213               *--------------------------------------------------------------
0214               *  P0 = VDP target address
0215               *  P1 = Byte to write
0216               ********|*****|*********************|**************************
0217 22C8 C13B  30 vputb   mov   *r11+,tmp0            ; Get VDP target address
0218 22CA C17B  30         mov   *r11+,tmp1            ; Get byte to write
0219               *--------------------------------------------------------------
0220               * Set VDP write address
0221               *--------------------------------------------------------------
0222 22CC 0264  22 xvputb  ori   tmp0,>4000            ; Prepare VDP address for write
     22CE 4000     
0223 22D0 06C4  14         swpb  tmp0                  ; \
0224 22D2 D804  30         movb  tmp0,@vdpa            ; | Set VDP write address
     22D4 8C02     
0225 22D6 06C4  14         swpb  tmp0                  ; | inlined @vdwa call
0226 22D8 D804  30         movb  tmp0,@vdpa            ; /
     22DA 8C02     
0227               *--------------------------------------------------------------
0228               * Write byte
0229               *--------------------------------------------------------------
0230 22DC 06C5  14         swpb  tmp1                  ; LSB to MSB
0231 22DE D7C5  30         movb  tmp1,*r15             ; Write byte
0232 22E0 045B  20         b     *r11                  ; Exit
0233               
0234               
0235               ***************************************************************
0236               * VGETB - VDP get single byte
0237               ***************************************************************
0238               *  bl   @vgetb
0239               *  data p0
0240               *--------------------------------------------------------------
0241               *  P0 = VDP source address
0242               *--------------------------------------------------------------
0243               *  bl   @xvgetb
0244               *
0245               *  tmp0 = VDP source address
0246               *--------------------------------------------------------------
0247               *  Output:
0248               *  tmp0 MSB = >00
0249               *  tmp0 LSB = VDP byte read
0250               ********|*****|*********************|**************************
0251 22E2 C13B  30 vgetb   mov   *r11+,tmp0            ; Get VDP source address
0252               *--------------------------------------------------------------
0253               * Set VDP read address
0254               *--------------------------------------------------------------
0255 22E4 06C4  14 xvgetb  swpb  tmp0                  ; \
0256 22E6 D804  30         movb  tmp0,@vdpa            ; | Set VDP read address
     22E8 8C02     
0257 22EA 06C4  14         swpb  tmp0                  ; | inlined @vdra call
0258 22EC D804  30         movb  tmp0,@vdpa            ; /
     22EE 8C02     
0259               *--------------------------------------------------------------
0260               * Read byte
0261               *--------------------------------------------------------------
0262 22F0 D120  30         movb  @vdpr,tmp0            ; Read byte
     22F2 8800     
0263 22F4 0984  32         srl   tmp0,8                ; Right align
0264 22F6 045B  20         b     *r11                  ; Exit
0265               
0266               
0267               ***************************************************************
0268               * VIDTAB - Dump videomode table
0269               ***************************************************************
0270               *  BL   @VIDTAB
0271               *  DATA P0
0272               *--------------------------------------------------------------
0273               *  P0 = Address of video mode table
0274               *--------------------------------------------------------------
0275               *  BL   @XIDTAB
0276               *
0277               *  TMP0 = Address of video mode table
0278               *--------------------------------------------------------------
0279               *  Remarks
0280               *  TMP1 = MSB is the VDP target register
0281               *         LSB is the value to write
0282               ********|*****|*********************|**************************
0283 22F8 C13B  30 vidtab  mov   *r11+,tmp0            ; Get video mode table
0284 22FA C394  26 xidtab  mov   *tmp0,r14             ; Store copy of VDP#0 and #1 in RAM
0285               *--------------------------------------------------------------
0286               * Calculate PNT base address
0287               *--------------------------------------------------------------
0288 22FC C144  18         mov   tmp0,tmp1
0289 22FE 05C5  14         inct  tmp1
0290 2300 D155  26         movb  *tmp1,tmp1            ; Get value for VDP#2
0291 2302 0245  22         andi  tmp1,>ff00            ; Only keep MSB
     2304 FF00     
0292 2306 0A25  20         sla   tmp1,2                ; TMP1 *= 400
0293 2308 C805  30         mov   tmp1,@wbase           ; Store calculated base
     230A 8328     
0294               *--------------------------------------------------------------
0295               * Dump VDP shadow registers
0296               *--------------------------------------------------------------
0297 230C 0205  20         li    tmp1,>8000            ; Start with VDP register 0
     230E 8000     
0298 2310 0206  20         li    tmp2,8
     2312 0008     
0299 2314 D834  40 vidta1  movb  *tmp0+,@tmp1lb        ; Write value to VDP register
     2316 830B     
0300 2318 06C5  14         swpb  tmp1
0301 231A D805  30         movb  tmp1,@vdpa
     231C 8C02     
0302 231E 06C5  14         swpb  tmp1
0303 2320 D805  30         movb  tmp1,@vdpa
     2322 8C02     
0304 2324 0225  22         ai    tmp1,>0100
     2326 0100     
0305 2328 0606  14         dec   tmp2
0306 232A 16F4  14         jne   vidta1                ; Next register
0307 232C C814  38         mov   *tmp0,@wcolmn         ; Store # of columns per row
     232E 833A     
0308 2330 045B  20         b     *r11
0309               
0310               
0311               ***************************************************************
0312               * PUTVR  - Put single VDP register
0313               ***************************************************************
0314               *  BL   @PUTVR
0315               *  DATA P0
0316               *--------------------------------------------------------------
0317               *  P0 = MSB is the VDP target register
0318               *       LSB is the value to write
0319               *--------------------------------------------------------------
0320               *  BL   @PUTVRX
0321               *
0322               *  TMP0 = MSB is the VDP target register
0323               *         LSB is the value to write
0324               ********|*****|*********************|**************************
0325 2332 C13B  30 putvr   mov   *r11+,tmp0
0326 2334 0264  22 putvrx  ori   tmp0,>8000
     2336 8000     
0327 2338 06C4  14         swpb  tmp0
0328 233A D804  30         movb  tmp0,@vdpa
     233C 8C02     
0329 233E 06C4  14         swpb  tmp0
0330 2340 D804  30         movb  tmp0,@vdpa
     2342 8C02     
0331 2344 045B  20         b     *r11
0332               
0333               
0334               ***************************************************************
0335               * PUTV01  - Put VDP registers #0 and #1
0336               ***************************************************************
0337               *  BL   @PUTV01
0338               ********|*****|*********************|**************************
0339 2346 C20B  18 putv01  mov   r11,tmp4              ; Save R11
0340 2348 C10E  18         mov   r14,tmp0
0341 234A 0984  32         srl   tmp0,8
0342 234C 06A0  32         bl    @putvrx               ; Write VR#0
     234E 2334     
0343 2350 0204  20         li    tmp0,>0100
     2352 0100     
0344 2354 D820  42         movb  @r14lb,@tmp0lb
     2356 831D     
     2358 8309     
0345 235A 06A0  32         bl    @putvrx               ; Write VR#1
     235C 2334     
0346 235E 0458  20         b     *tmp4                 ; Exit
0347               
0348               
0349               ***************************************************************
0350               * LDFNT - Load TI-99/4A font from GROM into VDP
0351               ***************************************************************
0352               *  BL   @LDFNT
0353               *  DATA P0,P1
0354               *--------------------------------------------------------------
0355               *  P0 = VDP Target address
0356               *  P1 = Font options
0357               *--------------------------------------------------------------
0358               * Uses registers tmp0-tmp4
0359               ********|*****|*********************|**************************
0360 2360 C20B  18 ldfnt   mov   r11,tmp4              ; Save R11
0361 2362 05CB  14         inct  r11                   ; Get 2nd parameter (font options)
0362 2364 C11B  26         mov   *r11,tmp0             ; Get P0
0363 2366 0242  22         andi  config,>7fff          ; CONFIG register bit 0=0
     2368 7FFF     
0364 236A 2120  32         coc   @wbit0,tmp0
     236C 2020     
0365 236E 1604  14         jne   ldfnt1
0366 2370 0262  22         ori   config,>8000          ; CONFIG register bit 0=1
     2372 8000     
0367 2374 0244  22         andi  tmp0,>7fff            ; Parameter value bit 0=0
     2376 7FFF     
0368               *--------------------------------------------------------------
0369               * Read font table address from GROM into tmp1
0370               *--------------------------------------------------------------
0371 2378 C124  34 ldfnt1  mov   @tmp006(tmp0),tmp0    ; Load GROM index address into tmp0
     237A 23E2     
0372 237C D804  38         movb  tmp0,@grmwa           ; Setup GROM source byte 1 for reading
     237E 9C02     
0373 2380 06C4  14         swpb  tmp0
0374 2382 D804  38         movb  tmp0,@grmwa           ; Setup GROM source byte 2 for reading
     2384 9C02     
0375 2386 D160  34         movb  @grmrd,tmp1           ; Read font table address byte 1
     2388 9800     
0376 238A 06C5  14         swpb  tmp1
0377 238C D160  34         movb  @grmrd,tmp1           ; Read font table address byte 2
     238E 9800     
0378 2390 06C5  14         swpb  tmp1
0379               *--------------------------------------------------------------
0380               * Setup GROM source address from tmp1
0381               *--------------------------------------------------------------
0382 2392 D805  38         movb  tmp1,@grmwa
     2394 9C02     
0383 2396 06C5  14         swpb  tmp1
0384 2398 D805  38         movb  tmp1,@grmwa           ; Setup GROM address for reading
     239A 9C02     
0385               *--------------------------------------------------------------
0386               * Setup VDP target address
0387               *--------------------------------------------------------------
0388 239C C118  26         mov   *tmp4,tmp0            ; Get P1 (VDP destination)
0389 239E 06A0  32         bl    @vdwa                 ; Setup VDP destination address
     23A0 22B6     
0390 23A2 05C8  14         inct  tmp4                  ; R11=R11+2
0391 23A4 C158  26         mov   *tmp4,tmp1            ; Get font options into TMP1
0392 23A6 0245  22         andi  tmp1,>7fff            ; Parameter value bit 0=0
     23A8 7FFF     
0393 23AA C1A5  34         mov   @tmp006+2(tmp1),tmp2  ; Get number of patterns to copy
     23AC 23E4     
0394 23AE C165  34         mov   @tmp006+4(tmp1),tmp1  ; 7 or 8 byte pattern ?
     23B0 23E6     
0395               *--------------------------------------------------------------
0396               * Copy from GROM to VRAM
0397               *--------------------------------------------------------------
0398 23B2 0B15  18 ldfnt2  src   tmp1,1                ; Carry set ?
0399 23B4 1812  14         joc   ldfnt4                ; Yes, go insert a >00
0400 23B6 D120  34         movb  @grmrd,tmp0
     23B8 9800     
0401               *--------------------------------------------------------------
0402               *   Make font fat
0403               *--------------------------------------------------------------
0404 23BA 20A0  32         coc   @wbit0,config         ; Fat flag set ?
     23BC 2020     
0405 23BE 1603  14         jne   ldfnt3                ; No, so skip
0406 23C0 D1C4  18         movb  tmp0,tmp3
0407 23C2 0917  18         srl   tmp3,1
0408 23C4 E107  18         soc   tmp3,tmp0
0409               *--------------------------------------------------------------
0410               *   Dump byte to VDP and do housekeeping
0411               *--------------------------------------------------------------
0412 23C6 D804  30 ldfnt3  movb  tmp0,@vdpw            ; Dump byte to VRAM
     23C8 8C00     
0413 23CA 0606  14         dec   tmp2
0414 23CC 16F2  14         jne   ldfnt2
0415 23CE 05C8  14         inct  tmp4                  ; R11=R11+2
0416 23D0 020F  20         li    r15,vdpw              ; Set VDP write address
     23D2 8C00     
0417 23D4 0242  22         andi  config,>7fff          ; CONFIG register bit 0=0
     23D6 7FFF     
0418 23D8 0458  20         b     *tmp4                 ; Exit
0419 23DA D820  46 ldfnt4  movb  @hb$00,@vdpw          ; Insert byte >00 into VRAM
     23DC 2000     
     23DE 8C00     
0420 23E0 10E8  14         jmp   ldfnt2
0421               *--------------------------------------------------------------
0422               * Fonts pointer table
0423               *--------------------------------------------------------------
0424 23E2 004C     tmp006  data  >004c,64*8,>0000      ; Pointer to TI title screen font
     23E4 0200     
     23E6 0000     
0425 23E8 004E             data  >004e,64*7,>0101      ; Pointer to upper case font
     23EA 01C0     
     23EC 0101     
0426 23EE 004E             data  >004e,96*7,>0101      ; Pointer to upper & lower case font
     23F0 02A0     
     23F2 0101     
0427 23F4 0050             data  >0050,32*7,>0101      ; Pointer to lower case font
     23F6 00E0     
     23F8 0101     
0428               
0429               
0430               
0431               ***************************************************************
0432               * YX2PNT - Get VDP PNT address for current YX cursor position
0433               ***************************************************************
0434               *  BL   @YX2PNT
0435               *--------------------------------------------------------------
0436               *  INPUT
0437               *  @WYX = Cursor YX position
0438               *--------------------------------------------------------------
0439               *  OUTPUT
0440               *  TMP0 = VDP address for entry in Pattern Name Table
0441               *--------------------------------------------------------------
0442               *  Register usage
0443               *  TMP0, R14, R15
0444               ********|*****|*********************|**************************
0445 23FA C10E  18 yx2pnt  mov   r14,tmp0              ; Save VDP#0 & VDP#1
0446 23FC C3A0  30         mov   @wyx,r14              ; Get YX
     23FE 832A     
0447 2400 098E  32         srl   r14,8                 ; Right justify (remove X)
0448 2402 3BA0  70         mpy   @wcolmn,r14           ; pos = Y * (columns per row)
     2404 833A     
0449               *--------------------------------------------------------------
0450               * Do rest of calculation with R15 (16 bit part is there)
0451               * Re-use R14
0452               *--------------------------------------------------------------
0453 2406 C3A0  30         mov   @wyx,r14              ; Get YX
     2408 832A     
0454 240A 024E  22         andi  r14,>00ff             ; Remove Y
     240C 00FF     
0455 240E A3CE  18         a     r14,r15               ; pos = pos + X
0456 2410 A3E0  30         a     @wbase,r15            ; pos = pos + (PNT base address)
     2412 8328     
0457               *--------------------------------------------------------------
0458               * Clean up before exit
0459               *--------------------------------------------------------------
0460 2414 C384  18         mov   tmp0,r14              ; Restore VDP#0 & VDP#1
0461 2416 C10F  18         mov   r15,tmp0              ; Return pos in TMP0
0462 2418 020F  20         li    r15,vdpw              ; VDP write address
     241A 8C00     
0463 241C 045B  20         b     *r11
0464               
0465               
0466               
0467               ***************************************************************
0468               * Put length-byte prefixed string at current YX
0469               ***************************************************************
0470               *  BL   @PUTSTR
0471               *  DATA P0
0472               *
0473               *  P0 = Pointer to string
0474               *--------------------------------------------------------------
0475               *  REMARKS
0476               *  First byte of string must contain length
0477               *--------------------------------------------------------------
0478               *  Register usage
0479               *  tmp1, tmp2, tmp3
0480               ********|*****|*********************|**************************
0481 241E C17B  30 putstr  mov   *r11+,tmp1
0482 2420 D1B5  28 xutst0  movb  *tmp1+,tmp2           ; Get length byte
0483 2422 C1CB  18 xutstr  mov   r11,tmp3
0484 2424 06A0  32         bl    @yx2pnt               ; Get VDP destination address
     2426 23FA     
0485 2428 C2C7  18         mov   tmp3,r11
0486 242A 0986  32         srl   tmp2,8                ; Right justify length byte
0487               *--------------------------------------------------------------
0488               * Put string
0489               *--------------------------------------------------------------
0490 242C C186  18         mov   tmp2,tmp2             ; Length = 0 ?
0491 242E 1305  14         jeq   !                     ; Yes, crash and burn
0492               
0493 2430 0286  22         ci    tmp2,255              ; Length > 255 ?
     2432 00FF     
0494 2434 1502  14         jgt   !                     ; Yes, crash and burn
0495               
0496 2436 0460  28         b     @xpym2v               ; Display string
     2438 24A6     
0497               *--------------------------------------------------------------
0498               * Crash handler
0499               *--------------------------------------------------------------
0500 243A C80B  38 !       mov   r11,@>ffce            ; \ Save caller address
     243C FFCE     
0501 243E 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2440 2026     
0502               
0503               
0504               
0505               ***************************************************************
0506               * Put length-byte prefixed string at YX
0507               ***************************************************************
0508               *  BL   @PUTAT
0509               *  DATA P0,P1
0510               *
0511               *  P0 = YX position
0512               *  P1 = Pointer to string
0513               *--------------------------------------------------------------
0514               *  REMARKS
0515               *  First byte of string must contain length
0516               ********|*****|*********************|**************************
0517 2442 C83B  42 putat   mov   *r11+,@wyx            ; Set YX position
     2444 832A     
0518 2446 0460  28         b     @putstr
     2448 241E     
0519               
0520               
0521               ***************************************************************
0522               * putlst
0523               * Loop over string list and display in columns
0524               ***************************************************************
0525               * bl  @putlst
0526               *--------------------------------------------------------------
0527               * INPUT
0528               * @wyx = Cursor position
0529               * tmp0 = Cutover row and column offset for next column.
0530               *        Set to >0000 for single-column list
0531               * tmp1 = Pointer to first length-prefixed string in list
0532               * tmp2 = Number of strings to display
0533               *--------------------------------------------------------------
0534               * OUTPUT
0535               * none
0536               *--------------------------------------------------------------
0537               * Register usage
0538               * tmp0, tmp1, tmp2, tmp3
0539               ********|*****|*********************|**************************
0540               putlst:
0541 244A 0649  14         dect  stack
0542 244C C64B  30         mov   r11,*stack            ; Save return address
0543                       ;------------------------------------------------------
0544                       ; Prepare
0545                       ;------------------------------------------------------
0546 244E C220  30         mov   @wyx,tmp4             ; Backup @wyx position
     2450 832A     
0547                       ;------------------------------------------------------
0548                       ; Dump strings to VDP
0549                       ;------------------------------------------------------
0550               putlst.loop:
0551 2452 D1D5  26         movb  *tmp1,tmp3            ; Get string length byte
0552 2454 0987  32         srl   tmp3,8                ; Right align
0553 2456 1322  14         jeq   putlst.exit           ; Exit early if 0-byte string length
0554               
0555 2458 0649  14         dect  stack
0556 245A C644  30         mov   tmp0,*stack           ; Push tmp0
0557 245C 0649  14         dect  stack
0558 245E C645  30         mov   tmp1,*stack           ; Push tmp1
0559 2460 0649  14         dect  stack
0560 2462 C646  30         mov   tmp2,*stack           ; Push tmp2
0561 2464 0649  14         dect  stack
0562 2466 C647  30         mov   tmp3,*stack           ; Push tmp3
0563 2468 0649  14         dect  stack
0564 246A C648  30         mov   tmp4,*stack           ; Push tmp4
0565               
0566 246C 06A0  32         bl    @xutst0               ; Display string
     246E 2420     
0567                                                   ; \ i  tmp1 = Pointer to string
0568                                                   ; / i  @wyx = Cursor position at
0569               
0570 2470 C239  30         mov   *stack+,tmp4          ; Pop tmp4
0571 2472 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0572 2474 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0573 2476 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0574 2478 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0575                       ;------------------------------------------------------
0576                       ; Next column?
0577                       ;------------------------------------------------------
0578 247A C104  18         mov   tmp0,tmp0             ; \ Single column list?
0579 247C 1309  14         jeq   !                     ; / Yes, skip next column handling
0580               
0581 247E 9120  30         cb    @wyx,tmp0             ; Cutover row reached?
     2480 832A     
0582 2482 1106  14         jlt   !                     ; Not yet, move down
0583               
0584 2484 D808  30         movb  tmp4,@wyx             ; Restore Y-position
     2486 832A     
0585 2488 B820  42         ab    @tmp0lb,@wyx+1        ; Add column offset
     248A 8309     
     248C 832B     
0586               
0587 248E 1002  14         jmp   putlst.next           ; Next iteration
0588 2490 06A0  32 !       bl    @down                 ; Move cursor down
     2492 26E6     
0589                       ;------------------------------------------------------
0590                       ; Prepare for next iteration
0591                       ;------------------------------------------------------
0592               putlst.next:
0593 2494 A147  18         a     tmp3,tmp1             ; Add string length to pointer
0594 2496 0585  14         inc   tmp1                  ; Consider length byte
0595 2498 0606  14         dec   tmp2
0596 249A 15DB  14         jgt   putlst.loop
0597                       ;------------------------------------------------------
0598                       ; Exit
0599                       ;------------------------------------------------------
0600               putlst.exit:
0601 249C C2F9  30         mov   *stack+,r11           ; Pop r11
0602 249E 045B  20         b     *r11                  ; Return
                   < runlib.asm
0097               
0099                       copy  "copy_cpu_vram.asm"        ; CPU to VRAM copy functions
     **** ****     > copy_cpu_vram.asm
0001               * FILE......: copy_cpu_vram.asm
0002               * Purpose...: CPU memory to VRAM copy support module
0003               
0004               ***************************************************************
0005               * CPYM2V - Copy CPU memory to VRAM
0006               ***************************************************************
0007               *  BL   @CPYM2V
0008               *  DATA P0,P1,P2
0009               *--------------------------------------------------------------
0010               *  P0 = VDP start address
0011               *  P1 = RAM/ROM start address
0012               *  P2 = Number of bytes to copy
0013               *--------------------------------------------------------------
0014               *  BL @XPYM2V
0015               *
0016               *  TMP0 = VDP start address
0017               *  TMP1 = RAM/ROM start address
0018               *  TMP2 = Number of bytes to copy
0019               ********|*****|*********************|**************************
0020 24A0 C13B  30 cpym2v  mov   *r11+,tmp0            ; VDP Start address
0021 24A2 C17B  30         mov   *r11+,tmp1            ; RAM/ROM start address
0022 24A4 C1BB  30         mov   *r11+,tmp2            ; Bytes to copy
0023               *--------------------------------------------------------------
0024               *    Assert
0025               *--------------------------------------------------------------
0026 24A6 C186  18 xpym2v  mov   tmp2,tmp2             ; Bytes to copy = 0 ?
0027 24A8 1604  14         jne   !                     ; No, continue
0028               
0029 24AA C80B  38         mov   r11,@>ffce            ; \ Save caller address
     24AC FFCE     
0030 24AE 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     24B0 2026     
0031               *--------------------------------------------------------------
0032               *    Setup VDP write address
0033               *--------------------------------------------------------------
0034 24B2 0264  22 !       ori   tmp0,>4000
     24B4 4000     
0035 24B6 06C4  14         swpb  tmp0
0036 24B8 D804  30         movb  tmp0,@vdpa
     24BA 8C02     
0037 24BC 06C4  14         swpb  tmp0
0038 24BE D804  30         movb  tmp0,@vdpa
     24C0 8C02     
0039               *--------------------------------------------------------------
0040               *    Copy bytes from CPU memory to VRAM
0041               *--------------------------------------------------------------
0042 24C2 020F  20         li    r15,vdpw              ; Set VDP write address
     24C4 8C00     
0043 24C6 C820  46         mov   @tmp008,@mcloop       ; Setup copy command
     24C8 24D0     
     24CA 8320     
0044 24CC 0460  24         b     @mcloop               ; Write data to VDP and return
     24CE 8320     
0045               *--------------------------------------------------------------
0046               * Data
0047               *--------------------------------------------------------------
0048 24D0 D7F5     tmp008  data  >d7f5                 ; MOVB *TMP1+,*R15
                   < runlib.asm
0101               
0103                       copy  "copy_vram_cpu.asm"        ; VRAM to CPU copy functions
     **** ****     > copy_vram_cpu.asm
0001               * FILE......: copy_vram_cpu.asm
0002               * Purpose...: VRAM to CPU memory copy support module
0003               
0004               ***************************************************************
0005               * CPYV2M - Copy VRAM to CPU memory
0006               ***************************************************************
0007               *  BL   @CPYV2M
0008               *  DATA P0,P1,P2
0009               *--------------------------------------------------------------
0010               *  P0 = VDP source address
0011               *  P1 = RAM target address
0012               *  P2 = Number of bytes to copy
0013               *--------------------------------------------------------------
0014               *  BL @XPYV2M
0015               *
0016               *  TMP0 = VDP source address
0017               *  TMP1 = RAM target address
0018               *  TMP2 = Number of bytes to copy
0019               ********|*****|*********************|**************************
0020 24D2 C13B  30 cpyv2m  mov   *r11+,tmp0            ; VDP source address
0021 24D4 C17B  30         mov   *r11+,tmp1            ; Target address in RAM
0022 24D6 C1BB  30         mov   *r11+,tmp2            ; Bytes to copy
0023               *--------------------------------------------------------------
0024               *    Setup VDP read address
0025               *--------------------------------------------------------------
0026 24D8 06C4  14 xpyv2m  swpb  tmp0
0027 24DA D804  30         movb  tmp0,@vdpa
     24DC 8C02     
0028 24DE 06C4  14         swpb  tmp0
0029 24E0 D804  30         movb  tmp0,@vdpa
     24E2 8C02     
0030               *--------------------------------------------------------------
0031               *    Copy bytes from VDP memory to RAM
0032               *--------------------------------------------------------------
0033 24E4 020F  20         li    r15,vdpr              ; Set VDP read address
     24E6 8800     
0034 24E8 C820  46         mov   @tmp007,@mcloop       ; Setup copy command
     24EA 24F2     
     24EC 8320     
0035 24EE 0460  24         b     @mcloop               ; Read data from VDP
     24F0 8320     
0036 24F2 DD5F     tmp007  data  >dd5f                 ; MOVB *R15,*TMP+
                   < runlib.asm
0105               
0107                       copy  "copy_cpu_cpu.asm"         ; CPU to CPU copy functions
     **** ****     > copy_cpu_cpu.asm
0001               * FILE......: copy_cpu_cpu.asm
0002               * Purpose...: CPU to CPU memory copy support module
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                       CPU COPY FUNCTIONS
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * CPYM2M - Copy CPU memory to CPU memory
0010               ***************************************************************
0011               *  BL   @CPYM2M
0012               *  DATA P0,P1,P2
0013               *--------------------------------------------------------------
0014               *  P0 = Memory source address
0015               *  P1 = Memory target address
0016               *  P2 = Number of bytes to copy
0017               *--------------------------------------------------------------
0018               *  BL @XPYM2M
0019               *
0020               *  TMP0 = Memory source address
0021               *  TMP1 = Memory target address
0022               *  TMP2 = Number of bytes to copy
0023               ********|*****|*********************|**************************
0024 24F4 C13B  30 cpym2m  mov   *r11+,tmp0            ; Memory source address
0025 24F6 C17B  30         mov   *r11+,tmp1            ; Memory target address
0026 24F8 C1BB  30         mov   *r11+,tmp2            ; Number of bytes to copy
0027               *--------------------------------------------------------------
0028               * Do some checks first
0029               *--------------------------------------------------------------
0030 24FA C186  18 xpym2m  mov   tmp2,tmp2             ; Bytes to copy = 0 ?
0031 24FC 1604  14         jne   cpychk                ; No, continue checking
0032               
0033 24FE C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2500 FFCE     
0034 2502 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2504 2026     
0035               *--------------------------------------------------------------
0036               *    Check: 1 byte copy
0037               *--------------------------------------------------------------
0038 2506 0286  22 cpychk  ci    tmp2,1                ; Bytes to copy = 1 ?
     2508 0001     
0039 250A 1603  14         jne   cpym0                 ; No, continue checking
0040 250C DD74  42         movb  *tmp0+,*tmp1+         ; Copy byte
0041 250E 04C6  14         clr   tmp2                  ; Reset counter
0042 2510 045B  20         b     *r11                  ; Return to caller
0043               *--------------------------------------------------------------
0044               *    Check: Uneven address handling
0045               *--------------------------------------------------------------
0046 2512 0242  22 cpym0   andi  config,>7fff          ; Clear CONFIG bit 0
     2514 7FFF     
0047 2516 C1C4  18         mov   tmp0,tmp3
0048 2518 0247  22         andi  tmp3,1
     251A 0001     
0049 251C 1618  14         jne   cpyodd                ; Odd source address handling
0050 251E C1C5  18 cpym1   mov   tmp1,tmp3
0051 2520 0247  22         andi  tmp3,1
     2522 0001     
0052 2524 1614  14         jne   cpyodd                ; Odd target address handling
0053               *--------------------------------------------------------------
0054               * 8 bit copy
0055               *--------------------------------------------------------------
0056 2526 20A0  32 cpym2   coc   @wbit0,config         ; CONFIG bit 0 set ?
     2528 2020     
0057 252A 1605  14         jne   cpym3
0058 252C C820  46         mov   @tmp011,@mcloop       ; Setup byte copy command
     252E 2554     
     2530 8320     
0059 2532 0460  24         b     @mcloop               ; Copy memory and exit
     2534 8320     
0060               *--------------------------------------------------------------
0061               * 16 bit copy
0062               *--------------------------------------------------------------
0063 2536 C1C6  18 cpym3   mov   tmp2,tmp3
0064 2538 0247  22         andi  tmp3,1                ; TMP3=1 -> ODD else EVEN
     253A 0001     
0065 253C 1301  14         jeq   cpym4
0066 253E 0606  14         dec   tmp2                  ; Make TMP2 even
0067 2540 CD74  46 cpym4   mov   *tmp0+,*tmp1+
0068 2542 0646  14         dect  tmp2
0069 2544 16FD  14         jne   cpym4
0070               *--------------------------------------------------------------
0071               * Copy last byte if ODD
0072               *--------------------------------------------------------------
0073 2546 C1C7  18         mov   tmp3,tmp3
0074 2548 1301  14         jeq   cpymz
0075 254A D554  38         movb  *tmp0,*tmp1
0076 254C 045B  20 cpymz   b     *r11                  ; Return to caller
0077               *--------------------------------------------------------------
0078               * Handle odd source/target address
0079               *--------------------------------------------------------------
0080 254E 0262  22 cpyodd  ori   config,>8000          ; Set CONFIG bit 0
     2550 8000     
0081 2552 10E9  14         jmp   cpym2
0082 2554 DD74     tmp011  data  >dd74                 ; MOVB *TMP0+,*TMP1+
                   < runlib.asm
0109               
0113               
0117               
0119                       copy  "cpu_sams.asm"             ; Support for SAMS memory card
     **** ****     > cpu_sams.asm
0001               * FILE......: cpu_sams.asm
0002               * Purpose...: Low level support for SAMS memory expansion card
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                SAMS Memory Expansion support
0006               *//////////////////////////////////////////////////////////////
0007               
0008               *--------------------------------------------------------------
0009               * ACCESS and MAPPING
0010               * (by the late Bruce Harisson):
0011               *
0012               * To use other than the default setup, you have to do two
0013               * things:
0014               *
0015               * 1. You have to "turn on" the card's memory in the
0016               *    >4000 block and write to the mapping registers there.
0017               *    (bl  @sams.page.set)
0018               *
0019               * 2. You have to "turn on" the mapper function to make what
0020               *    you've written into the >4000 block take effect.
0021               *    (bl  @sams.mapping.on)
0022               *--------------------------------------------------------------
0023               *  SAMS                          Default SAMS page
0024               *  Register     Memory bank      (system startup)
0025               *  =======      ===========      ================
0026               *  >4004        >2000-2fff          >002
0027               *  >4006        >3000-4fff          >003
0028               *  >4014        >a000-afff          >00a
0029               *  >4016        >b000-bfff          >00b
0030               *  >4018        >c000-cfff          >00c
0031               *  >401a        >d000-dfff          >00d
0032               *  >401c        >e000-efff          >00e
0033               *  >401e        >f000-ffff          >00f
0034               *  Others       Inactive
0035               *--------------------------------------------------------------
0036               
0037               
0038               
0039               
0040               ***************************************************************
0041               * sams.page.get - Get SAMS page number for memory address
0042               ***************************************************************
0043               * bl   @sams.page.get
0044               *      data P0
0045               *--------------------------------------------------------------
0046               * P0 = Memory address (e.g. address >a100 will map to SAMS
0047               *      register >4014 (bank >a000 - >afff)
0048               *--------------------------------------------------------------
0049               * bl   @xsams.page.get
0050               *
0051               * tmp0 = Memory address (e.g. address >a100 will map to SAMS
0052               *        register >4014 (bank >a000 - >afff)
0053               *--------------------------------------------------------------
0054               * OUTPUT
0055               * waux1 = SAMS page number
0056               * waux2 = Address of affected SAMS register
0057               *--------------------------------------------------------------
0058               * Register usage
0059               * r0, tmp0, r12
0060               ********|*****|*********************|**************************
0061               sams.page.get:
0062 2556 C13B  30         mov   *r11+,tmp0            ; Memory address
0063               xsams.page.get:
0064 2558 0649  14         dect  stack
0065 255A C64B  30         mov   r11,*stack            ; Push return address
0066 255C 0649  14         dect  stack
0067 255E C640  30         mov   r0,*stack             ; Push r0
0068 2560 0649  14         dect  stack
0069 2562 C64C  30         mov   r12,*stack            ; Push r12
0070               *--------------------------------------------------------------
0071               * Determine memory bank
0072               *--------------------------------------------------------------
0073 2564 09C4  40         srl   tmp0,12               ; Reduce address to 4K chunks
0074 2566 0A14  18         sla   tmp0,1                ; Registers are 2 bytes appart
0075               
0076 2568 0224  22         ai    tmp0,>4000            ; Add base address of "DSR" space
     256A 4000     
0077 256C C804  30         mov   tmp0,@waux2           ; Save address of SAMS register
     256E 833E     
0078               *--------------------------------------------------------------
0079               * Get SAMS page number
0080               *--------------------------------------------------------------
0081 2570 020C  20         li    r12,>1e00             ; SAMS CRU address
     2572 1E00     
0082 2574 04C0  14         clr   r0
0083 2576 1D00  16         sbo   0                     ; Enable access to SAMS registers
0084 2578 D014  26         movb  *tmp0,r0              ; Get SAMS page number
0085 257A D100  18         movb  r0,tmp0
0086 257C 0984  32         srl   tmp0,8                ; Right align
0087 257E C804  30         mov   tmp0,@waux1           ; Save SAMS page number
     2580 833C     
0088 2582 1E00  16         sbz   0                     ; Disable access to SAMS registers
0089               *--------------------------------------------------------------
0090               * Exit
0091               *--------------------------------------------------------------
0092               sams.page.get.exit:
0093 2584 C339  30         mov   *stack+,r12           ; Pop r12
0094 2586 C039  30         mov   *stack+,r0            ; Pop r0
0095 2588 C2F9  30         mov   *stack+,r11           ; Pop return address
0096 258A 045B  20         b     *r11                  ; Return to caller
0097               
0098               
0099               
0100               
0101               ***************************************************************
0102               * sams.page.set - Set SAMS memory page
0103               ***************************************************************
0104               * bl   sams.page.set
0105               *      data P0,P1
0106               *--------------------------------------------------------------
0107               * P0 = SAMS page number
0108               * P1 = Memory address (e.g. address >a100 will map to SAMS
0109               *      register >4014 (bank >a000 - >afff)
0110               *--------------------------------------------------------------
0111               * bl   @xsams.page.set
0112               *
0113               * tmp0 = SAMS page number
0114               * tmp1 = Memory address (e.g. address >a100 will map to SAMS
0115               *        register >4014 (bank >a000 - >afff)
0116               *--------------------------------------------------------------
0117               * Register usage
0118               * r0, tmp0, tmp1, r12
0119               *--------------------------------------------------------------
0120               * SAMS page number should be in range 0-255 (>00 to >ff)
0121               *
0122               *  Page         Memory
0123               *  ====         ======
0124               *  >00             32K
0125               *  >1f            128K
0126               *  >3f            256K
0127               *  >7f            512K
0128               *  >ff           1024K
0129               ********|*****|*********************|**************************
0130               sams.page.set:
0131 258C C13B  30         mov   *r11+,tmp0            ; Get SAMS page
0132 258E C17B  30         mov   *r11+,tmp1            ; Get memory address
0133               xsams.page.set:
0134 2590 0649  14         dect  stack
0135 2592 C64B  30         mov   r11,*stack            ; Push return address
0136 2594 0649  14         dect  stack
0137 2596 C640  30         mov   r0,*stack             ; Push r0
0138 2598 0649  14         dect  stack
0139 259A C64C  30         mov   r12,*stack            ; Push r12
0140 259C 0649  14         dect  stack
0141 259E C644  30         mov   tmp0,*stack           ; Push tmp0
0142 25A0 0649  14         dect  stack
0143 25A2 C645  30         mov   tmp1,*stack           ; Push tmp1
0144               *--------------------------------------------------------------
0145               * Determine memory bank
0146               *--------------------------------------------------------------
0147 25A4 09C5  40         srl   tmp1,12               ; Reduce address to 4K chunks
0148 25A6 0A15  18         sla   tmp1,1                ; Registers are 2 bytes appart
0149               *--------------------------------------------------------------
0150               * Assert on SAMS page number
0151               *--------------------------------------------------------------
0152 25A8 0284  22         ci    tmp0,255              ; Crash if page > 255
     25AA 00FF     
0153 25AC 150D  14         jgt   !
0154               *--------------------------------------------------------------
0155               * Assert on SAMS register
0156               *--------------------------------------------------------------
0157 25AE 0285  22         ci    tmp1,>1e              ; r@401e   >f000 - >ffff
     25B0 001E     
0158 25B2 150A  14         jgt   !
0159 25B4 0285  22         ci    tmp1,>04              ; r@4004   >2000 - >2fff
     25B6 0004     
0160 25B8 1107  14         jlt   !
0161 25BA 0285  22         ci    tmp1,>12              ; r@4014   >a000 - >ffff
     25BC 0012     
0162 25BE 1508  14         jgt   sams.page.set.switch_page
0163 25C0 0285  22         ci    tmp1,>06              ; r@4006   >3000 - >3fff
     25C2 0006     
0164 25C4 1501  14         jgt   !
0165 25C6 1004  14         jmp   sams.page.set.switch_page
0166                       ;------------------------------------------------------
0167                       ; Crash the system
0168                       ;------------------------------------------------------
0169 25C8 C80B  38 !       mov   r11,@>ffce            ; \ Save caller address
     25CA FFCE     
0170 25CC 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     25CE 2026     
0171               *--------------------------------------------------------------
0172               * Switch memory bank to specified SAMS page
0173               *--------------------------------------------------------------
0174               sams.page.set.switch_page
0175 25D0 020C  20         li    r12,>1e00             ; SAMS CRU address
     25D2 1E00     
0176 25D4 C004  18         mov   tmp0,r0               ; Must be in r0 for CRU use
0177 25D6 06C0  14         swpb  r0                    ; LSB to MSB
0178 25D8 1D00  16         sbo   0                     ; Enable access to SAMS registers
0179 25DA D940  38         movb  r0,@>4000(tmp1)       ; Set SAMS bank number
     25DC 4000     
0180 25DE 1E00  16         sbz   0                     ; Disable access to SAMS registers
0181               *--------------------------------------------------------------
0182               * Exit
0183               *--------------------------------------------------------------
0184               sams.page.set.exit:
0185 25E0 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0186 25E2 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0187 25E4 C339  30         mov   *stack+,r12           ; Pop r12
0188 25E6 C039  30         mov   *stack+,r0            ; Pop r0
0189 25E8 C2F9  30         mov   *stack+,r11           ; Pop return address
0190 25EA 045B  20         b     *r11                  ; Return to caller
0191               
0192               
0193               
0194               
0195               ***************************************************************
0196               * sams.mapping.on - Enable SAMS mapping mode
0197               ***************************************************************
0198               *  bl   @sams.mapping.on
0199               *--------------------------------------------------------------
0200               *  Register usage
0201               *  r12
0202               ********|*****|*********************|**************************
0203               sams.mapping.on:
0204 25EC 0649  14         dect  stack
0205 25EE C64C  30         mov   r12,*stack            ; Push r12
0206 25F0 020C  20         li    r12,>1e00             ; SAMS CRU address
     25F2 1E00     
0207 25F4 1D01  16         sbo   1                     ; Enable SAMS mapper
0208               *--------------------------------------------------------------
0209               * Exit
0210               *--------------------------------------------------------------
0211               sams.mapping.on.exit:
0212 25F6 C339  30         mov   *stack+,r12           ; Pop r12
0213 25F8 045B  20         b     *r11                  ; Return to caller
0214               
0215               
0216               
0217               
0218               ***************************************************************
0219               * sams.mapping.off - Disable SAMS mapping mode
0220               ***************************************************************
0221               * bl  @sams.mapping.off
0222               *--------------------------------------------------------------
0223               * OUTPUT
0224               * none
0225               *--------------------------------------------------------------
0226               * Register usage
0227               * r12
0228               ********|*****|*********************|**************************
0229               sams.mapping.off:
0230 25FA 0649  14         dect  stack
0231 25FC C64C  30         mov   r12,*stack            ; Push r12
0232 25FE 020C  20         li    r12,>1e00             ; SAMS CRU address
     2600 1E00     
0233 2602 1E01  16         sbz   1                     ; Disable SAMS mapper
0234               *--------------------------------------------------------------
0235               * Exit
0236               *--------------------------------------------------------------
0237               sams.mapping.off.exit:
0238 2604 C339  30         mov   *stack+,r12           ; Pop r12
0239 2606 045B  20         b     *r11                  ; Return to caller
0240               
0241               
0242               
0243               
0244               
0245               ***************************************************************
0246               * sams.layout
0247               * Setup SAMS memory banks
0248               ***************************************************************
0249               * bl  @sams.layout
0250               *     data P0
0251               *--------------------------------------------------------------
0252               * INPUT
0253               * P0 = Pointer to SAMS page layout table
0254               *--------------------------------------------------------------
0255               * bl  @xsams.layout
0256               *
0257               * tmp0 = Pointer to SAMS page layout table
0258               *--------------------------------------------------------------
0259               * OUTPUT
0260               * none
0261               *--------------------------------------------------------------
0262               * Register usage
0263               * tmp0, r12
0264               ********|*****|*********************|**************************
0265               sams.layout:
0266 2608 C13B  30         mov   *r11+,tmp0            ; Get P0
0267               xsams.layout:
0268 260A 0649  14         dect  stack
0269 260C C64B  30         mov   r11,*stack            ; Save return address
0270 260E 0649  14         dect  stack
0271 2610 C644  30         mov   tmp0,*stack           ; Save tmp0
0272 2612 0649  14         dect  stack
0273 2614 C64C  30         mov   r12,*stack            ; Save r12
0274                       ;------------------------------------------------------
0275                       ; Set SAMS registers
0276                       ;------------------------------------------------------
0277 2616 020C  20         li    r12,>1e00             ; SAMS CRU address
     2618 1E00     
0278 261A 1D00  16         sbo   0                     ; Enable access to SAMS registers
0279               
0280 261C C834  50         mov  *tmp0+,@>4004          ; Set page for >2000 - >2fff
     261E 4004     
0281 2620 C834  50         mov  *tmp0+,@>4006          ; Set page for >3000 - >3fff
     2622 4006     
0282 2624 C834  50         mov  *tmp0+,@>4014          ; Set page for >a000 - >afff
     2626 4014     
0283 2628 C834  50         mov  *tmp0+,@>4016          ; Set page for >b000 - >bfff
     262A 4016     
0284 262C C834  50         mov  *tmp0+,@>4018          ; Set page for >c000 - >cfff
     262E 4018     
0285 2630 C834  50         mov  *tmp0+,@>401a          ; Set page for >d000 - >dfff
     2632 401A     
0286 2634 C834  50         mov  *tmp0+,@>401c          ; Set page for >e000 - >efff
     2636 401C     
0287 2638 C834  50         mov  *tmp0+,@>401e          ; Set page for >f000 - >ffff
     263A 401E     
0288               
0289 263C 1E00  16         sbz   0                     ; Disable access to SAMS registers
0290 263E 1D01  16         sbo   1                     ; Enable SAMS mapper
0291                       ;------------------------------------------------------
0292                       ; Exit
0293                       ;------------------------------------------------------
0294               sams.layout.exit:
0295 2640 C339  30         mov   *stack+,r12           ; Pop r12
0296 2642 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0297 2644 C2F9  30         mov   *stack+,r11           ; Pop r11
0298 2646 045B  20         b     *r11                  ; Return to caller
0299               ***************************************************************
0300               * SAMS standard page layout table
0301               *--------------------------------------------------------------
0302               sams.layout.standard:
0303 2648 0200             data  >0200                 ; >2000-2fff, SAMS page >02
0304 264A 0300             data  >0300                 ; >3000-3fff, SAMS page >03
0305 264C 0A00             data  >0a00                 ; >a000-afff, SAMS page >0a
0306 264E 0B00             data  >0b00                 ; >b000-bfff, SAMS page >0b
0307 2650 0C00             data  >0c00                 ; >c000-cfff, SAMS page >0c
0308 2652 0D00             data  >0d00                 ; >d000-dfff, SAMS page >0d
0309 2654 0E00             data  >0e00                 ; >e000-efff, SAMS page >0e
0310 2656 0F00             data  >0f00                 ; >f000-ffff, SAMS page >0f
0311               
0312               
0313               ***************************************************************
0314               * sams.layout.copy
0315               * Copy SAMS memory layout
0316               ***************************************************************
0317               * bl  @sams.layout.copy
0318               *     data P0
0319               *--------------------------------------------------------------
0320               * P0 = Pointer to 8 words RAM buffer for results
0321               *--------------------------------------------------------------
0322               * OUTPUT
0323               * RAM buffer will have the SAMS page number for each range
0324               * 2000-2fff, 3000-3fff, a000-afff, b000-bfff, ...
0325               *--------------------------------------------------------------
0326               * Register usage
0327               * tmp0, tmp1, tmp2, tmp3
0328               ********|*****|*********************|**************************
0329               sams.layout.copy:
0330 2658 C1FB  30         mov   *r11+,tmp3            ; Get P0
0331               
0332 265A 0649  14         dect  stack
0333 265C C64B  30         mov   r11,*stack            ; Push return address
0334 265E 0649  14         dect  stack
0335 2660 C644  30         mov   tmp0,*stack           ; Push tmp0
0336 2662 0649  14         dect  stack
0337 2664 C645  30         mov   tmp1,*stack           ; Push tmp1
0338 2666 0649  14         dect  stack
0339 2668 C646  30         mov   tmp2,*stack           ; Push tmp2
0340 266A 0649  14         dect  stack
0341 266C C647  30         mov   tmp3,*stack           ; Push tmp3
0342                       ;------------------------------------------------------
0343                       ; Copy SAMS layout
0344                       ;------------------------------------------------------
0345 266E 0205  20         li    tmp1,sams.layout.copy.data
     2670 2690     
0346 2672 0206  20         li    tmp2,8                ; Set loop counter
     2674 0008     
0347                       ;------------------------------------------------------
0348                       ; Set SAMS memory pages
0349                       ;------------------------------------------------------
0350               sams.layout.copy.loop:
0351 2676 C135  30         mov   *tmp1+,tmp0           ; Get memory address
0352 2678 06A0  32         bl    @xsams.page.get       ; \ Get SAMS page
     267A 2558     
0353                                                   ; | i  tmp0   = Memory address
0354                                                   ; / o  @waux1 = SAMS page
0355               
0356 267C CDE0  46         mov   @waux1,*tmp3+         ; Copy SAMS page number
     267E 833C     
0357               
0358 2680 0606  14         dec   tmp2                  ; Next iteration
0359 2682 16F9  14         jne   sams.layout.copy.loop ; Loop until done
0360                       ;------------------------------------------------------
0361                       ; Exit
0362                       ;------------------------------------------------------
0363               sams.layout.copy.exit:
0364 2684 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0365 2686 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0366 2688 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0367 268A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0368 268C C2F9  30         mov   *stack+,r11           ; Pop r11
0369 268E 045B  20         b     *r11                  ; Return to caller
0370               ***************************************************************
0371               * SAMS memory range table
0372               *--------------------------------------------------------------
0373               sams.layout.copy.data:
0374 2690 2000             data  >2000                 ; >2000-2fff
0375 2692 3000             data  >3000                 ; >3000-3fff
0376 2694 A000             data  >a000                 ; >a000-afff
0377 2696 B000             data  >b000                 ; >b000-bfff
0378 2698 C000             data  >c000                 ; >c000-cfff
0379 269A D000             data  >d000                 ; >d000-dfff
0380 269C E000             data  >e000                 ; >e000-efff
0381 269E F000             data  >f000                 ; >f000-ffff
                   < runlib.asm
0121               
0125               
0129               
0131                       copy  "vdp_intscr.asm"           ; VDP interrupt & screen on/off
     **** ****     > vdp_intscr.asm
0001               * FILE......: vdp_intscr.asm
0002               * Purpose...: VDP interrupt & screen on/off
0003               
0004               ***************************************************************
0005               * SCROFF - Disable screen display
0006               ***************************************************************
0007               *  BL @SCROFF
0008               ********|*****|*********************|**************************
0009 26A0 024E  22 scroff  andi  r14,>ffbf             ; VDP#R1 bit 1=0 (Disable screen display)
     26A2 FFBF     
0010 26A4 0460  28         b     @putv01
     26A6 2346     
0011               
0012               ***************************************************************
0013               * SCRON - Disable screen display
0014               ***************************************************************
0015               *  BL @SCRON
0016               ********|*****|*********************|**************************
0017 26A8 026E  22 scron   ori   r14,>0040             ; VDP#R1 bit 1=1 (Enable screen display)
     26AA 0040     
0018 26AC 0460  28         b     @putv01
     26AE 2346     
0019               
0020               ***************************************************************
0021               * INTOFF - Disable VDP interrupt
0022               ***************************************************************
0023               *  BL @INTOFF
0024               ********|*****|*********************|**************************
0025 26B0 024E  22 intoff  andi  r14,>ffdf             ; VDP#R1 bit 2=0 (Disable VDP interrupt)
     26B2 FFDF     
0026 26B4 0460  28         b     @putv01
     26B6 2346     
0027               
0028               ***************************************************************
0029               * INTON - Enable VDP interrupt
0030               ***************************************************************
0031               *  BL @INTON
0032               ********|*****|*********************|**************************
0033 26B8 026E  22 inton   ori   r14,>0020             ; VDP#R1 bit 2=1 (Enable VDP interrupt)
     26BA 0020     
0034 26BC 0460  28         b     @putv01
     26BE 2346     
                   < runlib.asm
0133               
0135                       copy  "vdp_sprites.asm"          ; VDP sprites
     **** ****     > vdp_sprites.asm
0001               ***************************************************************
0002               * FILE......: vdp_sprites.asm
0003               * Purpose...: Sprites support
0004               
0005               ***************************************************************
0006               * SMAG1X - Set sprite magnification 1x
0007               ***************************************************************
0008               *  BL @SMAG1X
0009               ********|*****|*********************|**************************
0010 26C0 024E  22 smag1x  andi  r14,>fffe             ; VDP#R1 bit 7=0 (Sprite magnification 1x)
     26C2 FFFE     
0011 26C4 0460  28         b     @putv01
     26C6 2346     
0012               
0013               ***************************************************************
0014               * SMAG2X - Set sprite magnification 2x
0015               ***************************************************************
0016               *  BL @SMAG2X
0017               ********|*****|*********************|**************************
0018 26C8 026E  22 smag2x  ori   r14,>0001             ; VDP#R1 bit 7=1 (Sprite magnification 2x)
     26CA 0001     
0019 26CC 0460  28         b     @putv01
     26CE 2346     
0020               
0021               ***************************************************************
0022               * S8X8 - Set sprite size 8x8 bits
0023               ***************************************************************
0024               *  BL @S8X8
0025               ********|*****|*********************|**************************
0026 26D0 024E  22 s8x8    andi  r14,>fffd             ; VDP#R1 bit 6=0 (Sprite size 8x8)
     26D2 FFFD     
0027 26D4 0460  28         b     @putv01
     26D6 2346     
0028               
0029               ***************************************************************
0030               * S16X16 - Set sprite size 16x16 bits
0031               ***************************************************************
0032               *  BL @S16X16
0033               ********|*****|*********************|**************************
0034 26D8 026E  22 s16x16  ori   r14,>0002             ; VDP#R1 bit 6=1 (Sprite size 16x16)
     26DA 0002     
0035 26DC 0460  28         b     @putv01
     26DE 2346     
                   < runlib.asm
0137               
0139                       copy  "vdp_cursor.asm"           ; VDP cursor handling
     **** ****     > vdp_cursor.asm
0001               * FILE......: vdp_cursor.asm
0002               * Purpose...: VDP cursor handling
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *               VDP cursor movement functions
0006               *//////////////////////////////////////////////////////////////
0007               
0008               
0009               ***************************************************************
0010               * AT - Set cursor YX position
0011               ***************************************************************
0012               *  bl   @yx
0013               *  data p0
0014               *--------------------------------------------------------------
0015               *  INPUT
0016               *  P0 = New Cursor YX position
0017               ********|*****|*********************|**************************
0018 26E0 C83B  42 at      mov   *r11+,@wyx
     26E2 832A     
0019 26E4 045B  20         b     *r11
0020               
0021               
0022               ***************************************************************
0023               * down - Increase cursor Y position
0024               ***************************************************************
0025               *  bl   @down
0026               ********|*****|*********************|**************************
0027 26E6 B820  46 down    ab    @hb$01,@wyx
     26E8 2012     
     26EA 832A     
0028 26EC 045B  20         b     *r11
0029               
0030               
0031               ***************************************************************
0032               * up - Decrease cursor Y position
0033               ***************************************************************
0034               *  bl   @up
0035               ********|*****|*********************|**************************
0036 26EE 7820  46 up      sb    @hb$01,@wyx
     26F0 2012     
     26F2 832A     
0037 26F4 045B  20         b     *r11
0038               
0039               
0040               ***************************************************************
0041               * setx - Set cursor X position
0042               ***************************************************************
0043               *  bl   @setx
0044               *  data p0
0045               *--------------------------------------------------------------
0046               *  Register usage
0047               *  TMP0
0048               ********|*****|*********************|**************************
0049 26F6 C13B  30 setx    mov   *r11+,tmp0            ; Set cursor X position
0050 26F8 D120  30 xsetx   movb  @wyx,tmp0             ; Overwrite Y position
     26FA 832A     
0051 26FC C804  30         mov   tmp0,@wyx             ; Save as new YX position
     26FE 832A     
0052 2700 045B  20         b     *r11
                   < runlib.asm
0141               
0143                       copy  "vdp_yx2px_calc.asm"       ; VDP calculate pixel pos for YX coord
     **** ****     > vdp_yx2px_calc.asm
0001               * FILE......: vdp_yx2px_calc.asm
0002               * Purpose...: Calculate pixel position for YX coordinate
0003               
0004               ***************************************************************
0005               * YX2PX - Get pixel position for cursor YX position
0006               ***************************************************************
0007               *  BL   @YX2PX
0008               *
0009               *  (CONFIG:0 = 1) = Skip sprite adjustment
0010               *--------------------------------------------------------------
0011               *  INPUT
0012               *  @WYX   = Cursor YX position
0013               *--------------------------------------------------------------
0014               *  OUTPUT
0015               *  TMP0HB = Y pixel position
0016               *  TMP0LB = X pixel position
0017               *--------------------------------------------------------------
0018               *  Remarks
0019               *  This subroutine does not support multicolor mode
0020               ********|*****|*********************|**************************
0021 2702 C120  30 yx2px   mov   @wyx,tmp0
     2704 832A     
0022 2706 C18B  18 yx2pxx  mov   r11,tmp2              ; Save return address
0023 2708 06C4  14         swpb  tmp0                  ; Y<->X
0024 270A 04C5  14         clr   tmp1                  ; Clear before copy
0025 270C D144  18         movb  tmp0,tmp1             ; Copy X to TMP1
0026               *--------------------------------------------------------------
0027               * X pixel - Special F18a 80 colums treatment
0028               *--------------------------------------------------------------
0029 270E 20A0  32         coc   @wbit1,config         ; f18a present ?
     2710 201E     
0030 2712 1609  14         jne   yx2pxx_normal         ; No, skip 80 cols handling
0031 2714 8820  46         c     @wcolmn,@yx2pxx_c80   ; 80 columns mode enabled ?
     2716 833A     
     2718 2742     
0032 271A 1605  14         jne   yx2pxx_normal         ; No, skip 80 cols handling
0033               
0034 271C 0A15  18         sla   tmp1,1                ; X = X * 2
0035 271E B144  18         ab    tmp0,tmp1             ; X = X + (original X)
0036 2720 0225  22         ai    tmp1,>0500            ; X = X + 5 (F18a mystery offset)
     2722 0500     
0037 2724 1002  14         jmp   yx2pxx_y_calc
0038               *--------------------------------------------------------------
0039               * X pixel - Normal VDP treatment
0040               *--------------------------------------------------------------
0041               yx2pxx_normal:
0042 2726 D144  18         movb  tmp0,tmp1             ; Copy X to TMP1
0043               *--------------------------------------------------------------
0044 2728 0A35  22         sla   tmp1,3                ; X=X*8
0045               *--------------------------------------------------------------
0046               * Calculate Y pixel position
0047               *--------------------------------------------------------------
0048               yx2pxx_y_calc:
0049 272A 0A34  22         sla   tmp0,3                ; Y=Y*8
0050 272C D105  18         movb  tmp1,tmp0
0051 272E 06C4  14         swpb  tmp0                  ; X<->Y
0052 2730 20A0  32 yx2pi1  coc   @wbit0,config         ; Skip sprite adjustment ?
     2732 2020     
0053 2734 1305  14         jeq   yx2pi3                ; Yes, exit
0054               *--------------------------------------------------------------
0055               * Adjust for Y sprite location
0056               * See VDP Programmers Guide, Section 9.2.1
0057               *--------------------------------------------------------------
0058 2736 7120  34 yx2pi2  sb    @hb$01,tmp0           ; Adjust Y. Top of screen is at >FF
     2738 2012     
0059 273A 9120  34         cb    @hb$d0,tmp0           ; Y position = >D0 ?
     273C 2024     
0060 273E 13FB  14         jeq   yx2pi2                ; Yes, but that's not allowed, adjust
0061 2740 0456  20 yx2pi3  b     *tmp2                 ; Exit
0062               *--------------------------------------------------------------
0063               * Local constants
0064               *--------------------------------------------------------------
0065               yx2pxx_c80:
0066 2742 0050            data   80
0067               
0068               
                   < runlib.asm
0145               
0149               
0153               
0155                       copy  "vdp_f18a.asm"             ; VDP F18a low-level functions
     **** ****     > vdp_f18a.asm
0001               * FILE......: vdp_f18a.asm
0002               * Purpose...: VDP F18A Support module
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                 VDP F18A LOW-LEVEL FUNCTIONS
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * f18unl - Unlock F18A VDP
0010               ***************************************************************
0011               *  bl   @f18unl
0012               ********|*****|*********************|**************************
0013 2744 C20B  18 f18unl  mov   r11,tmp4              ; Save R11
0014 2746 06A0  32         bl    @putvr                ; Write once
     2748 2332     
0015 274A 391C             data  >391c                 ; VR1/57, value 00011100
0016 274C 06A0  32         bl    @putvr                ; Write twice
     274E 2332     
0017 2750 391C             data  >391c                 ; VR1/57, value 00011100
0018 2752 06A0  32         bl    @putvr
     2754 2332     
0019 2756 01E0             data  >01e0                 ; VR1, value 11100000, a sane setting
0020 2758 0458  20         b     *tmp4                 ; Exit
0021               
0022               
0023               ***************************************************************
0024               * f18lck - Lock F18A VDP
0025               ***************************************************************
0026               *  bl   @f18lck
0027               ********|*****|*********************|**************************
0028 275A C20B  18 f18lck  mov   r11,tmp4              ; Save R11
0029 275C 06A0  32         bl    @putvr                ; VR1/57, value 00000000
     275E 2332     
0030 2760 3900             data  >3900
0031 2762 0458  20         b     *tmp4                 ; Exit
0032               
0033               
0034               ***************************************************************
0035               * f18idl - Put GPU in F18A VDP in idle mode (stop GPU program)
0036               ***************************************************************
0037               *  bl   @f18idl
0038               *--------------------------------------------------------------
0039               *  REMARKS
0040               *  Expects that the f18a is unlocked when calling this function.
0041               ********|*****|*********************|**************************
0042 2764 C20B  18 f18idl  mov   r11,tmp4              ; Save R11
0043 2766 06A0  32         bl    @putvr                ; VR56 >38, value 00000000
     2768 2332     
0044 276A 3800             data  >3800                 ; Reset and load PC (GPU idle!)
0045 276C 0458  20         b     *tmp4                 ; Exit
0046               
0047               
0048               
0049               ***************************************************************
0050               * f18chk - Check if F18A VDP present
0051               ***************************************************************
0052               *  bl   @f18chk
0053               *--------------------------------------------------------------
0054               *  REMARKS
0055               *  Expects that the f18a is unlocked when calling this function.
0056               *  Runs GPU code at VDP >3f00
0057               ********|*****|*********************|**************************
0058 276E C20B  18 f18chk  mov   r11,tmp4              ; Save R11
0059 2770 06A0  32         bl    @cpym2v
     2772 24A0     
0060 2774 3F00             data  >3f00,f18chk_gpu,8    ; Copy F18A GPU code to VRAM
     2776 27B8     
     2778 0008     
0061 277A 06A0  32         bl    @putvr
     277C 2332     
0062 277E 363F             data  >363f                 ; Load MSB of GPU PC (>3f) into VR54 (>36)
0063 2780 06A0  32         bl    @putvr
     2782 2332     
0064 2784 3700             data  >3700                 ; Load LSB of GPU PC (>00) into VR55 (>37)
0065                                                   ; GPU code should run now
0066               
0067 2786 06A0  32         bl    @putvr                ; VR56 >38, value 00000000
     2788 2332     
0068 278A 3800             data  >3800                 ; Reset and load PC (GPU idle!)
0069               ***************************************************************
0070               * VDP @>3f00 == 0 ? F18A present : F18a not present
0071               ***************************************************************
0072 278C 0204  20         li    tmp0,>3f00
     278E 3F00     
0073 2790 06A0  32         bl    @vdra                 ; Set VDP read address to >3f00
     2792 22BA     
0074 2794 D120  30         movb  @vdpr,tmp0            ; Read MSB byte
     2796 8800     
0075 2798 0984  32         srl   tmp0,8
0076 279A D120  30         movb  @vdpr,tmp0            ; Read LSB byte
     279C 8800     
0077 279E C104  18         mov   tmp0,tmp0             ; For comparing with 0
0078 27A0 1303  14         jeq   f18chk_yes
0079               f18chk_no:
0080 27A2 0242  22         andi  config,>bfff          ; CONFIG Register bit 1=0
     27A4 BFFF     
0081 27A6 1002  14         jmp   f18chk_exit
0082               f18chk_yes:
0083 27A8 0262  22         ori   config,>4000          ; CONFIG Register bit 1=1
     27AA 4000     
0084               
0085               f18chk_exit:
0086 27AC 06A0  32         bl    @filv                 ; Clear VDP mem >3f00->3f05
     27AE 228E     
0087 27B0 3F00             data  >3f00,>00,6
     27B2 0000     
     27B4 0006     
0088 27B6 0458  20         b     *tmp4                 ; Exit
0089               ***************************************************************
0090               * GPU code
0091               ********|*****|*********************|**************************
0092               f18chk_gpu
0093 27B8 04E0             data  >04e0                 ; 3f00 \ 04e0  clr @>3f00
0094 27BA 3F00             data  >3f00                 ; 3f02 / 3f00
0095 27BC 0340             data  >0340                 ; 3f04   0340  idle
0096 27BE 10FF             data  >10ff                 ; 3f06   10ff  \ jmp $
0097                                                   ;              | Make classic99 debugger
0098                                                   ;              | happy if break on illegal
0099                                                   ;              / opcode is on.
0100               
0101               ***************************************************************
0102               * f18rst - Reset f18a into standard settings
0103               ***************************************************************
0104               *  bl   @f18rst
0105               *--------------------------------------------------------------
0106               *  REMARKS
0107               *  This is used to leave the F18A mode and revert all settings
0108               *  that could lead to corruption when doing BLWP @0
0109               *
0110               *  Is expected to run while the f18a is unlocked.
0111               *
0112               *  There are some F18a settings that stay on when doing blwp @0
0113               *  and the TI title screen cannot recover from that.
0114               *
0115               *  It is your responsibility to set video mode tables should
0116               *  you want to continue instead of doing blwp @0 after your
0117               *  program cleanup
0118               ********|*****|*********************|**************************
0119 27C0 C20B  18 f18rst  mov   r11,tmp4              ; Save R11
0120                       ;------------------------------------------------------
0121                       ; Reset all F18a VDP registers to power-on defaults
0122                       ;------------------------------------------------------
0123 27C2 06A0  32         bl    @putvr
     27C4 2332     
0124 27C6 3280             data  >3280                 ; F18a VR50 (>32), MSB 8=1
0125               
0126 27C8 06A0  32         bl    @putvr                ; VR1/57, value 00000000
     27CA 2332     
0127 27CC 3900             data  >3900                 ; Lock the F18a
0128 27CE 0458  20         b     *tmp4                 ; Exit
0129               
0130               
0131               
0132               ***************************************************************
0133               * f18fwv - Get F18A Firmware Version
0134               ***************************************************************
0135               *  bl   @f18fwv
0136               *--------------------------------------------------------------
0137               *  REMARKS
0138               *  Successfully tested with F18A v1.8, note that this does not
0139               *  work with F18 v1.3 but you shouldn't be using such old F18A
0140               *  firmware to begin with.
0141               *--------------------------------------------------------------
0142               *  TMP0 High nibble = major version
0143               *  TMP0 Low nibble  = minor version
0144               *
0145               *  Example: >0018     F18a Firmware v1.8
0146               ********|*****|*********************|**************************
0147 27D0 C20B  18 f18fwv  mov   r11,tmp4              ; Save R11
0148 27D2 20A0  32         coc   @wbit1,config         ; CONFIG bit 1 set ?
     27D4 201E     
0149 27D6 1609  14         jne   f18fw1
0150               ***************************************************************
0151               * Read F18A major/minor version
0152               ***************************************************************
0153 27D8 C120  30         mov   @vdps,tmp0            ; Clear VDP status register
     27DA 8802     
0154 27DC 06A0  32         bl    @putvr                ; Write to VR#15 for setting F18A status
     27DE 2332     
0155 27E0 0F0E             data  >0f0e                 ; register to read (0e=VR#14)
0156 27E2 04C4  14         clr   tmp0
0157 27E4 D120  30         movb  @vdps,tmp0
     27E6 8802     
0158 27E8 0984  32         srl   tmp0,8
0159 27EA 0458  20 f18fw1  b     *tmp4                 ; Exit
                   < runlib.asm
0157               
0159                       copy  "vdp_hchar.asm"            ; VDP hchar functions
     **** ****     > vdp_hchar.asm
0001               * FILE......: vdp_hchar.a99
0002               * Purpose...: VDP hchar module
0003               
0004               ***************************************************************
0005               * Repeat characters horizontally at YX
0006               ***************************************************************
0007               *  BL    @HCHAR
0008               *  DATA  P0,P1
0009               *  ...
0010               *  DATA  EOL                        ; End-of-list
0011               *--------------------------------------------------------------
0012               *  P0HB = Y position
0013               *  P0LB = X position
0014               *  P1HB = Byte to write
0015               *  P1LB = Number of times to repeat
0016               ********|*****|*********************|**************************
0017 27EC C83B  42 hchar   mov   *r11+,@wyx            ; Set YX position
     27EE 832A     
0018 27F0 D17B  28         movb  *r11+,tmp1
0019 27F2 0985  32 hcharx  srl   tmp1,8                ; Byte to write
0020 27F4 D1BB  28         movb  *r11+,tmp2
0021 27F6 0986  32         srl   tmp2,8                ; Repeat count
0022 27F8 C1CB  18         mov   r11,tmp3
0023 27FA 06A0  32         bl    @yx2pnt               ; Get VDP address into TMP0
     27FC 23FA     
0024               *--------------------------------------------------------------
0025               *    Draw line
0026               *--------------------------------------------------------------
0027 27FE 020B  20         li    r11,hchar1
     2800 2806     
0028 2802 0460  28         b     @xfilv                ; Draw
     2804 2294     
0029               *--------------------------------------------------------------
0030               *    Do housekeeping
0031               *--------------------------------------------------------------
0032 2806 8817  42 hchar1  c     *tmp3,@w$ffff         ; End-Of-List marker found ?
     2808 2022     
0033 280A 1302  14         jeq   hchar2                ; Yes, exit
0034 280C C2C7  18         mov   tmp3,r11
0035 280E 10EE  14         jmp   hchar                 ; Next one
0036 2810 05C7  14 hchar2  inct  tmp3
0037 2812 0457  20         b     *tmp3                 ; Exit
                   < runlib.asm
0161               
0165               
0169               
0173               
0175                       copy  "snd_player.asm"           ; Sound player
     **** ****     > snd_player.asm
0001               * FILE......: snd_player.asm
0002               * Purpose...: Sound player support code
0003               
0004               
0005               ***************************************************************
0006               * MUTE - Mute all sound generators
0007               ***************************************************************
0008               *  BL  @MUTE
0009               *  Mute sound generators and clear sound pointer
0010               *
0011               *  BL  @MUTE2
0012               *  Mute sound generators without clearing sound pointer
0013               ********|*****|*********************|**************************
0014 2814 04E0  26 mute    clr   @wsdlst               ; Clear sound pointer
     2816 8334     
0015 2818 40A0  34 mute2   szc   @wbit13,config        ; Turn off/pause sound player
     281A 2006     
0016 281C 0204  20         li    tmp0,muttab
     281E 282E     
0017 2820 0205  20         li    tmp1,sound            ; Sound generator port >8400
     2822 8400     
0018 2824 D574  40         movb  *tmp0+,*tmp1          ; Generator 0
0019 2826 D574  40         movb  *tmp0+,*tmp1          ; Generator 1
0020 2828 D574  40         movb  *tmp0+,*tmp1          ; Generator 2
0021 282A D554  38         movb  *tmp0,*tmp1           ; Generator 3
0022 282C 045B  20         b     *r11
0023 282E 9FBF     muttab  byte  >9f,>bf,>df,>ff       ; Table for muting all generators
     2830 DFFF     
0024               
0025               
0026               ***************************************************************
0027               * SDPREP - Prepare for playing sound
0028               ***************************************************************
0029               *  BL   @SDPREP
0030               *  DATA P0,P1
0031               *
0032               *  P0 = Address where tune is stored
0033               *  P1 = Option flags for sound player
0034               *--------------------------------------------------------------
0035               *  REMARKS
0036               *  Use the below equates for P1:
0037               *
0038               *  SDOPT1 => Tune is in CPU memory + loop
0039               *  SDOPT2 => Tune is in CPU memory
0040               *  SDOPT3 => Tune is in VRAM + loop
0041               *  SDOPT4 => Tune is in VRAM
0042               ********|*****|*********************|**************************
0043 2832 C81B  38 sdprep  mov   *r11,@wsdlst          ; Set tune address
     2834 8334     
0044 2836 C83B  42         mov   *r11+,@wsdtmp         ; Set tune address in temp
     2838 8336     
0045 283A 0242  22         andi  config,>fff8          ; Clear bits 13-14-15
     283C FFF8     
0046 283E E0BB  30         soc   *r11+,config          ; Set options
0047 2840 D820  46         movb  @hb$01,@r13lb         ; Set initial duration
     2842 2012     
     2844 831B     
0048 2846 045B  20         b     *r11
0049               
0050               ***************************************************************
0051               * SDPLAY - Sound player for tune in VRAM or CPU memory
0052               ***************************************************************
0053               *  BL  @SDPLAY
0054               *--------------------------------------------------------------
0055               *  REMARKS
0056               *  Set config register bit13=0 to pause player.
0057               *  Set config register bit14=1 to repeat (or play next tune).
0058               ********|*****|*********************|**************************
0059 2848 20A0  32 sdplay  coc   @wbit13,config        ; Play tune ?
     284A 2006     
0060 284C 1301  14         jeq   sdpla1                ; Yes, play
0061 284E 045B  20         b     *r11
0062               *--------------------------------------------------------------
0063               * Initialisation
0064               *--------------------------------------------------------------
0065 2850 060D  14 sdpla1  dec   r13                   ; duration = duration - 1
0066 2852 9820  46         cb    @r13lb,@hb$00         ; R13LB == 0 ?
     2854 831B     
     2856 2000     
0067 2858 1301  14         jeq   sdpla3                ; Play next note
0068 285A 045B  20 sdpla2  b     *r11                  ; Note still busy, exit
0069 285C 20A0  32 sdpla3  coc   @wbit15,config        ; Play tune from CPU memory ?
     285E 2002     
0070 2860 131A  14         jeq   mmplay
0071               *--------------------------------------------------------------
0072               * Play tune from VDP memory
0073               *--------------------------------------------------------------
0074 2862 C120  30 vdplay  mov   @wsdtmp,tmp0          ; Get tune address
     2864 8336     
0075 2866 06C4  14         swpb  tmp0
0076 2868 D804  30         movb  tmp0,@vdpa
     286A 8C02     
0077 286C 06C4  14         swpb  tmp0
0078 286E D804  30         movb  tmp0,@vdpa
     2870 8C02     
0079 2872 04C4  14         clr   tmp0
0080 2874 D120  30         movb  @vdpr,tmp0            ; length = 0 (end of tune) ?
     2876 8800     
0081 2878 131E  14         jeq   sdexit                ; Yes. exit
0082 287A 0984  32 vdpla1  srl   tmp0,8                ; Right justify length byte
0083 287C A804  30         a     tmp0,@wsdtmp          ; Adjust for next table entry
     287E 8336     
0084 2880 D820  42 vdpla2  movb  @vdpr,@>8400          ; Feed byte to sound generator
     2882 8800     
     2884 8400     
0085 2886 0604  14         dec   tmp0
0086 2888 16FB  14         jne   vdpla2
0087 288A D820  42         movb  @vdpr,@r13lb          ; Set duration counter
     288C 8800     
     288E 831B     
0088 2890 05E0  26 vdpla3  inct  @wsdtmp               ; Adjust for next table entry, honour byte (1) + (n+1)
     2892 8336     
0089 2894 045B  20         b     *r11
0090               *--------------------------------------------------------------
0091               * Play tune from CPU memory
0092               *--------------------------------------------------------------
0093 2896 C120  30 mmplay  mov   @wsdtmp,tmp0
     2898 8336     
0094 289A D174  28         movb  *tmp0+,tmp1           ; length = 0 (end of tune) ?
0095 289C 130C  14         jeq   sdexit                ; Yes, exit
0096 289E 0985  32 mmpla1  srl   tmp1,8                ; Right justify length byte
0097 28A0 A805  30         a     tmp1,@wsdtmp          ; Adjust for next table entry
     28A2 8336     
0098 28A4 D834  40 mmpla2  movb  *tmp0+,@>8400         ; Feed byte to sound generator
     28A6 8400     
0099 28A8 0605  14         dec   tmp1
0100 28AA 16FC  14         jne   mmpla2
0101 28AC D814  38         movb  *tmp0,@r13lb          ; Set duration counter
     28AE 831B     
0102 28B0 05E0  26         inct  @wsdtmp               ; Adjust for next table entry, honour byte (1) + (n+1)
     28B2 8336     
0103 28B4 045B  20         b     *r11
0104               *--------------------------------------------------------------
0105               * Exit. Check if tune must be looped
0106               *--------------------------------------------------------------
0107 28B6 20A0  32 sdexit  coc   @wbit14,config        ; Loop flag set ?
     28B8 2004     
0108 28BA 1607  14         jne   sdexi2                ; No, exit
0109 28BC C820  42         mov   @wsdlst,@wsdtmp
     28BE 8334     
     28C0 8336     
0110 28C2 D820  46         movb  @hb$01,@r13lb          ; Set initial duration
     28C4 2012     
     28C6 831B     
0111 28C8 045B  20 sdexi1  b     *r11                  ; Exit
0112 28CA 0242  22 sdexi2  andi  config,>fff8          ; Reset music player
     28CC FFF8     
0113 28CE 045B  20         b     *r11                  ; Exit
0114               
                   < runlib.asm
0177               
0181               
0185               
0189               
0192                       copy  "keyb_rkscan.asm"          ; Use ROM#0 OS monitor KSCAN
     **** ****     > keyb_rkscan.asm
0001               * FILE......: keyb_rkscan.asm
0002               * Purpose...: Full (real) keyboard support module
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                     KEYBOARD FUNCTIONS
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * RKSCAN - Scan keyboard using ROM#0 OS monitor KSCAN
0010               ***************************************************************
0011               *  BL @RKSCAN
0012               *--------------------------------------------------------------
0013               * Register usage
0014               * none
0015               *--------------------------------------------------------------
0016               * Scratchpad usage by console KSCAN:
0017               *
0018               * >8373  I/O:    LSB of GPL subroutine stack pointer 80 = (>8380)
0019               * >8374  Input:  keyboard scan mode (default=0)
0020               * >8375  Output: ASCII code detected by keyboard scan
0021               * >8376  Output: Joystick Y-status by keyboard scan
0022               * >8377  Output: Joystick X-status by keyboard scan
0023               * >837c  Output: GPL status byte (>20 if key pressed)
0024               * >838a  I/O:    GPL substack
0025               * >838c  I/O:    GPL substack
0026               * >83c6  I/O:    ISRWS R3 Keyboard state and debounce info
0027               * >83c8  I/O:    ISRWS R4 Keyboard state and debounce info
0028               * >83ca  I/O:    ISRWS R5 Keyboard state and debounce info
0029               * >83d4  I/O:    ISRWS R10 Contents of VDP register 01
0030               * >83d6  I/O:    ISRWS R11 Screen timeout counter, blanks when 0000
0031               * >83d8  I/O:    ISRWS R12 (Backup return address old R11 in GPLWS)
0032               * >83f8  output: GPLWS R12 (CRU base address for key scan)
0033               * >83fa  output: GPLWS R13 (GROM/GRAM read data port 9800)
0034               * >83fe  I/O:    GPLWS R15 (VDP write address port 8c02)
0035               ********|*****|*********************|**************************
0036               rkscan:
0037 28D0 0649  14         dect  stack
0038 28D2 C64B  30         mov   r11,*stack            ; Push return address
0039 28D4 0649  14         dect  stack
0040 28D6 C644  30         mov   tmp0,*stack           ; Push tmp0
0041                       ;------------------------------------------------------
0042                       ; (1) Check for alpha lock
0043                       ;------------------------------------------------------
0044 28D8 40A0  34         szc   @wbit10,config        ; Reset CONFIG register bit 10=0
     28DA 200C     
0045                                                   ; (alpha lock off)
0046               
0047                       ; See CRU interface and keyboard sections for details
0048                       ; http://www.nouspikel.com/ti99/titechpages.htm
0049               
0050 28DC 04CC  14         clr   r12                   ; Set base address (to bit 0) so
0051                                                   ; following offsets correspond
0052               
0053 28DE 1E15  16         sbz   21                    ; \ Set bit 21 (PIN 5 attached to alpha
0054                                                   ; / lock column) to 0.
0055               
0056 28E0 0BEC  44         src   r12,14                ; Burn some time (r12=0 no problem shifting)
0057               
0058 28E2 1F07  16         tb    7                     ; \ Copy CRU bit 7 into EQ bit
0059                                                   ; | That is CRU INT7*/P15 pin (keyboard row
0060                                                   ; | with keys FCTN, 2,3,4,5,1,
0061                                                   ; / [joy1-up,joy2-up, Alpha Lock])
0062               
0063 28E4 1302  14         jeq   !                     ; No, alpha lock is off
0064               
0065 28E6 E0A0  34         soc   @wbit10,config        ; \ Yes, alpha lock is on.
     28E8 200C     
0066                                                   ; / Set CONFIG register bit 10=1
0067               
0068 28EA 1D15  16 !       sbo   21                    ; \ Reset bit 21 (Pin 5 attached to alpha
0069                                                   ; / lock column) to 1.
0070                       ;------------------------------------------------------
0071                       ; (2) Prepare for OS monitor kscan
0072                       ;------------------------------------------------------
0073 28EC C820  46         mov   @scrpad.83c6,@>83c6   ; Required for lowercase support
     28EE 292C     
     28F0 83C6     
0074 28F2 C820  46         mov   @scrpad.83fa,@>83fa   ; Load GPLWS R13
     28F4 292E     
     28F6 83FA     
0075 28F8 C820  46         mov   @scrpad.83fe,@>83fe   ; Load GPLWS R15
     28FA 2930     
     28FC 83FE     
0076               
0077 28FE 04C4  14         clr   tmp0                  ; \ Keyboard mode in MSB
0078                                                   ; / 00=Scan all of keyboard
0079               
0080 2900 D804  30         movb  tmp0,@>8374           ; Set keyboard mode at @>8374
     2902 8374     
0081                                                   ; (scan entire keyboard)
0082               
0083 2904 02E0  18         lwpi  >83e0                 ; Activate GPL workspace
     2906 83E0     
0084               
0085 2908 06A0  28         bl    @kscan                ; Call KSCAN
     290A 000E     
0086 290C 02E0  18         lwpi  ws1                   ; Activate user workspace
     290E 8300     
0087                       ;------------------------------------------------------
0088                       ; (3) Check if key pressed
0089                       ;------------------------------------------------------
0090 2910 D120  30         movb  @>837c,tmp0           ; Get flag
     2912 837C     
0091 2914 0A34  22         sla   tmp0,3                ; Flag value is >20
0092 2916 1707  14         jnc   rkscan.exit           ; No key pressed, exit early
0093                       ;------------------------------------------------------
0094                       ; (4) Key detected, store in memory
0095                       ;------------------------------------------------------
0096 2918 D120  30         movb  @>8375,tmp0           ; \ Key pressed is at @>8375
     291A 8375     
0097 291C 0984  32         srl   tmp0,8                ; / Move to LSB
0099 291E C804  38         mov   tmp0,@rom0_kscan_out  ; Store ASCII value in user location
     2920 A028     
0103 2922 E0A0  34         soc   @wbit11,config        ; Set ANYKEY flag in CONFIG register
     2924 200A     
0104                       ;------------------------------------------------------
0105                       ; Exit
0106                       ;------------------------------------------------------
0107               rkscan.exit:
0108 2926 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0109 2928 C2F9  30         mov   *stack+,r11           ; Pop r11
0110 292A 045B  20         b     *r11                  ; Return to caller
0111               
0112               
0113 292C 0200     scrpad.83c6   data >0200            ; Required for KSCAN to support lowercase
0114 292E 9800     scrpad.83fa   data >9800
0115               
0116               ; Dummy value for GPLWS R15 (instead of VDP write address port 8c02)
0117               ; We do not want console KSCAN to fiddle with VDP registers while Stevie
0118               ; is running
0119               
0120 2930 83A0     scrpad.83fe   data >83a0            ; 8c02
                   < runlib.asm
0197               
0199                       copy  "cpu_hexsupport.asm"       ; CPU hex numbers support
     **** ****     > cpu_hexsupport.asm
0001               * FILE......: cpu_hexsupport.asm
0002               * Purpose...: CPU create, display hex numbers module
0003               
0004               ***************************************************************
0005               * mkhex - Convert hex word to string
0006               ***************************************************************
0007               *  bl   @mkhex
0008               *       data P0,P1,P2
0009               *--------------------------------------------------------------
0010               *  P0 = Pointer to 16 bit word
0011               *  P1 = Pointer to string buffer
0012               *  P2 = Offset for ASCII digit
0013               *       MSB determines offset for chars A-F
0014               *       LSB determines offset for chars 0-9
0015               *  (CONFIG#0 = 1) = Display number at cursor YX
0016               *--------------------------------------------------------------
0017               *  Memory usage:
0018               *  tmp0, tmp1, tmp2, tmp3, tmp4
0019               *  waux1, waux2, waux3
0020               *--------------------------------------------------------------
0021               *  Memory variables waux1-waux3 are used as temporary variables
0022               ********|*****|*********************|**************************
0023 2932 C13B  30 mkhex   mov   *r11+,tmp0            ; P0: Address of word
0024 2934 C83B  42         mov   *r11+,@waux3          ; P1: Pointer to string buffer
     2936 8340     
0025 2938 04E0  26         clr   @waux1
     293A 833C     
0026 293C 04E0  26         clr   @waux2
     293E 833E     
0027 2940 0207  20         li    tmp3,waux1            ; We store results in WAUX1 and WAUX2
     2942 833C     
0028 2944 C114  26         mov   *tmp0,tmp0            ; Get word
0029               *--------------------------------------------------------------
0030               *    Convert nibbles to bytes (is in wrong order)
0031               *--------------------------------------------------------------
0032 2946 0205  20         li    tmp1,4                ; 4 nibbles
     2948 0004     
0033 294A C184  18 mkhex1  mov   tmp0,tmp2             ; Make work copy
0034 294C 0246  22         andi  tmp2,>000f            ; Only keep LSN
     294E 000F     
0035                       ;------------------------------------------------------
0036                       ; Determine offset for ASCII char
0037                       ;------------------------------------------------------
0038 2950 0286  22         ci    tmp2,>000a
     2952 000A     
0039 2954 1105  14         jlt   mkhex1.digit09
0040                       ;------------------------------------------------------
0041                       ; Add ASCII offset for digits A-F
0042                       ;------------------------------------------------------
0043               mkhex1.digitaf:
0044 2956 C21B  26         mov   *r11,tmp4
0045 2958 0988  32         srl   tmp4,8                ; Right justify
0046 295A 0228  22         ai    tmp4,-10              ; Adjust offset for 'A-F'
     295C FFF6     
0047 295E 1003  14         jmp   mkhex2
0048               
0049               mkhex1.digit09:
0050                       ;------------------------------------------------------
0051                       ; Add ASCII offset for digits 0-9
0052                       ;------------------------------------------------------
0053 2960 C21B  26         mov   *r11,tmp4
0054 2962 0248  22         andi  tmp4,>00ff            ; Only keep LSB
     2964 00FF     
0055               
0056 2966 A188  18 mkhex2  a     tmp4,tmp2             ; Add ASCII-offset
0057 2968 06C6  14         swpb  tmp2
0058 296A DDC6  32         movb  tmp2,*tmp3+           ; Save byte
0059 296C 0944  24         srl   tmp0,4                ; Next nibble
0060 296E 0605  14         dec   tmp1
0061 2970 16EC  14         jne   mkhex1                ; Repeat until all nibbles processed
0062 2972 0242  22         andi  config,>bfff          ; Reset bit 1 in config register
     2974 BFFF     
0063               *--------------------------------------------------------------
0064               *    Build first 2 bytes in correct order
0065               *--------------------------------------------------------------
0066 2976 C160  30         mov   @waux3,tmp1           ; Get pointer
     2978 8340     
0067 297A 04D5  26         clr   *tmp1                 ; Set length byte to 0
0068 297C 0585  14         inc   tmp1                  ; Next byte, not word!
0069 297E C120  30         mov   @waux2,tmp0
     2980 833E     
0070 2982 06C4  14         swpb  tmp0
0071 2984 DD44  32         movb  tmp0,*tmp1+
0072 2986 06C4  14         swpb  tmp0
0073 2988 DD44  32         movb  tmp0,*tmp1+
0074               *--------------------------------------------------------------
0075               *    Set length byte
0076               *--------------------------------------------------------------
0077 298A C120  30         mov   @waux3,tmp0           ; Get start of string buffer
     298C 8340     
0078 298E D520  46         movb  @hb$04,*tmp0          ; Set lengh byte to 4
     2990 2016     
0079 2992 05CB  14         inct  r11                   ; Skip Parameter P2
0080               *--------------------------------------------------------------
0081               *    Build last 2 bytes in correct order
0082               *--------------------------------------------------------------
0083 2994 C120  30         mov   @waux1,tmp0
     2996 833C     
0084 2998 06C4  14         swpb  tmp0
0085 299A DD44  32         movb  tmp0,*tmp1+
0086 299C 06C4  14         swpb  tmp0
0087 299E DD44  32         movb  tmp0,*tmp1+
0088               *--------------------------------------------------------------
0089               *    Display hex number ?
0090               *--------------------------------------------------------------
0091 29A0 20A0  32         coc   @wbit0,config         ; Check if 'display' bit is set
     29A2 2020     
0092 29A4 1301  14         jeq   mkhex3                ; Yes, so show at current YX position
0093 29A6 045B  20         b     *r11                  ; Exit
0094               *--------------------------------------------------------------
0095               *  Display hex number on screen at current YX position
0096               *--------------------------------------------------------------
0097 29A8 0242  22 mkhex3  andi  config,>7fff          ; Reset bit 0
     29AA 7FFF     
0098 29AC C160  30         mov   @waux3,tmp1           ; Get Pointer to string
     29AE 8340     
0099 29B0 0460  28         b     @xutst0               ; Display string
     29B2 2420     
0100 29B4 0610     prefix  data  >0610                 ; Length byte + blank
0101               
0102               
0103               
0104               ***************************************************************
0105               * puthex - Put 16 bit word on screen
0106               ***************************************************************
0107               *  bl   @mkhex
0108               *       data P0,P1,P2,P3
0109               *--------------------------------------------------------------
0110               *  P0 = YX position
0111               *  P1 = Pointer to 16 bit word
0112               *  P2 = Pointer to string buffer
0113               *  P3 = Offset for ASCII digit
0114               *       MSB determines offset for chars A-F
0115               *       LSB determines offset for chars 0-9
0116               *--------------------------------------------------------------
0117               *  Memory usage:
0118               *  tmp0, tmp1, tmp2, tmp3
0119               *  waux1, waux2, waux3
0120               ********|*****|*********************|**************************
0121 29B6 C83B  42 puthex  mov   *r11+,@wyx            ; Set cursor
     29B8 832A     
0122 29BA 0262  22         ori   config,>8000          ; CONFIG register bit 0=1
     29BC 8000     
0123 29BE 10B9  14         jmp   mkhex                 ; Convert number and display
0124               
                   < runlib.asm
0201               
0203                       copy  "cpu_numsupport.asm"       ; CPU unsigned numbers support
     **** ****     > cpu_numsupport.asm
0001               * FILE......: cpu_numsupport.asm
0002               * Purpose...: CPU create, display numbers module
0003               
0004               ***************************************************************
0005               * MKNUM - Convert unsigned number to string
0006               ***************************************************************
0007               *  BL   @MKNUM
0008               *  DATA P0,P1,P2
0009               *
0010               *  P0   = Pointer to 16 bit unsigned number
0011               *  P1   = Pointer to 5 byte string buffer
0012               *  P2HB = Offset for ASCII digit
0013               *  P2LB = Character for replacing leading 0's
0014               *
0015               *  (CONFIG:0 = 1) = Display number at cursor YX
0016               *-------------------------------------------------------------
0017               *  Destroys registers tmp0-tmp4
0018               ********|*****|*********************|**************************
0019 29C0 0207  20 mknum   li    tmp3,5                ; Digit counter
     29C2 0005     
0020 29C4 C17B  30         mov   *r11+,tmp1            ; \ Get 16 bit unsigned number
0021 29C6 C155  26         mov   *tmp1,tmp1            ; /
0022 29C8 C23B  30         mov   *r11+,tmp4            ; Pointer to string buffer
0023 29CA 0228  22         ai    tmp4,4                ; Get end of buffer
     29CC 0004     
0024 29CE 0206  20         li    tmp2,10               ; Divide by 10 to isolate last digit
     29D0 000A     
0025               *--------------------------------------------------------------
0026               *  Do string conversion
0027               *--------------------------------------------------------------
0028 29D2 04C4  14 mknum1  clr   tmp0                  ; Clear the high word of the dividend
0029 29D4 3D06 128         div   tmp2,tmp0             ; (TMP0:TMP1) / 10 (TMP2)
0030 29D6 06C5  14         swpb  tmp1                  ; Move to high-byte for writing to buffer
0031 29D8 B15B  26         ab    *r11,tmp1             ; Add offset for ASCII digit
0032 29DA D605  30         movb  tmp1,*tmp4            ; Write remainder to string buffer
0033 29DC C144  18         mov   tmp0,tmp1             ; Move integer result into R4 for next digit
0034 29DE 0608  14         dec   tmp4                  ; Adjust string pointer for next digit
0035 29E0 0607  14         dec   tmp3                  ; Decrease counter
0036 29E2 16F7  14         jne   mknum1                ; Do next digit
0037               *--------------------------------------------------------------
0038               *  Replace leading 0's with fill character
0039               *--------------------------------------------------------------
0040 29E4 0207  20         li    tmp3,4                ; Check first 4 digits
     29E6 0004     
0041 29E8 0588  14         inc   tmp4                  ; Too far, back to buffer start
0042 29EA C11B  26         mov   *r11,tmp0
0043 29EC 0A84  32         sla   tmp0,8                ; Only keep fill character in HB
0044 29EE 96D8  34 mknum2  cb    *tmp4,*r11            ; Digit = 0 ?
0045 29F0 1305  14         jeq   mknum4                ; Yes, replace with fill character
0046 29F2 05CB  14 mknum3  inct  r11
0047 29F4 20A0  32         coc   @wbit0,config         ; Check if 'display' bit is set
     29F6 2020     
0048 29F8 1305  14         jeq   mknum5                ; Yes, so show at current YX position
0049 29FA 045B  20         b     *r11                  ; Exit
0050 29FC DE04  32 mknum4  movb  tmp0,*tmp4+           ; Replace leading 0 with fill character
0051 29FE 0607  14         dec   tmp3                  ; 4th digit processed ?
0052 2A00 13F8  14         jeq   mknum3                ; Yes, exit
0053 2A02 10F5  14         jmp   mknum2                ; No, next one
0054               *--------------------------------------------------------------
0055               *  Display integer on screen at current YX position
0056               *--------------------------------------------------------------
0057 2A04 0242  22 mknum5  andi  config,>7fff          ; Reset bit 0
     2A06 7FFF     
0058 2A08 C10B  18         mov   r11,tmp0
0059 2A0A 0224  22         ai    tmp0,-4
     2A0C FFFC     
0060 2A0E C154  26         mov   *tmp0,tmp1            ; Get buffer address
0061 2A10 0206  20         li    tmp2,>0500            ; String length = 5
     2A12 0500     
0062 2A14 0460  28         b     @xutstr               ; Display string
     2A16 2422     
0063               
0064               
0065               
0066               
0067               ***************************************************************
0068               * trimnum - Trim unsigned number string
0069               ***************************************************************
0070               *  bl   @trimnum
0071               *  data p0,p1,p2
0072               *--------------------------------------------------------------
0073               *  p0   = Pointer to 5 byte string buffer (no length byte!)
0074               *  p1   = Pointer to output variable
0075               *  p2   = Padding character to match against
0076               *--------------------------------------------------------------
0077               *  Copy unsigned number string into a length-padded, left
0078               *  justified string for display with putstr, putat, ...
0079               *
0080               *  The new string starts at index 5 in buffer, overwriting
0081               *  anything that is located there !
0082               *
0083               *               01234|56789A
0084               *  Before...:   XXXXX          length
0085               *  After....:   XXXXY|zY       z=1
0086               *               XXXYY|zYY      z=2
0087               *               XXYYY|zYYY     z=3
0088               *               XYYYY|zYYYY    z=4
0089               *               YYYYY|zYYYYY   z=5
0090               *--------------------------------------------------------------
0091               *  Destroys registers tmp0-tmp3
0092               ********|*****|*********************|**************************
0093               trimnum:
0094 2A18 C13B  30         mov   *r11+,tmp0            ; Get pointer to input string
0095 2A1A C17B  30         mov   *r11+,tmp1            ; Get pointer to output string
0096 2A1C C1BB  30         mov   *r11+,tmp2            ; Get padding character
0097 2A1E 06C6  14         swpb  tmp2                  ; LO <-> HI
0098 2A20 0207  20         li    tmp3,5                ; Set counter
     2A22 0005     
0099                       ;------------------------------------------------------
0100                       ; Scan for padding character from left to right
0101                       ;------------------------------------------------------:
0102               trimnum_scan:
0103 2A24 9194  26         cb    *tmp0,tmp2            ; Matches padding character ?
0104 2A26 1604  14         jne   trimnum_setlen        ; No, exit loop
0105 2A28 0584  14         inc   tmp0                  ; Next character
0106 2A2A 0607  14         dec   tmp3                  ; Last digit reached ?
0107 2A2C 1301  14         jeq   trimnum_setlen        ; yes, exit loop
0108 2A2E 10FA  14         jmp   trimnum_scan
0109                       ;------------------------------------------------------
0110                       ; Scan completed, set length byte new string
0111                       ;------------------------------------------------------
0112               trimnum_setlen:
0113 2A30 06C7  14         swpb  tmp3                  ; LO <-> HI
0114 2A32 DD47  32         movb  tmp3,*tmp1+           ; Update string-length in work buffer
0115 2A34 06C7  14         swpb  tmp3                  ; LO <-> HI
0116                       ;------------------------------------------------------
0117                       ; Start filling new string
0118                       ;------------------------------------------------------
0119               trimnum_fill:
0120 2A36 DD74  42         movb  *tmp0+,*tmp1+         ; Copy character
0121 2A38 0607  14         dec   tmp3                  ; Last character ?
0122 2A3A 16FD  14         jne   trimnum_fill          ; Not yet, repeat
0123 2A3C 045B  20         b     *r11                  ; Return
0124               
0125               
0126               
0127               
0128               ***************************************************************
0129               * PUTNUM - Put unsigned number on screen
0130               ***************************************************************
0131               *  BL   @PUTNUM
0132               *  DATA P0,P1,P2,P3
0133               *--------------------------------------------------------------
0134               *  P0   = YX position
0135               *  P1   = Pointer to 16 bit unsigned number
0136               *  P2   = Pointer to 5 byte string buffer
0137               *  P3HB = Offset for ASCII digit
0138               *  P3LB = Character for replacing leading 0's
0139               ********|*****|*********************|**************************
0140 2A3E C83B  42 putnum  mov   *r11+,@wyx            ; Set cursor
     2A40 832A     
0141 2A42 0262  22         ori   config,>8000          ; CONFIG register bit 0=1
     2A44 8000     
0142 2A46 10BC  14         jmp   mknum                 ; Convert number and display
                   < runlib.asm
0205               
0209               
0213               
0217               
0221               
0223                       copy  "cpu_strings.asm"          ; String utilities support
     **** ****     > cpu_strings.asm
0001               * FILE......: cpu_strings.asm
0002               * Purpose...: CPU string manipulation library
0003               
0004               
0005               ***************************************************************
0006               * string.ltrim - Left justify string
0007               ***************************************************************
0008               *  bl   @string.ltrim
0009               *       data p0,p1,p2
0010               *--------------------------------------------------------------
0011               *  P0 = Pointer to length-prefix string
0012               *  P1 = Pointer to RAM work buffer
0013               *  P2 = Fill character
0014               *--------------------------------------------------------------
0015               *  BL   @xstring.ltrim
0016               *
0017               *  TMP0 = Pointer to length-prefix string
0018               *  TMP1 = Pointer to RAM work buffer
0019               *  TMP2 = Fill character
0020               ********|*****|*********************|**************************
0021               string.ltrim:
0022 2A48 0649  14         dect  stack
0023 2A4A C64B  30         mov   r11,*stack            ; Save return address
0024 2A4C 0649  14         dect  stack
0025 2A4E C644  30         mov   tmp0,*stack           ; Push tmp0
0026 2A50 0649  14         dect  stack
0027 2A52 C645  30         mov   tmp1,*stack           ; Push tmp1
0028 2A54 0649  14         dect  stack
0029 2A56 C646  30         mov   tmp2,*stack           ; Push tmp2
0030 2A58 0649  14         dect  stack
0031 2A5A C647  30         mov   tmp3,*stack           ; Push tmp3
0032                       ;-----------------------------------------------------------------------
0033                       ; Get parameter values
0034                       ;-----------------------------------------------------------------------
0035 2A5C C13B  30         mov   *r11+,tmp0            ; Pointer to length-prefixed string
0036 2A5E C17B  30         mov   *r11+,tmp1            ; RAM work buffer
0037 2A60 C1BB  30         mov   *r11+,tmp2            ; Fill character
0038 2A62 100A  14         jmp   !
0039                       ;-----------------------------------------------------------------------
0040                       ; Register version
0041                       ;-----------------------------------------------------------------------
0042               xstring.ltrim:
0043 2A64 0649  14         dect  stack
0044 2A66 C64B  30         mov   r11,*stack            ; Save return address
0045 2A68 0649  14         dect  stack
0046 2A6A C644  30         mov   tmp0,*stack           ; Push tmp0
0047 2A6C 0649  14         dect  stack
0048 2A6E C645  30         mov   tmp1,*stack           ; Push tmp1
0049 2A70 0649  14         dect  stack
0050 2A72 C646  30         mov   tmp2,*stack           ; Push tmp2
0051 2A74 0649  14         dect  stack
0052 2A76 C647  30         mov   tmp3,*stack           ; Push tmp3
0053                       ;-----------------------------------------------------------------------
0054                       ; Start
0055                       ;-----------------------------------------------------------------------
0056 2A78 C1D4  26 !       mov   *tmp0,tmp3
0057 2A7A 06C7  14         swpb  tmp3                  ; LO <-> HI
0058 2A7C 0247  22         andi  tmp3,>00ff            ; Discard HI byte tmp2 (only keep length)
     2A7E 00FF     
0059 2A80 0A86  32         sla   tmp2,8                ; LO -> HI fill character
0060                       ;-----------------------------------------------------------------------
0061                       ; Scan string from left to right and compare with fill character
0062                       ;-----------------------------------------------------------------------
0063               string.ltrim.scan:
0064 2A82 9194  26         cb    *tmp0,tmp2            ; Do we have a fill character?
0065 2A84 1604  14         jne   string.ltrim.move     ; No, now move string left
0066 2A86 0584  14         inc   tmp0                  ; Next byte
0067 2A88 0607  14         dec   tmp3                  ; Shorten string length
0068 2A8A 1301  14         jeq   string.ltrim.move     ; Exit if all characters processed
0069 2A8C 10FA  14         jmp   string.ltrim.scan     ; Scan next characer
0070                       ;-----------------------------------------------------------------------
0071                       ; Copy part of string to RAM work buffer (This is the left-justify)
0072                       ;-----------------------------------------------------------------------
0073               string.ltrim.move:
0074 2A8E 9194  26         cb    *tmp0,tmp2            ; Do we have a fill character?
0075 2A90 C1C7  18         mov   tmp3,tmp3             ; String length = 0 ?
0076 2A92 1306  14         jeq   string.ltrim.panic    ; File length assert
0077 2A94 C187  18         mov   tmp3,tmp2
0078 2A96 06C7  14         swpb  tmp3                  ; HI <-> LO
0079 2A98 DD47  32         movb  tmp3,*tmp1+           ; Set new string length byte in RAM workbuf
0080               
0081 2A9A 06A0  32         bl    @xpym2m               ; tmp0 = Memory source address
     2A9C 24FA     
0082                                                   ; tmp1 = Memory target address
0083                                                   ; tmp2 = Number of bytes to copy
0084 2A9E 1004  14         jmp   string.ltrim.exit
0085                       ;-----------------------------------------------------------------------
0086                       ; CPU crash
0087                       ;-----------------------------------------------------------------------
0088               string.ltrim.panic:
0089 2AA0 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2AA2 FFCE     
0090 2AA4 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2AA6 2026     
0091                       ;----------------------------------------------------------------------
0092                       ; Exit
0093                       ;----------------------------------------------------------------------
0094               string.ltrim.exit:
0095 2AA8 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0096 2AAA C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0097 2AAC C179  30         mov   *stack+,tmp1          ; Pop tmp1
0098 2AAE C139  30         mov   *stack+,tmp0          ; Pop tmp0
0099 2AB0 C2F9  30         mov   *stack+,r11           ; Pop r11
0100 2AB2 045B  20         b     *r11                  ; Return to caller
0101               
0102               
0103               
0104               
0105               ***************************************************************
0106               * string.getlenc - Get length of C-style string
0107               ***************************************************************
0108               *  bl   @string.getlenc
0109               *       data p0,p1
0110               *--------------------------------------------------------------
0111               *  P0 = Pointer to C-style string
0112               *  P1 = String termination character
0113               *--------------------------------------------------------------
0114               *  bl   @xstring.getlenc
0115               *
0116               *  TMP0 = Pointer to C-style string
0117               *  TMP1 = Termination character
0118               *--------------------------------------------------------------
0119               *  OUTPUT:
0120               *  @waux1 = Length of string
0121               ********|*****|*********************|**************************
0122               string.getlenc:
0123 2AB4 0649  14         dect  stack
0124 2AB6 C64B  30         mov   r11,*stack            ; Save return address
0125 2AB8 05D9  26         inct  *stack                ; Skip "data P0"
0126 2ABA 05D9  26         inct  *stack                ; Skip "data P1"
0127 2ABC 0649  14         dect  stack
0128 2ABE C644  30         mov   tmp0,*stack           ; Push tmp0
0129 2AC0 0649  14         dect  stack
0130 2AC2 C645  30         mov   tmp1,*stack           ; Push tmp1
0131 2AC4 0649  14         dect  stack
0132 2AC6 C646  30         mov   tmp2,*stack           ; Push tmp2
0133                       ;-----------------------------------------------------------------------
0134                       ; Get parameter values
0135                       ;-----------------------------------------------------------------------
0136 2AC8 C13B  30         mov   *r11+,tmp0            ; Pointer to C-style string
0137 2ACA C17B  30         mov   *r11+,tmp1            ; String termination character
0138 2ACC 1008  14         jmp   !
0139                       ;-----------------------------------------------------------------------
0140                       ; Register version
0141                       ;-----------------------------------------------------------------------
0142               xstring.getlenc:
0143 2ACE 0649  14         dect  stack
0144 2AD0 C64B  30         mov   r11,*stack            ; Save return address
0145 2AD2 0649  14         dect  stack
0146 2AD4 C644  30         mov   tmp0,*stack           ; Push tmp0
0147 2AD6 0649  14         dect  stack
0148 2AD8 C645  30         mov   tmp1,*stack           ; Push tmp1
0149 2ADA 0649  14         dect  stack
0150 2ADC C646  30         mov   tmp2,*stack           ; Push tmp2
0151                       ;-----------------------------------------------------------------------
0152                       ; Start
0153                       ;-----------------------------------------------------------------------
0154 2ADE 0A85  32 !       sla   tmp1,8                ; LSB to MSB
0155 2AE0 04C6  14         clr   tmp2                  ; Loop counter
0156                       ;-----------------------------------------------------------------------
0157                       ; Scan string for termination character
0158                       ;-----------------------------------------------------------------------
0159               string.getlenc.loop:
0160 2AE2 0586  14         inc   tmp2
0161 2AE4 9174  28         cb    *tmp0+,tmp1           ; Compare character
0162 2AE6 1304  14         jeq   string.getlenc.putlength
0163                       ;-----------------------------------------------------------------------
0164                       ; Assert on string length
0165                       ;-----------------------------------------------------------------------
0166 2AE8 0286  22         ci    tmp2,255
     2AEA 00FF     
0167 2AEC 1505  14         jgt   string.getlenc.panic
0168 2AEE 10F9  14         jmp   string.getlenc.loop
0169                       ;-----------------------------------------------------------------------
0170                       ; Return length
0171                       ;-----------------------------------------------------------------------
0172               string.getlenc.putlength:
0173 2AF0 0606  14         dec   tmp2                  ; One time adjustment
0174 2AF2 C806  30         mov   tmp2,@waux1           ; Store length
     2AF4 833C     
0175 2AF6 1004  14         jmp   string.getlenc.exit   ; Exit
0176                       ;-----------------------------------------------------------------------
0177                       ; CPU crash
0178                       ;-----------------------------------------------------------------------
0179               string.getlenc.panic:
0180 2AF8 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2AFA FFCE     
0181 2AFC 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2AFE 2026     
0182                       ;----------------------------------------------------------------------
0183                       ; Exit
0184                       ;----------------------------------------------------------------------
0185               string.getlenc.exit:
0186 2B00 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0187 2B02 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0188 2B04 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0189 2B06 C2F9  30         mov   *stack+,r11           ; Pop r11
0190 2B08 045B  20         b     *r11                  ; Return to caller
                   < runlib.asm
0225               
0229               
0231                       copy  "cpu_scrpad_backrest.asm"  ; Scratchpad backup/restore
     **** ****     > cpu_scrpad_backrest.asm
0001               * FILE......: cpu_scrpad_backrest.asm
0002               * Purpose...: Scratchpad memory backup/restore functions
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                Scratchpad memory backup/restore
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * cpu.scrpad.backup - Backup 256 bytes of scratchpad >8300 to
0010               *                     predefined memory target @cpu.scrpad.tgt
0011               ***************************************************************
0012               *  bl   @cpu.scrpad.backup
0013               *--------------------------------------------------------------
0014               *  Register usage
0015               *  r0-r2, but values restored before exit
0016               *--------------------------------------------------------------
0017               *  Backup 256 bytes of scratchpad memory >8300 to destination
0018               *  @cpu.scrpad.tgt (+ >ff)
0019               *
0020               *  Expects current workspace to be in scratchpad memory.
0021               ********|*****|*********************|**************************
0022               cpu.scrpad.backup:
0023 2B0A C800  38         mov   r0,@cpu.scrpad.tgt    ; Save @>8300 (r0)
     2B0C F000     
0024 2B0E C801  38         mov   r1,@cpu.scrpad.tgt+2  ; Save @>8302 (r1)
     2B10 F002     
0025 2B12 C802  38         mov   r2,@cpu.scrpad.tgt+4  ; Save @>8304 (r2)
     2B14 F004     
0026                       ;------------------------------------------------------
0027                       ; Prepare for copy loop
0028                       ;------------------------------------------------------
0029 2B16 0200  20         li    r0,>8306              ; Scratchpad source address
     2B18 8306     
0030 2B1A 0201  20         li    r1,cpu.scrpad.tgt+6   ; RAM target address
     2B1C F006     
0031 2B1E 0202  20         li    r2,62                 ; Loop counter
     2B20 003E     
0032                       ;------------------------------------------------------
0033                       ; Copy memory range >8306 - >83ff
0034                       ;------------------------------------------------------
0035               cpu.scrpad.backup.copy:
0036 2B22 CC70  46         mov   *r0+,*r1+
0037 2B24 CC70  46         mov   *r0+,*r1+
0038 2B26 0642  14         dect  r2
0039 2B28 16FC  14         jne   cpu.scrpad.backup.copy
0040 2B2A C820  50         mov   @>83fe,@cpu.scrpad.tgt + >fe
     2B2C 83FE     
     2B2E F0FE     
0041                                                   ; Copy last word
0042                       ;------------------------------------------------------
0043                       ; Restore register r0 - r2
0044                       ;------------------------------------------------------
0045 2B30 C020  34         mov   @cpu.scrpad.tgt,r0    ; Restore r0
     2B32 F000     
0046 2B34 C060  34         mov   @cpu.scrpad.tgt+2,r1  ; Restore r1
     2B36 F002     
0047 2B38 C0A0  34         mov   @cpu.scrpad.tgt+4,r2  ; Restore r2
     2B3A F004     
0048                       ;------------------------------------------------------
0049                       ; Exit
0050                       ;------------------------------------------------------
0051               cpu.scrpad.backup.exit:
0052 2B3C 045B  20         b     *r11                  ; Return to caller
0053               
0054               
0055               ***************************************************************
0056               * cpu.scrpad.restore - Restore 256 bytes of scratchpad from
0057               *                      predefined target @cpu.scrpad.tgt
0058               *                      to destination >8300
0059               ***************************************************************
0060               *  bl   @cpu.scrpad.restore
0061               *--------------------------------------------------------------
0062               *  Register usage
0063               *  r0-r1
0064               *--------------------------------------------------------------
0065               *  Restore scratchpad from memory area @cpu.scrpad.tgt (+ >ff).
0066               *  Current workspace may not be in scratchpad >8300 when called.
0067               *
0068               *  Destroys r0,r1
0069               ********|*****|*********************|**************************
0070               cpu.scrpad.restore:
0071                       ;------------------------------------------------------
0072                       ; Prepare for copy loop, WS
0073                       ;------------------------------------------------------
0074 2B3E 0200  20         li    r0,cpu.scrpad.tgt
     2B40 F000     
0075 2B42 0201  20         li    r1,>8300
     2B44 8300     
0076                       ;------------------------------------------------------
0077                       ; Copy 256 bytes from @cpu.scrpad.tgt to >8300
0078                       ;------------------------------------------------------
0079               cpu.scrpad.restore.copy:
0080 2B46 CC70  46         mov   *r0+,*r1+
0081 2B48 CC70  46         mov   *r0+,*r1+
0082 2B4A 0281  22         ci    r1,>8400
     2B4C 8400     
0083 2B4E 11FB  14         jlt   cpu.scrpad.restore.copy
0084                       ;------------------------------------------------------
0085                       ; Exit
0086                       ;------------------------------------------------------
0087               cpu.scrpad.restore.exit:
0088 2B50 045B  20         b     *r11                  ; Return to caller
                   < runlib.asm
0232                       copy  "cpu_scrpad_paging.asm"    ; Scratchpad memory paging
     **** ****     > cpu_scrpad_paging.asm
0001               * FILE......: cpu_scrpad_paging.asm
0002               * Purpose...: CPU memory paging functions
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                     CPU memory paging
0006               *//////////////////////////////////////////////////////////////
0007               
0008               
0009               ***************************************************************
0010               * cpu.scrpad.pgout - Page out 256 bytes of scratchpad at >8300
0011               *                    to CPU memory destination P0 (tmp1)
0012               *                    and replace with 256 bytes of memory from
0013               *                    predefined destination @cpu.scrpad.target
0014               ***************************************************************
0015               *  bl   @cpu.scrpad.pgout
0016               *       DATA p0
0017               *
0018               *  P0 = CPU memory destination
0019               *--------------------------------------------------------------
0020               *  bl   @xcpu.scrpad.pgout
0021               *  tmp1 = CPU memory destination
0022               *--------------------------------------------------------------
0023               *  Register usage
0024               *  tmp3      = Copy of CPU memory destination
0025               *  tmp0-tmp2 = Used as temporary registers
0026               *  @waux1    = Copy of r5 (tmp1)
0027               *--------------------------------------------------------------
0028               *  Remarks
0029               *  Copies 256 bytes from scratchpad to CPU memory destination
0030               *  specified in P0 (tmp1).
0031               *
0032               *  Then switches to the newly copied workspace in P0 (tmp1).
0033               *
0034               *  Finally it copies 256 bytes from @cpu.scrpad.tgt
0035               *  to scratchpad >8300 and activates workspace at >8300
0036               ********|*****|*********************|**************************
0037               cpu.scrpad.pgout:
0038 2B52 C15B  26         mov   *r11,tmp1             ; tmp1 = Memory target address
0039                       ;------------------------------------------------------
0040                       ; Copy registers r0-r7
0041                       ;------------------------------------------------------
0042 2B54 CD40  34         mov   r0,*tmp1+             ; Backup r0
0043 2B56 CD41  34         mov   r1,*tmp1+             ; Backup r1
0044 2B58 CD42  34         mov   r2,*tmp1+             ; Backup r2
0045 2B5A CD43  34         mov   r3,*tmp1+             ; Backup r3
0046 2B5C CD44  34         mov   r4,*tmp1+             ; Backup r4
0047 2B5E CD45  34         mov   r5,*tmp1+             ; Backup r5 (is tmp1, so is bogus)
0048 2B60 CD46  34         mov   r6,*tmp1+             ; Backup r6
0049 2B62 CD47  34         mov   r7,*tmp1+             ; Backup r7
0050                       ;------------------------------------------------------
0051                       ; Copy scratchpad memory to destination
0052                       ;------------------------------------------------------
0053               xcpu.scrpad.pgout:
0054 2B64 0204  20         li    tmp0,>8310            ; tmp0 = Memory source address
     2B66 8310     
0055                                                   ;        as of register r8
0056 2B68 0206  20         li    tmp2,15               ; tmp2 = 15 iterations
     2B6A 000F     
0057                       ;------------------------------------------------------
0058                       ; Copy memory
0059                       ;------------------------------------------------------
0060 2B6C CD74  46 !       mov   *tmp0+,*tmp1+         ; Copy word 1
0061 2B6E CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 2
0062 2B70 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 3
0063 2B72 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 4
0064 2B74 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 5
0065 2B76 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 6
0066 2B78 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 7
0067 2B7A CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 8
0068 2B7C 0606  14         dec   tmp2
0069 2B7E 16F6  14         jne   -!                    ; Loop until done
0070                       ;------------------------------------------------------
0071                       ; Switch to newly copied workspace
0072                       ;------------------------------------------------------
0073 2B80 C37B  30         mov   *r11+,r13             ; R13=WP   (pop tmp1 from stack)
0074 2B82 020E  20         li    r14,cpu.scrpad.pgout.after.rtwp
     2B84 2B8A     
0075                                                   ; R14=PC
0076 2B86 04CF  14         clr   r15                   ; R15=STATUS
0077                       ;------------------------------------------------------
0078                       ; If we get here, WS was copied to specified
0079                       ; destination.  Also contents of r13,r14,r15
0080                       ; are about to be overwritten by rtwp instruction.
0081                       ;------------------------------------------------------
0082 2B88 0380  18         rtwp                        ; Activate copied workspace
0083                                                   ; in non-scratchpad memory!
0084               
0085               cpu.scrpad.pgout.after.rtwp:
0086 2B8A 0460  28         b     @cpu.scrpad.restore   ; Restore scratchpad memory
     2B8C 2B3E     
0087                                                   ; from @cpu.scrpad.tgt to @>8300
0088                                                   ; and switch workspace to >8300.
0089                       ;------------------------------------------------------
0090                       ; Exit
0091                       ;------------------------------------------------------
0092               cpu.scrpad.pgout.exit:
0093 2B8E 045B  20         b     *r11                  ; Return to caller
0094               
0095               
0096               ***************************************************************
0097               * cpu.scrpad.pgin - Page in 256 bytes of scratchpad memory
0098               *                   at >8300 from CPU memory specified in
0099               *                   p0 (tmp0)
0100               ***************************************************************
0101               *  bl   @cpu.scrpad.pgin
0102               *       DATA p0
0103               *
0104               *  P0 = CPU memory source
0105               *--------------------------------------------------------------
0106               *  bl   @memx.scrpad.pgin
0107               *  TMP0 = CPU memory source
0108               *--------------------------------------------------------------
0109               *  Register usage
0110               *  tmp0-tmp2 = Used as temporary registers
0111               *--------------------------------------------------------------
0112               *  Remarks
0113               *  Copies 256 bytes from CPU memory source to scratchpad >8300
0114               *  and activates workspace in scratchpad >8300
0115               *
0116               *  It's expected that the workspace is outside scratchpad >8300
0117               *  when calling this function.
0118               ********|*****|*********************|**************************
0119               cpu.scrpad.pgin:
0120 2B90 C13B  30         mov   *r11+,tmp0            ; tmp0 = Memory source address
0121                       ;------------------------------------------------------
0122                       ; Copy scratchpad memory to destination
0123                       ;------------------------------------------------------
0124               xcpu.scrpad.pgin:
0125 2B92 0205  20         li    tmp1,>8300            ; tmp1 = Memory destination address
     2B94 8300     
0126 2B96 0206  20         li    tmp2,16               ; tmp2 = 256/16
     2B98 0010     
0127                       ;------------------------------------------------------
0128                       ; Copy memory
0129                       ;------------------------------------------------------
0130 2B9A CD74  46 !       mov   *tmp0+,*tmp1+         ; Copy word 1
0131 2B9C CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 2
0132 2B9E CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 3
0133 2BA0 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 4
0134 2BA2 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 5
0135 2BA4 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 6
0136 2BA6 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 7
0137 2BA8 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 8
0138 2BAA 0606  14         dec   tmp2
0139 2BAC 16F6  14         jne   -!                    ; Loop until done
0140                       ;------------------------------------------------------
0141                       ; Switch workspace to scratchpad memory
0142                       ;------------------------------------------------------
0143 2BAE 02E0  18         lwpi  >8300                 ; Activate copied workspace
     2BB0 8300     
0144                       ;------------------------------------------------------
0145                       ; Exit
0146                       ;------------------------------------------------------
0147               cpu.scrpad.pgin.exit:
0148 2BB2 045B  20         b     *r11                  ; Return to caller
                   < runlib.asm
0234               
0236                       copy  "fio.equ"                  ; File I/O equates
     **** ****     > fio.equ
0001               * FILE......: fio.equ
0002               * Purpose...: Equates for file I/O operations
0003               
0004               ***************************************************************
0005               * File IO operations - Byte 0 in PAB
0006               ************************************@**************************
0007      0000     io.op.open       equ >00            ; OPEN
0008      0001     io.op.close      equ >01            ; CLOSE
0009      0002     io.op.read       equ >02            ; READ
0010      0003     io.op.write      equ >03            ; WRITE
0011      0004     io.op.rewind     equ >04            ; RESTORE/REWIND
0012      0005     io.op.load       equ >05            ; LOAD
0013      0006     io.op.save       equ >06            ; SAVE
0014      0007     io.op.delfile    equ >07            ; DELETE FILE
0015      0008     io.op.scratch    equ >08            ; SCRATCH
0016      0009     io.op.status     equ >09            ; STATUS
0017               ***************************************************************
0018               * File & data type - Byte 1 in PAB (Bit 0-4)
0019               ***************************************************************
0020               * Bit position: 4  3  21  0
0021               *               |  |  ||   \
0022               *               |  |  ||    File type
0023               *               |  |  ||    0 = INTERNAL
0024               *               |  |  ||    1 = FIXED
0025               *               |  |  \\
0026               *               |  |   File operation
0027               *               |  |   00 - UPDATE
0028               *               |  |   01 - OUTPUT
0029               *               |  |   10 - INPUT
0030               *               |  |   11 - APPEND
0031               *               |  |
0032               *               |  \
0033               *               |   Data type
0034               *               |   0 = DISPLAY
0035               *               |   1 = INTERNAL
0036               *               |
0037               *               \
0038               *                Record type
0039               *                0 = FIXED
0040               *                1 = VARIABLE
0041               ***************************************************************
0042               ; Bit position           43210
0043               ************************************|**************************
0044      0000     io.seq.upd.dis.fix  equ :00000      ; 00
0045      0001     io.rel.upd.dis.fix  equ :00001      ; 01
0046      0003     io.rel.out.dis.fix  equ :00011      ; 02
0047      0002     io.seq.out.dis.fix  equ :00010      ; 03
0048      0004     io.seq.inp.dis.fix  equ :00100      ; 04
0049      0005     io.rel.inp.dis.fix  equ :00101      ; 05
0050      0006     io.seq.app.dis.fix  equ :00110      ; 06
0051      0007     io.rel.app.dis.fix  equ :00111      ; 07
0052      0008     io.seq.upd.int.fix  equ :01000      ; 08
0053      0009     io.rel.upd.int.fix  equ :01001      ; 09
0054      000A     io.seq.out.int.fix  equ :01010      ; 0A
0055      000B     io.rel.out.int.fix  equ :01011      ; 0B
0056      000C     io.seq.inp.int.fix  equ :01100      ; 0C
0057      000D     io.rel.inp.int.fix  equ :01101      ; 0D
0058      000E     io.seq.app.int.fix  equ :01110      ; 0E
0059      000F     io.rel.app.int.fix  equ :01111      ; 0F
0060      0010     io.seq.upd.dis.var  equ :10000      ; 10
0061      0011     io.rel.upd.dis.var  equ :10001      ; 11
0062      0012     io.seq.out.dis.var  equ :10010      ; 12
0063      0013     io.rel.out.dis.var  equ :10011      ; 13
0064      0014     io.seq.inp.dis.var  equ :10100      ; 14
0065      0015     io.rel.inp.dis.var  equ :10101      ; 15
0066      0016     io.seq.app.dis.var  equ :10110      ; 16
0067      0017     io.rel.app.dis.var  equ :10111      ; 17
0068      0018     io.seq.upd.int.var  equ :11000      ; 18
0069      0019     io.rel.upd.int.var  equ :11001      ; 19
0070      001A     io.seq.out.int.var  equ :11010      ; 1A
0071      001B     io.rel.out.int.var  equ :11011      ; 1B
0072      001C     io.seq.inp.int.var  equ :11100      ; 1C
0073      001D     io.rel.inp.int.var  equ :11101      ; 1D
0074      001E     io.seq.app.int.var  equ :11110      ; 1E
0075      001F     io.rel.app.int.var  equ :11111      ; 1F
0076               ***************************************************************
0077               * File error codes - Byte 1 in PAB (Bits 5-7)
0078               ************************************|**************************
0079      0000     io.err.no_error_occured             equ 0
0080                       ; Error code 0 with condition bit reset, indicates that
0081                       ; no error has occured
0082               
0083      0000     io.err.bad_device_name              equ 0
0084                       ; Device indicated not in system
0085                       ; Error code 0 with condition bit set, indicates a
0086                       ; device not present in system
0087               
0088      0001     io.err.device_write_prottected      equ 1
0089                       ; Device is write protected
0090               
0091      0002     io.err.bad_open_attribute           equ 2
0092                       ; One or more of the OPEN attributes are illegal or do
0093                       ; not match the file's actual characteristics.
0094                       ; This could be:
0095                       ;   * File type
0096                       ;   * Record length
0097                       ;   * I/O mode
0098                       ;   * File organization
0099               
0100      0003     io.err.illegal_operation            equ 3
0101                       ; Either an issued I/O command was not supported, or a
0102                       ; conflict with the OPEN mode has occured
0103               
0104      0004     io.err.out_of_table_buffer_space    equ 4
0105                       ; The amount of space left on the device is insufficient
0106                       ; for the requested operation
0107               
0108      0005     io.err.eof                          equ 5
0109                       ; Attempt to read past end of file.
0110                       ; This error may also be given for non-existing records
0111                       ; in a relative record file
0112               
0113      0006     io.err.device_error                 equ 6
0114                       ; Covers all hard device errors, such as parity and
0115                       ; bad medium errors
0116               
0117      0007     io.err.file_error                   equ 7
0118                       ; Covers all file-related error like: program/data
0119                       ; file mismatch, non-existing file opened for input mode, etc.
                   < runlib.asm
0237                       copy  "fio_dsrlnk.asm"           ; DSRLNK for peripheral communication
     **** ****     > fio_dsrlnk.asm
0001               * FILE......: fio_dsrlnk.asm
0002               * Purpose...: Custom DSRLNK implementation
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                          DSRLNK
0006               *//////////////////////////////////////////////////////////////
0007               
0008               
0009               ***************************************************************
0010               * dsrlnk - DSRLNK for file I/O in DSR space >1000 - >1F00
0011               ***************************************************************
0012               *  blwp @dsrlnk
0013               *  data p0
0014               *--------------------------------------------------------------
0015               *  Input:
0016               *  P0     = 8 or 10 (a)
0017               *  @>8356 = Pointer to VDP PAB file descriptor length (PAB+9)
0018               *--------------------------------------------------------------
0019               *  Output:
0020               *  r0 LSB = Bits 13-15 from VDP PAB byte 1, right aligned
0021               *--------------------------------------------------------------
0022               *  Remarks:
0023               *
0024               *  You need to specify following equates in main program
0025               *
0026               *  dsrlnk.dsrlws      equ >????     ; Address of dsrlnk workspace
0027               *  dsrlnk.namsto      equ >????     ; 8-byte RAM buffer for storing device name
0028               *
0029               *  Scratchpad memory usage
0030               *  >8322            Parameter (>08) or (>0A) passed to dsrlnk
0031               *  >8356            Pointer to PAB
0032               *  >83D0            CRU address of current device
0033               *  >83D2            DSR entry address
0034               *  >83e0 - >83ff    GPL / DSRLNK workspace
0035               *
0036               *  Credits
0037               *  Originally appeared in Miller Graphics The Smart Programmer.
0038               *  This version based on version of Paolo Bagnaresi.
0039               *
0040               *  The following memory address can be used to directly jump
0041               *  into the DSR in consequtive calls without having to
0042               *  scan the PEB cards again:
0043               *
0044               *  dsrlnk.namsto  -  8-byte RAM buf for holding device name
0045               *  dsrlnk.savcru  -  CRU address of device in prev. DSR call
0046               *  dsrlnk.savent  -  DSR entry addr of prev. DSR call
0047               *  dsrlnk.savpab  -  Pointer to Device or Subprogram in PAB
0048               *  dsrlnk.savver  -  Version used in prev. DSR call
0049               *  dsrlnk.savlen  -  Length of DSR name of prev. DSR call (in MSB)
0050               *  dsrlnk.flgptr  -  Pointer to VDP PAB byte 1 (flag byte)
0051               
0052               *--------------------------------------------------------------
0053      A40A     dsrlnk.dstype equ   dsrlnk.dsrlws + 10
0054                                                   ; dstype is address of R5 of DSRLNK ws.
0055               ********|*****|*********************|**************************
0056 2BB4 A400     dsrlnk  data  dsrlnk.dsrlws         ; dsrlnk workspace
0057 2BB6 2BB8             data  dsrlnk.init           ; Entry point
0058                       ;------------------------------------------------------
0059                       ; DSRLNK entry point
0060                       ;------------------------------------------------------
0061               dsrlnk.init:
0062 2BB8 C17E  30         mov   *r14+,r5              ; Get pgm type for link
0063 2BBA C805  38         mov   r5,@dsrlnk.sav8a      ; Save data following blwp @dsrlnk (8 or >a)
     2BBC A428     
0064 2BBE 53E0  34         szcb  @hb$20,r15            ; Reset equal bit in status register
     2BC0 201C     
0065 2BC2 C020  30         mov   @>8356,r0             ; Get pointer to PAB+9 in VDP
     2BC4 8356     
0066 2BC6 C240  18         mov   r0,r9                 ; Save pointer
0067                       ;------------------------------------------------------
0068                       ; Fetch file descriptor length from PAB
0069                       ;------------------------------------------------------
0070 2BC8 0229  22         ai    r9,>fff8              ; Adjust r9 to addr PAB byte 1
     2BCA FFF8     
0071                                                   ; FLAG byte->(pabaddr+9)-8
0072 2BCC C809  38         mov   r9,@dsrlnk.flgptr     ; Save pointer to PAB byte 1
     2BCE A434     
0073                       ;---------------------------; Inline VSBR start
0074 2BD0 06C0  14         swpb  r0                    ;
0075 2BD2 D800  30         movb  r0,@vdpa              ; Send low byte
     2BD4 8C02     
0076 2BD6 06C0  14         swpb  r0                    ;
0077 2BD8 D800  30         movb  r0,@vdpa              ; Send high byte
     2BDA 8C02     
0078 2BDC D0E0  30         movb  @vdpr,r3              ; Read byte from VDP RAM
     2BDE 8800     
0079                       ;---------------------------; Inline VSBR end
0080 2BE0 0983  32         srl   r3,8                  ; Move to low byte
0081               
0082                       ;------------------------------------------------------
0083                       ; Fetch file descriptor device name from PAB
0084                       ;------------------------------------------------------
0085 2BE2 0704  14         seto  r4                    ; Init counter
0086 2BE4 0202  20         li    r2,dsrlnk.namsto      ; Point to 8-byte CPU buffer
     2BE6 A420     
0087 2BE8 0580  14 !       inc   r0                    ; Point to next char of name
0088 2BEA 0584  14         inc   r4                    ; Increment char counter
0089 2BEC 0284  22         ci    r4,>0007              ; Check if length more than 7 chars
     2BEE 0007     
0090 2BF0 1573  14         jgt   dsrlnk.error.devicename_invalid
0091                                                   ; Yes, error
0092 2BF2 80C4  18         c     r4,r3                 ; End of name?
0093 2BF4 130C  14         jeq   dsrlnk.device_name.get_length
0094                                                   ; Yes
0095               
0096                       ;---------------------------; Inline VSBR start
0097 2BF6 06C0  14         swpb  r0                    ;
0098 2BF8 D800  30         movb  r0,@vdpa              ; Send low byte
     2BFA 8C02     
0099 2BFC 06C0  14         swpb  r0                    ;
0100 2BFE D800  30         movb  r0,@vdpa              ; Send high byte
     2C00 8C02     
0101 2C02 D060  30         movb  @vdpr,r1              ; Read byte from VDP RAM
     2C04 8800     
0102                       ;---------------------------; Inline VSBR end
0103               
0104                       ;------------------------------------------------------
0105                       ; Look for end of device name, for example "DSK1."
0106                       ;------------------------------------------------------
0107 2C06 DC81  32         movb  r1,*r2+               ; Move into buffer
0108 2C08 9801  34         cb    r1,@dsrlnk.period     ; Is character a '.'
     2C0A 2D24     
0109 2C0C 16ED  14         jne   -!                    ; No, loop next char
0110                       ;------------------------------------------------------
0111                       ; Determine device name length
0112                       ;------------------------------------------------------
0113               dsrlnk.device_name.get_length:
0114 2C0E C104  18         mov   r4,r4                 ; Check if length = 0
0115 2C10 1363  14         jeq   dsrlnk.error.devicename_invalid
0116                                                   ; Yes, error
0117 2C12 04E0  26         clr   @>83d0
     2C14 83D0     
0118 2C16 C804  30         mov   r4,@>8354             ; Save name length for search (length
     2C18 8354     
0119                                                   ; goes to >8355 but overwrites >8354!)
0120 2C1A C804  38         mov   r4,@dsrlnk.savlen     ; Save name length for nextr dsrlnk call
     2C1C A432     
0121               
0122 2C1E 0584  14         inc   r4                    ; Adjust for dot
0123 2C20 A804  30         a     r4,@>8356             ; Point to position after name
     2C22 8356     
0124 2C24 C820  50         mov   @>8356,@dsrlnk.savpab ; Save pointer for next dsrlnk call
     2C26 8356     
     2C28 A42E     
0125                       ;------------------------------------------------------
0126                       ; Prepare for DSR scan >1000 - >1f00
0127                       ;------------------------------------------------------
0128               dsrlnk.dsrscan.start:
0129 2C2A 02E0  18         lwpi  >83e0                 ; Use GPL WS
     2C2C 83E0     
0130 2C2E 04C1  14         clr   r1                    ; Version found of dsr
0131 2C30 020C  20         li    r12,>0f00             ; Init cru address
     2C32 0F00     
0132                       ;------------------------------------------------------
0133                       ; Turn off ROM on current card
0134                       ;------------------------------------------------------
0135               dsrlnk.dsrscan.cardoff:
0136 2C34 C30C  18         mov   r12,r12               ; Anything to turn off?
0137 2C36 1301  14         jeq   dsrlnk.dsrscan.cardloop
0138                                                   ; No, loop over cards
0139 2C38 1E00  16         sbz   0                     ; Yes, turn off
0140                       ;------------------------------------------------------
0141                       ; Loop over cards and look if DSR present
0142                       ;------------------------------------------------------
0143               dsrlnk.dsrscan.cardloop:
0144 2C3A 022C  22         ai    r12,>0100             ; Next ROM to turn on
     2C3C 0100     
0145 2C3E 04E0  26         clr   @>83d0                ; Clear in case we are done
     2C40 83D0     
0146 2C42 028C  22         ci    r12,>2000             ; Card scan complete? (>1000 to >1F00)
     2C44 2000     
0147 2C46 1346  14         jeq   dsrlnk.error.nodsr_found
0148                                                   ; Yes, no matching DSR found
0149 2C48 C80C  30         mov   r12,@>83d0            ; Save address of next cru
     2C4A 83D0     
0150                       ;------------------------------------------------------
0151                       ; Look at card ROM (@>4000 eq 'AA' ?)
0152                       ;------------------------------------------------------
0153 2C4C 1D00  16         sbo   0                     ; Turn on ROM
0154 2C4E 0202  20         li    r2,>4000              ; Start at beginning of ROM
     2C50 4000     
0155 2C52 9812  42         cb    *r2,@dsrlnk.$aa00     ; Check for a valid DSR header
     2C54 2D20     
0156 2C56 16EE  14         jne   dsrlnk.dsrscan.cardoff
0157                                                   ; No ROM found on card
0158                       ;------------------------------------------------------
0159                       ; Valid DSR ROM found. Now loop over chain/subprograms
0160                       ;------------------------------------------------------
0161                       ; dstype is the address of R5 of the DSRLNK workspace,
0162                       ; which is where 8 for a DSR or 10 (>A) for a subprogram
0163                       ; is stored before the DSR ROM is searched.
0164                       ;------------------------------------------------------
0165 2C58 A0A0  34         a     @dsrlnk.dstype,r2     ; Goto first pointer (byte 8 or 10)
     2C5A A40A     
0166 2C5C 1003  14         jmp   dsrlnk.dsrscan.getentry
0167                       ;------------------------------------------------------
0168                       ; Next DSR entry
0169                       ;------------------------------------------------------
0170               dsrlnk.dsrscan.nextentry:
0171 2C5E C0A0  30         mov   @>83d2,r2             ; Offset 0 > Fetch link to next DSR or
     2C60 83D2     
0172                                                   ; subprogram
0173               
0174 2C62 1D00  16         sbo   0                     ; Turn ROM back on
0175                       ;------------------------------------------------------
0176                       ; Get DSR entry
0177                       ;------------------------------------------------------
0178               dsrlnk.dsrscan.getentry:
0179 2C64 C092  26         mov   *r2,r2                ; Is address a zero? (end of chain?)
0180 2C66 13E6  14         jeq   dsrlnk.dsrscan.cardoff
0181                                                   ; Yes, no more DSRs or programs to check
0182 2C68 C802  30         mov   r2,@>83d2             ; Offset 0 > Store link to next DSR or
     2C6A 83D2     
0183                                                   ; subprogram
0184               
0185 2C6C 05C2  14         inct  r2                    ; Offset 2 > Has call address of current
0186                                                   ; DSR/subprogram code
0187               
0188 2C6E C272  30         mov   *r2+,r9               ; Store call address in r9. Move r2 to
0189                                                   ; offset 4 (DSR/subprogram name)
0190                       ;------------------------------------------------------
0191                       ; Check file descriptor in DSR
0192                       ;------------------------------------------------------
0193 2C70 04C5  14         clr   r5                    ; Remove any old stuff
0194 2C72 D160  30         movb  @>8355,r5             ; Get length as counter
     2C74 8355     
0195 2C76 1309  14         jeq   dsrlnk.dsrscan.call_dsr
0196                                                   ; If zero, do not further check, call DSR
0197                                                   ; program
0198               
0199 2C78 9C85  28         cb    r5,*r2+               ; See if length matches
0200 2C7A 16F1  14         jne   dsrlnk.dsrscan.nextentry
0201                                                   ; No, length does not match.
0202                                                   ; Go process next DSR entry
0203               
0204 2C7C 0985  32         srl   r5,8                  ; Yes, move to low byte
0205 2C7E 0206  20         li    r6,dsrlnk.namsto      ; Point to 8-byte CPU buffer
     2C80 A420     
0206 2C82 9CB6  38 !       cb    *r6+,*r2+             ; Compare byte in CPU buffer with byte in
0207                                                   ; DSR ROM
0208 2C84 16EC  14         jne   dsrlnk.dsrscan.nextentry
0209                                                   ; Try next DSR entry if no match
0210 2C86 0605  14         dec   r5                    ; Update loop counter
0211 2C88 16FC  14         jne   -!                    ; Loop until full length checked
0212                       ;------------------------------------------------------
0213                       ; Call DSR program in card/device
0214                       ;------------------------------------------------------
0215               dsrlnk.dsrscan.call_dsr:
0216 2C8A 0581  14         inc   r1                    ; Next version found
0217 2C8C C80C  38         mov   r12,@dsrlnk.savcru    ; Save CRU address
     2C8E A42A     
0218 2C90 C809  38         mov   r9,@dsrlnk.savent     ; Save DSR entry address
     2C92 A42C     
0219 2C94 C801  38         mov   r1,@dsrlnk.savver     ; Save DSR Version number
     2C96 A430     
0220               
0221 2C98 020D  20         li    r13,>9800             ; Set GROM base to >9800 to prevent
     2C9A 9800     
0222                                                   ; lockup of TI Disk Controller DSR.
0223               
0224 2C9C 020F  20         li    r15,>8C02             ; Set VDP port address, needed to prevent
     2C9E 8C02     
0225                                                   ; lockup of TI Disk Controller DSR.
0226               
0227 2CA0 0699  24         bl    *r9                   ; Execute DSR
0228                       ;
0229                       ; Depending on IO result the DSR in card ROM does RET
0230                       ; or (INCT R11 + RET), meaning either (1) or (2) get executed.
0231                       ;
0232 2CA2 10DD  14         jmp   dsrlnk.dsrscan.nextentry
0233                                                   ; (1) error return
0234 2CA4 1E00  16         sbz   0                     ; (2) turn off card/device if good return
0235 2CA6 02E0  18         lwpi  dsrlnk.dsrlws         ; (2) restore workspace
     2CA8 A400     
0236 2CAA C009  30         mov   r9,r0                 ; Point to flag byte (PAB+1) in VDP PAB
0237                       ;------------------------------------------------------
0238                       ; Returned from DSR
0239                       ;------------------------------------------------------
0240               dsrlnk.dsrscan.return_dsr:
0241 2CAC C060  42         mov   @dsrlnk.sav8a,r1      ; get back data following blwp @dsrlnk
     2CAE A428     
0242                                                   ; (8 or >a)
0243 2CB0 0281  26         ci    r1,8                  ; was it 8?
     2CB2 0008     
0244 2CB4 1303  14         jeq   dsrlnk.dsrscan.dsr.8  ; yes, jump: normal dsrlnk
0245 2CB6 D060  38         movb  @>8350,r1             ; no, we have a data >a.
     2CB8 8350     
0246                                                   ; Get error byte from @>8350
0247 2CBA 1008  14         jmp   dsrlnk.dsrscan.dsr.a  ; go and return error byte to the caller
0248               
0249                       ;------------------------------------------------------
0250                       ; Read VDP PAB byte 1 after DSR call completed (status)
0251                       ;------------------------------------------------------
0252               dsrlnk.dsrscan.dsr.8:
0253                       ;---------------------------; Inline VSBR start
0254 2CBC 06C0  22         swpb  r0                    ;
0255 2CBE D800  34         movb  r0,@vdpa              ; send low byte
     2CC0 8C02     
0256 2CC2 06C0  22         swpb  r0                    ;
0257 2CC4 D800  34         movb  r0,@vdpa              ; send high byte
     2CC6 8C02     
0258 2CC8 D060  38         movb  @vdpr,r1              ; read byte from VDP ram
     2CCA 8800     
0259                       ;---------------------------; Inline VSBR end
0260               
0261                       ;------------------------------------------------------
0262                       ; Return DSR error to caller
0263                       ;------------------------------------------------------
0264               dsrlnk.dsrscan.dsr.a:
0265 2CCC 09D1  50         srl   r1,13                 ; just keep error bits
0266 2CCE 1605  14         jne   dsrlnk.error.io_error
0267                                                   ; handle IO error
0268 2CD0 0380  30         rtwp                        ; Return from DSR workspace to caller
0269                                                   ; workspace
0270               
0271                       ;------------------------------------------------------
0272                       ; IO-error handler
0273                       ;------------------------------------------------------
0274               dsrlnk.error.nodsr_found_off:
0275 2CD2 1E00  20         sbz   >00                   ; Turn card off, nomatter what
0276               dsrlnk.error.nodsr_found:
0277 2CD4 02E0  18         lwpi  dsrlnk.dsrlws         ; No DSR found, restore workspace
     2CD6 A400     
0278               dsrlnk.error.devicename_invalid:
0279 2CD8 04C1  22         clr   r1                    ; clear flag for error 0 = bad device name
0280               dsrlnk.error.io_error:
0281 2CDA 06C1  22         swpb  r1                    ; put error in hi byte
0282 2CDC D741  38         movb  r1,*r13               ; store error flags in callers r0
0283 2CDE F3E0  42         socb  @hb$20,r15            ; \ Set equal bit in copy of status register
     2CE0 201C     
0284                                                   ; / to indicate error
0285 2CE2 0380  30         rtwp                        ; Return from DSR workspace to caller
0286                                                   ; workspace
0287               
0288               
0289               ***************************************************************
0290               * dsrln.reuse - Reuse previous DSRLNK call for improved speed
0291               ***************************************************************
0292               *  blwp @dsrlnk.reuse
0293               *--------------------------------------------------------------
0294               *  Input:
0295               *  @>8356         = Pointer to VDP PAB file descriptor length byte (PAB+9)
0296               *  @dsrlnk.savcru = CRU address of device in previous DSR call
0297               *  @dsrlnk.savent = DSR entry address of previous DSR call
0298               *  @dsrlnk.savver = Version used in previous DSR call
0299               *  @dsrlnk.pabptr = Pointer to PAB in VDP memory, set in previous DSR call
0300               *--------------------------------------------------------------
0301               *  Output:
0302               *  r0 LSB = Bits 13-15 from VDP PAB byte 1, right aligned
0303               *--------------------------------------------------------------
0304               *  Remarks:
0305               *   Call the same DSR entry again without having to scan through
0306               *   all devices again.
0307               *
0308               *   Expects dsrlnk.savver, @dsrlnk.savent, @dsrlnk.savcru to be
0309               *   set by previous DSRLNK call.
0310               ********|*****|*********************|**************************
0311               dsrlnk.reuse:
0312 2CE4 A400             data  dsrlnk.dsrlws         ; dsrlnk workspace
0313 2CE6 2CE8             data  dsrlnk.reuse.init     ; entry point
0314                       ;------------------------------------------------------
0315                       ; DSRLNK entry point
0316                       ;------------------------------------------------------
0317               dsrlnk.reuse.init:
0318 2CE8 02E0  18         lwpi  >83e0                 ; Use GPL WS
     2CEA 83E0     
0319               
0320 2CEC 53E0  34         szcb  @hb$20,r15            ; reset equal bit in status register
     2CEE 201C     
0321                       ;------------------------------------------------------
0322                       ; Restore dsrlnk variables of previous DSR call
0323                       ;------------------------------------------------------
0324 2CF0 020B  20         li    r11,dsrlnk.savcru     ; Get pointer to last used CRU
     2CF2 A42A     
0325 2CF4 C33B  30         mov   *r11+,r12             ; Get CRU address         < @dsrlnk.savcru
0326 2CF6 C27B  30         mov   *r11+,r9              ; Get DSR entry address   < @dsrlnk.savent
0327 2CF8 C83B  42         mov   *r11+,@>8356          ; \ Get pointer to Device name or
     2CFA 8356     
0328                                                   ; / or subprogram in PAB  < @dsrlnk.savpab
0329 2CFC C07B  30         mov   *r11+,R1              ; Get DSR Version number  < @dsrlnk.savver
0330 2CFE C81B  38         mov   *r11,@>8354           ; Get device name length  < @dsrlnk.savlen
     2D00 8354     
0331                       ;------------------------------------------------------
0332                       ; Call DSR program in card/device
0333                       ;------------------------------------------------------
0334 2D02 020F  20         li    r15,>8C02             ; Set VDP port address, needed to prevent
     2D04 8C02     
0335                                                   ; lockup of TI Disk Controller DSR.
0336               
0337 2D06 1D00  16         sbo   >00                   ; Open card/device ROM
0338               
0339 2D08 9820  50         cb    @>4000,@dsrlnk.$aa00  ; Valid identifier found?
     2D0A 4000     
     2D0C 2D20     
0340 2D0E 16E2  14         jne   dsrlnk.error.nodsr_found
0341                                                   ; No, error code 0 = Bad Device name
0342                                                   ; The above jump may happen only in case of
0343                                                   ; either card hardware malfunction or if
0344                                                   ; there are 2 cards opened at the same time.
0345               
0346 2D10 0699  24         bl    *r9                   ; Execute DSR
0347                       ;
0348                       ; Depending on IO result the DSR in card ROM does RET
0349                       ; or (INCT R11 + RET), meaning either (1) or (2) get executed.
0350                       ;
0351 2D12 10DF  14         jmp   dsrlnk.error.nodsr_found_off
0352                                                   ; (1) error return
0353 2D14 1E00  16         sbz   >00                   ; (2) turn off card ROM if good return
0354                       ;------------------------------------------------------
0355                       ; Now check if any DSR error occured
0356                       ;------------------------------------------------------
0357 2D16 02E0  18         lwpi  dsrlnk.dsrlws         ; Restore workspace
     2D18 A400     
0358 2D1A C020  42         mov   @dsrlnk.flgptr,r0     ; Get pointer to VDP PAB byte 1
     2D1C A434     
0359               
0360 2D1E 10C6  14         jmp   dsrlnk.dsrscan.return_dsr
0361                                                   ; Rest is the same as with normal DSRLNK
0362               
0363               
0364               ********************************************************************************
0365               
0366 2D20 AA00     dsrlnk.$aa00      data   >aa00      ; Used for identifying DSR header
0367 2D22 0008     dsrlnk.$0008      data   >0008      ; 8 is the data that usually follows
0368                                                   ; a @blwp @dsrlnk
0369 2D24 2E       dsrlnk.period     text  '.'         ; For finding end of device name
0370               
0371                       even
                   < runlib.asm
0238                       copy  "fio_level3.asm"           ; File I/O level 3 support
     **** ****     > fio_level3.asm
0001               * FILE......: fio_level3.asm
0002               * Purpose...: File I/O level 3 support
0003               
0004               
0005               ***************************************************************
0006               * PAB  - Peripheral Access Block
0007               ********|*****|*********************|**************************
0008               ; my_pab:
0009               ;       byte  io.op.open            ;  0    - OPEN
0010               ;       byte  io.seq.inp.dis.var    ;  1    - INPUT, VARIABLE, DISPLAY
0011               ;                                   ;         Bit 13-15 used by DSR to return
0012               ;                                   ;         file error details to DSRLNK
0013               ;       data  vrecbuf               ;  2-3  - Record buffer in VDP memory
0014               ;       byte  80                    ;  4    - Record length (80 chars maximum)
0015               ;       byte  0                     ;  5    - Character count (bytes read)
0016               ;       data  >0000                 ;  6-7  - Seek record (fixed records only)
0017               ;       byte  >00                   ;  8    - Screen offset (cassette DSR only)
0018               ; -------------------------------------------------------------
0019               ;       byte  11                    ;  9    - File descriptor length
0020               ;       text 'DSK1.MYFILE'          ; 10-.. - File descriptor name
0021               ;                                             (Device + '.' + File name)
0022               ;       even
0023               ***************************************************************
0024               
0025               
0026               ***************************************************************
0027               * file.open - Open File for procesing
0028               ***************************************************************
0029               *  bl   @file.open
0030               *       data P0,P1
0031               *--------------------------------------------------------------
0032               *  P0 = Address of PAB in VDP RAM
0033               *  P1 = LSB contains File type/mode
0034               *--------------------------------------------------------------
0035               *  bl   @xfile.open
0036               *
0037               *  R0 = Address of PAB in VDP RAM
0038               *  R1 = LSB contains File type/mode
0039               *--------------------------------------------------------------
0040               *  Output:
0041               *  tmp0     = Copy of VDP PAB byte 1 after operation
0042               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0043               *  tmp2 LSB = Copy of status register after operation
0044               ********|*****|*********************|**************************
0045               file.open:
0046 2D26 C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0047 2D28 C07B  46         mov   *r11+,r1              ; Get file type/mode
0048               *--------------------------------------------------------------
0049               * Initialisation
0050               *--------------------------------------------------------------
0051               xfile.open:
0052 2D2A 0649  22         dect  stack
0053 2D2C C64B  38         mov   r11,*stack            ; Save return address
0054                       ;------------------------------------------------------
0055                       ; Initialisation
0056                       ;------------------------------------------------------
0057 2D2E 0204  24         li    tmp0,dsrlnk.savcru
     2D30 A42A     
0058 2D32 04F4  38         clr   *tmp0+                ; Clear @dsrlnk.savcru
0059 2D34 04F4  38         clr   *tmp0+                ; Clear @dsrlnk.savent
0060 2D36 04F4  38         clr   *tmp0+                ; Clear @dsrlnk.savver
0061 2D38 04D4  30         clr   *tmp0                 ; Clear @dsrlnk.pabflg
0062                       ;------------------------------------------------------
0063                       ; Set pointer to VDP disk buffer header
0064                       ;------------------------------------------------------
0065 2D3A 0205  24         li    tmp1,>37D7            ; \ VDP Disk buffer header
     2D3C 37D7     
0066 2D3E C805  34         mov   tmp1,@>8370           ; | Pointer at Fixed scratchpad
     2D40 8370     
0067                                                   ; / location
0068 2D42 C801  42         mov   r1,@fh.filetype       ; Set file type/mode
     2D44 A44C     
0069 2D46 04C5  22         clr   tmp1                  ; io.op.open
0070 2D48 101F  14         jmp   _file.record.fop      ; Do file operation
0071               
0072               
0073               
0074               ***************************************************************
0075               * file.close - Close currently open file
0076               ***************************************************************
0077               *  bl   @file.close
0078               *       data P0
0079               *--------------------------------------------------------------
0080               *  P0 = Address of PAB in VDP RAM
0081               *--------------------------------------------------------------
0082               *  bl   @xfile.close
0083               *
0084               *  R0 = Address of PAB in VDP RAM
0085               *--------------------------------------------------------------
0086               *  Output:
0087               *  tmp0 LSB = Copy of VDP PAB byte 1 after operation
0088               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0089               *  tmp2 LSB = Copy of status register after operation
0090               ********|*****|*********************|**************************
0091               file.close:
0092 2D4A C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0093               *--------------------------------------------------------------
0094               * Initialisation
0095               *--------------------------------------------------------------
0096               xfile.close:
0097 2D4C 0649  22         dect  stack
0098 2D4E C64B  38         mov   r11,*stack            ; Save return address
0099 2D50 0205  24         li    tmp1,io.op.close      ; io.op.close
     2D52 0001     
0100 2D54 1019  14         jmp   _file.record.fop      ; Do file operation
0101               
0102               
0103               ***************************************************************
0104               * file.record.read - Read record from file
0105               ***************************************************************
0106               *  bl   @file.record.read
0107               *       data P0
0108               *--------------------------------------------------------------
0109               *  P0 = Address of PAB in VDP RAM (without +9 offset!)
0110               *--------------------------------------------------------------
0111               *  bl   @xfile.record.read
0112               *
0113               *  R0 = Address of PAB in VDP RAM
0114               *--------------------------------------------------------------
0115               *  Output:
0116               *  tmp0     = Copy of VDP PAB byte 1 after operation
0117               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0118               *  tmp2 LSB = Copy of status register after operation
0119               ********|*****|*********************|**************************
0120               file.record.read:
0121 2D56 C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0122               *--------------------------------------------------------------
0123               * Initialisation
0124               *--------------------------------------------------------------
0125 2D58 0649  22         dect  stack
0126 2D5A C64B  38         mov   r11,*stack            ; Save return address
0127               
0128 2D5C 0205  24         li    tmp1,io.op.read       ; io.op.read
     2D5E 0002     
0129 2D60 1013  14         jmp   _file.record.fop      ; Do file operation
0130               
0131               
0132               
0133               ***************************************************************
0134               * file.record.write - Write record to file
0135               ***************************************************************
0136               *  bl   @file.record.write
0137               *       data P0
0138               *--------------------------------------------------------------
0139               *  P0 = Address of PAB in VDP RAM (without +9 offset!)
0140               *--------------------------------------------------------------
0141               *  bl   @xfile.record.write
0142               *
0143               *  R0 = Address of PAB in VDP RAM
0144               *--------------------------------------------------------------
0145               *  Output:
0146               *  tmp0     = Copy of VDP PAB byte 1 after operation
0147               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0148               *  tmp2 LSB = Copy of status register after operation
0149               ********|*****|*********************|**************************
0150               file.record.write:
0151 2D62 C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0152               *--------------------------------------------------------------
0153               * Initialisation
0154               *--------------------------------------------------------------
0155 2D64 0649  22         dect  stack
0156 2D66 C64B  38         mov   r11,*stack            ; Save return address
0157               
0158 2D68 C100  30         mov   r0,tmp0               ; VDP write address (PAB byte 0)
0159 2D6A 0224  30         ai    tmp0,5                ; Position to PAB byte 5
     2D6C 0005     
0160               
0161 2D6E C160  42         mov   @fh.reclen,tmp1       ; Get record length
     2D70 A43E     
0162               
0163 2D72 06A0  36         bl    @xvputb               ; Write character count to PAB
     2D74 22CC     
0164                                                   ; \ i  tmp0 = VDP target address
0165                                                   ; / i  tmp1 = Byte to write
0166               
0167 2D76 0205  24         li    tmp1,io.op.write      ; io.op.write
     2D78 0003     
0168 2D7A 1006  14         jmp   _file.record.fop      ; Do file operation
0169               
0170               
0171               
0172               file.record.seek:
0173 2D7C 1000  14         nop                         ; Not yet supported
0174               
0175               
0176               file.image.load:
0177 2D7E 1000  14         nop                         ; Not yet supported
0178               
0179               
0180               file.image.save:
0181 2D80 1000  14         nop                         ; Not yet supported
0182               
0183               
0184               file.delete:
0185 2D82 1000  14         nop                         ; Not yet supported
0186               
0187               file.rename:
0188 2D84 1000  14         nop                         ; Not yet supported
0189               
0190               
0191               file.status:
0192 2D86 1000  14         nop
0193               
0194               
0195               
0196               ***************************************************************
0197               * _file.record.fop - File operation
0198               ***************************************************************
0199               * Called internally via JMP/B by file operations
0200               *--------------------------------------------------------------
0201               *  Input:
0202               *  r0   = Address of PAB in VDP RAM
0203               *  r1   = File type/mode
0204               *  tmp1 = File operation opcode
0205               *
0206               *  @fh.offsetopcode = >00  Data buffer in VDP RAM
0207               *  @fh.offsetopcode = >40  Data buffer in CPU RAM
0208               *--------------------------------------------------------------
0209               *  Output:
0210               *  tmp0     = Copy of VDP PAB byte 1 after operation
0211               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0212               *  tmp2 LSB = Copy of status register after operation
0213               *--------------------------------------------------------------
0214               *  Register usage:
0215               *  r0, r1, tmp0, tmp1, tmp2
0216               *--------------------------------------------------------------
0217               *  Remarks
0218               *  Private, only to be called from inside fio_level3 module
0219               *  via jump or branch instruction.
0220               *
0221               *  Uses @waux1 for backup/restore of memory word @>8322
0222               ********|*****|*********************|**************************
0223               _file.record.fop:
0224                       ;------------------------------------------------------
0225                       ; Write to PAB required?
0226                       ;------------------------------------------------------
0227 2D88 C800  42         mov   r0,@fh.pab.ptr        ; Backup of pointer to current VDP PAB
     2D8A A436     
0228                       ;------------------------------------------------------
0229                       ; Set file opcode in VDP PAB
0230                       ;------------------------------------------------------
0231 2D8C C100  30         mov   r0,tmp0               ; VDP write address (PAB byte 0)
0232               
0233 2D8E A160  42         a     @fh.offsetopcode,tmp1 ; Inject offset for file I/O opcode
     2D90 A44E     
0234                                                   ; >00 = Data buffer in VDP RAM
0235                                                   ; >40 = Data buffer in CPU RAM
0236               
0237 2D92 06A0  36         bl    @xvputb               ; Write file I/O opcode to VDP
     2D94 22CC     
0238                                                   ; \ i  tmp0 = VDP target address
0239                                                   ; / i  tmp1 = Byte to write
0240                       ;------------------------------------------------------
0241                       ; Set file type/mode in VDP PAB
0242                       ;------------------------------------------------------
0243 2D96 C100  30         mov   r0,tmp0               ; VDP write address (PAB byte 0)
0244 2D98 0584  22         inc   tmp0                  ; Next byte in PAB
0245 2D9A C160  42         mov   @fh.filetype,tmp1     ; Get file type/mode
     2D9C A44C     
0246               
0247 2D9E 06A0  36         bl    @xvputb               ; Write file type/mode to VDP
     2DA0 22CC     
0248                                                   ; \ i  tmp0 = VDP target address
0249                                                   ; / i  tmp1 = Byte to write
0250                       ;------------------------------------------------------
0251                       ; Prepare for DSRLNK
0252                       ;------------------------------------------------------
0253 2DA2 0220  30 !       ai    r0,9                  ; Move to file descriptor length
     2DA4 0009     
0254 2DA6 C800  34         mov   r0,@>8356             ; Pass file descriptor to DSRLNK
     2DA8 8356     
0255               *--------------------------------------------------------------
0256               * Call DSRLINK for doing file operation
0257               *--------------------------------------------------------------
0258 2DAA C820  42         mov   @>8322,@waux1         ; Save word at @>8322
     2DAC 8322     
     2DAE 833C     
0259               
0260 2DB0 C120  42         mov   @dsrlnk.savcru,tmp0   ; Call optimized or standard version?
     2DB2 A42A     
0261 2DB4 1504  14         jgt   _file.record.fop.optimized
0262                                                   ; Optimized version
0263               
0264                       ;------------------------------------------------------
0265                       ; First IO call. Call standard DSRLNK
0266                       ;------------------------------------------------------
0267 2DB6 0420  62         blwp  @dsrlnk               ; Call DSRLNK
     2DB8 2BB4     
0268 2DBA 0008                   data >8               ; \ i  p0 = >8 (DSR)
0269                                                   ; / o  r0 = Copy of VDP PAB byte 1
0270 2DBC 1002  14         jmp  _file.record.fop.pab   ; Return PAB to caller
0271               
0272                       ;------------------------------------------------------
0273                       ; Recurring IO call. Call optimized DSRLNK
0274                       ;------------------------------------------------------
0275               _file.record.fop.optimized:
0276 2DBE 0420  62         blwp  @dsrlnk.reuse         ; Call DSRLNK
     2DC0 2CE4     
0277               
0278               *--------------------------------------------------------------
0279               * Return PAB details to caller
0280               *--------------------------------------------------------------
0281               _file.record.fop.pab:
0282 2DC2 02C6  12         stst  tmp2                  ; Store status register contents in tmp2
0283                                                   ; Upon DSRLNK return status register EQ bit
0284                                                   ; 1 = No file error
0285                                                   ; 0 = File error occured
0286               
0287 2DC4 C820  42         mov   @waux1,@>8322         ; Restore word at @>8322
     2DC6 833C     
     2DC8 8322     
0288               *--------------------------------------------------------------
0289               * Get PAB byte 5 from VDP ram into tmp1 (character count)
0290               *--------------------------------------------------------------
0291 2DCA C120  42         mov   @fh.pab.ptr,tmp0      ; Get VDP address of current PAB
     2DCC A436     
0292 2DCE 0224  30         ai    tmp0,5                ; Get address of VDP PAB byte 5
     2DD0 0005     
0293 2DD2 06A0  36         bl    @xvgetb               ; VDP read PAB status byte into tmp0
     2DD4 22E4     
0294 2DD6 C144  30         mov   tmp0,tmp1             ; Move to destination
0295               *--------------------------------------------------------------
0296               * Get PAB byte 1 from VDP ram into tmp0 (status)
0297               *--------------------------------------------------------------
0298 2DD8 C100  30         mov   r0,tmp0               ; VDP PAB byte 1 (status)
0299                                                   ; as returned by DSRLNK
0300               *--------------------------------------------------------------
0301               * Exit
0302               *--------------------------------------------------------------
0303               ; If an error occured during the IO operation, then the
0304               ; equal bit in the saved status register (=tmp2) is set to 1.
0305               ;
0306               ; Upon return from this IO call you should basically test with:
0307               ;       coc   @wbit2,tmp2           ; Equal bit set?
0308               ;       jeq   my_file_io_handler    ; Yes, IO error occured
0309               ;
0310               ; Then look for further details in the copy of VDP PAB byte 1
0311               ; in register tmp0, bits 13-15
0312               ;
0313               ;       srl   tmp0,8                ; Right align (only for DSR type >8
0314               ;                                   ; calls, skip for type >A subprograms!)
0315               ;       ci    tmp0,io.err.<code>    ; Check for error pattern
0316               ;       jeq   my_error_handler
0317               *--------------------------------------------------------------
0318               _file.record.fop.exit:
0319 2DDA C2F9  46         mov   *stack+,r11           ; Pop R11
0320 2DDC 045B  24         b     *r11                  ; Return to caller
                   < runlib.asm
0240               
0242                       copy  "rom_fg99.asm"             ; FinalGROM 99 support
     **** ****     > rom_fg99.asm
0001               * FILE......: rom_fg99.asm
0002               * Purpose...: FinalGROM 99 reload code
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *               FinalGROM 99 reload cartridge code
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * fg99 - Load cartridge from flash card into FinalGROM99
0010               ***************************************************************
0011               *  bl   @fg99
0012               *       data p0
0013               *
0014               *  p0 = Pointer to FG99 cartridge table entry
0015               *--------------------------------------------------------------
0016               *  bl   @xfg99
0017               *
0018               *  tmp0 = Pointer to FG99 cartridge table entry
0019               *--------------------------------------------------------------
0020               * Remark
0021               * https://github.com/endlos99/finalgrom99/blob/master/lib/reload_example.a99
0022               *
0023               * NOTE: You must use shortened 8.3 upper-case filenames here.
0024               *       For example, to reload "mylongfile.bin", use "MYLONG~1.BIN".
0025               *       If there are multiple files with prefix "MYLONG" in the
0026               *       folder, you may have to replace the suffix "~1" by "~2",
0027               *       "~3", ... to select the correct file.
0028               *
0029               *       PAD filename with >00 bytes so that it's always 8 bytes.
0030               *       Code is expected to run from RAM, not from the cartridge space.
0031               ********|*****|*********************|**************************
0032 2DDE C13B  46 fg99    mov   *r11+,tmp0            ; Get p0
0033               *--------------------------------------------------------------
0034               * Register version
0035               *--------------------------------------------------------------
0036               xfg99:
0037 2DE0 0649  22         dect  stack
0038 2DE2 C64B  38         mov   r11,*stack            ; Save return address
0039 2DE4 0649  22         dect  stack
0040 2DE6 C644  38         mov   tmp0,*stack           ; Push tmp0
0041               *--------------------------------------------------------------
0042               * (1) Send prefix and filename to FinalGROM
0043               *--------------------------------------------------------------
0044 2DE8 C004  30         mov   tmp0,r0               ; Get Pointer
0045 2DEA 0202  24         li    r2,20                 ; Len = prefix (8) + fname (8) + suffix (4)
     2DEC 0014     
0046               fg99.send.loop:
0047 2DEE 04E0  34         clr   @>6000                ; Signal new byte
     2DF0 6000     
0048 2DF2 0201  24         li    r1,>0038              ; >7000 >> 9
     2DF4 0038     
0049 2DF6 D070  44         movb  *r0+,r1
0050 2DF8 0B71  38         src   r1,7                  ; >7000 + (byte << 1)
0051               
0052 2DFA 04D1  30         clr   *r1                   ; Send byte
0053 2DFC 0602  22         dec   r2                    ; Prepare for next iteration
0054 2DFE 16F7  14         jne   fg99.send.loop        ; Next byte
0055               
0056 2E00 04E0  34         clr   @>6000                ; Done sending filename
     2E02 6000     
0057 2E04 0B80  40         src   r0,8                  ; Burn at least 21 cycles
0058               *--------------------------------------------------------------
0059               * (3) Wait for image to be loaded by FinalGROM
0060               *--------------------------------------------------------------
0061               fg99.wait:
0062 2E06 0200  24         li    r0,>6000              ; check >6000->6200
     2E08 6000     
0063 2E0A 0202  24         li    r2,>100
     2E0C 0100     
0064 2E0E C070  46 !       mov   *r0+, r1
0065 2E10 1603  14         jne   fg99.exit             ; Done loading, run cartridge
0066 2E12 0602  22         dec   r2
0067 2E14 16FC  14         jne   -!
0068 2E16 10F7  14         jmp   fg99.wait
0069               *--------------------------------------------------------------
0070               * (4) Image finished loading
0071               *--------------------------------------------------------------
0072               fg99.exit:
0073 2E18 C139  46         mov   *stack+,tmp0          ; Pop tmp0
0074 2E1A C2F9  46         mov   *stack+,r11           ; Pop R11
0075 2E1C 045B  24         b     *r11                  ; Return to caller
                   < runlib.asm
0244               
0245               *//////////////////////////////////////////////////////////////
0246               *                            TIMERS
0247               *//////////////////////////////////////////////////////////////
0248               
0249                       copy  "timers_tmgr.asm"          ; Timers / Thread scheduler
     **** ****     > timers_tmgr.asm
0001               * FILE......: timers_tmgr.asm
0002               * Purpose...: Timers / Thread scheduler
0003               
0004               ***************************************************************
0005               * TMGR - X - Start Timers/Thread scheduler
0006               ***************************************************************
0007               *  B @TMGR
0008               *--------------------------------------------------------------
0009               *  REMARKS
0010               *  Timer/Thread scheduler. Normally called from MAIN.
0011               *  This is basically the kernel keeping everything together.
0012               *  Do not forget to set BTIHI to highest slot in use.
0013               *
0014               *  Register usage in TMGR8 - TMGR11
0015               *  TMP0  = Pointer to timer table
0016               *  R10LB = Use as slot counter
0017               *  TMP2  = 2nd word of slot data
0018               *  TMP3  = Address of routine to call
0019               ********|*****|*********************|**************************
0020 2E1E 0300  22 tmgr    limi  0                     ; No interrupt processing
     2E20 0000     
0021               *--------------------------------------------------------------
0022               * Read VDP status register
0023               *--------------------------------------------------------------
0024 2E22 D360  38 tmgr1   movb  @vdps,r13             ; Save copy of VDP status register in R13
     2E24 8802     
0025               *--------------------------------------------------------------
0026               * Latch sprite collision flag
0027               *--------------------------------------------------------------
0028 2E26 2360  32         coc   @wbit2,r13            ; C flag on ?
     2E28 201C     
0029 2E2A 1602  14         jne   tmgr1a                ; No, so move on
0030 2E2C E0A0  42         soc   @wbit12,config        ; Latch bit 12 in config register
     2E2E 2008     
0031               *--------------------------------------------------------------
0032               * Interrupt flag
0033               *--------------------------------------------------------------
0034 2E30 2360  32 tmgr1a  coc   @wbit0,r13            ; Interupt flag set ?
     2E32 2020     
0035 2E34 1311  14         jeq   tmgr4                 ; Yes, process slots 0..n
0036               *--------------------------------------------------------------
0037               * Run speech player
0038               *--------------------------------------------------------------
0044               *--------------------------------------------------------------
0045               * Run kernel thread
0046               *--------------------------------------------------------------
0047 2E36 20A0  32 tmgr2   coc   @wbit8,config         ; Kernel thread blocked ?
     2E38 2010     
0048 2E3A 1305  14         jeq   tmgr3                 ; Yes, skip to user hook
0049 2E3C 20A0  32         coc   @wbit9,config         ; Kernel thread enabled ?
     2E3E 200E     
0050 2E40 1602  14         jne   tmgr3                 ; No, skip to user hook
0051 2E42 0460  28         b     @kthread              ; Run kernel thread
     2E44 2EBC     
0052               *--------------------------------------------------------------
0053               * Run user hook
0054               *--------------------------------------------------------------
0055 2E46 20A0  32 tmgr3   coc   @wbit6,config         ; User hook blocked ?
     2E48 2014     
0056 2E4A 13EB  14         jeq   tmgr1
0057 2E4C 20A0  32         coc   @wbit7,config         ; User hook enabled ?
     2E4E 2012     
0058 2E50 16E8  14         jne   tmgr1
0059 2E52 C120  38         mov   @wtiusr,tmp0
     2E54 832E     
0060 2E56 0454  24         b     *tmp0                 ; Run user hook
0061               *--------------------------------------------------------------
0062               * Do internal housekeeping
0063               *--------------------------------------------------------------
0064 2E58 40A0  42 tmgr4   szc   @tmdat,config         ; Unblock kernel thread and user hook
     2E5A 2EBA     
0065 2E5C C10A  30         mov   r10,tmp0
0066 2E5E 0244  30         andi  tmp0,>00ff            ; Clear HI byte
     2E60 00FF     
0067 2E62 20A0  32         coc   @wbit2,config         ; PAL flag set ?
     2E64 201C     
0068 2E66 1303  14         jeq   tmgr5
0069 2E68 0284  26         ci    tmp0,60               ; 1 second reached ?
     2E6A 003C     
0070 2E6C 1002  14         jmp   tmgr6
0071 2E6E 0284  26 tmgr5   ci    tmp0,50
     2E70 0032     
0072 2E72 1101  14 tmgr6   jlt   tmgr7                 ; No, continue
0073 2E74 1001  14         jmp   tmgr8
0074 2E76 058A  22 tmgr7   inc   r10                   ; Increase tick counter
0075               *--------------------------------------------------------------
0076               * Loop over slots
0077               *--------------------------------------------------------------
0078 2E78 C120  38 tmgr8   mov   @wtitab,tmp0          ; Pointer to timer table
     2E7A 832C     
0079 2E7C 024A  30         andi  r10,>ff00             ; Use R10LB as slot counter. Reset.
     2E7E FF00     
0080 2E80 C1D4  38 tmgr9   mov   *tmp0,tmp3            ; Is slot empty ?
0081 2E82 1316  14         jeq   tmgr11                ; Yes, get next slot
0082               *--------------------------------------------------------------
0083               *  Check if slot should be executed
0084               *--------------------------------------------------------------
0085 2E84 05C4  22         inct  tmp0                  ; Second word of slot data
0086 2E86 0594  30         inc   *tmp0                 ; Update tick count in slot
0087 2E88 C194  38         mov   *tmp0,tmp2            ; Get second word of slot data
0088 2E8A 9820  42         cb    @tmp2hb,@tmp2lb       ; Slot target count = Slot internal counter ?
     2E8C 830C     
     2E8E 830D     
0089 2E90 1608  14         jne   tmgr10                ; No, get next slot
0090 2E92 0246  30         andi  tmp2,>ff00            ; Clear internal counter
     2E94 FF00     
0091 2E96 C506  38         mov   tmp2,*tmp0            ; Update timer table
0092               *--------------------------------------------------------------
0093               *  Run slot, we only need TMP0 to survive
0094               *--------------------------------------------------------------
0095 2E98 C804  34         mov   tmp0,@wtitmp          ; Save TMP0
     2E9A 8330     
0096 2E9C 0697  32         bl    *tmp3                 ; Call routine in slot
0097 2E9E C120  38 slotok  mov   @wtitmp,tmp0          ; Restore TMP0
     2EA0 8330     
0098               *--------------------------------------------------------------
0099               *  Prepare for next slot
0100               *--------------------------------------------------------------
0101 2EA2 058A  22 tmgr10  inc   r10                   ; Next slot
0102 2EA4 9820  42         cb    @r10lb,@btihi         ; Last slot done ?
     2EA6 8315     
     2EA8 8314     
0103 2EAA 1504  14         jgt   tmgr12                ; yes, Wait for next VDP interrupt
0104 2EAC 05C4  22         inct  tmp0                  ; Offset for next slot
0105 2EAE 10E8  14         jmp   tmgr9                 ; Process next slot
0106 2EB0 05C4  22 tmgr11  inct  tmp0                  ; Skip 2nd word of slot data
0107 2EB2 10F7  14         jmp   tmgr10                ; Process next slot
0108 2EB4 024A  30 tmgr12  andi  r10,>ff00             ; Use R10LB as tick counter. Reset.
     2EB6 FF00     
0109 2EB8 10B4  14         jmp   tmgr1
0110 2EBA 0280     tmdat   data  >0280                 ; Bit 8 (kernel thread) and bit 6 (user hook)
0111               
                   < runlib.asm
0250                       copy  "timers_kthread.asm"       ; Timers / Kernel thread
     **** ****     > timers_kthread.asm
0001               * FILE......: timers_kthread.asm
0002               * Purpose...: Timers / The kernel thread
0003               
0004               
0005               ***************************************************************
0006               * KTHREAD - The kernel thread
0007               *--------------------------------------------------------------
0008               *  REMARKS
0009               *  You should not call the kernel thread manually.
0010               *  Instead control it via the CONFIG register.
0011               *
0012               *  The kernel thread is responsible for running the sound
0013               *  player and doing keyboard scan.
0014               ********|*****|*********************|**************************
0015 2EBC E0A0  42 kthread soc   @wbit8,config         ; Block kernel thread
     2EBE 2010     
0016               *--------------------------------------------------------------
0017               * Run sound player
0018               *--------------------------------------------------------------
0022 2EC0 20A0  32         coc   @wbit13,config        ; Sound player on ?
     2EC2 2006     
0023 2EC4 1602  14         jne   kthread_kb
0024 2EC6 06A0  36         bl    @sdpla1               ; Run sound player
     2EC8 2850     
0026               *--------------------------------------------------------------
0027               * Scan virtual keyboard
0028               *--------------------------------------------------------------
0029               kthread_kb
0031               *       <<skipped>>
0035               *--------------------------------------------------------------
0036               * Scan real keyboard
0037               *--------------------------------------------------------------
0042 2ECA 06A0  36         bl    @rkscan               ; Scan full keyboard with ROM#0 KSCAN
     2ECC 28D0     
0047               *--------------------------------------------------------------
0048               kthread_exit
0049 2ECE 0460  28         b     @tmgr3                ; Exit
     2ED0 2E46     
                   < runlib.asm
0251                       copy  "timers_hooks.asm"         ; Timers / User hooks
     **** ****     > timers_hooks.asm
0001               * FILE......: timers_kthread.asm
0002               * Purpose...: Timers / User hooks
0003               
0004               
0005               ***************************************************************
0006               * MKHOOK - Allocate user hook
0007               ***************************************************************
0008               *  BL    @MKHOOK
0009               *  DATA  P0
0010               *--------------------------------------------------------------
0011               *  P0 = Address of user hook
0012               *--------------------------------------------------------------
0013               *  REMARKS
0014               *  The user hook gets executed after the kernel thread.
0015               *  The user hook must always exit with "B @HOOKOK"
0016               ********|*****|*********************|**************************
0017 2ED2 C83B  50 mkhook  mov   *r11+,@wtiusr         ; Set user hook address
     2ED4 832E     
0018 2ED6 E0A0  42         soc   @wbit7,config         ; Enable user hook
     2ED8 2012     
0019 2EDA 045B  24 mkhoo1  b     *r11                  ; Return
0020      2E22     hookok  equ   tmgr1                 ; Exit point for user hook
0021               
0022               
0023               ***************************************************************
0024               * CLHOOK - Clear user hook
0025               ***************************************************************
0026               *  BL    @CLHOOK
0027               ********|*****|*********************|**************************
0028 2EDC 04E0  26 clhook  clr   @wtiusr               ; Unset user hook address
     2EDE 832E     
0029 2EE0 0242  30         andi  config,>feff          ; Disable user hook (bit 7=0)
     2EE2 FEFF     
0030 2EE4 045B  24         b     *r11                  ; Return
                   < runlib.asm
0252               
0254                       copy  "timers_alloc.asm"         ; Timers / Slot calculation
     **** ****     > timers_alloc.asm
0001               * FILE......: timer_alloc.asm
0002               * Purpose...: Timers / Timer allocation
0003               
0004               
0005               ***************************************************************
0006               * MKSLOT - Allocate timer slot(s)
0007               ***************************************************************
0008               *  BL    @MKSLOT
0009               *  BYTE  P0HB,P0LB
0010               *  DATA  P1
0011               *  ....
0012               *  DATA  EOL                        ; End-of-list
0013               *--------------------------------------------------------------
0014               *  P0 = Slot number, target count
0015               *  P1 = Subroutine to call via BL @xxxx if slot is fired
0016               ********|*****|*********************|**************************
0017 2EE6 C13B  46 mkslot  mov   *r11+,tmp0
0018 2EE8 C17B  46         mov   *r11+,tmp1
0019               *--------------------------------------------------------------
0020               *  Calculate address of slot
0021               *--------------------------------------------------------------
0022 2EEA C184  30         mov   tmp0,tmp2
0023 2EEC 0966  36         srl   tmp2,6                ; Right align & TMP2 = TMP2 * 4
0024 2EEE A1A0  38         a     @wtitab,tmp2          ; Add table base
     2EF0 832C     
0025               *--------------------------------------------------------------
0026               *  Add slot to table
0027               *--------------------------------------------------------------
0028 2EF2 CD85  46         mov   tmp1,*tmp2+           ; Store address of subroutine
0029 2EF4 0A84  40         sla   tmp0,8                ; Get rid of slot number
0030 2EF6 C584  38         mov   tmp0,*tmp2            ; Store target count and reset tick count
0031               *--------------------------------------------------------------
0032               *  Check for end of list
0033               *--------------------------------------------------------------
0034 2EF8 881B  46         c     *r11,@w$ffff          ; End of list ?
     2EFA 2022     
0035 2EFC 1301  14         jeq   mkslo1                ; Yes, exit
0036 2EFE 10F3  14         jmp   mkslot                ; Process next entry
0037               *--------------------------------------------------------------
0038               *  Exit
0039               *--------------------------------------------------------------
0040 2F00 05CB  22 mkslo1  inct  r11
0041 2F02 045B  24         b     *r11                  ; Exit
0042               
0043               
0044               ***************************************************************
0045               * CLSLOT - Clear single timer slot
0046               ***************************************************************
0047               *  BL    @CLSLOT
0048               *  DATA  P0
0049               *--------------------------------------------------------------
0050               *  P0 = Slot number
0051               ********|*****|*********************|**************************
0052 2F04 C13B  46 clslot  mov   *r11+,tmp0
0053 2F06 0A24  28 xlslot  sla   tmp0,2                ; TMP0 = TMP0*4
0054 2F08 A120  38         a     @wtitab,tmp0          ; Add table base
     2F0A 832C     
0055 2F0C 04F4  38         clr   *tmp0+                ; Clear 1st word of slot
0056 2F0E 04D4  30         clr   *tmp0                 ; Clear 2nd word of slot
0057 2F10 045B  24         b     *r11                  ; Exit
0058               
0059               
0060               ***************************************************************
0061               * RSSLOT - Reset single timer slot loop counter
0062               ***************************************************************
0063               *  BL    @RSSLOT
0064               *  DATA  P0
0065               *--------------------------------------------------------------
0066               *  P0 = Slot number
0067               ********|*****|*********************|**************************
0068 2F12 C13B  46 rsslot  mov   *r11+,tmp0
0069 2F14 0A24  28         sla   tmp0,2                ; TMP0 = TMP0*4
0070 2F16 A120  38         a     @wtitab,tmp0          ; Add table base
     2F18 832C     
0071 2F1A 05C4  22         inct  tmp0                  ; Skip 1st word of slot
0072 2F1C C154  38         mov   *tmp0,tmp1
0073 2F1E 0245  30         andi  tmp1,>ff00            ; Clear LSB (loop counter)
     2F20 FF00     
0074 2F22 C505  38         mov   tmp1,*tmp0
0075 2F24 045B  24         b     *r11                  ; Exit
                   < runlib.asm
0256               
0257               
0258               
0259               *//////////////////////////////////////////////////////////////
0260               *                    RUNLIB INITIALISATION
0261               *//////////////////////////////////////////////////////////////
0262               
0263               ***************************************************************
0264               *  RUNLIB - Runtime library initalisation
0265               ***************************************************************
0266               *  B  @RUNLIB
0267               *--------------------------------------------------------------
0268               *  REMARKS
0269               *  if R0 in WS1 equals >4a4a we were called from the system
0270               *  crash handler so we return there after initialisation.
0271               
0272               *  If R1 in WS1 equals >FFFF we return to the TI title screen
0273               *  after clearing scratchpad memory. This has higher priority
0274               *  as crash handler flag R0.
0275               ********|*****|*********************|**************************
0282 2F26 04E0  26 runlib  clr   @>8302                ; Reset exit flag (R1 in workspace WS1!)
     2F28 8302     
0284               *--------------------------------------------------------------
0285               * Alternative entry point
0286               *--------------------------------------------------------------
0287 2F2A 0300  22 runli1  limi  0                     ; Turn off interrupts
     2F2C 0000     
0288 2F2E 02E0  18         lwpi  ws1                   ; Activate workspace 1
     2F30 8300     
0289 2F32 C0E0  30         mov   @>83c0,r3             ; Get random seed from OS monitor
     2F34 83C0     
0290               *--------------------------------------------------------------
0291               * Clear scratch-pad memory from R4 upwards
0292               *--------------------------------------------------------------
0293 2F36 0202  20 runli2  li    r2,>8308
     2F38 8308     
0294 2F3A 04F2  30 runli3  clr   *r2+                  ; Clear scratchpad >8306->83FF
0295 2F3C 0282  22         ci    r2,>8400
     2F3E 8400     
0296 2F40 16FC  14         jne   runli3
0297               *--------------------------------------------------------------
0298               * Exit to TI-99/4A title screen ?
0299               *--------------------------------------------------------------
0300 2F42 0281  22 runli3a ci    r1,>ffff              ; Exit flag set ?
     2F44 FFFF     
0301 2F46 1602  14         jne   runli4                ; No, continue
0302 2F48 0420  42         blwp  @0                    ; Yes, bye bye
     2F4A 0000     
0303               *--------------------------------------------------------------
0304               * Determine if VDP is PAL or NTSC
0305               *--------------------------------------------------------------
0306 2F4C C803  30 runli4  mov   r3,@waux1             ; Store random seed
     2F4E 833C     
0307 2F50 04C1  14         clr   r1                    ; Reset counter
0308 2F52 0202  20         li    r2,10                 ; We test 10 times
     2F54 000A     
0309 2F56 C0E0  30 runli5  mov   @vdps,r3
     2F58 8802     
0310 2F5A 20E0  32         coc   @wbit0,r3             ; Interupt flag set ?
     2F5C 2020     
0311 2F5E 1302  14         jeq   runli6
0312 2F60 0581  14         inc   r1                    ; Increase counter
0313 2F62 10F9  14         jmp   runli5
0314 2F64 0602  14 runli6  dec   r2                    ; Next test
0315 2F66 16F7  14         jne   runli5
0316 2F68 0281  22         ci    r1,>1250              ; Max for NTSC reached ?
     2F6A 1250     
0317 2F6C 1202  14         jle   runli7                ; No, so it must be NTSC
0318 2F6E 0262  22         ori   config,palon          ; Yes, it must be PAL, set flag
     2F70 201C     
0319               *--------------------------------------------------------------
0320               * Copy machine code to scratchpad (prepare tight loop)
0321               *--------------------------------------------------------------
0322 2F72 06A0  32 runli7  bl    @loadmc
     2F74 221A     
0323               *--------------------------------------------------------------
0324               * Initialize registers, memory, ...
0325               *--------------------------------------------------------------
0326 2F76 04C1  14 runli9  clr   r1
0327 2F78 04C2  14         clr   r2
0328 2F7A 04C3  14         clr   r3
0329 2F7C 0209  20         li    stack,sp2.stktop      ; Set top of stack (grows downwards!)
     2F7E A900     
0330 2F80 020F  20         li    r15,vdpw              ; Set VDP write address
     2F82 8C00     
0332 2F84 06A0  32         bl    @mute                 ; Mute sound generators
     2F86 2814     
0334               *--------------------------------------------------------------
0335               * Setup video memory
0336               *--------------------------------------------------------------
0338 2F88 0280  22         ci    r0,>4a4a              ; Crash flag set?
     2F8A 4A4A     
0339 2F8C 1605  14         jne   runlia
0340 2F8E 06A0  32         bl    @filv                 ; Clear 12K VDP memory instead
     2F90 228E     
0341 2F92 0000             data  >0000,>00,>3000       ; of 16K, so that PABs survive
     2F94 0000     
     2F96 3000     
0346 2F98 06A0  32 runlia  bl    @filv
     2F9A 228E     
0347 2F9C 0FC0             data  pctadr,spfclr,16      ; Load color table
     2F9E 00F4     
     2FA0 0010     
0348               *--------------------------------------------------------------
0349               * Check if there is a F18A present
0350               *--------------------------------------------------------------
0354 2FA2 06A0  32         bl    @f18unl               ; Unlock the F18A
     2FA4 2744     
0355 2FA6 06A0  32         bl    @f18chk               ; Check if F18A is there \
     2FA8 276E     
0356 2FAA 06A0  32         bl    @f18chk               ; Check if F18A is there | js99er bug?
     2FAC 276E     
0357 2FAE 06A0  32         bl    @f18chk               ; Check if F18A is there /
     2FB0 276E     
0358 2FB2 06A0  32         bl    @f18lck               ; Lock the F18A again
     2FB4 275A     
0359               
0360 2FB6 06A0  32         bl    @putvr                ; Reset all F18a extended registers
     2FB8 2332     
0361 2FBA 3201                   data >3201            ; F18a VR50 (>32), bit 1
0363               *--------------------------------------------------------------
0364               * Check if there is a speech synthesizer attached
0365               *--------------------------------------------------------------
0367               *       <<skipped>>
0371               *--------------------------------------------------------------
0372               * Load video mode table & font
0373               *--------------------------------------------------------------
0374 2FBC 06A0  32 runlic  bl    @vidtab               ; Load video mode table into VDP
     2FBE 22F8     
0375 2FC0 7F10             data  spvmod                ; Equate selected video mode table
0376 2FC2 0204  20         li    tmp0,spfont           ; Get font option
     2FC4 0000     
0377 2FC6 0544  14         inv   tmp0                  ; NOFONT (>FFFF) specified ?
0378 2FC8 1304  14         jeq   runlid                ; Yes, skip it
0379 2FCA 06A0  32         bl    @ldfnt
     2FCC 2360     
0380 2FCE 1100             data  fntadr,spfont         ; Load specified font
     2FD0 0000     
0381               *--------------------------------------------------------------
0382               * Did a system crash occur before runlib was called?
0383               *--------------------------------------------------------------
0384 2FD2 0280  22 runlid  ci    r0,>4a4a              ; Crash flag set?
     2FD4 4A4A     
0385 2FD6 1602  14         jne   runlie                ; No, continue
0386 2FD8 0460  28         b     @cpu.crash.main       ; Yes, back to crash handler
     2FDA 2086     
0387               *--------------------------------------------------------------
0388               * Branch to main program
0389               *--------------------------------------------------------------
0390 2FDC 0262  22 runlie  ori   config,>0040          ; Enable kernel thread (bit 9 on)
     2FDE 0040     
0391 2FE0 0460  28         b     @main                 ; Give control to main program
     2FE2 6046     
                   < stevie_b4.asm
0051                       copy  "rom.resident.asm"
     **** ****     > rom.resident.asm
0001               * FILE......: rom.resident.asm
0002               * Purpose...: Resident modules in LOW MEMEXP RAM callable from all ROM banks.
0003               
0004                 ; Watch out! Avoid relying on calling code stored in the cartridge ROM area.
0005                 ; It's easier to directly do farjmp call, and this is what we do.
0006                 ; Especially for the spectra2 tasks.
0007               
0008                       ;------------------------------------------------------
0009                       ; Low-level modules
0010                       ;------------------------------------------------------
0011                       copy  "rom.farjump.asm"        ; ROM bankswitch trampoline
     **** ****     > rom.farjump.asm
0001               * FILE......: rom.farjump.asm
0002               * Purpose...: Trampoline to routine in other ROM bank
0003               
0004               ***************************************************************
0005               * rom.farjump - Jump to routine in specified bank
0006               ***************************************************************
0007               *  bl   @rom.farjump
0008               *       data p0,p1,p2
0009               *--------------------------------------------------------------
0010               *  p0 = Write address of target ROM bank
0011               *  p1 = Vector address with target address to jump to
0012               *  p2 = Write address of source ROM bank
0013               *--------------------------------------------------------------
0014               *  bl @xrom.farjump
0015               *
0016               *  tmp0 = Write address of target ROM bank
0017               *  tmp1 = Vector address with target address to jump to
0018               *  tmp2 = Write address of source ROM bank
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * tmp0,tmp1,tmp2,tmp3
0022               *--------------------------------------------------------------
0023               *  Remarks
0024               *  r11 gets pushed/popped from farjump stack, not from normal
0025               *  value stack.
0026               ********|*****|*********************|**************************
0027               rom.farjump:
0028 2FE4 0649  14         dect  stack
0029 2FE6 C644  30         mov   tmp0,*stack           ; Push tmp0
0030 2FE8 0649  14         dect  stack
0031 2FEA C645  30         mov   tmp1,*stack           ; Push tmp1
0032 2FEC 0649  14         dect  stack
0033 2FEE C646  30         mov   tmp2,*stack           ; Push tmp2
0034 2FF0 0649  14         dect  stack
0035 2FF2 C647  30         mov   tmp3,*stack           ; Push tmp3
0036                       ;------------------------------------------------------
0037                       ; Parameters
0038                       ;------------------------------------------------------
0039 2FF4 C13B  30         mov   *r11+,tmp0            ; P0
0040 2FF6 C17B  30         mov   *r11+,tmp1            ; P1
0041 2FF8 C1BB  30         mov   *r11+,tmp2            ; P2
0042 2FFA 1008  14         jmp   xrom.farjump.push_return
0043                       ;------------------------------------------------------
0044                       ; Push registers to value stack (but not r11!)
0045                       ;------------------------------------------------------
0046               xrom.farjump:
0047 2FFC 0649  14         dect  stack
0048 2FFE C644  30         mov   tmp0,*stack           ; Push tmp0
0049 3000 0649  14         dect  stack
0050 3002 C645  30         mov   tmp1,*stack           ; Push tmp1
0051 3004 0649  14         dect  stack
0052 3006 C646  30         mov   tmp2,*stack           ; Push tmp2
0053 3008 0649  14         dect  stack
0054 300A C647  30         mov   tmp3,*stack           ; Push tmp3
0055                       ;------------------------------------------------------
0056                       ; Push to farjump return stack
0057                       ;------------------------------------------------------
0058               xrom.farjump.push_return:
0059 300C 0284  22         ci    tmp0,>6000            ; Invalid bank write address?
     300E 6000     
0060 3010 1116  14         jlt   rom.farjump.bankswitch.failed1
0061                                                   ; Crash if bogus value in bank write address
0062               
0063 3012 C1E0  34         mov   @tv.fj.stackpnt,tmp3  ; Get farjump stack pointer
     3014 A228     
0064 3016 0647  14         dect  tmp3
0065 3018 C5CB  30         mov   r11,*tmp3             ; Push return address to farjump stack
0066 301A 0647  14         dect  tmp3
0067 301C C5C6  30         mov   tmp2,*tmp3            ; Push source ROM bank to farjump stack
0068 301E C807  38         mov   tmp3,@tv.fj.stackpnt  ; Set farjump stack pointer
     3020 A228     
0069               
0073               
0074                       ;------------------------------------------------------
0075                       ; Bankswitch to target 8K ROM bank
0076                       ;------------------------------------------------------
0077               rom.farjump.bankswitch.target.rom8k:
0078 3022 04D4  26         clr   *tmp0                 ; Switch to target ROM bank 8K >6000
0079 3024 1004  14         jmp   rom.farjump.bankswitch.tgt.done
0080                       ;------------------------------------------------------
0081                       ; Bankswitch to target 4K ROM / 4K RAM banks (FG99 advanced mode)
0082                       ;------------------------------------------------------
0083               rom.farjump.bankswitch.tgt.advfg99:
0084 3026 04D4  26         clr   *tmp0                 ; Switch to target ROM bank 4K >6000
0085 3028 0224  22         ai    tmp0,>0800
     302A 0800     
0086 302C 04D4  26         clr   *tmp0                 ; Switch to target RAM bank 4K >7000
0087                       ;------------------------------------------------------
0088                       ; Bankswitch to target bank(s) completed
0089                       ;------------------------------------------------------
0090               rom.farjump.bankswitch.tgt.done:
0091                       ;------------------------------------------------------
0092                       ; Deref vector from @trmpvector if >ffff
0093                       ;------------------------------------------------------
0094 302E 0285  22         ci    tmp1,>ffff
     3030 FFFF     
0095 3032 1602  14         jne   !
0096 3034 C160  34         mov   @trmpvector,tmp1
     3036 A034     
0097                       ;------------------------------------------------------
0098                       ; Deref value in vector
0099                       ;------------------------------------------------------
0100 3038 C115  26 !       mov   *tmp1,tmp0            ; Deref value in vector address
0101 303A 1301  14         jeq   rom.farjump.bankswitch.failed1
0102                                                   ; Crash if null-pointer in vector
0103               
0104 303C 1004  14         jmp   rom.farjump.bankswitch.call
0105                                                   ; Call function in target bank
0106                       ;------------------------------------------------------
0107                       ; Assert 1 failed before bank-switch
0108                       ;------------------------------------------------------
0109               rom.farjump.bankswitch.failed1:
0110 303E C80B  38         mov   r11,@>ffce            ; \ Save caller address
     3040 FFCE     
0111 3042 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     3044 2026     
0112                       ;------------------------------------------------------
0113                       ; Call function in target bank
0114                       ;------------------------------------------------------
0115               rom.farjump.bankswitch.call:
0116 3046 0694  24         bl    *tmp0                 ; Call function
0117                       ;------------------------------------------------------
0118                       ; Bankswitch back to source bank
0119                       ;------------------------------------------------------
0120               rom.farjump.return:
0121 3048 C120  34         mov   @tv.fj.stackpnt,tmp0  ; Get farjump stack pointer
     304A A228     
0122 304C C154  26         mov   *tmp0,tmp1            ; Get bank write address of caller
0123 304E 1319  14         jeq   rom.farjump.bankswitch.failed2
0124                                                   ; Crash if null-pointer in address
0125               
0126 3050 04F4  30         clr   *tmp0+                ; Remove bank write address from
0127                                                   ; farjump stack
0128               
0129 3052 C2D4  26         mov   *tmp0,r11             ; Get return addr of caller for return
0130               
0131 3054 04F4  30         clr   *tmp0+                ; Remove return address of caller from
0132                                                   ; farjump stack
0133               
0134                       ;------------------------------------------------------
0135                       ; Assert on memory source address in cartridge space
0136                       ;------------------------------------------------------
0137               rom.farjump.assert.cart:
0138 3056 028B  22         ci    r11,>6000
     3058 6000     
0139 305A 1104  14         jlt   rom.farjump.assert.lowmem
0140 305C 028B  22         ci    r11,>7fff
     305E 7FFF     
0141 3060 1510  14         jgt   rom.farjump.bankswitch.failed2
0142 3062 1006  14         jmp   !
0143                       ;------------------------------------------------------
0144                       ; Assert on memory source address in low memory expansion
0145                       ;------------------------------------------------------
0146               rom.farjump.assert.lowmem:
0147 3064 028B  22         ci    r11,>2000
     3066 2000     
0148 3068 110C  14         jlt   rom.farjump.bankswitch.failed2
0149 306A 028B  22         ci    r11,>3fff
     306C 3FFF     
0150 306E 1509  14         jgt   rom.farjump.bankswitch.failed2
0151                       ;------------------------------------------------------
0152                       ; Update farjump return stack pointer
0153                       ;------------------------------------------------------
0154 3070 C804  38 !       mov   tmp0,@tv.fj.stackpnt  ; Update farjump return stack pointer
     3072 A228     
0155               
0159                       ;------------------------------------------------------
0160                       ; Bankswitch to source 8K ROM bank
0161                       ;------------------------------------------------------
0162               rom.farjump.bankswitch.src.rom8k:
0163 3074 04D5  26         clr   *tmp1                 ; Switch to source ROM bank 8K >6000
0164 3076 1009  14         jmp   rom.farjump.exit
0165                       ;------------------------------------------------------
0166                       ; Bankswitch to source 4K ROM / 4K RAM banks (FG99 advanced mode)
0167                       ;------------------------------------------------------
0168               rom.farjump.bankswitch.src.advfg99:
0169 3078 04D5  26         clr   *tmp1                 ; Switch to source ROM bank 4K >6000
0170 307A 0225  22         ai    tmp1,>0800
     307C 0800     
0171 307E 04D5  26         clr   *tmp1                 ; Switch to source RAM bank 4K >7000
0172 3080 1004  14         jmp   rom.farjump.exit
0173                       ;------------------------------------------------------
0174                       ; Assert 2 failed after bank-switch
0175                       ;------------------------------------------------------
0176               rom.farjump.bankswitch.failed2:
0177 3082 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     3084 FFCE     
0178 3086 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     3088 2026     
0179                       ;-------------------------------------------------------
0180                       ; Exit
0181                       ;-------------------------------------------------------
0182               rom.farjump.exit:
0183 308A C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0184 308C C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0185 308E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0186 3090 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0187                       ;
0188                       ; Attention!
0189                       ; r11 was popped from farjump stack, not from value stack!
0190                       ; See rom.farjump.return
0191                       ;
0192 3092 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0012                       copy  "fb.asm"                 ; Framebuffer
     **** ****     > fb.asm
0001               * FILE......: fb.asm
0002               * Purpose...: Initialize framebuffer
0003               
0004               ***************************************************************
0005               * fb.init
0006               * Initialize framebuffer
0007               ***************************************************************
0008               *  bl   @fb.init
0009               *--------------------------------------------------------------
0010               *  INPUT
0011               *  none
0012               *--------------------------------------------------------------
0013               *  OUTPUT
0014               *  none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               ********|*****|*********************|**************************
0019               fb.init:
0020 3094 0649  14         dect  stack
0021 3096 C64B  30         mov   r11,*stack            ; Save return address
0022 3098 0649  14         dect  stack
0023 309A C644  30         mov   tmp0,*stack           ; Push tmp0
0024 309C 0649  14         dect  stack
0025 309E C645  30         mov   tmp1,*stack           ; Push tmp1
0026                       ;------------------------------------------------------
0027                       ; Initialize
0028                       ;------------------------------------------------------
0029 30A0 0204  20         li    tmp0,fb.top
     30A2 D000     
0030 30A4 C804  38         mov   tmp0,@fb.top.ptr      ; Set pointer to framebuffer
     30A6 A300     
0031 30A8 04E0  34         clr   @fb.topline           ; Top line in framebuffer
     30AA A304     
0032 30AC 04E0  34         clr   @fb.row               ; Current row=0
     30AE A306     
0033 30B0 04E0  34         clr   @fb.column            ; Current column=0
     30B2 A30C     
0034               
0035 30B4 0204  20         li    tmp0,colrow
     30B6 0050     
0036 30B8 C804  38         mov   tmp0,@fb.colsline     ; Columns per row=80
     30BA A30E     
0037 30BC 04E0  34         clr   @fb.vwco              ; Set view window column offset
     30BE A310     
0038               
0039 30C0 0204  20         li    tmp0,pane.botrow-1    ; \ Framebuffer
     30C2 001C     
0040 30C4 C804  38         mov   tmp0,@fb.scrrows.max  ; / Maximum number of physical rows for fb
     30C6 A31E     
0041               
0042 30C8 06A0  32         bl    @fb.calc.scrrows      ; Calculate number of rows
     30CA 3130     
0043                                                   ; \ i  @tv.ruler.visible = Ruler visible
0044                                                   ; | i  @edb.special.file = Special file flag
0045                                                   ; / i  @tv.error.visible = Error visible
0046               
0047 30CC 04E0  34         clr   @tv.pane.focus        ; Frame buffer has focus!
     30CE A224     
0048 30D0 04E0  34         clr   @fb.colorize          ; Don't colorize M1/M2 lines
     30D2 A312     
0049 30D4 0720  34         seto  @fb.dirty             ; Set dirty flag (trigger screen update)
     30D6 A318     
0050 30D8 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     30DA A31A     
0051                       ;------------------------------------------------------
0052                       ; Clear frame buffer
0053                       ;------------------------------------------------------
0054 30DC 06A0  32         bl    @film
     30DE 2236     
0055 30E0 D000             data  fb.top,>00,fb.size    ; Clear it all the way
     30E2 0000     
     30E4 0960     
0056                       ;------------------------------------------------------
0057                       ; Exit
0058                       ;------------------------------------------------------
0059               fb.init.exit:
0060 30E6 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0061 30E8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0062 30EA C2F9  30         mov   *stack+,r11           ; Pop r11
0063 30EC 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0013                       copy  "fb.row2line.asm"        ; Calculate line in editor buffer
     **** ****     > fb.row2line.asm
0001               * FILE......: fb.row2line.asm
0002               * Purpose...: Calculate line in editor buffer
0003               
0004               ***************************************************************
0005               * fb.row2line
0006               * Calculate line in editor buffer
0007               ***************************************************************
0008               * bl @fb.row2line
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @fb.topline = Top line in frame buffer
0012               * @parm1      = Row in frame buffer (offset 0..@fb.scrrows)
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * @outparm1 = Matching line in editor buffer
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0
0019               *--------------------------------------------------------------
0020               * Formula
0021               * outparm1 = @fb.topline + @parm1
0022               ********|*****|*********************|**************************
0023               fb.row2line:
0024 30EE 0649  14         dect  stack
0025 30F0 C64B  30         mov   r11,*stack            ; Save return address
0026 30F2 0649  14         dect  stack
0027 30F4 C644  30         mov   tmp0,*stack           ; Push tmp0
0028                       ;------------------------------------------------------
0029                       ; Calculate line in editor buffer
0030                       ;------------------------------------------------------
0031 30F6 C120  34         mov   @parm1,tmp0
     30F8 A006     
0032 30FA A120  34         a     @fb.topline,tmp0
     30FC A304     
0033 30FE C804  38         mov   tmp0,@outparm1
     3100 A018     
0034                       ;------------------------------------------------------
0035                       ; Exit
0036                       ;------------------------------------------------------
0037               fb.row2line.exit:
0038 3102 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0039 3104 C2F9  30         mov   *stack+,r11           ; Pop r11
0040 3106 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0014                       copy  "fb.calc.pointer.asm"    ; Calculate pointer address frame buffer
     **** ****     > fb.calc.pointer.asm
0001               * FILE......: fb.calc.pointer.asm
0002               * Purpose...: Calculate pointer address in frame buffer
0003               
0004               ***************************************************************
0005               * fb.calc.pointer
0006               * Calculate pointer address in frame buffer
0007               ***************************************************************
0008               * bl @fb.calc.pointer
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @fb.top       = Address of top row in frame buffer
0012               * @fb.topline   = Top line in frame buffer
0013               * @fb.row       = Current row in frame buffer (offset 0..@fb.scrrows)
0014               * @fb.column    = Current column in frame buffer
0015               * @fb.colsline  = Columns per line in frame buffer
0016               *--------------------------------------------------------------
0017               * OUTPUT
0018               * @fb.current   = Updated pointer
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * tmp0,tmp1
0022               *--------------------------------------------------------------
0023               * Formula
0024               * pointer = row * colsline + column + deref(@fb.top.ptr)
0025               ********|*****|*********************|**************************
0026               fb.calc.pointer:
0027 3108 0649  14         dect  stack
0028 310A C64B  30         mov   r11,*stack            ; Save return address
0029 310C 0649  14         dect  stack
0030 310E C644  30         mov   tmp0,*stack           ; Push tmp0
0031 3110 0649  14         dect  stack
0032 3112 C645  30         mov   tmp1,*stack           ; Push tmp1
0033                       ;------------------------------------------------------
0034                       ; Calculate pointer
0035                       ;------------------------------------------------------
0036 3114 C120  34         mov   @fb.row,tmp0
     3116 A306     
0037 3118 3920  74         mpy   @fb.colsline,tmp0     ; tmp1 = row  * colsline
     311A A30E     
0038 311C A160  34         a     @fb.column,tmp1       ; tmp1 = tmp1 + column
     311E A30C     
0039 3120 A160  34         a     @fb.top.ptr,tmp1      ; tmp1 = tmp1 + base
     3122 A300     
0040 3124 C805  38         mov   tmp1,@fb.current
     3126 A302     
0041                       ;------------------------------------------------------
0042                       ; Exit
0043                       ;------------------------------------------------------
0044               fb.calc.pointer.exit:
0045 3128 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0046 312A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0047 312C C2F9  30         mov   *stack+,r11           ; Pop r11
0048 312E 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0015                       copy  "fb.calc.scrrows.asm"    ; Calculate number of rows frame buffer
     **** ****     > fb.calc.scrrows.asm
0001               * FILE......: fb.calc.scrrows.asm
0002               * Purpose...: Calculate number of available rows in frame buffer
0003               
0004               ***************************************************************
0005               * fb.calc.scrrows
0006               * Calculate number of available rows in frame buffer
0007               ***************************************************************
0008               * bl @fb.calc.scrrows
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @tv.ruler.visible = Ruler visible on screen flag
0012               * @edb.special.file = Special file flag (e.g. Master Catalog)
0013               * @tv.error.visible = Error area visible on screen flag
0014               *--------------------------------------------------------------
0015               * OUTPUT
0016               * @fb.scrrows = Number of available rows in frame buffer
0017               *--------------------------------------------------------------
0018               * Register usage
0019               * none
0020               *--------------------------------------------------------------
0021               * Remarks
0022               * none
0023               ********|*****|*********************|**************************
0024               fb.calc.scrrows:
0025 3130 0649  14         dect  stack
0026 3132 C64B  30         mov   r11,*stack            ; Save return address
0027                       ;------------------------------------------------------
0028                       ; Initialisation
0029                       ;------------------------------------------------------
0030 3134 C820  54         mov   @fb.scrrows.max,@fb.scrrows
     3136 A31E     
     3138 A31C     
0031                                                   ; Set maximum number of available rows
0032                       ;------------------------------------------------------
0033                       ; (1) Handle ruler visible on screen
0034                       ;------------------------------------------------------
0035               fb.calc.scrrows.handle.ruler:
0036 313A 0760  38         abs   @tv.ruler.visible     ; Ruler visible?
     313C A210     
0037 313E 1302  14         jeq   fb.calc.scrrows.handle.mc
0038 3140 0620  34         dec   @fb.scrrows           ; Yes, adjust rows
     3142 A31C     
0039                       ;------------------------------------------------------
0040                       ; (2) Handle Master Catalog
0041                       ;------------------------------------------------------
0042               fb.calc.scrrows.handle.mc:
0043 3144 8820  50         c     @edb.special.file,@const.0
     3146 A522     
     3148 2000     
0044 314A 1302  14         jeq   fb.calc.scrrows.handle.errors
0045 314C 0620  34         dec   @fb.scrrows           ; Yes, adjust rows
     314E A31C     
0046                       ;------------------------------------------------------
0047                       ; (3) Handle error area
0048                       ;------------------------------------------------------
0049               fb.calc.scrrows.handle.errors:
0050 3150 0760  38         abs   @tv.error.visible     ; Error area visible?
     3152 A22A     
0051 3154 1303  14         jeq   fb.calc.scrrows.exit
0052 3156 6820  54         s     @tv.error.rows,@fb.scrrows
     3158 A22C     
     315A A31C     
0053                                                   ; Yes, adjust rows
0054                       ;-------------------------------------------------------
0055                       ; Exit
0056                       ;-------------------------------------------------------
0057               fb.calc.scrrows.exit:
0058 315C C2F9  30         mov   *stack+,r11           ; Pop r11
0059 315E 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0016                       copy  "idx.asm"                ; Index management
     **** ****     > idx.asm
0001               * FILE......: idx.asm
0002               * Purpose...: Index management
0003               
0004               ***************************************************************
0005               *  Size of index page is 4K and allows indexing of 2048 lines
0006               *  per page.
0007               *
0008               *  Each index slot (word) has the format:
0009               *    +-----+-----+
0010               *    | MSB | LSB |
0011               *    +-----|-----+   LSB = Pointer offset 00-ff.
0012               *
0013               *  MSB = SAMS Page 40-ff
0014               *        Allows addressing of up to 256 4K SAMS pages (1024 KB)
0015               *
0016               *  LSB = Pointer offset in range 00-ff
0017               *
0018               *        To calculate pointer to line in Editor buffer:
0019               *        Pointer address = edb.top + (LSB * 16)
0020               *
0021               *        Note that the editor buffer itself resides in own 4K memory range
0022               *        starting at edb.top
0023               *
0024               *        All support routines must assure that length-prefixed string in
0025               *        Editor buffer always start on a 16 byte boundary for being
0026               *        accessible via index.
0027               *
0028               *
0029               * The index starts at SAMS page >20 and can allocate up to page >3f
0030               * for a total of 32 pages (128 K). With that up to 65536 lines of text
0031               * can be addressed.
0032               ***************************************************************
0033               
0034               
0035               ***************************************************************
0036               * idx.init
0037               * Initialize index
0038               ***************************************************************
0039               * bl @idx.init
0040               *--------------------------------------------------------------
0041               * INPUT
0042               * none
0043               *--------------------------------------------------------------
0044               * OUTPUT
0045               * none
0046               *--------------------------------------------------------------
0047               * Register usage
0048               * tmp0
0049               ********|*****|*********************|**************************
0050               idx.init:
0051 3160 0649  14         dect  stack
0052 3162 C64B  30         mov   r11,*stack            ; Save return address
0053 3164 0649  14         dect  stack
0054 3166 C644  30         mov   tmp0,*stack           ; Push tmp0
0055                       ;------------------------------------------------------
0056                       ; Initialize
0057                       ;------------------------------------------------------
0058 3168 0204  20         li    tmp0,idx.top
     316A B000     
0059 316C C804  38         mov   tmp0,@edb.index.ptr   ; Set pointer to index in editor structure
     316E A502     
0060               
0061 3170 C120  34         mov   @tv.sams.b000,tmp0
     3172 A206     
0062 3174 C804  38         mov   tmp0,@idx.sams.page   ; Set current SAMS page
     3176 A600     
0063 3178 C804  38         mov   tmp0,@idx.sams.lopage ; Set 1st SAMS page
     317A A602     
0064                       ;------------------------------------------------------
0065                       ; Clear all index pages
0066                       ;------------------------------------------------------
0067 317C 0224  22         ai    tmp0,4                ; \ Let's clear all index pages
     317E 0004     
0068 3180 C804  38         mov   tmp0,@idx.sams.hipage ; /
     3182 A604     
0069               
0070 3184 06A0  32         bl    @_idx.sams.mapcolumn.on
     3186 31A2     
0071                                                   ; Index in continuous memory region
0072               
0073 3188 06A0  32         bl    @film
     318A 2236     
0074 318C B000                   data idx.top,>00,idx.size * 5
     318E 0000     
     3190 5000     
0075                                                   ; Clear index
0076               
0077 3192 06A0  32         bl    @_idx.sams.mapcolumn.off
     3194 31D6     
0078                                                   ; Restore memory window layout
0079               
0080 3196 C820  54         mov   @idx.sams.lopage,@idx.sams.hipage
     3198 A602     
     319A A604     
0081                                                   ; Reset last SAMS page
0082                       ;------------------------------------------------------
0083                       ; Exit
0084                       ;------------------------------------------------------
0085               idx.init.exit:
0086 319C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0087 319E C2F9  30         mov   *stack+,r11           ; Pop r11
0088 31A0 045B  20         b     *r11                  ; Return to caller
0089               
0090               
0091               ***************************************************************
0092               * bl @_idx.sams.mapcolumn.on
0093               *--------------------------------------------------------------
0094               * Register usage
0095               * tmp0, tmp1, tmp2
0096               *--------------------------------------------------------------
0097               *  Remarks
0098               *  Private, only to be called from inside idx module
0099               ********|*****|*********************|**************************
0100               _idx.sams.mapcolumn.on:
0101 31A2 0649  14         dect  stack
0102 31A4 C64B  30         mov   r11,*stack            ; Push return address
0103 31A6 0649  14         dect  stack
0104 31A8 C644  30         mov   tmp0,*stack           ; Push tmp0
0105 31AA 0649  14         dect  stack
0106 31AC C645  30         mov   tmp1,*stack           ; Push tmp1
0107 31AE 0649  14         dect  stack
0108 31B0 C646  30         mov   tmp2,*stack           ; Push tmp2
0109               *--------------------------------------------------------------
0110               * Map index pages into memory window  (b000-ffff)
0111               *--------------------------------------------------------------
0112 31B2 C120  34         mov   @idx.sams.lopage,tmp0 ; Get lowest index page
     31B4 A602     
0113 31B6 0205  20         li    tmp1,idx.top
     31B8 B000     
0114 31BA 0206  20         li    tmp2,5                ; Set loop counter. all pages of index
     31BC 0005     
0115                       ;-------------------------------------------------------
0116                       ; Loop over banks
0117                       ;-------------------------------------------------------
0118 31BE 06A0  32 !       bl    @xsams.page.set       ; Set SAMS page
     31C0 2590     
0119                                                   ; \ i  tmp0  = SAMS page number
0120                                                   ; / i  tmp1  = Memory address
0121               
0122 31C2 0584  14         inc   tmp0                  ; Next SAMS index page
0123 31C4 0225  22         ai    tmp1,>1000            ; Next memory region
     31C6 1000     
0124 31C8 0606  14         dec   tmp2                  ; Update loop counter
0125 31CA 15F9  14         jgt   -!                    ; Next iteration
0126               *--------------------------------------------------------------
0127               * Exit
0128               *--------------------------------------------------------------
0129               _idx.sams.mapcolumn.on.exit:
0130 31CC C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0131 31CE C179  30         mov   *stack+,tmp1          ; Pop tmp1
0132 31D0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0133 31D2 C2F9  30         mov   *stack+,r11           ; Pop return address
0134 31D4 045B  20         b     *r11                  ; Return to caller
0135               
0136               
0137               ***************************************************************
0138               * _idx.sams.mapcolumn.off
0139               * Restore normal SAMS layout again (single index page)
0140               ***************************************************************
0141               * bl @_idx.sams.mapcolumn.off
0142               *--------------------------------------------------------------
0143               * Register usage
0144               * tmp0, tmp1, tmp2, tmp3
0145               *--------------------------------------------------------------
0146               *  Remarks
0147               *  Private, only to be called from inside idx module
0148               ********|*****|*********************|**************************
0149               _idx.sams.mapcolumn.off:
0150 31D6 0649  14         dect  stack
0151 31D8 C64B  30         mov   r11,*stack            ; Push return address
0152 31DA 0649  14         dect  stack
0153 31DC C644  30         mov   tmp0,*stack           ; Push tmp0
0154 31DE 0649  14         dect  stack
0155 31E0 C645  30         mov   tmp1,*stack           ; Push tmp1
0156 31E2 0649  14         dect  stack
0157 31E4 C646  30         mov   tmp2,*stack           ; Push tmp2
0158 31E6 0649  14         dect  stack
0159 31E8 C647  30         mov   tmp3,*stack           ; Push tmp3
0160               *--------------------------------------------------------------
0161               * Map index pages into memory window  (b000-????)
0162               *--------------------------------------------------------------
0163 31EA 0205  20         li    tmp1,idx.top
     31EC B000     
0164 31EE 0206  20         li    tmp2,5                ; Always 5 pages
     31F0 0005     
0165 31F2 0207  20         li    tmp3,tv.sams.b000     ; Pointer to fist SAMS page
     31F4 A206     
0166                       ;-------------------------------------------------------
0167                       ; Loop over table in memory (@tv.sams.b000:@tv.sams.f000)
0168                       ;-------------------------------------------------------
0169 31F6 C137  30 !       mov   *tmp3+,tmp0           ; Get SAMS page
0170               
0171 31F8 06A0  32         bl    @xsams.page.set       ; Set SAMS page
     31FA 2590     
0172                                                   ; \ i  tmp0  = SAMS page number
0173                                                   ; / i  tmp1  = Memory address
0174               
0175 31FC 0225  22         ai    tmp1,>1000            ; Next memory region
     31FE 1000     
0176 3200 0606  14         dec   tmp2                  ; Update loop counter
0177 3202 15F9  14         jgt   -!                    ; Next iteration
0178               *--------------------------------------------------------------
0179               * Exit
0180               *--------------------------------------------------------------
0181               _idx.sams.mapcolumn.off.exit:
0182 3204 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0183 3206 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0184 3208 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0185 320A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0186 320C C2F9  30         mov   *stack+,r11           ; Pop return address
0187 320E 045B  20         b     *r11                  ; Return to caller
0188               
0189               
0190               
0191               ***************************************************************
0192               * _idx.samspage.get
0193               * Get SAMS page for index
0194               ***************************************************************
0195               * bl @_idx.samspage.get
0196               *--------------------------------------------------------------
0197               * INPUT
0198               * tmp0 = Line number
0199               *--------------------------------------------------------------
0200               * OUTPUT
0201               * @outparm1 = Offset for index entry in index SAMS page
0202               *--------------------------------------------------------------
0203               * Register usage
0204               * tmp0, tmp1, tmp2
0205               *--------------------------------------------------------------
0206               *  Remarks
0207               *  Private, only to be called from inside idx module.
0208               *  Activates SAMS page containing required index slot entry.
0209               ********|*****|*********************|**************************
0210               _idx.samspage.get:
0211 3210 0649  14         dect  stack
0212 3212 C64B  30         mov   r11,*stack            ; Save return address
0213 3214 0649  14         dect  stack
0214 3216 C644  30         mov   tmp0,*stack           ; Push tmp0
0215 3218 0649  14         dect  stack
0216 321A C645  30         mov   tmp1,*stack           ; Push tmp1
0217 321C 0649  14         dect  stack
0218 321E C646  30         mov   tmp2,*stack           ; Push tmp2
0219                       ;------------------------------------------------------
0220                       ; Determine SAMS index page
0221                       ;------------------------------------------------------
0222 3220 C184  18         mov   tmp0,tmp2             ; Line number
0223 3222 04C5  14         clr   tmp1                  ; MSW (tmp1) = 0 / LSW (tmp2) = Line number
0224 3224 0204  20         li    tmp0,2048             ; Index entries in 4K SAMS page
     3226 0800     
0225               
0226 3228 3D44 128         div   tmp0,tmp1             ; \ Divide 32 bit value by 2048
0227                                                   ; | tmp1 = quotient  (SAMS page offset)
0228                                                   ; / tmp2 = remainder
0229               
0230 322A 0A16  18         sla   tmp2,1                ; line number * 2
0231 322C C806  38         mov   tmp2,@outparm1        ; Offset index entry
     322E A018     
0232               
0233 3230 A160  34         a     @idx.sams.lopage,tmp1 ; Add SAMS page base
     3232 A602     
0234 3234 8805  34         c     tmp1,@idx.sams.page   ; Page already active?
     3236 A600     
0235               
0236 3238 130E  14         jeq   _idx.samspage.get.exit
0237                                                   ; Yes, so exit
0238                       ;------------------------------------------------------
0239                       ; Activate SAMS index page
0240                       ;------------------------------------------------------
0241 323A C805  38         mov   tmp1,@idx.sams.page   ; Set current SAMS page
     323C A600     
0242 323E C805  38         mov   tmp1,@tv.sams.b000    ; Also keep SAMS window synced in Stevie
     3240 A206     
0243 3242 C105  18         mov   tmp1,tmp0             ; Destination SAMS page
0244               
0245 3244 0205  20         li    tmp1,>b000            ; Memory window for index page
     3246 B000     
0246               
0247 3248 06A0  32         bl    @xsams.page.set       ; Switch to SAMS page
     324A 2590     
0248                                                   ; \ i  tmp0 = SAMS page
0249                                                   ; / i  tmp1 = Memory address
0250                       ;------------------------------------------------------
0251                       ; Check if new highest SAMS index page
0252                       ;------------------------------------------------------
0253 324C 8804  34         c     tmp0,@idx.sams.hipage ; New highest page?
     324E A604     
0254 3250 1202  14         jle   _idx.samspage.get.exit
0255                                                   ; No, exit
0256 3252 C804  38         mov   tmp0,@idx.sams.hipage ; Yes, set highest SAMS index page
     3254 A604     
0257                       ;------------------------------------------------------
0258                       ; Exit
0259                       ;------------------------------------------------------
0260               _idx.samspage.get.exit:
0261 3256 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0262 3258 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0263 325A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0264 325C C2F9  30         mov   *stack+,r11           ; Pop r11
0265 325E 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0017                       copy  "edb.asm"                ; Editor Buffer
     **** ****     > edb.asm
0001               * FILE......: edb.asm
0002               * Purpose...: Stevie Editor - Editor Buffer module
0003               
0004               ***************************************************************
0005               * edb.init
0006               * Initialize Editor buffer
0007               ***************************************************************
0008               * bl @edb.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ***************************************************************
0021               edb.init:
0022 3260 0649  14         dect  stack
0023 3262 C64B  30         mov   r11,*stack            ; Save return address
0024 3264 0649  14         dect  stack
0025 3266 C644  30         mov   tmp0,*stack           ; Push tmp0
0026                       ;------------------------------------------------------
0027                       ; Initialize
0028                       ;------------------------------------------------------
0029 3268 0204  20         li    tmp0,edb.top          ; \
     326A C000     
0030 326C C804  38         mov   tmp0,@edb.top.ptr     ; / Set pointer to top of editor buffer
     326E A500     
0031 3270 C804  38         mov   tmp0,@edb.next_free.ptr
     3272 A508     
0032                                                   ; Set pointer to next free line
0033               
0034 3274 0720  34         seto  @edb.insmode          ; Turn on insert mode for this editor buffer
     3276 A50A     
0035               
0036 3278 0204  20         li    tmp0,1
     327A 0001     
0037 327C C804  38         mov   tmp0,@edb.lines       ; Lines=1
     327E A504     
0038               
0039 3280 0720  34         seto  @edb.block.m1         ; Reset block start line
     3282 A50E     
0040 3284 0720  34         seto  @edb.block.m2         ; Reset block end line
     3286 A510     
0041               
0042 3288 C820  54         mov   @tv.lineterm,@edb.lineterm
     328A A236     
     328C A524     
0043                                                   ; Set line termination char from default
0044               
0045 328E 0204  20         li    tmp0,txt.newfile      ; "New file"
     3290 3B1A     
0046 3292 C804  38         mov   tmp0,@edb.filename.ptr
     3294 A514     
0047               
0048 3296 04E0  34         clr   @fh.kilobytes         ; \ Clear kilobytes processed
     3298 A440     
0049 329A 04E0  34         clr   @fh.kilobytes.prev    ; /
     329C A45C     
0050               
0051 329E 0204  20         li    tmp0,txt.filetype.none
     32A0 3C36     
0052 32A2 C804  38         mov   tmp0,@edb.filetype.ptr
     32A4 A516     
0053               
0054               edb.init.exit:
0055                       ;------------------------------------------------------
0056                       ; Exit
0057                       ;------------------------------------------------------
0058 32A6 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0059 32A8 C2F9  30         mov   *stack+,r11           ; Pop r11
0060 32AA 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0018                       copy  "cmdb.asm"               ; Command buffer
     **** ****     > cmdb.asm
0001               * FILE......: cmdb.asm
0002               * Purpose...: Stevie Editor - Command Buffer module
0003               
0004               ***************************************************************
0005               * cmdb.init
0006               * Initialize Command Buffer
0007               ***************************************************************
0008               * bl @cmdb.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               cmdb.init:
0022 32AC 0649  14         dect  stack
0023 32AE C64B  30         mov   r11,*stack            ; Save return address
0024 32B0 0649  14         dect  stack
0025 32B2 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 32B4 0649  14         dect  stack
0027 32B6 C645  30         mov   tmp1,*stack           ; Push tmp1
0028                       ;------------------------------------------------------
0029                       ; Initialize
0030                       ;------------------------------------------------------
0031 32B8 0204  20         li    tmp0,cmdb.top         ; \ Set pointer to command buffer
     32BA E000     
0032 32BC C804  38         mov   tmp0,@cmdb.top.ptr    ; /
     32BE A700     
0033               
0034 32C0 04E0  34         clr   @cmdb.visible         ; Hide command buffer
     32C2 A702     
0035 32C4 0204  20         li    tmp0,6
     32C6 0006     
0036 32C8 C804  38         mov   tmp0,@cmdb.scrrows    ; Set current command buffer size
     32CA A706     
0037 32CC C804  38         mov   tmp0,@cmdb.default    ; Set default command buffer size
     32CE A708     
0038               
0039 32D0 04E0  34         clr   @cmdb.lines           ; Number of lines in cmdb buffer
     32D2 A718     
0040 32D4 04E0  34         clr   @cmdb.dirty           ; Command buffer is clean
     32D6 A71A     
0041 32D8 04E0  34         clr   @cmdb.action.ptr      ; Reset action to execute pointer
     32DA A72C     
0042 32DC 0720  34         seto  @cmdb.fb.yxsave       ; Reset (removes "write protection")
     32DE A704     
0043                       ;------------------------------------------------------
0044                       ; Calculate VDP address of CMDB top row (TAT!)
0045                       ;------------------------------------------------------
0046 32E0 0204  20         li    tmp0,pane.botrow      ; \
     32E2 001D     
0047 32E4 6120  34         s     @cmdb.scrrows,tmp0    ; | pos = Y * (columns per row)
     32E6 A706     
0048 32E8 3920  70         mpy   @wcolmn,tmp0          ; | result is in tmp1
     32EA 833A     
0049 32EC C105  18         mov   tmp1,tmp0             ; | Get result
0050 32EE 0224  22         ai    tmp0,vdp.tat.base     ; | Add VDP TAT base address
     32F0 1800     
0051 32F2 C804  38         mov   tmp0,@cmdb.vdptop     ; /
     32F4 A70E     
0052                       ;------------------------------------------------------
0053                       ; Clear command buffer
0054                       ;------------------------------------------------------
0055 32F6 06A0  32         bl    @film
     32F8 2236     
0056 32FA E000                   data  cmdb.top,>00,cmdb.size
     32FC 0000     
     32FE 1000     
0057                                                   ; Clear it all the way
0058                       ;------------------------------------------------------
0059                       ; Exit
0060                       ;------------------------------------------------------
0061               cmdb.init.exit:
0062 3300 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0063 3302 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0064 3304 C2F9  30         mov   *stack+,r11           ; Pop r11
0065 3306 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0019                       copy  "errpane.asm"            ; Error pane
     **** ****     > errpane.asm
0001               * FILE......: errpane.asm
0002               * Purpose...: Error pane utilities
0003               
0004               ***************************************************************
0005               * errpane.init
0006               * Initialize error pane
0007               ***************************************************************
0008               * bl @errpane.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0,tmp1,tmp2
0018               *--------------------------------------------------------------
0019               * Notes
0020               ***************************************************************
0021               errpane.init:
0022 3308 0649  14         dect  stack
0023 330A C64B  30         mov   r11,*stack            ; Save return address
0024 330C 0649  14         dect  stack
0025 330E C644  30         mov   tmp0,*stack           ; Push tmp0
0026 3310 0649  14         dect  stack
0027 3312 C645  30         mov   tmp1,*stack           ; Push tmp1
0028 3314 0649  14         dect  stack
0029 3316 C646  30         mov   tmp2,*stack           ; Push tmp2
0030                       ;------------------------------------------------------
0031                       ; Initialize
0032                       ;------------------------------------------------------
0033 3318 04E0  34         clr   @tv.error.visible     ; Set to hidden
     331A A22A     
0034 331C 0204  20         li    tmp0,3
     331E 0003     
0035 3320 C804  38         mov   tmp0,@tv.error.rows   ; Number of rows in error pane
     3322 A22C     
0036               
0037 3324 06A0  32         bl    @film
     3326 2236     
0038 3328 A238                   data tv.error.msg,0,160
     332A 0000     
     332C 00A0     
0039                       ;-------------------------------------------------------
0040                       ; Exit
0041                       ;-------------------------------------------------------
0042               errpane.exit:
0043 332E C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0044 3330 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0045 3332 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0046 3334 C2F9  30         mov   *stack+,r11           ; Pop R11
0047 3336 045B  20         b     *r11                  ; Return to caller
0048               
                   < rom.resident.asm
0020                       copy  "tv.asm"                 ; Main editor configuration
     **** ****     > tv.asm
0001               * FILE......: tv.asm
0002               * Purpose...: Initialize editor
0003               
0004               ***************************************************************
0005               * tv.init
0006               * Initialize editor settings
0007               ***************************************************************
0008               * bl @tv.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ***************************************************************
0021               tv.init:
0022 3338 0649  14         dect  stack
0023 333A C64B  30         mov   r11,*stack            ; Save return address
0024 333C 0649  14         dect  stack
0025 333E C644  30         mov   tmp0,*stack           ; Push tmp0
0026 3340 0649  14         dect  stack
0027 3342 C645  30         mov   tmp1,*stack           ; Push tmp1
0028 3344 0649  14         dect  stack
0029 3346 C646  30         mov   tmp2,*stack           ; Push tmp2
0030                       ;------------------------------------------------------
0031                       ; Initialize
0032                       ;------------------------------------------------------
0033 3348 0204  20         li    tmp0,1                ; \ Set default color scheme
     334A 0001     
0034 334C C804  38         mov   tmp0,@tv.colorscheme  ; /
     334E A212     
0035               
0036 3350 04E0  34         clr   @tv.task.oneshot      ; Reset pointer to oneshot task
     3352 A226     
0037 3354 E0A0  34         soc   @wbit10,config        ; Assume ALPHA LOCK is down
     3356 200C     
0038               
0039 3358 0204  20         li    tmp0,fj.bottom
     335A B000     
0040 335C C804  38         mov   tmp0,@tv.fj.stackpnt  ; Set pointer to farjump return stack
     335E A228     
0041               
0042 3360 04E0  34         clr   @tv.specmsg.ptr       ; No special message
     3362 A234     
0043                       ;------------------------------------------------------
0044                       ; Set defaults
0045                       ;------------------------------------------------------
0046 3364 06A0  32         bl    @cpym2m
     3366 24F4     
0047 3368 3D5C                   data def.printer.fname,tv.printer.fname,7
     336A DE00     
     336C 0007     
0048               
0049 336E 06A0  32         bl    @cpym2m
     3370 24F4     
0050 3372 3D63                   data def.clip.fname.a,tv.clip.fname,10
     3374 DE50     
     3376 000A     
0051               
0052 3378 06A0  32         bl    @cpym2m
     337A 24F4     
0053 337C 3D9B                   data def.mc.fname.c,tv.mc.fname,13
     337E DEA0     
     3380 000D     
0054               
0055 3382 04E0  34         clr   @edb.autoinsert       ; Set AutoInsert off by default
     3384 A50C     
0056               
0057 3386 0204  20         li    tmp0,13               ; \
     3388 000D     
0058 338A C804  38         mov   tmp0,@tv.lineterm     ; | MSB = 00 Line termination mode off
     338C A236     
0059                                                   ; / LSB = 13 Carriage return
0060                       ;-------------------------------------------------------
0061                       ; Exit
0062                       ;-------------------------------------------------------
0063               tv.init.exit:
0064 338E C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0065 3390 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0066 3392 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0067 3394 C2F9  30         mov   *stack+,r11           ; Pop R11
0068 3396 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0021                       copy  "tv.quit.asm"            ; Exit Stevie and return to monitor
     **** ****     > tv.quit.asm
0001               * FILE......: tv.quit.asm
0002               * Purpose...: Quit Stevie and return to monitor
0003               
0004               ***************************************************************
0005               * tv.quit
0006               * Quit stevie and return to monitor
0007               ***************************************************************
0008               * b    @tv.quit
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               ***************************************************************
0019               tv.quit:
0020                       ;-------------------------------------------------------
0021                       ; Reset/lock F18a
0022                       ;-------------------------------------------------------
0023 3398 06A0  32         bl    @f18rst               ; Reset and lock the F18A
     339A 27C0     
0024                       ;-------------------------------------------------------
0025                       ; Load legacy SAMS page layout and exit to monitor
0026                       ;-------------------------------------------------------
0027 339C 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     339E 2FE4     
0028 33A0 600E                   data bank7.rom        ; | i  p0 = bank address
0029 33A2 7F40                   data bankx.vectab     ; | i  p1 = Vector with target address
0030 33A4 6008                   data bankid           ; / i  p2 = Source ROM bank for return
0031               
0032                       ; We never return here. We call @mem.sams.set.legacy (vector1) and
0033                       ; in there activate bank 0 in cartridge space and return to monitor.
0034                       ;
0035                       ; Reason for doing so is that @tv.quit is located in
0036                       ; low memory expansion. So switching SAMS banks or turning off the SAMS
0037                       ; mapper results in invalid OPCODE's because the program just isn't
0038                       ; there in low memory expansion anymore.
                   < rom.resident.asm
0022                       copy  "tv.uint16.pack.asm"     ; Pack string to 16bit unsigned integer
     **** ****     > tv.uint16.pack.asm
0001               * FILE......: tv.uint16.pack.asm
0002               * Purpose...: Pack string to 16bit unsigned integer
0003               
0004               ***************************************************************
0005               * tv.uint16.pack
0006               * Pack (number) string to 16bit unsigned integer
0007               ***************************************************************
0008               * bl @tv.uint16.pack
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Pointer to input string (no length-byte prefix!)
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @outparm1 = 16bit unsigned integer
0015               * @outparm2 = 0 conversion ok, >FFFF invalid input
0016               *--------------------------------------------------------------
0017               * REMARK
0018               * None
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * tmp0, tmp1, tmp2, tmp3, r0, r1
0022               ***************************************************************
0023               tv.uint16.pack:
0024 33A6 0649  14         dect  stack
0025 33A8 C64B  30         mov   r11,*stack            ; Push return address
0026 33AA 0649  14         dect  stack
0027 33AC C644  30         mov   tmp0,*stack           ; Push tmp0
0028 33AE 0649  14         dect  stack
0029 33B0 C645  30         mov   tmp1,*stack           ; Push tmp1
0030 33B2 0649  14         dect  stack
0031 33B4 C646  30         mov   tmp2,*stack           ; Push tmp2
0032 33B6 0649  14         dect  stack
0033 33B8 C647  30         mov   tmp3,*stack           ; Push tmp3
0034 33BA 0649  14         dect  stack
0035 33BC C640  30         mov   r0,*stack             ; Push r0
0036 33BE 0649  14         dect  stack
0037 33C0 C641  30         mov   r1,*stack             ; Push r1
0038                       ;------------------------------------------------------
0039                       ; Initialisation
0040                       ;------------------------------------------------------
0041 33C2 C120  34         mov   @parm1,tmp0           ; Pointer to input string
     33C4 A006     
0042 33C6 04C5  14         clr   tmp1                  ; Termination character >00
0043 33C8 04E0  34         clr   @outparm1             ; Reset output parameters
     33CA A018     
0044 33CC 04E0  34         clr   @outparm2             ; Reset output parameters
     33CE A01A     
0045                       ;------------------------------------------------------
0046                       ; Get string length
0047                       ;------------------------------------------------------
0048 33D0 06A0  32         bl    @xstring.getlenc      ; Get length of C-style string
     33D2 2ACE     
0049                                                   ; \ i  tmp0   = Pointer to C-style string
0050                                                   ; | i  tmp1   = Termination character
0051                                                   ; / o  @waux1 = Length of string
0052                       ;------------------------------------------------------
0053                       ; Assert
0054                       ;------------------------------------------------------
0055 33D4 C1A0  30         mov   @waux1,tmp2           ; Get string length
     33D6 833C     
0056 33D8 131F  14         jeq   tv.uint16.pack.error  ; No input string given
0057 33DA 0286  22         ci    tmp2,5                ; Maximum 5 digits ?
     33DC 0005     
0058 33DE 151C  14         jgt   tv.uint16.pack.error  ; Input string too long
0059                       ;------------------------------------------------------
0060                       ; Prepare register values
0061                       ;------------------------------------------------------
0062 33E0 C120  34         mov   @parm1,tmp0           ; Pointer to input string
     33E2 A006     
0063               
0064 33E4 A186  18         a     tmp2,tmp2             ; \ Starting offset in tv.uint16.mpy
0065 33E6 0226  22         ai    tmp2,-10              ; |    10 - (tmp2 * 2)
     33E8 FFF6     
0066 33EA 0746  18         abs   tmp2                  ; /
0067               
0068 33EC 04C7  14         clr   tmp3                  ; Clear final uint16
0069                       ;------------------------------------------------------
0070                       ; Get character
0071                       ;------------------------------------------------------
0072               tv.uint16.pack.loop:
0073 33EE D174  28         movb  *tmp0+,tmp1           ; Get character
0074 33F0 0985  32         srl   tmp1,8                ; MSB to LSB
0075                       ;------------------------------------------------------
0076                       ; Character is ASCII 0 or blank (ASCII 32) ?
0077                       ;------------------------------------------------------
0078 33F2 1318  14         jeq   tv.uint16.pack.exit   ; End of string reached
0079 33F4 0285  22         ci    tmp1,32               ; Blank ?
     33F6 0020     
0080 33F8 1315  14         jeq   tv.uint16.pack.exit   ; End of string reached
0081                       ;------------------------------------------------------
0082                       ; Character in range 0..9 ?
0083                       ;------------------------------------------------------
0084 33FA 0225  22         ai    tmp1,-48              ; Remove ASCII offset
     33FC FFD0     
0085 33FE 110C  14         jlt   tv.uint16.pack.error  ; Invalid character, exit
0086 3400 0285  22         ci    tmp1,9
     3402 0009     
0087 3404 1509  14         jgt   tv.uint16.pack.error  ; Invalid character, exit
0088                       ;------------------------------------------------------
0089                       ; Get base 10 multiplier for digit
0090                       ;------------------------------------------------------
0091 3406 C026  34         mov   @tv.uint16.mpy(tmp2),r0
     3408 3434     
0092                       ;------------------------------------------------------
0093                       ; Convert number to decimal 10 (final result in tmp3)
0094                       ;------------------------------------------------------
0095 340A 3805  58         mpy   tmp1,r0               ; Multiply digit with r0, 32bit result is
0096                                                   ; in r0 and r1. We need r1 (LSW)
0097 340C A1C1  18         a     r1,tmp3               ; Add base10 value to final uint16
0098                       ;------------------------------------------------------
0099                       ; Prepare for next digit
0100                       ;------------------------------------------------------
0101 340E 05C6  14         inct  tmp2                  ; Update loop counter
0102 3410 0286  22         ci    tmp2,8                ; Last digit done?
     3412 0008     
0103 3414 12EC  14         jle   tv.uint16.pack.loop   ; Next iteration
0104 3416 1004  14         jmp   tv.uint16.pack.done   ; Done packing uint16, exit
0105                       ;------------------------------------------------------
0106                       ; Invalid character, stop packing and exit
0107                       ;------------------------------------------------------
0108               tv.uint16.pack.error:
0109 3418 04E0  34         clr   @outparm1             ; Empty uint16
     341A A018     
0110 341C 0720  34         seto  @outparm2             ; Invalid input string
     341E A01A     
0111                       ;-------------------------------------------------------
0112                       ; Save final uint16
0113                       ;-------------------------------------------------------
0114               tv.uint16.pack.done:
0115 3420 C807  38         mov   tmp3,@outparm1
     3422 A018     
0116                       ;-------------------------------------------------------
0117                       ; Exit
0118                       ;-------------------------------------------------------
0119               tv.uint16.pack.exit:
0120 3424 C079  30         mov   *stack+,r1            ; Pop r1
0121 3426 C039  30         mov   *stack+,r0            ; Pop r0
0122 3428 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0123 342A C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0124 342C C179  30         mov   *stack+,tmp1          ; Pop tmp1
0125 342E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0126 3430 C2F9  30         mov   *stack+,r11           ; Pop r11
0127 3432 045B  20         b     *r11                  ; Return to caller
0128                       ;-------------------------------------------------------
0129                       ; Constants for base 10 mmultipliers
0130                       ;-------------------------------------------------------
0131               tv.uint16.mpy:
0132 3434 2710             data  10000,1000,100,10,1
     3436 03E8     
     3438 0064     
     343A 000A     
     343C 0001     
0133               
                   < rom.resident.asm
0023                       copy  "tv.uint16.unpack.asm"   ; Unpack 16bit unsigned integer to string
     **** ****     > tv.uint16.unpack.asm
0001               * FILE......: tv.uint16.unpack.asm
0002               * Purpose...: Unpack 16bit unsigned integer to string
0003               
0004               ***************************************************************
0005               * tv.uint16.unpack
0006               * Unpack 16bit unsigned integer to string
0007               ***************************************************************
0008               * bl @tv.uint16.unpack
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = 16bit unsigned integer
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @uint16.unpacked = Length-prefixed string with unpacked uint16
0015               *                    (6 bytes max)
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0
0019               ***************************************************************
0020               tv.uint16.unpack:
0021 343E 0649  14         dect  stack
0022 3440 C64B  30         mov   r11,*stack            ; Save return address
0023 3442 0649  14         dect  stack
0024 3444 C644  30         mov   tmp0,*stack           ; Push tmp0
0025                       ;------------------------------------------------------
0026                       ; Initialize
0027                       ;------------------------------------------------------
0028 3446 06A0  32         bl    @mknum                ; Convert unsigned number to string
     3448 29C0     
0029 344A A006                   data parm1            ; \ i p0  = Pointer to 16bit unsigned number
0030 344C A100                   data rambuf           ; | i p1  = Pointer to 5 byte string buffer
0031 344E 30                     byte 48               ; | i p2H = Offset for ASCII digit 0
0032 344F   20                   byte 32               ; / i p2L = Char for replacing leading 0's
0033               
0034 3450 0204  20         li    tmp0,uint16.unpacked
     3452 A02C     
0035 3454 04F4  30         clr   *tmp0+                ; Clear string 01
0036 3456 04F4  30         clr   *tmp0+                ; Clear string 23
0037 3458 04F4  30         clr   *tmp0+                ; Clear string 34
0038               
0039 345A 06A0  32         bl    @trimnum              ; Trim unsigned number string
     345C 2A18     
0040 345E A100                   data rambuf           ; \ i p0  = Pointer to 5 byte string buffer
0041 3460 A02C                   data uint16.unpacked  ; | i p1  = Pointer to output buffer
0042 3462 0020                   data 32               ; / i p2  = Padding char to match against
0043                       ;-------------------------------------------------------
0044                       ; Exit
0045                       ;-------------------------------------------------------
0046               tv.uint16.unpack.exit:
0047 3464 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0048 3466 C2F9  30         mov   *stack+,r11           ; Pop r11
0049 3468 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0024                       copy  "tv.pad.string.asm"      ; Pad string to specified length
     **** ****     > tv.pad.string.asm
0001               * FILE......: tv.pad.string.asm
0002               * Purpose...: pad string to specified length
0003               
0004               
0005               ***************************************************************
0006               * tv.pad.string
0007               * pad string to specified length
0008               ***************************************************************
0009               * bl @tv.pad.string
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @parm1 = Pointer to length-prefixed string
0013               * @parm2 = Requested length
0014               * @parm3 = Fill character
0015               * @parm4 = Pointer to string buffer
0016               *--------------------------------------------------------------
0017               * OUTPUT
0018               * @outparm1 = Pointer to padded string
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * none
0022               ***************************************************************
0023               tv.pad.string:
0024 346A 0649  14         dect  stack
0025 346C C64B  30         mov   r11,*stack            ; Push return address
0026 346E 0649  14         dect  stack
0027 3470 C644  30         mov   tmp0,*stack           ; Push tmp0
0028 3472 0649  14         dect  stack
0029 3474 C645  30         mov   tmp1,*stack           ; Push tmp1
0030 3476 0649  14         dect  stack
0031 3478 C646  30         mov   tmp2,*stack           ; Push tmp2
0032 347A 0649  14         dect  stack
0033 347C C647  30         mov   tmp3,*stack           ; Push tmp3
0034                       ;------------------------------------------------------
0035                       ; Asserts
0036                       ;------------------------------------------------------
0037 347E C120  34         mov   @parm1,tmp0           ; \ Get string prefix (length-byte)
     3480 A006     
0038 3482 D194  26         movb  *tmp0,tmp2            ; /
0039 3484 0986  32         srl   tmp2,8                ; Right align
0040 3486 C1C6  18         mov   tmp2,tmp3             ; Make copy of length-byte for later use
0041               
0042 3488 8806  34         c     tmp2,@parm2           ; String length > requested length?
     348A A008     
0043 348C 1520  14         jgt   tv.pad.string.panic   ; Yes, crash
0044                       ;------------------------------------------------------
0045                       ; Copy string to buffer
0046                       ;------------------------------------------------------
0047 348E C120  34         mov   @parm1,tmp0           ; Get source address
     3490 A006     
0048 3492 C160  34         mov   @parm4,tmp1           ; Get destination address
     3494 A00C     
0049 3496 0586  14         inc   tmp2                  ; Also include length-byte in copy
0050               
0051 3498 0649  14         dect  stack
0052 349A C647  30         mov   tmp3,*stack           ; Push tmp3 (get overwritten by xpym2m)
0053               
0054 349C 06A0  32         bl    @xpym2m               ; Copy length-prefix string to buffer
     349E 24FA     
0055                                                   ; \ i  tmp0 = Source CPU memory address
0056                                                   ; | i  tmp1 = Target CPU memory address
0057                                                   ; / i  tmp2 = Number of bytes to copy
0058               
0059 34A0 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0060                       ;------------------------------------------------------
0061                       ; Set length of new string
0062                       ;------------------------------------------------------
0063 34A2 C120  34         mov   @parm2,tmp0           ; Get requested length
     34A4 A008     
0064 34A6 0A84  32         sla   tmp0,8                ; Left align
0065 34A8 C160  34         mov   @parm4,tmp1           ; Get pointer to buffer
     34AA A00C     
0066 34AC D544  30         movb  tmp0,*tmp1            ; Set new length of string
0067 34AE A147  18         a     tmp3,tmp1             ; \ Skip to end of string
0068 34B0 0585  14         inc   tmp1                  ; /
0069                       ;------------------------------------------------------
0070                       ; Prepare for padding string
0071                       ;------------------------------------------------------
0072 34B2 C1A0  34         mov   @parm2,tmp2           ; \ Get number of bytes to fill
     34B4 A008     
0073 34B6 6187  18         s     tmp3,tmp2             ; |
0074 34B8 0586  14         inc   tmp2                  ; /
0075               
0076 34BA C120  34         mov   @parm3,tmp0           ; Get byte to padd
     34BC A00A     
0077 34BE 0A84  32         sla   tmp0,8                ; Left align
0078                       ;------------------------------------------------------
0079                       ; Right-pad string to destination length
0080                       ;------------------------------------------------------
0081               tv.pad.string.loop:
0082 34C0 DD44  32         movb  tmp0,*tmp1+           ; Pad character
0083 34C2 0606  14         dec   tmp2                  ; Update loop counter
0084 34C4 15FD  14         jgt   tv.pad.string.loop    ; Next character
0085               
0086 34C6 C820  54         mov   @parm4,@outparm1      ; Set pointer to padded string
     34C8 A00C     
     34CA A018     
0087 34CC 1004  14         jmp   tv.pad.string.exit    ; Exit
0088                       ;-----------------------------------------------------------------------
0089                       ; CPU crash
0090                       ;-----------------------------------------------------------------------
0091               tv.pad.string.panic:
0092 34CE C80B  38         mov   r11,@>ffce            ; \ Save caller address
     34D0 FFCE     
0093 34D2 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     34D4 2026     
0094                       ;------------------------------------------------------
0095                       ; Exit
0096                       ;------------------------------------------------------
0097               tv.pad.string.exit:
0098 34D6 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0099 34D8 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0100 34DA C179  30         mov   *stack+,tmp1          ; Pop tmp1
0101 34DC C139  30         mov   *stack+,tmp0          ; Pop tmp0
0102 34DE C2F9  30         mov   *stack+,r11           ; Pop r11
0103 34E0 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0025                       ;-----------------------------------------------------------------------
0026                       ; Logic for Index management
0027                       ;-----------------------------------------------------------------------
0028                       copy  "idx.update.asm"         ; Index management - Update entry
     **** ****     > idx.update.asm
0001               * FILE......: idx.update.asm
0002               * Purpose...: Update index entry
0003               
0004               ***************************************************************
0005               * idx.entry.update
0006               * Update index entry - Each entry corresponds to a line
0007               ***************************************************************
0008               * bl @idx.entry.update
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1    = Line number in editor buffer
0012               * @parm2    = Pointer to line in editor buffer
0013               * @parm3    = SAMS page
0014               *--------------------------------------------------------------
0015               * OUTPUT
0016               * @outparm1 = Pointer to updated index entry
0017               *--------------------------------------------------------------
0018               * Register usage
0019               * tmp0,tmp1,tmp2
0020               ********|*****|*********************|**************************
0021               idx.entry.update:
0022 34E2 0649  14         dect  stack
0023 34E4 C64B  30         mov   r11,*stack            ; Save return address
0024 34E6 0649  14         dect  stack
0025 34E8 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 34EA 0649  14         dect  stack
0027 34EC C645  30         mov   tmp1,*stack           ; Push tmp1
0028                       ;------------------------------------------------------
0029                       ; Get parameters
0030                       ;------------------------------------------------------
0031 34EE C120  34         mov   @parm1,tmp0           ; Get line number
     34F0 A006     
0032 34F2 C160  34         mov   @parm2,tmp1           ; Get pointer
     34F4 A008     
0033 34F6 1312  14         jeq   idx.entry.update.clear
0034                                                   ; Special handling for "null"-pointer
0035                       ;------------------------------------------------------
0036                       ; Calculate LSB value index slot (pointer offset)
0037                       ;------------------------------------------------------
0038 34F8 0245  22         andi  tmp1,>0fff            ; Remove high-nibble from pointer
     34FA 0FFF     
0039 34FC 0945  24         srl   tmp1,4                ; Get offset (divide by 16)
0040                       ;------------------------------------------------------
0041                       ; Calculate MSB value index slot (SAMS page editor buffer)
0042                       ;------------------------------------------------------
0043 34FE 06E0  34         swpb  @parm3
     3500 A00A     
0044 3502 D160  34         movb  @parm3,tmp1           ; Put SAMS page in MSB
     3504 A00A     
0045 3506 06E0  34         swpb  @parm3                ; \ Restore original order again,
     3508 A00A     
0046                                                   ; / important for messing up caller parm3!
0047                       ;------------------------------------------------------
0048                       ; Update index slot
0049                       ;------------------------------------------------------
0050               idx.entry.update.save:
0051 350A 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     350C 3210     
0052                                                   ; \ i  tmp0     = Line number
0053                                                   ; / o  outparm1 = Slot offset in SAMS page
0054               
0055 350E C120  34         mov   @outparm1,tmp0        ; \ Update index slot
     3510 A018     
0056 3512 C905  38         mov   tmp1,@idx.top(tmp0)   ; /
     3514 B000     
0057 3516 C804  38         mov   tmp0,@outparm1        ; Pointer to updated index entry
     3518 A018     
0058 351A 1008  14         jmp   idx.entry.update.exit
0059                       ;------------------------------------------------------
0060                       ; Special handling for "null"-pointer
0061                       ;------------------------------------------------------
0062               idx.entry.update.clear:
0063 351C 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     351E 3210     
0064                                                   ; \ i  tmp0     = Line number
0065                                                   ; / o  outparm1 = Slot offset in SAMS page
0066               
0067 3520 C120  34         mov   @outparm1,tmp0        ; \ Clear index slot
     3522 A018     
0068 3524 04E4  34         clr   @idx.top(tmp0)        ; /
     3526 B000     
0069 3528 C804  38         mov   tmp0,@outparm1        ; Pointer to updated index entry
     352A A018     
0070                       ;------------------------------------------------------
0071                       ; Exit
0072                       ;------------------------------------------------------
0073               idx.entry.update.exit:
0074 352C C179  30         mov   *stack+,tmp1          ; Pop tmp1
0075 352E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0076 3530 C2F9  30         mov   *stack+,r11           ; Pop r11
0077 3532 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0029                       copy  "idx.pointer.asm"        ; Index management - Get pointer to line
     **** ****     > idx.pointer.asm
0001               * FILE......: idx.pointer.asm
0002               * Purpose...: Get pointer to line in editor buffer
0003               
0004               ***************************************************************
0005               * idx.pointer.get
0006               * Get pointer to editor buffer line content
0007               ***************************************************************
0008               * bl @idx.pointer.get
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Line number in editor buffer
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @outparm1 = Pointer to editor buffer line content
0015               * @outparm2 = SAMS page
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0,tmp1,tmp2
0019               ********|*****|*********************|**************************
0020               idx.pointer.get:
0021 3534 0649  14         dect  stack
0022 3536 C64B  30         mov   r11,*stack            ; Save return address
0023 3538 0649  14         dect  stack
0024 353A C644  30         mov   tmp0,*stack           ; Push tmp0
0025 353C 0649  14         dect  stack
0026 353E C645  30         mov   tmp1,*stack           ; Push tmp1
0027 3540 0649  14         dect  stack
0028 3542 C646  30         mov   tmp2,*stack           ; Push tmp2
0029                       ;------------------------------------------------------
0030                       ; Get slot entry
0031                       ;------------------------------------------------------
0032 3544 C120  34         mov   @parm1,tmp0           ; Line number in editor buffer
     3546 A006     
0033               
0034 3548 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page with index slot
     354A 3210     
0035                                                   ; \ i  tmp0     = Line number
0036                                                   ; / o  outparm1 = Slot offset in SAMS page
0037               
0038 354C C120  34         mov   @outparm1,tmp0        ; \ Get slot entry
     354E A018     
0039 3550 C164  34         mov   @idx.top(tmp0),tmp1   ; /
     3552 B000     
0040               
0041 3554 130C  14         jeq   idx.pointer.get.parm.null
0042                                                   ; Skip if index slot empty
0043                       ;------------------------------------------------------
0044                       ; Calculate MSB (SAMS page)
0045                       ;------------------------------------------------------
0046 3556 C185  18         mov   tmp1,tmp2             ; \
0047 3558 0986  32         srl   tmp2,8                ; / Right align SAMS page
0048                       ;------------------------------------------------------
0049                       ; Calculate LSB (pointer address)
0050                       ;------------------------------------------------------
0051 355A 0245  22         andi  tmp1,>00ff            ; Get rid of MSB (SAMS page)
     355C 00FF     
0052 355E 0A45  24         sla   tmp1,4                ; Multiply with 16
0053 3560 0225  22         ai    tmp1,edb.top          ; Add editor buffer base address
     3562 C000     
0054                       ;------------------------------------------------------
0055                       ; Return parameters
0056                       ;------------------------------------------------------
0057               idx.pointer.get.parm:
0058 3564 C805  38         mov   tmp1,@outparm1        ; Index slot -> Pointer
     3566 A018     
0059 3568 C806  38         mov   tmp2,@outparm2        ; Index slot -> SAMS page
     356A A01A     
0060 356C 1004  14         jmp   idx.pointer.get.exit
0061                       ;------------------------------------------------------
0062                       ; Special handling for "null"-pointer
0063                       ;------------------------------------------------------
0064               idx.pointer.get.parm.null:
0065 356E 04E0  34         clr   @outparm1
     3570 A018     
0066 3572 04E0  34         clr   @outparm2
     3574 A01A     
0067                       ;------------------------------------------------------
0068                       ; Exit
0069                       ;------------------------------------------------------
0070               idx.pointer.get.exit:
0071 3576 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0072 3578 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0073 357A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0074 357C C2F9  30         mov   *stack+,r11           ; Pop r11
0075 357E 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0030                       copy  "idx.delete.asm"         ; Index management - delete slot
     **** ****     > idx.delete.asm
0001               * FILE......: idx_delete.asm
0002               * Purpose...: Delete index entry
0003               
0004               ***************************************************************
0005               * _idx.entry.delete.reorg
0006               * Reorganize index slot entries
0007               ***************************************************************
0008               * bl @_idx.entry.delete.reorg
0009               *--------------------------------------------------------------
0010               *  Remarks
0011               *  Private, only to be called from idx_entry_delete
0012               ********|*****|*********************|**************************
0013               _idx.entry.delete.reorg:
0014                       ;------------------------------------------------------
0015                       ; Reorganize index entries
0016                       ;------------------------------------------------------
0017 3580 0224  22         ai    tmp0,idx.top          ; Add index base to offset
     3582 B000     
0018 3584 C144  18         mov   tmp0,tmp1             ; a = current slot
0019 3586 05C5  14         inct  tmp1                  ; b = current slot + 2
0020                       ;------------------------------------------------------
0021                       ; Loop forward until end of index
0022                       ;------------------------------------------------------
0023               _idx.entry.delete.reorg.loop:
0024 3588 CD35  46         mov   *tmp1+,*tmp0+         ; Copy b -> a
0025 358A 0606  14         dec   tmp2                  ; tmp2--
0026 358C 16FD  14         jne   _idx.entry.delete.reorg.loop
0027                                                   ; Loop unless completed
0028 358E 045B  20         b     *r11                  ; Return to caller
0029               
0030               
0031               
0032               ***************************************************************
0033               * idx.entry.delete
0034               * Delete index entry - Close gap created by delete
0035               ***************************************************************
0036               * bl @idx.entry.delete
0037               *--------------------------------------------------------------
0038               * INPUT
0039               * @parm1    = Line number in editor buffer to delete
0040               * @parm2    = Line number of last line to check for reorg
0041               *--------------------------------------------------------------
0042               * Register usage
0043               * tmp0,tmp1,tmp2,tmp3
0044               ********|*****|*********************|**************************
0045               idx.entry.delete:
0046 3590 0649  14         dect  stack
0047 3592 C64B  30         mov   r11,*stack            ; Save return address
0048 3594 0649  14         dect  stack
0049 3596 C644  30         mov   tmp0,*stack           ; Push tmp0
0050 3598 0649  14         dect  stack
0051 359A C645  30         mov   tmp1,*stack           ; Push tmp1
0052 359C 0649  14         dect  stack
0053 359E C646  30         mov   tmp2,*stack           ; Push tmp2
0054 35A0 0649  14         dect  stack
0055 35A2 C647  30         mov   tmp3,*stack           ; Push tmp3
0056                       ;------------------------------------------------------
0057                       ; Get index slot
0058                       ;------------------------------------------------------
0059 35A4 C120  34         mov   @parm1,tmp0           ; Line number in editor buffer
     35A6 A006     
0060               
0061 35A8 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     35AA 3210     
0062                                                   ; \ i  tmp0     = Line number
0063                                                   ; / o  outparm1 = Slot offset in SAMS page
0064               
0065 35AC C120  34         mov   @outparm1,tmp0        ; Index offset
     35AE A018     
0066                       ;------------------------------------------------------
0067                       ; Prepare for index reorg
0068                       ;------------------------------------------------------
0069 35B0 C1A0  34         mov   @parm2,tmp2           ; Get last line to check
     35B2 A008     
0070 35B4 1303  14         jeq   idx.entry.delete.lastline
0071                                                   ; Exit early if last line = 0
0072               
0073 35B6 61A0  34         s     @parm1,tmp2           ; Calculate loop
     35B8 A006     
0074 35BA 1504  14         jgt   idx.entry.delete.reorg
0075                                                   ; Reorganize if loop counter > 0
0076                       ;------------------------------------------------------
0077                       ; Special treatment for last line
0078                       ;------------------------------------------------------
0079               idx.entry.delete.lastline:
0080 35BC 0224  22         ai    tmp0,idx.top          ; Add index base to offset
     35BE B000     
0081 35C0 04D4  26         clr   *tmp0                 ; Clear index entry
0082 35C2 1012  14         jmp   idx.entry.delete.exit ; Exit early
0083                       ;------------------------------------------------------
0084                       ; Reorganize index entries
0085                       ;------------------------------------------------------
0086               idx.entry.delete.reorg:
0087 35C4 C1E0  34         mov   @parm2,tmp3           ; Get last line to reorganize
     35C6 A008     
0088 35C8 0287  22         ci    tmp3,2048
     35CA 0800     
0089 35CC 120A  14         jle   idx.entry.delete.reorg.simple
0090                                                   ; Do simple reorg only if single
0091                                                   ; SAMS index page, otherwise complex reorg.
0092                       ;------------------------------------------------------
0093                       ; Complex index reorganization (multiple SAMS pages)
0094                       ;------------------------------------------------------
0095               idx.entry.delete.reorg.complex:
0096 35CE 06A0  32         bl    @_idx.sams.mapcolumn.on
     35D0 31A2     
0097                                                   ; Index in continuous memory region
0098               
0099                       ;-------------------------------------------------------
0100                       ; Recalculate index offset in continuous memory region
0101                       ;-------------------------------------------------------
0102 35D2 C120  34         mov   @parm1,tmp0           ; Restore line number
     35D4 A006     
0103 35D6 0A14  18         sla   tmp0,1                ; Calculate offset
0104               
0105 35D8 06A0  32         bl    @_idx.entry.delete.reorg
     35DA 3580     
0106                                                   ; Reorganize index
0107                                                   ; \ i  tmp0 = Index offset
0108                                                   ; / i  tmp2 = Loop count
0109               
0110 35DC 06A0  32         bl    @_idx.sams.mapcolumn.off
     35DE 31D6     
0111                                                   ; Restore memory window layout
0112               
0113 35E0 1002  14         jmp   !
0114                       ;------------------------------------------------------
0115                       ; Simple index reorganization
0116                       ;------------------------------------------------------
0117               idx.entry.delete.reorg.simple:
0118 35E2 06A0  32         bl    @_idx.entry.delete.reorg
     35E4 3580     
0119                       ;------------------------------------------------------
0120                       ; Clear index entry (base + offset already set)
0121                       ;------------------------------------------------------
0122 35E6 04D4  26 !       clr   *tmp0                 ; Clear index entry
0123                       ;------------------------------------------------------
0124                       ; Exit
0125                       ;------------------------------------------------------
0126               idx.entry.delete.exit:
0127 35E8 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0128 35EA C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0129 35EC C179  30         mov   *stack+,tmp1          ; Pop tmp1
0130 35EE C139  30         mov   *stack+,tmp0          ; Pop tmp0
0131 35F0 C2F9  30         mov   *stack+,r11           ; Pop r11
0132 35F2 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0031                       copy  "idx.insert.asm"         ; Index management - insert slot
     **** ****     > idx.insert.asm
0001               * FILE......: idx.insert.asm
0002               * Purpose...: Insert index entry
0003               
0004               ***************************************************************
0005               * _idx.entry.insert.reorg
0006               * Reorganize index slot entries
0007               ***************************************************************
0008               * bl @_idx.entry.insert.reorg
0009               *--------------------------------------------------------------
0010               *  Remarks
0011               *  Private, only to be called from idx_entry_insert
0012               ********|*****|*********************|**************************
0013               _idx.entry.insert.reorg:
0014                       ;------------------------------------------------------
0015                       ; Assert 1
0016                       ;------------------------------------------------------
0017 35F4 0286  22         ci    tmp2,2048*5           ; Crash if loop counter value is unrealistic
     35F6 2800     
0018                                                   ; Max. 5 SAMS pages, each with 2048 index
0019                                                   ; entries.
0020               
0021 35F8 1204  14         jle   !                     ; Continue if ok
0022                       ;------------------------------------------------------
0023                       ; Crash and burn
0024                       ;------------------------------------------------------
0025               _idx.entry.insert.reorg.crash:
0026 35FA C80B  38         mov   r11,@>ffce            ; \ Save caller address
     35FC FFCE     
0027 35FE 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     3600 2026     
0028                       ;------------------------------------------------------
0029                       ; Reorganize index entries
0030                       ;------------------------------------------------------
0031 3602 0224  22 !       ai    tmp0,idx.top          ; Add index base to offset
     3604 B000     
0032 3606 C144  18         mov   tmp0,tmp1             ; a = current slot
0033 3608 05C5  14         inct  tmp1                  ; b = current slot + 2
0034 360A 0586  14         inc   tmp2                  ; One time adjustment for current line
0035                       ;------------------------------------------------------
0036                       ; Assert 2
0037                       ;------------------------------------------------------
0038 360C C1C6  18         mov   tmp2,tmp3             ; Number of slots to reorganize
0039 360E 0A17  18         sla   tmp3,1                ; adjust to slot size
0040 3610 0507  14         neg   tmp3                  ; tmp3 = -tmp3
0041 3612 A1C4  18         a     tmp0,tmp3             ; tmp3 = tmp3 + tmp0
0042 3614 0287  22         ci    tmp3,idx.top - 4      ; Address before top of index ?
     3616 AFFC     
0043 3618 1504  14         jgt   _idx.entry.insert.reorg.loop
0044                                                   ; No, jump to loop start
0045                       ;------------------------------------------------------
0046                       ; Crash and burn
0047                       ;------------------------------------------------------
0048 361A C80B  38         mov   r11,@>ffce            ; \ Save caller address
     361C FFCE     
0049 361E 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     3620 2026     
0050                       ;------------------------------------------------------
0051                       ; Loop backwards from end of index up to insert point
0052                       ;------------------------------------------------------
0053               _idx.entry.insert.reorg.loop:
0054 3622 C554  38         mov   *tmp0,*tmp1           ; Copy a -> b
0055 3624 0644  14         dect  tmp0                  ; Move pointer up
0056 3626 0645  14         dect  tmp1                  ; Move pointer up
0057 3628 0606  14         dec   tmp2                  ; Next index entry
0058 362A 15FB  14         jgt   _idx.entry.insert.reorg.loop
0059                                                   ; Repeat until done
0060                       ;------------------------------------------------------
0061                       ; Clear index entry at insert point
0062                       ;------------------------------------------------------
0063 362C 05C4  14         inct  tmp0                  ; \ Clear index entry for line
0064 362E 04D4  26         clr   *tmp0                 ; / following insert point
0065               
0066 3630 045B  20         b     *r11                  ; Return to caller
0067               
0068               
0069               
0070               
0071               ***************************************************************
0072               * idx.entry.insert
0073               * Insert index entry
0074               ***************************************************************
0075               * bl @idx.entry.insert
0076               *--------------------------------------------------------------
0077               * INPUT
0078               * @parm1    = Line number in editor buffer to insert
0079               * @parm2    = Line number of last line to check for reorg
0080               *--------------------------------------------------------------
0081               * OUTPUT
0082               * NONE
0083               *--------------------------------------------------------------
0084               * Register usage
0085               * tmp0,tmp2
0086               ********|*****|*********************|**************************
0087               idx.entry.insert:
0088 3632 0649  14         dect  stack
0089 3634 C64B  30         mov   r11,*stack            ; Save return address
0090 3636 0649  14         dect  stack
0091 3638 C644  30         mov   tmp0,*stack           ; Push tmp0
0092 363A 0649  14         dect  stack
0093 363C C645  30         mov   tmp1,*stack           ; Push tmp1
0094 363E 0649  14         dect  stack
0095 3640 C646  30         mov   tmp2,*stack           ; Push tmp2
0096 3642 0649  14         dect  stack
0097 3644 C647  30         mov   tmp3,*stack           ; Push tmp3
0098                       ;------------------------------------------------------
0099                       ; Prepare for index reorg
0100                       ;------------------------------------------------------
0101 3646 C1A0  34         mov   @parm2,tmp2           ; Get last line to check
     3648 A008     
0102 364A 61A0  34         s     @parm1,tmp2           ; Calculate loop
     364C A006     
0103 364E 130F  14         jeq   idx.entry.insert.reorg.simple
0104                                                   ; Special treatment if last line
0105                       ;------------------------------------------------------
0106                       ; Reorganize index entries
0107                       ;------------------------------------------------------
0108               idx.entry.insert.reorg:
0109 3650 C1E0  34         mov   @parm2,tmp3
     3652 A008     
0110 3654 0287  22         ci    tmp3,2048
     3656 0800     
0111 3658 110A  14         jlt   idx.entry.insert.reorg.simple
0112                                                   ; Do simple reorg only if single
0113                                                   ; SAMS index page, otherwise complex reorg.
0114                       ;------------------------------------------------------
0115                       ; Complex index reorganization (multiple SAMS pages)
0116                       ;------------------------------------------------------
0117               idx.entry.insert.reorg.complex:
0118 365A 06A0  32         bl    @_idx.sams.mapcolumn.on
     365C 31A2     
0119                                                   ; Index in continuous memory region
0120                                                   ; b000 - ffff (5 SAMS pages)
0121               
0122 365E C120  34         mov   @parm2,tmp0           ; Last line number in editor buffer
     3660 A008     
0123 3662 0A14  18         sla   tmp0,1                ; tmp0 * 2
0124               
0125 3664 06A0  32         bl    @_idx.entry.insert.reorg
     3666 35F4     
0126                                                   ; Reorganize index
0127                                                   ; \ i  tmp0 = Last line in index
0128                                                   ; / i  tmp2 = Num. of index entries to move
0129               
0130 3668 06A0  32         bl    @_idx.sams.mapcolumn.off
     366A 31D6     
0131                                                   ; Restore memory window layout
0132               
0133 366C 1008  14         jmp   idx.entry.insert.exit
0134                       ;------------------------------------------------------
0135                       ; Simple index reorganization
0136                       ;------------------------------------------------------
0137               idx.entry.insert.reorg.simple:
0138 366E C120  34         mov   @parm2,tmp0           ; Last line number in editor buffer
     3670 A008     
0139               
0140 3672 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     3674 3210     
0141                                                   ; \ i  tmp0     = Line number
0142                                                   ; / o  outparm1 = Slot offset in SAMS page
0143               
0144 3676 C120  34         mov   @outparm1,tmp0        ; Index offset
     3678 A018     
0145               
0146 367A 06A0  32         bl    @_idx.entry.insert.reorg
     367C 35F4     
0147                                                   ; Reorganize index
0148                                                   ; \ i  tmp0 = Last line in index
0149                                                   ; / i  tmp2 = Num. of index entries to move
0150               
0151                       ;------------------------------------------------------
0152                       ; Exit
0153                       ;------------------------------------------------------
0154               idx.entry.insert.exit:
0155 367E C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0156 3680 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0157 3682 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0158 3684 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0159 3686 C2F9  30         mov   *stack+,r11           ; Pop r11
0160 3688 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0032                       ;-----------------------------------------------------------------------
0033                       ; Logic for editor buffer
0034                       ;-----------------------------------------------------------------------
0035                       copy  "edb.line.mappage.asm"   ; Activate edbuf SAMS page for line
     **** ****     > edb.line.mappage.asm
0001               * FILE......: edb.line.mappage.asm
0002               * Purpose...: Editor buffer SAMS setup
0003               
0004               
0005               ***************************************************************
0006               * edb.line.mappage
0007               * Activate editor buffer SAMS page for line
0008               ***************************************************************
0009               * bl  @edb.line.mappage
0010               *
0011               * tmp0 = Line number in editor buffer (base 1)
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * outparm1 = Pointer to line in editor buffer
0015               * outparm2 = SAMS page
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0, tmp1
0019               ***************************************************************
0020               edb.line.mappage:
0021 368A 0649  14         dect  stack
0022 368C C64B  30         mov   r11,*stack            ; Push return address
0023 368E 0649  14         dect  stack
0024 3690 C644  30         mov   tmp0,*stack           ; Push tmp0
0025 3692 0649  14         dect  stack
0026 3694 C645  30         mov   tmp1,*stack           ; Push tmp1
0027                       ;------------------------------------------------------
0028                       ; Assert
0029                       ;------------------------------------------------------
0030 3696 8804  34         c     tmp0,@edb.lines       ; Non-existing line?
     3698 A504     
0031 369A 1204  14         jle   edb.line.mappage.lookup
0032                                                   ; All checks passed, continue
0033                                                   ;--------------------------
0034                                                   ; Assert failed
0035                                                   ;--------------------------
0036 369C C80B  38         mov   r11,@>ffce            ; \ Save caller address
     369E FFCE     
0037 36A0 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     36A2 2026     
0038                       ;------------------------------------------------------
0039                       ; Lookup SAMS page for line in parm1
0040                       ;------------------------------------------------------
0041               edb.line.mappage.lookup:
0042 36A4 C804  38         mov   tmp0,@parm1           ; Set line number in editor buffer
     36A6 A006     
0043               
0044 36A8 06A0  32         bl    @idx.pointer.get      ; Get pointer to line
     36AA 3534     
0045                                                   ; \ i  parm1    = Line number
0046                                                   ; | o  outparm1 = Pointer to line
0047                                                   ; / o  outparm2 = SAMS page
0048               
0049 36AC C120  34         mov   @outparm2,tmp0        ; SAMS page
     36AE A01A     
0050 36B0 C160  34         mov   @outparm1,tmp1        ; Pointer to line
     36B2 A018     
0051 36B4 130B  14         jeq   edb.line.mappage.exit ; Nothing to page-in if NULL pointer
0052                                                   ; (=empty line)
0053                       ;------------------------------------------------------
0054                       ; Determine if requested SAMS page is already active
0055                       ;------------------------------------------------------
0056 36B6 8120  34         c     @tv.sams.c000,tmp0    ; Compare with active page editor buffer
     36B8 A208     
0057 36BA 1308  14         jeq   edb.line.mappage.exit ; Request page already active, so exit
0058                       ;------------------------------------------------------
0059                       ; Activate requested SAMS page
0060                       ;-----------------------------------------------------
0061 36BC 06A0  32         bl    @xsams.page.set       ; Switch SAMS memory page
     36BE 2590     
0062                                                   ; \ i  tmp0 = SAMS page
0063                                                   ; / i  tmp1 = Memory address
0064               
0065 36C0 C820  54         mov   @outparm2,@tv.sams.c000
     36C2 A01A     
     36C4 A208     
0066                                                   ; Set page in shadow registers
0067               
0068 36C6 C820  54         mov   @outparm2,@edb.sams.page
     36C8 A01A     
     36CA A518     
0069                                                   ; Set current SAMS page
0070                       ;------------------------------------------------------
0071                       ; Exit
0072                       ;------------------------------------------------------
0073               edb.line.mappage.exit:
0074 36CC C179  30         mov   *stack+,tmp1          ; Pop tmp1
0075 36CE C139  30         mov   *stack+,tmp0          ; Pop tmp0
0076 36D0 C2F9  30         mov   *stack+,r11           ; Pop r11
0077 36D2 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0036                       copy  "edb.line.getlength.asm" ; Get line length
     **** ****     > edb.line.getlength.asm
0001               * FILE......: edb.line.getlength.asm
0002               * Purpose...: Get length of specified line in editor buffer
0003               
0004               ***************************************************************
0005               * edb.line.getlength
0006               * Get length of specified line
0007               ***************************************************************
0008               *  bl   @edb.line.getlength
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Line number (base 0)
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @outparm1 = Length of line
0015               * @outparm2 = SAMS page
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0,tmp1
0019               ********|*****|*********************|**************************
0020               edb.line.getlength:
0021 36D4 0649  14         dect  stack
0022 36D6 C64B  30         mov   r11,*stack            ; Push return address
0023 36D8 0649  14         dect  stack
0024 36DA C644  30         mov   tmp0,*stack           ; Push tmp0
0025 36DC 0649  14         dect  stack
0026 36DE C645  30         mov   tmp1,*stack           ; Push tmp1
0027                       ;------------------------------------------------------
0028                       ; Initialisation
0029                       ;------------------------------------------------------
0030 36E0 04E0  34         clr   @outparm1             ; Reset length
     36E2 A018     
0031 36E4 04E0  34         clr   @outparm2             ; Reset SAMS bank
     36E6 A01A     
0032                       ;------------------------------------------------------
0033                       ; Exit if requested line beyond editor buffer
0034                       ;------------------------------------------------------
0035 36E8 C120  34         mov   @parm1,tmp0           ; \
     36EA A006     
0036 36EC 0584  14         inc   tmp0                  ; /  base 1
0037               
0038 36EE 8804  34         c     tmp0,@edb.lines       ; Requested line at BOT?
     36F0 A504     
0039 36F2 1201  14         jle   !                     ; No, continue processing
0040 36F4 100B  14         jmp   edb.line.getlength.null
0041                                                   ; Set length 0 and exit early
0042                       ;------------------------------------------------------
0043                       ; Map SAMS page
0044                       ;------------------------------------------------------
0045 36F6 C120  34 !       mov   @parm1,tmp0           ; Get line
     36F8 A006     
0046               
0047 36FA 06A0  32         bl    @edb.line.mappage     ; Activate editor buffer SAMS page for line
     36FC 368A     
0048                                                   ; \ i  tmp0     = Line number
0049                                                   ; | o  outparm1 = Pointer to line
0050                                                   ; / o  outparm2 = SAMS page
0051               
0052 36FE C120  34         mov   @outparm1,tmp0        ; Store pointer in tmp0
     3700 A018     
0053 3702 1304  14         jeq   edb.line.getlength.null
0054                                                   ; Set length to 0 if null-pointer
0055                       ;------------------------------------------------------
0056                       ; Process line prefix and exit
0057                       ;------------------------------------------------------
0058 3704 C154  26         mov   *tmp0,tmp1            ; Get length into tmp1
0059 3706 C805  38         mov   tmp1,@outparm1        ; Save length
     3708 A018     
0060 370A 1002  14         jmp   edb.line.getlength.exit
0061                       ;------------------------------------------------------
0062                       ; Set length to 0 if null-pointer
0063                       ;------------------------------------------------------
0064               edb.line.getlength.null:
0065 370C 04E0  34         clr   @outparm1             ; Set length to 0, was a null-pointer
     370E A018     
0066                       ;------------------------------------------------------
0067                       ; Exit
0068                       ;------------------------------------------------------
0069               edb.line.getlength.exit:
0070 3710 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0071 3712 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0072 3714 C2F9  30         mov   *stack+,r11           ; Pop r11
0073 3716 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0037                       copy  "edb.line.getlength2.asm"; Get length of current row
     **** ****     > edb.line.getlength2.asm
0001               * FILE......: edb.line.getlength2.asm
0002               * Purpose...: Get length of current row (as seen from editor buffer side)
0003               
0004               ***************************************************************
0005               * edb.line.getlength2
0006               * Get length of current row (as seen from editor buffer side)
0007               ***************************************************************
0008               *  bl   @edb.line.getlength2
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @fb.row = Row in frame buffer
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @fb.row.length = Length of row
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               ********|*****|*********************|**************************
0019               edb.line.getlength2:
0020 3718 0649  14         dect  stack
0021 371A C64B  30         mov   r11,*stack            ; Save return address
0022 371C 0649  14         dect  stack
0023 371E C644  30         mov   tmp0,*stack           ; Push tmp0
0024                       ;------------------------------------------------------
0025                       ; Calculate line in editor buffer
0026                       ;------------------------------------------------------
0027 3720 C120  34         mov   @fb.topline,tmp0      ; Get top line in frame buffer
     3722 A304     
0028 3724 A120  34         a     @fb.row,tmp0          ; Get current row in frame buffer
     3726 A306     
0029 3728 C804  38         mov   tmp0,@parm1
     372A A006     
0030                       ;------------------------------------------------------
0031                       ; Get length
0032                       ;------------------------------------------------------
0033 372C 06A0  32         bl    @edb.line.getlength   ; Get length of specified line
     372E 36D4     
0034                                                   ; \ i  @parm1    = Line number (base 0)
0035                                                   ; | o  @outparm1 = Length of line
0036                                                   ; / o  @outparm2 = SAMS page
0037               
0038 3730 C820  54         mov   @outparm1,@fb.row.length
     3732 A018     
     3734 A308     
0039                                                   ; Save row length
0040                       ;------------------------------------------------------
0041                       ; Exit
0042                       ;------------------------------------------------------
0043               edb.line.getlength2.exit:
0044 3736 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0045 3738 C2F9  30         mov   *stack+,r11           ; Pop R11
0046 373A 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0038                       copy  "edb.hipage.alloc.asm"   ; Check/increase highest SAMS page
     **** ****     > edb.hipage.alloc.asm
0001               * FILE......: edb.hipage.alloc.asm
0002               * Purpose...: Editor buffer utilities
0003               
0004               
0005               ***************************************************************
0006               * edb.hipage.alloc
0007               * Check and increase highest SAMS page of editor buffer
0008               ***************************************************************
0009               *  bl   @edb.hipage.alloc
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @edb.next_free.ptr = Pointer to next free line
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0,tmp1
0018               ********|*****|*********************|**************************
0019               edb.hipage.alloc:
0020 373C 0649  14         dect  stack
0021 373E C64B  30         mov   r11,*stack            ; Save return address
0022 3740 0649  14         dect  stack
0023 3742 C644  30         mov   tmp0,*stack           ; Push tmp0
0024 3744 0649  14         dect  stack
0025 3746 C645  30         mov   tmp1,*stack           ; Push tmp1
0026                       ;------------------------------------------------------
0027                       ; 1a. Check if highest SAMS page needs to be increased
0028                       ;------------------------------------------------------
0029               edb.hipage.alloc.check_setpage:
0030 3748 C120  34         mov   @edb.next_free.ptr,tmp0
     374A A508     
0031                                                   ;--------------------------
0032                                                   ; Check for page overflow
0033                                                   ;--------------------------
0034 374C 0244  22         andi  tmp0,>0fff            ; Get rid of highest nibble
     374E 0FFF     
0035 3750 0224  22         ai    tmp0,82               ; Assume line of 80 chars (+2 bytes prefix)
     3752 0052     
0036 3754 0284  22         ci    tmp0,>1000 - 16       ; 4K boundary reached?
     3756 0FF0     
0037 3758 1105  14         jlt   edb.hipage.alloc.setpage
0038                                                   ; Not yet, don't increase SAMS page
0039                       ;------------------------------------------------------
0040                       ; 1b. Increase highest SAMS page (copy-on-write!)
0041                       ;------------------------------------------------------
0042 375A 05A0  34         inc   @edb.sams.hipage      ; Set highest SAMS page
     375C A51C     
0043 375E C820  54         mov   @edb.top.ptr,@edb.next_free.ptr
     3760 A500     
     3762 A508     
0044                                                   ; Start at top of SAMS page again
0045                       ;------------------------------------------------------
0046                       ; 1c. Switch to SAMS page and exit
0047                       ;------------------------------------------------------
0048               edb.hipage.alloc.setpage:
0049 3764 C120  34         mov   @edb.sams.hipage,tmp0
     3766 A51C     
0050 3768 C160  34         mov   @edb.top.ptr,tmp1
     376A A500     
0051 376C 06A0  32         bl    @xsams.page.set       ; Set SAMS page
     376E 2590     
0052                                                   ; \ i  tmp0 = SAMS page number
0053                                                   ; / i  tmp1 = Memory address
0054               
0055 3770 1004  14         jmp   edb.hipage.alloc.exit
0056                       ;------------------------------------------------------
0057                       ; Check failed, crash CPU!
0058                       ;------------------------------------------------------
0059               edb.hipage.alloc.crash:
0060 3772 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     3774 FFCE     
0061 3776 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     3778 2026     
0062                       ;------------------------------------------------------
0063                       ; Exit
0064                       ;------------------------------------------------------
0065               edb.hipage.alloc.exit:
0066 377A C179  30         mov   *stack+,tmp1          ; Pop tmp1
0067 377C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0068 377E C2F9  30         mov   *stack+,r11           ; Pop R11
0069 3780 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0039                       ;-----------------------------------------------------------------------
0040                       ; Utility functions
0041                       ;-----------------------------------------------------------------------
0042                       copy  "pane.topline.clearmsg.asm"   ; Remove overlay msg in top line
     **** ****     > pane.topline.clearmsg.asm
0001               * FILE......: pane.topline.clearmsg.asm
0002               * Purpose...: One-shot task for clearing overlay message in top line
0003               
0004               
0005               ***************************************************************
0006               * pane.topline.oneshot.clearmsg
0007               * Remove overlay message in top line
0008               ***************************************************************
0009               * Runs as one-shot task in slot 3
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * none
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * none
0019               ********|*****|*********************|**************************
0020               pane.topline.oneshot.clearmsg:
0021 3782 0649  14         dect  stack
0022 3784 C64B  30         mov   r11,*stack            ; Push return address
0023 3786 0649  14         dect  stack
0024 3788 C660  42         mov   @wyx,*stack           ; Push cursor position
     378A 832A     
0025                       ;-------------------------------------------------------
0026                       ; Clear message
0027                       ;-------------------------------------------------------
0028 378C 06A0  32         bl    @hchar
     378E 27EC     
0029 3790 0034                   byte 0,52,32,18
     3792 2012     
0030 3794 FFFF                   data EOL              ; Clear message
0031               
0032 3796 04E0  34         clr   @tv.task.oneshot      ; Reset oneshot task
     3798 A226     
0033                       ;-------------------------------------------------------
0034                       ; Exit
0035                       ;-------------------------------------------------------
0036               pane.topline.oneshot.clearmsg.exit:
0037 379A C839  42         mov   *stack+,@wyx          ; Pop cursor position
     379C 832A     
0038 379E C2F9  30         mov   *stack+,r11           ; Pop R11
0039 37A0 045B  20         b     *r11                  ; Return to task
                   < rom.resident.asm
0043                       copy  "fg99.run.asm"                ; Run FinalGROM cartridge image
     **** ****     > fg99.run.asm
0001               * FILE......: fg99.run.asm
0002               * Purpose...: Run FinalGROM cartridge image
0003               
0004               
0005               ***************************************************************
0006               * fg99.run
0007               * Run FinalGROM cartridge image
0008               ***************************************************************
0009               * bl   @fg99.run
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @tv.fg99.img.ptr = Pointer to cartridge image entry
0013               *
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * r1 in GPL WS, tmp0, tmp1, tmp2, r12
0019               *--------------------------------------------------------------
0020               * Remarks
0021               * Based on tib.run
0022               ********|*****|*********************|**************************
0023               fg99.run:
0024                       ;-------------------------------------------------------
0025                       ; Put VDP in TI Basic compatible mode (32x24)
0026                       ;-------------------------------------------------------
0027 37A2 06A0  32         bl    @f18rst               ; Reset and lock the F18A
     37A4 27C0     
0028               
0029 37A6 06A0  32         bl    @vidtab               ; Load video mode table into VDP
     37A8 22F8     
0030 37AA 7F24                   data tibasic.32x24    ; Equate selected video mode table
0031               
0032 37AC 06A0  32         bl    @scroff               ; Turn off screen
     37AE 26A0     
0033                       ;------------------------------------------------------
0034                       ; Clear magic string
0035                       ;------------------------------------------------------
0036                       ; Clear the bytes 'DEAD994ABEEF' in core memory.
0037                       ; Indicate it's unsafe to resume Stevie and initialization
0038                       ; is necessary.
0039 37B0 04E0  34         clr   @magic.str.w1
     37B2 A000     
0040 37B4 04E0  34         clr   @magic.str.w2
     37B6 A002     
0041 37B8 04E0  34         clr   @magic.str.w3
     37BA A004     
0042                       ;-------------------------------------------------------
0043                       ; Load FG99 cartridge, but do not start cartridge yet
0044                       ;-------------------------------------------------------
0045 37BC C120  34         mov   @tv.fg99.img.ptr,tmp0 ; Get pointer to cartridge image
     37BE A232     
0046 37C0 06A0  32         bl    @xfg99                ; Run FinalGROM cartridge image
     37C2 2DE0     
0047                                                   ; \ i tmp0 = Pointer to cartridge image
0048                                                   ; /
0049                       ;-------------------------------------------------------
0050                       ; Turn SAMS mapper off and exit to monitor
0051                       ;-------------------------------------------------------
0052 37C4 020C  20         li    r12,>1e00             ; SAMS CRU address
     37C6 1E00     
0053 37C8 1E01  16         sbz   1                     ; Disable SAMS mapper
0054                                                   ; \ We keep the mapper off while
0055                                                   ; | running TI Basic or other external
0056                                                   ; / programs.
0057               
0058 37CA 0420  42         blwp @0                     ; Return to monitor
     37CC 0000     
                   < rom.resident.asm
0044                       ;-----------------------------------------------------------------------
0045                       ; Background tasks
0046                       ;-----------------------------------------------------------------------
0048               
0049                       copy  "task.vdp.cursor.sat.asm"     ; Copy cursor SAT to VDP
     **** ****     > task.vdp.cursor.sat.asm
0001               * FILE......: task.vdp.cursor.sat.asm
0002               * Purpose...: Copy cursor SAT to VDP
0003               
0004               ***************************************************************
0005               * Task - Copy Sprite Attribute Table (SAT) to VDP
0006               ********|*****|*********************|**************************
0007               task.vdp.copy.sat:
0008 37CE 0649  14         dect  stack
0009 37D0 C64B  30         mov   r11,*stack            ; Save return address
0010 37D2 0649  14         dect  stack
0011 37D4 C644  30         mov   tmp0,*stack           ; Push tmp0
0012 37D6 0649  14         dect  stack
0013 37D8 C645  30         mov   tmp1,*stack           ; Push tmp1
0014 37DA 0649  14         dect  stack
0015 37DC C646  30         mov   tmp2,*stack           ; Push tmp2
0016                       ;------------------------------------------------------
0017                       ; Get pane with focus
0018                       ;------------------------------------------------------
0019 37DE C120  34         mov   @tv.pane.focus,tmp0   ; Get pane with focus
     37E0 A224     
0020               
0021 37E2 0284  22         ci    tmp0,pane.focus.fb
     37E4 0000     
0022 37E6 130F  14         jeq   task.vdp.copy.sat.fb  ; Frame buffer has focus
0023               
0024 37E8 0284  22         ci    tmp0,pane.focus.cmdb
     37EA 0001     
0025 37EC 1304  14         jeq   task.vdp.copy.sat.cmdb
0026                                                   ; CMDB buffer has focus
0027                       ;------------------------------------------------------
0028                       ; Assert failed. Invalid value
0029                       ;------------------------------------------------------
0030 37EE C80B  38         mov   r11,@>ffce            ; \ Save caller address
     37F0 FFCE     
0031 37F2 06A0  32         bl    @cpu.crash            ; / Halt system.
     37F4 2026     
0032                       ;------------------------------------------------------
0033                       ; CMDB buffer has focus, position cursor
0034                       ;------------------------------------------------------
0035               task.vdp.copy.sat.cmdb:
0036 37F6 C820  46         mov   @cmdb.cursor,@wyx     ; Position cursor in CMDB pane
     37F8 A70A     
     37FA 832A     
0037 37FC E0A0  34         soc   @wbit0,config         ; Sprite adjustment on
     37FE 2020     
0038 3800 06A0  32         bl    @yx2px                ; \ Calculate pixel position
     3802 2702     
0039                                                   ; | i  @WYX = Cursor YX
0040                                                   ; / o  tmp0 = Pixel YX
0041               
0042 3804 100C  14         jmp   task.vdp.copy.sat.write
0043                       ;------------------------------------------------------
0044                       ; Frame buffer has focus, position cursor
0045                       ;------------------------------------------------------
0046               task.vdp.copy.sat.fb:
0047 3806 E0A0  34         soc   @wbit0,config         ; Sprite adjustment on
     3808 2020     
0048 380A 06A0  32         bl    @yx2px                ; \ Calculate pixel position
     380C 2702     
0049                                                   ; | i  @WYX = Cursor YX
0050                                                   ; / o  tmp0 = Pixel YX
0051               
0052                       ;------------------------------------------------------
0053                       ; Cursor Y adjustment (topline, ruler, ...)
0054                       ;------------------------------------------------------
0055 380E C160  34         mov   @tv.ruler.visible,tmp1
     3810 A210     
0056 3812 1303  14         jeq   task.vdp.copy.sat.fb.noruler
0057 3814 0224  22         ai    tmp0,>1000            ; Adjust VDP cursor because of topline+ruler
     3816 1000     
0058 3818 1002  14         jmp   task.vdp.copy.sat.write
0059               
0060               task.vdp.copy.sat.fb.noruler:
0061 381A 0224  22         ai    tmp0,>0800            ; Adjust VDP cursor because of topline
     381C 0800     
0062                       ;------------------------------------------------------
0063                       ; Dump sprite attribute table
0064                       ;------------------------------------------------------
0065               task.vdp.copy.sat.write:
0066 381E C804  38         mov   tmp0,@ramsat          ; Set cursor YX
     3820 A056     
0067                       ;------------------------------------------------------
0068                       ; Handle column and row indicators
0069                       ;------------------------------------------------------
0070 3822 C160  34         mov   @tv.ruler.visible,tmp1
     3824 A210     
0071                                                   ; Ruler visible?
0072 3826 1314  14         jeq   task.vdp.copy.sat.hide.indicators
0073                                                   ; Not visible, skip
0074               
0075 3828 C160  34         mov   @cmdb.visible,tmp1
     382A A702     
0076 382C 0285  22         ci    tmp1,>ffff            ; CMDB pane visible?
     382E FFFF     
0077 3830 130F  14         jeq   task.vdp.copy.sat.hide.indicators
0078                                                   ; Not visible, skip
0079               
0080 3832 0244  22         andi  tmp0,>ff00            ; \ Clear X position
     3834 FF00     
0081 3836 0264  22         ori   tmp0,240              ; | Line indicator on pixel X 240
     3838 00F0     
0082 383A C804  38         mov   tmp0,@ramsat+4        ; / Set line indicator    <
     383C A05A     
0083               
0084 383E C120  34         mov   @ramsat,tmp0
     3840 A056     
0085 3842 0244  22         andi  tmp0,>00ff            ; \ Clear Y position
     3844 00FF     
0086 3846 0264  22         ori   tmp0,>0800            ; | Column indicator on pixel Y 8
     3848 0800     
0087 384A C804  38         mov   tmp0,@ramsat+8        ; / Set column indicator  v
     384C A05E     
0088               
0089 384E 1005  14         jmp   task.vdp.copy.sat.write2
0090                       ;------------------------------------------------------
0091                       ; Do not show column and row indicators
0092                       ;------------------------------------------------------
0093               task.vdp.copy.sat.hide.indicators:
0094 3850 04C5  14         clr   tmp1
0095 3852 D805  38         movb  tmp1,@ramsat+7        ; \ Hide line indicator    <
     3854 A05D     
0096                                                   ; / by transparant color
0097 3856 D805  38         movb  tmp1,@ramsat+11       ; \ Hide column indicator  v
     3858 A061     
0098                                                   ; / by transparant color
0099                       ;------------------------------------------------------
0100                       ; Dump to VDP
0101                       ;------------------------------------------------------
0102               task.vdp.copy.sat.write2:
0103 385A 06A0  32         bl    @cpym2v               ; Copy sprite SAT to VDP
     385C 24A0     
0104 385E 2180                   data sprsat,ramsat,14 ; \ i  p0 = VDP destination
     3860 A056     
     3862 000E     
0105                                                   ; | i  p1 = ROM/RAM source
0106                                                   ; / i  p2 = Number of bytes to write
0107                       ;------------------------------------------------------
0108                       ; Exit
0109                       ;------------------------------------------------------
0110               task.vdp.copy.sat.exit:
0111 3864 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0112 3866 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0113 3868 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0114 386A C2F9  30         mov   *stack+,r11           ; Pop r11
0115 386C 0460  28         b     @slotok               ; Exit task
     386E 2E9E     
                   < rom.resident.asm
0050                       copy  "task.vdp.cursor.sprite.asm"  ; Set cursor shape in VDP (blink)
     **** ****     > task.vdp.cursor.sprite.asm
0001               * FILE......: task.vdp.cursor.sprite.asm
0002               * Purpose...: VDP sprite cursor shape (sprite version)
0003               
0004               ***************************************************************
0005               * Task - Update cursor shape (blink)
0006               ********|*****|*********************|**************************
0007               task.vdp.cursor:
0008 3870 0649  14         dect  stack
0009 3872 C64B  30         mov   r11,*stack            ; Save return address
0010                       ;------------------------------------------------------
0011                       ; Set cursor shape (sprite version)
0012                       ;------------------------------------------------------
0013 3874 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     3876 2FE4     
0014 3878 600C                   data bank6.rom        ; | i  p0 = bank address
0015 387A 7F4A                   data vec.6            ; | i  p1 = Vector with target address
0016 387C 6008                   data bankid           ; / i  p2 = Source ROM bank for return
0017                       ;------------------------------------------------------
0018                       ; Exit
0019                       ;------------------------------------------------------
0020               task.vdp.cursor.exit:
0021 387E C2F9  30         mov   *stack+,r11           ; Pop r11
0022 3880 0460  28         b     @slotok               ; Exit task
     3882 2E9E     
                   < rom.resident.asm
0051               
0057               
0058                       copy  "task.oneshot.asm"            ; Run "one shot" task
     **** ****     > task.oneshot.asm
0001               * FILE......: task.oneshot.asm
0002               * Purpose...: Trigger one-shot task
0003               
0004               ***************************************************************
0005               * Task - One-shot
0006               ***************************************************************
0007               
0008               task.oneshot:
0009 3884 C120  34         mov   @tv.task.oneshot,tmp0  ; Get pointer to one-shot task
     3886 A226     
0010 3888 1301  14         jeq   task.oneshot.exit
0011               
0012 388A 0694  24         bl    *tmp0                  ; Execute one-shot task
0013                       ;------------------------------------------------------
0014                       ; Exit
0015                       ;------------------------------------------------------
0016               task.oneshot.exit:
0017 388C 0460  28         b     @slotok                ; Exit task
     388E 2E9E     
                   < rom.resident.asm
0059                       ;------------------------------------------------------
0060                       ; Program data
0061                       ;------------------------------------------------------
0062                       even
0063                       copy  "data.constants.asm"          ; Constants
     **** ****     > data.constants.asm
0001               * FILE......: data.constants.asm
0002               * Purpose...: Stevie Editor - data segment (constants)
0003               
0004               ***************************************************************
0005               *                      Constants
0006               ********|*****|*********************|**************************
0007               
0008               ***************************************************************
0009               * Sprite Attribute Table
0010               *--------------------------------------------------------------
0011               romsat:
0012                                                   ; YX, initial shape and color
0013 3890 0000             data  >0000,>0001           ; Cursor
     3892 0001     
0014 3894 0000             data  >0000,>0101           ; Current line indicator     <
     3896 0101     
0015 3898 0820             data  >0820,>0201           ; Current column indicator   v
     389A 0201     
0016               nosprite:
0017 389C D000             data  >d000                 ; End-of-Sprites list
0018               
0019               
0020               ***************************************************************
0021               * Stevie color schemes table
0022               *--------------------------------------------------------------
0023               * ;
0024               * ; Word 1
0025               * ; A  MSB  high-nibble    Foreground color text line in frame buffer
0026               * ; B  MSB  low-nibble     Background color text line in frame buffer
0027               * ; C  LSB  high-nibble    Foreground color top/bottom line
0028               * ; D  LSB  low-nibble     Background color top/bottom line
0029               * ;
0030               * ; Word 2
0031               * ; E  MSB  high-nibble    Foreground color cmdb pane
0032               * ; F  MSB  low-nibble     Background color cmdb pane
0033               * ; G  LSB  high-nibble    Cursor foreground color cmdb pane
0034               * ; H  LSB  low-nibble     Cursor foreground color frame buffer
0035               * ;
0036               * ; Word 3
0037               * ; I  MSB  high-nibble    Foreground color busy top/bottom line
0038               * ; J  MSB  low-nibble     Background color busy top/bottom line
0039               * ; K  LSB  high-nibble    Foreground color marked line in frame buffer
0040               * ; L  LSB  low-nibble     Background color marked line in frame buffer
0041               * ;
0042               * ; Word 4
0043               * ; M  MSB  high-nibble    Foreground color command buffer header line
0044               * ; N  MSB  low-nibble     Background color command buffer header line
0045               * ; O  LSB  high-nibble    Foreground color line+column indicator frame buffer
0046               * ; P  LSB  low-nibble     Foreground color ruler frame buffer
0047               *
0048               * ; Colors
0049               * ; 0  Transparant
0050               * ; 1  black
0051               * ; 2  Green
0052               * ; 3  Light Green
0053               * ; 4  Blue
0054               * ; 5  Light Blue
0055               * ; 6  Dark Red
0056               * ; 7  Cyan
0057               * ; 8  Red
0058               * ; 9  Light Red
0059               * ; A  Yellow
0060               * ; B  Light Yellow
0061               * ; C  Dark Green
0062               * ; D  Magenta
0063               * ; E  Grey
0064               * ; F  White
0065               *--------------------------------------------------------------
0066      000C     tv.colorscheme.entries  equ 12        ; Entries in table
0067               
0068               tv.colorscheme.table:
0069                       ;                             ;
0070                       ;      ABCD  EFGH  IJKL  MNOP ;
0071 389E F417             data  >f417,>f171,>1b1f,>7111 ; 1  White on blue with cyan touch
     38A0 F171     
     38A2 1B1F     
     38A4 7111     
0072 38A6 21F0             data  >21f0,>21ff,>f112,>21ff ; 2  Dark green on black (minimalistic)
     38A8 21FF     
     38AA F112     
     38AC 21FF     
0073 38AE A11A             data  >a11a,>f0ff,>1f1a,>f1ff ; 3  Dark yellow on black
     38B0 F0FF     
     38B2 1F1A     
     38B4 F1FF     
0074 38B6 1E1E             data  >1e1e,>1e11,>1ee1,>1e11 ; 4  Black on grey (minimalistic)
     38B8 1E11     
     38BA 1EE1     
     38BC 1E11     
0075 38BE 151F             data  >151f,>1511,>1f1f,>1511 ; 5  Black on light blue
     38C0 1511     
     38C2 1F1F     
     38C4 1511     
0076 38C6 1313             data  >1313,>1311,>1331,>1311 ; 6  Black on light green (minimalistic)
     38C8 1311     
     38CA 1331     
     38CC 1311     
0077 38CE 1771             data  >1771,>1011,>0171,>1711 ; 7  Black on cyan
     38D0 1011     
     38D2 0171     
     38D4 1711     
0078 38D6 2112             data  >2112,>f0ff,>1f12,>f1f6 ; 8  Dark green on black
     38D8 F0FF     
     38DA 1F12     
     38DC F1F6     
0079 38DE 1FF1             data  >1ff1,>1011,>f1f1,>1f11 ; 9  Black on white
     38E0 1011     
     38E2 F1F1     
     38E4 1F11     
0080 38E6 1AF1             data  >1af1,>a111,>1f1f,>f11f ; 10 Black on dark yellow
     38E8 A111     
     38EA 1F1F     
     38EC F11F     
0081 38EE 1919             data  >1919,>1911,>1991,>1911 ; 11 Black on light red (minimalistic)
     38F0 1911     
     38F2 1991     
     38F4 1911     
0082 38F6 FDF1             data  >fdf1,>1d11,>fddf,>1d11 ; 12 White on magenta
     38F8 1D11     
     38FA FDDF     
     38FC 1D11     
0083                       even
0084               
0085               ***************************************************************
0086               * Tab positions
0087               ********|*****|*********************|**************************
0088               tv.tabs.table.lr:
0089 38FE 0007             byte  0,7,12,25             ; \   Default tab positions as used
     3900 0C19     
0090 3902 1E2D             byte  30,45,59,79           ; |   in Editor/Assembler module.
     3904 3B4F     
0091 3906 FF00             byte  >ff,0,0,0             ; |   Up to 11 positions supported.
     3908 0000     
0092                                                   ; /   >ff means end-of-list.
0093               
0094               tv.tabs.table.rl:
0095 390A 4F3B             byte  79,59,45,30           ; \   Default tab positions as used
     390C 2D1E     
0096 390E 190C             byte  25,12,7,0             ; |   in Editor/Assembler module.
     3910 0700     
0097 3912 FF00             byte  >ff,0,0,0             ; |   Up to 11 positions supported.
     3914 0000     
0098                                                   ; /   >ff means end-of-list.
0099               
0100               ***************************************************************
0101               * Constants for numbers 0-10
0102               ********|*****|*********************|**************************
0103      2000     const.0       equ   w$0000          ; 0
0104      2002     const.1       equ   w$0001          ; 1
0105      2004     const.2       equ   w$0002          ; 2
0106 3916 0003     const.3       data  3               ; 3
0107      2006     const.4       equ   w$0004          ; 4
0108 3918 0005     const.5       data  5               ; 5
0109 391A 0006     const.6       data  6               ; 6
0110 391C 0007     const.7       data  7               ; 7
0111      2008     const.8       equ   w$0008          ; 8
0112 391E 0009     const.9       data  9               ; 9
0113 3920 000A     const.10      data  10              ; 10
0114 3922 0020     const.32      data  32              ; 32
0115 3924 0050     const.80      data  80              ; 80
0116               
0117               
0118                       even
0119 3926 0544     myfile stri 'DSK1.'
     3928 534B     
     392A 312E     
                   < rom.resident.asm
0064                       copy  "data.strings.asm"            ; Strings
     **** ****     > data.strings.asm
0001               * FILE......: data.strings.asm
0002               * Purpose...: RAM shared strings
0003               
0004               ***************************************************************
0005               *                       Strings
0006               ***************************************************************
0007 392C 012C     txt.delim          stri ','
0008                                  even
0009 392E 0520     txt.bottom         stri '  BOT'
     3930 2042     
     3932 4F54     
0010                                  even
0011 3934 044F     txt.ovrwrite       stri 'OVR '
     3936 5652     
     3938 20       
0012                                  even
0013 393A 0449     txt.insert         stri 'INS '
     393C 4E53     
     393E 20       
0014                                  even
0015 3940 0449     txt.autoinsert     stri 'INS+'
     3942 4E53     
     3944 2B       
0016                                  even
0017 3946 012A     txt.star           stri '*'
0018                                  even
0019 3948 0A4C     txt.loading        stri 'Loading...'
     394A 6F61     
     394C 6469     
     394E 6E67     
     3950 2E2E     
     3952 2E       
0020                                  even
0021 3954 0A53     txt.saving         stri 'Saving....'
     3956 6176     
     3958 696E     
     395A 672E     
     395C 2E2E     
     395E 2E       
0022                                  even
0023 3960 1250     txt.printing       stri 'Printing file.....'
     3962 7269     
     3964 6E74     
     3966 696E     
     3968 6720     
     396A 6669     
     396C 6C65     
     396E 2E2E     
     3970 2E2E     
     3972 2E       
0024                                  even
0025 3974 1244     txt.block.del      stri 'Deleting block....'
     3976 656C     
     3978 6574     
     397A 696E     
     397C 6720     
     397E 626C     
     3980 6F63     
     3982 6B2E     
     3984 2E2E     
     3986 2E       
0026                                  even
0027 3988 1143     txt.block.copy     stri 'Copying block....'
     398A 6F70     
     398C 7969     
     398E 6E67     
     3990 2062     
     3992 6C6F     
     3994 636B     
     3996 2E2E     
     3998 2E2E     
0028                                  even
0029 399A 104D     txt.block.move     stri 'Moving block....'
     399C 6F76     
     399E 696E     
     39A0 6720     
     39A2 626C     
     39A4 6F63     
     39A6 6B2E     
     39A8 2E2E     
     39AA 2E       
0030                                  even
0031 39AC 1853     txt.block.save     stri 'Saving block to file....'
     39AE 6176     
     39B0 696E     
     39B2 6720     
     39B4 626C     
     39B6 6F63     
     39B8 6B20     
     39BA 746F     
     39BC 2066     
     39BE 696C     
     39C0 652E     
     39C2 2E2E     
     39C4 2E       
0032                                  even
0033 39C6 1843     txt.block.clip     stri 'Copying to clipboard....'
     39C8 6F70     
     39CA 7969     
     39CC 6E67     
     39CE 2074     
     39D0 6F20     
     39D2 636C     
     39D4 6970     
     39D6 626F     
     39D8 6172     
     39DA 642E     
     39DC 2E2E     
     39DE 2E       
0034                                  even
0035 39E0 1250     txt.block.print    stri 'Printing block....'
     39E2 7269     
     39E4 6E74     
     39E6 696E     
     39E8 6720     
     39EA 626C     
     39EC 6F63     
     39EE 6B2E     
     39F0 2E2E     
     39F2 2E       
0036                                  even
0037 39F4 1343     txt.clearmem       stri 'Clearing memory....'
     39F6 6C65     
     39F8 6172     
     39FA 696E     
     39FC 6720     
     39FE 6D65     
     3A00 6D6F     
     3A02 7279     
     3A04 2E2E     
     3A06 2E2E     
0038                                  even
0039 3A08 1352     txt.readdir        stri 'Reading directory..'
     3A0A 6561     
     3A0C 6469     
     3A0E 6E67     
     3A10 2064     
     3A12 6972     
     3A14 6563     
     3A16 746F     
     3A18 7279     
     3A1A 2E2E     
0040                                  even
0041 3A1C 0E4C     txt.done.load      stri 'Load completed'
     3A1E 6F61     
     3A20 6420     
     3A22 636F     
     3A24 6D70     
     3A26 6C65     
     3A28 7465     
     3A2A 64       
0042                                  even
0043 3A2C 1049     txt.done.insert    stri 'Insert completed'
     3A2E 6E73     
     3A30 6572     
     3A32 7420     
     3A34 636F     
     3A36 6D70     
     3A38 6C65     
     3A3A 7465     
     3A3C 64       
0044                                  even
0045 3A3E 1041     txt.done.append    stri 'Append completed'
     3A40 7070     
     3A42 656E     
     3A44 6420     
     3A46 636F     
     3A48 6D70     
     3A4A 6C65     
     3A4C 7465     
     3A4E 64       
0046                                  even
0047 3A50 0E53     txt.done.save      stri 'Save completed'
     3A52 6176     
     3A54 6520     
     3A56 636F     
     3A58 6D70     
     3A5A 6C65     
     3A5C 7465     
     3A5E 64       
0048                                  even
0049 3A60 0E43     txt.done.copy      stri 'Copy completed'
     3A62 6F70     
     3A64 7920     
     3A66 636F     
     3A68 6D70     
     3A6A 6C65     
     3A6C 7465     
     3A6E 64       
0050                                  even
0051 3A70 0F50     txt.done.print     stri 'Print completed'
     3A72 7269     
     3A74 6E74     
     3A76 2063     
     3A78 6F6D     
     3A7A 706C     
     3A7C 6574     
     3A7E 6564     
0052                                  even
0053 3A80 1044     txt.done.delete    stri 'Delete completed'
     3A82 656C     
     3A84 6574     
     3A86 6520     
     3A88 636F     
     3A8A 6D70     
     3A8C 6C65     
     3A8E 7465     
     3A90 64       
0054                                  even
0055 3A92 0F43     txt.done.clipboard stri 'Clipboard saved'
     3A94 6C69     
     3A96 7062     
     3A98 6F61     
     3A9A 7264     
     3A9C 2073     
     3A9E 6176     
     3AA0 6564     
0056                                  even
0057 3AA2 0D43     txt.done.clipdev   stri 'Clipboard set'
     3AA4 6C69     
     3AA6 7062     
     3AA8 6F61     
     3AAA 7264     
     3AAC 2073     
     3AAE 6574     
0058                                  even
0059 3AB0 124D     txt.done.mc        stri 'Master Catalog set'
     3AB2 6173     
     3AB4 7465     
     3AB6 7220     
     3AB8 4361     
     3ABA 7461     
     3ABC 6C6F     
     3ABE 6720     
     3AC0 7365     
     3AC2 74       
0060                                  even
0061 3AC4 0E41     txt.autoins.on     stri 'Autoinsert: on'
     3AC6 7574     
     3AC8 6F69     
     3ACA 6E73     
     3ACC 6572     
     3ACE 743A     
     3AD0 206F     
     3AD2 6E       
0062                                  even
0063 3AD4 0F41     txt.autoins.off    stri 'Autoinsert: off'
     3AD6 7574     
     3AD8 6F69     
     3ADA 6E73     
     3ADC 6572     
     3ADE 743A     
     3AE0 206F     
     3AE2 6666     
0064                                  even
0065 3AE4 0B46     txt.fastmode       stri 'Fastmode IO'
     3AE6 6173     
     3AE8 746D     
     3AEA 6F64     
     3AEC 6520     
     3AEE 494F     
0066                                  even
0067 3AF0 1E44     txt.uncrunching    stri 'Detokenizing TI Basic line....'
     3AF2 6574     
     3AF4 6F6B     
     3AF6 656E     
     3AF8 697A     
     3AFA 696E     
     3AFC 6720     
     3AFE 5449     
     3B00 2042     
     3B02 6173     
     3B04 6963     
     3B06 206C     
     3B08 696E     
     3B0A 652E     
     3B0C 2E2E     
     3B0E 2E       
0068                                  even
0069 3B10 026B     txt.kb             stri 'kb'
     3B12 62       
0070                                  even
0071 3B14 054C     txt.lines          stri 'Lines'
     3B16 696E     
     3B18 6573     
0072                                  even
0073 3B1A 0A5B     txt.newfile        stri '[New file]'
     3B1C 4E65     
     3B1E 7720     
     3B20 6669     
     3B22 6C65     
     3B24 5D       
0074                                  even
0075 3B26 0D5B     txt.tib1           stri '[TI Basic #1]'
     3B28 5449     
     3B2A 2042     
     3B2C 6173     
     3B2E 6963     
     3B30 2023     
     3B32 315D     
0076                                  even
0077 3B34 0D5B     txt.tib2           stri '[TI Basic #2]'
     3B36 5449     
     3B38 2042     
     3B3A 6173     
     3B3C 6963     
     3B3E 2023     
     3B40 325D     
0078                                  even
0079 3B42 0D5B     txt.tib3           stri '[TI Basic #3]'
     3B44 5449     
     3B46 2042     
     3B48 6173     
     3B4A 6963     
     3B4C 2023     
     3B4E 335D     
0080                                  even
0081 3B50 0D5B     txt.tib4           stri '[TI Basic #4]'
     3B52 5449     
     3B54 2042     
     3B56 6173     
     3B58 6963     
     3B5A 2023     
     3B5C 345D     
0082                                  even
0083 3B5E 0D5B     txt.tib5           stri '[TI Basic #5]'
     3B60 5449     
     3B62 2042     
     3B64 6173     
     3B66 6963     
     3B68 2023     
     3B6A 355D     
0084                                  even
0085 3B6C 0444     txt.filetype.dv80  stri 'DV80'
     3B6E 5638     
     3B70 30       
0086                                  even
0087 3B72 034D     txt.m1             stri 'M1='
     3B74 313D     
0088                                  even
0089 3B76 034D     txt.m2             stri 'M2='
     3B78 323D     
0090                                  even
0091 3B7A 1E46     txt.keys.default   stri 'F9-Menu  ^H-Help  ^U-Shortcuts'
     3B7C 392D     
     3B7E 4D65     
     3B80 6E75     
     3B82 2020     
     3B84 5E48     
     3B86 2D48     
     3B88 656C     
     3B8A 7020     
     3B8C 205E     
     3B8E 552D     
     3B90 5368     
     3B92 6F72     
     3B94 7463     
     3B96 7574     
     3B98 73       
0092                                  even
0093 3B9A 2946     txt.keys.defaultb  stri 'F9-Menu  ^H-Help  ^U-Shortcuts  F0-Basic#'
     3B9C 392D     
     3B9E 4D65     
     3BA0 6E75     
     3BA2 2020     
     3BA4 5E48     
     3BA6 2D48     
     3BA8 656C     
     3BAA 7020     
     3BAC 205E     
     3BAE 552D     
     3BB0 5368     
     3BB2 6F72     
     3BB4 7463     
     3BB6 7574     
     3BB8 7320     
     3BBA 2046     
     3BBC 302D     
     3BBE 4261     
     3BC0 7369     
     3BC2 6323     
0094                                  even
0095 3BC4 3446     txt.keys.block     stri 'F9-Exit  ^Copy ^Move ^Del ^Save ^Print ^[1-3]Clipbrd'
     3BC6 392D     
     3BC8 4578     
     3BCA 6974     
     3BCC 2020     
     3BCE 5E43     
     3BD0 6F70     
     3BD2 7920     
     3BD4 5E4D     
     3BD6 6F76     
     3BD8 6520     
     3BDA 5E44     
     3BDC 656C     
     3BDE 205E     
     3BE0 5361     
     3BE2 7665     
     3BE4 205E     
     3BE6 5072     
     3BE8 696E     
     3BEA 7420     
     3BEC 5E5B     
     3BEE 312D     
     3BF0 335D     
     3BF2 436C     
     3BF4 6970     
     3BF6 6272     
     3BF8 64       
0096                                  even
0097 3BFA 2C46     txt.keys.basic1    stri 'F9-Back  F5-AutoUnpack  SPACE-Unpack program'
     3BFC 392D     
     3BFE 4261     
     3C00 636B     
     3C02 2020     
     3C04 4635     
     3C06 2D41     
     3C08 7574     
     3C0A 6F55     
     3C0C 6E70     
     3C0E 6163     
     3C10 6B20     
     3C12 2053     
     3C14 5041     
     3C16 4345     
     3C18 2D55     
     3C1A 6E70     
     3C1C 6163     
     3C1E 6B20     
     3C20 7072     
     3C22 6F67     
     3C24 7261     
     3C26 6D       
0098                                  even
0099 3C28 020E     txt.alpha.down     data >020e,>0f00
     3C2A 0F00     
0100 3C2C 0110     txt.vertline       data >0110
0101 3C2E 011C     txt.keymarker      byte 1,28
0102                                  even
0103 3C30 0120     txt.ws1            stri ' '
0104                                  even
0105 3C32 0220     txt.ws2            stri '  '
     3C34 20       
0106                                  even
0107 3C36 0420     txt.ws4            stri '    '
     3C38 2020     
     3C3A 20       
0108                                  even
0109      3C36     txt.filetype.none  equ txt.ws4
0110               
0111 3C3C 3550     txt.msg.mastcat    stri 'Put cursor on file in list and press ^O to load file.'
     3C3E 7574     
     3C40 2063     
     3C42 7572     
     3C44 736F     
     3C46 7220     
     3C48 6F6E     
     3C4A 2066     
     3C4C 696C     
     3C4E 6520     
     3C50 696E     
     3C52 206C     
     3C54 6973     
     3C56 7420     
     3C58 616E     
     3C5A 6420     
     3C5C 7072     
     3C5E 6573     
     3C60 7320     
     3C62 5E4F     
     3C64 2074     
     3C66 6F20     
     3C68 6C6F     
     3C6A 6164     
     3C6C 2066     
     3C6E 696C     
     3C70 652E     
0112                                  even
0113               
0114 3C72 1D54     txt.msg.tibasic    stri 'TI Basic program mode active.'
     3C74 4920     
     3C76 4261     
     3C78 7369     
     3C7A 6320     
     3C7C 7072     
     3C7E 6F67     
     3C80 7261     
     3C82 6D20     
     3C84 6D6F     
     3C86 6465     
     3C88 2061     
     3C8A 6374     
     3C8C 6976     
     3C8E 652E     
0115                                  even
0116               
0117               ;--------------------------------------------------------------
0118               ; Strings for error line pane
0119               ;--------------------------------------------------------------
0120 3C90 1546     txt.ioerr.load     stri 'Failed loading file: '
     3C92 6169     
     3C94 6C65     
     3C96 6420     
     3C98 6C6F     
     3C9A 6164     
     3C9C 696E     
     3C9E 6720     
     3CA0 6669     
     3CA2 6C65     
     3CA4 3A20     
0121                                  even
0122 3CA6 1446     txt.ioerr.save     stri 'Failed saving file: '
     3CA8 6169     
     3CAA 6C65     
     3CAC 6420     
     3CAE 7361     
     3CB0 7669     
     3CB2 6E67     
     3CB4 2066     
     3CB6 696C     
     3CB8 653A     
     3CBA 20       
0123                                  even
0124 3CBC 1B46     txt.ioerr.print    stri 'Failed printing to device: '
     3CBE 6169     
     3CC0 6C65     
     3CC2 6420     
     3CC4 7072     
     3CC6 696E     
     3CC8 7469     
     3CCA 6E67     
     3CCC 2074     
     3CCE 6F20     
     3CD0 6465     
     3CD2 7669     
     3CD4 6365     
     3CD6 3A20     
0125                                  even
0126 3CD8 164E     txt.io.nofile      stri 'No filename specified.'
     3CDA 6F20     
     3CDC 6669     
     3CDE 6C65     
     3CE0 6E61     
     3CE2 6D65     
     3CE4 2073     
     3CE6 7065     
     3CE8 6369     
     3CEA 6669     
     3CEC 6564     
     3CEE 2E       
0127                                  even
0128 3CF0 2D49     txt.memfull.load   stri 'Index full. File too large for editor buffer.'
     3CF2 6E64     
     3CF4 6578     
     3CF6 2066     
     3CF8 756C     
     3CFA 6C2E     
     3CFC 2046     
     3CFE 696C     
     3D00 6520     
     3D02 746F     
     3D04 6F20     
     3D06 6C61     
     3D08 7267     
     3D0A 6520     
     3D0C 666F     
     3D0E 7220     
     3D10 6564     
     3D12 6974     
     3D14 6F72     
     3D16 2062     
     3D18 7566     
     3D1A 6665     
     3D1C 722E     
0129                                  even
0130 3D1E 2D43     txt.block.inside   stri 'Copy/Move target must be outside M1-M2 range.'
     3D20 6F70     
     3D22 792F     
     3D24 4D6F     
     3D26 7665     
     3D28 2074     
     3D2A 6172     
     3D2C 6765     
     3D2E 7420     
     3D30 6D75     
     3D32 7374     
     3D34 2062     
     3D36 6520     
     3D38 6F75     
     3D3A 7473     
     3D3C 6964     
     3D3E 6520     
     3D40 4D31     
     3D42 2D4D     
     3D44 3220     
     3D46 7261     
     3D48 6E67     
     3D4A 652E     
0131                                  even
0132               
0133               ;--------------------------------------------------------------
0134               ; Strings for command buffer
0135               ;--------------------------------------------------------------
0136 3D4C 013E     txt.cmdb.prompt    stri '>'
0137                                  even
0138 3D4E 0D43     txt.colorscheme    stri 'Color scheme:'
     3D50 6F6C     
     3D52 6F72     
     3D54 2073     
     3D56 6368     
     3D58 656D     
     3D5A 653A     
0139                                  even
                   < rom.resident.asm
0065                       copy  "data.defaults.asm"           ; Default values (devices, ...)
     **** ****     > data.defaults.asm
0001               * FILE......: data.defaults.asm
0002               * Purpose...: Default values for Stevie
0003               
0004               ***************************************************************
0005               *                     Default values
0006               ********|*****|*********************|**************************
0007 3D5C 0650     def.printer.fname   stri 'PI.PIO'
     3D5E 492E     
     3D60 5049     
     3D62 4F       
0008 3D63   09     def.clip.fname.a    stri 'DSK1.CLIP'
     3D64 4453     
     3D66 4B31     
     3D68 2E43     
     3D6A 4C49     
     3D6C 50       
0009 3D6D   09     def.clip.fname.b    stri 'DSK6.CLIP'
     3D6E 4453     
     3D70 4B36     
     3D72 2E43     
     3D74 4C49     
     3D76 50       
0010 3D77   09     def.clip.fname.c    stri 'TIPI.CLIP'
     3D78 5449     
     3D7A 5049     
     3D7C 2E43     
     3D7E 4C49     
     3D80 50       
0011 3D81   0C     def.mc.fname.a      stri 'DSK1.MASTCAT'
     3D82 4453     
     3D84 4B31     
     3D86 2E4D     
     3D88 4153     
     3D8A 5443     
     3D8C 4154     
0012 3D8E 0C44     def.mc.fname.b      stri 'DSK6.MASTCAT'
     3D90 534B     
     3D92 362E     
     3D94 4D41     
     3D96 5354     
     3D98 4341     
     3D9A 54       
0013 3D9B   0C     def.mc.fname.c      stri 'TIPI.MASTCAT'
     3D9C 5449     
     3D9E 5049     
     3DA0 2E4D     
     3DA2 4153     
     3DA4 5443     
     3DA6 4154     
0014 3DA8 2F2C     def.devices         stri ',DSK,HDX,IDE,PI.,PIO,TIPI.,RD,SCS,SDD,WDS,RS232'
     3DAA 4453     
     3DAC 4B2C     
     3DAE 4844     
     3DB0 582C     
     3DB2 4944     
     3DB4 452C     
     3DB6 5049     
     3DB8 2E2C     
     3DBA 5049     
     3DBC 4F2C     
     3DBE 5449     
     3DC0 5049     
     3DC2 2E2C     
     3DC4 5244     
     3DC6 2C53     
     3DC8 4353     
     3DCA 2C53     
     3DCC 4444     
     3DCE 2C57     
     3DD0 4453     
     3DD2 2C52     
     3DD4 5332     
     3DD6 3332     
                   < rom.resident.asm
0066                       copy  "data.fg99.carts.asm"         ; Cartridge images
     **** ****     > data.fg99.carts.asm
0001               * FILE......: data.fg99.carts.asm
0002               * Purpose...: FinalGROM cartridge images
0003               
0004               ***************************************************************
0005               *                   Cartridge images
0006               ***************************************************************
0007                      even
0008               *--------------------------------------------------------------
0009               * Cartridge 'Force Command'
0010               *--------------------------------------------------------------
0011               fg99.cart.fcmd:
0012 3DD8 99              byte   >99                   ; \
0013 3DD9   4F            text   'OKFG99'              ; | Send this to reload
     3DDA 4B46     
     3DDC 4739     
     3DDE 39       
0014 3DDF   99            byte   >99                   ; /
0015 3DE0 4643            text   "FCMDG"               ; \ File to load (8 chars, pad with >00)
     3DE2 4D44     
     3DE4 47       
0016 3DE5   00            byte   >00, >00, >00         ; /
     3DE6 0000     
0017 3DE8 0000            data   >0000                 ; >0000 for GROM/mixed, >FFFF for ROM only
0018 3DEA 0000            data   >0000                 ; Start address
0019                      even
0020               
0021               *--------------------------------------------------------------
0022               * Cartridge 'Extended Basic GEM'
0023               *--------------------------------------------------------------
0024               fg99.cart.xbgem:
0025 3DEC 99              byte   >99                   ; \
0026 3DED   4F            text   'OKFG99'              ; | Send this to reload
     3DEE 4B46     
     3DF0 4739     
     3DF2 39       
0027 3DF3   99            byte   >99                   ; /
0028 3DF4 5842            text   "XB29GEMG"            ; \ File to load (8 chars, pad with >00)
     3DF6 3239     
     3DF8 4745     
     3DFA 4D47     
0029                      ;                            ; /
0030 3DFC 0000            data   >0000                 ; >0000 for GROM/mixed, >FFFF for ROM only
0031 3DFE 0000            data   >0000                 ; Start address
0032                      even
0033               
0034               *--------------------------------------------------------------
0035               * Cartridge 'Rich Extended Basic'
0036               *--------------------------------------------------------------
0037               fg99.cart.rxb:
0038 3E00 99              byte   >99                   ; \
0039 3E01   4F            text   'OKFG99'              ; | Send this to reload
     3E02 4B46     
     3E04 4739     
     3E06 39       
0040 3E07   99            byte   >99                   ; /
0041 3E08 5258            text   "RXBG"                ; \ File to load (8 chars, pad with >00)
     3E0A 4247     
0042 3E0C 0000            byte   >00, >00, >00, >00    ; /
     3E0E 0000     
0043 3E10 0000            data   >0000                 ; >0000 for GROM/mixed, >FFFF for ROM only
0044 3E12 0000            data   >0000                 ; Start address
0045                      even
0046               
0047               *--------------------------------------------------------------
0048               * Cartridge 'fbForth'
0049               *--------------------------------------------------------------
0050               fg99.cart.fbforth:
0051 3E14 99              byte   >99                   ; \
0052 3E15   4F            text   'OKFG99'              ; | Send this to reload
     3E16 4B46     
     3E18 4739     
     3E1A 39       
0053 3E1B   99            byte   >99                   ; /
0054 3E1C 4642            text   "FBFORTHC"            ; \ File to load (8 chars, pad with >00)
     3E1E 464F     
     3E20 5254     
     3E22 4843     
0055                      ;                            ; /
0056 3E24 0000            data   >0000                 ; >0000 for GROM/mixed, >FFFF for ROM only
0057 3E26 0000            data   >0000                 ; Start address
0058                      even
                   < rom.resident.asm
                   < stevie_b4.asm
0052                       ;------------------------------------------------------
0053                       ; Activate bank 1 and branch to  >6036
0054                       ;------------------------------------------------------
0055 3E28 04E0  34         clr   @bank1.rom            ; Activate bank 1 "James" ROM
     3E2A 6002     
0056               
0060               
0061 3E2C 0460  28         b     @kickstart.code2      ; Jump to entry routine
     3E2E 6046     
0062               ***************************************************************
0063               * Step 3: Include main editor modules
0064               ********|*****|*********************|**************************
0065               main:
0066                       aorg  kickstart.code2       ; >6046
0067 6046 06A0  32         bl    @cpu.crash            ; Should never get here
     6048 2026     
0068                       ;-----------------------------------------------------------------------
0069                       ; Logic for Framebuffer
0070                       ;-----------------------------------------------------------------------
0071                       copy  "fb.cursor.top.asm"   ; Cursor top of file
     **** ****     > fb.cursor.top.asm
0001               * FILE......: fb.cursor.top.asm
0002               * Purpose...: Move cursor to top of file
0003               
0004               
0005               ***************************************************************
0006               * fb.cursor.top
0007               * Move cursor to top of file
0008               ***************************************************************
0009               * bl @fb.cursor.top
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * none
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * none
0019               ********|*****|*********************|**************************
0020               fb.cursor.top:
0021 604A 0649  14         dect  stack
0022 604C C64B  30         mov   r11,*stack            ; Save return address
0023                       ;------------------------------------------------------
0024                       ; Cursor top
0025                       ;------------------------------------------------------
0026 604E 8820  50         c     @fb.row.dirty,@w$ffff
     6050 A30A     
     6052 2022     
0027 6054 1604  14         jne   fb.cursor.top.refresh
0028               
0029 6056 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     6058 7324     
0030                                                   ; \ i   @fb.top      = Address top row in FB
0031                                                   ; | i   @fb.row      = Current row in FB
0032                                                   ; | i   @fb.column   = Current column in FB
0033                                                   ; / i   @fb.colsline = Cols per line in FB
0034               
0035 605A 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     605C A30A     
0036                       ;-------------------------------------------------------
0037                       ; Refresh page
0038                       ;-------------------------------------------------------
0039               fb.cursor.top.refresh:
0040 605E 04E0  34         clr   @parm1                ; Set to 1st line in editor buffer
     6060 A006     
0041 6062 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     6064 A312     
0042               
0043 6066 04E0  34         clr   @parm2                ; No row offset in frame buffer
     6068 A008     
0044               
0045 606A 06A0  32         bl    @fb.goto.toprow       ; \ Position cursor and exit
     606C 6514     
0046                                                   ; | i  @parm1 = Top line in editor buffer
0047                                                   ; / i  @parm2 = Row offset in frame buffer
0048                       ;-------------------------------------------------------
0049                       ; Exit
0050                       ;-------------------------------------------------------
0051               fb.cursor.top.exit:
0052 606E C2F9  30         mov   *stack+,r11           ; Pop r11
0053 6070 045B  20         b     *r11                  ; Return
                   < stevie_b4.asm
0072                       copy  "fb.cursor.topscr.asm"; Cursor top of screen
     **** ****     > fb.cursor.topscr.asm
0001               * FILE......: fb.cursor.top.asm
0002               * Purpose...: Move cursor to top of screen in editor buffer
0003               
0004               
0005               ***************************************************************
0006               * fb.cursor.topscr
0007               * Move cursor to top of screen in frame buffer
0008               ***************************************************************
0009               * bl @fb.cursor.topscr
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * none
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * none
0019               ********|*****|*********************|**************************
0020               fb.cursor.topscr:
0021 6072 0649  14         dect  stack
0022 6074 C64B  30         mov   r11,*stack            ; Save return address
0023                       ;-------------------------------------------------------
0024                       ; Crunch current row if dirty
0025                       ;-------------------------------------------------------
0026 6076 8820  50         c     @fb.row.dirty,@w$ffff
     6078 A30A     
     607A 2022     
0027 607C 1604  14         jne   fb.cursor.topscr.refresh
0028               
0029 607E 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     6080 7324     
0030                                                   ; \ i   @fb.top      = Address top row in FB
0031                                                   ; | i   @fb.row      = Current row in FB
0032                                                   ; | i   @fb.column   = Current column in FB
0033                                                   ; / i   @fb.colsline = Cols per line in FB
0034               
0035 6082 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     6084 A30A     
0036                       ;-------------------------------------------------------
0037                       ; Refresh screen
0038                       ;-------------------------------------------------------
0039               fb.cursor.topscr.refresh:
0040 6086 C820  54         mov   @fb.topline,@parm1    ; Set to top line in frame buffer
     6088 A304     
     608A A006     
0041 608C 04E0  34         clr   @parm2                ; No row offset in frame buffer
     608E A008     
0042               
0043 6090 06A0  32         bl    @fb.goto.toprow       ; \ Position cursor and exit
     6092 6514     
0044                                                   ; | i  @parm1 = Top line in editor buffer
0045                                                   ; / i  @parm2 = Row offset in frame buffer
0046                       ;-------------------------------------------------------
0047                       ; Exit
0048                       ;-------------------------------------------------------
0049               fb.cursor.topscr.exit:
0050 6094 C2F9  30         mov   *stack+,r11           ; Pop r11
0051 6096 045B  20         b     *r11                  ; Return
                   < stevie_b4.asm
0073                       copy  "fb.cursor.bot.asm"   ; Cursor bottom of file
     **** ****     > fb.cursor.bot.asm
0001               * FILE......: fb.cursor.bot.asm
0002               * Purpose...: Move cursor to bottom of file
0003               
0004               
0005               ***************************************************************
0006               * fb.cursor.bot
0007               * Move cursor to bottom of file
0008               ***************************************************************
0009               * bl @fb.cursor.bot
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * none
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * none
0019               ********|*****|*********************|**************************
0020               fb.cursor.bot:
0021 6098 0649  14         dect  stack
0022 609A C64B  30         mov   r11,*stack            ; Save return address
0023                       ;-------------------------------------------------------
0024                       ; Crunch current row if dirty
0025                       ;-------------------------------------------------------
0026 609C 8820  50         c     @fb.row.dirty,@w$ffff
     609E A30A     
     60A0 2022     
0027 60A2 1604  14         jne   fb.cursor.bot.refresh
0028               
0029 60A4 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     60A6 7324     
0030                                                   ; \ i   @fb.top      = Address top row in FB
0031                                                   ; | i   @fb.row      = Current row in FB
0032                                                   ; | i   @fb.column   = Current column in FB
0033                                                   ; / i   @fb.colsline = Cols per line in FB
0034               
0035 60A8 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     60AA A30A     
0036                       ;-------------------------------------------------------
0037                       ; Refresh page
0038                       ;-------------------------------------------------------
0039               fb.cursor.bot.refresh:
0040 60AC 8820  50         c     @edb.lines,@fb.scrrows
     60AE A504     
     60B0 A31C     
0041 60B2 120E  14         jle   fb.cursor.bot.exit    ; Skip if whole editor buffer on screen
0042               
0043 60B4 C120  34         mov   @edb.lines,tmp0
     60B6 A504     
0044 60B8 6120  34         s     @fb.scrrows,tmp0
     60BA A31C     
0045 60BC C804  38         mov   tmp0,@parm1           ; Set to last page in editor buffer
     60BE A006     
0046 60C0 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     60C2 A312     
0047               
0048 60C4 04E0  34         clr   @parm2                ; No row offset in frame buffer
     60C6 A008     
0049               
0050 60C8 06A0  32         bl    @fb.goto.toprow       ; \ Position cursor and exit
     60CA 6514     
0051                                                   ; | i  @parm1 = Top line in editor buffer
0052                                                   ; / i  @parm2 = Row offset in frame buffer
0053               
0054 60CC 06A0  32         bl    @fb.cursor.botscr     ; Position cursor at bottom of screen
     60CE 60D4     
0055                       ;-------------------------------------------------------
0056                       ; Exit
0057                       ;-------------------------------------------------------
0058               fb.cursor.bot.exit:
0059 60D0 C2F9  30         mov   *stack+,r11           ; Pop r11
0060 60D2 045B  20         b     *r11                  ; Return
                   < stevie_b4.asm
0074                       copy  "fb.cursor.botscr.asm"; Cursor bottom of screen
     **** ****     > fb.cursor.botscr.asm
0001               * FILE......: fb.cursor.botscr.asm
0002               * Purpose...: Move cursor to bottom of screen
0003               
0004               
0005               ***************************************************************
0006               * fb.cursor.botscr
0007               * Move cursor to bottom of screen
0008               ***************************************************************
0009               * bl @fb.cursor.botscr
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * none
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * none
0019               ********|*****|*********************|**************************
0020               fb.cursor.botscr:
0021 60D4 0649  14         dect  stack
0022 60D6 C64B  30         mov   r11,*stack            ; Save return address
0023 60D8 0649  14         dect  stack
0024 60DA C644  30         mov   tmp0,*stack           ; Push tmp0
0025                       ;-------------------------------------------------------
0026                       ; Crunch current row if dirty
0027                       ;-------------------------------------------------------
0028 60DC 8820  50         c     @fb.row.dirty,@w$ffff
     60DE A30A     
     60E0 2022     
0029 60E2 1604  14         jne   fb.cursor.botscr.cursor
0030               
0031 60E4 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     60E6 7324     
0032                                                   ; \ i   @fb.top      = Address top row in FB
0033                                                   ; | i   @fb.row      = Current row in FB
0034                                                   ; | i   @fb.column   = Current column in FB
0035                                                   ; / i   @fb.colsline = Cols per line in FB
0036               
0037 60E8 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     60EA A30A     
0038                       ;-------------------------------------------------------
0039                       ; Position cursor
0040                       ;-------------------------------------------------------
0041               fb.cursor.botscr.cursor:
0042 60EC 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     60EE A31A     
0043 60F0 8820  50         c     @fb.scrrows,@edb.lines
     60F2 A31C     
     60F4 A504     
0044 60F6 1503  14         jgt   fb.cursor.botscr.eof
0045 60F8 C120  34         mov   @fb.scrrows,tmp0      ; Get bottom row
     60FA A31C     
0046 60FC 1002  14         jmp   !
0047                       ;-------------------------------------------------------
0048                       ; Cursor at EOF
0049                       ;-------------------------------------------------------
0050               fb.cursor.botscr.eof:
0051 60FE C120  34         mov   @edb.lines,tmp0       ; Get last line in file
     6100 A504     
0052                       ;-------------------------------------------------------
0053                       ; Position cursor
0054                       ;-------------------------------------------------------
0055 6102 0604  14 !       dec   tmp0                  ; Base 0
0056 6104 C804  38         mov   tmp0,@fb.row          ; Frame buffer bottom line
     6106 A306     
0057 6108 04E0  34         clr   @fb.column            ; Frame buffer column 0
     610A A30C     
0058               
0059 610C C120  34         mov   @fb.row,tmp0          ;
     610E A306     
0060 6110 0A84  32         sla   tmp0,8                ; Position cursor
0061 6112 C804  30         mov   tmp0,@wyx             ;
     6114 832A     
0062               
0063 6116 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     6118 3108     
0064                                                   ; \ i   @fb.top      = Address top row in FB
0065                                                   ; | i   @fb.topline  = Top line in FB
0066                                                   ; | i   @fb.row      = Current row in FB
0067                                                   ; |                  (offset 0..@fb.scrrows)
0068                                                   ; | i   @fb.column   = Current column in FB
0069                                                   ; | i   @fb.colsline = Columns per line FB
0070                                                   ; |
0071                                                   ; / o   @fb.current  = Updated pointer
0072               
0073 611A 06A0  32         bl    @edb.line.getlength2  ; \ Get length current line
     611C 3718     
0074                                                   ; | i  @fb.row        = Row in frame buffer
0075                                                   ; / o  @fb.row.length = Length of row
0076                       ;-------------------------------------------------------
0077                       ; Exit
0078                       ;-------------------------------------------------------
0079               fb.cursor.botscr.exit:
0080 611E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0081 6120 C2F9  30         mov   *stack+,r11           ; Pop r11
0082 6122 045B  20         b     *r11                  ; Return
                   < stevie_b4.asm
0075                       copy  "fb.cursor.up.asm"    ; Cursor up
     **** ****     > fb.cursor.up.asm
0001               * FILE......: fb.cursor.up.asm
0002               * Purpose...: Move the cursor up 1 line
0003               
0004               
0005               ***************************************************************
0006               * fb.cursor.up
0007               * Move cursor up 1 line
0008               ***************************************************************
0009               * bl @fb.cursor.up
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * none
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * none
0019               ********|*****|*********************|**************************
0020               fb.cursor.up
0021 6124 0649  14         dect  stack
0022 6126 C64B  30         mov   r11,*stack            ; Save return address
0023                       ;-------------------------------------------------------
0024                       ; Crunch current line if dirty
0025                       ;-------------------------------------------------------
0026 6128 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     612A A31A     
0027 612C 8820  50         c     @fb.row.dirty,@w$ffff
     612E A30A     
     6130 2022     
0028 6132 1604  14         jne   fb.cursor.up.cursor
0029               
0030 6134 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     6136 7324     
0031                                                   ; \ i   @fb.top      = Address top row in FB
0032                                                   ; | i   @fb.row      = Current row in FB
0033                                                   ; | i   @fb.column   = Current column in FB
0034                                                   ; / i   @fb.colsline = Cols per line in FB
0035               
0036 6138 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     613A A30A     
0037                       ;-------------------------------------------------------
0038                       ; Move cursor
0039                       ;-------------------------------------------------------
0040               fb.cursor.up.cursor:
0041 613C C120  34         mov   @fb.row,tmp0
     613E A306     
0042 6140 150B  14         jgt   fb.cursor.up.cursor_up
0043                                                   ; Move cursor up if fb.row > 0
0044 6142 C120  34         mov   @fb.topline,tmp0      ; Do we need to scroll?
     6144 A304     
0045 6146 130C  14         jeq   fb.cursor.up.set_cursorx
0046                                                   ; At top, only position cursor X
0047                       ;-------------------------------------------------------
0048                       ; Scroll 1 line
0049                       ;-------------------------------------------------------
0050 6148 0604  14         dec   tmp0                  ; fb.topline--
0051 614A C804  38         mov   tmp0,@parm1           ; Scroll one line up
     614C A006     
0052               
0053 614E 06A0  32         bl    @fb.refresh           ; \ Refresh frame buffer
     6150 6818     
0054                                                   ; | i  @parm1 = Line to start with
0055                                                   ; /             (becomes @fb.topline)
0056               
0057 6152 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     6154 A312     
0058 6156 1004  14         jmp   fb.cursor.up.set_cursorx
0059                       ;-------------------------------------------------------
0060                       ; Move cursor up
0061                       ;-------------------------------------------------------
0062               fb.cursor.up.cursor_up:
0063 6158 0620  34         dec   @fb.row               ; Row-- in screen buffer
     615A A306     
0064 615C 06A0  32         bl    @up                   ; Row-- VDP cursor
     615E 26EE     
0065                       ;-------------------------------------------------------
0066                       ; Check line length and position cursor
0067                       ;-------------------------------------------------------
0068               fb.cursor.up.set_cursorx:
0069 6160 06A0  32         bl    @edb.line.getlength2  ; \ Get length current line
     6162 3718     
0070                                                   ; | i  @fb.row        = Row in frame buffer
0071                                                   ; / o  @fb.row.length = Length of row
0072               
0073 6164 8820  50         c     @fb.column,@fb.row.length
     6166 A30C     
     6168 A308     
0074 616A 1207  14         jle   fb.cursor.up.exit
0075                       ;-------------------------------------------------------
0076                       ; Adjust cursor column position
0077                       ;-------------------------------------------------------
0078 616C C820  54         mov   @fb.row.length,@fb.column
     616E A308     
     6170 A30C     
0079 6172 C120  34         mov   @fb.column,tmp0
     6174 A30C     
0080 6176 06A0  32         bl    @xsetx                ; Set VDP cursor X
     6178 26F8     
0081                       ;-------------------------------------------------------
0082                       ; Exit
0083                       ;-------------------------------------------------------
0084               fb.cursor.up.exit:
0085 617A 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     617C 3108     
0086                                                   ; \ i   @fb.top      = Address top row in FB
0087                                                   ; | i   @fb.topline  = Top line in FB
0088                                                   ; | i   @fb.row      = Current row in FB
0089                                                   ; |                  (offset 0..@fb.scrrows)
0090                                                   ; | i   @fb.column   = Current column in FB
0091                                                   ; | i   @fb.colsline = Columns per line FB
0092                                                   ; |
0093                                                   ; / o   @fb.current  = Updated pointer
0094               
0095 617E C2F9  30         mov   *stack+,r11           ; Pop r11
0096 6180 045B  20         b     *r11                  ; Return
                   < stevie_b4.asm
0076                       copy  "fb.cursor.down.asm"  ; Cursor down
     **** ****     > fb.cursor.down.asm
0001               * FILE......: fb.cursor.down.asm
0002               * Purpose...: Move the cursor down 1 line
0003               
0004               
0005               ***************************************************************
0006               * fb.cursor.down
0007               * Logic for moving cursor down 1 line
0008               ***************************************************************
0009               * bl @fb.cursor.down
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * none
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * none
0019               ********|*****|*********************|**************************
0020               fb.cursor.down:
0021 6182 0649  14         dect  stack
0022 6184 C64B  30         mov   r11,*stack            ; Save return address
0023                       ;------------------------------------------------------
0024                       ; Last line?
0025                       ;------------------------------------------------------
0026 6186 8820  50         c     @fb.row,@edb.lines    ; Last line in editor buffer ?
     6188 A306     
     618A A504     
0027 618C 1332  14         jeq   fb.cursor.down.exit
0028                                                   ; Yes, skip further processing
0029 618E 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     6190 A31A     
0030                       ;-------------------------------------------------------
0031                       ; Crunch current row if dirty
0032                       ;-------------------------------------------------------
0033 6192 8820  50         c     @fb.row.dirty,@w$ffff
     6194 A30A     
     6196 2022     
0034 6198 1604  14         jne   fb.cursor.down.move
0035               
0036 619A 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     619C 7324     
0037                                                   ; \ i   @fb.top      = Address top row in FB
0038                                                   ; | i   @fb.row      = Current row in FB
0039                                                   ; | i   @fb.column   = Current column in FB
0040                                                   ; / i   @fb.colsline = Cols per line in FB
0041               
0042 619E 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     61A0 A30A     
0043                       ;-------------------------------------------------------
0044                       ; Move cursor
0045                       ;-------------------------------------------------------
0046               fb.cursor.down.move:
0047                       ;-------------------------------------------------------
0048                       ; EOF reached?
0049                       ;-------------------------------------------------------
0050 61A2 C120  34         mov   @fb.topline,tmp0
     61A4 A304     
0051 61A6 A120  34         a     @fb.row,tmp0
     61A8 A306     
0052 61AA 8120  34         c     @edb.lines,tmp0       ; fb.topline + fb.row = edb.lines ?
     61AC A504     
0053 61AE 1314  14         jeq   fb.cursor.down.set_cursorx
0054                                                   ; Yes, only position cursor X
0055                       ;-------------------------------------------------------
0056                       ; Check if scrolling required
0057                       ;-------------------------------------------------------
0058 61B0 C120  34         mov   @fb.scrrows,tmp0
     61B2 A31C     
0059 61B4 0604  14         dec   tmp0
0060 61B6 8120  34         c     @fb.row,tmp0
     61B8 A306     
0061 61BA 110A  14         jlt   fb.cursor.down.cursor
0062                       ;-------------------------------------------------------
0063                       ; Scroll 1 line
0064                       ;-------------------------------------------------------
0065 61BC C820  54         mov   @fb.topline,@parm1
     61BE A304     
     61C0 A006     
0066 61C2 05A0  34         inc   @parm1
     61C4 A006     
0067               
0068 61C6 06A0  32         bl    @fb.refresh           ; \ Refresh frame buffer
     61C8 6818     
0069                                                   ; | i  @parm1 = Line to start with
0070                                                   ; /             (becomes @fb.topline)
0071               
0072 61CA 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     61CC A312     
0073 61CE 1004  14         jmp   fb.cursor.down.set_cursorx
0074                       ;-------------------------------------------------------
0075                       ; Move cursor down a row, there are still rows left
0076                       ;-------------------------------------------------------
0077               fb.cursor.down.cursor:
0078 61D0 05A0  34         inc   @fb.row               ; Row++ in screen buffer
     61D2 A306     
0079 61D4 06A0  32         bl    @down                 ; Row++ VDP cursor
     61D6 26E6     
0080                       ;-------------------------------------------------------
0081                       ; Check line length and position cursor
0082                       ;-------------------------------------------------------
0083               fb.cursor.down.set_cursorx:
0084 61D8 06A0  32         bl    @edb.line.getlength2  ; \ Get length current line
     61DA 3718     
0085                                                   ; | i  @fb.row        = Row in frame buffer
0086                                                   ; / o  @fb.row.length = Length of row
0087               
0088 61DC 8820  50         c     @fb.column,@fb.row.length
     61DE A30C     
     61E0 A308     
0089 61E2 1207  14         jle   fb.cursor.down.exit
0090                                                   ; Exit
0091                       ;-------------------------------------------------------
0092                       ; Adjust cursor column position
0093                       ;-------------------------------------------------------
0094 61E4 C820  54         mov   @fb.row.length,@fb.column
     61E6 A308     
     61E8 A30C     
0095 61EA C120  34         mov   @fb.column,tmp0
     61EC A30C     
0096 61EE 06A0  32         bl    @xsetx                ; Set VDP cursor X
     61F0 26F8     
0097                       ;-------------------------------------------------------
0098                       ; Exit
0099                       ;-------------------------------------------------------
0100               fb.cursor.down.exit:
0101 61F2 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     61F4 3108     
0102                                                   ; \ i   @fb.top      = Address top row in FB
0103                                                   ; | i   @fb.topline  = Top line in FB
0104                                                   ; | i   @fb.row      = Current row in FB
0105                                                   ; |                  (offset 0..@fb.scrrows)
0106                                                   ; | i   @fb.column   = Current column in FB
0107                                                   ; | i   @fb.colsline = Columns per line FB
0108                                                   ; |
0109                                                   ; / o   @fb.current  = Updated pointer
0110               
0111 61F6 C2F9  30         mov   *stack+,r11           ; Pop r11
0112 61F8 045B  20         b     *r11                  ; Return
                   < stevie_b4.asm
0077                       copy  "fb.cursor.home.asm"  ; Cursor home
     **** ****     > fb.cursor.home.asm
0001               * FILE......: fb.cursor.home.asm
0002               * Purpose...: Move cursor home
0003               
0004               
0005               ***************************************************************
0006               * fb.cursor.home
0007               * Move cursor home
0008               ***************************************************************
0009               * bl @fb.cursor.home
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * none
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0
0019               ********|*****|*********************|**************************
0020               fb.cursor.home:
0021 61FA 0649  14         dect  stack
0022 61FC C64B  30         mov   r11,*stack            ; Save return address
0023 61FE 0649  14         dect  stack
0024 6200 C644  30         mov   tmp0,*stack           ; Push tmp0
0025                       ;------------------------------------------------------
0026                       ; Cursor home
0027                       ;------------------------------------------------------
0028 6202 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     6204 A31A     
0029 6206 C120  30         mov   @wyx,tmp0
     6208 832A     
0030 620A 0244  22         andi  tmp0,>ff00            ; Reset cursor X position to 0
     620C FF00     
0031 620E C804  30         mov   tmp0,@wyx             ; VDP cursor column=0
     6210 832A     
0032 6212 04E0  34         clr   @fb.column
     6214 A30C     
0033               
0034 6216 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     6218 3108     
0035                                                   ; \ i   @fb.top      = Address top row in FB
0036                                                   ; | i   @fb.topline  = Top line in FB
0037                                                   ; | i   @fb.row      = Current row in FB
0038                                                   ; |                  (offset 0..@fb.scrrows)
0039                                                   ; | i   @fb.column   = Current column in FB
0040                                                   ; | i   @fb.colsline = Columns per line FB
0041                                                   ; |
0042                                                   ; / o   @fb.current  = Updated pointer
0043               
0044 621A 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     621C A31A     
0045                       ;-------------------------------------------------------
0046                       ; Exit
0047                       ;-------------------------------------------------------
0048               fb.cursor.home.exit:
0049 621E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0050 6220 C2F9  30         mov   *stack+,r11           ; Pop r11
0051 6222 045B  20         b     *r11                  ; Return
                   < stevie_b4.asm
0078                       copy  "fb.insert.line.asm"  ; Insert new line
     **** ****     > fb.insert.line.asm
0001               * FILE......: fb.insert.line.asm
0002               * Purpose...: Insert new line
0003               
0004               ***************************************************************
0005               * fb.insert.line.asm
0006               * Insert new line
0007               ***************************************************************
0008               * bl @fb.insert.line
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Insert line on current line or on following line.
0012               *          @parm1  = 0  -> current line
0013               *          @parm1 <> 0  -> following line
0014               *--------------------------------------------------------------
0015               * OUTPUT
0016               * none
0017               *--------------------------------------------------------------
0018               * Register usage
0019               * tmp0, tmp1
0020               ********|*****|*********************|**************************
0021               fb.insert.line:
0022 6224 0649  14         dect  stack
0023 6226 C64B  30         mov   r11,*stack            ; Save return address
0024 6228 0649  14         dect  stack
0025 622A C644  30         mov   tmp0,*stack           ; Push tmp0
0026 622C 0649  14         dect  stack
0027 622E C645  30         mov   tmp1,*stack           ; Push tmp1
0028                       ;-------------------------------------------------------
0029                       ; Initialisation
0030                       ;-------------------------------------------------------
0031 6230 0720  34         seto  @edb.dirty            ; Editor buffer dirty (text changed!)
     6232 A506     
0032 6234 04C5  14         clr   tmp1                  ; Offset is current line
0033               
0034 6236 C120  34         mov   @parm1,tmp0           ; Insert on current line or following line?
     6238 A006     
0035 623A 1301  14         jeq   !                     ; Current line
0036 623C 0585  14         inc   tmp1                  ; Offset is Following line
0037                       ;-------------------------------------------------------
0038                       ; Crunch current line if dirty
0039                       ;-------------------------------------------------------
0040 623E 8820  50 !       c     @fb.row.dirty,@w$ffff
     6240 A30A     
     6242 2022     
0041 6244 1604  14         jne   fb.insert.line.insert
0042               
0043 6246 06A0  32         bl    @edb.line.pack.fb     ; Pack current line in framebuffer
     6248 7324     
0044                                                   ; \ i  @fb.top      = Address top row in FB
0045                                                   ; | i  @fb.row      = Current row in FB
0046                                                   ; | i  @fb.column   = Current column in FB
0047                                                   ; / i  @fb.colsline = Columns per line in FB
0048               
0049 624A 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     624C A30A     
0050                       ;-------------------------------------------------------
0051                       ; Insert entry in index
0052                       ;-------------------------------------------------------
0053               fb.insert.line.insert:
0054 624E 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     6250 3108     
0055                                                   ; \ i   @fb.top      = Address top row in FB
0056                                                   ; | i   @fb.topline  = Top line in FB
0057                                                   ; | i   @fb.row      = Current row in FB
0058                                                   ; |                  (offset 0..@fb.scrrows)
0059                                                   ; | i   @fb.column   = Current column in FB
0060                                                   ; | i   @fb.colsline = Columns per line FB
0061                                                   ; |
0062                                                   ; / o   @fb.current  = Updated pointer
0063               
0064 6252 C820  54         mov   @fb.topline,@parm1
     6254 A304     
     6256 A006     
0065 6258 A820  54         a     @fb.row,@parm1        ; Line number to insert
     625A A306     
     625C A006     
0066 625E A805  38         a     tmp1,@parm1           ; Add optional offset (for following line)
     6260 A006     
0067 6262 C820  54         mov   @edb.lines,@parm2     ; Last line to reorganize
     6264 A504     
     6266 A008     
0068               
0069 6268 06A0  32         bl    @idx.entry.insert     ; Reorganize index
     626A 3632     
0070                                                   ; \ i  parm1 = Line for insert
0071                                                   ; / i  parm2 = Last line to reorg
0072               
0073 626C 05A0  34         inc   @edb.lines            ; One line added to editor buffer
     626E A504     
0074 6270 04E0  34         clr   @fb.row.length        ; Current row length = 0
     6272 A308     
0075                       ;-------------------------------------------------------
0076                       ; Check/Adjust marker M1
0077                       ;-------------------------------------------------------
0078               fb.insert.line.m1:
0079 6274 8820  50         c     @edb.block.m1,@w$ffff ; Marker M1 unset?
     6276 A50E     
     6278 2022     
0080 627A 1308  14         jeq   fb.insert.line.m2     ; Yes, skip to M2 check
0081               
0082 627C 8820  50         c     @parm1,@edb.block.m1
     627E A006     
     6280 A50E     
0083 6282 1504  14         jgt   fb.insert.line.m2
0084 6284 05A0  34         inc   @edb.block.m1         ; M1++
     6286 A50E     
0085 6288 0720  34         seto  @fb.colorize          ; Set colorize flag
     628A A312     
0086                       ;-------------------------------------------------------
0087                       ; Check/Adjust marker M2
0088                       ;-------------------------------------------------------
0089               fb.insert.line.m2:
0090 628C 8820  50         c     @edb.block.m2,@w$ffff ; Marker M1 unset?
     628E A510     
     6290 2022     
0091 6292 1308  14         jeq   fb.insert.line.refresh
0092                                                   ; Yes, skip to refresh frame buffer
0093               
0094 6294 8820  50         c     @parm1,@edb.block.m2
     6296 A006     
     6298 A510     
0095 629A 1504  14         jgt   fb.insert.line.refresh
0096 629C 05A0  34         inc   @edb.block.m2         ; M2++
     629E A510     
0097 62A0 0720  34         seto  @fb.colorize          ; Set colorize flag
     62A2 A312     
0098                       ;-------------------------------------------------------
0099                       ; Refresh frame buffer and physical screen
0100                       ;-------------------------------------------------------
0101               fb.insert.line.refresh:
0102 62A4 C820  54         mov   @fb.topline,@parm1
     62A6 A304     
     62A8 A006     
0103               
0104 62AA 06A0  32         bl    @fb.refresh           ; \ Refresh frame buffer
     62AC 6818     
0105                                                   ; | i  @parm1 = Line to start with
0106                                                   ; /             (becomes @fb.topline)
0107               
0108 62AE 0720  34         seto  @fb.dirty             ; Trigger screen refresh
     62B0 A318     
0109 62B2 06A0  32         bl    @fb.cursor.home       ; Move cursor home
     62B4 61FA     
0110                       ;-------------------------------------------------------
0111                       ; Exit
0112                       ;-------------------------------------------------------
0113               fb.insert.line.exit:
0114 62B6 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0115 62B8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0116 62BA C2F9  30         mov   *stack+,r11           ; Pop r11
0117 62BC 045B  20         b     *r11                  ; Return to caller
                   < stevie_b4.asm
0079                       copy  "fb.insert.char.asm"  ; Insert character
     **** ****     > fb.insert.char.asm
0001               * FILE......: fb.insert.char.asm
0002               * Purpose...: Insert character
0003               
0004               ***************************************************************
0005               * fb.insert.char.asm
0006               * Insert character
0007               ***************************************************************
0008               * bl @fb.insert.line
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = MSB has character to insert
0012               *          LSB = 0 move cursor right
0013               *          LSB > 0 do not move cursor
0014               *--------------------------------------------------------------
0015               * OUTPUT
0016               * none
0017               *--------------------------------------------------------------
0018               * Register usage
0019               * tmp0, tmp1, tmp2, tmp3
0020               ********|*****|*********************|**************************
0021               fb.insert.char:
0022 62BE 0649  14         dect  stack
0023 62C0 C64B  30         mov   r11,*stack            ; Save return address
0024 62C2 0649  14         dect  stack
0025 62C4 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 62C6 0649  14         dect  stack
0027 62C8 C645  30         mov   tmp1,*stack           ; Push tmp1
0028 62CA 0649  14         dect  stack
0029 62CC C646  30         mov   tmp2,*stack           ; Push tmp2
0030 62CE 0649  14         dect  stack
0031 62D0 C647  30         mov   tmp3,*stack           ; Push tmp3
0032                       ;-------------------------------------------------------
0033                       ; Initialisation
0034                       ;-------------------------------------------------------
0035 62D2 0720  34         seto  @edb.dirty            ; Editor buffer dirty (text changed!)
     62D4 A506     
0036               
0037 62D6 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     62D8 3108     
0038                                                   ; \ i   @fb.top      = Address top row in FB
0039                                                   ; | i   @fb.topline  = Top line in FB
0040                                                   ; | i   @fb.row      = Current row in FB
0041                                                   ; |                  (offset 0..@fb.scrrows)
0042                                                   ; | i   @fb.column   = Current column in FB
0043                                                   ; | i   @fb.colsline = Columns per line FB
0044                                                   ; |
0045                                                   ; / o   @fb.current  = Updated pointer
0046                       ;-------------------------------------------------------
0047                       ; Check 1 - Empty line
0048                       ;-------------------------------------------------------
0049               fb.insert.char.check1:
0050 62DA C120  34         mov   @fb.current,tmp0      ; Get pointer
     62DC A302     
0051 62DE C1A0  34         mov   @fb.row.length,tmp2   ; Get line length
     62E0 A308     
0052 62E2 1347  14         jeq   fb.insert.char.append ; Add character in append mode
0053                       ;-------------------------------------------------------
0054                       ; Check 2 - line-wrap if at column 80
0055                       ;-------------------------------------------------------
0056               fb.insert.char.check2:
0057 62E4 C160  34         mov   @fb.column,tmp1       ; \
     62E6 A30C     
0058 62E8 0285  22         ci    tmp1,colrow-1         ; | Skip if cursor < 80th column
     62EA 004F     
0059 62EC 1118  14         jlt   fb.insert.char.check3 ; /
0060               
0061 62EE C160  34         mov   @fb.row.length,tmp1   ; \
     62F0 A308     
0062 62F2 0285  22         ci    tmp1,colrow           ; | Skip if line length < 80
     62F4 0050     
0063 62F6 1613  14         jne   fb.insert.char.check3 ; /
0064                       ;-------------------------------------------------------
0065                       ; Wrap to new line
0066                       ;-------------------------------------------------------
0067 62F8 0649  14         dect  Stack
0068 62FA C660  46         mov   @parm1,*stack         ; Save character to add
     62FC A006     
0069               
0070 62FE 0720  34         seto  @edb.dirty            ; Editor buffer dirty (text changed!)
     6300 A506     
0071               
0072 6302 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     6304 7324     
0073                                                   ; \ i   @fb.top      = Address top row in FB
0074                                                   ; | i   @fb.row      = Current row in FB
0075                                                   ; | i   @fb.column   = Current column in FB
0076                                                   ; / i   @fb.colsline = Cols per line in FB
0077               
0078 6306 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     6308 A30A     
0079 630A 0720  34         seto  @parm1                ; Insert on following line
     630C A006     
0080               
0081 630E 06A0  32         bl    @fb.insert.line       ; Insert empty line
     6310 6224     
0082                                                   ; \ i  @parm1 = 0 for insert current line
0083                                                   ; /            >0 for insert following line
0084               
0085 6312 06A0  32         bl    @fb.cursor.down       ; Move cursor down 1 line
     6314 6182     
0086 6316 04C6  14         clr   tmp2                  ; Clear line length
0087               
0088 6318 C839  50         mov   *stack+,@parm1        ; Restore character to add
     631A A006     
0089 631C 102A  14         jmp   fb.insert.char.append ; Add character in append mode
0090                       ;-------------------------------------------------------
0091                       ; Check 3 - EOL
0092                       ;-------------------------------------------------------
0093               fb.insert.char.check3:
0094 631E 8820  50         c     @fb.column,@fb.row.length
     6320 A30C     
     6322 A308     
0095 6324 1326  14         jeq   fb.insert.char.append ; Add character in append mode
0096                       ;-------------------------------------------------------
0097                       ; Check 4 - Insert only until line length reaches 80th column
0098                       ;-------------------------------------------------------
0099               fb.insert.char.check4:
0100 6326 C160  34         mov   @fb.row.length,tmp1   ; \
     6328 A308     
0101 632A 0285  22         ci    tmp1,colrow           ; / 80th col reached?
     632C 0050     
0102 632E 1101  14         jlt   fb.insert.char.calc   ; No, continue
0103 6330 1022  14         jmp   fb.insert.char.exit   ; Yes, exit
0104                       ;-------------------------------------------------------
0105                       ; Calculate number of characters to move
0106                       ;-------------------------------------------------------
0107               fb.insert.char.calc:
0108 6332 C1C6  18         mov   tmp2,tmp3             ; tmp3=line length
0109 6334 61E0  34         s     @fb.column,tmp3
     6336 A30C     
0110 6338 0607  14         dec   tmp3                  ; Remove base 1 offset
0111 633A A107  18         a     tmp3,tmp0             ; tmp0=Pointer to last char in line
0112 633C C144  18         mov   tmp0,tmp1
0113 633E 0585  14         inc   tmp1                  ; tmp1=tmp0+1
0114 6340 61A0  34         s     @fb.column,tmp2       ; tmp2=amount of characters to move
     6342 A30C     
0115                       ;-------------------------------------------------------
0116                       ; Loop from end of line until current character
0117                       ;-------------------------------------------------------
0118               fb.insert.char.loop:
0119 6344 D554  38         movb  *tmp0,*tmp1           ; Copy character
0120 6346 0604  14         dec   tmp0                  ; Adjust source pointer
0121 6348 0605  14         dec   tmp1                  ; Adjust target pointer
0122 634A 0606  14         dec   tmp2                  ; Adjust counter
0123 634C 16FB  14         jne   fb.insert.char.loop   ; All characters copied?
0124                       ;-------------------------------------------------------
0125                       ; Insert specified character at current position
0126                       ;-------------------------------------------------------
0127 634E D560  46         movb  @parm1,*tmp1          ; MSB has character to insert
     6350 A006     
0128                       ;-------------------------------------------------------
0129                       ; Save variables and exit
0130                       ;-------------------------------------------------------
0131 6352 0720  34         seto  @fb.row.dirty         ; Current row needs to be crunched/packed
     6354 A30A     
0132 6356 0720  34         seto  @fb.dirty             ; Trigger screen refresh
     6358 A318     
0133 635A 05A0  34         inc   @fb.row.length        ; @fb.row.length
     635C A308     
0134               
0135 635E C120  34         mov   @parm1,tmp0           ; Get parameter
     6360 A006     
0136 6362 0244  22         andi  tmp0,>00ff            ; Keep LSB
     6364 00FF     
0137 6366 1607  14         jne   fb.insert.char.exit   ; Freeze cursor if LSB > 0
0138               
0139 6368 05A0  34         inc   @fb.column            ; \ Adjust cursor position
     636A A30C     
0140 636C 05A0  26         inc   @wyx                  ; /
     636E 832A     
0141 6370 1002  14         jmp   fb.insert.char.exit   ; Exit
0142                       ;-------------------------------------------------------
0143                       ; Add character in append mode
0144                       ;-------------------------------------------------------
0145               fb.insert.char.append:
0146 6372 06A0  32         bl    @fb.replace.char      ; Replace (overwrite) character
     6374 6382     
0147                                                   ; \ i  @parm1 = MSB character to replace
0148                                                   ; /
0149                       ;-------------------------------------------------------
0150                       ; Exit
0151                       ;-------------------------------------------------------
0152               fb.insert.char.exit:
0153 6376 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0154 6378 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0155 637A C179  30         mov   *stack+,tmp1          ; Pop tmp1
0156 637C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0157 637E C2F9  30         mov   *stack+,r11           ; Pop r11
0158 6380 045B  20         b     *r11                  ; Return to caller
                   < stevie_b4.asm
0080                       copy  "fb.replace.char.asm" ; Replace character
     **** ****     > fb.replace.char.asm
0001               * FILE......: fb.replace.char.asm
0002               * Purpose...: Replace (overwrite) character in line
0003               
0004               ***************************************************************
0005               * fb.replace.char.asm
0006               * Replace (overwrite) character in line
0007               ***************************************************************
0008               * bl @fb.replace.char.asm
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = MSB has character to replace
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0, tmp1
0018               ********|*****|*********************|**************************
0019               fb.replace.char:
0020 6382 0649  14         dect  stack
0021 6384 C64B  30         mov   r11,*stack            ; Save return address
0022 6386 0649  14         dect  stack
0023 6388 C644  30         mov   tmp0,*stack           ; Push tmp0
0024 638A 0649  14         dect  stack
0025 638C C645  30         mov   tmp1,*stack           ; Push tmp1
0026                       ;-------------------------------------------------------
0027                       ; Initialisation
0028                       ;-------------------------------------------------------
0029 638E 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     6390 3108     
0030                                                   ; \ i   @fb.top      = Address top row in FB
0031                                                   ; | i   @fb.topline  = Top line in FB
0032                                                   ; | i   @fb.row      = Current row in FB
0033                                                   ; |                  (offset 0..@fb.scrrows)
0034                                                   ; | i   @fb.column   = Current column in FB
0035                                                   ; | i   @fb.colsline = Columns per line FB
0036                                                   ; |
0037                                                   ; / o   @fb.current  = Updated pointer
0038               
0039 6392 C120  34         mov   @fb.current,tmp0      ; Get pointer
     6394 A302     
0040               
0041 6396 D520  46         movb  @parm1,*tmp0          ; Store character in editor buffer
     6398 A006     
0042 639A 0720  34         seto  @fb.row.dirty         ; Current row needs to be crunched/packed
     639C A30A     
0043 639E 0720  34         seto  @fb.dirty             ; Trigger screen refresh
     63A0 A318     
0044                       ;-------------------------------------------------------
0045                       ; Last column on screen reached?
0046                       ;-------------------------------------------------------
0047 63A2 C160  34         mov   @fb.column,tmp1       ; \ Columns are counted from 0 to 79
     63A4 A30C     
0048 63A6 0285  22         ci    tmp1,colrow - 1       ; | Last column on screen?
     63A8 004F     
0049 63AA 1105  14         jlt   fb.replace.char.incx  ; / No, increase X position
0050               
0051 63AC 0205  20         li    tmp1,colrow           ; \
     63AE 0050     
0052 63B0 C805  38         mov   tmp1,@fb.row.length   ; | Yes, set row length and exit.
     63B2 A308     
0053 63B4 100B  14         jmp   fb.replace.char.exit  ; /
0054                       ;-------------------------------------------------------
0055                       ; Increase column
0056                       ;-------------------------------------------------------
0057               fb.replace.char.incx:
0058 63B6 05A0  34         inc   @fb.column            ; Column++ in screen buffer
     63B8 A30C     
0059 63BA 05A0  26         inc   @wyx                  ; Column++ VDP cursor
     63BC 832A     
0060                       ;-------------------------------------------------------
0061                       ; Update line length in frame buffer
0062                       ;-------------------------------------------------------
0063 63BE 8820  50         c     @fb.column,@fb.row.length
     63C0 A30C     
     63C2 A308     
0064                                                   ; column < line length ?
0065 63C4 1103  14         jlt   fb.replace.char.exit  ; Yes, don't update row length
0066 63C6 C820  54         mov   @fb.column,@fb.row.length
     63C8 A30C     
     63CA A308     
0067                                                   ; Set row length
0068                       ;-------------------------------------------------------
0069                       ; Exit
0070                       ;-------------------------------------------------------
0071               fb.replace.char.exit:
0072 63CC C179  30         mov   *stack+,tmp1          ; Pop tmp1
0073 63CE C139  30         mov   *stack+,tmp0          ; Pop tmp0
0074 63D0 C2F9  30         mov   *stack+,r11           ; Pop r11
0075 63D2 045B  20         b     *r11                  ; Return to caller
                   < stevie_b4.asm
0081                       copy  "fb.null2char.asm"    ; Replace null characters in framebuffer row
     **** ****     > fb.null2char.asm
0001               * FILE......: fb.null2char.asm
0002               * Purpose...: Replace all null characters with specified character
0003               
0004               ***************************************************************
0005               * fb.null2char
0006               * Replace all null characters with specified character
0007               ***************************************************************
0008               *  bl   @fb.null2char
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * tmp1 = Replacement character
0012               * tmp2 = Length of row
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0,tmp1,tmp2,tmp3
0019               ********|*****|*********************|**************************
0020               fb.null2char:
0021 63D4 0649  14         dect  stack
0022 63D6 C64B  30         mov   r11,*stack            ; Save return address
0023 63D8 0649  14         dect  stack
0024 63DA C644  30         mov   tmp0,*stack           ; Push tmp0
0025 63DC 0649  14         dect  stack
0026 63DE C645  30         mov   tmp1,*stack           ; Push tmp1
0027 63E0 0649  14         dect  stack
0028 63E2 C646  30         mov   tmp2,*stack           ; Push tmp2
0029 63E4 0649  14         dect  stack
0030 63E6 C647  30         mov   tmp3,*stack           ; Push tmp3
0031                       ;-------------------------------------------------------
0032                       ; Sanity checks
0033                       ;-------------------------------------------------------
0034 63E8 C186  18         mov   tmp2,tmp2             ; Minimum 1 character
0035 63EA 1303  14         jeq   fb.null2char.crash
0036 63EC 0286  22         ci    tmp2,80               ; Maximum 80 characters
     63EE 0050     
0037 63F0 1204  14         jle   fb.null2char.init
0038                       ;------------------------------------------------------
0039                       ; Asserts failed
0040                       ;------------------------------------------------------
0041               fb.null2char.crash:
0042 63F2 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     63F4 FFCE     
0043 63F6 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     63F8 2026     
0044                       ;-------------------------------------------------------
0045                       ; Initialize
0046                       ;-------------------------------------------------------
0047               fb.null2char.init:
0048 63FA C1C5  18         mov   tmp1,tmp3             ; Get character to write
0049 63FC 0A87  32         sla   tmp3,8                ; LSB to MSB
0050 63FE 04E0  34         clr   @fb.column
     6400 A30C     
0051               
0052 6402 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     6404 3108     
0053                                                   ; \ i   @fb.top      = Address top row in FB
0054                                                   ; | i   @fb.topline  = Top line in FB
0055                                                   ; | i   @fb.row      = Current row in FB
0056                                                   ; |                  (offset 0..@fb.scrrows)
0057                                                   ; | i   @fb.column   = Current column in FB
0058                                                   ; | i   @fb.colsline = Columns per line FB
0059                                                   ; |
0060                                                   ; / o   @fb.current  = Updated pointer
0061               
0062 6406 C120  34         mov   @fb.current,tmp0      ; Get position
     6408 A302     
0063                       ;-------------------------------------------------------
0064                       ; Loop over characters in line
0065                       ;-------------------------------------------------------
0066               fb.null2char.loop:
0067 640A 04C5  14         clr   tmp1
0068 640C D154  26         movb  *tmp0,tmp1            ; Get character
0069 640E 1603  14         jne   !                     ; Not a null character, skip it
0070 6410 0205  20         li    tmp1,>2a00            ; ASCII 32 in MSB
     6412 2A00     
0071 6414 D507  30         movb  tmp3,*tmp0            ; Replace null character
0072                       ;-------------------------------------------------------
0073                       ; Prepare for next iteration
0074                       ;-------------------------------------------------------
0075 6416 0584  14 !       inc   tmp0                  ; Move to next character
0076 6418 0606  14         dec   tmp2
0077 641A 15F7  14         jgt   fb.null2char.loop     ; Repeat until done
0078                       ;------------------------------------------------------
0079                       ; Exit
0080                       ;------------------------------------------------------
0081               fb.null2char.exit:
0082 641C C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0083 641E C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0084 6420 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0085 6422 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0086 6424 C2F9  30         mov   *stack+,r11           ; Pop R11
0087 6426 045B  20         b     *r11                  ; Return to caller
                   < stevie_b4.asm
0082                       copy  "fb.tab.prev.asm"     ; Move cursor to previous tab position
     **** ****     > fb.tab.prev.asm
0001               * FILE......: fb.tab.prev.asm
0002               * Purpose...: Tabbing functionality in frame buffer
0003               
0004               
0005               ***************************************************************
0006               * fb.tab.prev
0007               * Move cursor to previous tab position
0008               ***************************************************************
0009               *  bl   @fb.tab.prev
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * none
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0,tmp1,tmp2
0019               *--------------------------------------------------------------
0020               * Remarks
0021               * For simplicity reasons we're assuming base 1 during copy
0022               * (first line starts at 1 instead of 0).
0023               * Makes it easier when comparing values.
0024               ********|*****|*********************|**************************
0025               fb.tab.prev:
0026 6428 0649  14         dect  stack
0027 642A C64B  30         mov   r11,*stack            ; Save return address
0028 642C 0649  14         dect  stack
0029 642E C644  30         mov   tmp0,*stack           ; Push tmp0
0030 6430 0649  14         dect  stack
0031 6432 C645  30         mov   tmp1,*stack           ; Push tmp1
0032                       ;-------------------------------------------------------
0033                       ; Initialize
0034                       ;-------------------------------------------------------
0035 6434 0204  20         li    tmp0,tv.tabs.table.rl ; Get pointer to tabs table
     6436 390A     
0036                       ;-------------------------------------------------------
0037                       ; Find previous tab position
0038                       ;-------------------------------------------------------
0039               fb.tab.prev.loop:
0040 6438 D174  28         movb  *tmp0+,tmp1           ; \ Get tab position
0041 643A 0985  32         srl   tmp1,8                ; / Right align
0042               
0043 643C 0285  22         ci    tmp1,>00ff            ; End-of-list reached?
     643E 00FF     
0044 6440 1316  14         jeq   fb.tab.prev.eol       ; Yes, home cursor and exit
0045                       ;-------------------------------------------------------
0046                       ; Compare position
0047                       ;-------------------------------------------------------
0048 6442 8160  34         c     @fb.column,tmp1       ; Cursor < tab position?
     6444 A30C     
0049 6446 121B  14         jle   !                     ; Yes, next loop iteration
0050                       ;-------------------------------------------------------
0051                       ; Set cursor
0052                       ;-------------------------------------------------------
0053 6448 C805  38         mov   tmp1,@fb.column       ; Set cursor on tab position
     644A A30C     
0054               
0055 644C 0649  14         dect  stack
0056 644E C644  30         mov   tmp0,*stack           ; Push tmp0
0057               
0058 6450 C105  18         mov   tmp1,tmp0             ; \ Set VDP cursor column position
0059 6452 06A0  32         bl    @xsetx                ; / i  tmp0 = new X value
     6454 26F8     
0060               
0061 6456 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0062               
0063 6458 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     645A 3108     
0064                                                   ; \ i   @fb.top      = Address top row in FB
0065                                                   ; | i   @fb.topline  = Top line in FB
0066                                                   ; | i   @fb.row      = Current row in FB
0067                                                   ; |                  (offset 0..@fb.scrrows)
0068                                                   ; | i   @fb.column   = Current column in FB
0069                                                   ; | i   @fb.colsline = Columns per line FB
0070                                                   ; |
0071                                                   ; / o   @fb.current  = Updated pointer
0072               
0073 645C 0720  34         seto  @fb.row.dirty         ; Current row dirty in frame buffer
     645E A30A     
0074 6460 0720  34         seto  @fb.dirty             ; Frame buffer dirty
     6462 A318     
0075 6464 0720  34         seto  @fb.status.dirty      ; Refresh status line
     6466 A31A     
0076 6468 0720  34         seto  @edb.dirty            ; Editor buffer dirty (text changed)
     646A A506     
0077 646C 100A  14         jmp   fb.tab.prev.exit
0078                       ;-------------------------------------------------------
0079                       ; End-of-list reached, special treatment home cursor
0080                       ;-------------------------------------------------------
0081               fb.tab.prev.eol:
0082 646E 04E0  34         clr   @fb.column            ; Home cursor
     6470 A30C     
0083 6472 04C4  14         clr   tmp0                  ; Home cursor
0084               
0085 6474 06A0  32         bl    @xsetx                ; \ Set VDP cursor column position
     6476 26F8     
0086                                                   ; / i  tmp0 = new X value
0087               
0088 6478 0720  34         seto  @fb.status.dirty      ; Refresh status line
     647A A31A     
0089               
0090 647C 1002  14         jmp   fb.tab.prev.exit      ; Exit
0091                       ;-------------------------------------------------------
0092                       ; Prepare for next iteration
0093                       ;-------------------------------------------------------
0094 647E 0606  14 !       dec   tmp2
0095 6480 15DB  14         jgt   fb.tab.prev.loop
0096                       ;------------------------------------------------------
0097                       ; Exit
0098                       ;------------------------------------------------------
0099               fb.tab.prev.exit:
0100 6482 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0101 6484 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0102 6486 C2F9  30         mov   *stack+,r11           ; Pop R11
0103 6488 045B  20         b     *r11                  ; Return to caller
                   < stevie_b4.asm
0083                       copy  "fb.tab.next.asm"     ; Move cursor to next tab position
     **** ****     > fb.tab.next.asm
0001               * FILE......: fb.tab.next.asm
0002               * Purpose...: Tabbing functionality in frame buffer
0003               
0004               
0005               ***************************************************************
0006               * fb.tab.next
0007               * Move cursor to next tab position
0008               ***************************************************************
0009               *  bl   @fb.tab.next
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * none
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0,tmp1,tmp2
0019               *--------------------------------------------------------------
0020               * Remarks
0021               * For simplicity reasons we're assuming base 1 during copy
0022               * (first line starts at 1 instead of 0).
0023               * Makes it easier when comparing values.
0024               ********|*****|*********************|**************************
0025               fb.tab.next:
0026 648A 0649  14         dect  stack
0027 648C C64B  30         mov   r11,*stack            ; Save return address
0028 648E 0649  14         dect  stack
0029 6490 C644  30         mov   tmp0,*stack           ; Push tmp0
0030 6492 0649  14         dect  stack
0031 6494 C645  30         mov   tmp1,*stack           ; Push tmp1
0032 6496 0649  14         dect  stack
0033 6498 C646  30         mov   tmp2,*stack           ; Push tmp2
0034                       ;-------------------------------------------------------
0035                       ; Initialize
0036                       ;-------------------------------------------------------
0037 649A 0204  20         li    tmp0,tv.tabs.table.lr ; Get pointer to tabs table
     649C 38FE     
0038                       ;-------------------------------------------------------
0039                       ; Find next tab position
0040                       ;-------------------------------------------------------
0041               fb.tab.next.loop:
0042 649E D174  28         movb  *tmp0+,tmp1           ; \ Get tab position
0043 64A0 0985  32         srl   tmp1,8                ; / Right align
0044               
0045 64A2 0285  22         ci    tmp1,>00ff            ; End-of-list reached?
     64A4 00FF     
0046 64A6 1325  14         jeq   fb.tab.next.eol       ; Yes, home cursor and exit
0047                       ;-------------------------------------------------------
0048                       ; Compare position
0049                       ;-------------------------------------------------------
0050 64A8 8160  34         c     @fb.column,tmp1       ; Cursor > tab position?
     64AA A30C     
0051 64AC 142C  14         jhe   !                     ; Yes, next loop iteration
0052                       ;-------------------------------------------------------
0053                       ; Set cursor
0054                       ;-------------------------------------------------------
0055 64AE C185  18         mov   tmp1,tmp2             ; Set length of row
0056 64B0 0205  20         li    tmp1,32               ; Replacement character = ASCII 32
     64B2 0020     
0057               
0058 64B4 06A0  32         bl    @fb.null2char         ; Replace any null characters with space
     64B6 63D4     
0059                                                   ; \ i  tmp1 = Replacement character
0060                                                   ; / i  tmp2 = Length of row
0061               
0062 64B8 C146  18         mov   tmp2,tmp1             ; Restore tmp1
0063 64BA C805  38         mov   tmp1,@fb.column       ; Set cursor on tab position
     64BC A30C     
0064               
0065 64BE 0649  14         dect  stack
0066 64C0 C644  30         mov   tmp0,*stack           ; Push tmp0
0067               
0068 64C2 C105  18         mov   tmp1,tmp0             ; \ Set VDP cursor column position
0069 64C4 06A0  32         bl    @xsetx                ; / i  tmp0 = new X value
     64C6 26F8     
0070               
0071 64C8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0072               
0073 64CA 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     64CC 3108     
0074                                                   ; \ i   @fb.top      = Address top row in FB
0075                                                   ; | i   @fb.topline  = Top line in FB
0076                                                   ; | i   @fb.row      = Current row in FB
0077                                                   ; |                  (offset 0..@fb.scrrows)
0078                                                   ; | i   @fb.column   = Current column in FB
0079                                                   ; | i   @fb.colsline = Columns per line FB
0080                                                   ; |
0081                                                   ; / o   @fb.current  = Updated pointer
0082               
0083 64CE 0720  34         seto  @fb.row.dirty         ; Current row dirty in frame buffer
     64D0 A30A     
0084 64D2 0720  34         seto  @fb.dirty             ; Frame buffer dirty
     64D4 A318     
0085 64D6 0720  34         seto  @fb.status.dirty      ; Refresh status line
     64D8 A31A     
0086 64DA 0720  34         seto  @edb.dirty            ; Editor buffer dirty (text changed)
     64DC A506     
0087                       ;-------------------------------------------------------
0088                       ; Set row length
0089                       ;-------------------------------------------------------
0090 64DE C120  34         mov   @fb.column,tmp0
     64E0 A30C     
0091 64E2 0584  14         inc   tmp0                  ; Base 1
0092 64E4 8820  50         c     @fb.column,@fb.row.length
     64E6 A30C     
     64E8 A308     
0093 64EA 110F  14         jlt   fb.tab.next.exit      ; No need to set row length, exit
0094 64EC C804  38         mov   tmp0,@fb.row.length   ; Set new length
     64EE A308     
0095 64F0 100C  14         jmp   fb.tab.next.exit      ; Exit
0096                       ;-------------------------------------------------------
0097                       ; End-of-list reached, special treatment home cursor
0098                       ;-------------------------------------------------------
0099               fb.tab.next.eol:
0100 64F2 04E0  34         clr   @fb.column            ; Home cursor
     64F4 A30C     
0101 64F6 04C4  14         clr   tmp0                  ; Home cursor
0102               
0103 64F8 06A0  32         bl    @xsetx                ; \ Set VDP cursor column position
     64FA 26F8     
0104                                                   ; / i  tmp0 = new X value
0105               
0106 64FC 0720  34         seto  @fb.status.dirty      ; Refresh status line
     64FE A31A     
0107               
0108 6500 04E0  34         clr   @edb.insmode          ; Turn on overwrite mode
     6502 A50A     
0109                                                   ; This is a hack really. Because of the
0110                                                   ; whitespace that is dragged by tabbing, we
0111                                                   ; have a full 80 characters line so insert
0112                                                   ; does not work.
0113               
0114 6504 1002  14         jmp   fb.tab.next.exit      ; Exit
0115                       ;-------------------------------------------------------
0116                       ; Prepare for next iteration
0117                       ;-------------------------------------------------------
0118 6506 0606  14 !       dec   tmp2
0119 6508 15CA  14         jgt   fb.tab.next.loop
0120                       ;------------------------------------------------------
0121                       ; Exit
0122                       ;------------------------------------------------------
0123               fb.tab.next.exit:
0124 650A C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0125 650C C179  30         mov   *stack+,tmp1          ; Pop tmp1
0126 650E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0127 6510 C2F9  30         mov   *stack+,r11           ; Pop R11
0128 6512 045B  20         b     *r11                  ; Return to caller
                   < stevie_b4.asm
0084                       copy  "fb.goto.toprow.asm"  ; Refresh FB with top-row and row offset
     **** ****     > fb.goto.toprow.asm
0001               * FILE......: fb.goto.toprow.asm
0002               * Purpose...: Refresh frame buffer with specified top-row and row offset
0003               
0004               
0005               ***************************************************************
0006               * fb.goto.toprow
0007               * Refresh frame buffer with specified top-row and row offset,
0008               * align variables in editor buffer to match with that position.
0009               ****************************************************************
0010               * bl @fb.goto.toprow
0011               *--------------------------------------------------------------
0012               * INPUT
0013               * @parm1  = Line in editor buffer to display as top row (goto)
0014               * @parm2  = Row offset in frame buffer
0015               *--------------------------------------------------------------
0016               * OUTPUT
0017               * none
0018               *--------------------------------------------------------------
0019               * Register usage
0020               * tmp0
0021               ********|*****|*********************|**************************
0022               fb.goto.toprow:
0023 6514 0649  14         dect  stack
0024 6516 C64B  30         mov   r11,*stack            ; Save return address
0025 6518 0649  14         dect  stack
0026 651A C644  30         mov   tmp0,*stack           ; Push tmp0
0027                       ;-------------------------------------------------------
0028                       ; Assert on line
0029                       ;-------------------------------------------------------
0030 651C C120  34         mov   @parm1,tmp0           ; \ Goto beyond EOF ?
     651E A006     
0031 6520 8120  34         c     @edb.lines,tmp0       ; /
     6522 A504     
0032 6524 1B05  14         jh    !                     ; No, keep on going
0033 6526 C820  54         mov   @edb.lines,@parm1     ; \ Goto EOF
     6528 A504     
     652A A006     
0034 652C 0620  34         dec   @parm1                ; / Base 0
     652E A006     
0035                       ;-------------------------------------------------------
0036                       ; Assert on row offset in frame buffer
0037                       ;-------------------------------------------------------
0038 6530 8820  50 !       c     @parm2,@fb.scrrows    ; Row offset off page ?
     6532 A008     
     6534 A31C     
0039 6536 1104  14         jlt   fb.goto.toprow.offset ; No, use row offset
0040 6538 C820  54         mov   @fb.scrrows,@fb.row   ; Limit row offset
     653A A31C     
     653C A306     
0041 653E 1003  14         jmp   fb.goto.toprow.line   ; Goto line
0042               fb.goto.toprow.offset:
0043 6540 C820  54         mov   @parm2,@fb.row        ; Set row offset
     6542 A008     
     6544 A306     
0044                       ;-------------------------------------------------------
0045                       ; Goto line
0046                       ;-------------------------------------------------------
0047               fb.goto.toprow.line:
0048 6546 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     6548 A31A     
0049               
0050 654A 06A0  32         bl    @fb.refresh           ; \ Refresh frame buffer
     654C 6818     
0051                                                   ; | i  @parm1 = Line to start with
0052                                                   ; /             (becomes @fb.topline)
0053               
0054 654E 04E0  34         clr   @fb.column            ; Frame buffer column 0
     6550 A30C     
0055               
0056 6552 C120  34         mov   @fb.row,tmp0          ; \
     6554 A306     
0057 6556 0A84  32         sla   tmp0,8                ; | Position VDP cursor
0058 6558 C804  30         mov   tmp0,@wyx             ; /
     655A 832A     
0059               
0060 655C 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     655E 3108     
0061                                                   ; \ i   @fb.top      = Address top row in FB
0062                                                   ; | i   @fb.topline  = Top line in FB
0063                                                   ; | i   @fb.row      = Current row in FB
0064                                                   ; |                  (offset 0..@fb.scrrows)
0065                                                   ; | i   @fb.column   = Current column in FB
0066                                                   ; | i   @fb.colsline = Columns per line FB
0067                                                   ; |
0068                                                   ; / o   @fb.current  = Updated pointer
0069               
0070 6560 06A0  32         bl    @edb.line.getlength2  ; \ Get length current line
     6562 3718     
0071                                                   ; | i  @fb.row        = Row in frame buffer
0072                                                   ; / o  @fb.row.length = Length of row
0073                       ;-------------------------------------------------------
0074                       ; Exit
0075                       ;-------------------------------------------------------
0076               fb.goto.toprow.exit:
0077 6564 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0078 6566 C2F9  30         mov   *stack+,r11           ; Pop r11
0079 6568 045B  20         b     *r11                  ; Return
                   < stevie_b4.asm
0085                       copy  "fb.ruler.asm"        ; Setup ruler with tab positions in memory
     **** ****     > fb.ruler.asm
0001               * FILE......: fb.ruler.asm
0002               * Purpose...: Setup ruler with tab-positions
0003               
0004               ***************************************************************
0005               * fb.ruler.init
0006               * Setup ruler line
0007               ***************************************************************
0008               * bl  @ruler.init
0009               *--------------------------------------------------------------
0010               * OUTPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * Register usage
0014               * tmp0,tmp1,tmp2
0015               ********|*****|*********************|**************************
0016               fb.ruler.init:
0017 656A 0649  14         dect  stack
0018 656C C64B  30         mov   r11,*stack            ; Save return address
0019 656E 0649  14         dect  stack
0020 6570 C644  30         mov   tmp0,*stack           ; Push tmp0
0021 6572 0649  14         dect  stack
0022 6574 C645  30         mov   tmp1,*stack           ; Push tmp1
0023 6576 0649  14         dect  stack
0024 6578 C646  30         mov   tmp2,*stack           ; Push tmp2
0025                       ;-------------------------------------------------------
0026                       ; Initialize
0027                       ;-------------------------------------------------------
0028 657A 06A0  32         bl    @cpym2m
     657C 24F4     
0029 657E 65C2                   data fb.ruler.txt,fb.ruler.sit,80
     6580 A320     
     6582 0050     
0030                                                   ; Copy ruler from ROM to RAM
0031               
0032 6584 0204  20         li    tmp0,fb.ruler.tat
     6586 A370     
0033 6588 C160  34         mov   @tv.rulercolor,tmp1
     658A A21E     
0034 658C 0206  20         li    tmp2,80
     658E 0050     
0035               
0036 6590 06A0  32         bl    @xfilm                ; Setup FG/BG color for ruler in RAM
     6592 223C     
0037                                                   ; \ i  tmp0 = Target address in RAM
0038                                                   ; | i  tmp1 = Byte to fill
0039                                                   ; / i  tmp2 = Number of bytes to fill
0040               
0041 6594 0204  20         li    tmp0,tv.tabs.table.lr ; Get pointer to tabs table
     6596 38FE     
0042                       ;------------------------------------------------------
0043                       ; Setup ruler with current tab positions
0044                       ;------------------------------------------------------
0045               fb.ruler.init.loop:
0046 6598 D174  28         movb  *tmp0+,tmp1           ; \ Get tab position
0047 659A 0985  32         srl   tmp1,8                ; / Right align
0048               
0049 659C 0285  22         ci    tmp1,>00ff            ; End-of-list reached?
     659E 00FF     
0050 65A0 130B  14         jeq   fb.ruler.init.exit
0051                       ;------------------------------------------------------
0052                       ; Add tab-marker to ruler SIT in RAM
0053                       ;------------------------------------------------------
0054 65A2 0225  22         ai    tmp1,fb.ruler.sit     ; Add base address
     65A4 A320     
0055 65A6 0206  20         li    tmp2,>1100            ; Tab indicator (ASCII 16)
     65A8 1100     
0056 65AA D546  30         movb  tmp2,*tmp1            ; Add tab-marker
0057                       ;------------------------------------------------------
0058                       ; Add tab-marker color to ruler TAT in RAM
0059                       ;------------------------------------------------------
0060 65AC 0225  22         ai    tmp1,80
     65AE 0050     
0061 65B0 C1A0  34         mov   @tv.color,tmp2        ; AB is in MSB (see color scheme table)
     65B2 A218     
0062 65B4 D546  30         movb  tmp2,*tmp1            ; Tab indicator FG/BG color
0063 65B6 10F0  14         jmp   fb.ruler.init.loop    ; Next iteration
0064                       ;------------------------------------------------------
0065                       ; Exit
0066                       ;------------------------------------------------------
0067               fb.ruler.init.exit:
0068 65B8 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0069 65BA C179  30         mov   *stack+,tmp1          ; Pop tmp1
0070 65BC C139  30         mov   *stack+,tmp0          ; Pop tmp0
0071 65BE C2F9  30         mov   *stack+,r11           ; Pop r11
0072 65C0 045B  20         b     *r11                  ; Return
0073               
0074                       ;------------------------------------------------------
0075                       ; Ruler default string
0076                       ;------------------------------------------------------
0077               fb.ruler.txt:
0078                       even
0079 65C2 2E2E             text    '.........'
     65C4 2E2E     
     65C6 2E2E     
     65C8 2E2E     
     65CA 2E       
0080 65CB   12             byte    18
0081 65CC 2E2E             text    '.........'
     65CE 2E2E     
     65D0 2E2E     
     65D2 2E2E     
     65D4 2E       
0082 65D5   13             byte    19
0083 65D6 2E2E             text    '.........'
     65D8 2E2E     
     65DA 2E2E     
     65DC 2E2E     
     65DE 2E       
0084 65DF   14             byte    20
0085 65E0 2E2E             text    '.........'
     65E2 2E2E     
     65E4 2E2E     
     65E6 2E2E     
     65E8 2E       
0086 65E9   15             byte    21
0087 65EA 2E2E             text    '.........'
     65EC 2E2E     
     65EE 2E2E     
     65F0 2E2E     
     65F2 2E       
0088 65F3   16             byte    22
0089 65F4 2E2E             text    '.........'
     65F6 2E2E     
     65F8 2E2E     
     65FA 2E2E     
     65FC 2E       
0090 65FD   17             byte    23
0091 65FE 2E2E             text    '.........'
     6600 2E2E     
     6602 2E2E     
     6604 2E2E     
     6606 2E       
0092 6607   18             byte    24
0093 6608 2E2E             text    '.........'
     660A 2E2E     
     660C 2E2E     
     660E 2E2E     
     6610 2E       
0094 6611   19             byte    25
0095                       even
                   < stevie_b4.asm
0086                       copy  "fb.colorlines.asm"   ; Colorize lines in framebuffer
     **** ****     > fb.colorlines.asm
0001               * FILE......: fb.colorlines.asm
0002               * Purpose...: Colorize frame buffer content
0003               
0004               ***************************************************************
0005               * fb.colorlines
0006               * Colorize frame buffer content
0007               ***************************************************************
0008               * bl @fb.colorlines
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1       = Force refresh if >ffff (overrides @fb.colorize)
0012               * @fb.colorize = Colorize frame buffer content if >ffff
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0,tmp1,tmp2,tmp3,tmp4
0019               ********|*****|*********************|**************************
0020               fb.colorlines:
0021 6612 0649  14         dect  stack
0022 6614 C64B  30         mov   r11,*stack            ; Save return address
0023 6616 0649  14         dect  stack
0024 6618 C644  30         mov   tmp0,*stack           ; Push tmp0
0025 661A 0649  14         dect  stack
0026 661C C645  30         mov   tmp1,*stack           ; Push tmp1
0027 661E 0649  14         dect  stack
0028 6620 C646  30         mov   tmp2,*stack           ; Push tmp2
0029 6622 0649  14         dect  stack
0030 6624 C647  30         mov   tmp3,*stack           ; Push tmp3
0031 6626 0649  14         dect  stack
0032 6628 C648  30         mov   tmp4,*stack           ; Push tmp4
0033                       ;------------------------------------------------------
0034                       ; Force refresh flag set
0035                       ;------------------------------------------------------
0036 662A C120  34         mov   @parm1,tmp0           ; \ Force refresh flag set?
     662C A006     
0037 662E 0284  22         ci    tmp0,>ffff            ; /
     6630 FFFF     
0038 6632 1309  14         jeq   !                     ; Yes, so skip Asserts
0039                       ;------------------------------------------------------
0040                       ; Assert
0041                       ;------------------------------------------------------
0042 6634 C120  34         mov   @fb.colorize,tmp0     ; Check if colorization necessary
     6636 A312     
0043 6638 132A  14         jeq   fb.colorlines.exit    ; Exit if nothing to do.
0044                       ;------------------------------------------------------
0045                       ; Speedup screen refresh dramatically
0046                       ;------------------------------------------------------
0047 663A C120  34         mov   @edb.block.m1,tmp0
     663C A50E     
0048 663E 1327  14         jeq   fb.colorlines.exit    ; Exit if marker M1 unset
0049 6640 C120  34         mov   @edb.block.m2,tmp0
     6642 A510     
0050 6644 1324  14         jeq   fb.colorlines.exit    ; Exit if marker M2 unset
0051                       ;------------------------------------------------------
0052                       ; Color the lines in the framebuffer (TAT)
0053                       ;------------------------------------------------------
0054 6646 0204  20 !       li    tmp0,vdp.fb.toprow.tat
     6648 1850     
0055                                                   ; VDP start address
0056 664A C1E0  34         mov   @fb.scrrows,tmp3      ; Set loop counter
     664C A31C     
0057               
0058 664E C220  34         mov   @tv.ruler.visible,tmp4
     6650 A210     
0059 6652 1303  14         jeq   fb.colorlines.noruler ; Skip row adjustment if no ruler visible
0060               
0061 6654 0224  22         ai    tmp0,80               ; Skip ruler line
     6656 0050     
0062 6658 0607  14         dec   tmp3                  ; Skip ruler line
0063               fb.colorlines.noruler:
0064 665A C220  34         mov   @fb.topline,tmp4      ; Position in editor buffer
     665C A304     
0065 665E 0588  14         inc   tmp4                  ; M1/M2 use base 1 offset
0066                       ;------------------------------------------------------
0067                       ; 1. Set color for each line in framebuffer
0068                       ;------------------------------------------------------
0069               fb.colorlines.loop:
0070 6660 C1A0  34         mov   @edb.block.m1,tmp2
     6662 A50E     
0071 6664 8206  18         c     tmp2,tmp4             ; M1 > current line
0072 6666 1507  14         jgt   fb.colorlines.normal  ; Yes, skip marking color
0073               
0074 6668 C1A0  34         mov   @edb.block.m2,tmp2
     666A A510     
0075 666C 8206  18         c     tmp2,tmp4             ; M2 < current line
0076 666E 1103  14         jlt   fb.colorlines.normal  ; Yes, skip marking color
0077                       ;------------------------------------------------------
0078                       ; 1a. Set marking color
0079                       ;------------------------------------------------------
0080 6670 C160  34         mov   @tv.markcolor,tmp1
     6672 A21A     
0081 6674 1003  14         jmp   fb.colorlines.fill
0082                       ;------------------------------------------------------
0083                       ; 1b. Set normal text color
0084                       ;------------------------------------------------------
0085               fb.colorlines.normal:
0086 6676 C160  34         mov   @tv.color,tmp1
     6678 A218     
0087 667A 0985  32         srl   tmp1,8
0088                       ;------------------------------------------------------
0089                       ; 1c. Fill line with selected color
0090                       ;------------------------------------------------------
0091               fb.colorlines.fill:
0092 667C 0206  20         li    tmp2,80               ; 80 characters to fill
     667E 0050     
0093               
0094 6680 06A0  32         bl    @xfilv                ; Fill VDP VRAM
     6682 2294     
0095                                                   ; \ i  tmp0 = VDP start address
0096                                                   ; | i  tmp1 = Byte to fill
0097                                                   ; / i  tmp2 = count
0098               
0099 6684 0224  22         ai    tmp0,80               ; Next line
     6686 0050     
0100 6688 0588  14         inc   tmp4
0101 668A 0607  14         dec   tmp3                  ; Update loop counter
0102 668C 15E9  14         jgt   fb.colorlines.loop    ; Back to (1)
0103                       ;------------------------------------------------------
0104                       ; Exit
0105                       ;------------------------------------------------------
0106               fb.colorlines.exit
0107 668E 04E0  34         clr   @fb.colorize          ; Reset colorize flag
     6690 A312     
0108 6692 C239  30         mov   *stack+,tmp4          ; Pop tmp4
0109 6694 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0110 6696 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0111 6698 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0112 669A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0113 669C C2F9  30         mov   *stack+,r11           ; Pop r11
0114 669E 045B  20         b     *r11                  ; Return
                   < stevie_b4.asm
0087                       copy  "fb.vdpdump.asm"      ; Dump framebuffer to VDP SIT
     **** ****     > fb.vdpdump.asm
0001               * FILE......: fb.vdpdump.asm
0002               * Purpose...: Dump framebuffer to VDP
0003               
0004               
0005               ***************************************************************
0006               * fb.vdpdump
0007               * Dump framebuffer to VDP SIT
0008               ***************************************************************
0009               * bl @fb.vdpdump
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @parm1 = Number of lines to dump
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0, tmp1, tmp2
0019               ********|*****|*********************|**************************
0020               fb.vdpdump:
0021 66A0 0649  14         dect  stack
0022 66A2 C64B  30         mov   r11,*stack            ; Save return address
0023 66A4 0649  14         dect  stack
0024 66A6 C644  30         mov   tmp0,*stack           ; Push tmp0
0025 66A8 0649  14         dect  stack
0026 66AA C645  30         mov   tmp1,*stack           ; Push tmp1
0027 66AC 0649  14         dect  stack
0028 66AE C646  30         mov   tmp2,*stack           ; Push tmp2
0029                       ;------------------------------------------------------
0030                       ; Assert
0031                       ;------------------------------------------------------
0032 66B0 C160  34         mov   @parm1,tmp1
     66B2 A006     
0033 66B4 0285  22         ci    tmp1,80*30
     66B6 0960     
0034 66B8 1204  14         jle   !
0035                       ;------------------------------------------------------
0036                       ; Crash the system
0037                       ;------------------------------------------------------
0038 66BA C80B  38         mov   r11,@>ffce            ; \ Save caller address
     66BC FFCE     
0039 66BE 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     66C0 2026     
0040                       ;------------------------------------------------------
0041                       ; Setup start position in VDP memory
0042                       ;------------------------------------------------------
0043 66C2 0204  20 !       li    tmp0,vdp.fb.toprow.sit
     66C4 0050     
0044                                                   ; VDP target address (Xth line on screen!)
0045 66C6 C1A0  34         mov   @tv.ruler.visible,tmp2
     66C8 A210     
0046                                                   ; Is ruler visible on screen?
0047 66CA 1302  14         jeq   fb.vdpdump.calc       ; No, continue with calculation
0048 66CC A120  34         a     @fb.colsline,tmp0     ; Yes, add 2nd line offset
     66CE A30E     
0049                       ;------------------------------------------------------
0050                       ; Refresh VDP content with framebuffer
0051                       ;------------------------------------------------------
0052               fb.vdpdump.calc:
0053 66D0 3960  74         mpy   @fb.colsline,tmp1     ; columns per line * number of rows in parm1
     66D2 A30E     
0054                                                   ; 16 bit part is in tmp2!
0055 66D4 C160  34         mov   @fb.top.ptr,tmp1      ; RAM Source address
     66D6 A300     
0056               
0057 66D8 0286  22         ci    tmp2,0                ; \ Exit early if nothing to copy
     66DA 0000     
0058 66DC 1304  14         jeq   fb.vdpdump.exit       ; /
0059               
0060 66DE 06A0  32         bl    @xpym2v               ; Copy to VDP
     66E0 24A6     
0061                                                   ; \ i  tmp0 = VDP target address
0062                                                   ; | i  tmp1 = RAM source address
0063                                                   ; / i  tmp2 = Bytes to copy
0064               
0065 66E2 04E0  34         clr   @fb.dirty             ; Reset frame buffer dirty flag
     66E4 A318     
0066                       ;------------------------------------------------------
0067                       ; Exit
0068                       ;------------------------------------------------------
0069               fb.vdpdump.exit:
0070 66E6 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0071 66E8 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0072 66EA C139  30         mov   *stack+,tmp0          ; Pop tmp0
0073 66EC C2F9  30         mov   *stack+,r11           ; Pop r11
0074 66EE 045B  20         b     *r11                  ; Return to caller
                   < stevie_b4.asm
0088                       copy  "fb.scan.fname.asm"   ; Scan line for device & filename
     **** ****     > fb.scan.fname.asm
0001               * FILE......: fb.scan.fname.asm
0002               * Purpose...: Scan current line for possible filename
0003               
0004               ***************************************************************
0005               * fb.scan.fname
0006               * Scan current line for possible filename
0007               ***************************************************************
0008               *  bl   @fb.scan.fname
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @cmdb.dflt.fname = Pointer to string with default filename
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0,tmp1,tmp2,tmp3,tmp4,r2,r3
0018               ********|*****|*********************|**************************
0019               fb.scan.fname:
0020 66F0 0649  14         dect  stack
0021 66F2 C64B  30         mov   r11,*stack            ; Save return address
0022 66F4 0649  14         dect  stack
0023 66F6 C644  30         mov   tmp0,*stack           ; Push tmp0
0024 66F8 0649  14         dect  stack
0025 66FA C645  30         mov   tmp1,*stack           ; Push tmp1
0026 66FC 0649  14         dect  stack
0027 66FE C646  30         mov   tmp2,*stack           ; Push tmp2
0028 6700 0649  14         dect  stack
0029 6702 C647  30         mov   tmp3,*stack           ; Push tmp3
0030 6704 0649  14         dect  stack
0031 6706 C648  30         mov   tmp4,*stack           ; Push tmp4
0032 6708 0649  14         dect  stack
0033 670A C642  30         mov   r2,*stack             ; Push r2
0034 670C 0649  14         dect  stack
0035 670E C643  30         mov   r3,*stack             ; Push r3
0036                       ;-------------------------------------------------------
0037                       ; Initialisation
0038                       ;-------------------------------------------------------
0039               fb.scan.fname.copy:
0040 6710 06A0  32         bl    @film
     6712 2236     
0041 6714 A7B2                   data cmdb.dflt.fname,>00,80
     6716 0000     
     6718 0050     
0042                                                   ; Clear filename in buffer
0043               
0044 671A 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     671C 3108     
0045                                                   ; \ i   @fb.top      = Address top row in FB
0046                                                   ; | i   @fb.topline  = Top line in FB
0047                                                   ; | i   @fb.row      = Current row in FB
0048                                                   ; |                  (offset 0..@fb.scrrows)
0049                                                   ; | i   @fb.column   = Current column in FB
0050                                                   ; | i   @fb.colsline = Columns per line FB
0051                                                   ; |
0052                                                   ; / o   @fb.current  = Updated pointer
0053               
0054                       ; Register usage in following code
0055                       ;
0056                       ; tmp0 = Pointer to first character in framebuffer line
0057                       ; tmp1 = Destination address for filename copy
0058                       ; tmp2 = Pointer to last character in framebuffer line
0059                       ; tmp3 = Pointer to first character in valid devices string
0060                       ; tmp4 = Pointer to last character in valid devices string
0061                       ; r3   = Temporary storage
0062               
0063                       ;-------------------------------------------------------
0064                       ; (1) Prepare for lookup
0065                       ;-------------------------------------------------------
0066 671E 04C2  14         clr   r2                    ; Length counter
0067 6720 0203  20         li    r3,>2c00              ; Delimiter is ASCII 44 (>2c) ","
     6722 2C00     
0068               
0069 6724 C120  34         mov   @fb.current,tmp0      ; Start address in framebuffer
     6726 A302     
0070 6728 C184  18         mov   tmp0,tmp2             ; \ calculate end address of
0071 672A A1A0  34         a     @fb.row.length,tmp2   ; / source line in framebuffer
     672C A308     
0072               
0073 672E 0205  20         li    tmp1,cmdb.dflt.fname  ; Destination for character copy
     6730 A7B2     
0074 6732 0585  14         inc   tmp1                  ; Skip length byte, will be set later
0075               
0076 6734 0207  20         li    tmp3,def.devices      ; Get string with valid devices
     6736 3DA8     
0077 6738 C217  26         mov   *tmp3,tmp4            ; \ Get length byte, skipping
0078 673A 0988  32         srl   tmp4,8                ; / 1st following character
0079 673C A207  18         a     tmp3,tmp4             ; Calc end address of valid devices
0080 673E 05C7  14         inct  tmp3                  ; Skip length byte and following char
0081                       ;-------------------------------------------------------
0082                       ; (2) Compare char in framebuffer with device lookup
0083                       ;-------------------------------------------------------
0084               fb.scan.fname.device.loop:
0085 6740 95D4  34         cb    *tmp0,*tmp3           ; Does char match with lookup?
0086 6742 160A  14         jne   fb.scan.fname.nextdev.loop
0087                                                   ; No, look for next device (3)
0088               
0089 6744 DD74  42         movb  *tmp0+,*tmp1+         ; Copy byte to destination
0090 6746 0582  14         inc   r2                    ; Increase length
0091               
0092 6748 0587  14         inc   tmp3                  ; Next char in lookup
0093 674A 90D7  26         cb    *tmp3,r3              ; Did we find the delimiter?
0094 674C 130A  14         jeq   fb.scan.fname.copy.rest
0095                                                   ; Yes, device match. Now copy rest (4)
0096               
0097 674E 8207  18         c     tmp3,tmp4             ; At end in lookup string?
0098 6750 1323  14         jeq   fb.scan.fname.exit    ; Yes, exit without match
0099               
0100 6752 8184  18         c     tmp0,tmp2             ; End of line reached?
0101 6754 12F5  14         jle   fb.scan.fname.device.loop
0102                                                   ; Not yet, next iteration (2)
0103               
0104 6756 1020  14         jmp   fb.scan.fname.exit    ; Yes, exit without match
0105                       ;-------------------------------------------------------
0106                       ; (3) Goto next device in lookup string
0107                       ;-------------------------------------------------------
0108               fb.scan.fname.nextdev.loop:
0109 6758 90F7  28         cb    *tmp3+,r3             ; Did we find the delimiter (comma)?
0110 675A 13F2  14         jeq   fb.scan.fname.device.loop
0111                                                   ; Yes, exit here and start compare (2)
0112               
0113 675C 8207  18         c     tmp3,tmp4             ; End of lookup string reached?
0114 675E 151C  14         jgt   fb.scan.fname.exit    ; Yes, exit without match!
0115               
0116 6760 10FB  14         jmp   fb.scan.fname.nextdev.loop
0117                                                   ; No, next char in lookup string
0118                       ;------------------------------------------------------
0119                       ; (4) Copy rest of device/filename
0120                       ;------------------------------------------------------
0121               fb.scan.fname.copy.rest:
0122 6762 1000  14         nop                         ; Placeholder for now
0123               fb.scan.fname.copy.rest.loop:
0124 6764 DD74  42         movb  *tmp0+,*tmp1+         ; Copy byte to destination
0125 6766 0582  14         inc   r2                    ; Increase length
0126                       ;------------------------------------------------------
0127                       ; (4a) Look for delimiters SPACE and NULL
0128                       ;------------------------------------------------------
0129 6768 0203  20         li    r3,>2000              ; \ Delimiters ASCII 32 (>20) " "
     676A 2000     
0130                                                   ; /            ASCII 00 (>00) ""
0131 676C 90D4  26         cb    *tmp0,r3
0132 676E 1311  14         jeq   fb.scan.fname.done    ; Match, file name copy done (5)
0133 6770 06C3  14         swpb  r3
0134 6772 90D4  26         cb    *tmp0,r3
0135 6774 130E  14         jeq   fb.scan.fname.done    ; Match, file name copy done (5)
0136               
0137                       ;------------------------------------------------------
0138                       ; (4b) Look for delimiters " and '
0139                       ;------------------------------------------------------
0140 6776 0203  20         li    r3,>2227              ; \ Delimiters ASCII 34 (>22) """
     6778 2227     
0141                                                   ; /            ASCII 39 (>27) "'"
0142               
0143 677A 90D4  26         cb    *tmp0,r3
0144 677C 130A  14         jeq   fb.scan.fname.done    ; Match, file name copy done (5)
0145 677E 06C3  14         swpb  r3
0146 6780 90D4  26         cb    *tmp0,r3
0147 6782 1307  14         jeq   fb.scan.fname.done    ; Match, file name copy done (5)
0148               
0149 6784 8184  18         c     tmp0,tmp2             ; End of line reached?
0150 6786 12EE  14         jle   fb.scan.fname.copy.rest.loop
0151                                                   ; Not yet, next iteration (4)
0152               
0153 6788 1004  14         jmp   fb.scan.fname.done    ; File name copy done (5)
0154                       ;------------------------------------------------------
0155                       ; Asserts failed
0156                       ;------------------------------------------------------
0157               fb.scan.fname.crash
0158 678A C80B  38         mov   r11,@>ffce            ; \ Save caller address
     678C FFCE     
0159 678E 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     6790 2026     
0160                       ;------------------------------------------------------
0161                       ; (5) File name copy done
0162                       ;------------------------------------------------------
0163               fb.scan.fname.done:
0164 6792 0A82  32         sla   r2,8                  ; Left align
0165 6794 D802  38         movb  r2,@cmdb.dflt.fname   ; Set length byte
     6796 A7B2     
0166                       ;------------------------------------------------------
0167                       ; Exit
0168                       ;------------------------------------------------------
0169               fb.scan.fname.exit:
0170 6798 C0F9  30         mov   *stack+,r3            ; Pop r3
0171 679A C0B9  30         mov   *stack+,r2            ; Pop r2
0172 679C C239  30         mov   *stack+,tmp4          ; Pop tmp4
0173 679E C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0174 67A0 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0175 67A2 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0176 67A4 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0177 67A6 C2F9  30         mov   *stack+,r11           ; Pop R11
0178 67A8 045B  20         b     *r11                  ; Return to caller
                   < stevie_b4.asm
0089                       copy  "fb.hscroll.asm"      ; Horizontal scroll frame buffer
     **** ****     > fb.hscroll.asm
0001               * FILE......: fb.hscroll.asm
0002               * Purpose...: Horizontal scroll frame buffer window
0003               
0004               ***************************************************************
0005               * fb.hscroll.asm
0006               * Horizontal scroll frame buffer window
0007               ***************************************************************
0008               *  bl   @fb.hscroll.asm
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = View Window Column Offset
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0,tmp1,tmp2
0018               ********|*****|*********************|**************************
0019               fb.hscroll:
0020 67AA 0649  14         dect  stack
0021 67AC C64B  30         mov   r11,*stack            ; Save return address
0022 67AE 0649  14         dect  stack
0023 67B0 C644  30         mov   tmp0,*stack           ; Push tmp0
0024 67B2 0649  14         dect  stack
0025 67B4 C645  30         mov   tmp1,*stack           ; Push tmp1
0026 67B6 0649  14         dect  stack
0027 67B8 C646  30         mov   tmp2,*stack           ; Push tmp2
0028                       ;-------------------------------------------------------
0029                       ; Set View Window Column Offset
0030                       ;-------------------------------------------------------
0031 67BA C820  54         mov   @parm1,@fb.vwco       ; Set View Window Column Offset
     67BC A006     
     67BE A310     
0032               
0033 67C0 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     67C2 A31A     
0034 67C4 0720  34         seto  @fb.dirty             ; Trigger refresh
     67C6 A318     
0035               
0036 67C8 C820  54         mov   @fb.topline,@parm1
     67CA A304     
     67CC A006     
0037 67CE 06A0  32         bl    @fb.refresh           ; \ Refresh frame buffer
     67D0 6818     
0038                                                   ; | i  @parm1 = Line to start with
0039                                                   ; /             (becomes @fb.topline)
0040                       ;------------------------------------------------------
0041                       ; Exit
0042                       ;------------------------------------------------------
0043               fb.hscroll.exit:
0044 67D2 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0045 67D4 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0046 67D6 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0047 67D8 C2F9  30         mov   *stack+,r11           ; Pop r11
0048 67DA 045B  20         b     *r11                  ; Return to caller
                   < stevie_b4.asm
0090                       copy  "fb.restore.asm"      ; Restore framebuffer to normal opr.
     **** ****     > fb.restore.asm
0001               * FILE......: fb.restore.asm
0002               * Purpose...: Restore frame buffer to normal operation
0003               
0004               ***************************************************************
0005               * fb.restore
0006               * Restore frame buffer to normal operation (e.g. after command
0007               * has completed)
0008               ***************************************************************
0009               *  bl   @fb.restore
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @parm1 = cursor YX position
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * NONE
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * NONE
0019               ********|*****|*********************|**************************
0020               fb.restore:
0021 67DC 0649  14         dect  stack
0022 67DE C64B  30         mov   r11,*stack            ; Save return address
0023 67E0 0649  14         dect  stack
0024 67E2 C660  46         mov   @parm1,*stack         ; Push @parm1
     67E4 A006     
0025                       ;------------------------------------------------------
0026                       ; Refresh framebuffer
0027                       ;------------------------------------------------------
0028 67E6 C820  54         mov   @fb.topline,@parm1
     67E8 A304     
     67EA A006     
0029 67EC 06A0  32         bl    @fb.refresh           ; Refresh frame buffer content
     67EE 6818     
0030                                                   ; \ @i  parm1 = Line to start with
0031                       ;------------------------------------------------------
0032                       ; Color marked lines
0033                       ;------------------------------------------------------
0034 67F0 0720  34         seto  @parm1                ; Skip Asserts
     67F2 A006     
0035 67F4 06A0  32         bl    @fb.colorlines        ; Colorize frame buffer content
     67F6 6612     
0036                                                   ; \ i  @parm1 = Force refresh if >ffff
0037                                                   ; /
0038                       ;------------------------------------------------------
0039                       ; Color status lines
0040                       ;------------------------------------------------------
0041 67F8 C820  54         mov   @tv.color,@parm1      ; Set normal color
     67FA A218     
     67FC A006     
0042 67FE 06A0  32         bl    @pane.colorscheme.statlines
     6800 735A     
0043                                                   ; Set color combination for status lines
0044                                                   ; \ i  @parm1 = Color combination
0045                                                   ; /
0046                       ;------------------------------------------------------
0047                       ; Update status line and show cursor
0048                       ;------------------------------------------------------
0049 6802 0720  34         seto  @fb.status.dirty      ; Trigger status line update
     6804 A31A     
0050               
0051 6806 06A0  32         bl    @pane.cursor.blink    ; Show cursor
     6808 7348     
0052                       ;------------------------------------------------------
0053                       ; Exit
0054                       ;------------------------------------------------------
0055               fb.restore.exit:
0056 680A C839  50         mov   *stack+,@parm1        ; Pop @parm1
     680C A006     
0057 680E C820  46         mov   @parm1,@wyx           ; Set cursor position
     6810 A006     
     6812 832A     
0058 6814 C2F9  30         mov   *stack+,r11           ; Pop R11
0059 6816 045B  20         b     *r11                  ; Return
                   < stevie_b4.asm
0091                       copy  "fb.refresh.asm"      ; Refresh framebuffer
     **** ****     > fb.refresh.asm
0001               * FILE......: fb.refresh.asm
0002               * Purpose...: Refresh frame buffer with editor buffer content
0003               
0004               ***************************************************************
0005               * fb.refresh
0006               * Refresh frame buffer with editor buffer content
0007               ***************************************************************
0008               * bl @fb.refresh
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Line to start with (becomes @fb.topline)
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0,tmp1,tmp2
0018               ********|*****|*********************|**************************
0019               fb.refresh:
0020 6818 0649  14         dect  stack
0021 681A C64B  30         mov   r11,*stack            ; Push return address
0022 681C 0649  14         dect  stack
0023 681E C644  30         mov   tmp0,*stack           ; Push tmp0
0024 6820 0649  14         dect  stack
0025 6822 C645  30         mov   tmp1,*stack           ; Push tmp1
0026 6824 0649  14         dect  stack
0027 6826 C646  30         mov   tmp2,*stack           ; Push tmp2
0028                       ;------------------------------------------------------
0029                       ; Setup starting position in index
0030                       ;------------------------------------------------------
0031 6828 C820  54         mov   @parm1,@fb.topline
     682A A006     
     682C A304     
0032 682E 04E0  34         clr   @parm2                ; Target row in frame buffer
     6830 A008     
0033                       ;------------------------------------------------------
0034                       ; Check if already at EOF
0035                       ;------------------------------------------------------
0036 6832 8820  50         c     @parm1,@edb.lines     ; EOF reached?
     6834 A006     
     6836 A504     
0037 6838 1312  14         jeq   fb.refresh.erase_eob  ; Yes, no need to unpack
0038                       ;------------------------------------------------------
0039                       ; Unpack line to frame buffer
0040                       ;------------------------------------------------------
0041               fb.refresh.unpack_line:
0042 683A C820  54         mov   @fb.vwco,@parm3       ; Set view window column offset
     683C A310     
     683E A00A     
0043               
0044 6840 06A0  32         bl    @edb.line.unpack.fb   ; Unpack line from editor buffer
     6842 7336     
0045                                                   ; \ i  parm1    = Line to unpack
0046                                                   ; | i  parm2    = Target row in frame buffer
0047                                                   ; | i  parm3    = Column offset
0048                                                   ; / o  outparm1 = Length of line
0049               
0050 6844 05A0  34         inc   @parm1                ; Next line in editor buffer
     6846 A006     
0051 6848 05A0  34         inc   @parm2                ; Next row in frame buffer
     684A A008     
0052                       ;------------------------------------------------------
0053                       ; Last row in editor buffer reached ?
0054                       ;------------------------------------------------------
0055 684C 8820  50         c     @parm1,@edb.lines     ; BOT reached?
     684E A006     
     6850 A504     
0056 6852 1305  14         jeq   fb.refresh.erase_eob  ; yes, erase until end of frame buffer
0057               
0058 6854 8820  50         c     @parm2,@fb.scrrows
     6856 A008     
     6858 A31C     
0059 685A 11EF  14         jlt   fb.refresh.unpack_line
0060                                                   ; No, unpack next line
0061 685C 1011  14         jmp   fb.refresh.exit       ; Yes, exit without erasing
0062                       ;------------------------------------------------------
0063                       ; Erase until end of frame buffer
0064                       ;------------------------------------------------------
0065               fb.refresh.erase_eob:
0066 685E C120  34         mov   @parm2,tmp0           ; Current row
     6860 A008     
0067 6862 C160  34         mov   @fb.scrrows,tmp1      ; Rows framebuffer
     6864 A31C     
0068 6866 6144  18         s     tmp0,tmp1             ; tmp1 = rows framebuffer - current row
0069 6868 3960  74         mpy   @fb.colsline,tmp1     ; tmp2 = cols per row * tmp1
     686A A30E     
0070               
0071 686C C186  18         mov   tmp2,tmp2             ; Already at end of frame buffer?
0072 686E 1308  14         jeq   fb.refresh.exit       ; Yes, so exit
0073               
0074 6870 3920  74         mpy   @fb.colsline,tmp0     ; cols per row * tmp0 (Result in tmp1!)
     6872 A30E     
0075 6874 A160  34         a     @fb.top.ptr,tmp1      ; Add framebuffer base
     6876 A300     
0076               
0077 6878 C105  18         mov   tmp1,tmp0             ; tmp0 = Memory start address
0078 687A 04C5  14         clr   tmp1                  ; Clear with >00 character
0079               
0080 687C 06A0  32         bl    @xfilm                ; \ Fill memory
     687E 223C     
0081                                                   ; | i  tmp0 = Memory start address
0082                                                   ; | i  tmp1 = Byte to fill
0083                                                   ; / i  tmp2 = Number of bytes to fill
0084                       ;------------------------------------------------------
0085                       ; Exit
0086                       ;------------------------------------------------------
0087               fb.refresh.exit:
0088 6880 0720  34         seto  @fb.dirty             ; Refresh screen
     6882 A318     
0089               
0090 6884 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0091 6886 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0092 6888 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0093 688A C2F9  30         mov   *stack+,r11           ; Pop r11
0094 688C 045B  20         b     *r11                  ; Return to caller
                   < stevie_b4.asm
0092                       copy  "fb.get.nonblank.asm" ; Get column of first non-blank char
     **** ****     > fb.get.nonblank.asm
0001               * FILE......: fb.get.nonblank.asm
0002               * Purpose...: Get column of first non-blank character
0003               
0004               ***************************************************************
0005               * fb.get.nonblank
0006               * Get column of first non-blank character in specified line
0007               ***************************************************************
0008               * bl @fb.get.nonblank
0009               *--------------------------------------------------------------
0010               * OUTPUT
0011               * @outparm1 = Matching column
0012               * @outparm2 = Character on matching column
0013               ********|*****|*********************|**************************
0014               fb.get.nonblank:
0015 688E 0649  14         dect  stack
0016 6890 C64B  30         mov   r11,*stack            ; Save return address
0017                       ;------------------------------------------------------
0018                       ; Prepare for scanning
0019                       ;------------------------------------------------------
0020 6892 04E0  34         clr   @fb.column
     6894 A30C     
0021               
0022 6896 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     6898 3108     
0023                                                   ; \ i   @fb.top      = Address top row in FB
0024                                                   ; | i   @fb.topline  = Top line in FB
0025                                                   ; | i   @fb.row      = Current row in FB
0026                                                   ; |                  (offset 0..@fb.scrrows)
0027                                                   ; | i   @fb.column   = Current column in FB
0028                                                   ; | i   @fb.colsline = Columns per line FB
0029                                                   ; |
0030                                                   ; / o   @fb.current  = Updated pointer
0031               
0032 689A 06A0  32         bl    @edb.line.getlength2  ; \ Get length current line
     689C 3718     
0033                                                   ; | i  @fb.row        = Row in frame buffer
0034                                                   ; / o  @fb.row.length = Length of row
0035               
0036 689E C1A0  34         mov   @fb.row.length,tmp2   ; Set loop counter
     68A0 A308     
0037 68A2 1313  14         jeq   fb.get.nonblank.nomatch
0038                                                   ; Exit if empty line
0039 68A4 C120  34         mov   @fb.current,tmp0      ; Pointer to current char
     68A6 A302     
0040 68A8 04C5  14         clr   tmp1
0041                       ;------------------------------------------------------
0042                       ; Scan line for non-blank character
0043                       ;------------------------------------------------------
0044               fb.get.nonblank.loop:
0045 68AA D174  28         movb  *tmp0+,tmp1           ; Get character
0046 68AC 130E  14         jeq   fb.get.nonblank.nomatch
0047                                                   ; Exit if empty line
0048 68AE 0285  22         ci    tmp1,>2000            ; Whitespace?
     68B0 2000     
0049 68B2 1503  14         jgt   fb.get.nonblank.match
0050 68B4 0606  14         dec   tmp2                  ; Counter--
0051 68B6 16F9  14         jne   fb.get.nonblank.loop
0052 68B8 1008  14         jmp   fb.get.nonblank.nomatch
0053                       ;------------------------------------------------------
0054                       ; Non-blank character found
0055                       ;------------------------------------------------------
0056               fb.get.nonblank.match:
0057 68BA 6120  34         s     @fb.current,tmp0      ; Calculate column
     68BC A302     
0058 68BE 0604  14         dec   tmp0
0059 68C0 C804  38         mov   tmp0,@outparm1        ; Save column
     68C2 A018     
0060 68C4 D805  38         movb  tmp1,@outparm2        ; Save character
     68C6 A01A     
0061 68C8 1004  14         jmp   fb.get.nonblank.exit
0062                       ;------------------------------------------------------
0063                       ; No non-blank character found
0064                       ;------------------------------------------------------
0065               fb.get.nonblank.nomatch:
0066 68CA 04E0  34         clr   @outparm1             ; X=0
     68CC A018     
0067 68CE 04E0  34         clr   @outparm2             ; Null
     68D0 A01A     
0068                       ;------------------------------------------------------
0069                       ; Exit
0070                       ;------------------------------------------------------
0071               fb.get.nonblank.exit:
0072 68D2 C2F9  30         mov   *stack+,r11           ; Pop r11
0073 68D4 045B  20         b     *r11                  ; Return to caller
                   < stevie_b4.asm
0093                       ;-----------------------------------------------------------------------
0094                       ; Screen panes
0095                       ;-----------------------------------------------------------------------
0096                       copy  "pane.topline.asm"      ; Top line
     **** ****     > pane.topline.asm
0001               * FILE......: pane.topline.asm
0002               * Purpose...: Pane "status top line"
0003               
0004               ***************************************************************
0005               * pane.topline
0006               * Draw top line
0007               ***************************************************************
0008               * bl  @pane.topline
0009               *--------------------------------------------------------------
0010               * OUTPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * Register usage
0014               * tmp0
0015               ********|*****|*********************|**************************
0016               pane.topline:
0017 68D6 0649  14         dect  stack
0018 68D8 C64B  30         mov   r11,*stack            ; Save return address
0019 68DA 0649  14         dect  stack
0020 68DC C644  30         mov   tmp0,*stack           ; Push tmp0
0021 68DE 0649  14         dect  stack
0022 68E0 C660  42         mov   @wyx,*stack           ; Push cursor position
     68E2 832A     
0023                       ;------------------------------------------------------
0024                       ; Show current file
0025                       ;------------------------------------------------------
0026               pane.topline.file:
0027 68E4 06A0  32         bl    @at
     68E6 26E0     
0028 68E8 0000                   byte 0,0              ; y=0, x=0
0029               
0030 68EA C820  54         mov   @edb.filename.ptr,@parm1
     68EC A514     
     68EE A006     
0031                                                   ; Get string to display
0032 68F0 0204  20         li    tmp0,47
     68F2 002F     
0033 68F4 C804  38         mov   tmp0,@parm2           ; Set requested length
     68F6 A008     
0034 68F8 0204  20         li    tmp0,32
     68FA 0020     
0035 68FC C804  38         mov   tmp0,@parm3           ; Set character to fill
     68FE A00A     
0036 6900 0204  20         li    tmp0,rambuf
     6902 A100     
0037 6904 C804  38         mov   tmp0,@parm4           ; Set pointer to buffer for output string
     6906 A00C     
0038               
0039 6908 06A0  32         bl    @tv.pad.string        ; Pad string to specified length
     690A 346A     
0040                                                   ; \ i  @parm1 = Pointer to string
0041                                                   ; | i  @parm2 = Requested length
0042                                                   ; | i  @parm3 = Fill characgter
0043                                                   ; | i  @parm4 = Pointer to buffer with
0044                                                   ; /             output string
0045               
0046 690C C160  34         mov   @outparm1,tmp1        ; \ Display padded filename
     690E A018     
0047 6910 06A0  32         bl    @xutst0               ; /
     6912 2420     
0048                       ;------------------------------------------------------
0049                       ; Check if M1/M2 markers need to be shown
0050                       ;------------------------------------------------------
0051               pane.topline.showmarkers:
0052 6914 C120  34         mov   @edb.block.m1,tmp0    ; \
     6916 A50E     
0053 6918 0284  22         ci    tmp0,>ffff            ; | Exit early if M1 unset (>ffff)
     691A FFFF     
0054 691C 132C  14         jeq   pane.topline.exit     ; /
0055               
0056 691E C120  34         mov   @tv.task.oneshot,tmp0 ; \
     6920 A226     
0057 6922 0284  22         ci    tmp0,pane.topline.oneshot.clearmsg
     6924 3782     
0058                                                   ; | Exit early if overlay message visible
0059 6926 1327  14         jeq   pane.topline.exit     ; /
0060                       ;------------------------------------------------------
0061                       ; Show M1 marker
0062                       ;------------------------------------------------------
0063 6928 06A0  32         bl    @putat
     692A 2442     
0064 692C 0034                   byte 0,52
0065 692E 3B72                   data txt.m1           ; Show M1 marker message
0066               
0067 6930 C820  54         mov   @edb.block.m1,@parm1
     6932 A50E     
     6934 A006     
0068 6936 06A0  32         bl    @tv.uint16.unpack     ; Unpack 16 bit unsigned integer to string
     6938 343E     
0069                                                   ; \ i @parm1           = uint16
0070                                                   ; / o @uint16.unpacked = Output string
0071               
0072 693A 0204  20         li    tmp0,>0500
     693C 0500     
0073 693E D804  38         movb  tmp0,@uint16.unpacked ; Set string length to 5 (padding)
     6940 A02C     
0074               
0075 6942 06A0  32         bl    @putat
     6944 2442     
0076 6946 0037                   byte 0,55
0077 6948 A02C                   data uint16.unpacked  ; Show M1 value
0078                       ;------------------------------------------------------
0079                       ; Show M2 marker
0080                       ;------------------------------------------------------
0081 694A C120  34         mov   @edb.block.m2,tmp0    ; \
     694C A510     
0082 694E 0284  22         ci    tmp0,>ffff            ; | Exit early if M2 unset (>ffff)
     6950 FFFF     
0083 6952 1311  14         jeq   pane.topline.exit     ; /
0084               
0085 6954 06A0  32         bl    @putat
     6956 2442     
0086 6958 003E                   byte 0,62
0087 695A 3B76                   data txt.m2           ; Show M2 marker message
0088               
0089 695C C820  54         mov   @edb.block.m2,@parm1
     695E A510     
     6960 A006     
0090 6962 06A0  32         bl    @tv.uint16.unpack     ; Unpack 16 bit unsigned integer to string
     6964 343E     
0091                                                   ; \ i @parm1           = uint16
0092                                                   ; / o @uint16.unpacked = Output string
0093               
0094 6966 0204  20         li    tmp0,>0500
     6968 0500     
0095 696A D804  38         movb  tmp0,@uint16.unpacked ; Set string length to 5 (padding)
     696C A02C     
0096               
0097 696E 06A0  32         bl    @putat
     6970 2442     
0098 6972 0041                   byte 0,65
0099 6974 A02C                   data uint16.unpacked  ; Show M2 value
0100                       ;------------------------------------------------------
0101                       ; Exit
0102                       ;------------------------------------------------------
0103               pane.topline.exit:
0104 6976 C839  42         mov   *stack+,@wyx          ; Pop cursor position
     6978 832A     
0105 697A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0106 697C C2F9  30         mov   *stack+,r11           ; Pop r11
0107 697E 045B  20         b     *r11                  ; Return
                   < stevie_b4.asm
0097                       copy  "pane.botline.asm"      ; Bottom line
     **** ****     > pane.botline.asm
0001               * FILE......: pane.botline.asm
0002               * Purpose...: Pane "status bottom line"
0003               
0004               ***************************************************************
0005               * pane.botline
0006               * Draw Stevie bottom line
0007               ***************************************************************
0008               * bl  @pane.botline
0009               *--------------------------------------------------------------
0010               * OUTPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * Register usage
0014               * tmp0, tmp1
0015               ********|*****|*********************|**************************
0016               pane.botline:
0017 6980 0649  14         dect  stack
0018 6982 C64B  30         mov   r11,*stack            ; Save return address
0019 6984 0649  14         dect  stack
0020 6986 C644  30         mov   tmp0,*stack           ; Push tmp0
0021 6988 0649  14         dect  stack
0022 698A C645  30         mov   tmp1,*stack           ; Push tmp1
0023 698C 0649  14         dect  stack
0024 698E C660  42         mov   @wyx,*stack           ; Push cursor position
     6990 832A     
0025                       ;------------------------------------------------------
0026                       ; Prepare for special message
0027                       ;------------------------------------------------------
0028               pane.botline.mc:
0029 6992 0760  38         abs   @tv.specmsg.ptr       ; \
     6994 A234     
0030                                                   ; / Check if special message set
0031               
0032 6996 131F  14         jeq   pane.botline.shortcuts
0033                                                   ; No, skip message
0034               
0035 6998 C820  54         mov   @tv.cmdb.hcolor,@parm1
     699A A220     
     699C A006     
0036                                                   ; Get color combination of CMDB header line
0037               
0038 699E 0204  20         li    tmp0,pane.botrow-1    ; \
     69A0 001C     
0039 69A2 C804  38         mov   tmp0,@parm2           ; / Set row on physical screen
     69A4 A008     
0040               
0041 69A6 06A0  32         bl    @vdp.colors.line      ; Load color combination for line
     69A8 736C     
0042                                                   ; \ i  @parm1 = Color combination
0043                                                   ; / i  @parm2 = Row on physical screen
0044               
0045 69AA 06A0  32         bl    @at
     69AC 26E0     
0046 69AE 1C00                   byte pane.botrow-1,0  ; Cursor YX position
0047                       ;------------------------------------------------------
0048                       ; Pad message to 80 characters
0049                       ;------------------------------------------------------
0050 69B0 C820  54         mov   @tv.specmsg.ptr,@parm1
     69B2 A234     
     69B4 A006     
0051                                                   ; Pointer to length-prefixed string
0052 69B6 C820  54         mov   @const.80,@parm2      ; Requested length
     69B8 3924     
     69BA A008     
0053 69BC C820  54         mov   @const.32,@parm3      ; Fill with white space
     69BE 3922     
     69C0 A00A     
0054 69C2 0204  20         li    tmp0,rambuf           ; \
     69C4 A100     
0055 69C6 C804  38         mov   tmp0,@parm4           ; / Pointer to work buffer
     69C8 A00C     
0056               
0057 69CA 06A0  32         bl    @tv.pad.string        ; Pad string to specified length
     69CC 346A     
0058                                                   ; \ i  @parm1 = Pointer to string
0059                                                   ; | i  @parm2 = Requested length
0060                                                   ; | i  @parm3 = Fill character
0061                                                   ; | i  @parm4 = Pointer to buffer with
0062                                                   ; /             output string
0063                       ;------------------------------------------------------
0064                       ; Show special message
0065                       ;------------------------------------------------------
0066 69CE C160  34         mov   @outparm1,tmp1        ; Pointer to padded string
     69D0 A018     
0067               
0068 69D2 06A0  32         bl    @xutst0               ; Display string
     69D4 2420     
0069                                                   ; \ i  tmp1 = Pointer to string
0070                                                   ; / i  @wyx = Cursor position at
0071                       ;------------------------------------------------------
0072                       ; Show block shortcuts if set
0073                       ;------------------------------------------------------
0074               pane.botline.shortcuts:
0075 69D6 C120  34         mov   @edb.block.m2,tmp0    ; \
     69D8 A510     
0076 69DA 0584  14         inc   tmp0                  ; | Skip if M2 unset (>ffff)
0077                                                   ; /
0078 69DC 1305  14         jeq   pane.botline.show_keys
0079               
0080 69DE 06A0  32         bl    @putat
     69E0 2442     
0081 69E2 1D00                   byte pane.botrow,0
0082 69E4 3BC4                   data txt.keys.block   ; Show block shortcuts
0083               
0084 69E6 1015  14         jmp   pane.botline.show_mode
0085                       ;------------------------------------------------------
0086                       ; Show default message
0087                       ;------------------------------------------------------
0088               pane.botline.show_keys:
0089 69E8 C120  34         mov   @tib.session,tmp0     ; Active TI Basic session?
     69EA A0B4     
0090 69EC 130E  14         jeq   !
0091                       ;------------------------------------------------------
0092                       ; Show TI Basic session ID
0093                       ;------------------------------------------------------
0094 69EE 06A0  32         bl    @putat
     69F0 2442     
0095 69F2 1D00                   byte pane.botrow,0
0096 69F4 3B9A                   data txt.keys.defaultb
0097                                                   ; Show defaults + TI Basic
0098               
0099 69F6 C120  34         mov   @tib.session,tmp0     ; Get Session ID
     69F8 A0B4     
0100 69FA 0224  22         ai    tmp0,>0130            ; \ Turn into string with
     69FC 0130     
0101                                                   ; | length-byte prefix and
0102                                                   ; / ASCII offset 48 (>30)
0103               
0104 69FE C804  38         mov   tmp0,@rambuf          ; Copy to ram buffer for display
     6A00 A100     
0105               
0106 6A02 06A0  32         bl    @putat                ; \
     6A04 2442     
0107 6A06 1D29                   byte pane.botrow,41   ; | Display session-ID string
0108 6A08 A100                   data rambuf           ; / Y=bottom row, X=41
0109                       ;------------------------------------------------------
0110                       ; Show default keys
0111                       ;------------------------------------------------------
0112 6A0A 06A0  32 !       bl    @putat
     6A0C 2442     
0113 6A0E 1D00                   byte pane.botrow,0
0114 6A10 3B7A                   data txt.keys.default ; Show default keys
0115                       ;------------------------------------------------------
0116                       ; Show text editing mode
0117                       ;------------------------------------------------------
0118               pane.botline.show_mode:
0119 6A12 C120  34         mov   @edb.insmode,tmp0
     6A14 A50A     
0120 6A16 1605  14         jne   pane.botline.show_mode.insert
0121                       ;------------------------------------------------------
0122                       ; Overwrite mode
0123                       ;------------------------------------------------------
0124 6A18 06A0  32         bl    @putat
     6A1A 2442     
0125 6A1C 1D36                   byte  pane.botrow,54
0126 6A1E 3934                   data  txt.ovrwrite
0127 6A20 100C  14         jmp   pane.botline.show_dirty
0128                       ;------------------------------------------------------
0129                       ; Insert mode
0130                       ;------------------------------------------------------
0131               pane.botline.show_mode.insert:
0132 6A22 C120  34         mov   @edb.autoinsert,tmp0
     6A24 A50C     
0133 6A26 1305  14         jeq   pane.botline.show_mode.insert.noauto
0134                       ;------------------------------------------------------
0135                       ; Auto-Insert
0136                       ;------------------------------------------------------
0137 6A28 06A0  32         bl    @putat
     6A2A 2442     
0138 6A2C 1D36                   byte  pane.botrow,54
0139 6A2E 3940                   data  txt.autoinsert
0140 6A30 1004  14         jmp   pane.botline.show_dirty
0141                       ;------------------------------------------------------
0142                       ; No Auto-Insert
0143                       ;------------------------------------------------------
0144               pane.botline.show_mode.insert.noauto:
0145 6A32 06A0  32         bl    @putat
     6A34 2442     
0146 6A36 1D36                   byte  pane.botrow,54
0147 6A38 393A                   data  txt.insert
0148                       ;------------------------------------------------------
0149                       ; Show if text was changed in editor buffer
0150                       ;------------------------------------------------------
0151               pane.botline.show_dirty:
0152 6A3A C120  34         mov   @edb.dirty,tmp0
     6A3C A506     
0153 6A3E 1305  14         jeq   pane.botline.nochange
0154                       ;------------------------------------------------------
0155                       ; Show "*"
0156                       ;------------------------------------------------------
0157 6A40 06A0  32         bl    @putat
     6A42 2442     
0158 6A44 1D3A                   byte pane.botrow,58
0159 6A46 3946                   data txt.star
0160 6A48 1004  14         jmp   pane.botline.show_linecol
0161                       ;------------------------------------------------------
0162                       ; Show " "
0163                       ;------------------------------------------------------
0164               pane.botline.nochange:
0165 6A4A 06A0  32         bl    @putat
     6A4C 2442     
0166 6A4E 1D3A                   byte pane.botrow,58
0167 6A50 3C30                   data txt.ws1          ; Single white space
0168                       ;------------------------------------------------------
0169                       ; Show "line,column"
0170                       ;------------------------------------------------------
0171               pane.botline.show_linecol:
0172 6A52 C820  54         mov   @fb.row,@parm1
     6A54 A306     
     6A56 A006     
0173 6A58 06A0  32         bl    @fb.row2line          ; Row to editor line
     6A5A 30EE     
0174                                                   ; \ i @fb.topline = Top line in frame buffer
0175                                                   ; | i @parm1      = Row in frame buffer
0176                                                   ; / o @outparm1   = Matching line in EB
0177               
0178 6A5C 05A0  34         inc   @outparm1             ; Add base 1
     6A5E A018     
0179                       ;------------------------------------------------------
0180                       ; Show line
0181                       ;------------------------------------------------------
0182 6A60 06A0  32         bl    @putnum
     6A62 2A3E     
0183 6A64 1D3B                   byte  pane.botrow,59  ; YX
0184 6A66 A018                   data  outparm1,rambuf
     6A68 A100     
0185 6A6A 30                     byte  48              ; ASCII offset
0186 6A6B   20                   byte  32              ; Padding character
0187                       ;------------------------------------------------------
0188                       ; Show comma
0189                       ;------------------------------------------------------
0190 6A6C 06A0  32         bl    @putat
     6A6E 2442     
0191 6A70 1D40                   byte  pane.botrow,64
0192 6A72 392C                   data  txt.delim
0193                       ;------------------------------------------------------
0194                       ; Show column
0195                       ;------------------------------------------------------
0196 6A74 06A0  32         bl    @film
     6A76 2236     
0197 6A78 A105                   data rambuf+5,32,12   ; Clear work buffer with space character
     6A7A 0020     
     6A7C 000C     
0198               
0199 6A7E C120  34         mov   @fb.column,tmp0       ; Get column
     6A80 A30C     
0200 6A82 A120  34         a     @fb.vwco,tmp0         ; Add view window column offset
     6A84 A310     
0201 6A86 0584  14         inc   tmp0                  ; Offset 1
0202 6A88 C804  30         mov   tmp0,@waux1           ; Save in temporary
     6A8A 833C     
0203               
0204 6A8C 06A0  32         bl    @mknum                ; Convert unsigned number to string
     6A8E 29C0     
0205 6A90 833C                   data  waux1,rambuf    ; \
     6A92 A100     
0206 6A94 30                     byte  48              ; | ASCII offset
0207 6A95   20                   byte  32              ; / Fill character
0208               
0209 6A96 06A0  32         bl    @trimnum              ; Trim number to the left
     6A98 2A18     
0210 6A9A A100                   data  rambuf,rambuf+5,32
     6A9C A105     
     6A9E 0020     
0211               
0212 6AA0 0204  20         li    tmp0,>0600            ; "Fix" number length to clear junk chars
     6AA2 0600     
0213 6AA4 D804  38         movb  tmp0,@rambuf+5        ; Set length byte
     6AA6 A105     
0214               
0215                       ;------------------------------------------------------
0216                       ; Decide if row length is to be shown
0217                       ;------------------------------------------------------
0218 6AA8 C120  34         mov   @fb.column,tmp0       ; \ Base 1 for comparison
     6AAA A30C     
0219 6AAC A120  34         a     @fb.vwco,tmp0         ; | Add view window column offset
     6AAE A310     
0220 6AB0 0584  14         inc   tmp0                  ; /
0221 6AB2 8804  34         c     tmp0,@fb.row.length   ; Check if cursor on last column on row
     6AB4 A308     
0222 6AB6 1101  14         jlt   pane.botline.show_linecol.linelen
0223 6AB8 102E  14         jmp   pane.botline.show_linecol.colstring
0224                                                   ; Yes, skip showing row length
0225                       ;------------------------------------------------------
0226                       ; Add ',' delimiter and length of line to string
0227                       ;------------------------------------------------------
0228               pane.botline.show_linecol.linelen:
0229 6ABA C120  34         mov   @fb.column,tmp0       ; \
     6ABC A30C     
0230 6ABE A120  34         a     @fb.vwco,tmp0         ; | Add view window column offset
     6AC0 A310     
0231 6AC2 0205  20         li    tmp1,rambuf+7         ; | Determine column position for '/' char
     6AC4 A107     
0232 6AC6 0284  22         ci    tmp0,9                ; | based on number of digits in cursor X
     6AC8 0009     
0233 6ACA 1101  14         jlt   !                     ; | column.
0234 6ACC 0585  14         inc   tmp1                  ; /
0235               
0236 6ACE 0204  20 !       li    tmp0,>2f00            ; \ ASCII '/'
     6AD0 2F00     
0237 6AD2 DD44  32         movb  tmp0,*tmp1+           ; / Add delimiter to string
0238               
0239 6AD4 C805  30         mov   tmp1,@waux1           ; Backup position in ram buffer
     6AD6 833C     
0240               
0241 6AD8 06A0  32         bl    @mknum
     6ADA 29C0     
0242 6ADC A308                   data  fb.row.length,rambuf
     6ADE A100     
0243 6AE0 30                     byte  48              ; ASCII offset
0244 6AE1   20                   byte  32              ; Padding character
0245               
0246 6AE2 C160  30         mov   @waux1,tmp1           ; Restore position in ram buffer
     6AE4 833C     
0247               
0248 6AE6 C120  34         mov   @fb.row.length,tmp0   ; \ Get length of line
     6AE8 A308     
0249 6AEA 0284  22         ci    tmp0,10               ; /
     6AEC 000A     
0250 6AEE 110C  14         jlt   pane.botline.show_line.1digit
0251                       ;------------------------------------------------------
0252                       ; Assert
0253                       ;------------------------------------------------------
0254 6AF0 0284  22         ci    tmp0,99
     6AF2 0063     
0255 6AF4 1205  14         jle   pane.botline.show_line.2digits
0256                       ;------------------------------------------------------
0257                       ; Show length of line (3 digits)
0258                       ;------------------------------------------------------
0259               pane.botline.show_line.3digits:
0260 6AF6 0204  20         li    tmp0,rambuf+2
     6AF8 A102     
0261 6AFA DD74  42         movb  *tmp0+,*tmp1+         ; 1st digit row length
0262 6AFC DD74  42         movb  *tmp0+,*tmp1+         ; 2nd digit row length
0263 6AFE 1006  14         jmp   pane.botline.show_line.rest
0264                       ;------------------------------------------------------
0265                       ; Show length of line (2 digits)
0266                       ;------------------------------------------------------
0267               pane.botline.show_line.2digits:
0268 6B00 0204  20         li    tmp0,rambuf+3
     6B02 A103     
0269 6B04 DD74  42         movb  *tmp0+,*tmp1+         ; 1st digit row length
0270 6B06 1002  14         jmp   pane.botline.show_line.rest
0271                       ;------------------------------------------------------
0272                       ; Show length of line (1 digit)
0273                       ;------------------------------------------------------
0274               pane.botline.show_line.1digit:
0275 6B08 0204  20         li    tmp0,rambuf+4
     6B0A A104     
0276               pane.botline.show_line.rest:
0277 6B0C DD74  42         movb  *tmp0+,*tmp1+         ; 1st/Next digit row length
0278 6B0E DD60  48         movb  @rambuf+0,*tmp1+      ; Append a whitespace character
     6B10 A100     
0279 6B12 DD60  48         movb  @rambuf+0,*tmp1+      ; Append a whitespace character
     6B14 A100     
0280                       ;------------------------------------------------------
0281                       ; Show column string
0282                       ;------------------------------------------------------
0283               pane.botline.show_linecol.colstring:
0284 6B16 06A0  32         bl    @putat
     6B18 2442     
0285 6B1A 1D41                   byte pane.botrow,65
0286 6B1C A105                   data rambuf+5         ; Show string
0287                       ;------------------------------------------------------
0288                       ; Show lines in buffer unless on last line in file
0289                       ;------------------------------------------------------
0290 6B1E C820  54         mov   @fb.row,@parm1
     6B20 A306     
     6B22 A006     
0291 6B24 06A0  32         bl    @fb.row2line
     6B26 30EE     
0292 6B28 8820  50         c     @edb.lines,@outparm1
     6B2A A504     
     6B2C A018     
0293 6B2E 1605  14         jne   pane.botline.show_lines_in_buffer
0294               
0295 6B30 06A0  32         bl    @putat
     6B32 2442     
0296 6B34 1D48                   byte pane.botrow,72
0297 6B36 392E                   data txt.bottom
0298               
0299 6B38 1009  14         jmp   pane.botline.exit
0300                       ;------------------------------------------------------
0301                       ; Show lines in buffer
0302                       ;------------------------------------------------------
0303               pane.botline.show_lines_in_buffer:
0304 6B3A C820  46         mov   @edb.lines,@waux1
     6B3C A504     
     6B3E 833C     
0305               
0306 6B40 06A0  32         bl    @putnum
     6B42 2A3E     
0307 6B44 1D48                   byte pane.botrow,72   ; YX
0308 6B46 833C                   data waux1,rambuf
     6B48 A100     
0309 6B4A 30                     byte 48
0310 6B4B   20                   byte 32
0311                       ;------------------------------------------------------
0312                       ; Exit
0313                       ;------------------------------------------------------
0314               pane.botline.exit:
0315 6B4C C839  42         mov   *stack+,@wyx          ; Pop cursor position
     6B4E 832A     
0316 6B50 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0317 6B52 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0318 6B54 C2F9  30         mov   *stack+,r11           ; Pop r11
0319 6B56 045B  20         b     *r11                  ; Return
                   < stevie_b4.asm
0098                       copy  "pane.botline.busy.asm" ; Bottom line busy indicator
     **** ****     > pane.botline.busy.asm
0001               * FILE......: pane.botline.busy.asm
0002               * Purpose...: Busy indicator functions
0003               
0004               ***************************************************************
0005               * pane.botline.busy.on
0006               * Turn on busy indicator (colorscheme)
0007               ***************************************************************
0008               * bl  @pane.botline.busy.on
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               ********|*****|*********************|**************************
0019               pane.botline.busy.on:
0020 6B58 0649  14         dect  stack
0021 6B5A C64B  30         mov   r11,*stack            ; Save return address
0022 6B5C 0649  14         dect  stack
0023 6B5E C660  46         mov   @parm1,*stack         ; Push @parm1
     6B60 A006     
0024                       ;------------------------------------------------------
0025                       ; Show busyline indicator
0026                       ;------------------------------------------------------
0027 6B62 06A0  32         bl    @hchar
     6B64 27EC     
0028 6B66 1D00                   byte pane.botrow,0,32,55
     6B68 2037     
0029 6B6A FFFF                   data EOL              ; Clear hint on bottom row
0030               
0031 6B6C C820  54         mov   @tv.busycolor,@parm1  ; Get busy color
     6B6E A21C     
     6B70 A006     
0032 6B72 06A0  32         bl    @pane.colorscheme.statlines
     6B74 735A     
0033                                                   ; Set color combination for status line
0034                                                   ; \ i  @parm1 = Color combination
0035                                                   ; /
0036                       ;------------------------------------------------------
0037                       ; Exit
0038                       ;------------------------------------------------------
0039               pane.botline.busy.on.exit:
0040 6B76 C839  50         mov   *stack+,@parm1        ; Pop @parm1
     6B78 A006     
0041 6B7A C2F9  30         mov   *stack+,r11           ; Pop R11
0042 6B7C 045B  20         b     *r11                  ; Return to caller
0043               
0044               
0045               ***************************************************************
0046               * pane.botline.busy.off
0047               * Turn off busyline indicator (colorscheme)
0048               ***************************************************************
0049               * bl  @pane.botline.busy.off
0050               *--------------------------------------------------------------
0051               * INPUT
0052               * none
0053               *--------------------------------------------------------------
0054               * OUTPUT
0055               * none
0056               *--------------------------------------------------------------
0057               * Register usage
0058               * none
0059               ********|*****|*********************|**************************
0060               pane.botline.busy.off:
0061 6B7E 0649  14         dect  stack
0062 6B80 C64B  30         mov   r11,*stack            ; Save return address
0063 6B82 0649  14         dect  stack
0064 6B84 C660  46         mov   @parm1,*stack         ; Push @parm1
     6B86 A006     
0065                       ;------------------------------------------------------
0066                       ; Hide busyline indicator
0067                       ;------------------------------------------------------
0068 6B88 06A0  32         bl    @hchar
     6B8A 27EC     
0069 6B8C 1D00                   byte pane.botrow,0,32,72
     6B8E 2048     
0070 6B90 FFFF                   data EOL              ; Erase indicator in bottom row
0071               
0072 6B92 C820  54         mov   @tv.color,@parm1      ; Set normal color
     6B94 A218     
     6B96 A006     
0073 6B98 06A0  32         bl    @pane.colorscheme.statlines
     6B9A 735A     
0074                                                   ; Set color combination for status lines
0075                                                   ; \ i  @parm1 = Color combination
0076                                                   ; /
0077                       ;------------------------------------------------------
0078                       ; Exit
0079                       ;------------------------------------------------------
0080               pane.botline.busy.off.exit:
0081 6B9C C839  50         mov   *stack+,@parm1        ; Pop @parm1
     6B9E A006     
0082 6BA0 C2F9  30         mov   *stack+,r11           ; Pop R11
0083 6BA2 045B  20         b     *r11                  ; Return to caller
                   < stevie_b4.asm
0099                       copy  "pane.errline.asm"      ; Error line
     **** ****     > pane.errline.asm
0001               * FILE......: pane.errline.asm
0002               * Purpose...: Utilities for error lines
0003               
0004               ***************************************************************
0005               * pane.errline.drawcolor
0006               * Draw color on rows in error pane
0007               ***************************************************************
0008               * bl @pane.errline.drawcolor
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @tv.error.rows = Number of rows in error pane
0012               * @parm1         = Color combination
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0,tmp1,tmp2
0019               *--------------------------------------------------------------
0020               * Notes
0021               ********|*****|*********************|**************************
0022               pane.errline.drawcolor:
0023 6BA4 0649  14         dect  stack
0024 6BA6 C64B  30         mov   r11,*stack            ; Save return address
0025 6BA8 0649  14         dect  stack
0026 6BAA C644  30         mov   tmp0,*stack           ; Push tmp0
0027 6BAC 0649  14         dect  stack
0028 6BAE C645  30         mov   tmp1,*stack           ; Push tmp1
0029 6BB0 0649  14         dect  stack
0030 6BB2 C646  30         mov   tmp2,*stack           ; Push tmp2
0031                       ;-------------------------------------------------------
0032                       ; Determine 1st row in error pane
0033                       ;-------------------------------------------------------
0034 6BB4 0204  20         li    tmp0,pane.botrow      ; Get rows on screen
     6BB6 001D     
0035 6BB8 C144  18         mov   tmp0,tmp1             ; \ Get first row in error pane
0036 6BBA 6160  34         s     @tv.error.rows,tmp1   ; /
     6BBC A22C     
0037                       ;-------------------------------------------------------
0038                       ; Dump colors for row
0039                       ;-------------------------------------------------------
0040               pane.errline.drawcolor.loop:
0041 6BBE C805  38         mov   tmp1,@parm2           ; Row on physical screen
     6BC0 A008     
0042               
0043 6BC2 06A0  32         bl    @vdp.colors.line      ; Load color combination for line
     6BC4 736C     
0044                                                   ; \ i  @parm1 = Color combination
0045                                                   ; / i  @parm2 = Row on physical screen
0046               
0047 6BC6 0585  14         inc   tmp1                  ; Next row
0048 6BC8 8105  18         c     tmp1,tmp0             ; Last row reached?
0049 6BCA 11F9  14         jlt   pane.errline.drawcolor.loop
0050                                                   ; Not yet, next iteration
0051                       ;-------------------------------------------------------
0052                       ; Exit
0053                       ;-------------------------------------------------------
0054               pane.errline.drawcolor.exit:
0055 6BCC C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0056 6BCE C179  30         mov   *stack+,tmp1          ; Pop tmp1
0057 6BD0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0058 6BD2 C2F9  30         mov   *stack+,r11           ; Pop R11
0059 6BD4 045B  20         b     *r11                  ; Return to caller
0060               
0061               
0062               
0063               
0064               ***************************************************************
0065               * pane.errline.show
0066               * Show command buffer pane
0067               ***************************************************************
0068               * bl @pane.errline.show
0069               *--------------------------------------------------------------
0070               * INPUT
0071               * @tv.error.msg = Error message to display
0072               *--------------------------------------------------------------
0073               * OUTPUT
0074               * none
0075               *--------------------------------------------------------------
0076               * Register usage
0077               * tmp0,tmp1
0078               *--------------------------------------------------------------
0079               * Notes
0080               ********|*****|*********************|**************************
0081               pane.errline.show:
0082 6BD6 0649  14         dect  stack
0083 6BD8 C64B  30         mov   r11,*stack            ; Save return address
0084 6BDA 0649  14         dect  stack
0085 6BDC C644  30         mov   tmp0,*stack           ; Push tmp0
0086 6BDE 0649  14         dect  stack
0087 6BE0 C645  30         mov   tmp1,*stack           ; Push tmp1
0088               
0089 6BE2 0205  20         li    tmp1,>00f6            ; White on dark red
     6BE4 00F6     
0090 6BE6 C805  38         mov   tmp1,@parm1
     6BE8 A006     
0091               
0092 6BEA 06A0  32         bl    @pane.errline.drawcolor
     6BEC 6BA4     
0093                                                   ; Draw color on rows in error pane
0094                                                   ; \ i  @tv.error.rows = Number of rows
0095                                                   ; / i  @parm1         = Color combination
0096                       ;------------------------------------------------------
0097                       ; Pad error message up to 160 characters
0098                       ;------------------------------------------------------
0099 6BEE 0204  20         li    tmp0,tv.error.msg
     6BF0 A238     
0100 6BF2 C804  38         mov   tmp0,@parm1           ; Get pointer to string
     6BF4 A006     
0101               
0102 6BF6 0204  20         li    tmp0,240
     6BF8 00F0     
0103 6BFA C804  38         mov   tmp0,@parm2           ; Set requested length
     6BFC A008     
0104               
0105 6BFE 0204  20         li    tmp0,32
     6C00 0020     
0106 6C02 C804  38         mov   tmp0,@parm3           ; Set character to fill
     6C04 A00A     
0107               
0108 6C06 0204  20         li    tmp0,rambuf
     6C08 A100     
0109 6C0A C804  38         mov   tmp0,@parm4           ; Set pointer to buffer for output string
     6C0C A00C     
0110               
0111 6C0E 06A0  32         bl    @tv.pad.string        ; Pad string to specified length
     6C10 346A     
0112                                                   ; \ i  @parm1 = Pointer to string
0113                                                   ; | i  @parm2 = Requested length
0114                                                   ; | i  @parm3 = Fill character
0115                                                   ; | i  @parm4 = Pointer to buffer with
0116                                                   ; /             output string
0117                       ;------------------------------------------------------
0118                       ; Show error message
0119                       ;------------------------------------------------------
0120 6C12 06A0  32         bl    @at
     6C14 26E0     
0121 6C16 1A00                   byte pane.botrow-3,0  ; Set cursor
0122               
0123 6C18 C160  34         mov   @outparm1,tmp1        ; \ Display error message
     6C1A A018     
0124 6C1C 06A0  32         bl    @xutst0               ; /
     6C1E 2420     
0125               
0126 6C20 06A0  32         bl    @fb.calc.scrrows      ; Calculate number of rows
     6C22 3130     
0127                                                   ; \ i  @tv.ruler.visible = Ruler visible
0128                                                   ; | i  @edb.special.file = Special file flag
0129                                                   ; / i  @tv.error.visible = Error visible
0130               
0131 6C24 0720  34         seto  @tv.error.visible     ; Error line is visible
     6C26 A22A     
0132                       ;------------------------------------------------------
0133                       ; Exit
0134                       ;------------------------------------------------------
0135               pane.errline.show.exit:
0136 6C28 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0137 6C2A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0138 6C2C C2F9  30         mov   *stack+,r11           ; Pop r11
0139 6C2E 045B  20         b     *r11                  ; Return to caller
0140               
0141               
0142               
0143               ***************************************************************
0144               * pane.errline.hide
0145               * Hide error line
0146               ***************************************************************
0147               * bl @pane.errline.hide
0148               *--------------------------------------------------------------
0149               * INPUT
0150               * none
0151               *--------------------------------------------------------------
0152               * OUTPUT
0153               * none
0154               *--------------------------------------------------------------
0155               * Register usage
0156               * none
0157               *--------------------------------------------------------------
0158               * Hiding the error line passes pane focus to frame buffer.
0159               ********|*****|*********************|**************************
0160               pane.errline.hide:
0161 6C30 0649  14         dect  stack
0162 6C32 C64B  30         mov   r11,*stack            ; Save return address
0163 6C34 0649  14         dect  stack
0164 6C36 C644  30         mov   tmp0,*stack           ; Push tmp0
0165                       ;------------------------------------------------------
0166                       ; Get color combination
0167                       ;------------------------------------------------------
0168 6C38 06A0  32         bl    @errpane.init         ; Clear error line string in RAM
     6C3A 3308     
0169               
0170 6C3C C120  34         mov   @cmdb.visible,tmp0
     6C3E A702     
0171 6C40 1303  14         jeq   pane.errline.hide.fbcolor
0172                       ;------------------------------------------------------
0173                       ; CMDB pane color
0174                       ;------------------------------------------------------
0175 6C42 C120  34         mov   @tv.cmdb.hcolor,tmp0  ; Get colors of CMDB header line
     6C44 A220     
0176 6C46 1003  14         jmp   !
0177                       ;------------------------------------------------------
0178                       ; Frame buffer color
0179                       ;------------------------------------------------------
0180               pane.errline.hide.fbcolor:
0181 6C48 C120  34         mov   @tv.color,tmp0        ; Get colors
     6C4A A218     
0182 6C4C 0984  32         srl   tmp0,8                ; Get rid of status line colors
0183                       ;------------------------------------------------------
0184                       ; Dump colors
0185                       ;------------------------------------------------------
0186 6C4E C804  38 !       mov   tmp0,@parm1           ; set foreground/background color
     6C50 A006     
0187               
0188 6C52 06A0  32         bl    @pane.errline.drawcolor
     6C54 6BA4     
0189                                                   ; Draw color on rows in error pane
0190                                                   ; \ i  @tv.error.rows = Number of rows
0191                                                   ; / i  @parm1         = Color combination
0192               
0193 6C56 04E0  34         clr   @tv.error.visible     ; Error line no longer visible
     6C58 A22A     
0194               
0195 6C5A 06A0  32         bl    @fb.calc.scrrows      ; Calculate number of rows
     6C5C 3130     
0196                                                   ; \ i  @tv.ruler.visible = Ruler visible
0197                                                   ; | i  @edb.special.file = Special file flag
0198                                                   ; / i  @tv.error.visible = Error visible
0199                       ;------------------------------------------------------
0200                       ; Exit
0201                       ;------------------------------------------------------
0202               pane.errline.hide.exit:
0203 6C5E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0204 6C60 C2F9  30         mov   *stack+,r11           ; Pop r11
0205 6C62 045B  20         b     *r11                  ; Return to caller
                   < stevie_b4.asm
0100                       copy  "pane.utils.hint.asm"   ; Show hint in pane
     **** ****     > pane.utils.hint.asm
0001               * FILE......: pane.utils.asm
0002               * Purpose...: Show hint message in pane
0003               
0004               ***************************************************************
0005               * pane.show_hintx
0006               * Show hint message
0007               ***************************************************************
0008               * bl  @pane.show_hintx
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Cursor YX position
0012               * @parm2 = Pointer to Length-prefixed string
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0, tmp1, tmp2
0019               ********|*****|*********************|**************************
0020               pane.show_hintx:
0021 6C64 0649  14         dect  stack
0022 6C66 C64B  30         mov   r11,*stack            ; Save return address
0023 6C68 0649  14         dect  stack
0024 6C6A C644  30         mov   tmp0,*stack           ; Push tmp0
0025 6C6C 0649  14         dect  stack
0026 6C6E C645  30         mov   tmp1,*stack           ; Push tmp1
0027 6C70 0649  14         dect  stack
0028 6C72 C646  30         mov   tmp2,*stack           ; Push tmp2
0029 6C74 0649  14         dect  stack
0030 6C76 C647  30         mov   tmp3,*stack           ; Push tmp3
0031                       ;-------------------------------------------------------
0032                       ; Display string
0033                       ;-------------------------------------------------------
0034 6C78 C820  46         mov   @parm1,@wyx           ; Set cursor
     6C7A A006     
     6C7C 832A     
0035 6C7E C160  34         mov   @parm2,tmp1           ; Get string to display
     6C80 A008     
0036 6C82 06A0  32         bl    @xutst0               ; Display string
     6C84 2420     
0037                       ;-------------------------------------------------------
0038                       ; Get number of bytes to fill ...
0039                       ;-------------------------------------------------------
0040 6C86 C120  34         mov   @parm2,tmp0
     6C88 A008     
0041 6C8A D114  26         movb  *tmp0,tmp0            ; Get length byte of hint
0042 6C8C 0984  32         srl   tmp0,8                ; Right justify
0043 6C8E C184  18         mov   tmp0,tmp2
0044 6C90 C1C4  18         mov   tmp0,tmp3             ; Work copy
0045 6C92 0506  14         neg   tmp2
0046 6C94 0226  22         ai    tmp2,80               ; Number of bytes to fill
     6C96 0050     
0047                       ;-------------------------------------------------------
0048                       ; ... and clear until end of line
0049                       ;-------------------------------------------------------
0050 6C98 C120  34         mov   @parm1,tmp0           ; \ Restore YX position
     6C9A A006     
0051 6C9C A107  18         a     tmp3,tmp0             ; | Adjust X position to end of string
0052 6C9E C804  30         mov   tmp0,@wyx             ; / Set cursor
     6CA0 832A     
0053               
0054 6CA2 06A0  32         bl    @yx2pnt               ; Get VDP PNT address for current YX pos.
     6CA4 23FA     
0055                                                   ; \ i  @wyx = Cursor position
0056                                                   ; / o  tmp0 = VDP target address
0057               
0058 6CA6 0205  20         li    tmp1,32               ; Byte to fill
     6CA8 0020     
0059               
0060 6CAA 06A0  32         bl    @xfilv                ; Clear line
     6CAC 2294     
0061                                                   ; i \  tmp0 = start address
0062                                                   ; i |  tmp1 = byte to fill
0063                                                   ; i /  tmp2 = number of bytes to fill
0064                       ;-------------------------------------------------------
0065                       ; Exit
0066                       ;-------------------------------------------------------
0067               pane.show_hintx.exit:
0068 6CAE C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0069 6CB0 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0070 6CB2 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0071 6CB4 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0072 6CB6 C2F9  30         mov   *stack+,r11           ; Pop R11
0073 6CB8 045B  20         b     *r11                  ; Return to caller
0074               
0075               
0076               
0077               ***************************************************************
0078               * pane.show_hint
0079               * Show hint message (data parameter version)
0080               ***************************************************************
0081               * bl  @pane.show_hint
0082               *     data p1,p2
0083               *--------------------------------------------------------------
0084               * INPUT
0085               * p1 = Cursor YX position
0086               * p2 = Pointer to Length-prefixed string
0087               *--------------------------------------------------------------
0088               * OUTPUT
0089               * none
0090               *--------------------------------------------------------------
0091               * Register usage
0092               * none
0093               ********|*****|*********************|**************************
0094               pane.show_hint:
0095 6CBA C83B  50         mov   *r11+,@parm1          ; Get parameter 1
     6CBC A006     
0096 6CBE C83B  50         mov   *r11+,@parm2          ; Get parameter 2
     6CC0 A008     
0097 6CC2 0649  14         dect  stack
0098 6CC4 C64B  30         mov   r11,*stack            ; Save return address
0099                       ;-------------------------------------------------------
0100                       ; Display pane hint
0101                       ;-------------------------------------------------------
0102 6CC6 06A0  32         bl    @pane.show_hintx      ; Display pane hint
     6CC8 6C64     
0103                       ;-------------------------------------------------------
0104                       ; Exit
0105                       ;-------------------------------------------------------
0106               pane.show_hint.exit:
0107 6CCA C2F9  30         mov   *stack+,r11           ; Pop R11
0108 6CCC 045B  20         b     *r11                  ; Return to caller
                   < stevie_b4.asm
0101                       ;-----------------------------------------------------------------------
0102                       ; Dialogs (2)
0103                       ;-----------------------------------------------------------------------
0104                       copy  "dialog.help.content.asm" ; Draw help dialog content
     **** ****     > dialog.help.content.asm
0001               * FILE......: dialog.help.content.asm
0002               * Purpose...: Content for Help dialog
0003               
0004               
0005               ***************************************************************
0006               * dialog.help.content
0007               * Show content in modal dialog
0008               ***************************************************************
0009               * bl  @dialog.help.content
0010               *--------------------------------------------------------------
0011               * OUTPUT
0012               * none
0013               *--------------------------------------------------------------
0014               * Register usage
0015               * tmp0
0016               ********|*****|*********************|**************************
0017               dialog.help.content:
0018 6CCE 0649  14         dect  stack
0019 6CD0 C64B  30         mov   r11,*stack            ; Save return address
0020 6CD2 0649  14         dect  stack
0021 6CD4 C644  30         mov   tmp0,*stack           ; Push tmp0
0022 6CD6 0649  14         dect  stack
0023 6CD8 C645  30         mov   tmp1,*stack           ; Push tmp1
0024 6CDA 0649  14         dect  stack
0025 6CDC C646  30         mov   tmp2,*stack           ; Push tmp2
0026 6CDE 0649  14         dect  stack
0027 6CE0 C647  30         mov   tmp3,*stack           ; Push tmp3
0028 6CE2 0649  14         dect  stack
0029 6CE4 C660  42         mov   @wyx,*stack           ; Push cursor position
     6CE6 832A     
0030                       ;------------------------------------------------------
0031                       ; Clear screen and set colors
0032                       ;------------------------------------------------------
0033 6CE8 06A0  32         bl    @filv
     6CEA 228E     
0034 6CEC 0050                   data vdp.fb.toprow.sit,32,vdp.sit.size - 640
     6CEE 0020     
     6CF0 06E0     
0035                                                   ; Clear screen
0036               
0037                       ;
0038                       ; Colours are also set in pane.colorscheme.load
0039                       ; but we also set them here to avoid flickering due to
0040                       ; timing delay before function is called.
0041                       ;
0042               
0043 6CF2 0204  20         li    tmp0,vdp.fb.toprow.tat
     6CF4 1850     
0044 6CF6 C160  34         mov   @tv.color,tmp1        ; Get color for framebuffer
     6CF8 A218     
0045 6CFA 0985  32         srl   tmp1,8                ; Right justify
0046 6CFC 0206  20         li    tmp2,vdp.sit.size - 640
     6CFE 06E0     
0047                                                   ; Prepare for loading color attributes
0048               
0049 6D00 06A0  32         bl    @xfilv                ; \ Fill VDP memory
     6D02 2294     
0050                                                   ; | i  tmp0 = Memory start address
0051                                                   ; | i  tmp1 = Byte to fill
0052                                                   ; / i  tmp2 = Number of bytes to fill
0053               
0054 6D04 06A0  32         bl    @filv
     6D06 228E     
0055 6D08 2180                   data sprsat,>d0,32    ; Turn off sprites
     6D0A 00D0     
     6D0C 0020     
0056                       ;------------------------------------------------------
0057                       ; Display left column
0058                       ;------------------------------------------------------
0059 6D0E 06A0  32         bl    @at                   ; Set cursor position
     6D10 26E0     
0060 6D12 0100                   byte 1,0              ; Y=1, X=0
0061               
0062 6D14 C1E0  34         mov   @cmdb.dialog.var,tmp3 ; Get Page index
     6D16 A71E     
0063               
0064 6D18 04C4  14         clr   tmp0                  ; Single-column list
0065               
0066 6D1A C167  34         mov   @dialog.help.data.pages(tmp3),tmp1
     6D1C 6D4E     
0067                                                   ; Pointer to list of strings
0068 6D1E C1A7  34         mov   @dialog.help.data.pages+2(tmp3),tmp2
     6D20 6D50     
0069                                                   ; Number of strings to display
0070               
0071 6D22 06A0  32         bl    @putlst               ; Loop over string list and display
     6D24 244A     
0072                                                   ; \ i  @wyx = Cursor position
0073                                                   ; | i  tmp0 = Cutover row and column offset
0074                                                   ; |           for next column, >0000 for
0075                                                   ; |           single column list
0076                                                   ; | i  tmp1 = Pointer to first length-
0077                                                   ; |           prefixed string in list
0078                                                   ; / i  tmp2 = Number of strings to display
0079               
0080                       ;------------------------------------------------------
0081                       ; Display right column
0082                       ;------------------------------------------------------
0083 6D26 06A0  32         bl    @at                   ; Set cursor position
     6D28 26E0     
0084 6D2A 002A                   byte 0,42             ; Y=0, X=42
0085               
0086 6D2C C1E0  34         mov   @cmdb.dialog.var,tmp3 ; Get Page index
     6D2E A71E     
0087               
0088 6D30 04C4  14         clr   tmp0                  ; Single-column list
0089               
0090 6D32 C167  34         mov   @dialog.help.data.pages+4(tmp3),tmp1
     6D34 6D52     
0091                                                   ; Pointer to list of strings
0092 6D36 C1A7  34         mov   @dialog.help.data.pages+6(tmp3),tmp2
     6D38 6D54     
0093                                                   ; Number of strings to display
0094               
0095 6D3A 06A0  32         bl    @putlst               ; Loop over string list and display
     6D3C 244A     
0096                                                   ; \ i  @wyx = Cursor position
0097                                                   ; | i  tmp0 = Cutover row and column offset
0098                                                   ; |           for next column, >0000 for
0099                                                   ; |           single column list
0100                                                   ; | i  tmp1 = Pointer to first length-
0101                                                   ; |           prefixed string in list
0102                                                   ; / i  tmp2 = Number of strings to display
0103               
0104                       ;------------------------------------------------------
0105                       ; Exit
0106                       ;------------------------------------------------------
0107               dialog.help.content.exit:
0108 6D3E C839  42         mov   *stack+,@wyx          ; Pop cursor position
     6D40 832A     
0109 6D42 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0110 6D44 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0111 6D46 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0112 6D48 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0113 6D4A C2F9  30         mov   *stack+,r11           ; Pop r11
0114 6D4C 045B  20         b     *r11                  ; Return
0115               
0116               
0117               
0118               dialog.help.data.pages:
0119 6D4E 6D5E             data  dialog.help.data.page1.left,14
     6D50 000E     
0120 6D52 6EE2             data  dialog.help.data.page1.right,18
     6D54 0012     
0121 6D56 70F5             data  dialog.help.data.page2.left,8
     6D58 0008     
0122 6D5A 71CD             data  dialog.help.data.page2.right,10
     6D5C 000A     
0123               
0124               
0125               dialog.help.data.page1.left:
0126 6D5E 0120             stri ' '
0127 6D60 26               byte    38
0128 6D61   01             byte    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
     6D62 0101     
     6D64 0101     
     6D66 0101     
     6D68 0101     
     6D6A 0101     
     6D6C 0101     
     6D6E 0101     
0129 6D70 2043             text    ' Cursor '
     6D72 7572     
     6D74 736F     
     6D76 7220     
0130 6D78 0101             byte    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
     6D7A 0101     
     6D7C 0101     
     6D7E 0101     
     6D80 0101     
     6D82 0101     
     6D84 0101     
     6D86 01       
0131 6D87   23             stri 'Fctn s/d/e/x  Left, Right, Up, Down'
     6D88 4663     
     6D8A 746E     
     6D8C 2073     
     6D8E 2F64     
     6D90 2F65     
     6D92 2F78     
     6D94 2020     
     6D96 4C65     
     6D98 6674     
     6D9A 2C20     
     6D9C 5269     
     6D9E 6768     
     6DA0 742C     
     6DA2 2055     
     6DA4 702C     
     6DA6 2044     
     6DA8 6F77     
     6DAA 6E       
0132 6DAB   1F             stri 'Fctn h/l      Home, End of line'
     6DAC 4663     
     6DAE 746E     
     6DB0 2068     
     6DB2 2F6C     
     6DB4 2020     
     6DB6 2020     
     6DB8 2020     
     6DBA 486F     
     6DBC 6D65     
     6DBE 2C20     
     6DC0 456E     
     6DC2 6420     
     6DC4 6F66     
     6DC6 206C     
     6DC8 696E     
     6DCA 65       
0133 6DCB   26             stri 'Fctn j/k      Previous word, Next word'
     6DCC 4663     
     6DCE 746E     
     6DD0 206A     
     6DD2 2F6B     
     6DD4 2020     
     6DD6 2020     
     6DD8 2020     
     6DDA 5072     
     6DDC 6576     
     6DDE 696F     
     6DE0 7573     
     6DE2 2077     
     6DE4 6F72     
     6DE6 642C     
     6DE8 204E     
     6DEA 6578     
     6DEC 7420     
     6DEE 776F     
     6DF0 7264     
0134 6DF2 1746             stri 'Fctn 4   ^x   Page down'
     6DF4 6374     
     6DF6 6E20     
     6DF8 3420     
     6DFA 2020     
     6DFC 5E78     
     6DFE 2020     
     6E00 2050     
     6E02 6167     
     6E04 6520     
     6E06 646F     
     6E08 776E     
0135 6E0A 1546             stri 'Fctn 6   ^e   Page up'
     6E0C 6374     
     6E0E 6E20     
     6E10 3620     
     6E12 2020     
     6E14 5E65     
     6E16 2020     
     6E18 2050     
     6E1A 6167     
     6E1C 6520     
     6E1E 7570     
0136 6E20 1F46             stri 'Fctn 7        Next tab position'
     6E22 6374     
     6E24 6E20     
     6E26 3720     
     6E28 2020     
     6E2A 2020     
     6E2C 2020     
     6E2E 204E     
     6E30 6578     
     6E32 7420     
     6E34 7461     
     6E36 6220     
     6E38 706F     
     6E3A 7369     
     6E3C 7469     
     6E3E 6F6E     
0137 6E40 2343             stri 'Ctrl 7   ^7   Previous tab position'
     6E42 7472     
     6E44 6C20     
     6E46 3720     
     6E48 2020     
     6E4A 5E37     
     6E4C 2020     
     6E4E 2050     
     6E50 7265     
     6E52 7669     
     6E54 6F75     
     6E56 7320     
     6E58 7461     
     6E5A 6220     
     6E5C 706F     
     6E5E 7369     
     6E60 7469     
     6E62 6F6E     
0138 6E64 1846             stri 'Fctn v        Screen top'
     6E66 6374     
     6E68 6E20     
     6E6A 7620     
     6E6C 2020     
     6E6E 2020     
     6E70 2020     
     6E72 2053     
     6E74 6372     
     6E76 6565     
     6E78 6E20     
     6E7A 746F     
     6E7C 70       
0139 6E7D   1B             stri 'Fctn b        Screen bottom'
     6E7E 4663     
     6E80 746E     
     6E82 2062     
     6E84 2020     
     6E86 2020     
     6E88 2020     
     6E8A 2020     
     6E8C 5363     
     6E8E 7265     
     6E90 656E     
     6E92 2062     
     6E94 6F74     
     6E96 746F     
     6E98 6D       
0140 6E99   16             stri 'Ctrl v   ^v   File top'
     6E9A 4374     
     6E9C 726C     
     6E9E 2076     
     6EA0 2020     
     6EA2 205E     
     6EA4 7620     
     6EA6 2020     
     6EA8 4669     
     6EAA 6C65     
     6EAC 2074     
     6EAE 6F70     
0141 6EB0 1943             stri 'Ctrl b   ^b   File bottom'
     6EB2 7472     
     6EB4 6C20     
     6EB6 6220     
     6EB8 2020     
     6EBA 5E62     
     6EBC 2020     
     6EBE 2046     
     6EC0 696C     
     6EC2 6520     
     6EC4 626F     
     6EC6 7474     
     6EC8 6F6D     
0142 6ECA 1743             stri 'Ctrl g   ^g   Goto line'
     6ECC 7472     
     6ECE 6C20     
     6ED0 6720     
     6ED2 2020     
     6ED4 5E67     
     6ED6 2020     
     6ED8 2047     
     6EDA 6F74     
     6EDC 6F20     
     6EDE 6C69     
     6EE0 6E65     
0143               
0144               
0145               dialog.help.data.page1.right:
0146 6EE2 2620             stri '                                 (1/2)'
     6EE4 2020     
     6EE6 2020     
     6EE8 2020     
     6EEA 2020     
     6EEC 2020     
     6EEE 2020     
     6EF0 2020     
     6EF2 2020     
     6EF4 2020     
     6EF6 2020     
     6EF8 2020     
     6EFA 2020     
     6EFC 2020     
     6EFE 2020     
     6F00 2020     
     6F02 2020     
     6F04 2831     
     6F06 2F32     
     6F08 29       
0147 6F09   01             stri ' '
     6F0A 20       
0148 6F0B   24             byte    36
0149 6F0C 0101             byte    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
     6F0E 0101     
     6F10 0101     
     6F12 0101     
     6F14 0101     
     6F16 0101     
     6F18 0101     
     6F1A 01       
0150 6F1B   20             text    ' File '
     6F1C 4669     
     6F1E 6C65     
     6F20 20       
0151 6F21   01             byte    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
     6F22 0101     
     6F24 0101     
     6F26 0101     
     6F28 0101     
     6F2A 0101     
     6F2C 0101     
     6F2E 0101     
0152 6F30 1943             stri 'Ctrl a   ^a   Append file'
     6F32 7472     
     6F34 6C20     
     6F36 6120     
     6F38 2020     
     6F3A 5E61     
     6F3C 2020     
     6F3E 2041     
     6F40 7070     
     6F42 656E     
     6F44 6420     
     6F46 6669     
     6F48 6C65     
0153 6F4A 2143             stri 'Ctrl i   ^i   Insert file at line'
     6F4C 7472     
     6F4E 6C20     
     6F50 6920     
     6F52 2020     
     6F54 5E69     
     6F56 2020     
     6F58 2049     
     6F5A 6E73     
     6F5C 6572     
     6F5E 7420     
     6F60 6669     
     6F62 6C65     
     6F64 2061     
     6F66 7420     
     6F68 6C69     
     6F6A 6E65     
0154 6F6C 2443             stri 'Ctrl c   ^c   Copy clipboard to line'
     6F6E 7472     
     6F70 6C20     
     6F72 6320     
     6F74 2020     
     6F76 5E63     
     6F78 2020     
     6F7A 2043     
     6F7C 6F70     
     6F7E 7920     
     6F80 636C     
     6F82 6970     
     6F84 626F     
     6F86 6172     
     6F88 6420     
     6F8A 746F     
     6F8C 206C     
     6F8E 696E     
     6F90 65       
0155 6F91   17             stri 'Ctrl o   ^o   Open file'
     6F92 4374     
     6F94 726C     
     6F96 206F     
     6F98 2020     
     6F9A 205E     
     6F9C 6F20     
     6F9E 2020     
     6FA0 4F70     
     6FA2 656E     
     6FA4 2066     
     6FA6 696C     
     6FA8 65       
0156 6FA9   18             stri 'Ctrl p   ^p   Print file'
     6FAA 4374     
     6FAC 726C     
     6FAE 2070     
     6FB0 2020     
     6FB2 205E     
     6FB4 7020     
     6FB6 2020     
     6FB8 5072     
     6FBA 696E     
     6FBC 7420     
     6FBE 6669     
     6FC0 6C65     
0157 6FC2 1743             stri 'Ctrl s   ^s   Save file'
     6FC4 7472     
     6FC6 6C20     
     6FC8 7320     
     6FCA 2020     
     6FCC 5E73     
     6FCE 2020     
     6FD0 2053     
     6FD2 6176     
     6FD4 6520     
     6FD6 6669     
     6FD8 6C65     
0158 6FDA 2043             stri 'Ctrl ,   ^,   Load previous file'
     6FDC 7472     
     6FDE 6C20     
     6FE0 2C20     
     6FE2 2020     
     6FE4 5E2C     
     6FE6 2020     
     6FE8 204C     
     6FEA 6F61     
     6FEC 6420     
     6FEE 7072     
     6FF0 6576     
     6FF2 696F     
     6FF4 7573     
     6FF6 2066     
     6FF8 696C     
     6FFA 65       
0159 6FFB   1C             stri 'Ctrl .   ^.   Load next file'
     6FFC 4374     
     6FFE 726C     
     7000 202E     
     7002 2020     
     7004 205E     
     7006 2E20     
     7008 2020     
     700A 4C6F     
     700C 6164     
     700E 206E     
     7010 6578     
     7012 7420     
     7014 6669     
     7016 6C65     
0160 7018 23               byte    35
0161 7019   01             byte    1,1,1,1,1,1,1,1,1,1,1,1,1
     701A 0101     
     701C 0101     
     701E 0101     
     7020 0101     
     7022 0101     
     7024 0101     
0162 7026 204F             text    ' Others '
     7028 7468     
     702A 6572     
     702C 7320     
0163 702E 0101             byte    1,1,1,1,1,1,1,1,1,1,1,1,1,1
     7030 0101     
     7032 0101     
     7034 0101     
     7036 0101     
     7038 0101     
     703A 0101     
0164 703C 1246             stri 'Fctn +   ^q   Quit'
     703E 6374     
     7040 6E20     
     7042 2B20     
     7044 2020     
     7046 5E71     
     7048 2020     
     704A 2051     
     704C 7569     
     704E 74       
0165 704F   16             stri 'Fctn 0   ^/   TI Basic'
     7050 4663     
     7052 746E     
     7054 2030     
     7056 2020     
     7058 205E     
     705A 2F20     
     705C 2020     
     705E 5449     
     7060 2042     
     7062 6173     
     7064 6963     
0166 7066 2143             stri 'Ctrl 0   ^0   Load master catalog'
     7068 7472     
     706A 6C20     
     706C 3020     
     706E 2020     
     7070 5E30     
     7072 2020     
     7074 204C     
     7076 6F61     
     7078 6420     
     707A 6D61     
     707C 7374     
     707E 6572     
     7080 2063     
     7082 6174     
     7084 616C     
     7086 6F67     
0167 7088 1243             stri 'Ctrl h   ^h   Help'
     708A 7472     
     708C 6C20     
     708E 6820     
     7090 2020     
     7092 5E68     
     7094 2020     
     7096 2048     
     7098 656C     
     709A 70       
0168 709B   1A             stri 'Ctrl r   ^r   Toggle ruler'
     709C 4374     
     709E 726C     
     70A0 2072     
     70A2 2020     
     70A4 205E     
     70A6 7220     
     70A8 2020     
     70AA 546F     
     70AC 6767     
     70AE 6C65     
     70B0 2072     
     70B2 756C     
     70B4 6572     
0169 70B6 1C43             stri 'Ctrl u   ^u   Shortcuts menu'
     70B8 7472     
     70BA 6C20     
     70BC 7520     
     70BE 2020     
     70C0 5E75     
     70C2 2020     
     70C4 2053     
     70C6 686F     
     70C8 7274     
     70CA 6375     
     70CC 7473     
     70CE 206D     
     70D0 656E     
     70D2 75       
0170 70D3   21             stri 'Ctrl z   ^z   Cycle color schemes'
     70D4 4374     
     70D6 726C     
     70D8 207A     
     70DA 2020     
     70DC 205E     
     70DE 7A20     
     70E0 2020     
     70E2 4379     
     70E4 636C     
     70E6 6520     
     70E8 636F     
     70EA 6C6F     
     70EC 7220     
     70EE 7363     
     70F0 6865     
     70F2 6D65     
     70F4 73       
0171               
0172               dialog.help.data.page2.left:
0173 70F5   01             stri ' '
     70F6 20       
0174 70F7   23             byte    35
0175 70F8 0101             byte    1,1,1,1,1,1,1,1,1,1,1,1,1
     70FA 0101     
     70FC 0101     
     70FE 0101     
     7100 0101     
     7102 0101     
     7104 01       
0176 7105   20             text    ' Modifiers '
     7106 4D6F     
     7108 6469     
     710A 6669     
     710C 6572     
     710E 7320     
0177 7110 0101             byte    1,1,1,1,1,1,1,1,1,1,1
     7112 0101     
     7114 0101     
     7116 0101     
     7118 0101     
     711A 01       
0178 711B   1E             stri 'Fctn 1        Delete character'
     711C 4663     
     711E 746E     
     7120 2031     
     7122 2020     
     7124 2020     
     7126 2020     
     7128 2020     
     712A 4465     
     712C 6C65     
     712E 7465     
     7130 2063     
     7132 6861     
     7134 7261     
     7136 6374     
     7138 6572     
0179 713A 1E46             stri 'Fctn 2        Insert character'
     713C 6374     
     713E 6E20     
     7140 3220     
     7142 2020     
     7144 2020     
     7146 2020     
     7148 2049     
     714A 6E73     
     714C 6572     
     714E 7420     
     7150 6368     
     7152 6172     
     7154 6163     
     7156 7465     
     7158 72       
0180 7159   19             stri 'Fctn 3        Delete line'
     715A 4663     
     715C 746E     
     715E 2033     
     7160 2020     
     7162 2020     
     7164 2020     
     7166 2020     
     7168 4465     
     716A 6C65     
     716C 7465     
     716E 206C     
     7170 696E     
     7172 65       
0181 7173   20             stri 'Ctrl l   ^l   Delete end of line'
     7174 4374     
     7176 726C     
     7178 206C     
     717A 2020     
     717C 205E     
     717E 6C20     
     7180 2020     
     7182 4465     
     7184 6C65     
     7186 7465     
     7188 2065     
     718A 6E64     
     718C 206F     
     718E 6620     
     7190 6C69     
     7192 6E65     
0182 7194 1946             stri 'Fctn 8        Insert line'
     7196 6374     
     7198 6E20     
     719A 3820     
     719C 2020     
     719E 2020     
     71A0 2020     
     71A2 2049     
     71A4 6E73     
     71A6 6572     
     71A8 7420     
     71AA 6C69     
     71AC 6E65     
0183 71AE 1E46             stri 'Fctn .        Insert/Overwrite'
     71B0 6374     
     71B2 6E20     
     71B4 2E20     
     71B6 2020     
     71B8 2020     
     71BA 2020     
     71BC 2049     
     71BE 6E73     
     71C0 6572     
     71C2 742F     
     71C4 4F76     
     71C6 6572     
     71C8 7772     
     71CA 6974     
     71CC 65       
0184               
0185               dialog.help.data.page2.right:
0186 71CD   26             stri '                                 (2/2)'
     71CE 2020     
     71D0 2020     
     71D2 2020     
     71D4 2020     
     71D6 2020     
     71D8 2020     
     71DA 2020     
     71DC 2020     
     71DE 2020     
     71E0 2020     
     71E2 2020     
     71E4 2020     
     71E6 2020     
     71E8 2020     
     71EA 2020     
     71EC 2020     
     71EE 2028     
     71F0 322F     
     71F2 3229     
0187 71F4 0120             stri ' '
0188 71F6 24               byte    36
0189 71F7   01             byte    1,1,1,1,1,1,1,1,1,1,1,1,1
     71F8 0101     
     71FA 0101     
     71FC 0101     
     71FE 0101     
     7200 0101     
     7202 0101     
0190 7204 2042             text    ' Block Mode '
     7206 6C6F     
     7208 636B     
     720A 204D     
     720C 6F64     
     720E 6520     
0191 7210 0101             byte    1,1,1,1,1,1,1,1,1,1,1
     7212 0101     
     7214 0101     
     7216 0101     
     7218 0101     
     721A 01       
0192 721B   1E             stri 'Ctrl SPACE    Set M1/M2 marker'
     721C 4374     
     721E 726C     
     7220 2053     
     7222 5041     
     7224 4345     
     7226 2020     
     7228 2020     
     722A 5365     
     722C 7420     
     722E 4D31     
     7230 2F4D     
     7232 3220     
     7234 6D61     
     7236 726B     
     7238 6572     
0193 723A 1A43             stri 'Ctrl d   ^d   Delete block'
     723C 7472     
     723E 6C20     
     7240 6420     
     7242 2020     
     7244 5E64     
     7246 2020     
     7248 2044     
     724A 656C     
     724C 6574     
     724E 6520     
     7250 626C     
     7252 6F63     
     7254 6B       
0194 7255   18             stri 'Ctrl c   ^c   Copy block'
     7256 4374     
     7258 726C     
     725A 2063     
     725C 2020     
     725E 205E     
     7260 6320     
     7262 2020     
     7264 436F     
     7266 7079     
     7268 2062     
     726A 6C6F     
     726C 636B     
0195 726E 1743             stri 'Ctrl g   ^g   Goto line'
     7270 7472     
     7272 6C20     
     7274 6720     
     7276 2020     
     7278 5E67     
     727A 2020     
     727C 2047     
     727E 6F74     
     7280 6F20     
     7282 6C69     
     7284 6E65     
0196 7286 1843             stri 'Ctrl m   ^m   Move block'
     7288 7472     
     728A 6C20     
     728C 6D20     
     728E 2020     
     7290 5E6D     
     7292 2020     
     7294 204D     
     7296 6F76     
     7298 6520     
     729A 626C     
     729C 6F63     
     729E 6B       
0197 729F   20             stri 'Ctrl s   ^s   Save block to file'
     72A0 4374     
     72A2 726C     
     72A4 2073     
     72A6 2020     
     72A8 205E     
     72AA 7320     
     72AC 2020     
     72AE 5361     
     72B0 7665     
     72B2 2062     
     72B4 6C6F     
     72B6 636B     
     72B8 2074     
     72BA 6F20     
     72BC 6669     
     72BE 6C65     
0198 72C0 2343             stri 'Ctrl ^1..^3   Copy to clipboard 1-3'
     72C2 7472     
     72C4 6C20     
     72C6 5E31     
     72C8 2E2E     
     72CA 5E33     
     72CC 2020     
     72CE 2043     
     72D0 6F70     
     72D2 7920     
     72D4 746F     
     72D6 2063     
     72D8 6C69     
     72DA 7062     
     72DC 6F61     
     72DE 7264     
     72E0 2031     
     72E2 2D33     
                   < stevie_b4.asm
0105                       copy  "dialog.fbrowser.asm"     ; File browser
     **** ****     > dialog.fbrowser.asm
0001               * FILE......: dialog.fbrowser.asm
0002               * Purpose...: File browser in dialog pane
0003               
0004               *---------------------------------------------------------------
0005               * File browser
0006               *---------------------------------------------------------------
0007               * bl   @dialog.fbrowser
0008               *---------------------------------------------------------------
0009               * INPUT
0010               * none
0011               *--------------------------------------------------------------
0012               * Register usage
0013               * tmp0, tmp1
0014               ********|*****|*********************|**************************
0015               dialog.fbrowser:
0016 72E4 0649  14         dect  stack
0017 72E6 C64B  30         mov   r11,*stack            ; Save return address
0018 72E8 0649  14         dect  stack
0019 72EA C644  30         mov   tmp0,*stack           ; Push tmp0
0020 72EC 0649  14         dect  stack
0021 72EE C645  30         mov   tmp1,*stack           ; Push tmp1
0022                       ;------------------------------------------------------
0023                       ; Browse files
0024                       ;------------------------------------------------------
0025 72F0 06A0  32         bl    @filv
     72F2 228E     
0026 72F4 0050                   data vdp.fb.toprow.sit,32,vdp.sit.size - 640
     72F6 0020     
     72F8 06E0     
0027                                                   ; Clear screen
0028               
0029 72FA 06A0  32         bl    @at                   ; Set cursor position
     72FC 26E0     
0030 72FE 0100                   byte 1,0              ; Y=1, X=0
0031               
0032 7300 0205  20         li    tmp1,>e000
     7302 E000     
0033 7304 C1A0  34         mov   @fh.records,tmp2
     7306 A43C     
0034 7308 0646  14         dect  tmp2
0035               
0036 730A C120  34         mov   @fb.scrrows,tmp0      ; \ Determine cutover row for filename
     730C A31C     
0037 730E 6120  34         s     @cmdb.scrrows,tmp0    ; | column list and store in MSB of tmp0
     7310 A706     
0038 7312 0A84  32         sla   tmp0,8                ; /
0039               
0040 7314 0264  22         ori   tmp0,30               ; Set offset for new column in filename list
     7316 001E     
0041               
0042 7318 06A0  32         bl    @putlst               ; Loop over string list and display
     731A 244A     
0043                                                   ; \ i  @wyx = Cursor position
0044                                                   ; | i  tmp0 = Cutover row and column offset
0045                                                   ; |           for next column, >0000 for
0046                                                   ; |           single column list
0047                                                   ; | i  tmp1 = Pointer to first length-
0048                                                   ; |           prefixed string in list
0049                                                   ; / i  tmp2 = Number of strings to display
0050               
0051               dialog.fbrowser.exit:
0052                       ;------------------------------------------------------
0053                       ; Exit
0054                       ;------------------------------------------------------
0055 731C C179  30         mov   *stack+,tmp1          ; Pop tmp1
0056 731E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0057 7320 C2F9  30         mov   *stack+,r11           ; Pop R11
0058 7322 045B  20         b     *r11                  ; Return to caller
                   < stevie_b4.asm
0106                       ;-----------------------------------------------------------------------
0107                       ; Stubs
0108                       ;-----------------------------------------------------------------------
0109                       copy  "rom.stubs.bank4.asm" ; Bank specific stubs
     **** ****     > rom.stubs.bank4.asm
0001               * FILE......: rom.stubs.bank4.asm
0002               * Purpose...: Bank 4 stubs for functions in other banks
0003               
0004               
0005               ***************************************************************
0006               * Stub for "edb.line.pack.fb"
0007               * bank1 vec.10
0008               ********|*****|*********************|**************************
0009               edb.line.pack.fb:
0010 7324 0649  14         dect  stack
0011 7326 C64B  30         mov   r11,*stack            ; Save return address
0012                       ;------------------------------------------------------
0013                       ; Call function in bank 1
0014                       ;------------------------------------------------------
0015 7328 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     732A 2FE4     
0016 732C 6002                   data bank1.rom        ; | i  p0 = bank address
0017 732E 7F52                   data vec.10           ; | i  p1 = Vector with target address
0018 7330 6008                   data bankid           ; / i  p2 = Source ROM bank for return
0019                       ;------------------------------------------------------
0020                       ; Exit
0021                       ;------------------------------------------------------
0022 7332 C2F9  30         mov   *stack+,r11           ; Pop r11
0023 7334 045B  20         b     *r11                  ; Return to caller
0024               
0025               
0026               ***************************************************************
0027               * Stub for "edb.line.unpack.fb"
0028               * bank1 vec.11
0029               ********|*****|*********************|**************************
0030               edb.line.unpack.fb:
0031 7336 0649  14         dect  stack
0032 7338 C64B  30         mov   r11,*stack            ; Save return address
0033                       ;------------------------------------------------------
0034                       ; Call function in bank 1
0035                       ;------------------------------------------------------
0036 733A 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     733C 2FE4     
0037 733E 6002                   data bank1.rom        ; | i  p0 = bank address
0038 7340 7F54                   data vec.11           ; | i  p1 = Vector with target address
0039 7342 6008                   data bankid           ; / i  p2 = Source ROM bank for return
0040                       ;------------------------------------------------------
0041                       ; Exit
0042                       ;------------------------------------------------------
0043 7344 C2F9  30         mov   *stack+,r11           ; Pop r11
0044 7346 045B  20         b     *r11                  ; Return to caller
0045               
0046               
0047               ***************************************************************
0048               * Stub for "pane.cursor.blink"
0049               * bank1 vec.28
0050               ********|*****|*********************|**************************
0051               pane.cursor.blink:
0052 7348 0649  14         dect  stack
0053 734A C64B  30         mov   r11,*stack            ; Save return address
0054                       ;------------------------------------------------------
0055                       ; Call function in bank 1
0056                       ;------------------------------------------------------
0057 734C 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     734E 2FE4     
0058 7350 6002                   data bank1.rom        ; | i  p0 = bank address
0059 7352 7F76                   data vec.28           ; | i  p1 = Vector with target address
0060 7354 6008                   data bankid           ; / i  p2 = Source ROM bank for return
0061                       ;------------------------------------------------------
0062                       ; Exit
0063                       ;------------------------------------------------------
0064 7356 C2F9  30         mov   *stack+,r11           ; Pop r11
0065 7358 045B  20         b     *r11                  ; Return to caller
0066               
0067               
0068               ***************************************************************
0069               * Stub for "pane.action.colorscheme.statuslines"
0070               * bank1 vec.32
0071               ********|*****|*********************|**************************
0072               pane.colorscheme.statlines
0073 735A 0649  14         dect  stack
0074 735C C64B  30         mov   r11,*stack            ; Save return address
0075                       ;------------------------------------------------------
0076                       ; Call function in bank 1
0077                       ;------------------------------------------------------
0078 735E 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7360 2FE4     
0079 7362 6002                   data bank1.rom        ; | i  p0 = bank address
0080 7364 7F7E                   data vec.32           ; | i  p1 = Vector with target address
0081 7366 6008                   data bankid           ; / i  p2 = Source ROM bank for return
0082                       ;------------------------------------------------------
0083                       ; Exit
0084                       ;------------------------------------------------------
0085 7368 C2F9  30         mov   *stack+,r11           ; Pop r11
0086 736A 045B  20         b     *r11                  ; Return to caller
0087               
0088               
0089               ***************************************************************
0090               * Stub for "vdp.colors.line"
0091               * bank6 vec.3
0092               ********|*****|*********************|**************************
0093               vdp.colors.line:
0094 736C 0649  14         dect  stack
0095 736E C64B  30         mov   r11,*stack            ; Save return address
0096                       ;------------------------------------------------------
0097                       ; Call function in bank 6
0098                       ;------------------------------------------------------
0099 7370 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7372 2FE4     
0100 7374 600C                   data bank6.rom        ; | i  p0 = bank address
0101 7376 7F44                   data vec.3            ; | i  p1 = Vector with target address
0102 7378 6008                   data bankid           ; / i  p2 = Source ROM bank for return
0103                       ;------------------------------------------------------
0104                       ; Exit
0105                       ;------------------------------------------------------
0106 737A C2F9  30         mov   *stack+,r11           ; Pop r11
0107 737C 045B  20         b     *r11                  ; Return to caller
                   < stevie_b4.asm
0110                       copy  "rom.stubs.bankx.asm" ; Stubs to include in all banks
     **** ****     > rom.stubs.bankx.asm
0001               * FILE......: rom.stubs.bankx.asm
0002               * Purpose...: Stubs to include in all banks > 0
0003               
0004               
0006               ***************************************************************
0007               * Stub for "mem.sams.setup.stevie"
0008               * bank1 vec.1
0009               ********|*****|*********************|**************************
0010               mem.sams.setup.stevie:
0011 737E 0649  14         dect  stack
0012 7380 C64B  30         mov   r11,*stack            ; Save return address
0013                       ;------------------------------------------------------
0014                       ; Call function in bank 1
0015                       ;------------------------------------------------------
0016 7382 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7384 2FE4     
0017 7386 6002                   data bank1.rom        ; | i  p0 = bank address
0018 7388 7F40                   data vec.1            ; | i  p1 = Vector with target address
0019 738A 6008                   data bankid           ; / i  p2 = Source ROM bank for return
0020                       ;------------------------------------------------------
0021                       ; Exit
0022                       ;------------------------------------------------------
0023 738C C2F9  30         mov   *stack+,r11           ; Pop r11
0024 738E 045B  20         b     *r11                  ; Return to caller
0026               
0028               ***************************************************************
0029               * Stub for "mem.sams.set.legacy"
0030               * bank7 vec.1
0031               ********|*****|*********************|**************************
0032               mem.sams.set.legacy:
0033 7390 0649  14         dect  stack
0034 7392 C64B  30         mov   r11,*stack            ; Save return address
0035                       ;------------------------------------------------------
0036                       ; Dump VDP patterns
0037                       ;------------------------------------------------------
0038 7394 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7396 2FE4     
0039 7398 600E                   data bank7.rom        ; | i  p0 = bank address
0040 739A 7F40                   data vec.1            ; | i  p1 = Vector with target address
0041 739C 6008                   data bankid           ; / i  p2 = Source ROM bank for return
0042                       ;------------------------------------------------------
0043                       ; Exit
0044                       ;------------------------------------------------------
0045 739E C2F9  30         mov   *stack+,r11           ; Pop r11
0046 73A0 045B  20         b     *r11                  ; Return to caller
0048               
0049               
0051               ***************************************************************
0052               * Stub for "mem.sams.set.boot"
0053               * bank7 vec.2
0054               ********|*****|*********************|**************************
0055               mem.sams.set.boot:
0056 73A2 0649  14         dect  stack
0057 73A4 C64B  30         mov   r11,*stack            ; Save return address
0058                       ;------------------------------------------------------
0059                       ; Dump VDP patterns
0060                       ;------------------------------------------------------
0061 73A6 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     73A8 2FE4     
0062 73AA 600E                   data bank7.rom        ; | i  p0 = bank address
0063 73AC 7F42                   data vec.2            ; | i  p1 = Vector with target address
0064 73AE 6008                   data bankid           ; / i  p2 = Source ROM bank for return
0065                       ;------------------------------------------------------
0066                       ; Exit
0067                       ;------------------------------------------------------
0068 73B0 C2F9  30         mov   *stack+,r11           ; Pop r11
0069 73B2 045B  20         b     *r11                  ; Return to caller
0071               
0072               
0074               ***************************************************************
0075               * Stub for "mem.sams.set.stevie"
0076               * bank7 vec.3
0077               ********|*****|*********************|**************************
0078               mem.sams.set.stevie:
0079 73B4 0649  14         dect  stack
0080 73B6 C64B  30         mov   r11,*stack            ; Save return address
0081                       ;------------------------------------------------------
0082                       ; Dump VDP patterns
0083                       ;------------------------------------------------------
0084 73B8 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     73BA 2FE4     
0085 73BC 600E                   data bank7.rom        ; | i  p0 = bank address
0086 73BE 7F44                   data vec.3            ; | i  p1 = Vector with target address
0087 73C0 6008                   data bankid           ; / i  p2 = Source ROM bank for return
0088                       ;------------------------------------------------------
0089                       ; Exit
0090                       ;------------------------------------------------------
0091 73C2 C2F9  30         mov   *stack+,r11           ; Pop r11
0092 73C4 045B  20         b     *r11                  ; Return to caller
0094               
0095               
0097               ***************************************************************
0098               * Stub for "magic.set"
0099               * bank7 vec.20
0100               ********|*****|*********************|**************************
0101               magic.set:
0102 73C6 0649  14         dect  stack
0103 73C8 C64B  30         mov   r11,*stack            ; Save return address
0104                       ;------------------------------------------------------
0105                       ; Dump VDP patterns
0106                       ;------------------------------------------------------
0107 73CA 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     73CC 2FE4     
0108 73CE 600E                   data bank7.rom        ; | i  p0 = bank address
0109 73D0 7F66                   data vec.20           ; | i  p1 = Vector with target address
0110 73D2 6008                   data bankid           ; / i  p2 = Source ROM bank for return
0111                       ;------------------------------------------------------
0112                       ; Exit
0113                       ;------------------------------------------------------
0114 73D4 C2F9  30         mov   *stack+,r11           ; Pop r11
0115 73D6 045B  20         b     *r11                  ; Return to caller
0117               
0118               
0120               ***************************************************************
0121               * Stub for "magic.clear"
0122               * bank7 vec.21
0123               ********|*****|*********************|**************************
0124               magic.clear:
0125 73D8 0649  14         dect  stack
0126 73DA C64B  30         mov   r11,*stack            ; Save return address
0127                       ;------------------------------------------------------
0128                       ; Dump VDP patterns
0129                       ;------------------------------------------------------
0130 73DC 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     73DE 2FE4     
0131 73E0 600E                   data bank7.rom        ; | i  p0 = bank address
0132 73E2 7F68                   data vec.21           ; | i  p1 = Vector with target address
0133 73E4 6008                   data bankid           ; / i  p2 = Source ROM bank for return
0134                       ;------------------------------------------------------
0135                       ; Exit
0136                       ;------------------------------------------------------
0137 73E6 C2F9  30         mov   *stack+,r11           ; Pop r11
0138 73E8 045B  20         b     *r11                  ; Return to caller
0140               
0141               
0143               ***************************************************************
0144               * Stub for "magic.check"
0145               * bank7 vec.22
0146               ********|*****|*********************|**************************
0147               magic.check:
0148 73EA 0649  14         dect  stack
0149 73EC C64B  30         mov   r11,*stack            ; Save return address
0150                       ;------------------------------------------------------
0151                       ; Dump VDP patterns
0152                       ;------------------------------------------------------
0153 73EE 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     73F0 2FE4     
0154 73F2 600E                   data bank7.rom        ; | i  p0 = bank address
0155 73F4 7F6A                   data vec.22           ; | i  p1 = Vector with target address
0156 73F6 6008                   data bankid           ; / i  p2 = Source ROM bank for return
0157                       ;------------------------------------------------------
0158                       ; Exit
0159                       ;------------------------------------------------------
0160 73F8 C2F9  30         mov   *stack+,r11           ; Pop r11
0161 73FA 045B  20         b     *r11                  ; Return to caller
                   < stevie_b4.asm
0111                       ;-----------------------------------------------------------------------
0112                       ; Program data
0113                       ;-----------------------------------------------------------------------
0114                       ;
0115                       ;-----------------------------------------------------------------------
0116                       ; Bank full check
0117                       ;-----------------------------------------------------------------------
0121                       ;-----------------------------------------------------------------------
0122                       ; Show ROM bank in CPU crash screen
0123                       ;-----------------------------------------------------------------------
0124                       copy  "rom.crash.asm"
     **** ****     > rom.crash.asm
0001               * FILE......: rom.crash.asm
0002               * Purpose...: Show ROM bank number on CPU crash
0003               
0004               ***************************************************************
0005               * Show ROM bank number on CPU crash
0006               ********|*****|*********************|**************************
0007               cpu.crash.showbank:
0008                       aorg  bankx.crash.showbank
0009 7F00 06A0  32         bl    @putat
     7F02 2442     
0010 7F04 0314                   byte 3,20
0011 7F06 7F38                   data cpu.crash.showbank.bankstr
0012 7F08 10FF  14         jmp   $
                   < stevie_b4.asm
0125                       ;-----------------------------------------------------------------------
0126                       ; Table for VDP modes
0127                       ;-----------------------------------------------------------------------
0128                       copy  "data.vdpmodes.asm"   ; Table for VDP modes
     **** ****     > data.vdpmodes.asm
0001               * FILE......: data.vdp.modes.asm
0002               * Purpose...: VDP modes tables
0003               
0004                           aorg bankx.vdptab
0005               
0006               ; ====================================================================
0007               ; Keep the tables in sequence, or change offsets in equ.f18a.*.asm
0008               ; ====================================================================
0009               
0010               ***************************************************************
0011               * Textmode (80 columns, 30 rows) - F18A
0012               *--------------------------------------------------------------
0013               *
0014               * ; VDP#0 Control bits
0015               * ;      bit 6=0: M3 | Graphics 1 mode
0016               * ;      bit 7=0: Disable external VDP input
0017               * ; VDP#1 Control bits
0018               * ;      bit 0=1: 16K selection
0019               * ;      bit 1=1: Enable display
0020               * ;      bit 2=1: Enable VDP interrupt
0021               * ;      bit 3=1: M1 \ TEXT MODE
0022               * ;      bit 4=0: M2 /
0023               * ;      bit 5=0: reserved
0024               * ;      bit 6=0: 8x8 sprites
0025               * ;      bit 7=0: Sprite magnification (1x)
0026               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >960)
0027               * ; VDP#3 PCT (Pattern color table)      at >0FC0  (>3F * >040)
0028               * ; VDP#4 PDT (Pattern descriptor table) at >1000  (>02 * >800)
0029               * ; VDP#5 SAT (sprite attribute list)    at >2180  (>43 * >080)
0030               * ; VDP#6 SPT (Sprite pattern table)     at >2800  (>05 * >800)
0031               * ; VDP#7 Set foreground/background color
0032               ***************************************************************
0033               stevie.80x30:
0034 7F10 04F0             byte  >04,>f0,>00,>3f,>02,>43,>05,SPFCLR,0,80
     7F12 003F     
     7F14 0243     
     7F16 05F4     
     7F18 0050     
0035               
0036               
0037               ***************************************************************
0038               * Textmode (80 columns, 60 rows) - F18A
0039               *--------------------------------------------------------------
0040               *
0041               * ; VDP#0 Control bits
0042               * ;      bit 6=0: M3 | Graphics 1 mode
0043               * ;      bit 7=0: Disable external VDP input
0044               * ; VDP#1 Control bits
0045               * ;      bit 0=1: 16K selection
0046               * ;      bit 1=1: Enable display
0047               * ;      bit 2=1: Enable VDP interrupt
0048               * ;      bit 3=1: M1 \ TEXT MODE
0049               * ;      bit 4=0: M2 /
0050               * ;      bit 5=0: reserved
0051               * ;      bit 6=0: 8x8 sprites
0052               * ;      bit 7=0: Sprite magnification (1x)
0053               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >12c0)
0054               * ; VDP#3 PCT (Pattern color table)      at >0FC0  (>3F * >040) - not used!
0055               * ; VDP#4 PDT (Pattern descriptor table) at >3000  (>06 * >800)
0056               * ; VDP#5 SAT (sprite attribute list)    at >3A00  (>74 * >080)
0057               * ; VDP#6 SPT (Sprite pattern table)     at >3800  (>07 * >800)
0058               * ; VDP#7 Set foreground/background color
0059               ***************************************************************
0060               stevie.80x60:
0061 7F1A 04F0             byte  >04,>f0,>00,>3f,>06,>74,>07,SPFCLR,0,80
     7F1C 003F     
     7F1E 0674     
     7F20 07F4     
     7F22 0050     
0062               
0063               
0064               
0065               ***************************************************************
0066               * TI Basic mode (32 columns/24 rows)
0067               *--------------------------------------------------------------
0068               tibasic.32x24:
0069 7F24 00E2             byte  >00,>e2,>00,>0c,>00,>06,>00,>07,0,32
     7F26 000C     
     7F28 0006     
     7F2A 0007     
     7F2C 0020     
0070               *
0071               * ; VDP#0 Control bits
0072               * ;      bit 6=0: M3 | Graphics 1 mode
0073               * ;      bit 7=0: Disable external VDP input
0074               * ; VDP#1 Control bits
0075               * ;      bit 0=1: 16K selection
0076               * ;      bit 1=1: Enable display
0077               * ;      bit 2=1: Enable VDP interrupt
0078               * ;      bit 3=0: M1 \ Graphics 1 mode
0079               * ;      bit 4=0: M2 /
0080               * ;      bit 5=0: reserved
0081               * ;      bit 6=1: 16x16 sprites
0082               * ;      bit 7=0: Sprite magnification (1x)
0083               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0084               * ; VDP#3 PCT (Pattern color table)      at >0300  (>0C * >040)
0085               * ; VDP#4 PDT (Pattern descriptor table) at >0000  (>00 * >800)
0086               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0087               * ; VDP#6 SPT (Sprite pattern table)     at >0000  (>00 * >800)
0088               * ; VDP#7 Set screen background color
0089               
0090               
0091               
0092               
0093               
0094               
0095               ***************************************************************
0096               * TI Basic mode (32 columns/30 rows) - F18A
0097               *--------------------------------------------------------------
0098               tibasic.32x30:
0099 7F2E 00E2             byte  >00,>e2,>00,>0c,>00,>06,>00,>07,0,32
     7F30 000C     
     7F32 0006     
     7F34 0007     
     7F36 0020     
0100               *
0101               * ; VDP#0 Control bits
0102               * ;      bit 6=0: M3 | Graphics 1 mode
0103               * ;      bit 7=0: Disable external VDP input
0104               * ; VDP#1 Control bits
0105               * ;      bit 0=1: 16K selection
0106               * ;      bit 1=1: Enable display
0107               * ;      bit 2=1: Enable VDP interrupt
0108               * ;      bit 3=0: M1 \ Graphics 1 mode
0109               * ;      bit 4=0: M2 /
0110               * ;      bit 5=0: reserved
0111               * ;      bit 6=1: 16x16 sprites
0112               * ;      bit 7=0: Sprite magnification (1x)
0113               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0114               * ; VDP#3 PCT (Pattern color table)      at >0300  (>0C * >040)
0115               * ; VDP#4 PDT (Pattern descriptor table) at >0000  (>00 * >800)
0116               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0117               * ; VDP#6 SPT (Sprite pattern table)     at >0000  (>00 * >800)
0118               * ; VDP#7 Set screen background color
0119               * ;
0120               * ; The table by itself is not sufficient for turning on 30 rows
0121               * ; mode. You also need to unlock the F18a and set VR49 (>31) to
0122               * ; value >40.
                   < stevie_b4.asm
0129                       ;-----------------------------------------------------------------------
0130                       ; Vector table
0131                       ;-----------------------------------------------------------------------
0132                       copy  "rom.vectors.bank4.asm"
     **** ****     > rom.vectors.bank4.asm
0001               * FILE......: rom.vectors.bank4.asm
0002               * Purpose...: Bank 4 vectors for trampoline function
0003               
0004               *--------------------------------------------------------------
0005               * ROM identification string for CPU crash
0006               *--------------------------------------------------------------
0007               cpu.crash.showbank.bankstr:
0008 7F38 0552             stri 'ROM#4'
     7F3A 4F4D     
     7F3C 2334     
0009               
0010               *--------------------------------------------------------------
0011               * ROM 4: Vectors 1-32
0012               *--------------------------------------------------------------
0013                       aorg  bankx.vectab
0014 7F40 6514     vec.1   data  fb.goto.toprow        ; Refresh FB with top-row and row offset
0015 7F42 656A     vec.2   data  fb.ruler.init         ; Setup ruler with tab positions in memory
0016 7F44 6612     vec.3   data  fb.colorlines         ; Colorize frame buffer content
0017 7F46 66A0     vec.4   data  fb.vdpdump            ; Dump frame buffer to VDP SIT
0018 7F48 66F0     vec.5   data  fb.scan.fname         ; Scan current line for possible filename
0019 7F4A 67AA     vec.6   data  fb.hscroll            ; Horizontal scroll frame buffer window
0020 7F4C 67DC     vec.7   data  fb.restore            ; Restore frame buffer to normal operations
0021 7F4E 6818     vec.8   data  fb.refresh            ; Refresh frame buffer
0022 7F50 688E     vec.9   data  fb.get.nonblank       ; Get column of first non-blank character
0023 7F52 6428     vec.10  data  fb.tab.prev           ; Move cursor to previous tab position
0024 7F54 648A     vec.11  data  fb.tab.next           ; Move cursor to nexttab position
0025 7F56 6124     vec.12  data  fb.cursor.up          ; Move cursor up 1 line
0026 7F58 6182     vec.13  data  fb.cursor.down        ; Move cursor down 1 line
0027 7F5A 61FA     vec.14  data  fb.cursor.home        ; Move cursor home
0028 7F5C 6224     vec.15  data  fb.insert.line        ; Insert a new line
0029 7F5E 604A     vec.16  data  fb.cursor.top         ; Move cursor to top of file
0030 7F60 6072     vec.17  data  fb.cursor.topscr      ; Move cursor to top of screen
0031 7F62 6098     vec.18  data  fb.cursor.bot         ; Move cursor to bottom of file
0032 7F64 60D4     vec.19  data  fb.cursor.botscr      ; Move cursor to bottom of screen
0033 7F66 62BE     vec.20  data  fb.insert.char        ; Insert character
0034 7F68 6382     vec.21  data  fb.replace.char       ; Replace character
0035 7F6A 2026     vec.22  data  cpu.crash             ;
0036 7F6C 2026     vec.23  data  cpu.crash             ;
0037 7F6E 2026     vec.24  data  cpu.crash             ;
0038 7F70 2026     vec.25  data  cpu.crash             ;
0039 7F72 2026     vec.26  data  cpu.crash             ;
0040 7F74 2026     vec.27  data  cpu.crash             ;
0041 7F76 2026     vec.28  data  cpu.crash             ;
0042 7F78 2026     vec.29  data  cpu.crash             ;
0043 7F7A 2026     vec.30  data  cpu.crash             ;
0044 7F7C 2026     vec.31  data  cpu.crash             ;
0045 7F7E 2026     vec.32  data  cpu.crash             ;
0046               *--------------------------------------------------------------
0047               * ROM 4: Vectors 33-64
0048               *--------------------------------------------------------------
0049 7F80 68D6     vec.33  data  pane.topline          ; Draw topline
0050 7F82 6980     vec.34  data  pane.botline          ; Draw bottom line
0051 7F84 6BD6     vec.35  data  pane.errline.show     ; Show error line
0052 7F86 6C30     vec.36  data  pane.errline.hide     ; Hide error line
0053 7F88 6BA4     vec.37  data  pane.errline.drawcolor
0054 7F8A 6B58     vec.38  data  pane.botline.busy.on  ; Turn on busy indicator on bottom line
0055 7F8C 6B7E     vec.39  data  pane.botline.busy.off ; Turn off busy indicator on bottom line
0056 7F8E 2026     vec.40  data  cpu.crash             ;
0057 7F90 2026     vec.41  data  cpu.crash             ;
0058 7F92 2026     vec.42  data  cpu.crash             ;
0059 7F94 2026     vec.43  data  cpu.crash             ;
0060 7F96 2026     vec.44  data  cpu.crash             ;
0061 7F98 2026     vec.45  data  cpu.crash             ;
0062 7F9A 2026     vec.46  data  cpu.crash             ;
0063 7F9C 2026     vec.47  data  cpu.crash             ;
0064 7F9E 2026     vec.48  data  cpu.crash             ;
0065 7FA0 2026     vec.49  data  cpu.crash             ;
0066 7FA2 2026     vec.50  data  cpu.crash             ;
0067 7FA4 2026     vec.51  data  cpu.crash             ;
0068 7FA6 2026     vec.52  data  cpu.crash             ;
0069 7FA8 2026     vec.53  data  cpu.crash             ;
0070 7FAA 2026     vec.54  data  cpu.crash             ;
0071 7FAC 2026     vec.55  data  cpu.crash             ;
0072 7FAE 2026     vec.56  data  cpu.crash             ;
0073 7FB0 2026     vec.57  data  cpu.crash             ;
0074 7FB2 2026     vec.58  data  cpu.crash             ;
0075 7FB4 2026     vec.59  data  cpu.crash             ;
0076 7FB6 2026     vec.60  data  cpu.crash             ;
0077 7FB8 2026     vec.61  data  cpu.crash             ;
0078 7FBA 2026     vec.62  data  cpu.crash             ;
0079 7FBC 2026     vec.63  data  cpu.crash             ;
0080 7FBE 2026     vec.64  data  cpu.crash             ;
0081               *--------------------------------------------------------------
0082               * ROM 4: Vectors 65-96
0083               *--------------------------------------------------------------
0084 7FC0 6CCE     vec.65  data  dialog.help.content   ; Content for Help dialog
0085 7FC2 72E4     vec.66  data  dialog.fbrowser       ; File browser
0086 7FC4 2026     vec.67  data  cpu.crash             ;
0087 7FC6 2026     vec.68  data  cpu.crash             ;
0088 7FC8 2026     vec.69  data  cpu.crash             ;
0089 7FCA 2026     vec.70  data  cpu.crash             ;
0090 7FCC 2026     vec.71  data  cpu.crash             ;
0091 7FCE 2026     vec.72  data  cpu.crash             ;
0092 7FD0 2026     vec.73  data  cpu.crash             ;
0093 7FD2 2026     vec.74  data  cpu.crash             ;
0094 7FD4 2026     vec.75  data  cpu.crash             ;
0095 7FD6 2026     vec.76  data  cpu.crash             ;
0096 7FD8 2026     vec.77  data  cpu.crash             ;
0097 7FDA 2026     vec.78  data  cpu.crash             ;
0098 7FDC 2026     vec.79  data  cpu.crash             ;
0099 7FDE 2026     vec.80  data  cpu.crash             ;
0100 7FE0 2026     vec.81  data  cpu.crash             ;
0101 7FE2 2026     vec.82  data  cpu.crash             ;
0102 7FE4 2026     vec.83  data  cpu.crash             ;
0103 7FE6 2026     vec.84  data  cpu.crash             ;
0104 7FE8 2026     vec.85  data  cpu.crash             ;
0105 7FEA 2026     vec.86  data  cpu.crash             ;
0106 7FEC 2026     vec.87  data  cpu.crash             ;
0107 7FEE 2026     vec.88  data  cpu.crash             ;
0108 7FF0 2026     vec.89  data  cpu.crash             ;
0109 7FF2 2026     vec.90  data  cpu.crash             ;
0110 7FF4 2026     vec.91  data  cpu.crash             ;
0111 7FF6 2026     vec.92  data  cpu.crash             ;
0112 7FF8 2026     vec.93  data  cpu.crash             ;
0113 7FFA 2026     vec.94  data  cpu.crash             ;
0114 7FFC 2026     vec.95  data  cpu.crash             ;
0115 7FFE 2026     vec.96  data  cpu.crash             ;
                   < stevie_b4.asm
0133                                                   ; Vector table bank 4

    ANYKEY.............. >200A :     
    AT.................. >26E0 :     
    BANK0.RAM........... >6800 :     
    BANK0.ROM........... >6000 :     
    BANK1.RAM........... >6802 :     
    BANK1.ROM........... >6002 :     
    BANK2.RAM........... >6804 :     
    BANK2.ROM........... >6004 :     
    BANK3.RAM........... >6806 :     
    BANK3.ROM........... >6006 :     
    BANK4.RAM........... >6808 :     
    BANK4.ROM........... >6008 :     
    BANK5.RAM........... >680A :     
    BANK5.ROM........... >600A :     
    BANK6.RAM........... >680C :     
    BANK6.ROM........... >600C :     
    BANK7.RAM........... >680E :     
    BANK7.ROM........... >600E :     
    BANKID.............. >6008 :     
    BANKX.CRASH.SHOWBANK >7F00 :     
    BANKX.VDPTAB........ >7F10 :     
    BANKX.VECTAB........ >7F40 :     
    BTIHI............... >8314 :     
    BVDPST.............. >831A :     
    BX.................. >832B :     
    BY.................. >832A :     
    C99_BRK............. >0113 :     
    C99_DBGR0........... >0120 :     
    C99_DBGR1........... >0121 :     
    C99_DBGR10.......... >012A :     
    C99_DBGR11.......... >012B :     
    C99_DBGR12.......... >012C :     
    C99_DBGR13.......... >012D :     
    C99_DBGR14.......... >012E :     
    C99_DBGR15.......... >012F :     
    C99_DBGR2........... >0122 :     
    C99_DBGR3........... >0123 :     
    C99_DBGR4........... >0124 :     
    C99_DBGR5........... >0125 :     
    C99_DBGR6........... >0126 :     
    C99_DBGR7........... >0127 :     
    C99_DBGR8........... >0128 :     
    C99_DBGR9........... >0129 :     
    C99_DBG_R0.......... >0120 :     
    C99_DBG_R1.......... >0121 :     
    C99_DBG_R2.......... >0122 :     
    C99_DBG_R3.......... >0123 :     
    C99_DBG_R4.......... >0124 :     
    C99_DBG_R5.......... >0125 :     
    C99_DBG_R6.......... >0126 :     
    C99_DBG_R7.......... >0127 :     
    C99_DBG_R8.......... >0128 :     
    C99_DBG_R9.......... >0199 :     
    C99_DBG_RA.......... >012A :     
    C99_DBG_RB.......... >012B :     
    C99_DBG_RC.......... >012C :     
    C99_DBG_RD.......... >012D :     
    C99_DBG_RE.......... >012E :     
    C99_DBG_RF.......... >012F :     
    C99_DBG_STCK........ >0199 :     
    C99_DBG_TMP0........ >0124 :     
    C99_DBG_TMP1........ >0125 :     
    C99_DBG_TMP2........ >0126 :     
    C99_DBG_TMP3........ >0127 :     
    C99_DBG_TMP4........ >0128 :     
    C99_NORM............ >0110 :     
    C99_OVRD............ >0111 :     
    C99_QUIT............ >0114 :     
    C99_SMAX............ >0112 :     
    CLHOOK.............. >2EDC :     
    CLIP1............... >3100 :     
    CLIP2............... >3200 :     
    CLIP3............... >3300 :     
    CLIP4............... >3400 :     
    CLIP5............... >3500 :     
    CLSLOT.............. >2F04 :     
    CMDB.ACTION.PTR..... >A72C :     
    CMDB.CMD............ >A72F :     
    CMDB.CMDALL......... >A72E :     
    CMDB.CMDLEN......... >A72E :     
    CMDB.COLUMN......... >A714 :     
    CMDB.CURSOR......... >A70A :     
    CMDB.DEFAULT........ >A708 :     
    CMDB.DFLT.FNAME..... >A7B2 :     
    CMDB.DIALOG......... >A71C :     
    CMDB.DIALOG.VAR..... >A71E :     
    CMDB.DIRTY.......... >A71A :     
    CMDB.FB.YXSAVE...... >A704 :     
    CMDB.FREE........... >A800 :     
    CMDB.INIT........... >32AC :     
    CMDB.INIT.EXIT...... >3300 :     
    CMDB.LENGTH......... >A716 :     
    CMDB.LINES.......... >A718 :     
    CMDB.PANHEAD........ >A720 :     
    CMDB.PANHEAD.BUF.... >A780 :     
    CMDB.PANHINT........ >A724 :     
    CMDB.PANHINT2....... >A726 :     
    CMDB.PANINFO........ >A722 :     
    CMDB.PANKEYS........ >A72A :     
    CMDB.PANMARKERS..... >A728 :     
    CMDB.ROWS........... >0005 :     
    CMDB.SCRROWS........ >A706 :     
    CMDB.SIZE........... >1000 :     
    CMDB.STRUCT......... >A700 :     
    CMDB.TOP............ >E000 :     
    CMDB.TOP.PTR........ >A700 :     
    CMDB.VDPTOP......... >A70E :     
    CMDB.VISIBLE........ >A702 :     
    CMDB.YXPROMPT....... >A712 :     
    CMDB.YXSAVE......... >A70C :     
    CMDB.YXTOP.......... >A710 :     
    COLROW.............. >0050 :     
    CONFIG.............. >0002 :     
    CONST.0............. >2000 :     
    CONST.1............. >2002 :     
    CONST.10............ >3920 :     
    CONST.2............. >2004 :     
    CONST.3............. >3916 :     
    CONST.32............ >3922 :     
    CONST.4............. >2006 :     
    CONST.5............. >3918 :     
    CONST.6............. >391A :     
    CONST.7............. >391C :     
    CONST.8............. >2008 :     
    CONST.80............ >3924 :     
    CONST.9............. >391E :     
    CORE1.FREE.......... >A100 :     
    CORE1.FREE1......... >A036 :     
    CORE1.FREE2......... >A0D4 :     
    CORE1.TOP........... >A000 :     
    CORE2.FREE.......... >A200 :     
    CORE2.TOP........... >A100 :     
    CPU.CRASH........... >2026 :     
    CPU.CRASH.MAIN...... >2086 :     
    CPU.CRASH.MSG.CALLER >2198 :     
    CPU.CRASH.MSG.CRASHED >2182 :     
    CPU.CRASH.MSG.ID.... >21D8 :     
    CPU.CRASH.MSG.MARKER >21B0 :     
    CPU.CRASH.MSG.R..... >21AE :     
    CPU.CRASH.MSG.SOURCE >21C0 :     
    CPU.CRASH.MSG.ST.... >21BA :     
    CPU.CRASH.MSG.WP.... >21B4 :     
    CPU.CRASH.RESET..... >2076 :     
    CPU.CRASH.SHOWBANK.. >7F00 :     
    CPU.CRASH.SHOWBANK.BANKSTR >7F38 :     
    CPU.CRASH.SHOWREG... >20EC :     
    CPU.CRASH.SHOWREG.CONTENT >2142 :     
    CPU.CRASH.SHOWREG.LABEL >20FA :     
    CPU.SCRPAD.BACKUP... >2B0A :     
    CPU.SCRPAD.BACKUP.COPY >2B22 :     
    CPU.SCRPAD.BACKUP.EXIT >2B3C :     
    CPU.SCRPAD.PGIN..... >2B90 :     
    CPU.SCRPAD.PGIN.EXIT >2BB2 :     
    CPU.SCRPAD.PGOUT.... >2B52 :     
    CPU.SCRPAD.PGOUT.AFTER.RTWP >2B8A :     
    CPU.SCRPAD.PGOUT.EXIT >2B8E :     
    CPU.SCRPAD.RESTORE.. >2B3E :     
    CPU.SCRPAD.RESTORE.COPY >2B46 :     
    CPU.SCRPAD.RESTORE.EXIT >2B50 :     
    CPU.SCRPAD.SRC...... >7E00 :     
    CPU.SCRPAD.TGT...... >F000 :     
    CPU.SCRPAD1......... >8300 :     
    CPU.SCRPAD2......... >AD00 :     
    CPYCHK.............. >2506 :     
    CPYM0............... >2512 :     
    CPYM1............... >251E :     
    CPYM2............... >2526 :     
    CPYM2M.............. >24F4 :     
    CPYM2V.............. >24A0 :     
    CPYM3............... >2536 :     
    CPYM4............... >2540 :     
    CPYMZ............... >254C :     
    CPYODD.............. >254E :     
    CPYV2M.............. >24D2 :     
    DEBUG............... >0000 :     
    DEF.CLIP.FNAME.A.... >3D63 :     
    DEF.CLIP.FNAME.B.... >3D6D :     
    DEF.CLIP.FNAME.C.... >3D77 :     
    DEF.DEVICES......... >3DA8 :     
    DEF.MC.FNAME.A...... >3D81 :     
    DEF.MC.FNAME.B...... >3D8E :     
    DEF.MC.FNAME.C...... >3D9B :     
    DEF.PRINTER.FNAME... >3D5C :     
    DEVICE.F18A......... >0001 :     
    DEVICE.FG99.MODE.ADV >0000 :     
    DIALOG.FBROWSER..... >72E4 :     
    DIALOG.FBROWSER.EXIT >731C :     
    DIALOG.HELP.CONTENT. >6CCE :     
    DIALOG.HELP.CONTENT.EXIT >6D3E :     
    DIALOG.HELP.DATA.PAGE1.LEFT >6D5E :     
    DIALOG.HELP.DATA.PAGE1.RIGHT >6EE2 :     
    DIALOG.HELP.DATA.PAGE2.LEFT >70F5 :     
    DIALOG.HELP.DATA.PAGE2.RIGHT >71CD :     
    DIALOG.HELP.DATA.PAGES >6D4E :     
    DOFILL.............. >2280 :     
    DOWN................ >26E6 :     
    DSRLNK.............. >2BB4 :     
    DSRLNK.DEVICE_NAME.GET_LENGTH >2C0E :     
    DSRLNK.DSRLWS....... >A400 :     
    DSRLNK.DSRSCAN.CALL_DSR >2C8A :     
    DSRLNK.DSRSCAN.CARDLOOP >2C3A :     
    DSRLNK.DSRSCAN.CARDOFF >2C34 :     
    DSRLNK.DSRSCAN.DSR.8 >2CBC :     
    DSRLNK.DSRSCAN.DSR.A >2CCC :     
    DSRLNK.DSRSCAN.GETENTRY >2C64 :     
    DSRLNK.DSRSCAN.NEXTENTRY >2C5E :     
    DSRLNK.DSRSCAN.RETURN_DSR >2CAC :     
    DSRLNK.DSRSCAN.START >2C2A :     
    DSRLNK.DSTYPE....... >A40A :     
    DSRLNK.ERROR.DEVICENAME_INVALID >2CD8 :     
    DSRLNK.ERROR.IO_ERROR >2CDA :     
    DSRLNK.ERROR.NODSR_FOUND >2CD4 :     
    DSRLNK.ERROR.NODSR_FOUND_OFF >2CD2 :     
    DSRLNK.FLGPTR....... >A434 :     
    DSRLNK.INIT......... >2BB8 :     
    DSRLNK.NAMSTO....... >A420 :     
    DSRLNK.PERIOD....... >2D24 :     
    DSRLNK.REUSE........ >2CE4 :     
    DSRLNK.REUSE.INIT... >2CE8 :     
    DSRLNK.SAV8A........ >A428 :     
    DSRLNK.SAVCRU....... >A42A :     
    DSRLNK.SAVENT....... >A42C :     
    DSRLNK.SAVLEN....... >A432 :     
    DSRLNK.SAVPAB....... >A42E :     
    DSRLNK.SAVVER....... >A430 :     
    EDB.AUTOINSERT...... >A50C :     
    EDB.BK.FB.ROW....... >A520 :     
    EDB.BK.FB.TOPLINE... >A51E :     
    EDB.BLOCK.M1........ >A50E :     
    EDB.BLOCK.M2........ >A510 :     
    EDB.BLOCK.VAR....... >A512 :     
    EDB.DIRTY........... >A506 :     
    EDB.FILENAME........ >A526 :     
    EDB.FILENAME.PTR.... >A514 :     
    EDB.FILETYPE.PTR.... >A516 :     
    EDB.FREE............ >A576 :     
    EDB.HIPAGE.ALLOC.... >373C :     
    EDB.HIPAGE.ALLOC.CHECK_SETPAGE >3748 :     
    EDB.HIPAGE.ALLOC.CRASH >3772 :     
    EDB.HIPAGE.ALLOC.EXIT >377A :     
    EDB.HIPAGE.ALLOC.SETPAGE >3764 :     
    EDB.INDEX.PTR....... >A502 :     
    EDB.INIT............ >3260 :     
    EDB.INIT.EXIT....... >32A6 :     
    EDB.INSMODE......... >A50A :     
    EDB.LINE.GETLENGTH.. >36D4 :     
    EDB.LINE.GETLENGTH.EXIT >3710 :     
    EDB.LINE.GETLENGTH.NULL >370C :     
    EDB.LINE.GETLENGTH2. >3718 :     
    EDB.LINE.GETLENGTH2.EXIT >3736 :     
    EDB.LINE.MAPPAGE.... >368A :     
    EDB.LINE.MAPPAGE.EXIT >36CC :     
    EDB.LINE.MAPPAGE.LOOKUP >36A4 :     
    EDB.LINE.PACK.FB.... >7324 :     
    EDB.LINE.UNPACK.FB.. >7336 :     
    EDB.LINES........... >A504 :     
    EDB.LINETERM........ >A524 :     
    EDB.NEXT_FREE.PTR... >A508 :     
    EDB.SAMS.HIPAGE..... >A51C :     
    EDB.SAMS.LOPAGE..... >A51A :     
    EDB.SAMS.PAGE....... >A518 :     
    EDB.SIZE............ >1000 :     
    EDB.SPECIAL.FILE.... >A522 :     
    EDB.STRUCT.......... >A500 :     
    EDB.TOP............. >C000 :     
    EDB.TOP.PTR......... >A500 :     
    ENKNL............... >200E :     
    ENUSR............... >2012 :     
    EOL................. >FFFF :     
    ERRPANE.EXIT........ >332E :     
    ERRPANE.INIT........ >3308 :     
    F18CHK.............. >276E :     
    F18CHK_EXIT......... >27AC :     
    F18CHK_GPU.......... >27B8 :     
    F18CHK_NO........... >27A2 :     
    F18CHK_YES.......... >27A8 :     
    F18FW1.............. >27EA :     
    F18FWV.............. >27D0 :     
    F18IDL.............. >2764 :     
    F18LCK.............. >275A :     
    F18RST.............. >27C0 :     
    F18UNL.............. >2744 :     
    FB.CALC.POINTER..... >3108 :     
    FB.CALC.POINTER.EXIT >3128 :     
    FB.CALC.SCRROWS..... >3130 :     
    FB.CALC.SCRROWS.EXIT >315C :     
    FB.CALC.SCRROWS.HANDLE.ERRORS >3150 :     
    FB.CALC.SCRROWS.HANDLE.MC >3144 :     
    FB.CALC.SCRROWS.HANDLE.RULER >313A :     
    FB.COLORIZE......... >A312 :     
    FB.COLORLINES....... >6612 :     
    FB.COLORLINES.EXIT.. >668E :     
    FB.COLORLINES.FILL.. >667C :     
    FB.COLORLINES.LOOP.. >6660 :     
    FB.COLORLINES.NORMAL >6676 :     
    FB.COLORLINES.NORULER >665A :     
    FB.COLSLINE......... >A30E :     
    FB.COLUMN........... >A30C :     
    FB.CURRENT.......... >A302 :     
    FB.CURSOR.BOT....... >6098 :     
    FB.CURSOR.BOT.EXIT.. >60D0 :     
    FB.CURSOR.BOT.REFRESH >60AC :     
    FB.CURSOR.BOTSCR.... >60D4 :     
    FB.CURSOR.BOTSCR.CURSOR >60EC :     
    FB.CURSOR.BOTSCR.EOF >60FE :     
    FB.CURSOR.BOTSCR.EXIT >611E :     
    FB.CURSOR.DOWN...... >6182 :     
    FB.CURSOR.DOWN.CURSOR >61D0 :     
    FB.CURSOR.DOWN.EXIT. >61F2 :     
    FB.CURSOR.DOWN.MOVE. >61A2 :     
    FB.CURSOR.DOWN.SET_CURSORX >61D8 :     
    FB.CURSOR.HOME...... >61FA :     
    FB.CURSOR.HOME.EXIT. >621E :     
    FB.CURSOR.TOP....... >604A :     
    FB.CURSOR.TOP.EXIT.. >606E :     
    FB.CURSOR.TOP.REFRESH >605E :     
    FB.CURSOR.TOPSCR.... >6072 :     
    FB.CURSOR.TOPSCR.EXIT >6094 :     
    FB.CURSOR.TOPSCR.REFRESH >6086 :     
    FB.CURSOR.UP........ >6124 :     
    FB.CURSOR.UP.CURSOR. >613C :     
    FB.CURSOR.UP.CURSOR_UP >6158 :     
    FB.CURSOR.UP.EXIT... >617A :     
    FB.CURSOR.UP.SET_CURSORX >6160 :     
    FB.CURTOGGLE........ >A314 :     
    FB.DIRTY............ >A318 :     
    FB.FREE............. >A3C0 :     
    FB.GET.NONBLANK..... >688E :     
    FB.GET.NONBLANK.EXIT >68D2 :     
    FB.GET.NONBLANK.LOOP >68AA :     
    FB.GET.NONBLANK.MATCH >68BA :     
    FB.GET.NONBLANK.NOMATCH >68CA :     
    FB.GOTO.TOPROW...... >6514 :     
    FB.GOTO.TOPROW.EXIT. >6564 :     
    FB.GOTO.TOPROW.LINE. >6546 :     
    FB.GOTO.TOPROW.OFFSET >6540 :     
    FB.HSCROLL.......... >67AA :     
    FB.HSCROLL.EXIT..... >67D2 :     
    FB.INIT............. >3094 :     
    FB.INIT.EXIT........ >30E6 :     
    FB.INSERT.CHAR...... >62BE :     
    FB.INSERT.CHAR.APPEND >6372 :     
    FB.INSERT.CHAR.CALC. >6332 :     
    FB.INSERT.CHAR.CHECK1 >62DA :     
    FB.INSERT.CHAR.CHECK2 >62E4 :     
    FB.INSERT.CHAR.CHECK3 >631E :     
    FB.INSERT.CHAR.CHECK4 >6326 :     
    FB.INSERT.CHAR.EXIT. >6376 :     
    FB.INSERT.CHAR.LOOP. >6344 :     
    FB.INSERT.LINE...... >6224 :     
    FB.INSERT.LINE.EXIT. >62B6 :     
    FB.INSERT.LINE.INSERT >624E :     
    FB.INSERT.LINE.M1... >6274 :     
    FB.INSERT.LINE.M2... >628C :     
    FB.INSERT.LINE.REFRESH >62A4 :     
    FB.NULL2CHAR........ >63D4 :     
    FB.NULL2CHAR.CRASH.. >63F2 :     
    FB.NULL2CHAR.EXIT... >641C :     
    FB.NULL2CHAR.INIT... >63FA :     
    FB.NULL2CHAR.LOOP... >640A :     
    FB.REFRESH.......... >6818 :     
    FB.REFRESH.ERASE_EOB >685E :     
    FB.REFRESH.EXIT..... >6880 :     
    FB.REFRESH.UNPACK_LINE >683A :     
    FB.REPLACE.CHAR..... >6382 :     
    FB.REPLACE.CHAR.EXIT >63CC :     
    FB.REPLACE.CHAR.INCX >63B6 :     
    FB.RESTORE.......... >67DC :     
    FB.RESTORE.EXIT..... >680A :     
    FB.ROW.............. >A306 :     
    FB.ROW.DIRTY........ >A30A :     
    FB.ROW.LENGTH....... >A308 :     
    FB.ROW2LINE......... >30EE :     
    FB.ROW2LINE.EXIT.... >3102 :     
    FB.RULER.INIT....... >656A :     
    FB.RULER.INIT.EXIT.. >65B8 :     
    FB.RULER.INIT.LOOP.. >6598 :     
    FB.RULER.SIT........ >A320 :     
    FB.RULER.TAT........ >A370 :     
    FB.RULER.TXT........ >65C2 :     
    FB.SCAN.FNAME....... >66F0 :     
    FB.SCAN.FNAME.COPY.. >6710 :     
    FB.SCAN.FNAME.COPY.REST >6762 :     
    FB.SCAN.FNAME.COPY.REST.LOOP >6764 :     
    FB.SCAN.FNAME.CRASH. >678A :     
    FB.SCAN.FNAME.DEVICE.LOOP >6740 :     
    FB.SCAN.FNAME.DONE.. >6792 :     
    FB.SCAN.FNAME.EXIT.. >6798 :     
    FB.SCAN.FNAME.NEXTDEV.LOOP >6758 :     
    FB.SCRROWS.......... >A31C :     
    FB.SCRROWS.MAX...... >A31E :     
    FB.SIZE............. >0960 :     
    FB.STATUS.DIRTY..... >A31A :     
    FB.STRUCT........... >A300 :     
    FB.TAB.NEXT......... >648A :     
    FB.TAB.NEXT.EOL..... >64F2 :     
    FB.TAB.NEXT.EXIT.... >650A :     
    FB.TAB.NEXT.LOOP.... >649E :     
    FB.TAB.PREV......... >6428 :     
    FB.TAB.PREV.EOL..... >646E :     
    FB.TAB.PREV.EXIT.... >6482 :     
    FB.TAB.PREV.LOOP.... >6438 :     
    FB.TOP.............. >D000 :     
    FB.TOP.PTR.......... >A300 :     
    FB.TOPLINE.......... >A304 :     
    FB.UNCRUNCH.AREA.... >D960 :     
    FB.VDPDUMP.......... >66A0 :     
    FB.VDPDUMP.CALC..... >66D0 :     
    FB.VDPDUMP.EXIT..... >66E6 :     
    FB.VWCO............. >A310 :     
    FB.YXSAVE........... >A316 :     
    FG99................ >2DDE :     
    FG99.CART.FBFORTH... >3E14 :     
    FG99.CART.FCMD...... >3DD8 :     
    FG99.CART.RXB....... >3E00 :     
    FG99.CART.XBGEM..... >3DEC :     
    FG99.EXIT........... >2E18 :     
    FG99.RUN............ >37A2 :     
    FG99.SEND.LOOP...... >2DEE :     
    FG99.WAIT........... >2E06 :     
    FH.CALLBACK1........ >A450 :     
    FH.CALLBACK2........ >A452 :     
    FH.CALLBACK3........ >A454 :     
    FH.CALLBACK4........ >A456 :     
    FH.CALLBACK5........ >A458 :     
    FH.COUNTER.......... >A442 :     
    FH.DIR.REC.PTR...... >A468 :     
    FH.FILETYPE......... >A44C :     
    FH.FNAME.PTR........ >A444 :     
    FH.FOPMODE.......... >A44A :     
    FH.FOPMODE.NONE..... >0000 :     
    FH.FOPMODE.READFILE. >0001 :     
    FH.FOPMODE.WRITEFILE >0002 :     
    FH.FREE............. >A4BA :     
    FH.FTYPE.INIT....... >A45A :     
    FH.IORESULT......... >A43A :     
    FH.KILOBYTES........ >A440 :     
    FH.KILOBYTES.PREV... >A45C :     
    FH.LINE............. >A45E :     
    FH.MEMBUFFER........ >A46A :     
    FH.OFFSETOPCODE..... >A44E :     
    FH.PAB.PTR.......... >A436 :     
    FH.PABSTAT.......... >A438 :     
    FH.PABTPL.PTR....... >A466 :     
    FH.RAM.PTR.......... >A45C :     
    FH.RECLEN........... >A43E :     
    FH.RECORDS.......... >A43C :     
    FH.SAMS.HIPAGE...... >A448 :     
    FH.SAMS.PAGE........ >A446 :     
    FH.STRUCT........... >A400 :     
    FH.TEMP1............ >A460 :     
    FH.TEMP2............ >A462 :     
    FH.TEMP3............ >A464 :     
    FH.VPAB............. >0A60 :     
    FH.VRECBUF.......... >0960 :     
    FH.WORKMODE......... >A45A :     
    FIL.EXIT............ >228C :     
    FIL16B.............. >2276 :     
    FILCHK.............. >2248 :     
    FILCHK2............. >2258 :     
    FILCHK3............. >2264 :     
    FILE.CLOSE.......... >2D4A :     
    FILE.DELETE......... >2D82 :     
    FILE.IMAGE.LOAD..... >2D7E :     
    FILE.IMAGE.SAVE..... >2D80 :     
    FILE.OPEN........... >2D26 :     
    FILE.RECORD.READ.... >2D56 :     
    FILE.RECORD.SEEK.... >2D7C :     
    FILE.RECORD.WRITE... >2D62 :     
    FILE.RENAME......... >2D84 :     
    FILE.STATUS......... >2D86 :     
    FILM................ >2236 :     
    FILV................ >228E :     
    FILZZ............... >22B4 :     
    FJ.BOTTOM........... >B000 :     
    FNOPT1.............. >0000 :     
    FNOPT2.............. >0006 :     
    FNOPT3.............. >000C :     
    FNOPT4.............. >0012 :     
    FNOPT5.............. >8000 :     
    FNOPT6.............. >8006 :     
    FNOPT7.............. >800C :     
    FNOPT8.............. >8012 :     
    FNTADR.............. >1100 :     
    GRAPH1.............. >21F2 :     
    GRMRA............... >9802 :     
    GRMRD............... >9800 :     
    GRMWA............... >9C02 :     
    GRMWD............... >9C00 :     
    HCHAR............... >27EC :     
    HCHAR1.............. >2806 :     
    HCHAR2.............. >2810 :     
    HCHARX.............. >27F2 :     
    HEAP.TOP............ >F000 :     
    HOOKOK.............. >2E22 :     
    ID.DIALOG.APPEND.... >000E :     
    ID.DIALOG.BASIC..... >006B :     
    ID.DIALOG.BLOCK..... >0066 :     
    ID.DIALOG.CARTRIDGE. >006A :     
    ID.DIALOG.CFG....... >006C :     
    ID.DIALOG.CFG.CLIP.. >0011 :     
    ID.DIALOG.CFG.MC.... >0012 :     
    ID.DIALOG.CLIPBOARD. >0067 :     
    ID.DIALOG.EDITOR.... >006D :     
    ID.DIALOG.FILE...... >0069 :     
    ID.DIALOG.FONT...... >006E :     
    ID.DIALOG.GOTO...... >0013 :     
    ID.DIALOG.HELP...... >0068 :     
    ID.DIALOG.INSERT.... >000D :     
    ID.DIALOG.LOAD...... >000A :     
    ID.DIALOG.MENU...... >0064 :     
    ID.DIALOG.PRINT..... >000F :     
    ID.DIALOG.PRINTBLOCK >0010 :     
    ID.DIALOG.SAVE...... >000B :     
    ID.DIALOG.SAVEBLOCK. >000C :     
    ID.DIALOG.SHORTCUTS. >006F :     
    ID.DIALOG.UNSAVED... >0065 :     
    ID.FILE.APPENDFILE.. >0003 :     
    ID.FILE.CLIPBLOCK... >0006 :     
    ID.FILE.INSERTFILE.. >0002 :     
    ID.FILE.LOADFILE.... >0001 :     
    ID.FILE.PRINTBLOCK.. >0008 :     
    ID.FILE.PRINTFILE... >0007 :     
    ID.FILE.SAVEBLOCK... >0005 :     
    ID.FILE.SAVEFILE.... >0004 :     
    ID.SPECIAL.BASIC.... >0003 :     
    ID.SPECIAL.MASTCAT.. >0001 :     
    ID.SPECIAL.NORMAL... >0000 :     
    ID.SPECIAL.READONLY. >0002 :     
    IDX.ENTRY.DELETE.... >3590 :     
    IDX.ENTRY.DELETE.EXIT >35E8 :     
    IDX.ENTRY.DELETE.LASTLINE >35BC :     
    IDX.ENTRY.DELETE.REORG >35C4 :     
    IDX.ENTRY.DELETE.REORG.COMPLEX >35CE :     
    IDX.ENTRY.DELETE.REORG.SIMPLE >35E2 :     
    IDX.ENTRY.INSERT.... >3632 :     
    IDX.ENTRY.INSERT.EXIT >367E :     
    IDX.ENTRY.INSERT.REORG >3650 :     
    IDX.ENTRY.INSERT.REORG.COMPLEX >365A :     
    IDX.ENTRY.INSERT.REORG.SIMPLE >366E :     
    IDX.ENTRY.UPDATE.... >34E2 :     
    IDX.ENTRY.UPDATE.CLEAR >351C :     
    IDX.ENTRY.UPDATE.EXIT >352C :     
    IDX.ENTRY.UPDATE.SAVE >350A :     
    IDX.FREE............ >A606 :     
    IDX.INIT............ >3160 :     
    IDX.INIT.EXIT....... >319C :     
    IDX.POINTER.GET..... >3534 :     
    IDX.POINTER.GET.EXIT >3576 :     
    IDX.POINTER.GET.PARM >3564 :     
    IDX.POINTER.GET.PARM.NULL >356E :     
    IDX.SAMS.HIPAGE..... >A604 :     
    IDX.SAMS.LOPAGE..... >A602 :     
    IDX.SAMS.PAGE....... >A600 :     
    IDX.SIZE............ >1000 :     
    IDX.STRUCT.......... >A600 :     
    IDX.TOP............. >B000 :     
    INTOFF.............. >26B0 :     
    INTON............... >26B8 :     
    IO.ERR.BAD_DEVICE_NAME >0000 :     
    IO.ERR.BAD_OPEN_ATTRIBUTE >0002 :     
    IO.ERR.DEVICE_ERROR. >0006 :     
    IO.ERR.DEVICE_WRITE_PROTTECTED >0001 :     
    IO.ERR.EOF.......... >0005 :     
    IO.ERR.FILE_ERROR... >0007 :     
    IO.ERR.ILLEGAL_OPERATION >0003 :     
    IO.ERR.NO_ERROR_OCCURED >0000 :     
    IO.ERR.OUT_OF_TABLE_BUFFER_SPACE >0004 :     
    IO.OP.CLOSE......... >0001 :     
    IO.OP.DELFILE....... >0007 :     
    IO.OP.LOAD.......... >0005 :     
    IO.OP.OPEN.......... >0000 :     
    IO.OP.READ.......... >0002 :     
    IO.OP.REWIND........ >0004 :     
    IO.OP.SAVE.......... >0006 :     
    IO.OP.SCRATCH....... >0008 :     
    IO.OP.STATUS........ >0009 :     
    IO.OP.WRITE......... >0003 :     
    IO.REL.APP.DIS.FIX.. >0007 :     
    IO.REL.APP.DIS.VAR.. >0017 :     
    IO.REL.APP.INT.FIX.. >000F :     
    IO.REL.APP.INT.VAR.. >001F :     
    IO.REL.INP.DIS.FIX.. >0005 :     
    IO.REL.INP.DIS.VAR.. >0015 :     
    IO.REL.INP.INT.FIX.. >000D :     
    IO.REL.INP.INT.VAR.. >001D :     
    IO.REL.OUT.DIS.FIX.. >0003 :     
    IO.REL.OUT.DIS.VAR.. >0013 :     
    IO.REL.OUT.INT.FIX.. >000B :     
    IO.REL.OUT.INT.VAR.. >001B :     
    IO.REL.UPD.DIS.FIX.. >0001 :     
    IO.REL.UPD.DIS.VAR.. >0011 :     
    IO.REL.UPD.INT.FIX.. >0009 :     
    IO.REL.UPD.INT.VAR.. >0019 :     
    IO.SEQ.APP.DIS.FIX.. >0006 :     
    IO.SEQ.APP.DIS.VAR.. >0016 :     
    IO.SEQ.APP.INT.FIX.. >000E :     
    IO.SEQ.APP.INT.VAR.. >001E :     
    IO.SEQ.INP.DIS.FIX.. >0004 :     
    IO.SEQ.INP.DIS.VAR.. >0014 :     
    IO.SEQ.INP.INT.FIX.. >000C :     
    IO.SEQ.INP.INT.VAR.. >001C :     
    IO.SEQ.OUT.DIS.FIX.. >0002 :     
    IO.SEQ.OUT.DIS.VAR.. >0012 :     
    IO.SEQ.OUT.INT.FIX.. >000A :     
    IO.SEQ.OUT.INT.VAR.. >001A :     
    IO.SEQ.UPD.DIS.FIX.. >0000 :     
    IO.SEQ.UPD.DIS.VAR.. >0010 :     
    IO.SEQ.UPD.INT.FIX.. >0008 :     
    IO.SEQ.UPD.INT.VAR.. >0018 :     
    KBF.KBCLEAR......... >0001 :     
    KBFLAGS............. >A026 :     
    KEY.CTRL.0.......... >00B0 :     
    KEY.CTRL.1.......... >00B1 :     
    KEY.CTRL.2.......... >00B2 :     
    KEY.CTRL.3.......... >00B3 :     
    KEY.CTRL.4.......... >00B4 :     
    KEY.CTRL.5.......... >00B5 :     
    KEY.CTRL.6.......... >00B6 :     
    KEY.CTRL.7.......... >00B7 :     
    KEY.CTRL.8.......... >009E :     
    KEY.CTRL.9.......... >009F :     
    KEY.CTRL.A.......... >0081 :     
    KEY.CTRL.B.......... >0082 :     
    KEY.CTRL.C.......... >0083 :     
    KEY.CTRL.COMMA...... >0080 :     
    KEY.CTRL.D.......... >0084 :     
    KEY.CTRL.DOT........ >009B :     
    KEY.CTRL.E.......... >0085 :     
    KEY.CTRL.F.......... >0086 :     
    KEY.CTRL.G.......... >0087 :     
    KEY.CTRL.H.......... >0088 :     
    KEY.CTRL.I.......... >0089 :     
    KEY.CTRL.J.......... >008A :     
    KEY.CTRL.K.......... >008B :     
    KEY.CTRL.L.......... >008C :     
    KEY.CTRL.M.......... >008D :     
    KEY.CTRL.N.......... >008E :     
    KEY.CTRL.O.......... >008F :     
    KEY.CTRL.P.......... >0090 :     
    KEY.CTRL.PLUS....... >009D :     
    KEY.CTRL.Q.......... >0091 :     
    KEY.CTRL.R.......... >0092 :     
    KEY.CTRL.S.......... >0093 :     
    KEY.CTRL.SLASH...... >00BB :     
    KEY.CTRL.SPACE...... >00F0 :     
    KEY.CTRL.T.......... >0094 :     
    KEY.CTRL.U.......... >0095 :     
    KEY.CTRL.V.......... >0096 :     
    KEY.CTRL.W.......... >0097 :     
    KEY.CTRL.X.......... >0098 :     
    KEY.CTRL.Y.......... >0099 :     
    KEY.CTRL.Z.......... >009A :     
    KEY.ENTER........... >000D :     
    KEY.FCTN.0.......... >00BC :     
    KEY.FCTN.1.......... >0003 :     
    KEY.FCTN.2.......... >0004 :     
    KEY.FCTN.3.......... >0007 :     
    KEY.FCTN.4.......... >0002 :     
    KEY.FCTN.5.......... >000E :     
    KEY.FCTN.6.......... >000C :     
    KEY.FCTN.7.......... >0001 :     
    KEY.FCTN.8.......... >0006 :     
    KEY.FCTN.9.......... >000F :     
    KEY.FCTN.A.......... >0000 :     
    KEY.FCTN.B.......... >00BE :     
    KEY.FCTN.C.......... >0000 :     
    KEY.FCTN.COMMA...... >00B8 :     
    KEY.FCTN.D.......... >0009 :     
    KEY.FCTN.DOT........ >00B9 :     
    KEY.FCTN.E.......... >000B :     
    KEY.FCTN.F.......... >0000 :     
    KEY.FCTN.G.......... >0000 :     
    KEY.FCTN.H.......... >00BF :     
    KEY.FCTN.I.......... >0000 :     
    KEY.FCTN.J.......... >00C0 :     
    KEY.FCTN.K.......... >00C1 :     
    KEY.FCTN.L.......... >00C2 :     
    KEY.FCTN.M.......... >00C3 :     
    KEY.FCTN.N.......... >00C4 :     
    KEY.FCTN.O.......... >0000 :     
    KEY.FCTN.P.......... >0000 :     
    KEY.FCTN.PLUS....... >0005 :     
    KEY.FCTN.Q.......... >00C5 :     
    KEY.FCTN.R.......... >0000 :     
    KEY.FCTN.S.......... >0008 :     
    KEY.FCTN.T.......... >0000 :     
    KEY.FCTN.U.......... >0000 :     
    KEY.FCTN.V.......... >007F :     
    KEY.FCTN.W.......... >007E :     
    KEY.FCTN.X.......... >000A :     
    KEY.FCTN.Y.......... >00C6 :     
    KEY.FCTN.Z.......... >0000 :     
    KEY.LC.B............ >00A2 :     
    KEY.LC.E............ >00A5 :     
    KEY.LC.F............ >00A6 :     
    KEY.LC.H............ >00A8 :     
    KEY.LC.N............ >006E :     
    KEY.LC.O............ >006F :     
    KEY.LC.P............ >0070 :     
    KEY.LC.Q............ >0071 :     
    KEY.LC.R............ >0072 :     
    KEY.LC.S............ >0073 :     
    KEY.LC.X............ >0078 :     
    KEY.NUM.0........... >0030 :     
    KEY.NUM.1........... >0031 :     
    KEY.NUM.2........... >0032 :     
    KEY.NUM.3........... >0033 :     
    KEY.NUM.4........... >0034 :     
    KEY.NUM.5........... >0035 :     
    KEY.NUM.6........... >0036 :     
    KEY.NUM.7........... >0037 :     
    KEY.NUM.8........... >0038 :     
    KEY.NUM.9........... >0039 :     
    KEY.SPACE........... >0020 :     
    KEY.UC.A............ >0041 :     
    KEY.UC.B............ >0042 :     
    KEY.UC.C............ >0043 :     
    KEY.UC.D............ >0044 :     
    KEY.UC.E............ >0045 :     
    KEY.UC.F............ >0046 :     
    KEY.UC.G............ >0047 :     
    KEY.UC.H............ >0048 :     
    KEY.UC.I............ >0049 :     
    KEY.UC.J............ >004A :     
    KEY.UC.K............ >004B :     
    KEY.UC.L............ >004C :     
    KEY.UC.M............ >004D :     
    KEY.UC.N............ >004E :     
    KEY.UC.O............ >004F :     
    KEY.UC.P............ >0050 :     
    KEY.UC.Q............ >0051 :     
    KEY.UC.R............ >0052 :     
    KEY.UC.S............ >0053 :     
    KEY.UC.X............ >0058 :     
    KEYCODE1............ >A028 :     
    KEYCODE2............ >A02A :     
    KICKSTART.CODE1..... >6040 :     
    KICKSTART.CODE2..... >6046 :     
    KICKSTART.RESUME.... >6038 :     
    KSCAN............... >000E :     
    KTHREAD............. >2EBC :     
    KTHREAD_EXIT........ >2ECE :     
    KTHREAD_KB.......... >2ECA :     
    LDFNT............... >2360 :     
    LDFNT1.............. >2378 :     
    LDFNT2.............. >23B2 :     
    LDFNT3.............. >23C6 :     
    LDFNT4.............. >23DA :     
    LOADMC.............. >221A :     
    MAGIC.CHECK......... >73EA :     
    MAGIC.CLEAR......... >73D8 :     
    MAGIC.SET........... >73C6 :     
    MAGIC.STR.W1........ >A000 :     
    MAGIC.STR.W2........ >A002 :     
    MAGIC.STR.W3........ >A004 :     
    MAIN................ >6046 :     
    MCCODE.............. >2210 :     
    MCLOOP.............. >8320 :     
    MCSPRD.............. >8322 :     
    MEM.SAMS.SET.BOOT... >73A2 :     
    MEM.SAMS.SET.LEGACY. >7390 :     
    MEM.SAMS.SET.STEVIE. >73B4 :     
    MEM.SAMS.SETUP.STEVIE >737E :     
    MKHEX............... >2932 :     
    MKHEX1.............. >294A :     
    MKHEX1.DIGIT09...... >2960 :     
    MKHEX1.DIGITAF...... >2956 :     
    MKHEX2.............. >2966 :     
    MKHEX3.............. >29A8 :     
    MKHOO1.............. >2EDA :     
    MKHOOK.............. >2ED2 :     
    MKNUM............... >29C0 :     
    MKNUM1.............. >29D2 :     
    MKNUM2.............. >29EE :     
    MKNUM3.............. >29F2 :     
    MKNUM4.............. >29FC :     
    MKNUM5.............. >2A04 :     
    MKSLO1.............. >2F00 :     
    MKSLOT.............. >2EE6 :     
    MMPLA1.............. >289E :     
    MMPLA2.............. >28A4 :     
    MMPLAY.............. >2896 :     
    MUTE................ >2814 :     
    MUTE2............... >2818 :     
    MUTTAB.............. >282E :     
    MYFILE.............. >3926 :     
    NOFONT.............. >FFFF :     
    NOREP............... >0000 :     
    NOSPRITE............ >389C :     
    NUM1................ >3030 :     
    NUM2................ >3020 :     
    OUTPARM1............ >A018 :     
    OUTPARM2............ >A01A :     
    OUTPARM3............ >A01C :     
    OUTPARM4............ >A01E :     
    OUTPARM5............ >A020 :     
    OUTPARM6............ >A022 :     
    OUTPARM7............ >A024 :     
    PALON............... >201C :     
    PANE.BOTLINE........ >6980 :     
    PANE.BOTLINE.BUSY.OFF >6B7E :     
    PANE.BOTLINE.BUSY.OFF.EXIT >6B9C :     
    PANE.BOTLINE.BUSY.ON >6B58 :     
    PANE.BOTLINE.BUSY.ON.EXIT >6B76 :     
    PANE.BOTLINE.EXIT... >6B4C :     
    PANE.BOTLINE.MC..... >6992 :     
    PANE.BOTLINE.NOCHANGE >6A4A :     
    PANE.BOTLINE.SHORTCUTS >69D6 :     
    PANE.BOTLINE.SHOW_DIRTY >6A3A :     
    PANE.BOTLINE.SHOW_KEYS >69E8 :     
    PANE.BOTLINE.SHOW_LINE.1DIGIT >6B08 :     
    PANE.BOTLINE.SHOW_LINE.2DIGITS >6B00 :     
    PANE.BOTLINE.SHOW_LINE.3DIGITS >6AF6 :     
    PANE.BOTLINE.SHOW_LINE.REST >6B0C :     
    PANE.BOTLINE.SHOW_LINECOL >6A52 :     
    PANE.BOTLINE.SHOW_LINECOL.COLSTRING >6B16 :     
    PANE.BOTLINE.SHOW_LINECOL.LINELEN >6ABA :     
    PANE.BOTLINE.SHOW_LINES_IN_BUFFER >6B3A :     
    PANE.BOTLINE.SHOW_MODE >6A12 :     
    PANE.BOTLINE.SHOW_MODE.INSERT >6A22 :     
    PANE.BOTLINE.SHOW_MODE.INSERT.NOAUTO >6A32 :     
    PANE.BOTROW......... >001D :     
    PANE.COLORSCHEME.STATLINES >735A :     
    PANE.CURSOR.BLINK... >7348 :     
    PANE.ERRLINE.DRAWCOLOR >6BA4 :     
    PANE.ERRLINE.DRAWCOLOR.EXIT >6BCC :     
    PANE.ERRLINE.DRAWCOLOR.LOOP >6BBE :     
    PANE.ERRLINE.HIDE... >6C30 :     
    PANE.ERRLINE.HIDE.EXIT >6C5E :     
    PANE.ERRLINE.HIDE.FBCOLOR >6C48 :     
    PANE.ERRLINE.SHOW... >6BD6 :     
    PANE.ERRLINE.SHOW.EXIT >6C28 :     
    PANE.FOCUS.CMDB..... >0001 :     
    PANE.FOCUS.FB....... >0000 :     
    PANE.SHOW_HINT...... >6CBA :     
    PANE.SHOW_HINT.EXIT. >6CCA :     
    PANE.SHOW_HINTX..... >6C64 :     
    PANE.SHOW_HINTX.EXIT >6CAE :     
    PANE.TOPLINE........ >68D6 :     
    PANE.TOPLINE.EXIT... >6976 :     
    PANE.TOPLINE.FILE... >68E4 :     
    PANE.TOPLINE.ONESHOT.CLEARMSG >3782 :     
    PANE.TOPLINE.ONESHOT.CLEARMSG.EXIT >379A :     
    PANE.TOPLINE.SHOWMARKERS >6914 :     
    PARM1............... >A006 :     
    PARM2............... >A008 :     
    PARM3............... >A00A :     
    PARM4............... >A00C :     
    PARM5............... >A00E :     
    PARM6............... >A010 :     
    PARM7............... >A012 :     
    PARM8............... >A014 :     
    PARM9............... >A016 :     
    PCTADR.............. >0FC0 :     
    POPR0............... >2230 :     
    POPR1............... >222E :     
    POPR2............... >222C :     
    POPR3............... >222A :     
    POPRT............... >2232 :     
    PREFIX.............. >29B4 :     
    PUTAT............... >2442 :     
    PUTHEX.............. >29B6 :     
    PUTLST.............. >244A :     
    PUTLST.EXIT......... >249C :     
    PUTLST.LOOP......... >2452 :     
    PUTLST.NEXT......... >2494 :     
    PUTNUM.............. >2A3E :     
    PUTSTR.............. >241E :     
    PUTV01.............. >2346 :     
    PUTVR............... >2332 :     
    PUTVRX.............. >2334 :     
    R0.................. >0000 :     
    R0HB................ >8300 :     
    R0LB................ >8301 :     
    R1.................. >0001 :     
    R10................. >000A :     
    R10HB............... >8314 :     
    R10LB............... >8315 :     
    R11................. >000B :     
    R11HB............... >8316 :     
    R11LB............... >8317 :     
    R12................. >000C :     
    R12HB............... >8318 :     
    R12LB............... >8319 :     
    R13................. >000D :     
    R13HB............... >831A :     
    R13LB............... >831B :     
    R14................. >000E :     
    R14HB............... >831C :     
    R14LB............... >831D :     
    R15................. >000F :     
    R15HB............... >831E :     
    R15LB............... >831F :     
    R1HB................ >8302 :     
    R1LB................ >8303 :     
    R2.................. >0002 :     
    R2HB................ >8304 :     
    R2LB................ >8305 :     
    R3.................. >0003 :     
    R3HB................ >8306 :     
    R3LB................ >8307 :     
    R4.................. >0004 :     
    R4HB................ >8308 :     
    R4LB................ >8309 :     
    R5.................. >0005 :     
    R5HB................ >830A :     
    R5LB................ >830B :     
    R6.................. >0006 :     
    R6HB................ >830C :     
    R6LB................ >830D :     
    R7.................. >0007 :     
    R7HB................ >830E :     
    R7LB................ >830F :     
    R8.................. >0008 :     
    R8HB................ >8310 :     
    R8LB................ >8311 :     
    R9.................. >0009 :     
    R9HB................ >8312 :     
    R9LB................ >8313 :     
    RAM.MSG1............ >F050 :     
    RAM.MSG2............ >F0A0 :     
    RAMBUF.............. >A100 :     
    RAMSAT.............. >A056 :     
    RKSCAN.............. >28D0 :     
    RKSCAN.EXIT......... >2926 :     
    ROM.FARJUMP......... >2FE4 :     
    ROM.FARJUMP.ASSERT.CART >3056 :     
    ROM.FARJUMP.ASSERT.LOWMEM >3064 :     
    ROM.FARJUMP.BANKSWITCH.CALL >3046 :     
    ROM.FARJUMP.BANKSWITCH.FAILED1 >303E :     
    ROM.FARJUMP.BANKSWITCH.FAILED2 >3082 :     
    ROM.FARJUMP.BANKSWITCH.SRC.ADVFG99 >3078 :     
    ROM.FARJUMP.BANKSWITCH.SRC.ROM8K >3074 :     
    ROM.FARJUMP.BANKSWITCH.TARGET.ROM8K >3022 :     
    ROM.FARJUMP.BANKSWITCH.TGT.ADVFG99 >3026 :     
    ROM.FARJUMP.BANKSWITCH.TGT.DONE >302E :     
    ROM.FARJUMP.EXIT.... >308A :     
    ROM.FARJUMP.RETURN.. >3048 :     
    ROM.PROGRAM1........ >600C :     
    ROM.PROGRAM2........ >6024 :     
    ROM0_KSCAN_ON....... >0001 :     
    ROM0_KSCAN_OUT...... >A028 :     
    ROMSAT.............. >3890 :     
    RSSLOT.............. >2F12 :     
    RUNLI1.............. >2F2A :     
    RUNLI2.............. >2F36 :     
    RUNLI3.............. >2F3A :     
    RUNLI3A............. >2F42 :     
    RUNLI4.............. >2F4C :     
    RUNLI5.............. >2F56 :     
    RUNLI6.............. >2F64 :     
    RUNLI7.............. >2F72 :     
    RUNLI9.............. >2F76 :     
    RUNLIA.............. >2F98 :     
    RUNLIB.............. >2F26 :     
    RUNLIC.............. >2FBC :     
    RUNLID.............. >2FD2 :     
    RUNLIE.............. >2FDC :     
    S16X16.............. >26D8 :     
    S8X8................ >26D0 :     
    SAMS.LAYOUT......... >2608 :     
    SAMS.LAYOUT.COPY.... >2658 :     
    SAMS.LAYOUT.COPY.DATA >2690 :     
    SAMS.LAYOUT.COPY.EXIT >2684 :     
    SAMS.LAYOUT.COPY.LOOP >2676 :     
    SAMS.LAYOUT.EXIT.... >2640 :     
    SAMS.LAYOUT.STANDARD >2648 :     
    SAMS.MAPPING.OFF.... >25FA :     
    SAMS.MAPPING.OFF.EXIT >2604 :     
    SAMS.MAPPING.ON..... >25EC :     
    SAMS.MAPPING.ON.EXIT >25F6 :     
    SAMS.PAGE.GET....... >2556 :     
    SAMS.PAGE.GET.EXIT.. >2584 :     
    SAMS.PAGE.SET....... >258C :     
    SAMS.PAGE.SET.EXIT.. >25E0 :     
    SAMS.PAGE.SET.SWITCH_PAGE >25D0 :     
    SCROFF.............. >26A0 :     
    SCRON............... >26A8 :     
    SCRPAD.83C6......... >292C :     
    SCRPAD.83FA......... >292E :     
    SCRPAD.83FE......... >2930 :     
    SDEXI1.............. >28C8 :     
    SDEXI2.............. >28CA :     
    SDEXIT.............. >28B6 :     
    SDOPT1.............. >0007 :     
    SDOPT2.............. >0005 :     
    SDOPT3.............. >0006 :     
    SDOPT4.............. >0004 :     
    SDPLA1.............. >2850 :     
    SDPLA2.............. >285A :     
    SDPLA3.............. >285C :     
    SDPLAY.............. >2848 :     
    SDPREP.............. >2832 :     
    SETX................ >26F6 :     
    SKIP_CPU_CRC16...... >0001 :     
    SKIP_CPU_RLE_COMPRESS >0001 :     
    SKIP_CPU_RLE_DECOMPRESS >0001 :     
    SKIP_GROM_CPU_COPY.. >0001 :     
    SKIP_GROM_VRAM_COPY. >0001 :     
    SKIP_RANDOM_GENERATOR >0001 :     
    SKIP_ROM_BANKSWITCH. >0001 :     
    SKIP_SAMS_LAYOUT.... >0001 :     
    SKIP_SAMS_SIZE...... >0001 :     
    SKIP_SPEECH_DETECTION >0001 :     
    SKIP_SPEECH_PLAYER.. >0001 :     
    SKIP_VDP_BITMAP..... >0001 :     
    SKIP_VDP_BOXES...... >0001 :     
    SKIP_VDP_PX2YX_CALC. >0001 :     
    SKIP_VDP_RLE_DECOMPRESS >0001 :     
    SKIP_VDP_VCHAR...... >0001 :     
    SKIP_VDP_VIEWPORT... >0001 :     
    SKIP_VIRTUAL_KEYBOARD >0001 :     
    SLOTOK.............. >2E9E :     
    SMAG1X.............. >26C0 :     
    SMAG2X.............. >26C8 :     
    SOUND............... >8400 :     
    SP2.STKTOP.......... >A900 :     
    SPCHRD.............. >9000 :     
    SPCHWT.............. >9400 :     
    SPCODE.............. >2216 :     
    SPFBCK.............. >0004 :     
    SPFCLR.............. >00F4 :     
    SPFONT.............. >0000 :     
    SPKOFF.............. >FF00 :     
    SPKON............... >6000 :     
    SPRITECURSOR........ >0001 :     
    SPRPDT.............. >2800 :     
    SPRSAT.............. >2180 :     
    SPVMOD.............. >7F10 :     
    STACK............... >0009 :     
    STARTUP_KEEP_VDPMEMORY >0001 :     
    STEVIE.80X30........ >7F10 :     
    STEVIE.80X60........ >7F1A :     
    STRING.GETLENC...... >2AB4 :     
    STRING.GETLENC.EXIT. >2B00 :     
    STRING.GETLENC.LOOP. >2AE2 :     
    STRING.GETLENC.PANIC >2AF8 :     
    STRING.GETLENC.PUTLENGTH >2AF0 :     
    STRING.LTRIM........ >2A48 :     
    STRING.LTRIM.EXIT... >2AA8 :     
    STRING.LTRIM.MOVE... >2A8E :     
    STRING.LTRIM.PANIC.. >2AA0 :     
    STRING.LTRIM.SCAN... >2A82 :     
    TALKOF.............. >00FF :     
    TALKON.............. >0060 :     
    TASK.ONESHOT........ >3884 :     
    TASK.ONESHOT.EXIT... >388C :     
    TASK.VDP.COPY.SAT... >37CE :     
    TASK.VDP.COPY.SAT.CMDB >37F6 :     
    TASK.VDP.COPY.SAT.EXIT >3864 :     
    TASK.VDP.COPY.SAT.FB >3806 :     
    TASK.VDP.COPY.SAT.FB.NORULER >381A :     
    TASK.VDP.COPY.SAT.HIDE.INDICATORS >3850 :     
    TASK.VDP.COPY.SAT.WRITE >381E :     
    TASK.VDP.COPY.SAT.WRITE2 >385A :     
    TASK.VDP.CURSOR..... >3870 :     
    TASK.VDP.CURSOR.EXIT >387E :     
    TIB.AUTOUNPK........ >A0C0 :     
    TIB.AUX............. >FF00 :     
    TIB.AUX.END......... >FFFA :     
    TIB.AUX.FNAME....... >FF00 :     
    TIB.LINES........... >A0D2 :     
    TIB.LNT.BOT.PTR..... >A0C8 :     
    TIB.LNT.TOP.PTR..... >A0C6 :     
    TIB.SAMSTAB.PTR..... >A0EA :     
    TIB.SCRPAD.PTR...... >A0C4 :     
    TIB.SESSION......... >A0B4 :     
    TIB.STAB.PTR........ >A0C2 :     
    TIB.STATUS1......... >A0B6 :     
    TIB.STATUS2......... >A0B8 :     
    TIB.STATUS3......... >A0BA :     
    TIB.STATUS4......... >A0BC :     
    TIB.STATUS5......... >A0BE :     
    TIB.STRS.BOT.PTR.... >A0D0 :     
    TIB.STRS.TOP.PTR.... >A0CE :     
    TIB.SYMT.BOT.PTR.... >A0CC :     
    TIB.SYMT.TOP.PTR.... >A0CA :     
    TIB.VAR1............ >A0EC :     
    TIB.VAR10........... >A0FE :     
    TIB.VAR2............ >A0EE :     
    TIB.VAR3............ >A0F0 :     
    TIB.VAR4............ >A0F2 :     
    TIB.VAR5............ >A0F4 :     
    TIB.VAR6............ >A0F6 :     
    TIB.VAR7............ >A0F8 :     
    TIB.VAR8............ >A0FA :     
    TIB.VAR9............ >A0FC :     
    TIBASIC.32X24....... >7F24 :     
    TIBASIC.32X30....... >7F2E :     
    TIMERS.............. >A064 :     
    TMDAT............... >2EBA :     
    TMGR................ >2E1E :     
    TMGR1............... >2E22 :     
    TMGR10.............. >2EA2 :     
    TMGR11.............. >2EB0 :     
    TMGR12.............. >2EB4 :     
    TMGR1A.............. >2E30 :     
    TMGR2............... >2E36 :     
    TMGR3............... >2E46 :     
    TMGR4............... >2E58 :     
    TMGR5............... >2E6E :     
    TMGR6............... >2E72 :     
    TMGR7............... >2E76 :     
    TMGR8............... >2E78 :     
    TMGR9............... >2E80 :     
    TMP0................ >0004 :     
    TMP006.............. >23E2 :     
    TMP007.............. >24F2 :     
    TMP008.............. >24D0 :     
    TMP011.............. >2554 :     
    TMP0HB.............. >8308 :     
    TMP0LB.............. >8309 :     
    TMP1................ >0005 :     
    TMP1HB.............. >830A :     
    TMP1LB.............. >830B :     
    TMP2................ >0006 :     
    TMP2HB.............. >830C :     
    TMP2LB.............. >830D :     
    TMP3................ >0007 :     
    TMP3HB.............. >830E :     
    TMP3LB.............. >830F :     
    TMP4................ >0008 :     
    TMP4HB.............. >8310 :     
    TMP4LB.............. >8311 :     
    TRIMNUM............. >2A18 :     
    TRIMNUM_FILL........ >2A36 :     
    TRIMNUM_SCAN........ >2A24 :     
    TRIMNUM_SETLEN...... >2A30 :     
    TRMPVECTOR.......... >A034 :     
    TV.1TIMEONLY........ >00FE :     
    TV.BUSYCOLOR........ >A21C :     
    TV.CLIP.FNAME....... >DE50 :     
    TV.CMDB.HCOLOR...... >A220 :     
    TV.COLOR............ >A218 :     
    TV.COLORIZE.RESET... >9900 :     
    TV.COLORSCHEME...... >A212 :     
    TV.COLORSCHEME.ENTRIES >000C :     
    TV.COLORSCHEME.TABLE >389E :     
    TV.CURCOLOR......... >A216 :     
    TV.CURSHAPE......... >A214 :     
    TV.ERROR.MSG........ >A238 :     
    TV.ERROR.ROWS....... >A22C :     
    TV.ERROR.VISIBLE.... >A22A :     
    TV.FG99.IMG.PTR..... >A232 :     
    TV.FJ.STACKPNT...... >A228 :     
    TV.FONT.PTR......... >A222 :     
    TV.FREE............. >A2D8 :     
    TV.INIT............. >3338 :     
    TV.INIT.EXIT........ >338E :     
    TV.LINETERM......... >A236 :     
    TV.MARKCOLOR........ >A21A :     
    TV.MC.FNAME......... >DEA0 :     
    TV.PAD.STRING....... >346A :     
    TV.PAD.STRING.EXIT.. >34D6 :     
    TV.PAD.STRING.LOOP.. >34C0 :     
    TV.PAD.STRING.PANIC. >34CE :     
    TV.PANE.FOCUS....... >A224 :     
    TV.PRINTER.FNAME.... >DE00 :     
    TV.QUIT............. >3398 :     
    TV.RULER.VISIBLE.... >A210 :     
    TV.RULERCOLOR....... >A21E :     
    TV.SAMS.2000........ >A200 :     
    TV.SAMS.3000........ >A202 :     
    TV.SAMS.A000........ >A204 :     
    TV.SAMS.B000........ >A206 :     
    TV.SAMS.C000........ >A208 :     
    TV.SAMS.D000........ >A20A :     
    TV.SAMS.E000........ >A20C :     
    TV.SAMS.F000........ >A20E :     
    TV.SAMS.MAXPAGE..... >0100 :     
    TV.SP2.CONF......... >A22E :     
    TV.SP2.STACK........ >A230 :     
    TV.SPECMSG.PTR...... >A234 :     
    TV.STRUCT........... >A200 :     
    TV.TABS.TABLE.LR.... >38FE :     
    TV.TABS.TABLE.RL.... >390A :     
    TV.TASK.ONESHOT..... >A226 :     
    TV.UINT16.MPY....... >3434 :     
    TV.UINT16.PACK...... >33A6 :     
    TV.UINT16.PACK.DONE. >3420 :     
    TV.UINT16.PACK.ERROR >3418 :     
    TV.UINT16.PACK.EXIT. >3424 :     
    TV.UINT16.PACK.LOOP. >33EE :     
    TV.UINT16.UNPACK.... >343E :     
    TV.UINT16.UNPACK.EXIT >3464 :     
    TX4024.............. >21FC :     
    TX8024.............. >2206 :     
    TXT.ALPHA.DOWN...... >3C28 :     
    TXT.AUTOINS.OFF..... >3AD4 :     
    TXT.AUTOINS.ON...... >3AC4 :     
    TXT.AUTOINSERT...... >3940 :     
    TXT.BLOCK.CLIP...... >39C6 :     
    TXT.BLOCK.COPY...... >3988 :     
    TXT.BLOCK.DEL....... >3974 :     
    TXT.BLOCK.INSIDE.... >3D1E :     
    TXT.BLOCK.MOVE...... >399A :     
    TXT.BLOCK.PRINT..... >39E0 :     
    TXT.BLOCK.SAVE...... >39AC :     
    TXT.BOTTOM.......... >392E :     
    TXT.CLEARMEM........ >39F4 :     
    TXT.CMDB.PROMPT..... >3D4C :     
    TXT.COLORSCHEME..... >3D4E :     
    TXT.DELIM........... >392C :     
    TXT.DONE.APPEND..... >3A3E :     
    TXT.DONE.CLIPBOARD.. >3A92 :     
    TXT.DONE.CLIPDEV.... >3AA2 :     
    TXT.DONE.COPY....... >3A60 :     
    TXT.DONE.DELETE..... >3A80 :     
    TXT.DONE.INSERT..... >3A2C :     
    TXT.DONE.LOAD....... >3A1C :     
    TXT.DONE.MC......... >3AB0 :     
    TXT.DONE.PRINT...... >3A70 :     
    TXT.DONE.SAVE....... >3A50 :     
    TXT.FASTMODE........ >3AE4 :     
    TXT.FILETYPE.DV80... >3B6C :     
    TXT.FILETYPE.NONE... >3C36 :     
    TXT.INSERT.......... >393A :     
    TXT.IO.NOFILE....... >3CD8 :     
    TXT.IOERR.LOAD...... >3C90 :     
    TXT.IOERR.PRINT..... >3CBC :     
    TXT.IOERR.SAVE...... >3CA6 :     
    TXT.KB.............. >3B10 :     
    TXT.KEYMARKER....... >3C2E :     
    TXT.KEYS.BASIC1..... >3BFA :     
    TXT.KEYS.BLOCK...... >3BC4 :     
    TXT.KEYS.DEFAULT.... >3B7A :     
    TXT.KEYS.DEFAULTB... >3B9A :     
    TXT.LINES........... >3B14 :     
    TXT.LOADING......... >3948 :     
    TXT.M1.............. >3B72 :     
    TXT.M2.............. >3B76 :     
    TXT.MEMFULL.LOAD.... >3CF0 :     
    TXT.MSG.MASTCAT..... >3C3C :     
    TXT.MSG.TIBASIC..... >3C72 :     
    TXT.NEWFILE......... >3B1A :     
    TXT.OVRWRITE........ >3934 :     
    TXT.PRINTING........ >3960 :     
    TXT.READDIR......... >3A08 :     
    TXT.SAVING.......... >3954 :     
    TXT.STAR............ >3946 :     
    TXT.TIB1............ >3B26 :     
    TXT.TIB2............ >3B34 :     
    TXT.TIB3............ >3B42 :     
    TXT.TIB4............ >3B50 :     
    TXT.TIB5............ >3B5E :     
    TXT.UNCRUNCHING..... >3AF0 :     
    TXT.VERTLINE........ >3C2C :     
    TXT.WS1............. >3C30 :     
    TXT.WS2............. >3C32 :     
    TXT.WS4............. >3C36 :     
    UINT16.PACKED....... >A032 :     
    UINT16.UNPACKED..... >A02C :     
    UP.................. >26EE :     
    VDP.COLORS.LINE..... >736C :     
    VDP.FB.TOPROW.SIT... >0050 :     
    VDP.FB.TOPROW.TAT... >1850 :     
    VDP.PDT.BASE........ >1000 :     
    VDP.SIT.BASE........ >0000 :     
    VDP.SIT.SIZE........ >0960 :     
    VDP.TAT.BASE........ >1800 :     
    VDP.TAT.SIZE........ >0960 :     
    VDPA................ >8C02 :     
    VDPLA1.............. >287A :     
    VDPLA2.............. >2880 :     
    VDPLA3.............. >2890 :     
    VDPLAY.............. >2862 :     
    VDPR................ >8800 :     
    VDPR0............... >831C :     
    VDPR01.............. >000E :     
    VDPR1............... >831D :     
    VDPRW............... >000F :     
    VDPS................ >8802 :     
    VDPW................ >8C00 :     
    VDRA................ >22BA :     
    VDWA................ >22B6 :     
    VEC.1............... >7F40 :     
    VEC.10.............. >7F52 :     
    VEC.11.............. >7F54 :     
    VEC.12.............. >7F56 :     
    VEC.13.............. >7F58 :     
    VEC.14.............. >7F5A :     
    VEC.15.............. >7F5C :     
    VEC.16.............. >7F5E :     
    VEC.17.............. >7F60 :     
    VEC.18.............. >7F62 :     
    VEC.19.............. >7F64 :     
    VEC.2............... >7F42 :     
    VEC.20.............. >7F66 :     
    VEC.21.............. >7F68 :     
    VEC.22.............. >7F6A :     
    VEC.23.............. >7F6C :     
    VEC.24.............. >7F6E :     
    VEC.25.............. >7F70 :     
    VEC.26.............. >7F72 :     
    VEC.27.............. >7F74 :     
    VEC.28.............. >7F76 :     
    VEC.29.............. >7F78 :     
    VEC.3............... >7F44 :     
    VEC.30.............. >7F7A :     
    VEC.31.............. >7F7C :     
    VEC.32.............. >7F7E :     
    VEC.33.............. >7F80 :     
    VEC.34.............. >7F82 :     
    VEC.35.............. >7F84 :     
    VEC.36.............. >7F86 :     
    VEC.37.............. >7F88 :     
    VEC.38.............. >7F8A :     
    VEC.39.............. >7F8C :     
    VEC.4............... >7F46 :     
    VEC.40.............. >7F8E :     
    VEC.41.............. >7F90 :     
    VEC.42.............. >7F92 :     
    VEC.43.............. >7F94 :     
    VEC.44.............. >7F96 :     
    VEC.45.............. >7F98 :     
    VEC.46.............. >7F9A :     
    VEC.47.............. >7F9C :     
    VEC.48.............. >7F9E :     
    VEC.49.............. >7FA0 :     
    VEC.5............... >7F48 :     
    VEC.50.............. >7FA2 :     
    VEC.51.............. >7FA4 :     
    VEC.52.............. >7FA6 :     
    VEC.53.............. >7FA8 :     
    VEC.54.............. >7FAA :     
    VEC.55.............. >7FAC :     
    VEC.56.............. >7FAE :     
    VEC.57.............. >7FB0 :     
    VEC.58.............. >7FB2 :     
    VEC.59.............. >7FB4 :     
    VEC.6............... >7F4A :     
    VEC.60.............. >7FB6 :     
    VEC.61.............. >7FB8 :     
    VEC.62.............. >7FBA :     
    VEC.63.............. >7FBC :     
    VEC.64.............. >7FBE :     
    VEC.65.............. >7FC0 :     
    VEC.66.............. >7FC2 :     
    VEC.67.............. >7FC4 :     
    VEC.68.............. >7FC6 :     
    VEC.69.............. >7FC8 :     
    VEC.7............... >7F4C :     
    VEC.70.............. >7FCA :     
    VEC.71.............. >7FCC :     
    VEC.72.............. >7FCE :     
    VEC.73.............. >7FD0 :     
    VEC.74.............. >7FD2 :     
    VEC.75.............. >7FD4 :     
    VEC.76.............. >7FD6 :     
    VEC.77.............. >7FD8 :     
    VEC.78.............. >7FDA :     
    VEC.79.............. >7FDC :     
    VEC.8............... >7F4E :     
    VEC.80.............. >7FDE :     
    VEC.81.............. >7FE0 :     
    VEC.82.............. >7FE2 :     
    VEC.83.............. >7FE4 :     
    VEC.84.............. >7FE6 :     
    VEC.85.............. >7FE8 :     
    VEC.86.............. >7FEA :     
    VEC.87.............. >7FEC :     
    VEC.88.............. >7FEE :     
    VEC.89.............. >7FF0 :     
    VEC.9............... >7F50 :     
    VEC.90.............. >7FF2 :     
    VEC.91.............. >7FF4 :     
    VEC.92.............. >7FF6 :     
    VEC.93.............. >7FF8 :     
    VEC.94.............. >7FFA :     
    VEC.95.............. >7FFC :     
    VEC.96.............. >7FFE :     
    VGETB............... >22E2 :     
    VIDTA1.............. >2314 :     
    VIDTAB.............. >22F8 :     
    VPUTB............... >22C8 :     
    WAUX1............... >833C :     
    WAUX2............... >833E :     
    WAUX3............... >8340 :     
    WBASE............... >8328 :     
    WBIT0............... >2020 :     
    WBIT1............... >201E :     
    WBIT10.............. >200C :     
    WBIT11.............. >200A :     
    WBIT12.............. >2008 :     
    WBIT13.............. >2006 :     
    WBIT14.............. >2004 :     
    WBIT15.............. >2002 :     
    WBIT2............... >201C :     
    WBIT3............... >201A :     
    WBIT4............... >2018 :     
    WBIT5............... >2016 :     
    WBIT6............... >2014 :     
    WBIT7............... >2012 :     
    WBIT8............... >2010 :     
    WBIT9............... >200E :     
    WCOLMN.............. >833A :     
    WS1................. >8300 :     
    WSDLST.............. >8334 :     
    WSDTMP.............. >8336 :     
    WSPEAK.............. >8338 :     
    WTITAB.............. >832C :     
    WTITMP.............. >8330 :     
    WTIUSR.............. >832E :     
    WVRTKB.............. >8332 :     
    WYX................. >832A :     
    XCONFIG............. >0003 :     
    XCPU.SCRPAD.PGIN.... >2B92 :     
    XCPU.SCRPAD.PGOUT... >2B64 :     
    XFG99............... >2DE0 :     
    XFILE.CLOSE......... >2D4C :     
    XFILE.OPEN.......... >2D2A :     
    XFILM............... >223C :     
    XFILV............... >2294 :     
    XIDTAB.............. >22FA :     
    XLSLOT.............. >2F06 :     
    XPYM2M.............. >24FA :     
    XPYM2V.............. >24A6 :     
    XPYV2M.............. >24D8 :     
    XROM.FARJUMP........ >2FFC :     
    XROM.FARJUMP.PUSH_RETURN >300C :     
    XSAMS.LAYOUT........ >260A :     
    XSAMS.PAGE.GET...... >2558 :     
    XSAMS.PAGE.SET...... >2590 :     
    XSETX............... >26F8 :     
    XSTRING.GETLENC..... >2ACE :     
    XSTRING.LTRIM....... >2A64 :     
    XUTST0.............. >2420 :     
    XUTSTR.............. >2422 :     
    XVGETB.............. >22E4 :     
    XVPUTB.............. >22CC :     
    YX2PI1.............. >2730 :     
    YX2PI2.............. >2736 :     
    YX2PI3.............. >2740 :     
    YX2PNT.............. >23FA :     
    YX2PX............... >2702 :     
    YX2PXX.............. >2706 :     
    YX2PXX_C80.......... >2742 :     
    YX2PXX_NORMAL....... >2726 :     
    YX2PXX_Y_CALC....... >272A :     
    _FILE.RECORD.FOP.... >2D88 :     
    _FILE.RECORD.FOP.EXIT >2DDA :     
    _FILE.RECORD.FOP.OPTIMIZED >2DBE :     
    _FILE.RECORD.FOP.PAB >2DC2 :     
    _IDX.ENTRY.DELETE.REORG >3580 :     
    _IDX.ENTRY.DELETE.REORG.LOOP >3588 :     
    _IDX.ENTRY.INSERT.REORG >35F4 :     
    _IDX.ENTRY.INSERT.REORG.CRASH >35FA :     
    _IDX.ENTRY.INSERT.REORG.LOOP >3622 :     
    _IDX.SAMS.MAPCOLUMN.OFF >31D6 :     
    _IDX.SAMS.MAPCOLUMN.OFF.EXIT >3204 :     
    _IDX.SAMS.MAPCOLUMN.ON >31A2 :     
    _IDX.SAMS.MAPCOLUMN.ON.EXIT >31CC :     
    _IDX.SAMSPAGE.GET... >3210 :     
    _IDX.SAMSPAGE.GET.EXIT >3256 :     
