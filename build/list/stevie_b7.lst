XAS99 CROSS-ASSEMBLER   VERSION 3.4.0
     **** ****     > stevie_b7.asm
0001               ********************************************************************************
0002               *   Stevie
0003               *   Modern Programming Editor for the Texas Instruments TI-99/4a Home Computer.
0004               *   Copyright (C) 2018-2023 / Filip van Vooren
0005               *
0006               *   This program is free software: you can redistribute it and/or modify
0007               *   it under the terms of the GNU General Public License as published by
0008               *   the Free Software Foundation, either version 3 of the License, or
0009               *   (at your option) any later version.
0010               *
0011               *   This program is distributed in the hope that it will be useful,
0012               *   but WITHOUT ANY WARRANTY; without even the implied warranty of
0013               *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
0014               *   GNU General Public License for more details.
0015               *
0016               *   You should have received a copy of the GNU General Public License
0017               *   along with this program.  If not, see <https://www.gnu.org/licenses/>.
0018               ********************************************************************************
0019               * File: stevie_b7.asm
0020               *
0021               * Bank 7 "Jonas"
0022               * SAMS and TI Basic support routines
0023               ********************************************************************************
0024                       copy  "buildinfo.asm"       ; "build/.buildinfo/buildinfo.asm"
     **** ****     > buildinfo.asm
0001               ***************************************************************
0002               * BUILD: 231217-2000260
0003               ***************************************************************
                   < stevie_b7.asm
0025                       copy  "equ.rom.build.asm"   ; Cartridge build options
     **** ****     > equ.rom.build.asm
0001               * FILE......: equ.rom.build.asm
0002               * Purpose...: Cartridge build options
0003               
0004               *--------------------------------------------------------------
0005               * Skip unused spectra2 code modules for reduced code size
0006               *--------------------------------------------------------------
0007      0001     skip_rom_bankswitch       equ  1       ; Skip support for ROM bankswitching
0008      0001     skip_grom_cpu_copy        equ  1       ; Skip GROM to CPU copy functions
0009      0001     skip_grom_vram_copy       equ  1       ; Skip GROM to VDP vram copy functions
0010      0001     skip_vdp_boxes            equ  1       ; Skip filbox, putbox
0011      0001     skip_vdp_bitmap           equ  1       ; Skip bitmap functions
0012      0001     skip_vdp_viewport         equ  1       ; Skip viewport functions
0013      0001     skip_cpu_rle_compress     equ  1       ; Skip CPU RLE compression
0014      0001     skip_cpu_rle_decompress   equ  1       ; Skip CPU RLE decompression
0015      0001     skip_vdp_rle_decompress   equ  1       ; Skip VDP RLE decompression
0016      0001     skip_vdp_px2yx_calc       equ  1       ; Skip pixel to YX calculation
0017      0001     skip_speech_detection     equ  1       ; Skip speech synthesizer detection
0018      0001     skip_speech_player        equ  1       ; Skip inclusion of speech player code
0019      0001     skip_virtual_keyboard     equ  1       ; Skip virtual keyboard scan
0020      0001     skip_random_generator     equ  1       ; Skip random functions
0021      0001     skip_cpu_crc16            equ  1       ; Skip CPU memory CRC-16 calculation
0022               *--------------------------------------------------------------
0023               * Skip (manually included) spectra2 modules from resident RAM
0024               *--------------------------------------------------------------
0025      0001     skip_sams_layout          equ  1       ; Skip SAMS memory layout routine
0026      0001     skip_sams_size            equ  1       ; Skip SAMS card size check
0027               
0028               *--------------------------------------------------------------
0029               * SPECTRA2 / Stevie startup options
0030               *--------------------------------------------------------------
0031      0001     startup_keep_vdpmemory    equ  1       ; Do not clear VDP vram on start
0032      6038     kickstart.resume          equ  >6038   ; Resume Stevie session
0033      6040     kickstart.code1           equ  >6040   ; Uniform aorg entry addr accross banks
0034      6046     kickstart.code2           equ  >6046   ; Uniform aorg entry addr accross banks
0035      0001     rom0_kscan_on             equ  1       ; Use KSCAN in console ROM#0
0036      0000     debug                     equ  0       ; Turn on debugging mode
0037               
0038               
0039               *--------------------------------------------------------------
0040               * ROM layout
0041               *--------------------------------------------------------------
0042      7F00     bankx.crash.showbank      equ  >7f00   ; Show ROM bank in CPU crash screen
0043      7F10     bankx.vdptab              equ  >7f10   ; VDP mode tables
0044      7F40     bankx.vectab              equ  >7f40   ; Vector table
0045      0000     device.fg99.mode.adv      equ  0       ; FG99 advanced mode off
                   < stevie_b7.asm
0026                       copy  "rom.order.asm"       ; ROM bank order "non-inverted"
     **** ****     > rom.order.asm
0001               * FILE......: rom.order.asm
0002               * Purpose...: Equates with CPU write addresses for switching banks
0003               
0004               *--------------------------------------------------------------
0005               * ROM 8K/4K banks. Bank order (non-inverted)
0006               *--------------------------------------------------------------
0007      6000     bank0.rom                 equ  >6000   ; Jill
0008      6002     bank1.rom                 equ  >6002   ; James
0009      6004     bank2.rom                 equ  >6004   ; Jacky
0010      6006     bank3.rom                 equ  >6006   ; John
0011      6008     bank4.rom                 equ  >6008   ; Janine
0012      600A     bank5.rom                 equ  >600a   ; Jumbo
0013      600C     bank6.rom                 equ  >600c   ; Jenifer
0014      600E     bank7.rom                 equ  >600e   ; Jonas
0015               *--------------------------------------------------------------
0016               * RAM 4K banks (Only valid in advanced mode FG99)
0017               *--------------------------------------------------------------
0018      6800     bank0.ram                 equ  >6800   ; Jill
0019      6802     bank1.ram                 equ  >6802   ; James
0020      6804     bank2.ram                 equ  >6804   ; Jacky
0021      6806     bank3.ram                 equ  >6806   ; John
0022      6808     bank4.ram                 equ  >6808   ; Janine
0023      680A     bank5.ram                 equ  >680a   ; Jumbo
0024      680C     bank6.ram                 equ  >680c   ; Jenifer
0025      680E     bank7.ram                 equ  >680e   ; Jonas
                   < stevie_b7.asm
0027                       copy  "equ.vdp.asm"         ; VDP configuration (F18a/9938/...)
     **** ****     > equ.vdp.asm
0001               * FILE......: equ.vdp.asm
0002               * Purpose...: VDP configuration (F18a, 9938, ...)
0003               
0004               ***************************** F18a 24x80 ***************************************
0008               
0009               ***************************** F18a 24x80 ***************************************
0013               
0014               ***************************** F18a 30x80 ***************************************
0016                   copy 'equ.f18a.3080.asm'        ; Sprite cursor/rulers
     **** ****     > equ.f18a.3080.asm
0001               * FILE......: equ.f18a.3080.asm
0002               * Purpose...: F18a 30x80 mode (with sprite cursor/rulers)
0003               
0005               
0006               *===============================================================================
0007               * VDP RAM F18a (0000-47ff)
0008               *
0009               *     Mem range   Bytes    Hex    Purpose
0010               *     =========   =====   =====   =================================
0011               *     0000-095f    2400   >0960   PNT: Pattern Name Table
0012               *     0960-09af      80   >0050   FIO: File record buffer (DIS/VAR 80)
0013               *     0fc0-0fff                   PCT: Color Table (not used in 80 cols mode)
0014               *     1000-17ff    2048   >0800   PDT: Pattern Descriptor Table
0015               *     1800-215f    2400   >0960   TAT: Tile Attribute Table
0016               *                                      (Position based colors F18a, 80 colums)
0017               *     2180                        SAT: Sprite Attribute Table
0018               *                                      (Cursor in F18a, 80 cols mode)
0019               *     2800                        SPT: Sprite Pattern Table
0020               *                                      (Cursor in F18a, 80 columns, 2K boundary)
0021               *===============================================================================
0022               
0023               *--------------------------------------------------------------
0024               * Video mode configuration (stevie) - Graphics mode 30x80
0025               *--------------------------------------------------------------
0026      0050     vdp.fb.toprow.sit         equ  >0050   ; VDP SIT address of 1st Framebuffer row
0027      1850     vdp.fb.toprow.tat         equ  >1850   ; VDP TAT address of 1st Framebuffer row
0028      0000     vdp.sit.base              equ  >0000   ; VDP SIT base address
0029      0960     vdp.sit.size              equ  30*80   ; VDP SIT size 80 columns, 30 rows
0030      1800     vdp.tat.base              equ  >1800   ; VDP TAT base address
0031      0960     vdp.tat.size              equ  30*80   ; VDP TAT size 80 columns, 60 rows
0032      1000     vdp.pdt.base              equ  >1000   ; VDP PDT base address
0033               
0034               *--------------------------------------------------------------
0035               * Video mode configuration (stevie)
0036               *--------------------------------------------------------------
0037      001D     pane.botrow               equ  29      ; Bottom row on screen
0038      0050     colrow                    equ  80      ; Columns per row
0039      0960     fh.vrecbuf                equ  >0960   ; VDP address record buffer
0040      0A60     fh.vpab                   equ  >0a60   ; VDP address PAB
0041      0001     device.f18a               equ  1       ; F18a on
0042      0001     spritecursor              equ  1       ; Use sprites for cursor and ruler
0043               
0044               
0045               *--------------------------------------------------------------
0046               * Video mode configuration (spectra2)
0047               *--------------------------------------------------------------
0048      00F4     spfclr  equ   >f4                   ; Foreground/Background color for font.
0049      0004     spfbck  equ   >04                   ; Screen background color.
0050      7F10     spvmod  equ   bankx.vdptab          ; Video mode.   See VIDTAB for details.
0051      0000     spfont  equ   0                     ; Font to load. See LDFONT for details.
0052               
0053      0FC0     pctadr  equ   >0fc0                 ; VDP color table base
0054      1100     fntadr  equ   >1100                 ; VDP font start address (in PDT range)
0055      2180     sprsat  equ   >2180                 ; VDP sprite attribute table
0056      2800     sprpdt  equ   >2800                 ; VDP sprite pattern table
0057               
                   < equ.vdp.asm
0018               
0019               ***************************** F18a 30x80 ***************************************
                   < stevie_b7.asm
0028                       copy  "equ.asm"             ; Stevie main configuration
     **** ****     > equ.asm
0001               * FILE......: equ.asm
0002               * Purpose...: The main equates file for Stevie editor
0003               
0004               
0005               *===============================================================================
0006               * Memory map
0007               * ==========
0008               *
0009               * CARTRIDGE SPACE (6000-7fff)
0010               *
0011               *     Mem range   Bytes    BANK   Purpose
0012               *     =========   =====    ====   ==================================
0013               *     6000-603f      64       0   Cartridge header
0014               *     6040-7fff    8128       0   SP2 library + Stevie library
0015               *                                 relocated to RAM space
0016               *     ..............................................................
0017               *     6000-603f      64     1-7   Cartridge header
0018               *     6040-7fef    7744     1-7   Stevie program code
0019               *     7f00-7fff     384     1-7   Vector table (32 vectors)
0020               *===============================================================================
0021               
0022               
0023               ;-----------------------------------------------------------------
0024               ; Stevie Dialog / Pane specific equates
0025               ;-----------------------------------------------------------------
0026      0000     pane.focus.fb             equ  0       ; Editor pane has focus
0027      0001     pane.focus.cmdb           equ  1       ; Command buffer pane has focus
0028               ;-----------------------------------------------------------------
0029               ;   Dialog ID's
0030               ;-----------------------------------------------------------------
0031      000A     id.dialog.load            equ  10      ; "Load file"
0032      000B     id.dialog.save            equ  11      ; "Save file"
0033      000C     id.dialog.saveblock       equ  12      ; "Save block to file"
0034      000D     id.dialog.insert          equ  13      ; "Insert file"
0035      000E     id.dialog.append          equ  14      ; "Append file"
0036      000F     id.dialog.print           equ  15      ; "Print file"
0037      0010     id.dialog.printblock      equ  16      ; "Print block"
0038      0011     id.dialog.cfg.clip        equ  17      ; "Configure clipboard"
0039      0012     id.dialog.cfg.mc          equ  18      ; "Configure Master Catalog"
0040      0013     id.dialog.goto            equ  19      ; "Goto"
0041      0014     id.dialog.dir             equ  20      ; "Dir"
0042               ;-----------------------------------------------------------------
0043               ;   Dialog ID's >= 100 indicate that command prompt should be
0044               ;   hidden and no characters added to CMDB keyboard buffer.
0045               ;-----------------------------------------------------------------
0046      0064     id.dialog.menu            equ  100     ; "Main Menu"
0047      0065     id.dialog.unsaved         equ  101     ; "Unsaved changes"
0048      0066     id.dialog.block           equ  102     ; "Block move/copy/delete/print/..."
0049      0067     id.dialog.clipboard       equ  103     ; "Copy clipboard to line ..."
0050      0068     id.dialog.help            equ  104     ; "About"
0051      0069     id.dialog.file            equ  105     ; "File"
0052      006A     id.dialog.cartridge       equ  106     ; "Cartridge"
0053      006B     id.dialog.basic           equ  107     ; "TI Basic"
0054      006C     id.dialog.cfg             equ  108     ; "Configure"
0055      006D     id.dialog.editor          equ  109     ; "Configure editor"
0056      006E     id.dialog.font            equ  110     ; "Configure font"
0057      006F     id.dialog.shortcuts       equ  111     ; "Shortcuts"
0058               ;-----------------------------------------------------------------
0059               ; Suffix characters for clipboards
0060               ;-----------------------------------------------------------------
0061      3100     clip1                     equ  >3100   ; '1'
0062      3200     clip2                     equ  >3200   ; '2'
0063      3300     clip3                     equ  >3300   ; '3'
0064      3400     clip4                     equ  >3400   ; '4'
0065      3500     clip5                     equ  >3500   ; '5'
0066               ;-----------------------------------------------------------------
0067               ; Keyboard flags in Stevie
0068               ;-----------------------------------------------------------------
0069      0001     kbf.kbclear               equ  >0001   ;  Keyboard buffer cleared / @w$0001
0070               ;-----------------------------------------------------------------
0071               ; File work mode
0072               ;-----------------------------------------------------------------
0073      0001     id.file.loadfile          equ  1       ; Load file
0074      0002     id.file.insertfile        equ  2       ; Insert file
0075      0003     id.file.appendfile        equ  3       ; Append file
0076      0004     id.file.savefile          equ  4       ; Save file
0077      0005     id.file.saveblock         equ  5       ; Save block to file
0078      0006     id.file.clipblock         equ  6       ; Save block to clipboard
0079      0007     id.file.printfile         equ  7       ; Print file
0080      0008     id.file.printblock        equ  8       ; Print block
0081               ;-----------------------------------------------------------------
0082               ; Special file indicator
0083               ;-----------------------------------------------------------------
0084      0000     id.special.normal         equ  0       ; Normal file
0085      0001     id.special.mastcat        equ  1       ; Master catalog
0086      0002     id.special.readonly       equ  2       ; Read-only file
0087      0003     id.special.basic          equ  3       ; TI Basic program
0088               ;-----------------------------------------------------------------
0089               ; Stevie core 1 RAM                    @>a000-a0ff   (256 bytes)
0090               ;-----------------------------------------------------------------
0091      A000     core1.top         equ  >a000           ; Structure begin
0092      A000     magic.str.w1      equ  core1.top + 0   ; Magic string word 1
0093      A002     magic.str.w2      equ  core1.top + 2   ; Magic string word 2
0094      A004     magic.str.w3      equ  core1.top + 4   ; Magic string word 3
0095      A006     parm1             equ  core1.top + 6   ; Function parameter 1
0096      A008     parm2             equ  core1.top + 8   ; Function parameter 2
0097      A00A     parm3             equ  core1.top + 10  ; Function parameter 3
0098      A00C     parm4             equ  core1.top + 12  ; Function parameter 4
0099      A00E     parm5             equ  core1.top + 14  ; Function parameter 5
0100      A010     parm6             equ  core1.top + 16  ; Function parameter 6
0101      A012     parm7             equ  core1.top + 18  ; Function parameter 7
0102      A014     parm8             equ  core1.top + 20  ; Function parameter 8
0103      A016     parm9             equ  core1.top + 22  ; Function parameter 9
0104      A018     outparm1          equ  core1.top + 24  ; Function output parameter 1
0105      A01A     outparm2          equ  core1.top + 26  ; Function output parameter 2
0106      A01C     outparm3          equ  core1.top + 28  ; Function output parameter 3
0107      A01E     outparm4          equ  core1.top + 30  ; Function output parameter 4
0108      A020     outparm5          equ  core1.top + 32  ; Function output parameter 5
0109      A022     outparm6          equ  core1.top + 34  ; Function output parameter 6
0110      A024     outparm7          equ  core1.top + 36  ; Function output parameter 7
0111      A026     kbflags           equ  core1.top + 38  ; Keyboard control flags
0112      A028     keycode1          equ  core1.top + 40  ; Current key scanned
0113      A02A     keycode2          equ  core1.top + 42  ; Previous key scanned
0114      A02C     uint16.unpacked   equ  core1.top + 44  ; Unpacked uint16 (len-prefixed string)
0115      A032     uint16.packed     equ  core1.top + 50  ; Packed uint16 (2 bytes)
0116      A034     trmpvector        equ  core1.top + 52  ; Vector trampoline (if p1|tmp1 = >ffff)
0117      A036     core1.free1       equ  core1.top + 54  ; 54-85 **free**
0118      A056     ramsat            equ  core1.top + 86  ; Sprite Attr. Table in RAM (14 bytes)
0119      A064     timers            equ  core1.top + 100 ; Timers (80 bytes)
0120                                 ;--------------------------------------------
0121                                 ; TI Basic related
0122                                 ;--------------------------------------------
0123      A0B4     tib.session       equ  core1.top + 180 ; Current TI-Basic session (1-5)
0124      A0B6     tib.status1       equ  core1.top + 182 ; Status flags TI Basic session 1
0125      A0B8     tib.status2       equ  core1.top + 184 ; Status flags TI Basic session 2
0126      A0BA     tib.status3       equ  core1.top + 186 ; Status flags TI Basic session 3
0127      A0BC     tib.status4       equ  core1.top + 188 ; Status flags TI Basic session 4
0128      A0BE     tib.status5       equ  core1.top + 190 ; Status flags TI Basic session 5
0129      A0C0     tib.autounpk      equ  core1.top + 192 ; TI-Basic AutoUnpack (uncrunch)
0130      A0C2     tib.stab.ptr      equ  core1.top + 194 ; Pointer to TI-Basic SAMS page table
0131      A0C4     tib.scrpad.ptr    equ  core1.top + 196 ; Pointer to TI-Basic scratchpad in SAMS
0132      A0C6     tib.lnt.top.ptr   equ  core1.top + 198 ; Pointer to top of line number table
0133      A0C8     tib.lnt.bot.ptr   equ  core1.top + 200 ; Pointer to bottom of line number table
0134      A0CA     tib.symt.top.ptr  equ  core1.top + 202 ; Pointer to top of symbol table
0135      A0CC     tib.symt.bot.ptr  equ  core1.top + 204 ; Pointer to bottom of symbol table
0136      A0CE     tib.strs.top.ptr  equ  core1.top + 206 ; Pointer to top of string space
0137      A0D0     tib.strs.bot.ptr  equ  core1.top + 208 ; Pointer to bottom of string space
0138      A0D2     tib.lines         equ  core1.top + 210 ; Number of lines in TI Basic program
0139      A0D4     core1.free2       equ  core1.top + 212 ; **free* up to 233
0140      A0EA     tib.samstab.ptr   equ  core1.top + 234 ; Pointer to active SAMS mem layout table
0141      A0EC     tib.var1          equ  core1.top + 236 ; Temp variable 1
0142      A0EE     tib.var2          equ  core1.top + 238 ; Temp variable 2
0143      A0F0     tib.var3          equ  core1.top + 240 ; Temp variable 3
0144      A0F2     tib.var4          equ  core1.top + 242 ; Temp variable 4
0145      A0F4     tib.var5          equ  core1.top + 244 ; Temp variable 5
0146      A0F6     tib.var6          equ  core1.top + 246 ; Temp variable 6
0147      A0F8     tib.var7          equ  core1.top + 248 ; Temp variable 7
0148      A0FA     tib.var8          equ  core1.top + 250 ; Temp variable 8
0149      A0FC     tib.var9          equ  core1.top + 252 ; Temp variable 9
0150      A0FE     tib.var10         equ  core1.top + 254 ; Temp variable 10
0151      A100     core1.free        equ  core1.top + 256 ; End of structure
0152               ;-----------------------------------------------------------------
0153               ; Stevie core 2 RAM                    @>a100-a1ff   (256 bytes)
0154               ;-----------------------------------------------------------------
0155      A100     core2.top         equ  >a100           ; Structure begin
0156      A100     rambuf            equ  core2.top       ; RAM workbuffer
0157      A200     core2.free        equ  core2.top + 256 ; End of structure
0158               ;-----------------------------------------------------------------
0159               ; Stevie Editor shared structures      @>a200-a2ff   (256 bytes)
0160               ;-----------------------------------------------------------------
0161      A200     tv.struct         equ  >a200           ; Structure begin
0162      A202     tv.sams.3000      equ  tv.struct + 2   ; SAMS page in window >3000-3fff
0163      A200     tv.sams.2000      equ  tv.struct + 0   ; SAMS page in window >2000-2fff
0164      A204     tv.sams.a000      equ  tv.struct + 4   ; SAMS page in window >a000-afff
0165      A206     tv.sams.b000      equ  tv.struct + 6   ; SAMS page in window >b000-bfff
0166      A208     tv.sams.c000      equ  tv.struct + 8   ; SAMS page in window >c000-cfff
0167      A20A     tv.sams.d000      equ  tv.struct + 10  ; SAMS page in window >d000-dfff
0168      A20C     tv.sams.e000      equ  tv.struct + 12  ; SAMS page in window >e000-efff
0169      A20E     tv.sams.f000      equ  tv.struct + 14  ; SAMS page in window >f000-ffff
0170      A210     tv.ruler.visible  equ  tv.struct + 16  ; Show ruler with tab positions
0171      A212     tv.colorscheme    equ  tv.struct + 18  ; Current color scheme (0-xx)
0172      A214     tv.curshape       equ  tv.struct + 20  ; Cursor shape and color (sprite)
0173      A216     tv.curcolor       equ  tv.struct + 22  ; Cursor color1 + color2 (color scheme)
0174      A218     tv.color          equ  tv.struct + 24  ; FG/BG-color framebuffer + status lines
0175      A21A     tv.markcolor      equ  tv.struct + 26  ; FG/BG-color marked lines in framebuffer
0176      A21C     tv.busycolor      equ  tv.struct + 28  ; FG/BG-color bottom line when busy
0177      A21E     tv.rulercolor     equ  tv.struct + 30  ; FG/BG-color ruler line
0178      A220     tv.cmdb.hcolor    equ  tv.struct + 32  ; FG/BG-color command buffer header line
0179      A222     tv.font.ptr       equ  tv.struct + 34  ; Pointer to font (in ROM bank 6 or RAM)
0180      A224     tv.pane.focus     equ  tv.struct + 36  ; Identify pane that has focus
0181      A226     tv.task.oneshot   equ  tv.struct + 38  ; Pointer to one-shot routine
0182      A228     tv.fj.stackpnt    equ  tv.struct + 40  ; Pointer to farjump return stack
0183      A22A     tv.error.visible  equ  tv.struct + 42  ; Error pane visible
0184      A22C     tv.error.rows     equ  tv.struct + 44  ; Number of rows in error pane
0185      A22E     tv.sp2.conf       equ  tv.struct + 46  ; Backup of SP2 config register
0186      A230     tv.sp2.stack      equ  tv.struct + 48  ; Backup of SP2 stack register
0187      A232     tv.fg99.img.ptr   equ  tv.struct + 50  ; Pointer to Final GROM cartridge to load
0188      A234     tv.specmsg.ptr    equ  tv.struct + 52  ; Pointer to special message above botrow
0189      A236     tv.lineterm       equ  tv.struct + 54  ; Default line termination character(s)
0190      A238     tv.error.msg      equ  tv.struct + 56  ; Error message (max. 160 characters)
0191      A2D8     tv.free           equ  tv.struct + 216 ; End of structure
0192               ;-----------------------------------------------------------------
0193               ; Frame buffer structure               @>a300-a3ff   (256 bytes)
0194               ;-----------------------------------------------------------------
0195      A300     fb.struct         equ  >a300           ; Structure begin
0196      A300     fb.top.ptr        equ  fb.struct       ; Pointer to frame buffer
0197      A302     fb.current        equ  fb.struct + 2   ; Pointer to current pos. in frame buffer
0198      A304     fb.topline        equ  fb.struct + 4   ; Top line in frame buffer (matching
0199                                                      ; line X in editor buffer).
0200      A306     fb.row            equ  fb.struct + 6   ; Current row in frame buffer
0201                                                      ; (offset 0 .. @fb.scrrows)
0202      A308     fb.row.length     equ  fb.struct + 8   ; Length of current row in frame buffer
0203      A30A     fb.row.dirty      equ  fb.struct + 10  ; Current row dirty flag in frame buffer
0204      A30C     fb.column         equ  fb.struct + 12  ; Current column (0-79) in frame buffer
0205      A30E     fb.colsline       equ  fb.struct + 14  ; Columns per line in frame buffer
0206      A310     fb.vwco           equ  fb.struct + 16  ; View window column offset (0-xxx)
0207      A312     fb.colorize       equ  fb.struct + 18  ; M1/M2 colorize refresh required
0208      A314     fb.curtoggle      equ  fb.struct + 20  ; Cursor shape toggle (00=on <>00=off)
0209      A316     fb.yxsave         equ  fb.struct + 22  ; Copy of cursor YX position
0210      A318     fb.dirty          equ  fb.struct + 24  ; Frame buffer dirty flag
0211      A31A     fb.status.dirty   equ  fb.struct + 26  ; Status line(s) dirty flag
0212      A31C     fb.scrrows        equ  fb.struct + 28  ; Rows on physical screen for framebuffer
0213      A31E     fb.scrrows.max    equ  fb.struct + 30  ; Max # of rows on physical screen for fb
0214      A320     fb.ruler.sit      equ  fb.struct + 32  ; 80 char ruler  (no length-prefix!)
0215      A370     fb.ruler.tat      equ  fb.struct + 112 ; 80 char colors (no length-prefix!)
0216      A3C0     fb.free           equ  fb.struct + 192 ; End of structure
0217               ;-----------------------------------------------------------------
0218               ; File handle structure                @>a400-a4ff   (256 bytes)
0219               ;-----------------------------------------------------------------
0220      A400     fh.struct         equ  >a400           ; stevie file handling structures
0221               ;*******************************************************************************
0222               ; ATTENTION: dsrlnk vars must form a continuous memory block & keep their order!
0223               ;*******************************************************************************
0224      A400     dsrlnk.dsrlws     equ  fh.struct       ; dsrlnk workspace 32 bytes
0225      A420     dsrlnk.namsto     equ  fh.struct + 32  ; 8-byte RAM buf for holding device name
0226      A428     dsrlnk.sav8a      equ  fh.struct + 40  ; Save parm (8 or A) after "blwp @dsrlnk"
0227      A42A     dsrlnk.savcru     equ  fh.struct + 42  ; CRU address of device in prev. DSR call
0228      A42C     dsrlnk.savent     equ  fh.struct + 44  ; DSR entry addr of prev. DSR call
0229      A42E     dsrlnk.savpab     equ  fh.struct + 46  ; Pointer to Device or Subprogram in PAB
0230      A430     dsrlnk.savver     equ  fh.struct + 48  ; Version used in prev. DSR call
0231      A432     dsrlnk.savlen     equ  fh.struct + 50  ; Length of DSR name of prev. DSR call
0232      A434     dsrlnk.flgptr     equ  fh.struct + 52  ; Pointer to VDP PAB byte 1 (flag byte)
0233      A436     fh.pab.ptr        equ  fh.struct + 54  ; Pointer to VDP PAB, for level 3 FIO
0234      A438     fh.pabstat        equ  fh.struct + 56  ; Copy of VDP PAB status byte
0235      A43A     fh.ioresult       equ  fh.struct + 58  ; DSRLNK IO-status after file operation
0236      A43C     fh.records        equ  fh.struct + 60  ; File records counter
0237      A43E     fh.reclen         equ  fh.struct + 62  ; Current record length
0238      A440     fh.kilobytes      equ  fh.struct + 64  ; Kilobytes processed (read/written)
0239      A442     fh.counter        equ  fh.struct + 66  ; Counter used in stevie file operations
0240      A444     fh.fname.ptr      equ  fh.struct + 68  ; Pointer to device and filename
0241      A446     fh.sams.page      equ  fh.struct + 70  ; Current SAMS page during file operation
0242      A448     fh.sams.hipage    equ  fh.struct + 72  ; Highest SAMS page in file operation
0243      A44A     fh.fopmode        equ  fh.struct + 74  ; FOP mode (File Operation Mode)
0244      A44C     fh.filetype       equ  fh.struct + 76  ; Value for filetype/mode (PAB byte 1)
0245      A44E     fh.offsetopcode   equ  fh.struct + 78  ; Set to >40 for skipping VDP buffer
0246      A450     fh.callback1      equ  fh.struct + 80  ; Pointer to callback function 1
0247      A452     fh.callback2      equ  fh.struct + 82  ; Pointer to callback function 2
0248      A454     fh.callback3      equ  fh.struct + 84  ; Pointer to callback function 3
0249      A456     fh.callback4      equ  fh.struct + 86  ; Pointer to callback function 4
0250      A458     fh.callback5      equ  fh.struct + 88  ; Pointer to callback function 5
0251      A45A     fh.workmode       equ  fh.struct + 90  ; Working mode (used in callbacks)
0252      A45C     fh.kilobytes.prev equ  fh.struct + 92  ; Kilobytes processed (previous)
0253      A45E     fh.line           equ  fh.struct + 94  ; Editor buffer line currently processing
0254      A460     fh.temp1          equ  fh.struct + 96  ; Temporary variable 1
0255      A462     fh.temp2          equ  fh.struct + 98  ; Temporary variable 2
0256      A464     fh.temp3          equ  fh.struct +100  ; Temporary variable 3
0257      A466     fh.pabtpl.ptr     equ  fh.struct +102  ; Pointer to PAB template in ROM/RAM
0258      A468     fh.dir.rec.ptr    equ  fh.struct +104  ; Pointer to directory record
0259      A46A     fh.membuffer      equ  fh.struct +106  ; 80 bytes file memory buffer
0260      A4BA     fh.free           equ  fh.struct +186  ; End of structure
0261               ;-----------------------------------------------------------------
0262               ; File handle structure for generic    @>a400-a4ff   (256 bytes)
0263               ; Overloads file handle structure
0264               ;-----------------------------------------------------------------
0265      A45A     fh.ftype.init     equ  fh.struct + 90  ; File type/mode (becomes fh.filetype)
0266      A45C     fh.ram.ptr        equ  fh.struct + 92  ; RAM destination address
0267               ;-----------------------------------------------------------------
0268               ; Editor buffer structure              @>a500-a5ff   (256 bytes)
0269               ;-----------------------------------------------------------------
0270      A500     edb.struct        equ  >a500           ; Begin structure
0271      A500     edb.top.ptr       equ  edb.struct      ; Pointer to editor buffer
0272      A502     edb.index.ptr     equ  edb.struct + 2  ; Pointer to index
0273      A504     edb.lines         equ  edb.struct + 4  ; Total lines in editor buffer - 1
0274      A506     edb.dirty         equ  edb.struct + 6  ; Editor buffer dirty (Text changed!)
0275      A508     edb.next_free.ptr equ  edb.struct + 8  ; Pointer to next free line
0276      A50A     edb.insmode       equ  edb.struct + 10 ; Insert mode (>ffff = insert)
0277      A50C     edb.autoinsert    equ  edb.struct + 12 ; Auto-insert on ENTER flag (>ffff = on)
0278      A50E     edb.block.m1      equ  edb.struct + 14 ; Block start line marker (>ffff = unset)
0279      A510     edb.block.m2      equ  edb.struct + 16 ; Block end line marker   (>ffff = unset)
0280      A512     edb.block.var     equ  edb.struct + 18 ; Local var used in block operation
0281      A514     edb.filename.ptr  equ  edb.struct + 20 ; Pointer to length-prefixed string
0282                                                      ; with current filename.
0283      A516     edb.filetype.ptr  equ  edb.struct + 22 ; Pointer to length-prefixed string
0284                                                      ; with current file type.
0285      A518     edb.sams.page     equ  edb.struct + 24 ; Current SAMS page
0286      A51A     edb.sams.lopage   equ  edb.struct + 26 ; Lowest SAMS page in use
0287      A51C     edb.sams.hipage   equ  edb.struct + 28 ; Highest SAMS page in use
0288      A51E     edb.bk.fb.topline equ  edb.struct + 30 ; Backup of @fb.topline before opening
0289                                                      ; other file from special file.
0290      A520     edb.bk.fb.row     equ  edb.struct + 32 ; Backup of @fb.row before opening
0291                                                      ; other file from special file.
0292      A522     edb.special.file  equ  edb.struct + 34 ; Special file in editor buffer
0293      A524     edb.lineterm      equ  edb.struct + 36 ; Line termination character
0294                                                      ; MSB: Mode on (>ff) or off (>00)
0295                                                      ; LSB: Line termination character
0296      A526     edb.filename      equ  edb.struct + 38 ; 80 characters inline buffer reserved
0297                                                      ; for filename, but not always used.
0298      A576     edb.free          equ  edb.struct + 118; End of structure
0299               ;-----------------------------------------------------------------
0300               ; Index structure                      @>a600-a6ff   (256 bytes)
0301               ;-----------------------------------------------------------------
0302      A600     idx.struct        equ  >a600           ; stevie index structure
0303      A600     idx.sams.page     equ  idx.struct      ; Current SAMS page
0304      A602     idx.sams.lopage   equ  idx.struct + 2  ; Lowest SAMS page
0305      A604     idx.sams.hipage   equ  idx.struct + 4  ; Highest SAMS page
0306      A606     idx.free          equ  idx.struct + 6  ; End of structure
0307               ;-----------------------------------------------------------------
0308               ; Command buffer structure             @>a700-a7ff   (256 bytes)
0309               ;-----------------------------------------------------------------
0310      A700     cmdb.struct       equ  >a700           ; Command Buffer structure
0311      A700     cmdb.top.ptr      equ  cmdb.struct     ; Pointer to command buffer (history)
0312      A702     cmdb.visible      equ  cmdb.struct+ 2  ; Command buffer visible? (>ffff=visible)
0313      A704     cmdb.fb.yxsave    equ  cmdb.struct+ 4  ; Copy of FB WYX when entering cmdb pane
0314      A706     cmdb.scrrows      equ  cmdb.struct+ 6  ; Current size of CMDB pane (in rows)
0315      A708     cmdb.default      equ  cmdb.struct+ 8  ; Default size of CMDB pane (in rows)
0316      A70A     cmdb.cursor       equ  cmdb.struct+ 10 ; Screen YX of cursor in CMDB pane
0317      A70C     cmdb.yxsave       equ  cmdb.struct+ 12 ; Copy of WYX
0318      A70E     cmdb.vdptop       equ  cmdb.struct+ 14 ; VDP address CMDB pane header line (TAT)
0319      A710     cmdb.yxtop        equ  cmdb.struct+ 16 ; YX position CMDB pane header line
0320      A712     cmdb.yxprompt     equ  cmdb.struct+ 18 ; YX position of command buffer prompt
0321      A714     cmdb.column       equ  cmdb.struct+ 20 ; Current column in command buffer pane
0322      A716     cmdb.length       equ  cmdb.struct+ 22 ; Length of current row in CMDB
0323      A718     cmdb.lines        equ  cmdb.struct+ 24 ; Total lines in CMDB
0324      A71A     cmdb.dirty        equ  cmdb.struct+ 26 ; Command buffer dirty (Text changed!)
0325      A71C     cmdb.dialog       equ  cmdb.struct+ 28 ; Dialog identifier
0326      A71E     cmdb.dialog.var   equ  cmdb.struct+ 30 ; Dialog private variable or pointer
0327      A720     cmdb.panhead      equ  cmdb.struct+ 32 ; Pointer to string pane header
0328      A722     cmdb.paninfo      equ  cmdb.struct+ 34 ; Pointer to string pane info (1st line)
0329      A724     cmdb.panhint      equ  cmdb.struct+ 36 ; Pointer to string pane hint (2nd line)
0330      A726     cmdb.panhint2     equ  cmdb.struct+ 38 ; Pointer to string pane hint (extra)
0331      A728     cmdb.panmarkers   equ  cmdb.struct+ 40 ; Pointer to key marker list  (3rd line)
0332      A72A     cmdb.pankeys      equ  cmdb.struct+ 42 ; Pointer to string pane keys (stat line)
0333      A72C     cmdb.action.ptr   equ  cmdb.struct+ 44 ; Pointer to function to execute
0334      A72E     cmdb.cmdall       equ  cmdb.struct+ 46 ; Current command including length-byte
0335      A72E     cmdb.cmdlen       equ  cmdb.struct+ 46 ; Length of current command (MSB byte!)
0336      A72F     cmdb.cmd          equ  cmdb.struct+ 47 ; Current command (80 bytes max.)
0337      A780     cmdb.panhead.buf  equ  cmdb.struct+128 ; String buffer for pane header
0338      A7B2     cmdb.dflt.fname   equ  cmdb.struct+178 ; Default for filename
0339      A800     cmdb.free         equ  cmdb.struct+256 ; End of structure
0340               ;-----------------------------------------------------------------
0341               ; Stevie value stack                   @>a800-a8ff     (256 bytes)
0342               ;-----------------------------------------------------------------
0343      A900     sp2.stktop        equ  >a900           ; \
0344                                                      ; | The stack grows from high memory
0345                                                      ; | towards low memory.
0346                                                      ; |
0347                                                      ; | Stack leaking is checked in SP2
0348                                                      ; | user hook "edkey.keyscan.hook"
0349                                                      ; /
0350               ;-----------------------------------------------------------------
0351               ; Scratchpad memory work copy          @>ad00-aeff     (256 bytes)
0352               ;-----------------------------------------------------------------
0353      7E00     cpu.scrpad.src    equ  >7e00           ; \ Dump of OS monitor scratchpad
0354                                                      ; / stored in cartridge ROM bank7.asm
0355               
0356      F000     cpu.scrpad.tgt    equ  >f000           ; \ Fixed memory location used for
0357                                                      ; | scratchpad backup/restore routines.
0358                                                      ; /
0359               
0360      8300     cpu.scrpad1       equ  >8300           ; Stevie primary scratchpad
0361               
0362      AD00     cpu.scrpad2       equ  >ad00           ; Stevie secondary scratchpad, used when
0363                                                      ; calling TI Basic/External programs
0364               ;-----------------------------------------------------------------
0365               ; Farjump return stack                 @>af00-afff     (256 bytes)
0366               ;-----------------------------------------------------------------
0367      B000     fj.bottom         equ  >b000           ; Return stack for trampoline function
0368                                                      ; Grows downwards from high to low.
0369               ;-----------------------------------------------------------------
0370               ; Index                                @>b000-bfff    (4096 bytes)
0371               ;-----------------------------------------------------------------
0372      B000     idx.top           equ  >b000           ; Top of index
0373      1000     idx.size          equ  4096            ; Index size
0374               ;-----------------------------------------------------------------
0375               ; Editor buffer                        @>c000-cfff    (4096 bytes)
0376               ;-----------------------------------------------------------------
0377      C000     edb.top           equ  >c000           ; Editor buffer high memory
0378      1000     edb.size          equ  4096            ; Editor buffer size
0379               ;-----------------------------------------------------------------
0380               ; Frame buffer & uncrunch area         @>d000-dcff    (3584 bytes)
0381               ;-----------------------------------------------------------------
0382      D000     fb.top            equ  >d000           ; Frame buffer (2400 char)
0383      0960     fb.size           equ  80*30           ; Frame buffer size
0384      D960     fb.uncrunch.area  equ  >d960           ; \ Uncrunched TI Basic statement
0385                                                      ; / >d960->dcff
0386               ;-----------------------------------------------------------------
0387               ; Defaults area                        @>de00-dfff     (512 bytes)
0388               ;-----------------------------------------------------------------
0389      DE00     tv.printer.fname  equ  >de00           ; Default printer        (80 bytes)
0390      DE50     tv.clip.fname     equ  >de50           ; Default clipboard      (80 bytes)
0391      DEA0     tv.mc.fname       equ  >dea0           ; Default Master Catalog (80 bytes)
0392      DF20     tv.cat.fname      equ  >df20           ; Default catalog device (80 bytes)
0393               ;-----------------------------------------------------------------
0394               ; Directory/File catalog               @>e000-eeff    (3840 bytes)
0395               ;-----------------------------------------------------------------
0396      E000     cat.top           equ  >e000           ; Top of file catalog
0397      E000     cat.filecount     equ  cat.top         ; Total files in catalog
0398      E002     cat.fpicker.idx   equ  cat.top + 2     ; File picker number current entry
0399      E004     cat.nofilespage   equ  cat.top + 4     ; Number of files per page
0400      E006     cat.free1         equ  cat.top + 6     ; Free
0401      E008     cat.free2         equ  cat.top + 8     ; Free
0402      E00A     cat.free3         equ  cat.top + 10    ; Free
0403      E00C     cat.free4         equ  cat.top + 12    ; Free
0404      E00E     cat.free5         equ  cat.top + 14    ; Free
0405      E010     cat.free6         equ  cat.top + 16    ; Free
0406               ;-----------------------------------------------------------------
0407               ; Directory/File catalog pointers and numbers
0408               ;-----------------------------------------------------------------
0409      E12C     cat.var1          equ  cat.top + 300   ; Temp variable 1
0410      E12E     cat.var2          equ  cat.top + 302   ; Temp variable 2
0411      E130     cat.var3          equ  cat.top + 304   ; Temp variable 3
0412      E132     cat.var4          equ  cat.top + 306   ; Temp variable 4
0413      E134     cat.var5          equ  cat.top + 308   ; Temp variable 5
0414      E136     cat.var6          equ  cat.top + 310   ; Temp variable 6
0415      E138     cat.var7          equ  cat.top + 312   ; Temp variable 7
0416      E13A     cat.var8          equ  cat.top + 314   ; Temp variable 8
0417      E13C     cat.ptrlist       equ  cat.top + 316   ; Pointer list to filenames (254=127*2)
0418      E23A     cat.ftlist        equ  cat.top + 570   ; Filetype list (128)
0419      E2BA     cat.fslist        equ  cat.top + 698   ; Filesize size (128)
0420      E33A     cat.rslist        equ  cat.top + 826   ; Record size list (128)
0421               ;-----------------------------------------------------------------
0422               ; Directory/File catalog strings (always length bytes included)
0423               ;-----------------------------------------------------------------
0424      E3BA     cat.volname       equ  cat.top + 954   ; Volume name (12)
0425      E3C6     cat.typelist      equ  cat.top + 966   ; Filetype list (762=127*6)
0426      E6C0     cat.sizelist      equ  cat.top + 1728  ; Filesize list (508=127*4)
0427      E8BC     cat.fnlist        equ  cat.top + 2236  ; Filename list (1524=127*12)
0428      EEB0     cat.device        equ  cat.top + 3760  ; Current device name (80)
0429      0F00     cat.size          equ  3840            ; Catalog total size
0430               ;-----------------------------------------------------------------
0431               ; Command buffer                       ; @>ef00-efff   (256 bytes)
0432               ;-----------------------------------------------------------------
0433      EF00     cmdb.top          equ  >ef00           ; Top of command history buffer
0434      0100     cmdb.size         equ  256             ; Command buffer size
0435               ;-----------------------------------------------------------------
0436               ; Heap & Strings area                  @>f000-ffff    (4096 bytes)
0437               ;-----------------------------------------------------------------
0438      F000     heap.top          equ  >f000           ; 80 Current filename
0439      F050     ram.msg1          equ  >f050           ; 80 txt.hint.memstat
0440      F0A0     ram.msg2          equ  >f0a0           ; 80 txt.hint.lineterm
0441               ;-----------------------------------------------------------------
0442               ; Stevie specific equates
0443               ;-----------------------------------------------------------------
0444      0000     fh.fopmode.none           equ  0        ; No file operation in progress
0445      0001     fh.fopmode.readfile       equ  1        ; Read file from disk to memory
0446      0002     fh.fopmode.writefile      equ  2        ; Save file from memory to disk
0447      0006     cmdb.rows                 equ  6        ; Number of rows in CMDB pane
0448      A028     rom0_kscan_out            equ  keycode1 ; Where to store value of key pressed
0449      9900     tv.colorize.reset         equ  >9900    ; Colorization off
0450      00FE     tv.1timeonly              equ  254      ; One-time only flag indicator
0451      0100     tv.sams.maxpage           equ  256      ; Max SAMS pages supported
                   < stevie_b7.asm
0029                       copy  "equ.c99.asm"         ; Classic99 emulator configuration
     **** ****     > equ.c99.asm
0001               * FILE......: equ.c99.asm
0002               * Purpose...: Equates related to classic99
0003               
0004               ***************************************************************
0005               *                 Extra opcodes for classic99
0006               ********|*****|*********************|**************************
0007      0110     c99_norm      equ  >0110            ; CPU normal
0008      0111     c99_ovrd      equ  >0111            ; CPU overdrive
0009      0112     c99_smax      equ  >0112            ; System Maximum
0010      0113     c99_brk       equ  >0113            ; Breakpoint
0011      0114     c99_quit      equ  >0114            ; Quit emulator
0012      0120     c99_dbg_r0    equ  >0120            ; Debug printf r0
0013      0121     c99_dbg_r1    equ  >0121            ; Debug printf r1
0014      0122     c99_dbg_r2    equ  >0122            ; Debug printf r2
0015      0123     c99_dbg_r3    equ  >0123            ; Debug printf r3
0016      0124     c99_dbg_r4    equ  >0124            ; Debug printf r4
0017      0125     c99_dbg_r5    equ  >0125            ; Debug printf r5
0018      0126     c99_dbg_r6    equ  >0126            ; Debug printf r6
0019      0127     c99_dbg_r7    equ  >0127            ; Debug printf r7
0020      0128     c99_dbg_r8    equ  >0128            ; Debug printf r8
0021      0199     c99_dbg_r9    equ  >0199            ; Debug printf r9
0022      012A     c99_dbg_ra    equ  >012a            ; Debug printf ra
0023      012B     c99_dbg_rb    equ  >012b            ; Debug printf rb
0024      012C     c99_dbg_rc    equ  >012c            ; Debug printf rc
0025      012D     c99_dbg_rd    equ  >012d            ; Debug printf rd
0026      012E     c99_dbg_re    equ  >012e            ; Debug printf re
0027      012F     c99_dbg_rf    equ  >012f            ; Debug printf rf
0028      0124     c99_dbg_tmp0  equ  c99_dbg_r4       ; Debug printf tmp0
0029      0125     c99_dbg_tmp1  equ  c99_dbg_r5       ; Debug printf tmp1
0030      0126     c99_dbg_tmp2  equ  c99_dbg_r6       ; Debug printf tmp2
0031      0127     c99_dbg_tmp3  equ  c99_dbg_r7       ; Debug printf tmp3
0032      0128     c99_dbg_tmp4  equ  c99_dbg_r8       ; Debug printf tmp4
0033      0199     c99_dbg_stck  equ  c99_dbg_r9       ; Debug printf stack
                   < stevie_b7.asm
0030                       copy  "equ.tib.asm"         ; Equates related to TI Basic session
     **** ****     > equ.tib.asm
0001               * FILE......: equ.tib.asm
0002               * Purpose...: Equates for TI Basic session
0003               
0004               *--------------------------------------------------------------
0005               * Equates mainly used while TI Basic session is running
0006               *--------------------------------------------------------------
0007      FF00     tib.aux           equ  >ff00           ; Auxiliary memory 256 bytes
0008      FF00     tib.aux.fname     equ  tib.aux         ; TI Basic program filename
0009      FFFA     tib.aux.end       equ  >fffa           ; \ End of auxiliary memory
0010                                                      ; | >fffc-ffff is reserved
0011                                                      ; / for NMI vector.
                   < stevie_b7.asm
0031                       copy  "equ.keys.asm"        ; Equates for keyboard mapping
     **** ****     > equ.keys.asm
0001               * FILE......: data.keymap.keys.asm
0002               * Purpose...: Keyboard mapping
0003               
0004               
0005               *---------------------------------------------------------------
0006               * Keyboard scancodes - Numeric keys
0007               *-------------|---------------------|---------------------------
0008      0030     key.num.0     equ >30               ; 0
0009      0031     key.num.1     equ >31               ; 1
0010      0032     key.num.2     equ >32               ; 2
0011      0033     key.num.3     equ >33               ; 3
0012      0034     key.num.4     equ >34               ; 4
0013      0035     key.num.5     equ >35               ; 5
0014      0036     key.num.6     equ >36               ; 6
0015      0037     key.num.7     equ >37               ; 7
0016      0038     key.num.8     equ >38               ; 8
0017      0039     key.num.9     equ >39               ; 9
0018               *---------------------------------------------------------------
0019               * Keyboard scancodes - Letter keys
0020               *-------------|---------------------|---------------------------
0021      0041     key.uc.a      equ >41               ; A
0022      0042     key.uc.b      equ >42               ; B
0023      0043     key.uc.c      equ >43               ; C
0024      0044     key.uc.d      equ >44               ; D
0025      0045     key.uc.e      equ >45               ; E
0026      0046     key.uc.f      equ >46               ; F
0027      0047     key.uc.g      equ >47               ; G
0028      0048     key.uc.h      equ >48               ; H
0029      0049     key.uc.i      equ >49               ; I
0030      004A     key.uc.j      equ >4a               ; J
0031      004B     key.uc.k      equ >4b               ; K
0032      004C     key.uc.l      equ >4c               ; L
0033      004D     key.uc.m      equ >4d               ; M
0034      004E     key.uc.n      equ >4e               ; N
0035      0052     key.uc.r      equ >52               ; R
0036      0053     key.uc.s      equ >53               ; S
0037      004F     key.uc.o      equ >4f               ; O
0038      0050     key.uc.p      equ >50               ; P
0039      0051     key.uc.q      equ >51               ; Q
0040      0052     key.uc.r      equ >52               ; R
0041      0058     key.uc.x      equ >58               ; X
0042      00A2     key.lc.b      equ >a2               ; b
0043      00A5     key.lc.e      equ >a5               ; e
0044      00A6     key.lc.f      equ >a6               ; f
0045      00A8     key.lc.h      equ >a8               ; h
0046      006E     key.lc.n      equ >6e               ; n
0047      0073     key.lc.s      equ >73               ; s
0048      006F     key.lc.o      equ >6f               ; o
0049      0070     key.lc.p      equ >70               ; p
0050      0071     key.lc.q      equ >71               ; q
0051      0072     key.lc.r      equ >72               ; r
0052      0078     key.lc.x      equ >78               ; x
0053               *---------------------------------------------------------------
0054               * Keyboard scancodes - Function keys
0055               *-------------|---------------------|---------------------------
0056      00BC     key.fctn.0    equ >bc               ; fctn + 0
0057      0003     key.fctn.1    equ >03               ; fctn + 1
0058      0004     key.fctn.2    equ >04               ; fctn + 2
0059      0007     key.fctn.3    equ >07               ; fctn + 3
0060      0002     key.fctn.4    equ >02               ; fctn + 4
0061      000E     key.fctn.5    equ >0e               ; fctn + 5
0062      000C     key.fctn.6    equ >0c               ; fctn + 6
0063      0001     key.fctn.7    equ >01               ; fctn + 7
0064      0006     key.fctn.8    equ >06               ; fctn + 8
0065      000F     key.fctn.9    equ >0f               ; fctn + 9
0066      0000     key.fctn.a    equ >00               ; fctn + a
0067      00BE     key.fctn.b    equ >be               ; fctn + b
0068      0000     key.fctn.c    equ >00               ; fctn + c
0069      0009     key.fctn.d    equ >09               ; fctn + d
0070      000B     key.fctn.e    equ >0b               ; fctn + e
0071      0000     key.fctn.f    equ >00               ; fctn + f
0072      0000     key.fctn.g    equ >00               ; fctn + g
0073      00BF     key.fctn.h    equ >bf               ; fctn + h
0074      0000     key.fctn.i    equ >00               ; fctn + i
0075      00C0     key.fctn.j    equ >c0               ; fctn + j
0076      00C1     key.fctn.k    equ >c1               ; fctn + k
0077      00C2     key.fctn.l    equ >c2               ; fctn + l
0078      00C3     key.fctn.m    equ >c3               ; fctn + m
0079      00C4     key.fctn.n    equ >c4               ; fctn + n
0080      0000     key.fctn.o    equ >00               ; fctn + o
0081      0000     key.fctn.p    equ >00               ; fctn + p
0082      00C5     key.fctn.q    equ >c5               ; fctn + q
0083      0000     key.fctn.r    equ >00               ; fctn + r
0084      0008     key.fctn.s    equ >08               ; fctn + s
0085      0000     key.fctn.t    equ >00               ; fctn + t
0086      0000     key.fctn.u    equ >00               ; fctn + u
0087      007F     key.fctn.v    equ >7f               ; fctn + v
0088      007E     key.fctn.w    equ >7e               ; fctn + w
0089      000A     key.fctn.x    equ >0a               ; fctn + x
0090      00C6     key.fctn.y    equ >c6               ; fctn + y
0091      0000     key.fctn.z    equ >00               ; fctn + z
0092               *---------------------------------------------------------------
0093               * Keyboard scancodes - Function keys extra
0094               *---------------------------------------------------------------
0095      00B9     key.fctn.dot    equ >b9             ; fctn + .
0096      00B8     key.fctn.comma  equ >b8             ; fctn + ,
0097      0005     key.fctn.plus   equ >05             ; fctn + +
0098               *---------------------------------------------------------------
0099               * Keyboard scancodes - control keys
0100               *-------------|---------------------|---------------------------
0101      00B0     key.ctrl.0    equ >b0               ; ctrl + 0
0102      00B1     key.ctrl.1    equ >b1               ; ctrl + 1
0103      00B2     key.ctrl.2    equ >b2               ; ctrl + 2
0104      00B3     key.ctrl.3    equ >b3               ; ctrl + 3
0105      00B4     key.ctrl.4    equ >b4               ; ctrl + 4
0106      00B5     key.ctrl.5    equ >b5               ; ctrl + 5
0107      00B6     key.ctrl.6    equ >b6               ; ctrl + 6
0108      00B7     key.ctrl.7    equ >b7               ; ctrl + 7
0109      009E     key.ctrl.8    equ >9e               ; ctrl + 8
0110      009F     key.ctrl.9    equ >9f               ; ctrl + 9
0111      0081     key.ctrl.a    equ >81               ; ctrl + a
0112      0082     key.ctrl.b    equ >82               ; ctrl + b
0113      0083     key.ctrl.c    equ >83               ; ctrl + c
0114      0084     key.ctrl.d    equ >84               ; ctrl + d
0115      0085     key.ctrl.e    equ >85               ; ctrl + e
0116      0086     key.ctrl.f    equ >86               ; ctrl + f
0117      0087     key.ctrl.g    equ >87               ; ctrl + g
0118      0088     key.ctrl.h    equ >88               ; ctrl + h
0119      0089     key.ctrl.i    equ >89               ; ctrl + i
0120      008A     key.ctrl.j    equ >8a               ; ctrl + j
0121      008B     key.ctrl.k    equ >8b               ; ctrl + k
0122      008C     key.ctrl.l    equ >8c               ; ctrl + l
0123      008D     key.ctrl.m    equ >8d               ; ctrl + m
0124      008E     key.ctrl.n    equ >8e               ; ctrl + n
0125      008F     key.ctrl.o    equ >8f               ; ctrl + o
0126      0090     key.ctrl.p    equ >90               ; ctrl + p
0127      0091     key.ctrl.q    equ >91               ; ctrl + q
0128      0092     key.ctrl.r    equ >92               ; ctrl + r
0129      0093     key.ctrl.s    equ >93               ; ctrl + s
0130      0094     key.ctrl.t    equ >94               ; ctrl + t
0131      0095     key.ctrl.u    equ >95               ; ctrl + u
0132      0096     key.ctrl.v    equ >96               ; ctrl + v
0133      0097     key.ctrl.w    equ >97               ; ctrl + w
0134      0098     key.ctrl.x    equ >98               ; ctrl + x
0135      0099     key.ctrl.y    equ >99               ; ctrl + y
0136      009A     key.ctrl.z    equ >9a               ; ctrl + z
0137               *---------------------------------------------------------------
0138               * Keyboard scancodes - control keys extra
0139               *---------------------------------------------------------------
0140      009B     key.ctrl.dot    equ >9b             ; ctrl + .
0141      0080     key.ctrl.comma  equ >80             ; ctrl + ,
0142      009D     key.ctrl.plus   equ >9d             ; ctrl + +
0143      00BB     key.ctrl.slash  equ >bb             ; ctrl + /
0144      00F0     key.ctrl.space  equ >f0             ; ctrl + SPACE
0145               *---------------------------------------------------------------
0146               * Special keys
0147               *---------------------------------------------------------------
0148      000D     key.enter     equ >0d               ; enter
0149      0020     key.space     equ >20               ; space
                   < stevie_b7.asm
0032               ***************************************************************
0033               * BANK 7
0034               ********|*****|*********************|**************************
0035      600E     bankid  equ   bank7.rom             ; Set bank identifier to current bank
0036                       aorg  >6000
0037                       save  >6000,>8000           ; Save bank
0038                       copy  "rom.header.asm"      ; Include cartridge header
     **** ****     > rom.header.asm
0001               * FILE......: rom.header.asm
0002               * Purpose...: Cartridge header
0003               
0004               *--------------------------------------------------------------
0005               * Cartridge header
0006               ********|*****|*********************|**************************
0007 6000 AA               byte  >aa                   ; 0  Standard header                   >6000
0008 6001   01             byte  >01                   ; 1  Version number
0009 6002 02               byte  >02                   ; 2  Number of programs (optional)     >6002
0010 6003   00             byte  0                     ; 3  Reserved ('R' = adv. mode FG99)
0011               
0012 6004 0000             data  >0000                 ; 4  \ Pointer to power-up list        >6004
0013                                                   ; 5  /
0014               
0015                       ;
0016                       ; Change to rom.program1 to add the menu option RESET STEVIE MEMORY.
0017                       ; That option can be used in the case where we jump to TI Basic, but
0018                       ; resuming fails afterwards (e.g. memory overwritten by ext. program).
0019                       ;
0020                       ; If resume fails, you can only reset the TI-99/4a by turning of
0021                       ; the memory expansion, it's not sufficient to reset the console.
0022                       ;
0023 6006 6024             data  rom.program2          ; 6  \ Pointer to program list         >6006
0024                                                   ; 7  /
0025               
0026 6008 0000             data  >0000                 ; 8  \ Pointer to DSR list             >6008
0027                                                   ; 9  /
0028               
0029 600A 0000             data  >0000                 ; 10 \ Pointer to subprogram list      >600a
0030                                                   ; 11 /
0031               
0032                       ;-----------------------------------------------------------------------
0033                       ; Program list entry
0034                       ;-----------------------------------------------------------------------
0035               rom.program1:
0036 600C 6024             data  rom.program2          ; 12 \ Next program list entry         >600c
0037                                                   ; 13 / (no more items following)
0038               
0039 600E 6040             data  kickstart.code1       ; 14 \ Program address                 >600e
0040                                                   ; 15 /
0041               
0042 6010 1352             stri 'RESET STEVIE MEMORY'
     6012 4553     
     6014 4554     
     6016 2053     
     6018 5445     
     601A 5649     
     601C 4520     
     601E 4D45     
     6020 4D4F     
     6022 5259     
0043               
0044                       ;-----------------------------------------------------------------------
0045                       ; Program list entry
0046                       ;-----------------------------------------------------------------------
0047               rom.program2:
0048 6024 0000             data  >0000                 ; 12 \ Next program list entry         >600c
0049                                                   ; 13 / (no more items following)
0050               
0051 6026 6038             data  kickstart.resume      ; 14 \ Program address                 >600e
0052                                                   ; 15 /
0053               
0055 6028 0F53                 stri 'STEVIE 1.5.1630'
     602A 5445     
     602C 5649     
     602E 4520     
     6030 312E     
     6032 352E     
     6034 3136     
     6036 3330     
0057               
0061               
0065               
                   < stevie_b7.asm
0039               
0040               ***************************************************************
0041               * Step 1: Switch to bank 0 (uniform code accross all banks)
0042               ********|*****|*********************|**************************
0043                       aorg  >6038
0044 6038 04E0  34         clr   @bank7.rom            ; Switch to bank 7 "Jonas"
     603A 600E     
0045 603C 0460  28         b     @tib.run.return.mon   ; Resume Stevie session
     603E 64D8     
0046               
0047                       aorg  kickstart.code1       ; >6040
0048 6040 04E0  34         clr   @bank0.rom            ; Switch to bank 0 "Jill"
     6042 6000     
0049               ***************************************************************
0050               * Step 2: Satisfy assembler, must know relocated code
0051               ********|*****|*********************|**************************
0052                       aorg  >2000                 ; Relocate to >2000
0053                       copy  "runlib.asm"
     **** ****     > runlib.asm
0001               *******************************************************************************
0002               *              ___  ____  ____  ___  ____  ____    __    ___
0003               *             / __)(  _ \( ___)/ __)(_  _)(  _ \  /__\  (__ \  v.2021
0004               *             \__ \ )___/ )__)( (__   )(   )   / /(__)\  / _/
0005               *             (___/(__)  (____)\___) (__) (_)\_)(__)(__)(____)
0006               *
0007               *                TMS9900 Monitor with Arcade Game support
0008               *                                  for
0009               *              the Texas Instruments TI-99/4A Home Computer
0010               *
0011               *                      2010-2023 by Filip Van Vooren
0012               *
0013               *              https://github.com/FilipVanVooren/spectra2.git
0014               *******************************************************************************
0015               * This file: runlib.a99
0016               *******************************************************************************
0017               * Use following equates to skip/exclude support modules and to control startup
0018               * behaviour.
0019               *
0020               * == Memory
0021               * skip_rom_bankswitch       equ  1  ; Skip support for ROM bankswitching
0022               * skip_vram_cpu_copy        equ  1  ; Skip VRAM to CPU copy functions
0023               * skip_cpu_vram_copy        equ  1  ; Skip CPU  to VRAM copy functions
0024               * skip_cpu_cpu_copy         equ  1  ; Skip CPU  to CPU copy functions
0025               * skip_grom_cpu_copy        equ  1  ; Skip GROM to CPU copy functions
0026               * skip_grom_vram_copy       equ  1  ; Skip GROM to VRAM copy functions
0027               * skip_sams                 equ  1  ; Skip support for SAMS memory expansion
0028               * skip_sams_layout          equ  1  ; Skip SAMS memory layout routine
0029               * skip_sams_size            equ  1  ; Skip SAMS card size check
0030               *
0031               * == VDP
0032               * skip_textmode             equ  1  ; Skip 40x24 textmode support
0033               * skip_vdp_f18a             equ  1  ; Skip f18a support
0034               * skip_vdp_hchar            equ  1  ; Skip hchar, xchar
0035               * skip_vdp_vchar            equ  1  ; Skip vchar, xvchar
0036               * skip_vdp_boxes            equ  1  ; Skip filbox, putbox
0037               * skip_vdp_hexsupport       equ  1  ; Skip mkhex, puthex
0038               * skip_vdp_bitmap           equ  1  ; Skip bitmap functions
0039               * skip_vdp_intscr           equ  1  ; Skip interrupt+screen on/off
0040               * skip_vdp_viewport         equ  1  ; Skip viewport functions
0041               * skip_vdp_yx2px_calc       equ  1  ; Skip YX to pixel calculation
0042               * skip_vdp_px2yx_calc       equ  1  ; Skip pixel to YX calculation
0043               * skip_vdp_sprites          equ  1  ; Skip sprites support
0044               * skip_vdp_cursor           equ  1  ; Skip cursor support
0045               *
0046               * == Sound & speech
0047               * skip_snd_player           equ  1  ; Skip inclusionm of sound player code
0048               * skip_speech_detection     equ  1  ; Skip speech synthesizer detection
0049               * skip_speech_player        equ  1  ; Skip inclusion of speech player code
0050               *
0051               * == Keyboard
0052               * skip_virtual_keyboard     equ  1  ; Skip virtual keyboard scann
0053               * skip_real_keyboard        equ  1  ; Skip real keyboard scan
0054               * use_rom0_kscan            equ  1  ; Use KSCAN in console ROM#0
0055               *
0056               * == Utilities
0057               * skip_random_generator     equ  1  ; Skip random generator functions
0058               * skip_cpu_rle_compress     equ  1  ; Skip CPU RLE compression
0059               * skip_cpu_rle_decompress   equ  1  ; Skip CPU RLE decompression
0060               * skip_vdp_rle_decompress   equ  1  ; Skip VDP RLE decompression
0061               * skip_cpu_hexsupport       equ  1  ; Skip mkhex, puthex
0062               * skip_cpu_numsupport       equ  1  ; Skip mknum, putnum, trimnum
0063               * skip_cpu_crc16            equ  1  ; Skip CPU memory CRC-16 calculation
0064               * skip_cpu_strings          equ  1  ; Skip string support utilities
0065               
0066               * == Kernel/Multitasking
0067               * skip_timer_alloc          equ  1  ; Skip support for timers allocation
0068               * skip_mem_paging           equ  1  ; Skip support for memory paging
0069               * skip_fio                  equ  1  ; Skip support for file I/O, dsrlnk
0070               * skip_fg99                 equ  1  ; Skip support for FinalGROM99 loading
0071               *
0072               * == Startup behaviour
0073               * startup_backup_scrpad     equ  1  ; Backup scratchpad @>8300->83ff
0074               *                                   ; to pre-defined backup address
0075               * startup_keep_vdpmemory    equ  1  ; Do not clear VDP vram upon startup
0076               *******************************************************************************
0077               
0078               *//////////////////////////////////////////////////////////////
0079               *                       RUNLIB SETUP
0080               *//////////////////////////////////////////////////////////////
0081               
0082                       copy  "memsetup.equ"             ; runlib scratchpad memory setup
     **** ****     > memsetup.equ
0001               * FILE......: memsetup.equ
0002               * Purpose...: Equates for spectra2 memory layout
0003               
0004               ***************************************************************
0005               * >8300 - >8341     Scratchpad memory layout (66 bytes)
0006               ********|*****|*********************|**************************
0007      8300     ws1     equ   >8300                 ; 32 - Primary workspace
0008      8320     mcloop  equ   >8320                 ; 08 - Machine code for loop & speech
0009      8328     wbase   equ   >8328                 ; 02 - PNT base address
0010      832A     wyx     equ   >832a                 ; 02 - Cursor YX position
0011      832C     wtitab  equ   >832c                 ; 02 - Timers: Address of timer table
0012      832E     wtiusr  equ   >832e                 ; 02 - Timers: Address of user hook
0013      8330     wtitmp  equ   >8330                 ; 02 - Timers: Internal use
0014      8332     wvrtkb  equ   >8332                 ; 02 - Virtual keyboard flags
0015      8334     wsdlst  equ   >8334                 ; 02 - Sound player: Tune address
0016      8336     wsdtmp  equ   >8336                 ; 02 - Sound player: Temporary use
0017      8338     wspeak  equ   >8338                 ; 02 - Speech player: Address of LPC data
0018      833A     wcolmn  equ   >833a                 ; 02 - Screen size, columns per row
0019      833C     waux1   equ   >833c                 ; 02 - Temporary storage 1
0020      833E     waux2   equ   >833e                 ; 02 - Temporary storage 2
0021      8340     waux3   equ   >8340                 ; 02 - Temporary storage 3
0022               ***************************************************************
0023      832A     by      equ   wyx                   ;      Cursor Y position
0024      832B     bx      equ   wyx+1                 ;      Cursor X position
0025      8322     mcsprd  equ   mcloop+2              ;      Speech read routine
0026               ***************************************************************
                   < runlib.asm
0083                       copy  "registers.equ"            ; runlib registers
     **** ****     > registers.equ
0001               * FILE......: registers.equ
0002               * Purpose...: Equates for registers
0003               
0004               ***************************************************************
0005               * Register usage
0006               * R0      **free not used**
0007               * R1      **free not used**
0008               * R2      Config register
0009               * R3      Extended config register
0010               * R4      Temporary register/variable tmp0
0011               * R5      Temporary register/variable tmp1
0012               * R6      Temporary register/variable tmp2
0013               * R7      Temporary register/variable tmp3
0014               * R8      Temporary register/variable tmp4
0015               * R9      Stack pointer
0016               * R10     Highest slot in use + Timer counter
0017               * R11     Subroutine return address
0018               * R12     CRU
0019               * R13     Copy of VDP status byte and counter for sound player
0020               * R14     Copy of VDP register #0 and VDP register #1 bytes
0021               * R15     VDP read/write address
0022               *--------------------------------------------------------------
0023               * Special purpose registers
0024               * R0      shift count
0025               * R12     CRU
0026               * R13     WS     - when using LWPI, BLWP, RTWP
0027               * R14     PC     - when using LWPI, BLWP, RTWP
0028               * R15     STATUS - when using LWPI, BLWP, RTWP
0029               ***************************************************************
0030               * Define registers
0031               ********|*****|*********************|**************************
0032      0000     r0      equ   0
0033      0001     r1      equ   1
0034      0002     r2      equ   2
0035      0003     r3      equ   3
0036      0004     r4      equ   4
0037      0005     r5      equ   5
0038      0006     r6      equ   6
0039      0007     r7      equ   7
0040      0008     r8      equ   8
0041      0009     r9      equ   9
0042      000A     r10     equ   10
0043      000B     r11     equ   11
0044      000C     r12     equ   12
0045      000D     r13     equ   13
0046      000E     r14     equ   14
0047      000F     r15     equ   15
0048               ***************************************************************
0049               * Define register equates
0050               ********|*****|*********************|**************************
0051      0002     config  equ   r2                    ; Config register
0052      0003     xconfig equ   r3                    ; Extended config register
0053      0004     tmp0    equ   r4                    ; Temp register 0
0054      0005     tmp1    equ   r5                    ; Temp register 1
0055      0006     tmp2    equ   r6                    ; Temp register 2
0056      0007     tmp3    equ   r7                    ; Temp register 3
0057      0008     tmp4    equ   r8                    ; Temp register 4
0058      0009     stack   equ   r9                    ; Stack pointer
0059      000E     vdpr01  equ   r14                   ; Copy of VDP#0 and VDP#1 bytes
0060      000F     vdprw   equ   r15                   ; Contains VDP read/write address
0061               ***************************************************************
0062               * Define MSB/LSB equates for registers
0063               ********|*****|*********************|**************************
0064      8300     r0hb    equ   ws1                   ; HI byte R0
0065      8301     r0lb    equ   ws1+1                 ; LO byte R0
0066      8302     r1hb    equ   ws1+2                 ; HI byte R1
0067      8303     r1lb    equ   ws1+3                 ; LO byte R1
0068      8304     r2hb    equ   ws1+4                 ; HI byte R2
0069      8305     r2lb    equ   ws1+5                 ; LO byte R2
0070      8306     r3hb    equ   ws1+6                 ; HI byte R3
0071      8307     r3lb    equ   ws1+7                 ; LO byte R3
0072      8308     r4hb    equ   ws1+8                 ; HI byte R4
0073      8309     r4lb    equ   ws1+9                 ; LO byte R4
0074      830A     r5hb    equ   ws1+10                ; HI byte R5
0075      830B     r5lb    equ   ws1+11                ; LO byte R5
0076      830C     r6hb    equ   ws1+12                ; HI byte R6
0077      830D     r6lb    equ   ws1+13                ; LO byte R6
0078      830E     r7hb    equ   ws1+14                ; HI byte R7
0079      830F     r7lb    equ   ws1+15                ; LO byte R7
0080      8310     r8hb    equ   ws1+16                ; HI byte R8
0081      8311     r8lb    equ   ws1+17                ; LO byte R8
0082      8312     r9hb    equ   ws1+18                ; HI byte R9
0083      8313     r9lb    equ   ws1+19                ; LO byte R9
0084      8314     r10hb   equ   ws1+20                ; HI byte R10
0085      8315     r10lb   equ   ws1+21                ; LO byte R10
0086      8316     r11hb   equ   ws1+22                ; HI byte R11
0087      8317     r11lb   equ   ws1+23                ; LO byte R11
0088      8318     r12hb   equ   ws1+24                ; HI byte R12
0089      8319     r12lb   equ   ws1+25                ; LO byte R12
0090      831A     r13hb   equ   ws1+26                ; HI byte R13
0091      831B     r13lb   equ   ws1+27                ; LO byte R13
0092      831C     r14hb   equ   ws1+28                ; HI byte R14
0093      831D     r14lb   equ   ws1+29                ; LO byte R14
0094      831E     r15hb   equ   ws1+30                ; HI byte R15
0095      831F     r15lb   equ   ws1+31                ; LO byte R15
0096               ********|*****|*********************|**************************
0097      8308     tmp0hb  equ   ws1+8                 ; HI byte R4
0098      8309     tmp0lb  equ   ws1+9                 ; LO byte R4
0099      830A     tmp1hb  equ   ws1+10                ; HI byte R5
0100      830B     tmp1lb  equ   ws1+11                ; LO byte R5
0101      830C     tmp2hb  equ   ws1+12                ; HI byte R6
0102      830D     tmp2lb  equ   ws1+13                ; LO byte R6
0103      830E     tmp3hb  equ   ws1+14                ; HI byte R7
0104      830F     tmp3lb  equ   ws1+15                ; LO byte R7
0105      8310     tmp4hb  equ   ws1+16                ; HI byte R8
0106      8311     tmp4lb  equ   ws1+17                ; LO byte R8
0107               ********|*****|*********************|**************************
0108      8314     btihi   equ   ws1+20                ; Highest slot in use (HI byte R10)
0109      831A     bvdpst  equ   ws1+26                ; Copy of VDP status register (HI byte R13)
0110      831C     vdpr0   equ   ws1+28                ; High byte of R14. Is VDP#0 byte
0111      831D     vdpr1   equ   ws1+29                ; Low byte  of R14. Is VDP#1 byte
0112               ***************************************************************
                   < runlib.asm
0084                       copy  "portaddr.equ"             ; runlib hardware port addresses
     **** ****     > portaddr.equ
0001               * FILE......: portaddr.equ
0002               * Purpose...: Equates for hardware port addresses and vectors
0003               
0004               ***************************************************************
0005               * Equates for VDP, GROM, SOUND, SPEECH ports
0006               ********|*****|*********************|**************************
0007      8400     sound   equ   >8400                 ; Sound generator address
0008      8800     vdpr    equ   >8800                 ; VDP read data window address
0009      8C00     vdpw    equ   >8c00                 ; VDP write data window address
0010      8802     vdps    equ   >8802                 ; VDP status register
0011      8C02     vdpa    equ   >8c02                 ; VDP address register
0012      9C02     grmwa   equ   >9c02                 ; GROM set write address
0013      9802     grmra   equ   >9802                 ; GROM set read address
0014      9800     grmrd   equ   >9800                 ; GROM read byte
0015      9C00     grmwd   equ   >9c00                 ; GROM write byte
0016      9000     spchrd  equ   >9000                 ; Address of speech synth Read Data Register
0017      9400     spchwt  equ   >9400                 ; Address of speech synth Write Data Register
0018               
0019      000E     kscan   equ   >000e                 ; Address of KSCAN routine in console ROM 0
                   < runlib.asm
0085                       copy  "param.equ"                ; runlib parameters
     **** ****     > param.equ
0001               * FILE......: param.equ
0002               * Purpose...: Equates used for subroutine parameters
0003               
0004               ***************************************************************
0005               * Subroutine parameter equates
0006               ***************************************************************
0007      FFFF     eol     equ   >ffff                 ; End-Of-List
0008      FFFF     nofont  equ   >ffff                 ; Skip loading font in RUNLIB
0009      0000     norep   equ   0                     ; PUTBOX > Value for P3. Don't repeat box
0010      3030     num1    equ   >3030                 ; MKNUM  > ASCII 0-9, leading 0's
0011      3020     num2    equ   >3020                 ; MKNUM  > ASCII 0-9, leading spaces
0012      0007     sdopt1  equ   7                     ; SDPLAY > 111 (Player on, repeat, tune in CPU memory)
0013      0005     sdopt2  equ   5                     ; SDPLAY > 101 (Player on, no repeat, tune in CPU memory)
0014      0006     sdopt3  equ   6                     ; SDPLAY > 110 (Player on, repeat, tune in VRAM)
0015      0004     sdopt4  equ   4                     ; SDPLAY > 100 (Player on, no repeat, tune in VRAM)
0016      0000     fnopt1  equ   >0000                 ; LDFNT  > Load TI title screen font
0017      0006     fnopt2  equ   >0006                 ; LDFNT  > Load upper case font
0018      000C     fnopt3  equ   >000c                 ; LDFNT  > Load upper/lower case font
0019      0012     fnopt4  equ   >0012                 ; LDFNT  > Load lower case font
0020      8000     fnopt5  equ   >8000                 ; LDFNT  > Load TI title screen font  & bold
0021      8006     fnopt6  equ   >8006                 ; LDFNT  > Load upper case font       & bold
0022      800C     fnopt7  equ   >800c                 ; LDFNT  > Load upper/lower case font & bold
0023      8012     fnopt8  equ   >8012                 ; LDFNT  > Load lower case font       & bold
0024               *--------------------------------------------------------------
0025               *   Speech player
0026               *--------------------------------------------------------------
0027      0060     talkon  equ   >60                   ; 'start talking' command code for speech synth
0028      00FF     talkof  equ   >ff                   ; 'stop talking' command code for speech synth
0029      6000     spkon   equ   >6000                 ; 'start talking' command code for speech synth
0030      FF00     spkoff  equ   >ff00                 ; 'stop talking' command code for speech synth
                   < runlib.asm
0086                       copy  "classic99.equ"            ; classic99 emulator opcodes
     **** ****     > classic99.equ
0001               * FILE......: classic99.equ
0002               * Purpose...: Extra opcodes for the classic99 emulator
0003               
0004               ***************************************************************
0005               *              Extra opcodes for classic99
0006               ********|*****|*********************|**************************
0007      0110     c99_norm      equ  >0110            ; CPU normal
0008      0111     c99_ovrd      equ  >0111            ; CPU overdrive
0009      0112     c99_smax      equ  >0112            ; System Maximum
0010      0113     c99_brk       equ  >0113            ; Breakpoint
0011      0114     c99_quit      equ  >0114            ; Quit emulator
0012               *--------------------------------------------------------------
0013               * Attention:
0014               * Debug opcodes are part of a 3 words instruction!
0015               * See classic99 user manual for details on proper usage.
0016               *--------------------------------------------------------------
0017      0120     c99_dbgr0     equ  >0120            ; debug printf R0
0018      0121     c99_dbgr1     equ  >0121            ; debug printf R1
0019      0122     c99_dbgr2     equ  >0122            ; debug printf R2
0020      0123     c99_dbgr3     equ  >0123            ; debug printf R3
0021      0124     c99_dbgr4     equ  >0124            ; debug printf R4
0022      0125     c99_dbgr5     equ  >0125            ; debug printf R5
0023      0126     c99_dbgr6     equ  >0126            ; debug printf R6
0024      0127     c99_dbgr7     equ  >0127            ; debug printf R7
0025      0128     c99_dbgr8     equ  >0128            ; debug printf R8
0026      0129     c99_dbgr9     equ  >0129            ; debug printf R9
0027      012A     c99_dbgr10    equ  >012a            ; debug printf R10
0028      012B     c99_dbgr11    equ  >012b            ; debug printf R11
0029      012C     c99_dbgr12    equ  >012c            ; debug printf R12
0030      012D     c99_dbgr13    equ  >012d            ; debug printf R13
0031      012E     c99_dbgr14    equ  >012e            ; debug printf R14
0032      012F     c99_dbgr15    equ  >012f            ; debug printf R15
                   < runlib.asm
0087               
0091               
0092                       copy  "cpu_constants.asm"        ; Define constants for word/MSB/LSB
     **** ****     > cpu_constants.asm
0001               * FILE......: cpu_constants.asm
0002               * Purpose...: Constants used by Spectra2 and for own use
0003               
0004               ***************************************************************
0005               *                      Some constants
0006               ********|*****|*********************|**************************
0007               
0008               *--------------------------------------------------------------
0009               * Word values
0010               *--------------------------------------------------------------
0011               ;                                   ;       0123456789ABCDEF
0012 2000 0000     w$0000  data  >0000                 ; >0000 0000000000000000
0013 2002 0001     w$0001  data  >0001                 ; >0001 0000000000000001
0014 2004 0002     w$0002  data  >0002                 ; >0002 0000000000000010
0015 2006 0004     w$0004  data  >0004                 ; >0004 0000000000000100
0016 2008 0008     w$0008  data  >0008                 ; >0008 0000000000001000
0017 200A 0010     w$0010  data  >0010                 ; >0010 0000000000010000
0018 200C 0020     w$0020  data  >0020                 ; >0020 0000000000100000
0019 200E 0040     w$0040  data  >0040                 ; >0040 0000000001000000
0020 2010 0080     w$0080  data  >0080                 ; >0080 0000000010000000
0021 2012 0100     w$0100  data  >0100                 ; >0100 0000000100000000
0022 2014 0200     w$0200  data  >0200                 ; >0200 0000001000000000
0023 2016 0400     w$0400  data  >0400                 ; >0400 0000010000000000
0024 2018 0800     w$0800  data  >0800                 ; >0800 0000100000000000
0025 201A 1000     w$1000  data  >1000                 ; >1000 0001000000000000
0026 201C 2000     w$2000  data  >2000                 ; >2000 0010000000000000
0027 201E 4000     w$4000  data  >4000                 ; >4000 0100000000000000
0028 2020 8000     w$8000  data  >8000                 ; >8000 1000000000000000
0029 2022 FFFF     w$ffff  data  >ffff                 ; >ffff 1111111111111111
0030 2024 D000     w$d000  data  >d000                 ; >d000
0031               *--------------------------------------------------------------
0032               * Byte values - High byte (=MSB) for byte operations
0033               *--------------------------------------------------------------
0034      2000     hb$00   equ   w$0000                ; >0000
0035      2012     hb$01   equ   w$0100                ; >0100
0036      2014     hb$02   equ   w$0200                ; >0200
0037      2016     hb$04   equ   w$0400                ; >0400
0038      2018     hb$08   equ   w$0800                ; >0800
0039      201A     hb$10   equ   w$1000                ; >1000
0040      201C     hb$20   equ   w$2000                ; >2000
0041      201E     hb$40   equ   w$4000                ; >4000
0042      2020     hb$80   equ   w$8000                ; >8000
0043      2024     hb$d0   equ   w$d000                ; >d000
0044               *--------------------------------------------------------------
0045               * Byte values - Low byte (=LSB) for byte operations
0046               *--------------------------------------------------------------
0047      2000     lb$00   equ   w$0000                ; >0000
0048      2002     lb$01   equ   w$0001                ; >0001
0049      2004     lb$02   equ   w$0002                ; >0002
0050      2006     lb$04   equ   w$0004                ; >0004
0051      2008     lb$08   equ   w$0008                ; >0008
0052      200A     lb$10   equ   w$0010                ; >0010
0053      200C     lb$20   equ   w$0020                ; >0020
0054      200E     lb$40   equ   w$0040                ; >0040
0055      2010     lb$80   equ   w$0080                ; >0080
0056               *--------------------------------------------------------------
0057               * Bit values
0058               *--------------------------------------------------------------
0059               ;                                   ;       0123456789ABCDEF
0060      2002     wbit15  equ   w$0001                ; >0001 0000000000000001
0061      2004     wbit14  equ   w$0002                ; >0002 0000000000000010
0062      2006     wbit13  equ   w$0004                ; >0004 0000000000000100
0063      2008     wbit12  equ   w$0008                ; >0008 0000000000001000
0064      200A     wbit11  equ   w$0010                ; >0010 0000000000010000
0065      200C     wbit10  equ   w$0020                ; >0020 0000000000100000
0066      200E     wbit9   equ   w$0040                ; >0040 0000000001000000
0067      2010     wbit8   equ   w$0080                ; >0080 0000000010000000
0068      2012     wbit7   equ   w$0100                ; >0100 0000000100000000
0069      2014     wbit6   equ   w$0200                ; >0200 0000001000000000
0070      2016     wbit5   equ   w$0400                ; >0400 0000010000000000
0071      2018     wbit4   equ   w$0800                ; >0800 0000100000000000
0072      201A     wbit3   equ   w$1000                ; >1000 0001000000000000
0073      201C     wbit2   equ   w$2000                ; >2000 0010000000000000
0074      201E     wbit1   equ   w$4000                ; >4000 0100000000000000
0075      2020     wbit0   equ   w$8000                ; >8000 1000000000000000
                   < runlib.asm
0093                       copy  "config.equ"               ; Equates for bits in config register
     **** ****     > config.equ
0001               * FILE......: config.equ
0002               * Purpose...: Equates for bits in config register
0003               
0004               ***************************************************************
0005               * The config register equates
0006               *--------------------------------------------------------------
0007               * Configuration flags
0008               * ===================
0009               *
0010               * ; 15  Sound player: tune source       1=ROM/RAM      0=VDP MEMORY
0011               * ; 14  Sound player: repeat tune       1=yes          0=no
0012               * ; 13  Sound player: enabled           1=yes          0=no (or pause)
0013               * ; 12  VDP9918 sprite collision?       1=yes          0=no
0014               * ; 11  Keyboard: ANY key pressed       1=yes          0=no
0015               * ; 10  Keyboard: Alpha lock key down   1=yes          0=no
0016               * ; 09  Timer: Kernel thread enabled    1=yes          0=no
0017               * ; 08  Timer: Block kernel thread      1=yes          0=no
0018               * ; 07  Timer: User hook enabled        1=yes          0=no
0019               * ; 06  Timer: Block user hook          1=yes          0=no
0020               * ; 05  Speech synthesizer present      1=yes          0=no
0021               * ; 04  Speech player: busy             1=yes          0=no
0022               * ; 03  Speech player: enabled          1=yes          0=no
0023               * ; 02  VDP9918 PAL version             1=yes(50)      0=no(60)
0024               * ; 01  F18A present                    1=on           0=off
0025               * ; 00  Subroutine state flag           1=on           0=off
0026               ********|*****|*********************|**************************
0027      201C     palon   equ   wbit2                 ; bit 2=1   (VDP9918 PAL version)
0028      2012     enusr   equ   wbit7                 ; bit 7=1   (Enable user hook)
0029      200E     enknl   equ   wbit9                 ; bit 9=1   (Enable kernel thread)
0030      200A     anykey  equ   wbit11                ; BIT 11 in the CONFIG register
0031               ***************************************************************
                   < runlib.asm
0094                       copy  "cpu_crash.asm"            ; CPU crash handler
     **** ****     > cpu_crash.asm
0001               * FILE......: cpu_crash.asm
0002               * Purpose...: Custom crash handler module
0003               
0004               
0005               ***************************************************************
0006               * cpu.crash - CPU program crashed handler
0007               ***************************************************************
0008               *  bl   @cpu.crash
0009               *--------------------------------------------------------------
0010               * Crash and halt system. Upon crash entry register contents are
0011               * copied to the memory region >ffe0 - >fffe and displayed after
0012               * resetting the spectra2 runtime library, video modes, etc.
0013               *
0014               * Diagnostics
0015               * >ffce  caller address
0016               *
0017               * Register contents
0018               * >ffdc  wp
0019               * >ffde  st
0020               * >ffe0  r0
0021               * >ffe2  r1
0022               * >ffe4  r2  (config)
0023               * >ffe6  r3
0024               * >ffe8  r4  (tmp0)
0025               * >ffea  r5  (tmp1)
0026               * >ffec  r6  (tmp2)
0027               * >ffee  r7  (tmp3)
0028               * >fff0  r8  (tmp4)
0029               * >fff2  r9  (stack)
0030               * >fff4  r10
0031               * >fff6  r11
0032               * >fff8  r12
0033               * >fffa  r13
0034               * >fffc  r14
0035               * >fffe  r15
0036               ********|*****|*********************|**************************
0037               cpu.crash:
0038 2026 022B  22         ai    r11,-4                ; Remove opcode offset
     2028 FFFC     
0039               *--------------------------------------------------------------
0040               *    Save registers to high memory
0041               *--------------------------------------------------------------
0042 202A C800  38         mov   r0,@>ffe0
     202C FFE0     
0043 202E C801  38         mov   r1,@>ffe2
     2030 FFE2     
0044 2032 C802  38         mov   r2,@>ffe4
     2034 FFE4     
0045 2036 C803  38         mov   r3,@>ffe6
     2038 FFE6     
0046 203A C804  38         mov   r4,@>ffe8
     203C FFE8     
0047 203E C805  38         mov   r5,@>ffea
     2040 FFEA     
0048 2042 C806  38         mov   r6,@>ffec
     2044 FFEC     
0049 2046 C807  38         mov   r7,@>ffee
     2048 FFEE     
0050 204A C808  38         mov   r8,@>fff0
     204C FFF0     
0051 204E C809  38         mov   r9,@>fff2
     2050 FFF2     
0052 2052 C80A  38         mov   r10,@>fff4
     2054 FFF4     
0053 2056 C80B  38         mov   r11,@>fff6
     2058 FFF6     
0054 205A C80C  38         mov   r12,@>fff8
     205C FFF8     
0055 205E C80D  38         mov   r13,@>fffa
     2060 FFFA     
0056 2062 C80E  38         mov   r14,@>fffc
     2064 FFFC     
0057 2066 C80F  38         mov   r15,@>ffff
     2068 FFFF     
0058 206A 02A0  12         stwp  r0
0059 206C C800  38         mov   r0,@>ffdc
     206E FFDC     
0060 2070 02C0  12         stst  r0
0061 2072 C800  38         mov   r0,@>ffde
     2074 FFDE     
0062               *--------------------------------------------------------------
0063               *    Reset system
0064               *--------------------------------------------------------------
0065               cpu.crash.reset:
0066 2076 02E0  18         lwpi  ws1                   ; Activate workspace 1
     2078 8300     
0067 207A 04E0  26         clr   @>8302                ; Reset exit flag (R1 in workspace WS1!)
     207C 8302     
0068 207E 0200  20         li    r0,>4a4a              ; Note that a crash occured (Flag = >4a4a)
     2080 4A4A     
0069 2082 0460  28         b     @runli1               ; Initialize system again (VDP, Memory, etc.)
     2084 2F7E     
0070               *--------------------------------------------------------------
0071               *    Show diagnostics after system reset
0072               *--------------------------------------------------------------
0073               cpu.crash.main:
0074                       ;------------------------------------------------------
0075                       ; Load "32x24" video mode & font
0076                       ;------------------------------------------------------
0077 2086 06A0  32         bl    @vidtab               ; Load video mode table into VDP
     2088 22F8     
0078 208A 21F2                   data graph1           ; \ i  p0 = pointer to video mode table
0079                                                   ; /
0080               
0081 208C 06A0  32         bl    @ldfnt
     208E 2360     
0082 2090 0900                   data >0900,fnopt3     ; Load font (upper & lower case)
     2092 000C     
0083               
0084 2094 06A0  32         bl    @filv
     2096 228E     
0085 2098 0000                   data >0000,32,32*24   ; Clear screen
     209A 0020     
     209C 0300     
0086               
0087 209E 06A0  32         bl    @filv
     20A0 228E     
0088 20A2 0380                   data >0380,>f0,32*24  ; Load color table
     20A4 00F0     
     20A6 0300     
0089                       ;------------------------------------------------------
0090                       ; Show crash address
0091                       ;------------------------------------------------------
0092 20A8 06A0  32         bl    @putat                ; Show crash message
     20AA 2442     
0093 20AC 0000                   data >0000,cpu.crash.msg.crashed
     20AE 2182     
0094               
0095 20B0 06A0  32         bl    @puthex               ; Put hex value on screen
     20B2 2A0A     
0096 20B4 0015                   byte 0,21             ; \ i  p0 = YX position
0097 20B6 FFF6                   data >fff6            ; | i  p1 = Pointer to 16 bit word
0098 20B8 A100                   data rambuf           ; | i  p2 = Pointer to ram buffer
0099 20BA 4130                   byte 65,48            ; | i  p3 = MSB offset for ASCII digit a-f
0100                                                   ; /         LSB offset for ASCII digit 0-9
0101                       ;------------------------------------------------------
0102                       ; Show caller address
0103                       ;------------------------------------------------------
0104 20BC 06A0  32         bl    @putat                ; Show caller message
     20BE 2442     
0105 20C0 0100                   data >0100,cpu.crash.msg.caller
     20C2 2198     
0106               
0107 20C4 06A0  32         bl    @puthex               ; Put hex value on screen
     20C6 2A0A     
0108 20C8 0115                   byte 1,21             ; \ i  p0 = YX position
0109 20CA FFCE                   data >ffce            ; | i  p1 = Pointer to 16 bit word
0110 20CC A100                   data rambuf           ; | i  p2 = Pointer to ram buffer
0111 20CE 4130                   byte 65,48            ; | i  p3 = MSB offset for ASCII digit a-f
0112                                                   ; /         LSB offset for ASCII digit 0-9
0113                       ;------------------------------------------------------
0114                       ; Display labels
0115                       ;------------------------------------------------------
0116 20D0 06A0  32         bl    @putat
     20D2 2442     
0117 20D4 0300                   byte 3,0
0118 20D6 21B4                   data cpu.crash.msg.wp
0119 20D8 06A0  32         bl    @putat
     20DA 2442     
0120 20DC 0400                   byte 4,0
0121 20DE 21BA                   data cpu.crash.msg.st
0122                       ;------------------------------------------------------
0123                       ; Show crash registers WP, ST, R0 - R15
0124                       ;------------------------------------------------------
0125 20E0 06A0  32         bl    @at                   ; Put cursor at YX
     20E2 26E4     
0126 20E4 0304                   byte 3,4              ; \ i p0 = YX position
0127                                                   ; /
0128               
0129 20E6 0204  20         li    tmp0,>ffdc            ; Crash registers >ffdc - >ffff
     20E8 FFDC     
0130 20EA 04C6  14         clr   tmp2                  ; Loop counter
0131               
0132               cpu.crash.showreg:
0133 20EC C034  30         mov   *tmp0+,r0             ; Move crash register content to r0
0134               
0135 20EE 0649  14         dect  stack
0136 20F0 C644  30         mov   tmp0,*stack           ; Push tmp0
0137 20F2 0649  14         dect  stack
0138 20F4 C645  30         mov   tmp1,*stack           ; Push tmp1
0139 20F6 0649  14         dect  stack
0140 20F8 C646  30         mov   tmp2,*stack           ; Push tmp2
0141                       ;------------------------------------------------------
0142                       ; Display crash register number
0143                       ;------------------------------------------------------
0144               cpu.crash.showreg.label:
0145 20FA C046  18         mov   tmp2,r1               ; Save register number
0146 20FC 0286  22         ci    tmp2,1                ; Skip labels WP/ST?
     20FE 0001     
0147 2100 1220  14         jle   cpu.crash.showreg.content
0148                                                   ; Yes, skip
0149               
0150 2102 0641  14         dect  r1                    ; Adjust because of "dummy" WP/ST registers
0151 2104 06A0  32         bl    @mknum
     2106 2A14     
0152 2108 8302                   data r1hb             ; \ i  p0 = Pointer to 16 bit unsigned word
0153 210A A100                   data rambuf           ; | i  p1 = Pointer to ram buffer
0154 210C 3020                   byte 48,32            ; | i  p2 = MSB offset for ASCII digit a-f
0155                                                   ; /         LSB offset for ASCII digit 0-9
0156               
0157 210E 06A0  32         bl    @setx                 ; Set cursor X position
     2110 26FA     
0158 2112 0000                   data 0                ; \ i  p0 =  Cursor Y position
0159                                                   ; /
0160               
0161 2114 0204  20         li    tmp0,>0400            ; Set string length-prefix byte
     2116 0400     
0162 2118 D804  38         movb  tmp0,@rambuf          ;
     211A A100     
0163               
0164 211C 06A0  32         bl    @putstr               ; Put length-byte prefixed string at current YX
     211E 241E     
0165 2120 A100                   data rambuf           ; \ i  p0 = Pointer to ram buffer
0166                                                   ; /
0167               
0168 2122 06A0  32         bl    @setx                 ; Set cursor X position
     2124 26FA     
0169 2126 0002                   data 2                ; \ i  p0 =  Cursor Y position
0170                                                   ; /
0171               
0172 2128 0281  22         ci    r1,10
     212A 000A     
0173 212C 1102  14         jlt   !
0174 212E 0620  26         dec   @wyx                  ; x=x-1
     2130 832A     
0175               
0176 2132 06A0  32 !       bl    @putstr
     2134 241E     
0177 2136 21AE                   data cpu.crash.msg.r
0178               
0179 2138 06A0  32         bl    @mknum
     213A 2A14     
0180 213C 8302                   data r1hb             ; \ i  p0 = Pointer to 16 bit unsigned word
0181 213E A100                   data rambuf           ; | i  p1 = Pointer to ram buffer
0182 2140 3020                   byte 48,32            ; | i  p2 = MSB offset for ASCII digit a-f
0183                                                   ; /         LSB offset for ASCII digit 0-9
0184                       ;------------------------------------------------------
0185                       ; Display crash register content
0186                       ;------------------------------------------------------
0187               cpu.crash.showreg.content:
0188 2142 06A0  32         bl    @mkhex                ; Convert hex word to string
     2144 2986     
0189 2146 8300                   data r0hb             ; \ i  p0 = Pointer to 16 bit word
0190 2148 A100                   data rambuf           ; | i  p1 = Pointer to ram buffer
0191 214A 4130                   byte 65,48            ; | i  p2 = MSB offset for ASCII digit a-f
0192                                                   ; /         LSB offset for ASCII digit 0-9
0193               
0194 214C 06A0  32         bl    @setx                 ; Set cursor X position
     214E 26FA     
0195 2150 0004                   data 4                ; \ i  p0 =  Cursor Y position
0196                                                   ; /
0197               
0198 2152 06A0  32         bl    @putstr               ; Put '  >'
     2154 241E     
0199 2156 21B0                   data cpu.crash.msg.marker
0200               
0201 2158 06A0  32         bl    @setx                 ; Set cursor X position
     215A 26FA     
0202 215C 0007                   data 7                ; \ i  p0 =  Cursor Y position
0203                                                   ; /
0204               
0205 215E 0204  20         li    tmp0,>0400            ; Set string length-prefix byte
     2160 0400     
0206 2162 D804  38         movb  tmp0,@rambuf          ;
     2164 A100     
0207               
0208 2166 06A0  32         bl    @putstr               ; Put length-byte prefixed string at current YX
     2168 241E     
0209 216A A100                   data rambuf           ; \ i  p0 = Pointer to ram buffer
0210                                                   ; /
0211               
0212 216C C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0213 216E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0214 2170 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0215               
0216 2172 06A0  32         bl    @down                 ; y=y+1
     2174 26EA     
0217               
0218 2176 0586  14         inc   tmp2
0219 2178 0286  22         ci    tmp2,17
     217A 0011     
0220 217C 12B7  14         jle   cpu.crash.showreg     ; Show next register
0221                       ;------------------------------------------------------
0222                       ; Kernel takes over
0223                       ;------------------------------------------------------
0224 217E 0460  28         b     @cpu.crash.showbank   ; Expected to be included in
     2180 7F00     
0225               
0226               
0227 2182 1553     cpu.crash.msg.crashed      stri 'System crashed near >'
     2184 7973     
     2186 7465     
     2188 6D20     
     218A 6372     
     218C 6173     
     218E 6865     
     2190 6420     
     2192 6E65     
     2194 6172     
     2196 203E     
0228                                          even
0229 2198 1543     cpu.crash.msg.caller       stri 'Caller address near >'
     219A 616C     
     219C 6C65     
     219E 7220     
     21A0 6164     
     21A2 6472     
     21A4 6573     
     21A6 7320     
     21A8 6E65     
     21AA 6172     
     21AC 203E     
0230                                          even
0231 21AE 0152     cpu.crash.msg.r            stri 'R'
0232                                          even
0233 21B0 0320     cpu.crash.msg.marker       stri '  >'
     21B2 203E     
0234                                          even
0235 21B4 042A     cpu.crash.msg.wp           stri '**WP'
     21B6 2A57     
     21B8 50       
0236                                          even
0237 21BA 042A     cpu.crash.msg.st           stri '**ST'
     21BC 2A53     
     21BE 54       
0238                                          even
0239 21C0 1753     cpu.crash.msg.source       stri 'Source    %%build_src%%'
     21C2 6F75     
     21C4 7263     
     21C6 6520     
     21C8 2020     
     21CA 2025     
     21CC 2562     
     21CE 7569     
     21D0 6C64     
     21D2 5F73     
     21D4 7263     
     21D6 2525     
0240                                          even
0241 21D8 1842     cpu.crash.msg.id           stri 'Build-ID  %%build_date%%'
     21DA 7569     
     21DC 6C64     
     21DE 2D49     
     21E0 4420     
     21E2 2025     
     21E4 2562     
     21E6 7569     
     21E8 6C64     
     21EA 5F64     
     21EC 6174     
     21EE 6525     
     21F0 25       
0242                                          even
                   < runlib.asm
0095                       copy  "vdp_tables.asm"           ; Data used by runtime library
     **** ****     > vdp_tables.asm
0001               * FILE......: vdp_tables.a99
0002               * Purpose...: Video mode tables
0003               
0004               ***************************************************************
0005               * Graphics mode 1 (32 columns/24 rows)
0006               *--------------------------------------------------------------
0007 21F2 00E2     graph1  byte  >00,>e2,>00,>0e,>01,>06,>02,SPFBCK,0,32
     21F4 000E     
     21F6 0106     
     21F8 0204     
     21FA 0020     
0008               *
0009               * ; VDP#0 Control bits
0010               * ;      bit 6=0: M3 | Graphics 1 mode
0011               * ;      bit 7=0: Disable external VDP input
0012               * ; VDP#1 Control bits
0013               * ;      bit 0=1: 16K selection
0014               * ;      bit 1=1: Enable display
0015               * ;      bit 2=1: Enable VDP interrupt
0016               * ;      bit 3=0: M1 \ Graphics 1 mode
0017               * ;      bit 4=0: M2 /
0018               * ;      bit 5=0: reserved
0019               * ;      bit 6=1: 16x16 sprites
0020               * ;      bit 7=0: Sprite magnification (1x)
0021               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0022               * ; VDP#3 PCT (Pattern color table)      at >0380  (>0E * >040)
0023               * ; VDP#4 PDT (Pattern descriptor table) at >0800  (>01 * >800)
0024               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0025               * ; VDP#6 SPT (Sprite pattern table)     at >1000  (>02 * >800)
0026               * ; VDP#7 Set screen background color
0027               
0028               
0029               ***************************************************************
0030               * Textmode (40 columns/24 rows)
0031               *--------------------------------------------------------------
0032 21FC 00F2     tx4024  byte  >00,>f2,>00,>0e,>01,>06,>00,SPFCLR,0,40
     21FE 000E     
     2200 0106     
     2202 00F4     
     2204 0028     
0033               *
0034               * ; VDP#0 Control bits
0035               * ;      bit 6=0: M3 | Graphics 1 mode
0036               * ;      bit 7=0: Disable external VDP input
0037               * ; VDP#1 Control bits
0038               * ;      bit 0=1: 16K selection
0039               * ;      bit 1=1: Enable display
0040               * ;      bit 2=1: Enable VDP interrupt
0041               * ;      bit 3=1: M1 \ TEXT MODE
0042               * ;      bit 4=0: M2 /
0043               * ;      bit 5=0: reserved
0044               * ;      bit 6=1: 16x16 sprites
0045               * ;      bit 7=0: Sprite magnification (1x)
0046               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0047               * ; VDP#3 PCT (Pattern color table)      at >0380  (>0E * >040)
0048               * ; VDP#4 PDT (Pattern descriptor table) at >0800  (>01 * >800)
0049               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0050               * ; VDP#6 SPT (Sprite pattern table)     at >0000  (>00 * >800)
0051               * ; VDP#7 Set foreground/background color
0052               ***************************************************************
0053               
0054               
0055               ***************************************************************
0056               * Textmode (80 columns, 24 rows) - F18A
0057               *--------------------------------------------------------------
0058 2206 04F0     tx8024  byte  >04,>f0,>00,>3f,>02,>40,>03,SPFCLR,0,80
     2208 003F     
     220A 0240     
     220C 03F4     
     220E 0050     
0059               *
0060               * ; VDP#0 Control bits
0061               * ;      bit 6=0: M3 | Graphics 1 mode
0062               * ;      bit 7=0: Disable external VDP input
0063               * ; VDP#1 Control bits
0064               * ;      bit 0=1: 16K selection
0065               * ;      bit 1=1: Enable display
0066               * ;      bit 2=1: Enable VDP interrupt
0067               * ;      bit 3=1: M1 \ TEXT MODE
0068               * ;      bit 4=0: M2 /
0069               * ;      bit 5=0: reserved
0070               * ;      bit 6=0: 8x8 sprites
0071               * ;      bit 7=0: Sprite magnification (1x)
0072               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0073               * ; VDP#3 PCT (Pattern color table)      at >0FC0  (>3F * >040)
0074               * ; VDP#4 PDT (Pattern descriptor table) at >1000  (>02 * >800)
0075               * ; VDP#5 SAT (sprite attribute list)    at >2000  (>40 * >080)
0076               * ; VDP#6 SPT (Sprite pattern table)     at >1800  (>03 * >800)
0077               * ; VDP#7 Set foreground/background color
0078               ***************************************************************
                   < runlib.asm
0096                       copy  "basic_cpu_vdp.asm"        ; Basic CPU & VDP functions
     **** ****     > basic_cpu_vdp.asm
0001               * FILE......: basic_cpu_vdp.asm
0002               * Purpose...: Basic CPU & VDP functions used by other modules
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *       Support Machine Code for copy & fill functions
0006               *//////////////////////////////////////////////////////////////
0007               
0008               *--------------------------------------------------------------
0009               * ; Machine code for tight loop.
0010               * ; The MOV operation at MCLOOP must be injected by the calling routine.
0011               *--------------------------------------------------------------
0012               *       DATA  >????                 ; \ mcloop  mov   ...
0013 2210 0606     mccode  data  >0606                 ; |         dec   r6 (tmp2)
0014 2212 16FD             data  >16fd                 ; |         jne   mcloop
0015 2214 045B             data  >045b                 ; /         b     *r11
0016               *--------------------------------------------------------------
0017               * ; Machine code for reading from the speech synthesizer
0018               * ; The SRC instruction takes 12 uS for execution in scratchpad RAM.
0019               * ; Is required for the 12 uS delay. It destroys R5.
0020               *--------------------------------------------------------------
0021 2216 D114     spcode  data  >d114                 ; \         movb  *r4,r4 (tmp0)
0022 2218 0BC5             data  >0bc5                 ; /         src   r5,12  (tmp1)
0023                       even
0024               
0025               
0026               ***************************************************************
0027               * loadmc - Load machine code into scratchpad  >8322 - >8328
0028               ***************************************************************
0029               *  bl  @loadmc
0030               *--------------------------------------------------------------
0031               *  REMARKS
0032               *  Machine instruction in location @>8320 will be set by
0033               *  SP2 copy/fill routine that is called later on.
0034               ********|*****|*********************|**************************
0035               loadmc:
0036 221A 0201  20         li    r1,mccode             ; Machinecode to patch
     221C 2210     
0037 221E 0202  20         li    r2,mcloop+2           ; Scratch-pad reserved for machine code
     2220 8322     
0038 2222 CCB1  46         mov   *r1+,*r2+             ; Copy 1st instruction
0039 2224 CCB1  46         mov   *r1+,*r2+             ; Copy 2nd instruction
0040 2226 CCB1  46         mov   *r1+,*r2+             ; Copy 3rd instruction
0041 2228 045B  20         b     *r11                  ; Return to caller
0042               
0043               
0044               *//////////////////////////////////////////////////////////////
0045               *                    STACK SUPPORT FUNCTIONS
0046               *//////////////////////////////////////////////////////////////
0047               
0048               ***************************************************************
0049               * POPR. - Pop registers & return to caller
0050               ***************************************************************
0051               *  B  @POPRG.
0052               *--------------------------------------------------------------
0053               *  REMARKS
0054               *  R11 must be at stack bottom
0055               ********|*****|*********************|**************************
0056 222A C0F9  30 popr3   mov   *stack+,r3
0057 222C C0B9  30 popr2   mov   *stack+,r2
0058 222E C079  30 popr1   mov   *stack+,r1
0059 2230 C039  30 popr0   mov   *stack+,r0
0060 2232 C2F9  30 poprt   mov   *stack+,r11
0061 2234 045B  20         b     *r11
0062               
0063               
0064               
0065               *//////////////////////////////////////////////////////////////
0066               *                   MEMORY FILL FUNCTIONS
0067               *//////////////////////////////////////////////////////////////
0068               
0069               ***************************************************************
0070               * FILM - Fill CPU memory with byte
0071               ***************************************************************
0072               *  bl   @film
0073               *  data P0,P1,P2
0074               *--------------------------------------------------------------
0075               *  P0 = Memory start address
0076               *  P1 = Byte to fill
0077               *  P2 = Number of bytes to fill
0078               *--------------------------------------------------------------
0079               *  bl   @xfilm
0080               *
0081               *  TMP0 = Memory start address
0082               *  TMP1 = Byte to fill
0083               *  TMP2 = Number of bytes to fill
0084               ********|*****|*********************|**************************
0085 2236 C13B  30 film    mov   *r11+,tmp0            ; Memory start
0086 2238 C17B  30         mov   *r11+,tmp1            ; Byte to fill
0087 223A C1BB  30         mov   *r11+,tmp2            ; Repeat count
0088               *--------------------------------------------------------------
0089               * Assert
0090               *--------------------------------------------------------------
0091 223C C1C6  18 xfilm   mov   tmp2,tmp3             ; Bytes to fill = 0 ?
0092 223E 1604  14         jne   filchk                ; No, continue checking
0093               
0094 2240 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2242 FFCE     
0095 2244 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2246 2026     
0096               *--------------------------------------------------------------
0097               *       Check: 1 byte fill
0098               *--------------------------------------------------------------
0099 2248 D820  42 filchk  movb  @tmp1lb,@tmp1hb       ; Duplicate value
     224A 830B     
     224C 830A     
0100               
0101 224E 0286  22         ci    tmp2,1                ; Bytes to fill = 1 ?
     2250 0001     
0102 2252 1602  14         jne   filchk2
0103 2254 DD05  32         movb  tmp1,*tmp0+
0104 2256 045B  20         b     *r11                  ; Exit
0105               *--------------------------------------------------------------
0106               *       Check: 2 byte fill
0107               *--------------------------------------------------------------
0108 2258 0286  22 filchk2 ci    tmp2,2                ; Byte to fill = 2 ?
     225A 0002     
0109 225C 1603  14         jne   filchk3
0110 225E DD05  32         movb  tmp1,*tmp0+           ; Deal with possible uneven start address
0111 2260 DD05  32         movb  tmp1,*tmp0+
0112 2262 045B  20         b     *r11                  ; Exit
0113               *--------------------------------------------------------------
0114               *       Check: Handle uneven start address
0115               *--------------------------------------------------------------
0116 2264 C1C4  18 filchk3 mov   tmp0,tmp3
0117 2266 0247  22         andi  tmp3,1                ; TMP3=1 -> ODD else EVEN
     2268 0001     
0118 226A 1305  14         jeq   fil16b
0119 226C DD05  32         movb  tmp1,*tmp0+           ; Copy 1st byte
0120 226E 0606  14         dec   tmp2
0121 2270 0286  22         ci    tmp2,2                ; Do we only have 1 word left?
     2272 0002     
0122 2274 13F1  14         jeq   filchk2               ; Yes, copy word and exit
0123               *--------------------------------------------------------------
0124               *       Fill memory with 16 bit words
0125               *--------------------------------------------------------------
0126 2276 C1C6  18 fil16b  mov   tmp2,tmp3
0127 2278 0247  22         andi  tmp3,1                ; TMP3=1 -> ODD else EVEN
     227A 0001     
0128 227C 1301  14         jeq   dofill
0129 227E 0606  14         dec   tmp2                  ; Make TMP2 even
0130 2280 CD05  34 dofill  mov   tmp1,*tmp0+
0131 2282 0646  14         dect  tmp2
0132 2284 16FD  14         jne   dofill
0133               *--------------------------------------------------------------
0134               * Fill last byte if ODD
0135               *--------------------------------------------------------------
0136 2286 C1C7  18         mov   tmp3,tmp3
0137 2288 1301  14         jeq   fil.exit
0138 228A DD05  32         movb  tmp1,*tmp0+
0139               fil.exit:
0140 228C 045B  20         b     *r11
0141               
0142               
0143               ***************************************************************
0144               * FILV - Fill VRAM with byte
0145               ***************************************************************
0146               *  BL   @FILV
0147               *  DATA P0,P1,P2
0148               *--------------------------------------------------------------
0149               *  P0 = VDP start address
0150               *  P1 = Byte to fill
0151               *  P2 = Number of bytes to fill
0152               *--------------------------------------------------------------
0153               *  BL   @XFILV
0154               *
0155               *  TMP0 = VDP start address
0156               *  TMP1 = Byte to fill
0157               *  TMP2 = Number of bytes to fill
0158               ********|*****|*********************|**************************
0159 228E C13B  30 filv    mov   *r11+,tmp0            ; Memory start
0160 2290 C17B  30         mov   *r11+,tmp1            ; Byte to fill
0161 2292 C1BB  30         mov   *r11+,tmp2            ; Repeat count
0162               *--------------------------------------------------------------
0163               *    Setup VDP write address
0164               *--------------------------------------------------------------
0165 2294 0264  22 xfilv   ori   tmp0,>4000
     2296 4000     
0166 2298 06C4  14         swpb  tmp0
0167 229A D804  30         movb  tmp0,@vdpa
     229C 8C02     
0168 229E 06C4  14         swpb  tmp0
0169 22A0 D804  30         movb  tmp0,@vdpa
     22A2 8C02     
0170               *--------------------------------------------------------------
0171               *    Fill bytes in VDP memory
0172               *--------------------------------------------------------------
0173 22A4 020F  20         li    r15,vdpw              ; Set VDP write address
     22A6 8C00     
0174 22A8 06C5  14         swpb  tmp1
0175 22AA C820  46         mov   @filzz,@mcloop        ; Setup move command
     22AC 22B4     
     22AE 8320     
0176 22B0 0460  24         b     @mcloop               ; Write data to VDP
     22B2 8320     
0177               *--------------------------------------------------------------
0181 22B4 D7C5     filzz   data  >d7c5                 ; MOVB TMP1,*R15
0183               
0184               
0185               
0186               *//////////////////////////////////////////////////////////////
0187               *                  VDP LOW LEVEL FUNCTIONS
0188               *//////////////////////////////////////////////////////////////
0189               
0190               ***************************************************************
0191               * VDWA / VDRA - Setup VDP write or read address
0192               ***************************************************************
0193               *  BL   @VDWA
0194               *
0195               *  TMP0 = VDP destination address for write
0196               *--------------------------------------------------------------
0197               *  BL   @VDRA
0198               *
0199               *  TMP0 = VDP source address for read
0200               ********|*****|*********************|**************************
0201 22B6 0264  22 vdwa    ori   tmp0,>4000            ; Prepare VDP address for write
     22B8 4000     
0202 22BA 06C4  14 vdra    swpb  tmp0
0203 22BC D804  30         movb  tmp0,@vdpa
     22BE 8C02     
0204 22C0 06C4  14         swpb  tmp0
0205 22C2 D804  30         movb  tmp0,@vdpa            ; Set VDP address
     22C4 8C02     
0206 22C6 045B  20         b     *r11                  ; Exit
0207               
0208               ***************************************************************
0209               * VPUTB - VDP put single byte
0210               ***************************************************************
0211               *  BL @VPUTB
0212               *  DATA P0,P1
0213               *--------------------------------------------------------------
0214               *  P0 = VDP target address
0215               *  P1 = Byte to write
0216               ********|*****|*********************|**************************
0217 22C8 C13B  30 vputb   mov   *r11+,tmp0            ; Get VDP target address
0218 22CA C17B  30         mov   *r11+,tmp1            ; Get byte to write
0219               *--------------------------------------------------------------
0220               * Set VDP write address
0221               *--------------------------------------------------------------
0222 22CC 0264  22 xvputb  ori   tmp0,>4000            ; Prepare VDP address for write
     22CE 4000     
0223 22D0 06C4  14         swpb  tmp0                  ; \
0224 22D2 D804  30         movb  tmp0,@vdpa            ; | Set VDP write address
     22D4 8C02     
0225 22D6 06C4  14         swpb  tmp0                  ; | inlined @vdwa call
0226 22D8 D804  30         movb  tmp0,@vdpa            ; /
     22DA 8C02     
0227               *--------------------------------------------------------------
0228               * Write byte
0229               *--------------------------------------------------------------
0230 22DC 06C5  14         swpb  tmp1                  ; LSB to MSB
0231 22DE D7C5  30         movb  tmp1,*r15             ; Write byte
0232 22E0 045B  20         b     *r11                  ; Exit
0233               
0234               
0235               ***************************************************************
0236               * VGETB - VDP get single byte
0237               ***************************************************************
0238               *  bl   @vgetb
0239               *  data p0
0240               *--------------------------------------------------------------
0241               *  P0 = VDP source address
0242               *--------------------------------------------------------------
0243               *  bl   @xvgetb
0244               *
0245               *  tmp0 = VDP source address
0246               *--------------------------------------------------------------
0247               *  Output:
0248               *  tmp0 MSB = >00
0249               *  tmp0 LSB = VDP byte read
0250               ********|*****|*********************|**************************
0251 22E2 C13B  30 vgetb   mov   *r11+,tmp0            ; Get VDP source address
0252               *--------------------------------------------------------------
0253               * Set VDP read address
0254               *--------------------------------------------------------------
0255 22E4 06C4  14 xvgetb  swpb  tmp0                  ; \
0256 22E6 D804  30         movb  tmp0,@vdpa            ; | Set VDP read address
     22E8 8C02     
0257 22EA 06C4  14         swpb  tmp0                  ; | inlined @vdra call
0258 22EC D804  30         movb  tmp0,@vdpa            ; /
     22EE 8C02     
0259               *--------------------------------------------------------------
0260               * Read byte
0261               *--------------------------------------------------------------
0262 22F0 D120  30         movb  @vdpr,tmp0            ; Read byte
     22F2 8800     
0263 22F4 0984  32         srl   tmp0,8                ; Right align
0264 22F6 045B  20         b     *r11                  ; Exit
0265               
0266               
0267               ***************************************************************
0268               * VIDTAB - Dump videomode table
0269               ***************************************************************
0270               *  BL   @VIDTAB
0271               *  DATA P0
0272               *--------------------------------------------------------------
0273               *  P0 = Address of video mode table
0274               *--------------------------------------------------------------
0275               *  BL   @XIDTAB
0276               *
0277               *  TMP0 = Address of video mode table
0278               *--------------------------------------------------------------
0279               *  Remarks
0280               *  TMP1 = MSB is the VDP target register
0281               *         LSB is the value to write
0282               ********|*****|*********************|**************************
0283 22F8 C13B  30 vidtab  mov   *r11+,tmp0            ; Get video mode table
0284 22FA C394  26 xidtab  mov   *tmp0,r14             ; Store copy of VDP#0 and #1 in RAM
0285               *--------------------------------------------------------------
0286               * Calculate PNT base address
0287               *--------------------------------------------------------------
0288 22FC C144  18         mov   tmp0,tmp1
0289 22FE 05C5  14         inct  tmp1
0290 2300 D155  26         movb  *tmp1,tmp1            ; Get value for VDP#2
0291 2302 0245  22         andi  tmp1,>ff00            ; Only keep MSB
     2304 FF00     
0292 2306 0A25  20         sla   tmp1,2                ; TMP1 *= 400
0293 2308 C805  30         mov   tmp1,@wbase           ; Store calculated base
     230A 8328     
0294               *--------------------------------------------------------------
0295               * Dump VDP shadow registers
0296               *--------------------------------------------------------------
0297 230C 0205  20         li    tmp1,>8000            ; Start with VDP register 0
     230E 8000     
0298 2310 0206  20         li    tmp2,8
     2312 0008     
0299 2314 D834  40 vidta1  movb  *tmp0+,@tmp1lb        ; Write value to VDP register
     2316 830B     
0300 2318 06C5  14         swpb  tmp1
0301 231A D805  30         movb  tmp1,@vdpa
     231C 8C02     
0302 231E 06C5  14         swpb  tmp1
0303 2320 D805  30         movb  tmp1,@vdpa
     2322 8C02     
0304 2324 0225  22         ai    tmp1,>0100
     2326 0100     
0305 2328 0606  14         dec   tmp2
0306 232A 16F4  14         jne   vidta1                ; Next register
0307 232C C814  38         mov   *tmp0,@wcolmn         ; Store # of columns per row
     232E 833A     
0308 2330 045B  20         b     *r11
0309               
0310               
0311               ***************************************************************
0312               * PUTVR  - Put single VDP register
0313               ***************************************************************
0314               *  BL   @PUTVR
0315               *  DATA P0
0316               *--------------------------------------------------------------
0317               *  P0 = MSB is the VDP target register
0318               *       LSB is the value to write
0319               *--------------------------------------------------------------
0320               *  BL   @PUTVRX
0321               *
0322               *  TMP0 = MSB is the VDP target register
0323               *         LSB is the value to write
0324               ********|*****|*********************|**************************
0325 2332 C13B  30 putvr   mov   *r11+,tmp0
0326 2334 0264  22 putvrx  ori   tmp0,>8000
     2336 8000     
0327 2338 06C4  14         swpb  tmp0
0328 233A D804  30         movb  tmp0,@vdpa
     233C 8C02     
0329 233E 06C4  14         swpb  tmp0
0330 2340 D804  30         movb  tmp0,@vdpa
     2342 8C02     
0331 2344 045B  20         b     *r11
0332               
0333               
0334               ***************************************************************
0335               * PUTV01  - Put VDP registers #0 and #1
0336               ***************************************************************
0337               *  BL   @PUTV01
0338               ********|*****|*********************|**************************
0339 2346 C20B  18 putv01  mov   r11,tmp4              ; Save R11
0340 2348 C10E  18         mov   r14,tmp0
0341 234A 0984  32         srl   tmp0,8
0342 234C 06A0  32         bl    @putvrx               ; Write VR#0
     234E 2334     
0343 2350 0204  20         li    tmp0,>0100
     2352 0100     
0344 2354 D820  42         movb  @r14lb,@tmp0lb
     2356 831D     
     2358 8309     
0345 235A 06A0  32         bl    @putvrx               ; Write VR#1
     235C 2334     
0346 235E 0458  20         b     *tmp4                 ; Exit
0347               
0348               
0349               ***************************************************************
0350               * LDFNT - Load TI-99/4A font from GROM into VDP
0351               ***************************************************************
0352               *  BL   @LDFNT
0353               *  DATA P0,P1
0354               *--------------------------------------------------------------
0355               *  P0 = VDP Target address
0356               *  P1 = Font options
0357               *--------------------------------------------------------------
0358               * Uses registers tmp0-tmp4
0359               ********|*****|*********************|**************************
0360 2360 C20B  18 ldfnt   mov   r11,tmp4              ; Save R11
0361 2362 05CB  14         inct  r11                   ; Get 2nd parameter (font options)
0362 2364 C11B  26         mov   *r11,tmp0             ; Get P0
0363 2366 0242  22         andi  config,>7fff          ; CONFIG register bit 0=0
     2368 7FFF     
0364 236A 2120  32         coc   @wbit0,tmp0
     236C 2020     
0365 236E 1604  14         jne   ldfnt1
0366 2370 0262  22         ori   config,>8000          ; CONFIG register bit 0=1
     2372 8000     
0367 2374 0244  22         andi  tmp0,>7fff            ; Parameter value bit 0=0
     2376 7FFF     
0368               *--------------------------------------------------------------
0369               * Read font table address from GROM into tmp1
0370               *--------------------------------------------------------------
0371 2378 C124  34 ldfnt1  mov   @tmp006(tmp0),tmp0    ; Load GROM index address into tmp0
     237A 23E2     
0372 237C D804  38         movb  tmp0,@grmwa           ; Setup GROM source byte 1 for reading
     237E 9C02     
0373 2380 06C4  14         swpb  tmp0
0374 2382 D804  38         movb  tmp0,@grmwa           ; Setup GROM source byte 2 for reading
     2384 9C02     
0375 2386 D160  34         movb  @grmrd,tmp1           ; Read font table address byte 1
     2388 9800     
0376 238A 06C5  14         swpb  tmp1
0377 238C D160  34         movb  @grmrd,tmp1           ; Read font table address byte 2
     238E 9800     
0378 2390 06C5  14         swpb  tmp1
0379               *--------------------------------------------------------------
0380               * Setup GROM source address from tmp1
0381               *--------------------------------------------------------------
0382 2392 D805  38         movb  tmp1,@grmwa
     2394 9C02     
0383 2396 06C5  14         swpb  tmp1
0384 2398 D805  38         movb  tmp1,@grmwa           ; Setup GROM address for reading
     239A 9C02     
0385               *--------------------------------------------------------------
0386               * Setup VDP target address
0387               *--------------------------------------------------------------
0388 239C C118  26         mov   *tmp4,tmp0            ; Get P1 (VDP destination)
0389 239E 06A0  32         bl    @vdwa                 ; Setup VDP destination address
     23A0 22B6     
0390 23A2 05C8  14         inct  tmp4                  ; R11=R11+2
0391 23A4 C158  26         mov   *tmp4,tmp1            ; Get font options into TMP1
0392 23A6 0245  22         andi  tmp1,>7fff            ; Parameter value bit 0=0
     23A8 7FFF     
0393 23AA C1A5  34         mov   @tmp006+2(tmp1),tmp2  ; Get number of patterns to copy
     23AC 23E4     
0394 23AE C165  34         mov   @tmp006+4(tmp1),tmp1  ; 7 or 8 byte pattern ?
     23B0 23E6     
0395               *--------------------------------------------------------------
0396               * Copy from GROM to VRAM
0397               *--------------------------------------------------------------
0398 23B2 0B15  18 ldfnt2  src   tmp1,1                ; Carry set ?
0399 23B4 1812  14         joc   ldfnt4                ; Yes, go insert a >00
0400 23B6 D120  34         movb  @grmrd,tmp0
     23B8 9800     
0401               *--------------------------------------------------------------
0402               *   Make font fat
0403               *--------------------------------------------------------------
0404 23BA 20A0  32         coc   @wbit0,config         ; Fat flag set ?
     23BC 2020     
0405 23BE 1603  14         jne   ldfnt3                ; No, so skip
0406 23C0 D1C4  18         movb  tmp0,tmp3
0407 23C2 0917  18         srl   tmp3,1
0408 23C4 E107  18         soc   tmp3,tmp0
0409               *--------------------------------------------------------------
0410               *   Dump byte to VDP and do housekeeping
0411               *--------------------------------------------------------------
0412 23C6 D804  30 ldfnt3  movb  tmp0,@vdpw            ; Dump byte to VRAM
     23C8 8C00     
0413 23CA 0606  14         dec   tmp2
0414 23CC 16F2  14         jne   ldfnt2
0415 23CE 05C8  14         inct  tmp4                  ; R11=R11+2
0416 23D0 020F  20         li    r15,vdpw              ; Set VDP write address
     23D2 8C00     
0417 23D4 0242  22         andi  config,>7fff          ; CONFIG register bit 0=0
     23D6 7FFF     
0418 23D8 0458  20         b     *tmp4                 ; Exit
0419 23DA D820  46 ldfnt4  movb  @hb$00,@vdpw          ; Insert byte >00 into VRAM
     23DC 2000     
     23DE 8C00     
0420 23E0 10E8  14         jmp   ldfnt2
0421               *--------------------------------------------------------------
0422               * Fonts pointer table
0423               *--------------------------------------------------------------
0424 23E2 004C     tmp006  data  >004c,64*8,>0000      ; Pointer to TI title screen font
     23E4 0200     
     23E6 0000     
0425 23E8 004E             data  >004e,64*7,>0101      ; Pointer to upper case font
     23EA 01C0     
     23EC 0101     
0426 23EE 004E             data  >004e,96*7,>0101      ; Pointer to upper & lower case font
     23F0 02A0     
     23F2 0101     
0427 23F4 0050             data  >0050,32*7,>0101      ; Pointer to lower case font
     23F6 00E0     
     23F8 0101     
0428               
0429               
0430               
0431               ***************************************************************
0432               * YX2PNT - Get VDP PNT address for current YX cursor position
0433               ***************************************************************
0434               *  BL   @YX2PNT
0435               *--------------------------------------------------------------
0436               *  INPUT
0437               *  @WYX = Cursor YX position
0438               *--------------------------------------------------------------
0439               *  OUTPUT
0440               *  TMP0 = VDP address for entry in Pattern Name Table
0441               *--------------------------------------------------------------
0442               *  Register usage
0443               *  TMP0, R14, R15
0444               ********|*****|*********************|**************************
0445 23FA C10E  18 yx2pnt  mov   r14,tmp0              ; Save VDP#0 & VDP#1
0446 23FC C3A0  30         mov   @wyx,r14              ; Get YX
     23FE 832A     
0447 2400 098E  32         srl   r14,8                 ; Right justify (remove X)
0448 2402 3BA0  70         mpy   @wcolmn,r14           ; pos = Y * (columns per row)
     2404 833A     
0449               *--------------------------------------------------------------
0450               * Do rest of calculation with R15 (16 bit part is there)
0451               * Re-use R14
0452               *--------------------------------------------------------------
0453 2406 C3A0  30         mov   @wyx,r14              ; Get YX
     2408 832A     
0454 240A 024E  22         andi  r14,>00ff             ; Remove Y
     240C 00FF     
0455 240E A3CE  18         a     r14,r15               ; pos = pos + X
0456 2410 A3E0  30         a     @wbase,r15            ; pos = pos + (PNT base address)
     2412 8328     
0457               *--------------------------------------------------------------
0458               * Clean up before exit
0459               *--------------------------------------------------------------
0460 2414 C384  18         mov   tmp0,r14              ; Restore VDP#0 & VDP#1
0461 2416 C10F  18         mov   r15,tmp0              ; Return pos in TMP0
0462 2418 020F  20         li    r15,vdpw              ; VDP write address
     241A 8C00     
0463 241C 045B  20         b     *r11
0464               
0465               
0466               
0467               ***************************************************************
0468               * Put length-byte prefixed string at current YX
0469               ***************************************************************
0470               *  BL   @PUTSTR
0471               *  DATA P0
0472               *
0473               *  P0 = Pointer to string
0474               *--------------------------------------------------------------
0475               *  REMARKS
0476               *  First byte of string must contain length
0477               *--------------------------------------------------------------
0478               *  Register usage
0479               *  tmp1, tmp2, tmp3
0480               ********|*****|*********************|**************************
0481 241E C17B  30 putstr  mov   *r11+,tmp1
0482 2420 D1B5  28 xutst0  movb  *tmp1+,tmp2           ; Get length byte
0483 2422 C1CB  18 xutstr  mov   r11,tmp3
0484 2424 06A0  32         bl    @yx2pnt               ; Get VDP destination address
     2426 23FA     
0485 2428 C2C7  18         mov   tmp3,r11
0486 242A 0986  32         srl   tmp2,8                ; Right justify length byte
0487               *--------------------------------------------------------------
0488               * Put string
0489               *--------------------------------------------------------------
0490 242C C186  18         mov   tmp2,tmp2             ; Length = 0 ?
0491 242E 1305  14         jeq   !                     ; Yes, crash and burn
0492               
0493 2430 0286  22         ci    tmp2,255              ; Length > 255 ?
     2432 00FF     
0494 2434 1502  14         jgt   !                     ; Yes, crash and burn
0495               
0496 2436 0460  28         b     @xpym2v               ; Display string
     2438 24AA     
0497               *--------------------------------------------------------------
0498               * Crash handler
0499               *--------------------------------------------------------------
0500 243A C80B  38 !       mov   r11,@>ffce            ; \ Save caller address
     243C FFCE     
0501 243E 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2440 2026     
0502               
0503               
0504               
0505               ***************************************************************
0506               * Put length-byte prefixed string at YX
0507               ***************************************************************
0508               *  BL   @PUTAT
0509               *  DATA P0,P1
0510               *
0511               *  P0 = YX position
0512               *  P1 = Pointer to string
0513               *--------------------------------------------------------------
0514               *  REMARKS
0515               *  First byte of string must contain length
0516               ********|*****|*********************|**************************
0517 2442 C83B  42 putat   mov   *r11+,@wyx            ; Set YX position
     2444 832A     
0518 2446 0460  28         b     @putstr
     2448 241E     
0519               
0520               
0521               ***************************************************************
0522               * putlst
0523               * Loop over string list and display in columns
0524               ***************************************************************
0525               * bl  @putlst
0526               *--------------------------------------------------------------
0527               * INPUT
0528               * @wyx = Cursor position
0529               * tmp0 = Cutover row and column offset for next column.
0530               *        Set to >0000 for single-column list
0531               * tmp1 = Pointer to first length-prefixed string in list
0532               * tmp2 = Number of strings to display
0533               *--------------------------------------------------------------
0534               * OUTPUT
0535               * @waux1 = Pointer to next entry in list after display.
0536               *          Only set if tmp2 < entries in list
0537               *--------------------------------------------------------------
0538               * Register usage
0539               * tmp0, tmp1, tmp2, tmp3
0540               ********|*****|*********************|**************************
0541               putlst:
0542 244A 0649  14         dect  stack
0543 244C C64B  30         mov   r11,*stack            ; Save return address
0544                       ;------------------------------------------------------
0545                       ; Prepare
0546                       ;------------------------------------------------------
0547 244E C220  30         mov   @wyx,tmp4             ; Backup @wyx position
     2450 832A     
0548                       ;------------------------------------------------------
0549                       ; Dump strings to VDP
0550                       ;------------------------------------------------------
0551               putlst.loop:
0552 2452 D1D5  26         movb  *tmp1,tmp3            ; Get string length byte
0553 2454 0987  32         srl   tmp3,8                ; Right align
0554 2456 1324  14         jeq   putlst.exit           ; Exit early if 0-byte string length
0555               
0556 2458 0649  14         dect  stack
0557 245A C644  30         mov   tmp0,*stack           ; Push tmp0
0558 245C 0649  14         dect  stack
0559 245E C645  30         mov   tmp1,*stack           ; Push tmp1
0560 2460 0649  14         dect  stack
0561 2462 C646  30         mov   tmp2,*stack           ; Push tmp2
0562 2464 0649  14         dect  stack
0563 2466 C647  30         mov   tmp3,*stack           ; Push tmp3
0564 2468 0649  14         dect  stack
0565 246A C648  30         mov   tmp4,*stack           ; Push tmp4
0566               
0567 246C 06A0  32         bl    @xutst0               ; Display string
     246E 2420     
0568                                                   ; \ i  tmp1 = Pointer to string
0569                                                   ; / i  @wyx = Cursor position at
0570               
0571 2470 C239  30         mov   *stack+,tmp4          ; Pop tmp4
0572 2472 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0573 2474 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0574 2476 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0575 2478 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0576                       ;------------------------------------------------------
0577                       ; Next column?
0578                       ;------------------------------------------------------
0579 247A C104  18         mov   tmp0,tmp0             ; \ Single column list?
0580 247C 1309  14         jeq   !                     ; / Yes, skip next column handling
0581               
0582 247E 9120  30         cb    @wyx,tmp0             ; Cutover row reached?
     2480 832A     
0583 2482 1106  14         jlt   !                     ; Not yet, move down
0584               
0585 2484 D808  30         movb  tmp4,@wyx             ; Restore Y-position
     2486 832A     
0586 2488 B820  42         ab    @tmp0lb,@wyx+1        ; Add column offset
     248A 8309     
     248C 832B     
0587               
0588 248E 1002  14         jmp   putlst.next           ; Next iteration
0589 2490 06A0  32 !       bl    @down                 ; Move cursor down
     2492 26EA     
0590                       ;------------------------------------------------------
0591                       ; Prepare for next iteration
0592                       ;------------------------------------------------------
0593               putlst.next:
0594 2494 A147  18         a     tmp3,tmp1             ; Add string length to pointer
0595 2496 0585  14         inc   tmp1                  ; Consider length byte
0596 2498 0606  14         dec   tmp2
0597 249A 15DB  14         jgt   putlst.loop           ; Display next entry in list
0598 249C C805  30         mov   tmp1,@waux1           ; Save pointer to next entry in list
     249E 833C     
0599                       ;------------------------------------------------------
0600                       ; Exit
0601                       ;------------------------------------------------------
0602               putlst.exit:
0603 24A0 C2F9  30         mov   *stack+,r11           ; Pop r11
0604 24A2 045B  20         b     *r11                  ; Return
                   < runlib.asm
0097               
0099                       copy  "copy_cpu_vram.asm"        ; CPU to VRAM copy functions
     **** ****     > copy_cpu_vram.asm
0001               * FILE......: copy_cpu_vram.asm
0002               * Purpose...: CPU memory to VRAM copy support module
0003               
0004               ***************************************************************
0005               * CPYM2V - Copy CPU memory to VRAM
0006               ***************************************************************
0007               *  BL   @CPYM2V
0008               *  DATA P0,P1,P2
0009               *--------------------------------------------------------------
0010               *  P0 = VDP start address
0011               *  P1 = RAM/ROM start address
0012               *  P2 = Number of bytes to copy
0013               *--------------------------------------------------------------
0014               *  BL @XPYM2V
0015               *
0016               *  TMP0 = VDP start address
0017               *  TMP1 = RAM/ROM start address
0018               *  TMP2 = Number of bytes to copy
0019               ********|*****|*********************|**************************
0020 24A4 C13B  30 cpym2v  mov   *r11+,tmp0            ; VDP Start address
0021 24A6 C17B  30         mov   *r11+,tmp1            ; RAM/ROM start address
0022 24A8 C1BB  30         mov   *r11+,tmp2            ; Bytes to copy
0023               *--------------------------------------------------------------
0024               *    Assert
0025               *--------------------------------------------------------------
0026 24AA C186  18 xpym2v  mov   tmp2,tmp2             ; Bytes to copy = 0 ?
0027 24AC 1604  14         jne   !                     ; No, continue
0028               
0029 24AE C80B  38         mov   r11,@>ffce            ; \ Save caller address
     24B0 FFCE     
0030 24B2 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     24B4 2026     
0031               *--------------------------------------------------------------
0032               *    Setup VDP write address
0033               *--------------------------------------------------------------
0034 24B6 0264  22 !       ori   tmp0,>4000
     24B8 4000     
0035 24BA 06C4  14         swpb  tmp0
0036 24BC D804  30         movb  tmp0,@vdpa
     24BE 8C02     
0037 24C0 06C4  14         swpb  tmp0
0038 24C2 D804  30         movb  tmp0,@vdpa
     24C4 8C02     
0039               *--------------------------------------------------------------
0040               *    Copy bytes from CPU memory to VRAM
0041               *--------------------------------------------------------------
0042 24C6 020F  20         li    r15,vdpw              ; Set VDP write address
     24C8 8C00     
0043 24CA C820  46         mov   @tmp008,@mcloop       ; Setup copy command
     24CC 24D4     
     24CE 8320     
0044 24D0 0460  24         b     @mcloop               ; Write data to VDP and return
     24D2 8320     
0045               *--------------------------------------------------------------
0046               * Data
0047               *--------------------------------------------------------------
0048 24D4 D7F5     tmp008  data  >d7f5                 ; MOVB *TMP1+,*R15
                   < runlib.asm
0101               
0103                       copy  "copy_vram_cpu.asm"        ; VRAM to CPU copy functions
     **** ****     > copy_vram_cpu.asm
0001               * FILE......: copy_vram_cpu.asm
0002               * Purpose...: VRAM to CPU memory copy support module
0003               
0004               ***************************************************************
0005               * CPYV2M - Copy VRAM to CPU memory
0006               ***************************************************************
0007               *  BL   @CPYV2M
0008               *  DATA P0,P1,P2
0009               *--------------------------------------------------------------
0010               *  P0 = VDP source address
0011               *  P1 = RAM target address
0012               *  P2 = Number of bytes to copy
0013               *--------------------------------------------------------------
0014               *  BL @XPYV2M
0015               *
0016               *  TMP0 = VDP source address
0017               *  TMP1 = RAM target address
0018               *  TMP2 = Number of bytes to copy
0019               ********|*****|*********************|**************************
0020 24D6 C13B  30 cpyv2m  mov   *r11+,tmp0            ; VDP source address
0021 24D8 C17B  30         mov   *r11+,tmp1            ; Target address in RAM
0022 24DA C1BB  30         mov   *r11+,tmp2            ; Bytes to copy
0023               *--------------------------------------------------------------
0024               *    Setup VDP read address
0025               *--------------------------------------------------------------
0026 24DC 06C4  14 xpyv2m  swpb  tmp0
0027 24DE D804  30         movb  tmp0,@vdpa
     24E0 8C02     
0028 24E2 06C4  14         swpb  tmp0
0029 24E4 D804  30         movb  tmp0,@vdpa
     24E6 8C02     
0030               *--------------------------------------------------------------
0031               *    Copy bytes from VDP memory to RAM
0032               *--------------------------------------------------------------
0033 24E8 020F  20         li    r15,vdpr              ; Set VDP read address
     24EA 8800     
0034 24EC C820  46         mov   @tmp007,@mcloop       ; Setup copy command
     24EE 24F6     
     24F0 8320     
0035 24F2 0460  24         b     @mcloop               ; Read data from VDP
     24F4 8320     
0036 24F6 DD5F     tmp007  data  >dd5f                 ; MOVB *R15,*TMP+
                   < runlib.asm
0105               
0107                       copy  "copy_cpu_cpu.asm"         ; CPU to CPU copy functions
     **** ****     > copy_cpu_cpu.asm
0001               * FILE......: copy_cpu_cpu.asm
0002               * Purpose...: CPU to CPU memory copy support module
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                       CPU COPY FUNCTIONS
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * CPYM2M - Copy CPU memory to CPU memory
0010               ***************************************************************
0011               *  BL   @CPYM2M
0012               *  DATA P0,P1,P2
0013               *--------------------------------------------------------------
0014               *  P0 = Memory source address
0015               *  P1 = Memory target address
0016               *  P2 = Number of bytes to copy
0017               *--------------------------------------------------------------
0018               *  BL @XPYM2M
0019               *
0020               *  TMP0 = Memory source address
0021               *  TMP1 = Memory target address
0022               *  TMP2 = Number of bytes to copy
0023               ********|*****|*********************|**************************
0024 24F8 C13B  30 cpym2m  mov   *r11+,tmp0            ; Memory source address
0025 24FA C17B  30         mov   *r11+,tmp1            ; Memory target address
0026 24FC C1BB  30         mov   *r11+,tmp2            ; Number of bytes to copy
0027               *--------------------------------------------------------------
0028               * Do some checks first
0029               *--------------------------------------------------------------
0030 24FE C186  18 xpym2m  mov   tmp2,tmp2             ; Bytes to copy = 0 ?
0031 2500 1604  14         jne   cpychk                ; No, continue checking
0032               
0033 2502 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2504 FFCE     
0034 2506 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2508 2026     
0035               *--------------------------------------------------------------
0036               *    Check: 1 byte copy
0037               *--------------------------------------------------------------
0038 250A 0286  22 cpychk  ci    tmp2,1                ; Bytes to copy = 1 ?
     250C 0001     
0039 250E 1603  14         jne   cpym0                 ; No, continue checking
0040 2510 DD74  42         movb  *tmp0+,*tmp1+         ; Copy byte
0041 2512 04C6  14         clr   tmp2                  ; Reset counter
0042 2514 045B  20         b     *r11                  ; Return to caller
0043               *--------------------------------------------------------------
0044               *    Check: Uneven address handling
0045               *--------------------------------------------------------------
0046 2516 0242  22 cpym0   andi  config,>7fff          ; Clear CONFIG bit 0
     2518 7FFF     
0047 251A C1C4  18         mov   tmp0,tmp3
0048 251C 0247  22         andi  tmp3,1
     251E 0001     
0049 2520 1618  14         jne   cpyodd                ; Odd source address handling
0050 2522 C1C5  18 cpym1   mov   tmp1,tmp3
0051 2524 0247  22         andi  tmp3,1
     2526 0001     
0052 2528 1614  14         jne   cpyodd                ; Odd target address handling
0053               *--------------------------------------------------------------
0054               * 8 bit copy
0055               *--------------------------------------------------------------
0056 252A 20A0  32 cpym2   coc   @wbit0,config         ; CONFIG bit 0 set ?
     252C 2020     
0057 252E 1605  14         jne   cpym3
0058 2530 C820  46         mov   @tmp011,@mcloop       ; Setup byte copy command
     2532 2558     
     2534 8320     
0059 2536 0460  24         b     @mcloop               ; Copy memory and exit
     2538 8320     
0060               *--------------------------------------------------------------
0061               * 16 bit copy
0062               *--------------------------------------------------------------
0063 253A C1C6  18 cpym3   mov   tmp2,tmp3
0064 253C 0247  22         andi  tmp3,1                ; TMP3=1 -> ODD else EVEN
     253E 0001     
0065 2540 1301  14         jeq   cpym4
0066 2542 0606  14         dec   tmp2                  ; Make TMP2 even
0067 2544 CD74  46 cpym4   mov   *tmp0+,*tmp1+
0068 2546 0646  14         dect  tmp2
0069 2548 16FD  14         jne   cpym4
0070               *--------------------------------------------------------------
0071               * Copy last byte if ODD
0072               *--------------------------------------------------------------
0073 254A C1C7  18         mov   tmp3,tmp3
0074 254C 1301  14         jeq   cpymz
0075 254E D554  38         movb  *tmp0,*tmp1
0076 2550 045B  20 cpymz   b     *r11                  ; Return to caller
0077               *--------------------------------------------------------------
0078               * Handle odd source/target address
0079               *--------------------------------------------------------------
0080 2552 0262  22 cpyodd  ori   config,>8000          ; Set CONFIG bit 0
     2554 8000     
0081 2556 10E9  14         jmp   cpym2
0082 2558 DD74     tmp011  data  >dd74                 ; MOVB *TMP0+,*TMP1+
                   < runlib.asm
0109               
0113               
0117               
0119                       copy  "cpu_sams.asm"             ; Support for SAMS memory card
     **** ****     > cpu_sams.asm
0001               * FILE......: cpu_sams.asm
0002               * Purpose...: Low level support for SAMS memory expansion card
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                SAMS Memory Expansion support
0006               *//////////////////////////////////////////////////////////////
0007               
0008               *--------------------------------------------------------------
0009               * ACCESS and MAPPING
0010               * (by the late Bruce Harisson):
0011               *
0012               * To use other than the default setup, you have to do two
0013               * things:
0014               *
0015               * 1. You have to "turn on" the card's memory in the
0016               *    >4000 block and write to the mapping registers there.
0017               *    (bl  @sams.page.set)
0018               *
0019               * 2. You have to "turn on" the mapper function to make what
0020               *    you've written into the >4000 block take effect.
0021               *    (bl  @sams.mapping.on)
0022               *--------------------------------------------------------------
0023               *  SAMS                          Default SAMS page
0024               *  Register     Memory bank      (system startup)
0025               *  =======      ===========      ================
0026               *  >4004        >2000-2fff          >002
0027               *  >4006        >3000-4fff          >003
0028               *  >4014        >a000-afff          >00a
0029               *  >4016        >b000-bfff          >00b
0030               *  >4018        >c000-cfff          >00c
0031               *  >401a        >d000-dfff          >00d
0032               *  >401c        >e000-efff          >00e
0033               *  >401e        >f000-ffff          >00f
0034               *  Others       Inactive
0035               *--------------------------------------------------------------
0036               
0037               
0038               
0039               
0040               ***************************************************************
0041               * sams.page.get - Get SAMS page number for memory address
0042               ***************************************************************
0043               * bl   @sams.page.get
0044               *      data P0
0045               *--------------------------------------------------------------
0046               * P0 = Memory address (e.g. address >a100 will map to SAMS
0047               *      register >4014 (bank >a000 - >afff)
0048               *--------------------------------------------------------------
0049               * bl   @xsams.page.get
0050               *
0051               * tmp0 = Memory address (e.g. address >a100 will map to SAMS
0052               *        register >4014 (bank >a000 - >afff)
0053               *--------------------------------------------------------------
0054               * OUTPUT
0055               * waux1 = SAMS page number
0056               * waux2 = Address of affected SAMS register
0057               *--------------------------------------------------------------
0058               * Register usage
0059               * r0, tmp0, r12
0060               ********|*****|*********************|**************************
0061               sams.page.get:
0062 255A C13B  30         mov   *r11+,tmp0            ; Memory address
0063               xsams.page.get:
0064 255C 0649  14         dect  stack
0065 255E C64B  30         mov   r11,*stack            ; Push return address
0066 2560 0649  14         dect  stack
0067 2562 C640  30         mov   r0,*stack             ; Push r0
0068 2564 0649  14         dect  stack
0069 2566 C64C  30         mov   r12,*stack            ; Push r12
0070               *--------------------------------------------------------------
0071               * Determine memory bank
0072               *--------------------------------------------------------------
0073 2568 09C4  40         srl   tmp0,12               ; Reduce address to 4K chunks
0074 256A 0A14  18         sla   tmp0,1                ; Registers are 2 bytes appart
0075               
0076 256C 0224  22         ai    tmp0,>4000            ; Add base address of "DSR" space
     256E 4000     
0077 2570 C804  30         mov   tmp0,@waux2           ; Save address of SAMS register
     2572 833E     
0078               *--------------------------------------------------------------
0079               * Get SAMS page number
0080               *--------------------------------------------------------------
0081 2574 020C  20         li    r12,>1e00             ; SAMS CRU address
     2576 1E00     
0082 2578 04C0  14         clr   r0
0083 257A 1D00  16         sbo   0                     ; Enable access to SAMS registers
0084 257C D014  26         movb  *tmp0,r0              ; Get SAMS page number
0085 257E D100  18         movb  r0,tmp0
0086 2580 0984  32         srl   tmp0,8                ; Right align
0087 2582 C804  30         mov   tmp0,@waux1           ; Save SAMS page number
     2584 833C     
0088 2586 1E00  16         sbz   0                     ; Disable access to SAMS registers
0089               *--------------------------------------------------------------
0090               * Exit
0091               *--------------------------------------------------------------
0092               sams.page.get.exit:
0093 2588 C339  30         mov   *stack+,r12           ; Pop r12
0094 258A C039  30         mov   *stack+,r0            ; Pop r0
0095 258C C2F9  30         mov   *stack+,r11           ; Pop return address
0096 258E 045B  20         b     *r11                  ; Return to caller
0097               
0098               
0099               
0100               
0101               ***************************************************************
0102               * sams.page.set - Set SAMS memory page
0103               ***************************************************************
0104               * bl   sams.page.set
0105               *      data P0,P1
0106               *--------------------------------------------------------------
0107               * P0 = SAMS page number
0108               * P1 = Memory address (e.g. address >a100 will map to SAMS
0109               *      register >4014 (bank >a000 - >afff)
0110               *--------------------------------------------------------------
0111               * bl   @xsams.page.set
0112               *
0113               * tmp0 = SAMS page number
0114               * tmp1 = Memory address (e.g. address >a100 will map to SAMS
0115               *        register >4014 (bank >a000 - >afff)
0116               *--------------------------------------------------------------
0117               * Register usage
0118               * r0, tmp0, tmp1, r12
0119               *--------------------------------------------------------------
0120               * SAMS page number should be in range 0-255 (>00 to >ff)
0121               *
0122               *  Page         Memory
0123               *  ====         ======
0124               *  >00             32K
0125               *  >1f            128K
0126               *  >3f            256K
0127               *  >7f            512K
0128               *  >ff           1024K
0129               ********|*****|*********************|**************************
0130               sams.page.set:
0131 2590 C13B  30         mov   *r11+,tmp0            ; Get SAMS page
0132 2592 C17B  30         mov   *r11+,tmp1            ; Get memory address
0133               xsams.page.set:
0134 2594 0649  14         dect  stack
0135 2596 C64B  30         mov   r11,*stack            ; Push return address
0136 2598 0649  14         dect  stack
0137 259A C640  30         mov   r0,*stack             ; Push r0
0138 259C 0649  14         dect  stack
0139 259E C64C  30         mov   r12,*stack            ; Push r12
0140 25A0 0649  14         dect  stack
0141 25A2 C644  30         mov   tmp0,*stack           ; Push tmp0
0142 25A4 0649  14         dect  stack
0143 25A6 C645  30         mov   tmp1,*stack           ; Push tmp1
0144               *--------------------------------------------------------------
0145               * Determine memory bank
0146               *--------------------------------------------------------------
0147 25A8 09C5  40         srl   tmp1,12               ; Reduce address to 4K chunks
0148 25AA 0A15  18         sla   tmp1,1                ; Registers are 2 bytes appart
0149               *--------------------------------------------------------------
0150               * Assert on SAMS page number
0151               *--------------------------------------------------------------
0152 25AC 0284  22         ci    tmp0,255              ; Crash if page > 255
     25AE 00FF     
0153 25B0 150D  14         jgt   !
0154               *--------------------------------------------------------------
0155               * Assert on SAMS register
0156               *--------------------------------------------------------------
0157 25B2 0285  22         ci    tmp1,>1e              ; r@401e   >f000 - >ffff
     25B4 001E     
0158 25B6 150A  14         jgt   !
0159 25B8 0285  22         ci    tmp1,>04              ; r@4004   >2000 - >2fff
     25BA 0004     
0160 25BC 1107  14         jlt   !
0161 25BE 0285  22         ci    tmp1,>12              ; r@4014   >a000 - >ffff
     25C0 0012     
0162 25C2 1508  14         jgt   sams.page.set.switch_page
0163 25C4 0285  22         ci    tmp1,>06              ; r@4006   >3000 - >3fff
     25C6 0006     
0164 25C8 1501  14         jgt   !
0165 25CA 1004  14         jmp   sams.page.set.switch_page
0166                       ;------------------------------------------------------
0167                       ; Crash the system
0168                       ;------------------------------------------------------
0169 25CC C80B  38 !       mov   r11,@>ffce            ; \ Save caller address
     25CE FFCE     
0170 25D0 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     25D2 2026     
0171               *--------------------------------------------------------------
0172               * Switch memory bank to specified SAMS page
0173               *--------------------------------------------------------------
0174               sams.page.set.switch_page
0175 25D4 020C  20         li    r12,>1e00             ; SAMS CRU address
     25D6 1E00     
0176 25D8 C004  18         mov   tmp0,r0               ; Must be in r0 for CRU use
0177 25DA 06C0  14         swpb  r0                    ; LSB to MSB
0178 25DC 1D00  16         sbo   0                     ; Enable access to SAMS registers
0179 25DE D940  38         movb  r0,@>4000(tmp1)       ; Set SAMS bank number
     25E0 4000     
0180 25E2 1E00  16         sbz   0                     ; Disable access to SAMS registers
0181               *--------------------------------------------------------------
0182               * Exit
0183               *--------------------------------------------------------------
0184               sams.page.set.exit:
0185 25E4 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0186 25E6 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0187 25E8 C339  30         mov   *stack+,r12           ; Pop r12
0188 25EA C039  30         mov   *stack+,r0            ; Pop r0
0189 25EC C2F9  30         mov   *stack+,r11           ; Pop return address
0190 25EE 045B  20         b     *r11                  ; Return to caller
0191               
0192               
0193               
0194               
0195               ***************************************************************
0196               * sams.mapping.on - Enable SAMS mapping mode
0197               ***************************************************************
0198               *  bl   @sams.mapping.on
0199               *--------------------------------------------------------------
0200               *  Register usage
0201               *  r12
0202               ********|*****|*********************|**************************
0203               sams.mapping.on:
0204 25F0 0649  14         dect  stack
0205 25F2 C64C  30         mov   r12,*stack            ; Push r12
0206 25F4 020C  20         li    r12,>1e00             ; SAMS CRU address
     25F6 1E00     
0207 25F8 1D01  16         sbo   1                     ; Enable SAMS mapper
0208               *--------------------------------------------------------------
0209               * Exit
0210               *--------------------------------------------------------------
0211               sams.mapping.on.exit:
0212 25FA C339  30         mov   *stack+,r12           ; Pop r12
0213 25FC 045B  20         b     *r11                  ; Return to caller
0214               
0215               
0216               
0217               
0218               ***************************************************************
0219               * sams.mapping.off - Disable SAMS mapping mode
0220               ***************************************************************
0221               * bl  @sams.mapping.off
0222               *--------------------------------------------------------------
0223               * OUTPUT
0224               * none
0225               *--------------------------------------------------------------
0226               * Register usage
0227               * r12
0228               ********|*****|*********************|**************************
0229               sams.mapping.off:
0230 25FE 0649  14         dect  stack
0231 2600 C64C  30         mov   r12,*stack            ; Push r12
0232 2602 020C  20         li    r12,>1e00             ; SAMS CRU address
     2604 1E00     
0233 2606 1E01  16         sbz   1                     ; Disable SAMS mapper
0234               *--------------------------------------------------------------
0235               * Exit
0236               *--------------------------------------------------------------
0237               sams.mapping.off.exit:
0238 2608 C339  30         mov   *stack+,r12           ; Pop r12
0239 260A 045B  20         b     *r11                  ; Return to caller
0240               
0241               
0242               
0243               
0244               
0245               ***************************************************************
0246               * sams.layout
0247               * Setup SAMS memory banks
0248               ***************************************************************
0249               * bl  @sams.layout
0250               *     data P0
0251               *--------------------------------------------------------------
0252               * INPUT
0253               * P0 = Pointer to SAMS page layout table
0254               *--------------------------------------------------------------
0255               * bl  @xsams.layout
0256               *
0257               * tmp0 = Pointer to SAMS page layout table
0258               *--------------------------------------------------------------
0259               * OUTPUT
0260               * none
0261               *--------------------------------------------------------------
0262               * Register usage
0263               * tmp0, r12
0264               ********|*****|*********************|**************************
0265               sams.layout:
0266 260C C13B  30         mov   *r11+,tmp0            ; Get P0
0267               xsams.layout:
0268 260E 0649  14         dect  stack
0269 2610 C64B  30         mov   r11,*stack            ; Save return address
0270 2612 0649  14         dect  stack
0271 2614 C644  30         mov   tmp0,*stack           ; Save tmp0
0272 2616 0649  14         dect  stack
0273 2618 C64C  30         mov   r12,*stack            ; Save r12
0274                       ;------------------------------------------------------
0275                       ; Set SAMS registers
0276                       ;------------------------------------------------------
0277 261A 020C  20         li    r12,>1e00             ; SAMS CRU address
     261C 1E00     
0278 261E 1D00  16         sbo   0                     ; Enable access to SAMS registers
0279               
0280 2620 C834  50         mov  *tmp0+,@>4004          ; Set page for >2000 - >2fff
     2622 4004     
0281 2624 C834  50         mov  *tmp0+,@>4006          ; Set page for >3000 - >3fff
     2626 4006     
0282 2628 C834  50         mov  *tmp0+,@>4014          ; Set page for >a000 - >afff
     262A 4014     
0283 262C C834  50         mov  *tmp0+,@>4016          ; Set page for >b000 - >bfff
     262E 4016     
0284 2630 C834  50         mov  *tmp0+,@>4018          ; Set page for >c000 - >cfff
     2632 4018     
0285 2634 C834  50         mov  *tmp0+,@>401a          ; Set page for >d000 - >dfff
     2636 401A     
0286 2638 C834  50         mov  *tmp0+,@>401c          ; Set page for >e000 - >efff
     263A 401C     
0287 263C C834  50         mov  *tmp0+,@>401e          ; Set page for >f000 - >ffff
     263E 401E     
0288               
0289 2640 1E00  16         sbz   0                     ; Disable access to SAMS registers
0290 2642 1D01  16         sbo   1                     ; Enable SAMS mapper
0291                       ;------------------------------------------------------
0292                       ; Exit
0293                       ;------------------------------------------------------
0294               sams.layout.exit:
0295 2644 C339  30         mov   *stack+,r12           ; Pop r12
0296 2646 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0297 2648 C2F9  30         mov   *stack+,r11           ; Pop r11
0298 264A 045B  20         b     *r11                  ; Return to caller
0299               ***************************************************************
0300               * SAMS standard page layout table
0301               *--------------------------------------------------------------
0302               sams.layout.standard:
0303 264C 0200             data  >0200                 ; >2000-2fff, SAMS page >02
0304 264E 0300             data  >0300                 ; >3000-3fff, SAMS page >03
0305 2650 0A00             data  >0a00                 ; >a000-afff, SAMS page >0a
0306 2652 0B00             data  >0b00                 ; >b000-bfff, SAMS page >0b
0307 2654 0C00             data  >0c00                 ; >c000-cfff, SAMS page >0c
0308 2656 0D00             data  >0d00                 ; >d000-dfff, SAMS page >0d
0309 2658 0E00             data  >0e00                 ; >e000-efff, SAMS page >0e
0310 265A 0F00             data  >0f00                 ; >f000-ffff, SAMS page >0f
0311               
0312               
0313               ***************************************************************
0314               * sams.layout.copy
0315               * Copy SAMS memory layout
0316               ***************************************************************
0317               * bl  @sams.layout.copy
0318               *     data P0
0319               *--------------------------------------------------------------
0320               * P0 = Pointer to 8 words RAM buffer for results
0321               *--------------------------------------------------------------
0322               * OUTPUT
0323               * RAM buffer will have the SAMS page number for each range
0324               * 2000-2fff, 3000-3fff, a000-afff, b000-bfff, ...
0325               *--------------------------------------------------------------
0326               * Register usage
0327               * tmp0, tmp1, tmp2, tmp3
0328               ********|*****|*********************|**************************
0329               sams.layout.copy:
0330 265C C1FB  30         mov   *r11+,tmp3            ; Get P0
0331               
0332 265E 0649  14         dect  stack
0333 2660 C64B  30         mov   r11,*stack            ; Push return address
0334 2662 0649  14         dect  stack
0335 2664 C644  30         mov   tmp0,*stack           ; Push tmp0
0336 2666 0649  14         dect  stack
0337 2668 C645  30         mov   tmp1,*stack           ; Push tmp1
0338 266A 0649  14         dect  stack
0339 266C C646  30         mov   tmp2,*stack           ; Push tmp2
0340 266E 0649  14         dect  stack
0341 2670 C647  30         mov   tmp3,*stack           ; Push tmp3
0342                       ;------------------------------------------------------
0343                       ; Copy SAMS layout
0344                       ;------------------------------------------------------
0345 2672 0205  20         li    tmp1,sams.layout.copy.data
     2674 2694     
0346 2676 0206  20         li    tmp2,8                ; Set loop counter
     2678 0008     
0347                       ;------------------------------------------------------
0348                       ; Set SAMS memory pages
0349                       ;------------------------------------------------------
0350               sams.layout.copy.loop:
0351 267A C135  30         mov   *tmp1+,tmp0           ; Get memory address
0352 267C 06A0  32         bl    @xsams.page.get       ; \ Get SAMS page
     267E 255C     
0353                                                   ; | i  tmp0   = Memory address
0354                                                   ; / o  @waux1 = SAMS page
0355               
0356 2680 CDE0  46         mov   @waux1,*tmp3+         ; Copy SAMS page number
     2682 833C     
0357               
0358 2684 0606  14         dec   tmp2                  ; Next iteration
0359 2686 16F9  14         jne   sams.layout.copy.loop ; Loop until done
0360                       ;------------------------------------------------------
0361                       ; Exit
0362                       ;------------------------------------------------------
0363               sams.layout.copy.exit:
0364 2688 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0365 268A C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0366 268C C179  30         mov   *stack+,tmp1          ; Pop tmp1
0367 268E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0368 2690 C2F9  30         mov   *stack+,r11           ; Pop r11
0369 2692 045B  20         b     *r11                  ; Return to caller
0370               ***************************************************************
0371               * SAMS memory range table
0372               *--------------------------------------------------------------
0373               sams.layout.copy.data:
0374 2694 2000             data  >2000                 ; >2000-2fff
0375 2696 3000             data  >3000                 ; >3000-3fff
0376 2698 A000             data  >a000                 ; >a000-afff
0377 269A B000             data  >b000                 ; >b000-bfff
0378 269C C000             data  >c000                 ; >c000-cfff
0379 269E D000             data  >d000                 ; >d000-dfff
0380 26A0 E000             data  >e000                 ; >e000-efff
0381 26A2 F000             data  >f000                 ; >f000-ffff
                   < runlib.asm
0121               
0125               
0129               
0131                       copy  "vdp_intscr.asm"           ; VDP interrupt & screen on/off
     **** ****     > vdp_intscr.asm
0001               * FILE......: vdp_intscr.asm
0002               * Purpose...: VDP interrupt & screen on/off
0003               
0004               ***************************************************************
0005               * SCROFF - Disable screen display
0006               ***************************************************************
0007               *  BL @SCROFF
0008               ********|*****|*********************|**************************
0009 26A4 024E  22 scroff  andi  r14,>ffbf             ; VDP#R1 bit 1=0 (Disable screen display)
     26A6 FFBF     
0010 26A8 0460  28         b     @putv01
     26AA 2346     
0011               
0012               ***************************************************************
0013               * SCRON - Disable screen display
0014               ***************************************************************
0015               *  BL @SCRON
0016               ********|*****|*********************|**************************
0017 26AC 026E  22 scron   ori   r14,>0040             ; VDP#R1 bit 1=1 (Enable screen display)
     26AE 0040     
0018 26B0 0460  28         b     @putv01
     26B2 2346     
0019               
0020               ***************************************************************
0021               * INTOFF - Disable VDP interrupt
0022               ***************************************************************
0023               *  BL @INTOFF
0024               ********|*****|*********************|**************************
0025 26B4 024E  22 intoff  andi  r14,>ffdf             ; VDP#R1 bit 2=0 (Disable VDP interrupt)
     26B6 FFDF     
0026 26B8 0460  28         b     @putv01
     26BA 2346     
0027               
0028               ***************************************************************
0029               * INTON - Enable VDP interrupt
0030               ***************************************************************
0031               *  BL @INTON
0032               ********|*****|*********************|**************************
0033 26BC 026E  22 inton   ori   r14,>0020             ; VDP#R1 bit 2=1 (Enable VDP interrupt)
     26BE 0020     
0034 26C0 0460  28         b     @putv01
     26C2 2346     
                   < runlib.asm
0133               
0135                       copy  "vdp_sprites.asm"          ; VDP sprites
     **** ****     > vdp_sprites.asm
0001               ***************************************************************
0002               * FILE......: vdp_sprites.asm
0003               * Purpose...: Sprites support
0004               
0005               ***************************************************************
0006               * SMAG1X - Set sprite magnification 1x
0007               ***************************************************************
0008               *  BL @SMAG1X
0009               ********|*****|*********************|**************************
0010 26C4 024E  22 smag1x  andi  r14,>fffe             ; VDP#R1 bit 7=0 (Sprite magnification 1x)
     26C6 FFFE     
0011 26C8 0460  28         b     @putv01
     26CA 2346     
0012               
0013               ***************************************************************
0014               * SMAG2X - Set sprite magnification 2x
0015               ***************************************************************
0016               *  BL @SMAG2X
0017               ********|*****|*********************|**************************
0018 26CC 026E  22 smag2x  ori   r14,>0001             ; VDP#R1 bit 7=1 (Sprite magnification 2x)
     26CE 0001     
0019 26D0 0460  28         b     @putv01
     26D2 2346     
0020               
0021               ***************************************************************
0022               * S8X8 - Set sprite size 8x8 bits
0023               ***************************************************************
0024               *  BL @S8X8
0025               ********|*****|*********************|**************************
0026 26D4 024E  22 s8x8    andi  r14,>fffd             ; VDP#R1 bit 6=0 (Sprite size 8x8)
     26D6 FFFD     
0027 26D8 0460  28         b     @putv01
     26DA 2346     
0028               
0029               ***************************************************************
0030               * S16X16 - Set sprite size 16x16 bits
0031               ***************************************************************
0032               *  BL @S16X16
0033               ********|*****|*********************|**************************
0034 26DC 026E  22 s16x16  ori   r14,>0002             ; VDP#R1 bit 6=1 (Sprite size 16x16)
     26DE 0002     
0035 26E0 0460  28         b     @putv01
     26E2 2346     
                   < runlib.asm
0137               
0139                       copy  "vdp_cursor.asm"           ; VDP cursor handling
     **** ****     > vdp_cursor.asm
0001               * FILE......: vdp_cursor.asm
0002               * Purpose...: VDP cursor handling
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *               VDP cursor movement functions
0006               *//////////////////////////////////////////////////////////////
0007               
0008               
0009               ***************************************************************
0010               * AT - Set cursor YX position
0011               ***************************************************************
0012               *  bl   @yx
0013               *  data p0
0014               *--------------------------------------------------------------
0015               *  INPUT
0016               *  P0 = New Cursor YX position
0017               ********|*****|*********************|**************************
0018 26E4 C83B  42 at      mov   *r11+,@wyx
     26E6 832A     
0019 26E8 045B  20         b     *r11
0020               
0021               
0022               ***************************************************************
0023               * down - Increase cursor Y position
0024               ***************************************************************
0025               *  bl   @down
0026               ********|*****|*********************|**************************
0027 26EA B820  46 down    ab    @hb$01,@wyx
     26EC 2012     
     26EE 832A     
0028 26F0 045B  20         b     *r11
0029               
0030               
0031               ***************************************************************
0032               * up - Decrease cursor Y position
0033               ***************************************************************
0034               *  bl   @up
0035               ********|*****|*********************|**************************
0036 26F2 7820  46 up      sb    @hb$01,@wyx
     26F4 2012     
     26F6 832A     
0037 26F8 045B  20         b     *r11
0038               
0039               
0040               ***************************************************************
0041               * setx - Set cursor X position
0042               ***************************************************************
0043               *  bl   @setx
0044               *  data p0
0045               *--------------------------------------------------------------
0046               *  Register usage
0047               *  TMP0
0048               ********|*****|*********************|**************************
0049 26FA C13B  30 setx    mov   *r11+,tmp0            ; Set cursor X position
0050 26FC D120  30 xsetx   movb  @wyx,tmp0             ; Overwrite Y position
     26FE 832A     
0051 2700 C804  30         mov   tmp0,@wyx             ; Save as new YX position
     2702 832A     
0052 2704 045B  20         b     *r11
                   < runlib.asm
0141               
0143                       copy  "vdp_yx2px_calc.asm"       ; VDP calculate pixel pos for YX coord
     **** ****     > vdp_yx2px_calc.asm
0001               * FILE......: vdp_yx2px_calc.asm
0002               * Purpose...: Calculate pixel position for YX coordinate
0003               
0004               ***************************************************************
0005               * YX2PX - Get pixel position for cursor YX position
0006               ***************************************************************
0007               *  BL   @YX2PX
0008               *
0009               *  (CONFIG:0 = 1) = Skip sprite adjustment
0010               *--------------------------------------------------------------
0011               *  INPUT
0012               *  @WYX   = Cursor YX position
0013               *--------------------------------------------------------------
0014               *  OUTPUT
0015               *  TMP0HB = Y pixel position
0016               *  TMP0LB = X pixel position
0017               *--------------------------------------------------------------
0018               *  Remarks
0019               *  This subroutine does not support multicolor mode
0020               ********|*****|*********************|**************************
0021 2706 C120  30 yx2px   mov   @wyx,tmp0
     2708 832A     
0022 270A C18B  18 yx2pxx  mov   r11,tmp2              ; Save return address
0023 270C 06C4  14         swpb  tmp0                  ; Y<->X
0024 270E 04C5  14         clr   tmp1                  ; Clear before copy
0025 2710 D144  18         movb  tmp0,tmp1             ; Copy X to TMP1
0026               *--------------------------------------------------------------
0027               * X pixel - Special F18a 80 colums treatment
0028               *--------------------------------------------------------------
0029 2712 20A0  32         coc   @wbit1,config         ; f18a present ?
     2714 201E     
0030 2716 1609  14         jne   yx2pxx_normal         ; No, skip 80 cols handling
0031 2718 8820  46         c     @wcolmn,@yx2pxx_c80   ; 80 columns mode enabled ?
     271A 833A     
     271C 2746     
0032 271E 1605  14         jne   yx2pxx_normal         ; No, skip 80 cols handling
0033               
0034 2720 0A15  18         sla   tmp1,1                ; X = X * 2
0035 2722 B144  18         ab    tmp0,tmp1             ; X = X + (original X)
0036 2724 0225  22         ai    tmp1,>0500            ; X = X + 5 (F18a mystery offset)
     2726 0500     
0037 2728 1002  14         jmp   yx2pxx_y_calc
0038               *--------------------------------------------------------------
0039               * X pixel - Normal VDP treatment
0040               *--------------------------------------------------------------
0041               yx2pxx_normal:
0042 272A D144  18         movb  tmp0,tmp1             ; Copy X to TMP1
0043               *--------------------------------------------------------------
0044 272C 0A35  22         sla   tmp1,3                ; X=X*8
0045               *--------------------------------------------------------------
0046               * Calculate Y pixel position
0047               *--------------------------------------------------------------
0048               yx2pxx_y_calc:
0049 272E 0A34  22         sla   tmp0,3                ; Y=Y*8
0050 2730 D105  18         movb  tmp1,tmp0
0051 2732 06C4  14         swpb  tmp0                  ; X<->Y
0052 2734 20A0  32 yx2pi1  coc   @wbit0,config         ; Skip sprite adjustment ?
     2736 2020     
0053 2738 1305  14         jeq   yx2pi3                ; Yes, exit
0054               *--------------------------------------------------------------
0055               * Adjust for Y sprite location
0056               * See VDP Programmers Guide, Section 9.2.1
0057               *--------------------------------------------------------------
0058 273A 7120  34 yx2pi2  sb    @hb$01,tmp0           ; Adjust Y. Top of screen is at >FF
     273C 2012     
0059 273E 9120  34         cb    @hb$d0,tmp0           ; Y position = >D0 ?
     2740 2024     
0060 2742 13FB  14         jeq   yx2pi2                ; Yes, but that's not allowed, adjust
0061 2744 0456  20 yx2pi3  b     *tmp2                 ; Exit
0062               *--------------------------------------------------------------
0063               * Local constants
0064               *--------------------------------------------------------------
0065               yx2pxx_c80:
0066 2746 0050            data   80
0067               
0068               
                   < runlib.asm
0145               
0149               
0153               
0155                       copy  "vdp_f18a.asm"             ; VDP F18a low-level functions
     **** ****     > vdp_f18a.asm
0001               * FILE......: vdp_f18a.asm
0002               * Purpose...: VDP F18A Support module
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                 VDP F18A LOW-LEVEL FUNCTIONS
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * f18unl - Unlock F18A VDP
0010               ***************************************************************
0011               *  bl   @f18unl
0012               ********|*****|*********************|**************************
0013 2748 C20B  18 f18unl  mov   r11,tmp4              ; Save R11
0014 274A 06A0  32         bl    @putvr                ; Write once
     274C 2332     
0015 274E 391C             data  >391c                 ; VR1/57, value 00011100
0016 2750 06A0  32         bl    @putvr                ; Write twice
     2752 2332     
0017 2754 391C             data  >391c                 ; VR1/57, value 00011100
0018 2756 06A0  32         bl    @putvr
     2758 2332     
0019 275A 01E0             data  >01e0                 ; VR1, value 11100000, a sane setting
0020 275C 0458  20         b     *tmp4                 ; Exit
0021               
0022               
0023               ***************************************************************
0024               * f18lck - Lock F18A VDP
0025               ***************************************************************
0026               *  bl   @f18lck
0027               ********|*****|*********************|**************************
0028 275E C20B  18 f18lck  mov   r11,tmp4              ; Save R11
0029 2760 06A0  32         bl    @putvr                ; VR1/57, value 00000000
     2762 2332     
0030 2764 3900             data  >3900
0031 2766 0458  20         b     *tmp4                 ; Exit
0032               
0033               
0034               ***************************************************************
0035               * f18idl - Put GPU in F18A VDP in idle mode (stop GPU program)
0036               ***************************************************************
0037               *  bl   @f18idl
0038               *--------------------------------------------------------------
0039               *  REMARKS
0040               *  Expects that the f18a is unlocked when calling this function.
0041               ********|*****|*********************|**************************
0042 2768 C20B  18 f18idl  mov   r11,tmp4              ; Save R11
0043 276A 06A0  32         bl    @putvr                ; VR56 >38, value 00000000
     276C 2332     
0044 276E 3800             data  >3800                 ; Reset and load PC (GPU idle!)
0045 2770 0458  20         b     *tmp4                 ; Exit
0046               
0047               
0048               
0049               ***************************************************************
0050               * f18chk - Check if F18A VDP present
0051               ***************************************************************
0052               *  bl   @f18chk
0053               *--------------------------------------------------------------
0054               *  REMARKS
0055               *  Expects that the f18a is unlocked when calling this function.
0056               *  Runs GPU code at VDP >3f00
0057               ********|*****|*********************|**************************
0058 2772 C20B  18 f18chk  mov   r11,tmp4              ; Save R11
0059 2774 06A0  32         bl    @cpym2v
     2776 24A4     
0060 2778 3F00             data  >3f00,f18chk_gpu,8    ; Copy F18A GPU code to VRAM
     277A 27BC     
     277C 0008     
0061 277E 06A0  32         bl    @putvr
     2780 2332     
0062 2782 363F             data  >363f                 ; Load MSB of GPU PC (>3f) into VR54 (>36)
0063 2784 06A0  32         bl    @putvr
     2786 2332     
0064 2788 3700             data  >3700                 ; Load LSB of GPU PC (>00) into VR55 (>37)
0065                                                   ; GPU code should run now
0066               
0067 278A 06A0  32         bl    @putvr                ; VR56 >38, value 00000000
     278C 2332     
0068 278E 3800             data  >3800                 ; Reset and load PC (GPU idle!)
0069               ***************************************************************
0070               * VDP @>3f00 == 0 ? F18A present : F18a not present
0071               ***************************************************************
0072 2790 0204  20         li    tmp0,>3f00
     2792 3F00     
0073 2794 06A0  32         bl    @vdra                 ; Set VDP read address to >3f00
     2796 22BA     
0074 2798 D120  30         movb  @vdpr,tmp0            ; Read MSB byte
     279A 8800     
0075 279C 0984  32         srl   tmp0,8
0076 279E D120  30         movb  @vdpr,tmp0            ; Read LSB byte
     27A0 8800     
0077 27A2 C104  18         mov   tmp0,tmp0             ; For comparing with 0
0078 27A4 1303  14         jeq   f18chk_yes
0079               f18chk_no:
0080 27A6 0242  22         andi  config,>bfff          ; CONFIG Register bit 1=0
     27A8 BFFF     
0081 27AA 1002  14         jmp   f18chk_exit
0082               f18chk_yes:
0083 27AC 0262  22         ori   config,>4000          ; CONFIG Register bit 1=1
     27AE 4000     
0084               
0085               f18chk_exit:
0086 27B0 06A0  32         bl    @filv                 ; Clear VDP mem >3f00->3f05
     27B2 228E     
0087 27B4 3F00             data  >3f00,>00,6
     27B6 0000     
     27B8 0006     
0088 27BA 0458  20         b     *tmp4                 ; Exit
0089               ***************************************************************
0090               * GPU code
0091               ********|*****|*********************|**************************
0092               f18chk_gpu
0093 27BC 04E0             data  >04e0                 ; 3f00 \ 04e0  clr @>3f00
0094 27BE 3F00             data  >3f00                 ; 3f02 / 3f00
0095 27C0 0340             data  >0340                 ; 3f04   0340  idle
0096 27C2 10FF             data  >10ff                 ; 3f06   10ff  \ jmp $
0097                                                   ;              | Make classic99 debugger
0098                                                   ;              | happy if break on illegal
0099                                                   ;              / opcode is on.
0100               
0101               ***************************************************************
0102               * f18rst - Reset f18a into standard settings
0103               ***************************************************************
0104               *  bl   @f18rst
0105               *--------------------------------------------------------------
0106               *  REMARKS
0107               *  This is used to leave the F18A mode and revert all settings
0108               *  that could lead to corruption when doing BLWP @0
0109               *
0110               *  Is expected to run while the f18a is unlocked.
0111               *
0112               *  There are some F18a settings that stay on when doing blwp @0
0113               *  and the TI title screen cannot recover from that.
0114               *
0115               *  It is your responsibility to set video mode tables should
0116               *  you want to continue instead of doing blwp @0 after your
0117               *  program cleanup
0118               ********|*****|*********************|**************************
0119 27C4 C20B  18 f18rst  mov   r11,tmp4              ; Save R11
0120                       ;------------------------------------------------------
0121                       ; Reset all F18a VDP registers to power-on defaults
0122                       ;------------------------------------------------------
0123 27C6 06A0  32         bl    @putvr
     27C8 2332     
0124 27CA 3280             data  >3280                 ; F18a VR50 (>32), MSB 8=1
0125               
0126 27CC 06A0  32         bl    @putvr                ; VR1/57, value 00000000
     27CE 2332     
0127 27D0 3900             data  >3900                 ; Lock the F18a
0128 27D2 0458  20         b     *tmp4                 ; Exit
0129               
0130               
0131               
0132               ***************************************************************
0133               * f18fwv - Get F18A Firmware Version
0134               ***************************************************************
0135               *  bl   @f18fwv
0136               *--------------------------------------------------------------
0137               *  REMARKS
0138               *  Successfully tested with F18A v1.8, note that this does not
0139               *  work with F18 v1.3 but you shouldn't be using such old F18A
0140               *  firmware to begin with.
0141               *--------------------------------------------------------------
0142               *  TMP0 High nibble = major version
0143               *  TMP0 Low nibble  = minor version
0144               *
0145               *  Example: >0018     F18a Firmware v1.8
0146               ********|*****|*********************|**************************
0147 27D4 C20B  18 f18fwv  mov   r11,tmp4              ; Save R11
0148 27D6 20A0  32         coc   @wbit1,config         ; CONFIG bit 1 set ?
     27D8 201E     
0149 27DA 1609  14         jne   f18fw1
0150               ***************************************************************
0151               * Read F18A major/minor version
0152               ***************************************************************
0153 27DC C120  30         mov   @vdps,tmp0            ; Clear VDP status register
     27DE 8802     
0154 27E0 06A0  32         bl    @putvr                ; Write to VR#15 for setting F18A status
     27E2 2332     
0155 27E4 0F0E             data  >0f0e                 ; register to read (0e=VR#14)
0156 27E6 04C4  14         clr   tmp0
0157 27E8 D120  30         movb  @vdps,tmp0
     27EA 8802     
0158 27EC 0984  32         srl   tmp0,8
0159 27EE 0458  20 f18fw1  b     *tmp4                 ; Exit
                   < runlib.asm
0157               
0159                       copy  "vdp_hchar.asm"            ; VDP hchar functions
     **** ****     > vdp_hchar.asm
0001               * FILE......: vdp_hchar.a99
0002               * Purpose...: VDP hchar module
0003               
0004               ***************************************************************
0005               * Repeat characters horizontally at YX
0006               ***************************************************************
0007               *  BL    @HCHAR
0008               *  DATA  P0,P1
0009               *  ...
0010               *  DATA  EOL                        ; End-of-list
0011               *--------------------------------------------------------------
0012               *  P0HB = Y position
0013               *  P0LB = X position
0014               *  P1HB = Byte to write
0015               *  P1LB = Number of times to repeat
0016               ********|*****|*********************|**************************
0017 27F0 C83B  42 hchar   mov   *r11+,@wyx            ; Set YX position
     27F2 832A     
0018 27F4 D17B  28         movb  *r11+,tmp1
0019 27F6 0985  32 hcharx  srl   tmp1,8                ; Byte to write
0020 27F8 D1BB  28         movb  *r11+,tmp2
0021 27FA 0986  32         srl   tmp2,8                ; Repeat count
0022 27FC C1CB  18         mov   r11,tmp3
0023 27FE 06A0  32         bl    @yx2pnt               ; Get VDP address into TMP0
     2800 23FA     
0024               *--------------------------------------------------------------
0025               *    Draw line
0026               *--------------------------------------------------------------
0027 2802 020B  20         li    r11,hchar1
     2804 280A     
0028 2806 0460  28         b     @xfilv                ; Draw
     2808 2294     
0029               *--------------------------------------------------------------
0030               *    Do housekeeping
0031               *--------------------------------------------------------------
0032 280A 8817  42 hchar1  c     *tmp3,@w$ffff         ; End-Of-List marker found ?
     280C 2022     
0033 280E 1302  14         jeq   hchar2                ; Yes, exit
0034 2810 C2C7  18         mov   tmp3,r11
0035 2812 10EE  14         jmp   hchar                 ; Next one
0036 2814 05C7  14 hchar2  inct  tmp3
0037 2816 0457  20         b     *tmp3                 ; Exit
                   < runlib.asm
0161               
0163                       copy  "vdp_vchar.asm"            ; VDP vchar functions
     **** ****     > vdp_vchar.asm
0001               * FILE......: vdp_vchar.a99
0002               * Purpose...: VDP vchar module
0003               
0004               ***************************************************************
0005               * Repeat characters vertically at YX
0006               ***************************************************************
0007               *  BL    @VCHAR
0008               *  DATA  P0,P1
0009               *  ...
0010               *  DATA  EOL                        ; End-of-list
0011               *--------------------------------------------------------------
0012               *  P0HB = Y position
0013               *  P0LB = X position
0014               *  P1HB = Byte to write
0015               *  P1LB = Number of times to repeat
0016               ********|*****|*********************|**************************
0017 2818 C83B  42 vchar   mov   *r11+,@wyx            ; Set YX position
     281A 832A     
0018 281C C1CB  18         mov   r11,tmp3              ; Save R11 in TMP3
0019 281E C220  30 vchar1  mov   @wcolmn,tmp4          ; Get columns per row
     2820 833A     
0020 2822 06A0  32         bl    @yx2pnt               ; Get VDP address into TMP0
     2824 23FA     
0021 2826 D177  28         movb  *tmp3+,tmp1           ; Byte to write
0022 2828 D1B7  28         movb  *tmp3+,tmp2
0023 282A 0986  32         srl   tmp2,8                ; Repeat count
0024               *--------------------------------------------------------------
0025               *    Setup VDP write address
0026               *--------------------------------------------------------------
0027 282C 06A0  32 vchar2  bl    @vdwa                 ; Setup VDP write address
     282E 22B6     
0028               *--------------------------------------------------------------
0029               *    Dump tile to VDP and do housekeeping
0030               *--------------------------------------------------------------
0031 2830 D7C5  30         movb  tmp1,*r15             ; Dump tile to VDP
0032 2832 A108  18         a     tmp4,tmp0             ; Next row
0033 2834 0606  14         dec   tmp2
0034 2836 16FA  14         jne   vchar2
0035 2838 8817  42         c     *tmp3,@w$ffff         ; End-Of-List marker found ?
     283A 2022     
0036 283C 1303  14         jeq   vchar3                ; Yes, exit
0037 283E C837  42         mov   *tmp3+,@wyx           ; Save YX position
     2840 832A     
0038 2842 10ED  14         jmp   vchar1                ; Next one
0039 2844 05C7  14 vchar3  inct  tmp3
0040 2846 0457  20         b     *tmp3                 ; Exit
0041               
0042               ***************************************************************
0043               * Repeat characters vertically at YX
0044               ***************************************************************
0045               * TMP0 = YX position
0046               * TMP1 = Byte to write
0047               * TMP2 = Repeat count
0048               ***************************************************************
0049 2848 C20B  18 xvchar  mov   r11,tmp4              ; Save return address
0050 284A C804  30         mov   tmp0,@wyx             ; Set cursor position
     284C 832A     
0051 284E 06C5  14         swpb  tmp1                  ; Byte to write into MSB
0052 2850 C1E0  30         mov   @wcolmn,tmp3          ; Get columns per row
     2852 833A     
0053 2854 06A0  32         bl    @yx2pnt               ; Get VDP address into TMP0
     2856 23FA     
0054               *--------------------------------------------------------------
0055               *    Setup VDP write address
0056               *--------------------------------------------------------------
0057 2858 06A0  32 xvcha1  bl    @vdwa                 ; Setup VDP write address
     285A 22B6     
0058               *--------------------------------------------------------------
0059               *    Dump tile to VDP and do housekeeping
0060               *--------------------------------------------------------------
0061 285C D7C5  30         movb  tmp1,*r15             ; Dump tile to VDP
0062 285E A120  30         a     @wcolmn,tmp0          ; Next row
     2860 833A     
0063 2862 0606  14         dec   tmp2
0064 2864 16F9  14         jne   xvcha1
0065 2866 0458  20         b     *tmp4                 ; Exit
                   < runlib.asm
0165               
0169               
0173               
0175                       copy  "snd_player.asm"           ; Sound player
     **** ****     > snd_player.asm
0001               * FILE......: snd_player.asm
0002               * Purpose...: Sound player support code
0003               
0004               
0005               ***************************************************************
0006               * MUTE - Mute all sound generators
0007               ***************************************************************
0008               *  BL  @MUTE
0009               *  Mute sound generators and clear sound pointer
0010               *
0011               *  BL  @MUTE2
0012               *  Mute sound generators without clearing sound pointer
0013               ********|*****|*********************|**************************
0014 2868 04E0  26 mute    clr   @wsdlst               ; Clear sound pointer
     286A 8334     
0015 286C 40A0  34 mute2   szc   @wbit13,config        ; Turn off/pause sound player
     286E 2006     
0016 2870 0204  20         li    tmp0,muttab
     2872 2882     
0017 2874 0205  20         li    tmp1,sound            ; Sound generator port >8400
     2876 8400     
0018 2878 D574  40         movb  *tmp0+,*tmp1          ; Generator 0
0019 287A D574  40         movb  *tmp0+,*tmp1          ; Generator 1
0020 287C D574  40         movb  *tmp0+,*tmp1          ; Generator 2
0021 287E D554  38         movb  *tmp0,*tmp1           ; Generator 3
0022 2880 045B  20         b     *r11
0023 2882 9FBF     muttab  byte  >9f,>bf,>df,>ff       ; Table for muting all generators
     2884 DFFF     
0024               
0025               
0026               ***************************************************************
0027               * SDPREP - Prepare for playing sound
0028               ***************************************************************
0029               *  BL   @SDPREP
0030               *  DATA P0,P1
0031               *
0032               *  P0 = Address where tune is stored
0033               *  P1 = Option flags for sound player
0034               *--------------------------------------------------------------
0035               *  REMARKS
0036               *  Use the below equates for P1:
0037               *
0038               *  SDOPT1 => Tune is in CPU memory + loop
0039               *  SDOPT2 => Tune is in CPU memory
0040               *  SDOPT3 => Tune is in VRAM + loop
0041               *  SDOPT4 => Tune is in VRAM
0042               ********|*****|*********************|**************************
0043 2886 C81B  38 sdprep  mov   *r11,@wsdlst          ; Set tune address
     2888 8334     
0044 288A C83B  42         mov   *r11+,@wsdtmp         ; Set tune address in temp
     288C 8336     
0045 288E 0242  22         andi  config,>fff8          ; Clear bits 13-14-15
     2890 FFF8     
0046 2892 E0BB  30         soc   *r11+,config          ; Set options
0047 2894 D820  46         movb  @hb$01,@r13lb         ; Set initial duration
     2896 2012     
     2898 831B     
0048 289A 045B  20         b     *r11
0049               
0050               ***************************************************************
0051               * SDPLAY - Sound player for tune in VRAM or CPU memory
0052               ***************************************************************
0053               *  BL  @SDPLAY
0054               *--------------------------------------------------------------
0055               *  REMARKS
0056               *  Set config register bit13=0 to pause player.
0057               *  Set config register bit14=1 to repeat (or play next tune).
0058               ********|*****|*********************|**************************
0059 289C 20A0  32 sdplay  coc   @wbit13,config        ; Play tune ?
     289E 2006     
0060 28A0 1301  14         jeq   sdpla1                ; Yes, play
0061 28A2 045B  20         b     *r11
0062               *--------------------------------------------------------------
0063               * Initialisation
0064               *--------------------------------------------------------------
0065 28A4 060D  14 sdpla1  dec   r13                   ; duration = duration - 1
0066 28A6 9820  46         cb    @r13lb,@hb$00         ; R13LB == 0 ?
     28A8 831B     
     28AA 2000     
0067 28AC 1301  14         jeq   sdpla3                ; Play next note
0068 28AE 045B  20 sdpla2  b     *r11                  ; Note still busy, exit
0069 28B0 20A0  32 sdpla3  coc   @wbit15,config        ; Play tune from CPU memory ?
     28B2 2002     
0070 28B4 131A  14         jeq   mmplay
0071               *--------------------------------------------------------------
0072               * Play tune from VDP memory
0073               *--------------------------------------------------------------
0074 28B6 C120  30 vdplay  mov   @wsdtmp,tmp0          ; Get tune address
     28B8 8336     
0075 28BA 06C4  14         swpb  tmp0
0076 28BC D804  30         movb  tmp0,@vdpa
     28BE 8C02     
0077 28C0 06C4  14         swpb  tmp0
0078 28C2 D804  30         movb  tmp0,@vdpa
     28C4 8C02     
0079 28C6 04C4  14         clr   tmp0
0080 28C8 D120  30         movb  @vdpr,tmp0            ; length = 0 (end of tune) ?
     28CA 8800     
0081 28CC 131E  14         jeq   sdexit                ; Yes. exit
0082 28CE 0984  32 vdpla1  srl   tmp0,8                ; Right justify length byte
0083 28D0 A804  30         a     tmp0,@wsdtmp          ; Adjust for next table entry
     28D2 8336     
0084 28D4 D820  42 vdpla2  movb  @vdpr,@>8400          ; Feed byte to sound generator
     28D6 8800     
     28D8 8400     
0085 28DA 0604  14         dec   tmp0
0086 28DC 16FB  14         jne   vdpla2
0087 28DE D820  42         movb  @vdpr,@r13lb          ; Set duration counter
     28E0 8800     
     28E2 831B     
0088 28E4 05E0  26 vdpla3  inct  @wsdtmp               ; Adjust for next table entry, honour byte (1) + (n+1)
     28E6 8336     
0089 28E8 045B  20         b     *r11
0090               *--------------------------------------------------------------
0091               * Play tune from CPU memory
0092               *--------------------------------------------------------------
0093 28EA C120  30 mmplay  mov   @wsdtmp,tmp0
     28EC 8336     
0094 28EE D174  28         movb  *tmp0+,tmp1           ; length = 0 (end of tune) ?
0095 28F0 130C  14         jeq   sdexit                ; Yes, exit
0096 28F2 0985  32 mmpla1  srl   tmp1,8                ; Right justify length byte
0097 28F4 A805  30         a     tmp1,@wsdtmp          ; Adjust for next table entry
     28F6 8336     
0098 28F8 D834  40 mmpla2  movb  *tmp0+,@>8400         ; Feed byte to sound generator
     28FA 8400     
0099 28FC 0605  14         dec   tmp1
0100 28FE 16FC  14         jne   mmpla2
0101 2900 D814  38         movb  *tmp0,@r13lb          ; Set duration counter
     2902 831B     
0102 2904 05E0  26         inct  @wsdtmp               ; Adjust for next table entry, honour byte (1) + (n+1)
     2906 8336     
0103 2908 045B  20         b     *r11
0104               *--------------------------------------------------------------
0105               * Exit. Check if tune must be looped
0106               *--------------------------------------------------------------
0107 290A 20A0  32 sdexit  coc   @wbit14,config        ; Loop flag set ?
     290C 2004     
0108 290E 1607  14         jne   sdexi2                ; No, exit
0109 2910 C820  42         mov   @wsdlst,@wsdtmp
     2912 8334     
     2914 8336     
0110 2916 D820  46         movb  @hb$01,@r13lb          ; Set initial duration
     2918 2012     
     291A 831B     
0111 291C 045B  20 sdexi1  b     *r11                  ; Exit
0112 291E 0242  22 sdexi2  andi  config,>fff8          ; Reset music player
     2920 FFF8     
0113 2922 045B  20         b     *r11                  ; Exit
0114               
                   < runlib.asm
0177               
0181               
0185               
0189               
0192                       copy  "keyb_rkscan.asm"          ; Use ROM#0 OS monitor KSCAN
     **** ****     > keyb_rkscan.asm
0001               * FILE......: keyb_rkscan.asm
0002               * Purpose...: Full (real) keyboard support module
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                     KEYBOARD FUNCTIONS
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * RKSCAN - Scan keyboard using ROM#0 OS monitor KSCAN
0010               ***************************************************************
0011               *  BL @RKSCAN
0012               *--------------------------------------------------------------
0013               * Register usage
0014               * none
0015               *--------------------------------------------------------------
0016               * Scratchpad usage by console KSCAN:
0017               *
0018               * >8373  I/O:    LSB of GPL subroutine stack pointer 80 = (>8380)
0019               * >8374  Input:  keyboard scan mode (default=0)
0020               * >8375  Output: ASCII code detected by keyboard scan
0021               * >8376  Output: Joystick Y-status by keyboard scan
0022               * >8377  Output: Joystick X-status by keyboard scan
0023               * >837c  Output: GPL status byte (>20 if key pressed)
0024               * >838a  I/O:    GPL substack
0025               * >838c  I/O:    GPL substack
0026               * >83c6  I/O:    ISRWS R3 Keyboard state and debounce info
0027               * >83c8  I/O:    ISRWS R4 Keyboard state and debounce info
0028               * >83ca  I/O:    ISRWS R5 Keyboard state and debounce info
0029               * >83d4  I/O:    ISRWS R10 Contents of VDP register 01
0030               * >83d6  I/O:    ISRWS R11 Screen timeout counter, blanks when 0000
0031               * >83d8  I/O:    ISRWS R12 (Backup return address old R11 in GPLWS)
0032               * >83f8  output: GPLWS R12 (CRU base address for key scan)
0033               * >83fa  output: GPLWS R13 (GROM/GRAM read data port 9800)
0034               * >83fe  I/O:    GPLWS R15 (VDP write address port 8c02)
0035               ********|*****|*********************|**************************
0036               rkscan:
0037 2924 0649  14         dect  stack
0038 2926 C64B  30         mov   r11,*stack            ; Push return address
0039 2928 0649  14         dect  stack
0040 292A C644  30         mov   tmp0,*stack           ; Push tmp0
0041                       ;------------------------------------------------------
0042                       ; (1) Check for alpha lock
0043                       ;------------------------------------------------------
0044 292C 40A0  34         szc   @wbit10,config        ; Reset CONFIG register bit 10=0
     292E 200C     
0045                                                   ; (alpha lock off)
0046               
0047                       ; See CRU interface and keyboard sections for details
0048                       ; http://www.nouspikel.com/ti99/titechpages.htm
0049               
0050 2930 04CC  14         clr   r12                   ; Set base address (to bit 0) so
0051                                                   ; following offsets correspond
0052               
0053 2932 1E15  16         sbz   21                    ; \ Set bit 21 (PIN 5 attached to alpha
0054                                                   ; / lock column) to 0.
0055               
0056 2934 0BEC  44         src   r12,14                ; Burn some time (r12=0 no problem shifting)
0057               
0058 2936 1F07  16         tb    7                     ; \ Copy CRU bit 7 into EQ bit
0059                                                   ; | That is CRU INT7*/P15 pin (keyboard row
0060                                                   ; | with keys FCTN, 2,3,4,5,1,
0061                                                   ; / [joy1-up,joy2-up, Alpha Lock])
0062               
0063 2938 1302  14         jeq   !                     ; No, alpha lock is off
0064               
0065 293A E0A0  34         soc   @wbit10,config        ; \ Yes, alpha lock is on.
     293C 200C     
0066                                                   ; / Set CONFIG register bit 10=1
0067               
0068 293E 1D15  16 !       sbo   21                    ; \ Reset bit 21 (Pin 5 attached to alpha
0069                                                   ; / lock column) to 1.
0070                       ;------------------------------------------------------
0071                       ; (2) Prepare for OS monitor kscan
0072                       ;------------------------------------------------------
0073 2940 C820  46         mov   @scrpad.83c6,@>83c6   ; Required for lowercase support
     2942 2980     
     2944 83C6     
0074 2946 C820  46         mov   @scrpad.83fa,@>83fa   ; Load GPLWS R13
     2948 2982     
     294A 83FA     
0075 294C C820  46         mov   @scrpad.83fe,@>83fe   ; Load GPLWS R15
     294E 2984     
     2950 83FE     
0076               
0077 2952 04C4  14         clr   tmp0                  ; \ Keyboard mode in MSB
0078                                                   ; / 00=Scan all of keyboard
0079               
0080 2954 D804  30         movb  tmp0,@>8374           ; Set keyboard mode at @>8374
     2956 8374     
0081                                                   ; (scan entire keyboard)
0082               
0083 2958 02E0  18         lwpi  >83e0                 ; Activate GPL workspace
     295A 83E0     
0084               
0085 295C 06A0  28         bl    @kscan                ; Call KSCAN
     295E 000E     
0086 2960 02E0  18         lwpi  ws1                   ; Activate user workspace
     2962 8300     
0087                       ;------------------------------------------------------
0088                       ; (3) Check if key pressed
0089                       ;------------------------------------------------------
0090 2964 D120  30         movb  @>837c,tmp0           ; Get flag
     2966 837C     
0091 2968 0A34  22         sla   tmp0,3                ; Flag value is >20
0092 296A 1707  14         jnc   rkscan.exit           ; No key pressed, exit early
0093                       ;------------------------------------------------------
0094                       ; (4) Key detected, store in memory
0095                       ;------------------------------------------------------
0096 296C D120  30         movb  @>8375,tmp0           ; \ Key pressed is at @>8375
     296E 8375     
0097 2970 0984  32         srl   tmp0,8                ; / Move to LSB
0099 2972 C804  38         mov   tmp0,@rom0_kscan_out  ; Store ASCII value in user location
     2974 A028     
0103 2976 E0A0  34         soc   @wbit11,config        ; Set ANYKEY flag in CONFIG register
     2978 200A     
0104                       ;------------------------------------------------------
0105                       ; Exit
0106                       ;------------------------------------------------------
0107               rkscan.exit:
0108 297A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0109 297C C2F9  30         mov   *stack+,r11           ; Pop r11
0110 297E 045B  20         b     *r11                  ; Return to caller
0111               
0112               
0113 2980 0200     scrpad.83c6   data >0200            ; Required for KSCAN to support lowercase
0114 2982 9800     scrpad.83fa   data >9800
0115               
0116               ; Dummy value for GPLWS R15 (instead of VDP write address port 8c02)
0117               ; We do not want console KSCAN to fiddle with VDP registers while Stevie
0118               ; is running
0119               
0120 2984 83A0     scrpad.83fe   data >83a0            ; 8c02
                   < runlib.asm
0197               
0199                       copy  "cpu_hexsupport.asm"       ; CPU hex numbers support
     **** ****     > cpu_hexsupport.asm
0001               * FILE......: cpu_hexsupport.asm
0002               * Purpose...: CPU create, display hex numbers module
0003               
0004               ***************************************************************
0005               * mkhex - Convert hex word to string
0006               ***************************************************************
0007               *  bl   @mkhex
0008               *       data P0,P1,P2
0009               *--------------------------------------------------------------
0010               *  P0 = Pointer to 16 bit word
0011               *  P1 = Pointer to string buffer
0012               *  P2 = Offset for ASCII digit
0013               *       MSB determines offset for chars A-F
0014               *       LSB determines offset for chars 0-9
0015               *  (CONFIG#0 = 1) = Display number at cursor YX
0016               *--------------------------------------------------------------
0017               *  Memory usage:
0018               *  tmp0, tmp1, tmp2, tmp3, tmp4
0019               *  waux1, waux2, waux3
0020               *--------------------------------------------------------------
0021               *  Memory variables waux1-waux3 are used as temporary variables
0022               ********|*****|*********************|**************************
0023 2986 C13B  30 mkhex   mov   *r11+,tmp0            ; P0: Address of word
0024 2988 C83B  42         mov   *r11+,@waux3          ; P1: Pointer to string buffer
     298A 8340     
0025 298C 04E0  26         clr   @waux1
     298E 833C     
0026 2990 04E0  26         clr   @waux2
     2992 833E     
0027 2994 0207  20         li    tmp3,waux1            ; We store results in WAUX1 and WAUX2
     2996 833C     
0028 2998 C114  26         mov   *tmp0,tmp0            ; Get word
0029               *--------------------------------------------------------------
0030               *    Convert nibbles to bytes (is in wrong order)
0031               *--------------------------------------------------------------
0032 299A 0205  20         li    tmp1,4                ; 4 nibbles
     299C 0004     
0033 299E C184  18 mkhex1  mov   tmp0,tmp2             ; Make work copy
0034 29A0 0246  22         andi  tmp2,>000f            ; Only keep LSN
     29A2 000F     
0035                       ;------------------------------------------------------
0036                       ; Determine offset for ASCII char
0037                       ;------------------------------------------------------
0038 29A4 0286  22         ci    tmp2,>000a
     29A6 000A     
0039 29A8 1105  14         jlt   mkhex1.digit09
0040                       ;------------------------------------------------------
0041                       ; Add ASCII offset for digits A-F
0042                       ;------------------------------------------------------
0043               mkhex1.digitaf:
0044 29AA C21B  26         mov   *r11,tmp4
0045 29AC 0988  32         srl   tmp4,8                ; Right justify
0046 29AE 0228  22         ai    tmp4,-10              ; Adjust offset for 'A-F'
     29B0 FFF6     
0047 29B2 1003  14         jmp   mkhex2
0048               
0049               mkhex1.digit09:
0050                       ;------------------------------------------------------
0051                       ; Add ASCII offset for digits 0-9
0052                       ;------------------------------------------------------
0053 29B4 C21B  26         mov   *r11,tmp4
0054 29B6 0248  22         andi  tmp4,>00ff            ; Only keep LSB
     29B8 00FF     
0055               
0056 29BA A188  18 mkhex2  a     tmp4,tmp2             ; Add ASCII-offset
0057 29BC 06C6  14         swpb  tmp2
0058 29BE DDC6  32         movb  tmp2,*tmp3+           ; Save byte
0059 29C0 0944  24         srl   tmp0,4                ; Next nibble
0060 29C2 0605  14         dec   tmp1
0061 29C4 16EC  14         jne   mkhex1                ; Repeat until all nibbles processed
0062 29C6 0242  22         andi  config,>bfff          ; Reset bit 1 in config register
     29C8 BFFF     
0063               *--------------------------------------------------------------
0064               *    Build first 2 bytes in correct order
0065               *--------------------------------------------------------------
0066 29CA C160  30         mov   @waux3,tmp1           ; Get pointer
     29CC 8340     
0067 29CE 04D5  26         clr   *tmp1                 ; Set length byte to 0
0068 29D0 0585  14         inc   tmp1                  ; Next byte, not word!
0069 29D2 C120  30         mov   @waux2,tmp0
     29D4 833E     
0070 29D6 06C4  14         swpb  tmp0
0071 29D8 DD44  32         movb  tmp0,*tmp1+
0072 29DA 06C4  14         swpb  tmp0
0073 29DC DD44  32         movb  tmp0,*tmp1+
0074               *--------------------------------------------------------------
0075               *    Set length byte
0076               *--------------------------------------------------------------
0077 29DE C120  30         mov   @waux3,tmp0           ; Get start of string buffer
     29E0 8340     
0078 29E2 D520  46         movb  @hb$04,*tmp0          ; Set lengh byte to 4
     29E4 2016     
0079 29E6 05CB  14         inct  r11                   ; Skip Parameter P2
0080               *--------------------------------------------------------------
0081               *    Build last 2 bytes in correct order
0082               *--------------------------------------------------------------
0083 29E8 C120  30         mov   @waux1,tmp0
     29EA 833C     
0084 29EC 06C4  14         swpb  tmp0
0085 29EE DD44  32         movb  tmp0,*tmp1+
0086 29F0 06C4  14         swpb  tmp0
0087 29F2 DD44  32         movb  tmp0,*tmp1+
0088               *--------------------------------------------------------------
0089               *    Display hex number ?
0090               *--------------------------------------------------------------
0091 29F4 20A0  32         coc   @wbit0,config         ; Check if 'display' bit is set
     29F6 2020     
0092 29F8 1301  14         jeq   mkhex3                ; Yes, so show at current YX position
0093 29FA 045B  20         b     *r11                  ; Exit
0094               *--------------------------------------------------------------
0095               *  Display hex number on screen at current YX position
0096               *--------------------------------------------------------------
0097 29FC 0242  22 mkhex3  andi  config,>7fff          ; Reset bit 0
     29FE 7FFF     
0098 2A00 C160  30         mov   @waux3,tmp1           ; Get Pointer to string
     2A02 8340     
0099 2A04 0460  28         b     @xutst0               ; Display string
     2A06 2420     
0100 2A08 0610     prefix  data  >0610                 ; Length byte + blank
0101               
0102               
0103               
0104               ***************************************************************
0105               * puthex - Put 16 bit word on screen
0106               ***************************************************************
0107               *  bl   @mkhex
0108               *       data P0,P1,P2,P3
0109               *--------------------------------------------------------------
0110               *  P0 = YX position
0111               *  P1 = Pointer to 16 bit word
0112               *  P2 = Pointer to string buffer
0113               *  P3 = Offset for ASCII digit
0114               *       MSB determines offset for chars A-F
0115               *       LSB determines offset for chars 0-9
0116               *--------------------------------------------------------------
0117               *  Memory usage:
0118               *  tmp0, tmp1, tmp2, tmp3
0119               *  waux1, waux2, waux3
0120               ********|*****|*********************|**************************
0121 2A0A C83B  42 puthex  mov   *r11+,@wyx            ; Set cursor
     2A0C 832A     
0122 2A0E 0262  22         ori   config,>8000          ; CONFIG register bit 0=1
     2A10 8000     
0123 2A12 10B9  14         jmp   mkhex                 ; Convert number and display
0124               
                   < runlib.asm
0201               
0203                       copy  "cpu_numsupport.asm"       ; CPU unsigned numbers support
     **** ****     > cpu_numsupport.asm
0001               * FILE......: cpu_numsupport.asm
0002               * Purpose...: CPU create, display numbers module
0003               
0004               ***************************************************************
0005               * MKNUM - Convert unsigned number to string
0006               ***************************************************************
0007               *  BL   @MKNUM
0008               *  DATA P0,P1,P2
0009               *
0010               *  P0   = Pointer to 16 bit unsigned number
0011               *  P1   = Pointer to 5 byte string buffer
0012               *  P2HB = Offset for ASCII digit
0013               *  P2LB = Character for replacing leading 0's
0014               *
0015               *  (CONFIG:0 = 1) = Display number at cursor YX
0016               *-------------------------------------------------------------
0017               *  Destroys registers tmp0-tmp4
0018               ********|*****|*********************|**************************
0019 2A14 0207  20 mknum   li    tmp3,5                ; Digit counter
     2A16 0005     
0020 2A18 C17B  30         mov   *r11+,tmp1            ; \ Get 16 bit unsigned number
0021 2A1A C155  26         mov   *tmp1,tmp1            ; /
0022 2A1C C23B  30         mov   *r11+,tmp4            ; Pointer to string buffer
0023 2A1E 0228  22         ai    tmp4,4                ; Get end of buffer
     2A20 0004     
0024 2A22 0206  20         li    tmp2,10               ; Divide by 10 to isolate last digit
     2A24 000A     
0025               *--------------------------------------------------------------
0026               *  Do string conversion
0027               *--------------------------------------------------------------
0028 2A26 04C4  14 mknum1  clr   tmp0                  ; Clear the high word of the dividend
0029 2A28 3D06 128         div   tmp2,tmp0             ; (TMP0:TMP1) / 10 (TMP2)
0030 2A2A 06C5  14         swpb  tmp1                  ; Move to high-byte for writing to buffer
0031 2A2C B15B  26         ab    *r11,tmp1             ; Add offset for ASCII digit
0032 2A2E D605  30         movb  tmp1,*tmp4            ; Write remainder to string buffer
0033 2A30 C144  18         mov   tmp0,tmp1             ; Move integer result into R4 for next digit
0034 2A32 0608  14         dec   tmp4                  ; Adjust string pointer for next digit
0035 2A34 0607  14         dec   tmp3                  ; Decrease counter
0036 2A36 16F7  14         jne   mknum1                ; Do next digit
0037               *--------------------------------------------------------------
0038               *  Replace leading 0's with fill character
0039               *--------------------------------------------------------------
0040 2A38 0207  20         li    tmp3,4                ; Check first 4 digits
     2A3A 0004     
0041 2A3C 0588  14         inc   tmp4                  ; Too far, back to buffer start
0042 2A3E C11B  26         mov   *r11,tmp0
0043 2A40 0A84  32         sla   tmp0,8                ; Only keep fill character in HB
0044 2A42 96D8  34 mknum2  cb    *tmp4,*r11            ; Digit = 0 ?
0045 2A44 1305  14         jeq   mknum4                ; Yes, replace with fill character
0046 2A46 05CB  14 mknum3  inct  r11
0047 2A48 20A0  32         coc   @wbit0,config         ; Check if 'display' bit is set
     2A4A 2020     
0048 2A4C 1305  14         jeq   mknum5                ; Yes, so show at current YX position
0049 2A4E 045B  20         b     *r11                  ; Exit
0050 2A50 DE04  32 mknum4  movb  tmp0,*tmp4+           ; Replace leading 0 with fill character
0051 2A52 0607  14         dec   tmp3                  ; 4th digit processed ?
0052 2A54 13F8  14         jeq   mknum3                ; Yes, exit
0053 2A56 10F5  14         jmp   mknum2                ; No, next one
0054               *--------------------------------------------------------------
0055               *  Display integer on screen at current YX position
0056               *--------------------------------------------------------------
0057 2A58 0242  22 mknum5  andi  config,>7fff          ; Reset bit 0
     2A5A 7FFF     
0058 2A5C C10B  18         mov   r11,tmp0
0059 2A5E 0224  22         ai    tmp0,-4
     2A60 FFFC     
0060 2A62 C154  26         mov   *tmp0,tmp1            ; Get buffer address
0061 2A64 0206  20         li    tmp2,>0500            ; String length = 5
     2A66 0500     
0062 2A68 0460  28         b     @xutstr               ; Display string
     2A6A 2422     
0063               
0064               
0065               
0066               
0067               ***************************************************************
0068               * trimnum - Trim unsigned number string
0069               ***************************************************************
0070               *  bl   @trimnum
0071               *  data p0,p1,p2
0072               *--------------------------------------------------------------
0073               *  p0   = Pointer to 5 byte string buffer (no length byte!)
0074               *  p1   = Pointer to output variable
0075               *  p2   = Padding character to match against
0076               *--------------------------------------------------------------
0077               *  Copy unsigned number string into a length-padded, left
0078               *  justified string for display with putstr, putat, ...
0079               *
0080               *  The new string starts at index 5 in buffer, overwriting
0081               *  anything that is located there !
0082               *
0083               *               01234|56789A
0084               *  Before...:   XXXXX          length
0085               *  After....:   XXXXY|zY       z=1
0086               *               XXXYY|zYY      z=2
0087               *               XXYYY|zYYY     z=3
0088               *               XYYYY|zYYYY    z=4
0089               *               YYYYY|zYYYYY   z=5
0090               *--------------------------------------------------------------
0091               *  Destroys registers tmp0-tmp3
0092               ********|*****|*********************|**************************
0093               trimnum:
0094 2A6C C13B  30         mov   *r11+,tmp0            ; Get pointer to input string
0095 2A6E C17B  30         mov   *r11+,tmp1            ; Get pointer to output string
0096 2A70 C1BB  30         mov   *r11+,tmp2            ; Get padding character
0097 2A72 06C6  14         swpb  tmp2                  ; LO <-> HI
0098 2A74 0207  20         li    tmp3,5                ; Set counter
     2A76 0005     
0099                       ;------------------------------------------------------
0100                       ; Scan for padding character from left to right
0101                       ;------------------------------------------------------:
0102               trimnum_scan:
0103 2A78 9194  26         cb    *tmp0,tmp2            ; Matches padding character ?
0104 2A7A 1604  14         jne   trimnum_setlen        ; No, exit loop
0105 2A7C 0584  14         inc   tmp0                  ; Next character
0106 2A7E 0607  14         dec   tmp3                  ; Last digit reached ?
0107 2A80 1301  14         jeq   trimnum_setlen        ; yes, exit loop
0108 2A82 10FA  14         jmp   trimnum_scan
0109                       ;------------------------------------------------------
0110                       ; Scan completed, set length byte new string
0111                       ;------------------------------------------------------
0112               trimnum_setlen:
0113 2A84 06C7  14         swpb  tmp3                  ; LO <-> HI
0114 2A86 DD47  32         movb  tmp3,*tmp1+           ; Update string-length in work buffer
0115 2A88 06C7  14         swpb  tmp3                  ; LO <-> HI
0116                       ;------------------------------------------------------
0117                       ; Start filling new string
0118                       ;------------------------------------------------------
0119               trimnum_fill:
0120 2A8A DD74  42         movb  *tmp0+,*tmp1+         ; Copy character
0121 2A8C 0607  14         dec   tmp3                  ; Last character ?
0122 2A8E 16FD  14         jne   trimnum_fill          ; Not yet, repeat
0123 2A90 045B  20         b     *r11                  ; Return
0124               
0125               
0126               
0127               
0128               ***************************************************************
0129               * PUTNUM - Put unsigned number on screen
0130               ***************************************************************
0131               *  BL   @PUTNUM
0132               *  DATA P0,P1,P2,P3
0133               *--------------------------------------------------------------
0134               *  P0   = YX position
0135               *  P1   = Pointer to 16 bit unsigned number
0136               *  P2   = Pointer to 5 byte string buffer
0137               *  P3HB = Offset for ASCII digit
0138               *  P3LB = Character for replacing leading 0's
0139               ********|*****|*********************|**************************
0140 2A92 C83B  42 putnum  mov   *r11+,@wyx            ; Set cursor
     2A94 832A     
0141 2A96 0262  22         ori   config,>8000          ; CONFIG register bit 0=1
     2A98 8000     
0142 2A9A 10BC  14         jmp   mknum                 ; Convert number and display
                   < runlib.asm
0205               
0209               
0213               
0217               
0221               
0223                       copy  "cpu_strings.asm"          ; String utilities support
     **** ****     > cpu_strings.asm
0001               * FILE......: cpu_strings.asm
0002               * Purpose...: CPU string manipulation library
0003               
0004               
0005               ***************************************************************
0006               * string.ltrim - Left justify string
0007               ***************************************************************
0008               *  bl   @string.ltrim
0009               *       data p0,p1,p2
0010               *--------------------------------------------------------------
0011               *  P0 = Pointer to length-prefix string
0012               *  P1 = Pointer to RAM work buffer
0013               *  P2 = Fill character
0014               *--------------------------------------------------------------
0015               *  BL   @xstring.ltrim
0016               *
0017               *  TMP0 = Pointer to length-prefix string
0018               *  TMP1 = Pointer to RAM work buffer
0019               *  TMP2 = Fill character
0020               ********|*****|*********************|**************************
0021               string.ltrim:
0022 2A9C 0649  14         dect  stack
0023 2A9E C64B  30         mov   r11,*stack            ; Save return address
0024 2AA0 0649  14         dect  stack
0025 2AA2 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 2AA4 0649  14         dect  stack
0027 2AA6 C645  30         mov   tmp1,*stack           ; Push tmp1
0028 2AA8 0649  14         dect  stack
0029 2AAA C646  30         mov   tmp2,*stack           ; Push tmp2
0030 2AAC 0649  14         dect  stack
0031 2AAE C647  30         mov   tmp3,*stack           ; Push tmp3
0032                       ;-----------------------------------------------------------------------
0033                       ; Get parameter values
0034                       ;-----------------------------------------------------------------------
0035 2AB0 C13B  30         mov   *r11+,tmp0            ; Pointer to length-prefixed string
0036 2AB2 C17B  30         mov   *r11+,tmp1            ; RAM work buffer
0037 2AB4 C1BB  30         mov   *r11+,tmp2            ; Fill character
0038 2AB6 100A  14         jmp   !
0039                       ;-----------------------------------------------------------------------
0040                       ; Register version
0041                       ;-----------------------------------------------------------------------
0042               xstring.ltrim:
0043 2AB8 0649  14         dect  stack
0044 2ABA C64B  30         mov   r11,*stack            ; Save return address
0045 2ABC 0649  14         dect  stack
0046 2ABE C644  30         mov   tmp0,*stack           ; Push tmp0
0047 2AC0 0649  14         dect  stack
0048 2AC2 C645  30         mov   tmp1,*stack           ; Push tmp1
0049 2AC4 0649  14         dect  stack
0050 2AC6 C646  30         mov   tmp2,*stack           ; Push tmp2
0051 2AC8 0649  14         dect  stack
0052 2ACA C647  30         mov   tmp3,*stack           ; Push tmp3
0053                       ;-----------------------------------------------------------------------
0054                       ; Start
0055                       ;-----------------------------------------------------------------------
0056 2ACC C1D4  26 !       mov   *tmp0,tmp3
0057 2ACE 06C7  14         swpb  tmp3                  ; LO <-> HI
0058 2AD0 0247  22         andi  tmp3,>00ff            ; Discard HI byte tmp2 (only keep length)
     2AD2 00FF     
0059 2AD4 0A86  32         sla   tmp2,8                ; LO -> HI fill character
0060                       ;-----------------------------------------------------------------------
0061                       ; Scan string from left to right and compare with fill character
0062                       ;-----------------------------------------------------------------------
0063               string.ltrim.scan:
0064 2AD6 9194  26         cb    *tmp0,tmp2            ; Do we have a fill character?
0065 2AD8 1604  14         jne   string.ltrim.move     ; No, now move string left
0066 2ADA 0584  14         inc   tmp0                  ; Next byte
0067 2ADC 0607  14         dec   tmp3                  ; Shorten string length
0068 2ADE 1301  14         jeq   string.ltrim.move     ; Exit if all characters processed
0069 2AE0 10FA  14         jmp   string.ltrim.scan     ; Scan next characer
0070                       ;-----------------------------------------------------------------------
0071                       ; Copy part of string to RAM work buffer (This is the left-justify)
0072                       ;-----------------------------------------------------------------------
0073               string.ltrim.move:
0074 2AE2 9194  26         cb    *tmp0,tmp2            ; Do we have a fill character?
0075 2AE4 C1C7  18         mov   tmp3,tmp3             ; String length = 0 ?
0076 2AE6 1306  14         jeq   string.ltrim.panic    ; File length assert
0077 2AE8 C187  18         mov   tmp3,tmp2
0078 2AEA 06C7  14         swpb  tmp3                  ; HI <-> LO
0079 2AEC DD47  32         movb  tmp3,*tmp1+           ; Set new string length byte in RAM workbuf
0080               
0081 2AEE 06A0  32         bl    @xpym2m               ; tmp0 = Memory source address
     2AF0 24FE     
0082                                                   ; tmp1 = Memory target address
0083                                                   ; tmp2 = Number of bytes to copy
0084 2AF2 1004  14         jmp   string.ltrim.exit
0085                       ;-----------------------------------------------------------------------
0086                       ; CPU crash
0087                       ;-----------------------------------------------------------------------
0088               string.ltrim.panic:
0089 2AF4 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2AF6 FFCE     
0090 2AF8 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2AFA 2026     
0091                       ;----------------------------------------------------------------------
0092                       ; Exit
0093                       ;----------------------------------------------------------------------
0094               string.ltrim.exit:
0095 2AFC C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0096 2AFE C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0097 2B00 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0098 2B02 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0099 2B04 C2F9  30         mov   *stack+,r11           ; Pop r11
0100 2B06 045B  20         b     *r11                  ; Return to caller
0101               
0102               
0103               
0104               
0105               ***************************************************************
0106               * string.getlenc - Get length of C-style string
0107               ***************************************************************
0108               *  bl   @string.getlenc
0109               *       data p0,p1
0110               *--------------------------------------------------------------
0111               *  P0 = Pointer to C-style string
0112               *  P1 = String termination character
0113               *--------------------------------------------------------------
0114               *  bl   @xstring.getlenc
0115               *
0116               *  TMP0 = Pointer to C-style string
0117               *  TMP1 = Termination character
0118               *--------------------------------------------------------------
0119               *  OUTPUT:
0120               *  @waux1 = Length of string
0121               ********|*****|*********************|**************************
0122               string.getlenc:
0123 2B08 0649  14         dect  stack
0124 2B0A C64B  30         mov   r11,*stack            ; Save return address
0125 2B0C 05D9  26         inct  *stack                ; Skip "data P0"
0126 2B0E 05D9  26         inct  *stack                ; Skip "data P1"
0127 2B10 0649  14         dect  stack
0128 2B12 C644  30         mov   tmp0,*stack           ; Push tmp0
0129 2B14 0649  14         dect  stack
0130 2B16 C645  30         mov   tmp1,*stack           ; Push tmp1
0131 2B18 0649  14         dect  stack
0132 2B1A C646  30         mov   tmp2,*stack           ; Push tmp2
0133                       ;-----------------------------------------------------------------------
0134                       ; Get parameter values
0135                       ;-----------------------------------------------------------------------
0136 2B1C C13B  30         mov   *r11+,tmp0            ; Pointer to C-style string
0137 2B1E C17B  30         mov   *r11+,tmp1            ; String termination character
0138 2B20 1008  14         jmp   !
0139                       ;-----------------------------------------------------------------------
0140                       ; Register version
0141                       ;-----------------------------------------------------------------------
0142               xstring.getlenc:
0143 2B22 0649  14         dect  stack
0144 2B24 C64B  30         mov   r11,*stack            ; Save return address
0145 2B26 0649  14         dect  stack
0146 2B28 C644  30         mov   tmp0,*stack           ; Push tmp0
0147 2B2A 0649  14         dect  stack
0148 2B2C C645  30         mov   tmp1,*stack           ; Push tmp1
0149 2B2E 0649  14         dect  stack
0150 2B30 C646  30         mov   tmp2,*stack           ; Push tmp2
0151                       ;-----------------------------------------------------------------------
0152                       ; Start
0153                       ;-----------------------------------------------------------------------
0154 2B32 0A85  32 !       sla   tmp1,8                ; LSB to MSB
0155 2B34 04C6  14         clr   tmp2                  ; Loop counter
0156                       ;-----------------------------------------------------------------------
0157                       ; Scan string for termination character
0158                       ;-----------------------------------------------------------------------
0159               string.getlenc.loop:
0160 2B36 0586  14         inc   tmp2
0161 2B38 9174  28         cb    *tmp0+,tmp1           ; Compare character
0162 2B3A 1304  14         jeq   string.getlenc.putlength
0163                       ;-----------------------------------------------------------------------
0164                       ; Assert on string length
0165                       ;-----------------------------------------------------------------------
0166 2B3C 0286  22         ci    tmp2,255
     2B3E 00FF     
0167 2B40 1505  14         jgt   string.getlenc.panic
0168 2B42 10F9  14         jmp   string.getlenc.loop
0169                       ;-----------------------------------------------------------------------
0170                       ; Return length
0171                       ;-----------------------------------------------------------------------
0172               string.getlenc.putlength:
0173 2B44 0606  14         dec   tmp2                  ; One time adjustment
0174 2B46 C806  30         mov   tmp2,@waux1           ; Store length
     2B48 833C     
0175 2B4A 1004  14         jmp   string.getlenc.exit   ; Exit
0176                       ;-----------------------------------------------------------------------
0177                       ; CPU crash
0178                       ;-----------------------------------------------------------------------
0179               string.getlenc.panic:
0180 2B4C C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2B4E FFCE     
0181 2B50 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2B52 2026     
0182                       ;----------------------------------------------------------------------
0183                       ; Exit
0184                       ;----------------------------------------------------------------------
0185               string.getlenc.exit:
0186 2B54 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0187 2B56 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0188 2B58 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0189 2B5A C2F9  30         mov   *stack+,r11           ; Pop r11
0190 2B5C 045B  20         b     *r11                  ; Return to caller
                   < runlib.asm
0225               
0229               
0231                       copy  "cpu_scrpad_backrest.asm"  ; Scratchpad backup/restore
     **** ****     > cpu_scrpad_backrest.asm
0001               * FILE......: cpu_scrpad_backrest.asm
0002               * Purpose...: Scratchpad memory backup/restore functions
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                Scratchpad memory backup/restore
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * cpu.scrpad.backup - Backup 256 bytes of scratchpad >8300 to
0010               *                     predefined memory target @cpu.scrpad.tgt
0011               ***************************************************************
0012               *  bl   @cpu.scrpad.backup
0013               *--------------------------------------------------------------
0014               *  Register usage
0015               *  r0-r2, but values restored before exit
0016               *--------------------------------------------------------------
0017               *  Backup 256 bytes of scratchpad memory >8300 to destination
0018               *  @cpu.scrpad.tgt (+ >ff)
0019               *
0020               *  Expects current workspace to be in scratchpad memory.
0021               ********|*****|*********************|**************************
0022               cpu.scrpad.backup:
0023 2B5E C800  38         mov   r0,@cpu.scrpad.tgt    ; Save @>8300 (r0)
     2B60 F000     
0024 2B62 C801  38         mov   r1,@cpu.scrpad.tgt+2  ; Save @>8302 (r1)
     2B64 F002     
0025 2B66 C802  38         mov   r2,@cpu.scrpad.tgt+4  ; Save @>8304 (r2)
     2B68 F004     
0026                       ;------------------------------------------------------
0027                       ; Prepare for copy loop
0028                       ;------------------------------------------------------
0029 2B6A 0200  20         li    r0,>8306              ; Scratchpad source address
     2B6C 8306     
0030 2B6E 0201  20         li    r1,cpu.scrpad.tgt+6   ; RAM target address
     2B70 F006     
0031 2B72 0202  20         li    r2,62                 ; Loop counter
     2B74 003E     
0032                       ;------------------------------------------------------
0033                       ; Copy memory range >8306 - >83ff
0034                       ;------------------------------------------------------
0035               cpu.scrpad.backup.copy:
0036 2B76 CC70  46         mov   *r0+,*r1+
0037 2B78 CC70  46         mov   *r0+,*r1+
0038 2B7A 0642  14         dect  r2
0039 2B7C 16FC  14         jne   cpu.scrpad.backup.copy
0040 2B7E C820  50         mov   @>83fe,@cpu.scrpad.tgt + >fe
     2B80 83FE     
     2B82 F0FE     
0041                                                   ; Copy last word
0042                       ;------------------------------------------------------
0043                       ; Restore register r0 - r2
0044                       ;------------------------------------------------------
0045 2B84 C020  34         mov   @cpu.scrpad.tgt,r0    ; Restore r0
     2B86 F000     
0046 2B88 C060  34         mov   @cpu.scrpad.tgt+2,r1  ; Restore r1
     2B8A F002     
0047 2B8C C0A0  34         mov   @cpu.scrpad.tgt+4,r2  ; Restore r2
     2B8E F004     
0048                       ;------------------------------------------------------
0049                       ; Exit
0050                       ;------------------------------------------------------
0051               cpu.scrpad.backup.exit:
0052 2B90 045B  20         b     *r11                  ; Return to caller
0053               
0054               
0055               ***************************************************************
0056               * cpu.scrpad.restore - Restore 256 bytes of scratchpad from
0057               *                      predefined target @cpu.scrpad.tgt
0058               *                      to destination >8300
0059               ***************************************************************
0060               *  bl   @cpu.scrpad.restore
0061               *--------------------------------------------------------------
0062               *  Register usage
0063               *  r0-r1
0064               *--------------------------------------------------------------
0065               *  Restore scratchpad from memory area @cpu.scrpad.tgt (+ >ff).
0066               *  Current workspace may not be in scratchpad >8300 when called.
0067               *
0068               *  Destroys r0,r1
0069               ********|*****|*********************|**************************
0070               cpu.scrpad.restore:
0071                       ;------------------------------------------------------
0072                       ; Prepare for copy loop, WS
0073                       ;------------------------------------------------------
0074 2B92 0200  20         li    r0,cpu.scrpad.tgt
     2B94 F000     
0075 2B96 0201  20         li    r1,>8300
     2B98 8300     
0076                       ;------------------------------------------------------
0077                       ; Copy 256 bytes from @cpu.scrpad.tgt to >8300
0078                       ;------------------------------------------------------
0079               cpu.scrpad.restore.copy:
0080 2B9A CC70  46         mov   *r0+,*r1+
0081 2B9C CC70  46         mov   *r0+,*r1+
0082 2B9E 0281  22         ci    r1,>8400
     2BA0 8400     
0083 2BA2 11FB  14         jlt   cpu.scrpad.restore.copy
0084                       ;------------------------------------------------------
0085                       ; Exit
0086                       ;------------------------------------------------------
0087               cpu.scrpad.restore.exit:
0088 2BA4 045B  20         b     *r11                  ; Return to caller
                   < runlib.asm
0232                       copy  "cpu_scrpad_paging.asm"    ; Scratchpad memory paging
     **** ****     > cpu_scrpad_paging.asm
0001               * FILE......: cpu_scrpad_paging.asm
0002               * Purpose...: CPU memory paging functions
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                     CPU memory paging
0006               *//////////////////////////////////////////////////////////////
0007               
0008               
0009               ***************************************************************
0010               * cpu.scrpad.pgout - Page out 256 bytes of scratchpad at >8300
0011               *                    to CPU memory destination P0 (tmp1)
0012               *                    and replace with 256 bytes of memory from
0013               *                    predefined destination @cpu.scrpad.target
0014               ***************************************************************
0015               *  bl   @cpu.scrpad.pgout
0016               *       DATA p0
0017               *
0018               *  P0 = CPU memory destination
0019               *--------------------------------------------------------------
0020               *  bl   @xcpu.scrpad.pgout
0021               *  tmp1 = CPU memory destination
0022               *--------------------------------------------------------------
0023               *  Register usage
0024               *  tmp3      = Copy of CPU memory destination
0025               *  tmp0-tmp2 = Used as temporary registers
0026               *  @waux1    = Copy of r5 (tmp1)
0027               *--------------------------------------------------------------
0028               *  Remarks
0029               *  Copies 256 bytes from scratchpad to CPU memory destination
0030               *  specified in P0 (tmp1).
0031               *
0032               *  Then switches to the newly copied workspace in P0 (tmp1).
0033               *
0034               *  Finally it copies 256 bytes from @cpu.scrpad.tgt
0035               *  to scratchpad >8300 and activates workspace at >8300
0036               ********|*****|*********************|**************************
0037               cpu.scrpad.pgout:
0038 2BA6 C15B  26         mov   *r11,tmp1             ; tmp1 = Memory target address
0039                       ;------------------------------------------------------
0040                       ; Copy registers r0-r7
0041                       ;------------------------------------------------------
0042 2BA8 CD40  34         mov   r0,*tmp1+             ; Backup r0
0043 2BAA CD41  34         mov   r1,*tmp1+             ; Backup r1
0044 2BAC CD42  34         mov   r2,*tmp1+             ; Backup r2
0045 2BAE CD43  34         mov   r3,*tmp1+             ; Backup r3
0046 2BB0 CD44  34         mov   r4,*tmp1+             ; Backup r4
0047 2BB2 CD45  34         mov   r5,*tmp1+             ; Backup r5 (is tmp1, so is bogus)
0048 2BB4 CD46  34         mov   r6,*tmp1+             ; Backup r6
0049 2BB6 CD47  34         mov   r7,*tmp1+             ; Backup r7
0050                       ;------------------------------------------------------
0051                       ; Copy scratchpad memory to destination
0052                       ;------------------------------------------------------
0053               xcpu.scrpad.pgout:
0054 2BB8 0204  20         li    tmp0,>8310            ; tmp0 = Memory source address
     2BBA 8310     
0055                                                   ;        as of register r8
0056 2BBC 0206  20         li    tmp2,15               ; tmp2 = 15 iterations
     2BBE 000F     
0057                       ;------------------------------------------------------
0058                       ; Copy memory
0059                       ;------------------------------------------------------
0060 2BC0 CD74  46 !       mov   *tmp0+,*tmp1+         ; Copy word 1
0061 2BC2 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 2
0062 2BC4 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 3
0063 2BC6 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 4
0064 2BC8 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 5
0065 2BCA CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 6
0066 2BCC CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 7
0067 2BCE CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 8
0068 2BD0 0606  14         dec   tmp2
0069 2BD2 16F6  14         jne   -!                    ; Loop until done
0070                       ;------------------------------------------------------
0071                       ; Switch to newly copied workspace
0072                       ;------------------------------------------------------
0073 2BD4 C37B  30         mov   *r11+,r13             ; R13=WP   (pop tmp1 from stack)
0074 2BD6 020E  20         li    r14,cpu.scrpad.pgout.after.rtwp
     2BD8 2BDE     
0075                                                   ; R14=PC
0076 2BDA 04CF  14         clr   r15                   ; R15=STATUS
0077                       ;------------------------------------------------------
0078                       ; If we get here, WS was copied to specified
0079                       ; destination.  Also contents of r13,r14,r15
0080                       ; are about to be overwritten by rtwp instruction.
0081                       ;------------------------------------------------------
0082 2BDC 0380  18         rtwp                        ; Activate copied workspace
0083                                                   ; in non-scratchpad memory!
0084               
0085               cpu.scrpad.pgout.after.rtwp:
0086 2BDE 0460  28         b     @cpu.scrpad.restore   ; Restore scratchpad memory
     2BE0 2B92     
0087                                                   ; from @cpu.scrpad.tgt to @>8300
0088                                                   ; and switch workspace to >8300.
0089                       ;------------------------------------------------------
0090                       ; Exit
0091                       ;------------------------------------------------------
0092               cpu.scrpad.pgout.exit:
0093 2BE2 045B  20         b     *r11                  ; Return to caller
0094               
0095               
0096               ***************************************************************
0097               * cpu.scrpad.pgin - Page in 256 bytes of scratchpad memory
0098               *                   at >8300 from CPU memory specified in
0099               *                   p0 (tmp0)
0100               ***************************************************************
0101               *  bl   @cpu.scrpad.pgin
0102               *       DATA p0
0103               *
0104               *  P0 = CPU memory source
0105               *--------------------------------------------------------------
0106               *  bl   @memx.scrpad.pgin
0107               *  TMP0 = CPU memory source
0108               *--------------------------------------------------------------
0109               *  Register usage
0110               *  tmp0-tmp2 = Used as temporary registers
0111               *--------------------------------------------------------------
0112               *  Remarks
0113               *  Copies 256 bytes from CPU memory source to scratchpad >8300
0114               *  and activates workspace in scratchpad >8300
0115               *
0116               *  It's expected that the workspace is outside scratchpad >8300
0117               *  when calling this function.
0118               ********|*****|*********************|**************************
0119               cpu.scrpad.pgin:
0120 2BE4 C13B  30         mov   *r11+,tmp0            ; tmp0 = Memory source address
0121                       ;------------------------------------------------------
0122                       ; Copy scratchpad memory to destination
0123                       ;------------------------------------------------------
0124               xcpu.scrpad.pgin:
0125 2BE6 0205  20         li    tmp1,>8300            ; tmp1 = Memory destination address
     2BE8 8300     
0126 2BEA 0206  20         li    tmp2,16               ; tmp2 = 256/16
     2BEC 0010     
0127                       ;------------------------------------------------------
0128                       ; Copy memory
0129                       ;------------------------------------------------------
0130 2BEE CD74  46 !       mov   *tmp0+,*tmp1+         ; Copy word 1
0131 2BF0 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 2
0132 2BF2 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 3
0133 2BF4 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 4
0134 2BF6 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 5
0135 2BF8 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 6
0136 2BFA CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 7
0137 2BFC CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 8
0138 2BFE 0606  14         dec   tmp2
0139 2C00 16F6  14         jne   -!                    ; Loop until done
0140                       ;------------------------------------------------------
0141                       ; Switch workspace to scratchpad memory
0142                       ;------------------------------------------------------
0143 2C02 02E0  18         lwpi  >8300                 ; Activate copied workspace
     2C04 8300     
0144                       ;------------------------------------------------------
0145                       ; Exit
0146                       ;------------------------------------------------------
0147               cpu.scrpad.pgin.exit:
0148 2C06 045B  20         b     *r11                  ; Return to caller
                   < runlib.asm
0234               
0236                       copy  "fio.equ"                  ; File I/O equates
     **** ****     > fio.equ
0001               * FILE......: fio.equ
0002               * Purpose...: Equates for file I/O operations
0003               
0004               ***************************************************************
0005               * File IO operations - Byte 0 in PAB
0006               ************************************@**************************
0007      0000     io.op.open       equ >00            ; OPEN
0008      0001     io.op.close      equ >01            ; CLOSE
0009      0002     io.op.read       equ >02            ; READ
0010      0003     io.op.write      equ >03            ; WRITE
0011      0004     io.op.rewind     equ >04            ; RESTORE/REWIND
0012      0005     io.op.load       equ >05            ; LOAD
0013      0006     io.op.save       equ >06            ; SAVE
0014      0007     io.op.delfile    equ >07            ; DELETE FILE
0015      0008     io.op.scratch    equ >08            ; SCRATCH
0016      0009     io.op.status     equ >09            ; STATUS
0017               ***************************************************************
0018               * File & data type - Byte 1 in PAB (Bit 0-4)
0019               ***************************************************************
0020               * Bit position: 4  3  21  0
0021               *               |  |  ||   \
0022               *               |  |  ||    File type
0023               *               |  |  ||    0 = INTERNAL
0024               *               |  |  ||    1 = FIXED
0025               *               |  |  \\
0026               *               |  |   File operation
0027               *               |  |   00 - UPDATE
0028               *               |  |   01 - OUTPUT
0029               *               |  |   10 - INPUT
0030               *               |  |   11 - APPEND
0031               *               |  |
0032               *               |  \
0033               *               |   Data type
0034               *               |   0 = DISPLAY
0035               *               |   1 = INTERNAL
0036               *               |
0037               *               \
0038               *                Record type
0039               *                0 = FIXED
0040               *                1 = VARIABLE
0041               ***************************************************************
0042               ; Bit position           43210
0043               ************************************|**************************
0044      0000     io.seq.upd.dis.fix  equ :00000      ; 00
0045      0001     io.rel.upd.dis.fix  equ :00001      ; 01
0046      0003     io.rel.out.dis.fix  equ :00011      ; 02
0047      0002     io.seq.out.dis.fix  equ :00010      ; 03
0048      0004     io.seq.inp.dis.fix  equ :00100      ; 04
0049      0005     io.rel.inp.dis.fix  equ :00101      ; 05
0050      0006     io.seq.app.dis.fix  equ :00110      ; 06
0051      0007     io.rel.app.dis.fix  equ :00111      ; 07
0052      0008     io.seq.upd.int.fix  equ :01000      ; 08
0053      0009     io.rel.upd.int.fix  equ :01001      ; 09
0054      000A     io.seq.out.int.fix  equ :01010      ; 0A
0055      000B     io.rel.out.int.fix  equ :01011      ; 0B
0056      000C     io.seq.inp.int.fix  equ :01100      ; 0C
0057      000D     io.rel.inp.int.fix  equ :01101      ; 0D
0058      000E     io.seq.app.int.fix  equ :01110      ; 0E
0059      000F     io.rel.app.int.fix  equ :01111      ; 0F
0060      0010     io.seq.upd.dis.var  equ :10000      ; 10
0061      0011     io.rel.upd.dis.var  equ :10001      ; 11
0062      0012     io.seq.out.dis.var  equ :10010      ; 12
0063      0013     io.rel.out.dis.var  equ :10011      ; 13
0064      0014     io.seq.inp.dis.var  equ :10100      ; 14
0065      0015     io.rel.inp.dis.var  equ :10101      ; 15
0066      0016     io.seq.app.dis.var  equ :10110      ; 16
0067      0017     io.rel.app.dis.var  equ :10111      ; 17
0068      0018     io.seq.upd.int.var  equ :11000      ; 18
0069      0019     io.rel.upd.int.var  equ :11001      ; 19
0070      001A     io.seq.out.int.var  equ :11010      ; 1A
0071      001B     io.rel.out.int.var  equ :11011      ; 1B
0072      001C     io.seq.inp.int.var  equ :11100      ; 1C
0073      001D     io.rel.inp.int.var  equ :11101      ; 1D
0074      001E     io.seq.app.int.var  equ :11110      ; 1E
0075      001F     io.rel.app.int.var  equ :11111      ; 1F
0076               ***************************************************************
0077               * File error codes - Byte 1 in PAB (Bits 5-7)
0078               ************************************|**************************
0079      0000     io.err.no_error_occured             equ 0
0080                       ; Error code 0 with condition bit reset, indicates that
0081                       ; no error has occured
0082               
0083      0000     io.err.bad_device_name              equ 0
0084                       ; Device indicated not in system
0085                       ; Error code 0 with condition bit set, indicates a
0086                       ; device not present in system
0087               
0088      0001     io.err.device_write_prottected      equ 1
0089                       ; Device is write protected
0090               
0091      0002     io.err.bad_open_attribute           equ 2
0092                       ; One or more of the OPEN attributes are illegal or do
0093                       ; not match the file's actual characteristics.
0094                       ; This could be:
0095                       ;   * File type
0096                       ;   * Record length
0097                       ;   * I/O mode
0098                       ;   * File organization
0099               
0100      0003     io.err.illegal_operation            equ 3
0101                       ; Either an issued I/O command was not supported, or a
0102                       ; conflict with the OPEN mode has occured
0103               
0104      0004     io.err.out_of_table_buffer_space    equ 4
0105                       ; The amount of space left on the device is insufficient
0106                       ; for the requested operation
0107               
0108      0005     io.err.eof                          equ 5
0109                       ; Attempt to read past end of file.
0110                       ; This error may also be given for non-existing records
0111                       ; in a relative record file
0112               
0113      0006     io.err.device_error                 equ 6
0114                       ; Covers all hard device errors, such as parity and
0115                       ; bad medium errors
0116               
0117      0007     io.err.file_error                   equ 7
0118                       ; Covers all file-related error like: program/data
0119                       ; file mismatch, non-existing file opened for input mode, etc.
                   < runlib.asm
0237                       copy  "fio_dsrlnk.asm"           ; DSRLNK for peripheral communication
     **** ****     > fio_dsrlnk.asm
0001               * FILE......: fio_dsrlnk.asm
0002               * Purpose...: Custom DSRLNK implementation
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                          DSRLNK
0006               *//////////////////////////////////////////////////////////////
0007               
0008               
0009               ***************************************************************
0010               * dsrlnk - DSRLNK for file I/O in DSR space >1000 - >1F00
0011               ***************************************************************
0012               *  blwp @dsrlnk
0013               *  data p0
0014               *--------------------------------------------------------------
0015               *  Input:
0016               *  P0     = 8 or 10 (a)
0017               *  @>8356 = Pointer to VDP PAB file descriptor length (PAB+9)
0018               *--------------------------------------------------------------
0019               *  Output:
0020               *  r0 LSB = Bits 13-15 from VDP PAB byte 1, right aligned
0021               *--------------------------------------------------------------
0022               *  Remarks:
0023               *
0024               *  You need to specify following equates in main program
0025               *
0026               *  dsrlnk.dsrlws      equ >????     ; Address of dsrlnk workspace
0027               *  dsrlnk.namsto      equ >????     ; 8-byte RAM buffer for storing device name
0028               *
0029               *  Scratchpad memory usage
0030               *  >8322            Parameter (>08) or (>0A) passed to dsrlnk
0031               *  >8356            Pointer to PAB
0032               *  >83D0            CRU address of current device
0033               *  >83D2            DSR entry address
0034               *  >83e0 - >83ff    GPL / DSRLNK workspace
0035               *
0036               *  Credits
0037               *  Originally appeared in Miller Graphics The Smart Programmer.
0038               *  This version based on version of Paolo Bagnaresi.
0039               *
0040               *  The following memory address can be used to directly jump
0041               *  into the DSR in consequtive calls without having to
0042               *  scan the PEB cards again:
0043               *
0044               *  dsrlnk.namsto  -  8-byte RAM buf for holding device name
0045               *  dsrlnk.savcru  -  CRU address of device in prev. DSR call
0046               *  dsrlnk.savent  -  DSR entry addr of prev. DSR call
0047               *  dsrlnk.savpab  -  Pointer to Device or Subprogram in PAB
0048               *  dsrlnk.savver  -  Version used in prev. DSR call
0049               *  dsrlnk.savlen  -  Length of DSR name of prev. DSR call (in MSB)
0050               *  dsrlnk.flgptr  -  Pointer to VDP PAB byte 1 (flag byte)
0051               
0052               *--------------------------------------------------------------
0053      A40A     dsrlnk.dstype equ   dsrlnk.dsrlws + 10
0054                                                   ; dstype is address of R5 of DSRLNK ws.
0055               ********|*****|*********************|**************************
0056 2C08 A400     dsrlnk  data  dsrlnk.dsrlws         ; dsrlnk workspace
0057 2C0A 2C0C             data  dsrlnk.init           ; Entry point
0058                       ;------------------------------------------------------
0059                       ; DSRLNK entry point
0060                       ;------------------------------------------------------
0061               dsrlnk.init:
0062 2C0C C17E  30         mov   *r14+,r5              ; Get pgm type for link
0063 2C0E C805  38         mov   r5,@dsrlnk.sav8a      ; Save data following blwp @dsrlnk (8 or >a)
     2C10 A428     
0064 2C12 53E0  34         szcb  @hb$20,r15            ; Reset equal bit in status register
     2C14 201C     
0065 2C16 C020  30         mov   @>8356,r0             ; Get pointer to PAB+9 in VDP
     2C18 8356     
0066 2C1A C240  18         mov   r0,r9                 ; Save pointer
0067                       ;------------------------------------------------------
0068                       ; Fetch file descriptor length from PAB
0069                       ;------------------------------------------------------
0070 2C1C 0229  22         ai    r9,>fff8              ; Adjust r9 to addr PAB byte 1
     2C1E FFF8     
0071                                                   ; FLAG byte->(pabaddr+9)-8
0072 2C20 C809  38         mov   r9,@dsrlnk.flgptr     ; Save pointer to PAB byte 1
     2C22 A434     
0073                       ;---------------------------; Inline VSBR start
0074 2C24 06C0  14         swpb  r0                    ;
0075 2C26 D800  30         movb  r0,@vdpa              ; Send low byte
     2C28 8C02     
0076 2C2A 06C0  14         swpb  r0                    ;
0077 2C2C D800  30         movb  r0,@vdpa              ; Send high byte
     2C2E 8C02     
0078 2C30 D0E0  30         movb  @vdpr,r3              ; Read byte from VDP RAM
     2C32 8800     
0079                       ;---------------------------; Inline VSBR end
0080 2C34 0983  32         srl   r3,8                  ; Move to low byte
0081               
0082                       ;------------------------------------------------------
0083                       ; Fetch file descriptor device name from PAB
0084                       ;------------------------------------------------------
0085 2C36 0704  14         seto  r4                    ; Init counter
0086 2C38 0202  20         li    r2,dsrlnk.namsto      ; Point to 8-byte CPU buffer
     2C3A A420     
0087 2C3C 0580  14 !       inc   r0                    ; Point to next char of name
0088 2C3E 0584  14         inc   r4                    ; Increment char counter
0089 2C40 0284  22         ci    r4,>0007              ; Check if length more than 7 chars
     2C42 0007     
0090 2C44 1573  14         jgt   dsrlnk.error.devicename_invalid
0091                                                   ; Yes, error
0092 2C46 80C4  18         c     r4,r3                 ; End of name?
0093 2C48 130C  14         jeq   dsrlnk.device_name.get_length
0094                                                   ; Yes
0095               
0096                       ;---------------------------; Inline VSBR start
0097 2C4A 06C0  14         swpb  r0                    ;
0098 2C4C D800  30         movb  r0,@vdpa              ; Send low byte
     2C4E 8C02     
0099 2C50 06C0  14         swpb  r0                    ;
0100 2C52 D800  30         movb  r0,@vdpa              ; Send high byte
     2C54 8C02     
0101 2C56 D060  30         movb  @vdpr,r1              ; Read byte from VDP RAM
     2C58 8800     
0102                       ;---------------------------; Inline VSBR end
0103               
0104                       ;------------------------------------------------------
0105                       ; Look for end of device name, for example "DSK1."
0106                       ;------------------------------------------------------
0107 2C5A DC81  32         movb  r1,*r2+               ; Move into buffer
0108 2C5C 9801  34         cb    r1,@dsrlnk.period     ; Is character a '.'
     2C5E 2D78     
0109 2C60 16ED  14         jne   -!                    ; No, loop next char
0110                       ;------------------------------------------------------
0111                       ; Determine device name length
0112                       ;------------------------------------------------------
0113               dsrlnk.device_name.get_length:
0114 2C62 C104  18         mov   r4,r4                 ; Check if length = 0
0115 2C64 1363  14         jeq   dsrlnk.error.devicename_invalid
0116                                                   ; Yes, error
0117 2C66 04E0  26         clr   @>83d0
     2C68 83D0     
0118 2C6A C804  30         mov   r4,@>8354             ; Save name length for search (length
     2C6C 8354     
0119                                                   ; goes to >8355 but overwrites >8354!)
0120 2C6E C804  38         mov   r4,@dsrlnk.savlen     ; Save name length for nextr dsrlnk call
     2C70 A432     
0121               
0122 2C72 0584  14         inc   r4                    ; Adjust for dot
0123 2C74 A804  30         a     r4,@>8356             ; Point to position after name
     2C76 8356     
0124 2C78 C820  50         mov   @>8356,@dsrlnk.savpab ; Save pointer for next dsrlnk call
     2C7A 8356     
     2C7C A42E     
0125                       ;------------------------------------------------------
0126                       ; Prepare for DSR scan >1000 - >1f00
0127                       ;------------------------------------------------------
0128               dsrlnk.dsrscan.start:
0129 2C7E 02E0  18         lwpi  >83e0                 ; Use GPL WS
     2C80 83E0     
0130 2C82 04C1  14         clr   r1                    ; Version found of dsr
0131 2C84 020C  20         li    r12,>0f00             ; Init cru address
     2C86 0F00     
0132                       ;------------------------------------------------------
0133                       ; Turn off ROM on current card
0134                       ;------------------------------------------------------
0135               dsrlnk.dsrscan.cardoff:
0136 2C88 C30C  18         mov   r12,r12               ; Anything to turn off?
0137 2C8A 1301  14         jeq   dsrlnk.dsrscan.cardloop
0138                                                   ; No, loop over cards
0139 2C8C 1E00  16         sbz   0                     ; Yes, turn off
0140                       ;------------------------------------------------------
0141                       ; Loop over cards and look if DSR present
0142                       ;------------------------------------------------------
0143               dsrlnk.dsrscan.cardloop:
0144 2C8E 022C  22         ai    r12,>0100             ; Next ROM to turn on
     2C90 0100     
0145 2C92 04E0  26         clr   @>83d0                ; Clear in case we are done
     2C94 83D0     
0146 2C96 028C  22         ci    r12,>2000             ; Card scan complete? (>1000 to >1F00)
     2C98 2000     
0147 2C9A 1346  14         jeq   dsrlnk.error.nodsr_found
0148                                                   ; Yes, no matching DSR found
0149 2C9C C80C  30         mov   r12,@>83d0            ; Save address of next cru
     2C9E 83D0     
0150                       ;------------------------------------------------------
0151                       ; Look at card ROM (@>4000 eq 'AA' ?)
0152                       ;------------------------------------------------------
0153 2CA0 1D00  16         sbo   0                     ; Turn on ROM
0154 2CA2 0202  20         li    r2,>4000              ; Start at beginning of ROM
     2CA4 4000     
0155 2CA6 9812  42         cb    *r2,@dsrlnk.$aa00     ; Check for a valid DSR header
     2CA8 2D74     
0156 2CAA 16EE  14         jne   dsrlnk.dsrscan.cardoff
0157                                                   ; No ROM found on card
0158                       ;------------------------------------------------------
0159                       ; Valid DSR ROM found. Now loop over chain/subprograms
0160                       ;------------------------------------------------------
0161                       ; dstype is the address of R5 of the DSRLNK workspace,
0162                       ; which is where 8 for a DSR or 10 (>A) for a subprogram
0163                       ; is stored before the DSR ROM is searched.
0164                       ;------------------------------------------------------
0165 2CAC A0A0  34         a     @dsrlnk.dstype,r2     ; Goto first pointer (byte 8 or 10)
     2CAE A40A     
0166 2CB0 1003  14         jmp   dsrlnk.dsrscan.getentry
0167                       ;------------------------------------------------------
0168                       ; Next DSR entry
0169                       ;------------------------------------------------------
0170               dsrlnk.dsrscan.nextentry:
0171 2CB2 C0A0  30         mov   @>83d2,r2             ; Offset 0 > Fetch link to next DSR or
     2CB4 83D2     
0172                                                   ; subprogram
0173               
0174 2CB6 1D00  16         sbo   0                     ; Turn ROM back on
0175                       ;------------------------------------------------------
0176                       ; Get DSR entry
0177                       ;------------------------------------------------------
0178               dsrlnk.dsrscan.getentry:
0179 2CB8 C092  26         mov   *r2,r2                ; Is address a zero? (end of chain?)
0180 2CBA 13E6  14         jeq   dsrlnk.dsrscan.cardoff
0181                                                   ; Yes, no more DSRs or programs to check
0182 2CBC C802  30         mov   r2,@>83d2             ; Offset 0 > Store link to next DSR or
     2CBE 83D2     
0183                                                   ; subprogram
0184               
0185 2CC0 05C2  14         inct  r2                    ; Offset 2 > Has call address of current
0186                                                   ; DSR/subprogram code
0187               
0188 2CC2 C272  30         mov   *r2+,r9               ; Store call address in r9. Move r2 to
0189                                                   ; offset 4 (DSR/subprogram name)
0190                       ;------------------------------------------------------
0191                       ; Check file descriptor in DSR
0192                       ;------------------------------------------------------
0193 2CC4 04C5  14         clr   r5                    ; Remove any old stuff
0194 2CC6 D160  30         movb  @>8355,r5             ; Get length as counter
     2CC8 8355     
0195 2CCA 1309  14         jeq   dsrlnk.dsrscan.call_dsr
0196                                                   ; If zero, do not further check, call DSR
0197                                                   ; program
0198               
0199 2CCC 9C85  28         cb    r5,*r2+               ; See if length matches
0200 2CCE 16F1  14         jne   dsrlnk.dsrscan.nextentry
0201                                                   ; No, length does not match.
0202                                                   ; Go process next DSR entry
0203               
0204 2CD0 0985  32         srl   r5,8                  ; Yes, move to low byte
0205 2CD2 0206  20         li    r6,dsrlnk.namsto      ; Point to 8-byte CPU buffer
     2CD4 A420     
0206 2CD6 9CB6  38 !       cb    *r6+,*r2+             ; Compare byte in CPU buffer with byte in
0207                                                   ; DSR ROM
0208 2CD8 16EC  14         jne   dsrlnk.dsrscan.nextentry
0209                                                   ; Try next DSR entry if no match
0210 2CDA 0605  14         dec   r5                    ; Update loop counter
0211 2CDC 16FC  14         jne   -!                    ; Loop until full length checked
0212                       ;------------------------------------------------------
0213                       ; Call DSR program in card/device
0214                       ;------------------------------------------------------
0215               dsrlnk.dsrscan.call_dsr:
0216 2CDE 0581  14         inc   r1                    ; Next version found
0217 2CE0 C80C  38         mov   r12,@dsrlnk.savcru    ; Save CRU address
     2CE2 A42A     
0218 2CE4 C809  38         mov   r9,@dsrlnk.savent     ; Save DSR entry address
     2CE6 A42C     
0219 2CE8 C801  38         mov   r1,@dsrlnk.savver     ; Save DSR Version number
     2CEA A430     
0220               
0221 2CEC 020D  20         li    r13,>9800             ; Set GROM base to >9800 to prevent
     2CEE 9800     
0222                                                   ; lockup of TI Disk Controller DSR.
0223               
0224 2CF0 020F  20         li    r15,>8C02             ; Set VDP port address, needed to prevent
     2CF2 8C02     
0225                                                   ; lockup of TI Disk Controller DSR.
0226               
0227 2CF4 0699  24         bl    *r9                   ; Execute DSR
0228                       ;
0229                       ; Depending on IO result the DSR in card ROM does RET
0230                       ; or (INCT R11 + RET), meaning either (1) or (2) get executed.
0231                       ;
0232 2CF6 10DD  14         jmp   dsrlnk.dsrscan.nextentry
0233                                                   ; (1) error return
0234 2CF8 1E00  16         sbz   0                     ; (2) turn off card/device if good return
0235 2CFA 02E0  18         lwpi  dsrlnk.dsrlws         ; (2) restore workspace
     2CFC A400     
0236 2CFE C009  30         mov   r9,r0                 ; Point to flag byte (PAB+1) in VDP PAB
0237                       ;------------------------------------------------------
0238                       ; Returned from DSR
0239                       ;------------------------------------------------------
0240               dsrlnk.dsrscan.return_dsr:
0241 2D00 C060  42         mov   @dsrlnk.sav8a,r1      ; get back data following blwp @dsrlnk
     2D02 A428     
0242                                                   ; (8 or >a)
0243 2D04 0281  26         ci    r1,8                  ; was it 8?
     2D06 0008     
0244 2D08 1303  14         jeq   dsrlnk.dsrscan.dsr.8  ; yes, jump: normal dsrlnk
0245 2D0A D060  38         movb  @>8350,r1             ; no, we have a data >a.
     2D0C 8350     
0246                                                   ; Get error byte from @>8350
0247 2D0E 1008  14         jmp   dsrlnk.dsrscan.dsr.a  ; go and return error byte to the caller
0248               
0249                       ;------------------------------------------------------
0250                       ; Read VDP PAB byte 1 after DSR call completed (status)
0251                       ;------------------------------------------------------
0252               dsrlnk.dsrscan.dsr.8:
0253                       ;---------------------------; Inline VSBR start
0254 2D10 06C0  22         swpb  r0                    ;
0255 2D12 D800  34         movb  r0,@vdpa              ; send low byte
     2D14 8C02     
0256 2D16 06C0  22         swpb  r0                    ;
0257 2D18 D800  34         movb  r0,@vdpa              ; send high byte
     2D1A 8C02     
0258 2D1C D060  38         movb  @vdpr,r1              ; read byte from VDP ram
     2D1E 8800     
0259                       ;---------------------------; Inline VSBR end
0260               
0261                       ;------------------------------------------------------
0262                       ; Return DSR error to caller
0263                       ;------------------------------------------------------
0264               dsrlnk.dsrscan.dsr.a:
0265 2D20 09D1  50         srl   r1,13                 ; just keep error bits
0266 2D22 1605  14         jne   dsrlnk.error.io_error
0267                                                   ; handle IO error
0268 2D24 0380  30         rtwp                        ; Return from DSR workspace to caller
0269                                                   ; workspace
0270               
0271                       ;------------------------------------------------------
0272                       ; IO-error handler
0273                       ;------------------------------------------------------
0274               dsrlnk.error.nodsr_found_off:
0275 2D26 1E00  20         sbz   >00                   ; Turn card off, nomatter what
0276               dsrlnk.error.nodsr_found:
0277 2D28 02E0  18         lwpi  dsrlnk.dsrlws         ; No DSR found, restore workspace
     2D2A A400     
0278               dsrlnk.error.devicename_invalid:
0279 2D2C 04C1  22         clr   r1                    ; clear flag for error 0 = bad device name
0280               dsrlnk.error.io_error:
0281 2D2E 06C1  22         swpb  r1                    ; put error in hi byte
0282 2D30 D741  38         movb  r1,*r13               ; store error flags in callers r0
0283 2D32 F3E0  42         socb  @hb$20,r15            ; \ Set equal bit in copy of status register
     2D34 201C     
0284                                                   ; / to indicate error
0285 2D36 0380  30         rtwp                        ; Return from DSR workspace to caller
0286                                                   ; workspace
0287               
0288               
0289               ***************************************************************
0290               * dsrln.reuse - Reuse previous DSRLNK call for improved speed
0291               ***************************************************************
0292               *  blwp @dsrlnk.reuse
0293               *--------------------------------------------------------------
0294               *  Input:
0295               *  @>8356         = Pointer to VDP PAB file descriptor length byte (PAB+9)
0296               *  @dsrlnk.savcru = CRU address of device in previous DSR call
0297               *  @dsrlnk.savent = DSR entry address of previous DSR call
0298               *  @dsrlnk.savver = Version used in previous DSR call
0299               *  @dsrlnk.pabptr = Pointer to PAB in VDP memory, set in previous DSR call
0300               *--------------------------------------------------------------
0301               *  Output:
0302               *  r0 LSB = Bits 13-15 from VDP PAB byte 1, right aligned
0303               *--------------------------------------------------------------
0304               *  Remarks:
0305               *   Call the same DSR entry again without having to scan through
0306               *   all devices again.
0307               *
0308               *   Expects dsrlnk.savver, @dsrlnk.savent, @dsrlnk.savcru to be
0309               *   set by previous DSRLNK call.
0310               ********|*****|*********************|**************************
0311               dsrlnk.reuse:
0312 2D38 A400             data  dsrlnk.dsrlws         ; dsrlnk workspace
0313 2D3A 2D3C             data  dsrlnk.reuse.init     ; entry point
0314                       ;------------------------------------------------------
0315                       ; DSRLNK entry point
0316                       ;------------------------------------------------------
0317               dsrlnk.reuse.init:
0318 2D3C 02E0  18         lwpi  >83e0                 ; Use GPL WS
     2D3E 83E0     
0319               
0320 2D40 53E0  34         szcb  @hb$20,r15            ; reset equal bit in status register
     2D42 201C     
0321                       ;------------------------------------------------------
0322                       ; Restore dsrlnk variables of previous DSR call
0323                       ;------------------------------------------------------
0324 2D44 020B  20         li    r11,dsrlnk.savcru     ; Get pointer to last used CRU
     2D46 A42A     
0325 2D48 C33B  30         mov   *r11+,r12             ; Get CRU address         < @dsrlnk.savcru
0326 2D4A C27B  30         mov   *r11+,r9              ; Get DSR entry address   < @dsrlnk.savent
0327 2D4C C83B  42         mov   *r11+,@>8356          ; \ Get pointer to Device name or
     2D4E 8356     
0328                                                   ; / or subprogram in PAB  < @dsrlnk.savpab
0329 2D50 C07B  30         mov   *r11+,R1              ; Get DSR Version number  < @dsrlnk.savver
0330 2D52 C81B  38         mov   *r11,@>8354           ; Get device name length  < @dsrlnk.savlen
     2D54 8354     
0331                       ;------------------------------------------------------
0332                       ; Call DSR program in card/device
0333                       ;------------------------------------------------------
0334 2D56 020F  20         li    r15,>8C02             ; Set VDP port address, needed to prevent
     2D58 8C02     
0335                                                   ; lockup of TI Disk Controller DSR.
0336               
0337 2D5A 1D00  16         sbo   >00                   ; Open card/device ROM
0338               
0339 2D5C 9820  50         cb    @>4000,@dsrlnk.$aa00  ; Valid identifier found?
     2D5E 4000     
     2D60 2D74     
0340 2D62 16E2  14         jne   dsrlnk.error.nodsr_found
0341                                                   ; No, error code 0 = Bad Device name
0342                                                   ; The above jump may happen only in case of
0343                                                   ; either card hardware malfunction or if
0344                                                   ; there are 2 cards opened at the same time.
0345               
0346 2D64 0699  24         bl    *r9                   ; Execute DSR
0347                       ;
0348                       ; Depending on IO result the DSR in card ROM does RET
0349                       ; or (INCT R11 + RET), meaning either (1) or (2) get executed.
0350                       ;
0351 2D66 10DF  14         jmp   dsrlnk.error.nodsr_found_off
0352                                                   ; (1) error return
0353 2D68 1E00  16         sbz   >00                   ; (2) turn off card ROM if good return
0354                       ;------------------------------------------------------
0355                       ; Now check if any DSR error occured
0356                       ;------------------------------------------------------
0357 2D6A 02E0  18         lwpi  dsrlnk.dsrlws         ; Restore workspace
     2D6C A400     
0358 2D6E C020  42         mov   @dsrlnk.flgptr,r0     ; Get pointer to VDP PAB byte 1
     2D70 A434     
0359               
0360 2D72 10C6  14         jmp   dsrlnk.dsrscan.return_dsr
0361                                                   ; Rest is the same as with normal DSRLNK
0362               
0363               
0364               ********************************************************************************
0365               
0366 2D74 AA00     dsrlnk.$aa00      data   >aa00      ; Used for identifying DSR header
0367 2D76 0008     dsrlnk.$0008      data   >0008      ; 8 is the data that usually follows
0368                                                   ; a @blwp @dsrlnk
0369 2D78 2E       dsrlnk.period     text  '.'         ; For finding end of device name
0370               
0371                       even
                   < runlib.asm
0238                       copy  "fio_level3.asm"           ; File I/O level 3 support
     **** ****     > fio_level3.asm
0001               * FILE......: fio_level3.asm
0002               * Purpose...: File I/O level 3 support
0003               
0004               
0005               ***************************************************************
0006               * PAB  - Peripheral Access Block
0007               ********|*****|*********************|**************************
0008               ; my_pab:
0009               ;       byte  io.op.open            ;  0    - OPEN
0010               ;       byte  io.seq.inp.dis.var    ;  1    - INPUT, VARIABLE, DISPLAY
0011               ;                                   ;         Bit 13-15 used by DSR to return
0012               ;                                   ;         file error details to DSRLNK
0013               ;       data  vrecbuf               ;  2-3  - Record buffer in VDP memory
0014               ;       byte  80                    ;  4    - Record length (80 chars maximum)
0015               ;       byte  0                     ;  5    - Character count (bytes read)
0016               ;       data  >0000                 ;  6-7  - Seek record (fixed records only)
0017               ;       byte  >00                   ;  8    - Screen offset (cassette DSR only)
0018               ; -------------------------------------------------------------
0019               ;       byte  11                    ;  9    - File descriptor length
0020               ;       text 'DSK1.MYFILE'          ; 10-.. - File descriptor name
0021               ;                                             (Device + '.' + File name)
0022               ;       even
0023               ***************************************************************
0024               
0025               
0026               ***************************************************************
0027               * file.open - Open File for procesing
0028               ***************************************************************
0029               *  bl   @file.open
0030               *       data P0,P1
0031               *--------------------------------------------------------------
0032               *  P0 = Address of PAB in VDP RAM
0033               *  P1 = LSB contains File type/mode
0034               *--------------------------------------------------------------
0035               *  bl   @xfile.open
0036               *
0037               *  R0 = Address of PAB in VDP RAM
0038               *  R1 = LSB contains File type/mode
0039               *--------------------------------------------------------------
0040               *  Output:
0041               *  tmp0     = Copy of VDP PAB byte 1 after operation
0042               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0043               *  tmp2 LSB = Copy of status register after operation
0044               ********|*****|*********************|**************************
0045               file.open:
0046 2D7A C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0047 2D7C C07B  46         mov   *r11+,r1              ; Get file type/mode
0048               *--------------------------------------------------------------
0049               * Initialisation
0050               *--------------------------------------------------------------
0051               xfile.open:
0052 2D7E 0649  22         dect  stack
0053 2D80 C64B  38         mov   r11,*stack            ; Save return address
0054                       ;------------------------------------------------------
0055                       ; Initialisation
0056                       ;------------------------------------------------------
0057 2D82 0204  24         li    tmp0,dsrlnk.savcru
     2D84 A42A     
0058 2D86 04F4  38         clr   *tmp0+                ; Clear @dsrlnk.savcru
0059 2D88 04F4  38         clr   *tmp0+                ; Clear @dsrlnk.savent
0060 2D8A 04F4  38         clr   *tmp0+                ; Clear @dsrlnk.savver
0061 2D8C 04D4  30         clr   *tmp0                 ; Clear @dsrlnk.pabflg
0062                       ;------------------------------------------------------
0063                       ; Set pointer to VDP disk buffer header
0064                       ;------------------------------------------------------
0065 2D8E 0205  24         li    tmp1,>37D7            ; \ VDP Disk buffer header
     2D90 37D7     
0066 2D92 C805  34         mov   tmp1,@>8370           ; | Pointer at Fixed scratchpad
     2D94 8370     
0067                                                   ; / location
0068 2D96 C801  42         mov   r1,@fh.filetype       ; Set file type/mode
     2D98 A44C     
0069 2D9A 04C5  22         clr   tmp1                  ; io.op.open
0070 2D9C 101F  14         jmp   _file.record.fop      ; Do file operation
0071               
0072               
0073               
0074               ***************************************************************
0075               * file.close - Close currently open file
0076               ***************************************************************
0077               *  bl   @file.close
0078               *       data P0
0079               *--------------------------------------------------------------
0080               *  P0 = Address of PAB in VDP RAM
0081               *--------------------------------------------------------------
0082               *  bl   @xfile.close
0083               *
0084               *  R0 = Address of PAB in VDP RAM
0085               *--------------------------------------------------------------
0086               *  Output:
0087               *  tmp0 LSB = Copy of VDP PAB byte 1 after operation
0088               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0089               *  tmp2 LSB = Copy of status register after operation
0090               ********|*****|*********************|**************************
0091               file.close:
0092 2D9E C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0093               *--------------------------------------------------------------
0094               * Initialisation
0095               *--------------------------------------------------------------
0096               xfile.close:
0097 2DA0 0649  22         dect  stack
0098 2DA2 C64B  38         mov   r11,*stack            ; Save return address
0099 2DA4 0205  24         li    tmp1,io.op.close      ; io.op.close
     2DA6 0001     
0100 2DA8 1019  14         jmp   _file.record.fop      ; Do file operation
0101               
0102               
0103               ***************************************************************
0104               * file.record.read - Read record from file
0105               ***************************************************************
0106               *  bl   @file.record.read
0107               *       data P0
0108               *--------------------------------------------------------------
0109               *  P0 = Address of PAB in VDP RAM (without +9 offset!)
0110               *--------------------------------------------------------------
0111               *  bl   @xfile.record.read
0112               *
0113               *  R0 = Address of PAB in VDP RAM
0114               *--------------------------------------------------------------
0115               *  Output:
0116               *  tmp0     = Copy of VDP PAB byte 1 after operation
0117               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0118               *  tmp2 LSB = Copy of status register after operation
0119               ********|*****|*********************|**************************
0120               file.record.read:
0121 2DAA C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0122               *--------------------------------------------------------------
0123               * Initialisation
0124               *--------------------------------------------------------------
0125 2DAC 0649  22         dect  stack
0126 2DAE C64B  38         mov   r11,*stack            ; Save return address
0127               
0128 2DB0 0205  24         li    tmp1,io.op.read       ; io.op.read
     2DB2 0002     
0129 2DB4 1013  14         jmp   _file.record.fop      ; Do file operation
0130               
0131               
0132               
0133               ***************************************************************
0134               * file.record.write - Write record to file
0135               ***************************************************************
0136               *  bl   @file.record.write
0137               *       data P0
0138               *--------------------------------------------------------------
0139               *  P0 = Address of PAB in VDP RAM (without +9 offset!)
0140               *--------------------------------------------------------------
0141               *  bl   @xfile.record.write
0142               *
0143               *  R0 = Address of PAB in VDP RAM
0144               *--------------------------------------------------------------
0145               *  Output:
0146               *  tmp0     = Copy of VDP PAB byte 1 after operation
0147               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0148               *  tmp2 LSB = Copy of status register after operation
0149               ********|*****|*********************|**************************
0150               file.record.write:
0151 2DB6 C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0152               *--------------------------------------------------------------
0153               * Initialisation
0154               *--------------------------------------------------------------
0155 2DB8 0649  22         dect  stack
0156 2DBA C64B  38         mov   r11,*stack            ; Save return address
0157               
0158 2DBC C100  30         mov   r0,tmp0               ; VDP write address (PAB byte 0)
0159 2DBE 0224  30         ai    tmp0,5                ; Position to PAB byte 5
     2DC0 0005     
0160               
0161 2DC2 C160  42         mov   @fh.reclen,tmp1       ; Get record length
     2DC4 A43E     
0162               
0163 2DC6 06A0  36         bl    @xvputb               ; Write character count to PAB
     2DC8 22CC     
0164                                                   ; \ i  tmp0 = VDP target address
0165                                                   ; / i  tmp1 = Byte to write
0166               
0167 2DCA 0205  24         li    tmp1,io.op.write      ; io.op.write
     2DCC 0003     
0168 2DCE 1006  14         jmp   _file.record.fop      ; Do file operation
0169               
0170               
0171               
0172               file.record.seek:
0173 2DD0 1000  14         nop                         ; Not yet supported
0174               
0175               
0176               file.image.load:
0177 2DD2 1000  14         nop                         ; Not yet supported
0178               
0179               
0180               file.image.save:
0181 2DD4 1000  14         nop                         ; Not yet supported
0182               
0183               
0184               file.delete:
0185 2DD6 1000  14         nop                         ; Not yet supported
0186               
0187               file.rename:
0188 2DD8 1000  14         nop                         ; Not yet supported
0189               
0190               
0191               file.status:
0192 2DDA 1000  14         nop
0193               
0194               
0195               
0196               ***************************************************************
0197               * _file.record.fop - File operation
0198               ***************************************************************
0199               * Called internally via JMP/B by file operations
0200               *--------------------------------------------------------------
0201               *  Input:
0202               *  r0   = Address of PAB in VDP RAM
0203               *  r1   = File type/mode
0204               *  tmp1 = File operation opcode
0205               *
0206               *  @fh.offsetopcode = >00  Data buffer in VDP RAM
0207               *  @fh.offsetopcode = >40  Data buffer in CPU RAM
0208               *--------------------------------------------------------------
0209               *  Output:
0210               *  tmp0     = Copy of VDP PAB byte 1 after operation
0211               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0212               *  tmp2 LSB = Copy of status register after operation
0213               *--------------------------------------------------------------
0214               *  Register usage:
0215               *  r0, r1, tmp0, tmp1, tmp2
0216               *--------------------------------------------------------------
0217               *  Remarks
0218               *  Private, only to be called from inside fio_level3 module
0219               *  via jump or branch instruction.
0220               *
0221               *  Uses @waux1 for backup/restore of memory word @>8322
0222               ********|*****|*********************|**************************
0223               _file.record.fop:
0224                       ;------------------------------------------------------
0225                       ; Write to PAB required?
0226                       ;------------------------------------------------------
0227 2DDC C800  42         mov   r0,@fh.pab.ptr        ; Backup of pointer to current VDP PAB
     2DDE A436     
0228                       ;------------------------------------------------------
0229                       ; Set file opcode in VDP PAB
0230                       ;------------------------------------------------------
0231 2DE0 C100  30         mov   r0,tmp0               ; VDP write address (PAB byte 0)
0232               
0233 2DE2 A160  42         a     @fh.offsetopcode,tmp1 ; Inject offset for file I/O opcode
     2DE4 A44E     
0234                                                   ; >00 = Data buffer in VDP RAM
0235                                                   ; >40 = Data buffer in CPU RAM
0236               
0237 2DE6 06A0  36         bl    @xvputb               ; Write file I/O opcode to VDP
     2DE8 22CC     
0238                                                   ; \ i  tmp0 = VDP target address
0239                                                   ; / i  tmp1 = Byte to write
0240                       ;------------------------------------------------------
0241                       ; Set file type/mode in VDP PAB
0242                       ;------------------------------------------------------
0243 2DEA C100  30         mov   r0,tmp0               ; VDP write address (PAB byte 0)
0244 2DEC 0584  22         inc   tmp0                  ; Next byte in PAB
0245 2DEE C160  42         mov   @fh.filetype,tmp1     ; Get file type/mode
     2DF0 A44C     
0246               
0247 2DF2 06A0  36         bl    @xvputb               ; Write file type/mode to VDP
     2DF4 22CC     
0248                                                   ; \ i  tmp0 = VDP target address
0249                                                   ; / i  tmp1 = Byte to write
0250                       ;------------------------------------------------------
0251                       ; Prepare for DSRLNK
0252                       ;------------------------------------------------------
0253 2DF6 0220  30 !       ai    r0,9                  ; Move to file descriptor length
     2DF8 0009     
0254 2DFA C800  34         mov   r0,@>8356             ; Pass file descriptor to DSRLNK
     2DFC 8356     
0255               *--------------------------------------------------------------
0256               * Call DSRLINK for doing file operation
0257               *--------------------------------------------------------------
0258 2DFE C820  42         mov   @>8322,@waux1         ; Save word at @>8322
     2E00 8322     
     2E02 833C     
0259               
0260 2E04 C120  42         mov   @dsrlnk.savcru,tmp0   ; Call optimized or standard version?
     2E06 A42A     
0261 2E08 1504  14         jgt   _file.record.fop.optimized
0262                                                   ; Optimized version
0263               
0264                       ;------------------------------------------------------
0265                       ; First IO call. Call standard DSRLNK
0266                       ;------------------------------------------------------
0267 2E0A 0420  62         blwp  @dsrlnk               ; Call DSRLNK
     2E0C 2C08     
0268 2E0E 0008                   data >8               ; \ i  p0 = >8 (DSR)
0269                                                   ; / o  r0 = Copy of VDP PAB byte 1
0270 2E10 1002  14         jmp  _file.record.fop.pab   ; Return PAB to caller
0271               
0272                       ;------------------------------------------------------
0273                       ; Recurring IO call. Call optimized DSRLNK
0274                       ;------------------------------------------------------
0275               _file.record.fop.optimized:
0276 2E12 0420  62         blwp  @dsrlnk.reuse         ; Call DSRLNK
     2E14 2D38     
0277               
0278               *--------------------------------------------------------------
0279               * Return PAB details to caller
0280               *--------------------------------------------------------------
0281               _file.record.fop.pab:
0282 2E16 02C6  12         stst  tmp2                  ; Store status register contents in tmp2
0283                                                   ; Upon DSRLNK return status register EQ bit
0284                                                   ; 1 = No file error
0285                                                   ; 0 = File error occured
0286               
0287 2E18 C820  42         mov   @waux1,@>8322         ; Restore word at @>8322
     2E1A 833C     
     2E1C 8322     
0288               *--------------------------------------------------------------
0289               * Get PAB byte 5 from VDP ram into tmp1 (character count)
0290               *--------------------------------------------------------------
0291 2E1E C120  42         mov   @fh.pab.ptr,tmp0      ; Get VDP address of current PAB
     2E20 A436     
0292 2E22 0224  30         ai    tmp0,5                ; Get address of VDP PAB byte 5
     2E24 0005     
0293 2E26 06A0  36         bl    @xvgetb               ; VDP read PAB status byte into tmp0
     2E28 22E4     
0294 2E2A C144  30         mov   tmp0,tmp1             ; Move to destination
0295               *--------------------------------------------------------------
0296               * Get PAB byte 1 from VDP ram into tmp0 (status)
0297               *--------------------------------------------------------------
0298 2E2C C100  30         mov   r0,tmp0               ; VDP PAB byte 1 (status)
0299                                                   ; as returned by DSRLNK
0300               *--------------------------------------------------------------
0301               * Exit
0302               *--------------------------------------------------------------
0303               ; If an error occured during the IO operation, then the
0304               ; equal bit in the saved status register (=tmp2) is set to 1.
0305               ;
0306               ; Upon return from this IO call you should basically test with:
0307               ;       coc   @wbit2,tmp2           ; Equal bit set?
0308               ;       jeq   my_file_io_handler    ; Yes, IO error occured
0309               ;
0310               ; Then look for further details in the copy of VDP PAB byte 1
0311               ; in register tmp0, bits 13-15
0312               ;
0313               ;       srl   tmp0,8                ; Right align (only for DSR type >8
0314               ;                                   ; calls, skip for type >A subprograms!)
0315               ;       ci    tmp0,io.err.<code>    ; Check for error pattern
0316               ;       jeq   my_error_handler
0317               *--------------------------------------------------------------
0318               _file.record.fop.exit:
0319 2E2E C2F9  46         mov   *stack+,r11           ; Pop R11
0320 2E30 045B  24         b     *r11                  ; Return to caller
                   < runlib.asm
0240               
0242                       copy  "rom_fg99.asm"             ; FinalGROM 99 support
     **** ****     > rom_fg99.asm
0001               * FILE......: rom_fg99.asm
0002               * Purpose...: FinalGROM 99 reload code
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *               FinalGROM 99 reload cartridge code
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * fg99 - Load cartridge from flash card into FinalGROM99
0010               ***************************************************************
0011               *  bl   @fg99
0012               *       data p0
0013               *
0014               *  p0 = Pointer to FG99 cartridge table entry
0015               *--------------------------------------------------------------
0016               *  bl   @xfg99
0017               *
0018               *  tmp0 = Pointer to FG99 cartridge table entry
0019               *--------------------------------------------------------------
0020               * Remark
0021               * https://github.com/endlos99/finalgrom99/blob/master/lib/reload_example.a99
0022               *
0023               * NOTE: You must use shortened 8.3 upper-case filenames here.
0024               *       For example, to reload "mylongfile.bin", use "MYLONG~1.BIN".
0025               *       If there are multiple files with prefix "MYLONG" in the
0026               *       folder, you may have to replace the suffix "~1" by "~2",
0027               *       "~3", ... to select the correct file.
0028               *
0029               *       PAD filename with >00 bytes so that it's always 8 bytes.
0030               *       Code is expected to run from RAM, not from the cartridge space.
0031               ********|*****|*********************|**************************
0032 2E32 C13B  46 fg99    mov   *r11+,tmp0            ; Get p0
0033               *--------------------------------------------------------------
0034               * Register version
0035               *--------------------------------------------------------------
0036               xfg99:
0037 2E34 0649  22         dect  stack
0038 2E36 C64B  38         mov   r11,*stack            ; Save return address
0039 2E38 0649  22         dect  stack
0040 2E3A C644  38         mov   tmp0,*stack           ; Push tmp0
0041               *--------------------------------------------------------------
0042               * (1) Send prefix and filename to FinalGROM
0043               *--------------------------------------------------------------
0044 2E3C C004  30         mov   tmp0,r0               ; Get Pointer
0045 2E3E 0202  24         li    r2,20                 ; Len = prefix (8) + fname (8) + suffix (4)
     2E40 0014     
0046               fg99.send.loop:
0047 2E42 04E0  34         clr   @>6000                ; Signal new byte
     2E44 6000     
0048 2E46 0201  24         li    r1,>0038              ; >7000 >> 9
     2E48 0038     
0049 2E4A D070  44         movb  *r0+,r1
0050 2E4C 0B71  38         src   r1,7                  ; >7000 + (byte << 1)
0051               
0052 2E4E 04D1  30         clr   *r1                   ; Send byte
0053 2E50 0602  22         dec   r2                    ; Prepare for next iteration
0054 2E52 16F7  14         jne   fg99.send.loop        ; Next byte
0055               
0056 2E54 04E0  34         clr   @>6000                ; Done sending filename
     2E56 6000     
0057 2E58 0B80  40         src   r0,8                  ; Burn at least 21 cycles
0058               *--------------------------------------------------------------
0059               * (3) Wait for image to be loaded by FinalGROM
0060               *--------------------------------------------------------------
0061               fg99.wait:
0062 2E5A 0200  24         li    r0,>6000              ; check >6000->6200
     2E5C 6000     
0063 2E5E 0202  24         li    r2,>100
     2E60 0100     
0064 2E62 C070  46 !       mov   *r0+, r1
0065 2E64 1603  14         jne   fg99.exit             ; Done loading, run cartridge
0066 2E66 0602  22         dec   r2
0067 2E68 16FC  14         jne   -!
0068 2E6A 10F7  14         jmp   fg99.wait
0069               *--------------------------------------------------------------
0070               * (4) Image finished loading
0071               *--------------------------------------------------------------
0072               fg99.exit:
0073 2E6C C139  46         mov   *stack+,tmp0          ; Pop tmp0
0074 2E6E C2F9  46         mov   *stack+,r11           ; Pop R11
0075 2E70 045B  24         b     *r11                  ; Return to caller
                   < runlib.asm
0244               
0245               *//////////////////////////////////////////////////////////////
0246               *                            TIMERS
0247               *//////////////////////////////////////////////////////////////
0248               
0249                       copy  "timers_tmgr.asm"          ; Timers / Thread scheduler
     **** ****     > timers_tmgr.asm
0001               * FILE......: timers_tmgr.asm
0002               * Purpose...: Timers / Thread scheduler
0003               
0004               ***************************************************************
0005               * TMGR - X - Start Timers/Thread scheduler
0006               ***************************************************************
0007               *  B @TMGR
0008               *--------------------------------------------------------------
0009               *  REMARKS
0010               *  Timer/Thread scheduler. Normally called from MAIN.
0011               *  This is basically the kernel keeping everything together.
0012               *  Do not forget to set BTIHI to highest slot in use.
0013               *
0014               *  Register usage in TMGR8 - TMGR11
0015               *  TMP0  = Pointer to timer table
0016               *  R10LB = Use as slot counter
0017               *  TMP2  = 2nd word of slot data
0018               *  TMP3  = Address of routine to call
0019               ********|*****|*********************|**************************
0020 2E72 0300  22 tmgr    limi  0                     ; No interrupt processing
     2E74 0000     
0021               *--------------------------------------------------------------
0022               * Read VDP status register
0023               *--------------------------------------------------------------
0024 2E76 D360  38 tmgr1   movb  @vdps,r13             ; Save copy of VDP status register in R13
     2E78 8802     
0025               *--------------------------------------------------------------
0026               * Latch sprite collision flag
0027               *--------------------------------------------------------------
0028 2E7A 2360  32         coc   @wbit2,r13            ; C flag on ?
     2E7C 201C     
0029 2E7E 1602  14         jne   tmgr1a                ; No, so move on
0030 2E80 E0A0  42         soc   @wbit12,config        ; Latch bit 12 in config register
     2E82 2008     
0031               *--------------------------------------------------------------
0032               * Interrupt flag
0033               *--------------------------------------------------------------
0034 2E84 2360  32 tmgr1a  coc   @wbit0,r13            ; Interupt flag set ?
     2E86 2020     
0035 2E88 1311  14         jeq   tmgr4                 ; Yes, process slots 0..n
0036               *--------------------------------------------------------------
0037               * Run speech player
0038               *--------------------------------------------------------------
0044               *--------------------------------------------------------------
0045               * Run kernel thread
0046               *--------------------------------------------------------------
0047 2E8A 20A0  32 tmgr2   coc   @wbit8,config         ; Kernel thread blocked ?
     2E8C 2010     
0048 2E8E 1305  14         jeq   tmgr3                 ; Yes, skip to user hook
0049 2E90 20A0  32         coc   @wbit9,config         ; Kernel thread enabled ?
     2E92 200E     
0050 2E94 1602  14         jne   tmgr3                 ; No, skip to user hook
0051 2E96 0460  28         b     @kthread              ; Run kernel thread
     2E98 2F10     
0052               *--------------------------------------------------------------
0053               * Run user hook
0054               *--------------------------------------------------------------
0055 2E9A 20A0  32 tmgr3   coc   @wbit6,config         ; User hook blocked ?
     2E9C 2014     
0056 2E9E 13EB  14         jeq   tmgr1
0057 2EA0 20A0  32         coc   @wbit7,config         ; User hook enabled ?
     2EA2 2012     
0058 2EA4 16E8  14         jne   tmgr1
0059 2EA6 C120  38         mov   @wtiusr,tmp0
     2EA8 832E     
0060 2EAA 0454  24         b     *tmp0                 ; Run user hook
0061               *--------------------------------------------------------------
0062               * Do internal housekeeping
0063               *--------------------------------------------------------------
0064 2EAC 40A0  42 tmgr4   szc   @tmdat,config         ; Unblock kernel thread and user hook
     2EAE 2F0E     
0065 2EB0 C10A  30         mov   r10,tmp0
0066 2EB2 0244  30         andi  tmp0,>00ff            ; Clear HI byte
     2EB4 00FF     
0067 2EB6 20A0  32         coc   @wbit2,config         ; PAL flag set ?
     2EB8 201C     
0068 2EBA 1303  14         jeq   tmgr5
0069 2EBC 0284  26         ci    tmp0,60               ; 1 second reached ?
     2EBE 003C     
0070 2EC0 1002  14         jmp   tmgr6
0071 2EC2 0284  26 tmgr5   ci    tmp0,50
     2EC4 0032     
0072 2EC6 1101  14 tmgr6   jlt   tmgr7                 ; No, continue
0073 2EC8 1001  14         jmp   tmgr8
0074 2ECA 058A  22 tmgr7   inc   r10                   ; Increase tick counter
0075               *--------------------------------------------------------------
0076               * Loop over slots
0077               *--------------------------------------------------------------
0078 2ECC C120  38 tmgr8   mov   @wtitab,tmp0          ; Pointer to timer table
     2ECE 832C     
0079 2ED0 024A  30         andi  r10,>ff00             ; Use R10LB as slot counter. Reset.
     2ED2 FF00     
0080 2ED4 C1D4  38 tmgr9   mov   *tmp0,tmp3            ; Is slot empty ?
0081 2ED6 1316  14         jeq   tmgr11                ; Yes, get next slot
0082               *--------------------------------------------------------------
0083               *  Check if slot should be executed
0084               *--------------------------------------------------------------
0085 2ED8 05C4  22         inct  tmp0                  ; Second word of slot data
0086 2EDA 0594  30         inc   *tmp0                 ; Update tick count in slot
0087 2EDC C194  38         mov   *tmp0,tmp2            ; Get second word of slot data
0088 2EDE 9820  42         cb    @tmp2hb,@tmp2lb       ; Slot target count = Slot internal counter ?
     2EE0 830C     
     2EE2 830D     
0089 2EE4 1608  14         jne   tmgr10                ; No, get next slot
0090 2EE6 0246  30         andi  tmp2,>ff00            ; Clear internal counter
     2EE8 FF00     
0091 2EEA C506  38         mov   tmp2,*tmp0            ; Update timer table
0092               *--------------------------------------------------------------
0093               *  Run slot, we only need TMP0 to survive
0094               *--------------------------------------------------------------
0095 2EEC C804  34         mov   tmp0,@wtitmp          ; Save TMP0
     2EEE 8330     
0096 2EF0 0697  32         bl    *tmp3                 ; Call routine in slot
0097 2EF2 C120  38 slotok  mov   @wtitmp,tmp0          ; Restore TMP0
     2EF4 8330     
0098               *--------------------------------------------------------------
0099               *  Prepare for next slot
0100               *--------------------------------------------------------------
0101 2EF6 058A  22 tmgr10  inc   r10                   ; Next slot
0102 2EF8 9820  42         cb    @r10lb,@btihi         ; Last slot done ?
     2EFA 8315     
     2EFC 8314     
0103 2EFE 1504  14         jgt   tmgr12                ; yes, Wait for next VDP interrupt
0104 2F00 05C4  22         inct  tmp0                  ; Offset for next slot
0105 2F02 10E8  14         jmp   tmgr9                 ; Process next slot
0106 2F04 05C4  22 tmgr11  inct  tmp0                  ; Skip 2nd word of slot data
0107 2F06 10F7  14         jmp   tmgr10                ; Process next slot
0108 2F08 024A  30 tmgr12  andi  r10,>ff00             ; Use R10LB as tick counter. Reset.
     2F0A FF00     
0109 2F0C 10B4  14         jmp   tmgr1
0110 2F0E 0280     tmdat   data  >0280                 ; Bit 8 (kernel thread) and bit 6 (user hook)
0111               
                   < runlib.asm
0250                       copy  "timers_kthread.asm"       ; Timers / Kernel thread
     **** ****     > timers_kthread.asm
0001               * FILE......: timers_kthread.asm
0002               * Purpose...: Timers / The kernel thread
0003               
0004               
0005               ***************************************************************
0006               * KTHREAD - The kernel thread
0007               *--------------------------------------------------------------
0008               *  REMARKS
0009               *  You should not call the kernel thread manually.
0010               *  Instead control it via the CONFIG register.
0011               *
0012               *  The kernel thread is responsible for running the sound
0013               *  player and doing keyboard scan.
0014               ********|*****|*********************|**************************
0015 2F10 E0A0  42 kthread soc   @wbit8,config         ; Block kernel thread
     2F12 2010     
0016               *--------------------------------------------------------------
0017               * Run sound player
0018               *--------------------------------------------------------------
0022 2F14 20A0  32         coc   @wbit13,config        ; Sound player on ?
     2F16 2006     
0023 2F18 1602  14         jne   kthread_kb
0024 2F1A 06A0  36         bl    @sdpla1               ; Run sound player
     2F1C 28A4     
0026               *--------------------------------------------------------------
0027               * Scan virtual keyboard
0028               *--------------------------------------------------------------
0029               kthread_kb
0031               *       <<skipped>>
0035               *--------------------------------------------------------------
0036               * Scan real keyboard
0037               *--------------------------------------------------------------
0042 2F1E 06A0  36         bl    @rkscan               ; Scan full keyboard with ROM#0 KSCAN
     2F20 2924     
0047               *--------------------------------------------------------------
0048               kthread_exit
0049 2F22 0460  28         b     @tmgr3                ; Exit
     2F24 2E9A     
                   < runlib.asm
0251                       copy  "timers_hooks.asm"         ; Timers / User hooks
     **** ****     > timers_hooks.asm
0001               * FILE......: timers_kthread.asm
0002               * Purpose...: Timers / User hooks
0003               
0004               
0005               ***************************************************************
0006               * MKHOOK - Allocate user hook
0007               ***************************************************************
0008               *  BL    @MKHOOK
0009               *  DATA  P0
0010               *--------------------------------------------------------------
0011               *  P0 = Address of user hook
0012               *--------------------------------------------------------------
0013               *  REMARKS
0014               *  The user hook gets executed after the kernel thread.
0015               *  The user hook must always exit with "B @HOOKOK"
0016               ********|*****|*********************|**************************
0017 2F26 C83B  50 mkhook  mov   *r11+,@wtiusr         ; Set user hook address
     2F28 832E     
0018 2F2A E0A0  42         soc   @wbit7,config         ; Enable user hook
     2F2C 2012     
0019 2F2E 045B  24 mkhoo1  b     *r11                  ; Return
0020      2E76     hookok  equ   tmgr1                 ; Exit point for user hook
0021               
0022               
0023               ***************************************************************
0024               * CLHOOK - Clear user hook
0025               ***************************************************************
0026               *  BL    @CLHOOK
0027               ********|*****|*********************|**************************
0028 2F30 04E0  26 clhook  clr   @wtiusr               ; Unset user hook address
     2F32 832E     
0029 2F34 0242  30         andi  config,>feff          ; Disable user hook (bit 7=0)
     2F36 FEFF     
0030 2F38 045B  24         b     *r11                  ; Return
                   < runlib.asm
0252               
0254                       copy  "timers_alloc.asm"         ; Timers / Slot calculation
     **** ****     > timers_alloc.asm
0001               * FILE......: timer_alloc.asm
0002               * Purpose...: Timers / Timer allocation
0003               
0004               
0005               ***************************************************************
0006               * MKSLOT - Allocate timer slot(s)
0007               ***************************************************************
0008               *  BL    @MKSLOT
0009               *  BYTE  P0HB,P0LB
0010               *  DATA  P1
0011               *  ....
0012               *  DATA  EOL                        ; End-of-list
0013               *--------------------------------------------------------------
0014               *  P0 = Slot number, target count
0015               *  P1 = Subroutine to call via BL @xxxx if slot is fired
0016               ********|*****|*********************|**************************
0017 2F3A C13B  46 mkslot  mov   *r11+,tmp0
0018 2F3C C17B  46         mov   *r11+,tmp1
0019               *--------------------------------------------------------------
0020               *  Calculate address of slot
0021               *--------------------------------------------------------------
0022 2F3E C184  30         mov   tmp0,tmp2
0023 2F40 0966  36         srl   tmp2,6                ; Right align & TMP2 = TMP2 * 4
0024 2F42 A1A0  38         a     @wtitab,tmp2          ; Add table base
     2F44 832C     
0025               *--------------------------------------------------------------
0026               *  Add slot to table
0027               *--------------------------------------------------------------
0028 2F46 CD85  46         mov   tmp1,*tmp2+           ; Store address of subroutine
0029 2F48 0A84  40         sla   tmp0,8                ; Get rid of slot number
0030 2F4A C584  38         mov   tmp0,*tmp2            ; Store target count and reset tick count
0031               *--------------------------------------------------------------
0032               *  Check for end of list
0033               *--------------------------------------------------------------
0034 2F4C 881B  46         c     *r11,@w$ffff          ; End of list ?
     2F4E 2022     
0035 2F50 1301  14         jeq   mkslo1                ; Yes, exit
0036 2F52 10F3  14         jmp   mkslot                ; Process next entry
0037               *--------------------------------------------------------------
0038               *  Exit
0039               *--------------------------------------------------------------
0040 2F54 05CB  22 mkslo1  inct  r11
0041 2F56 045B  24         b     *r11                  ; Exit
0042               
0043               
0044               ***************************************************************
0045               * CLSLOT - Clear single timer slot
0046               ***************************************************************
0047               *  BL    @CLSLOT
0048               *  DATA  P0
0049               *--------------------------------------------------------------
0050               *  P0 = Slot number
0051               ********|*****|*********************|**************************
0052 2F58 C13B  46 clslot  mov   *r11+,tmp0
0053 2F5A 0A24  28 xlslot  sla   tmp0,2                ; TMP0 = TMP0*4
0054 2F5C A120  38         a     @wtitab,tmp0          ; Add table base
     2F5E 832C     
0055 2F60 04F4  38         clr   *tmp0+                ; Clear 1st word of slot
0056 2F62 04D4  30         clr   *tmp0                 ; Clear 2nd word of slot
0057 2F64 045B  24         b     *r11                  ; Exit
0058               
0059               
0060               ***************************************************************
0061               * RSSLOT - Reset single timer slot loop counter
0062               ***************************************************************
0063               *  BL    @RSSLOT
0064               *  DATA  P0
0065               *--------------------------------------------------------------
0066               *  P0 = Slot number
0067               ********|*****|*********************|**************************
0068 2F66 C13B  46 rsslot  mov   *r11+,tmp0
0069 2F68 0A24  28         sla   tmp0,2                ; TMP0 = TMP0*4
0070 2F6A A120  38         a     @wtitab,tmp0          ; Add table base
     2F6C 832C     
0071 2F6E 05C4  22         inct  tmp0                  ; Skip 1st word of slot
0072 2F70 C154  38         mov   *tmp0,tmp1
0073 2F72 0245  30         andi  tmp1,>ff00            ; Clear LSB (loop counter)
     2F74 FF00     
0074 2F76 C505  38         mov   tmp1,*tmp0
0075 2F78 045B  24         b     *r11                  ; Exit
                   < runlib.asm
0256               
0257               
0258               
0259               *//////////////////////////////////////////////////////////////
0260               *                    RUNLIB INITIALISATION
0261               *//////////////////////////////////////////////////////////////
0262               
0263               ***************************************************************
0264               *  RUNLIB - Runtime library initalisation
0265               ***************************************************************
0266               *  B  @RUNLIB
0267               *--------------------------------------------------------------
0268               *  REMARKS
0269               *  if R0 in WS1 equals >4a4a we were called from the system
0270               *  crash handler so we return there after initialisation.
0271               
0272               *  If R1 in WS1 equals >FFFF we return to the TI title screen
0273               *  after clearing scratchpad memory. This has higher priority
0274               *  as crash handler flag R0.
0275               ********|*****|*********************|**************************
0282 2F7A 04E0  26 runlib  clr   @>8302                ; Reset exit flag (R1 in workspace WS1!)
     2F7C 8302     
0284               *--------------------------------------------------------------
0285               * Alternative entry point
0286               *--------------------------------------------------------------
0287 2F7E 0300  22 runli1  limi  0                     ; Turn off interrupts
     2F80 0000     
0288 2F82 02E0  18         lwpi  ws1                   ; Activate workspace 1
     2F84 8300     
0289 2F86 C0E0  30         mov   @>83c0,r3             ; Get random seed from OS monitor
     2F88 83C0     
0290               *--------------------------------------------------------------
0291               * Clear scratch-pad memory from R4 upwards
0292               *--------------------------------------------------------------
0293 2F8A 0202  20 runli2  li    r2,>8308
     2F8C 8308     
0294 2F8E 04F2  30 runli3  clr   *r2+                  ; Clear scratchpad >8306->83FF
0295 2F90 0282  22         ci    r2,>8400
     2F92 8400     
0296 2F94 16FC  14         jne   runli3
0297               *--------------------------------------------------------------
0298               * Exit to TI-99/4A title screen ?
0299               *--------------------------------------------------------------
0300 2F96 0281  22 runli3a ci    r1,>ffff              ; Exit flag set ?
     2F98 FFFF     
0301 2F9A 1602  14         jne   runli4                ; No, continue
0302 2F9C 0420  42         blwp  @0                    ; Yes, bye bye
     2F9E 0000     
0303               *--------------------------------------------------------------
0304               * Determine if VDP is PAL or NTSC
0305               *--------------------------------------------------------------
0306 2FA0 C803  30 runli4  mov   r3,@waux1             ; Store random seed
     2FA2 833C     
0307 2FA4 04C1  14         clr   r1                    ; Reset counter
0308 2FA6 0202  20         li    r2,10                 ; We test 10 times
     2FA8 000A     
0309 2FAA C0E0  30 runli5  mov   @vdps,r3
     2FAC 8802     
0310 2FAE 20E0  32         coc   @wbit0,r3             ; Interupt flag set ?
     2FB0 2020     
0311 2FB2 1302  14         jeq   runli6
0312 2FB4 0581  14         inc   r1                    ; Increase counter
0313 2FB6 10F9  14         jmp   runli5
0314 2FB8 0602  14 runli6  dec   r2                    ; Next test
0315 2FBA 16F7  14         jne   runli5
0316 2FBC 0281  22         ci    r1,>1250              ; Max for NTSC reached ?
     2FBE 1250     
0317 2FC0 1202  14         jle   runli7                ; No, so it must be NTSC
0318 2FC2 0262  22         ori   config,palon          ; Yes, it must be PAL, set flag
     2FC4 201C     
0319               *--------------------------------------------------------------
0320               * Copy machine code to scratchpad (prepare tight loop)
0321               *--------------------------------------------------------------
0322 2FC6 06A0  32 runli7  bl    @loadmc
     2FC8 221A     
0323               *--------------------------------------------------------------
0324               * Initialize registers, memory, ...
0325               *--------------------------------------------------------------
0326 2FCA 04C1  14 runli9  clr   r1
0327 2FCC 04C2  14         clr   r2
0328 2FCE 04C3  14         clr   r3
0329 2FD0 0209  20         li    stack,sp2.stktop      ; Set top of stack (grows downwards!)
     2FD2 A900     
0330 2FD4 020F  20         li    r15,vdpw              ; Set VDP write address
     2FD6 8C00     
0332 2FD8 06A0  32         bl    @mute                 ; Mute sound generators
     2FDA 2868     
0334               *--------------------------------------------------------------
0335               * Setup video memory
0336               *--------------------------------------------------------------
0338 2FDC 0280  22         ci    r0,>4a4a              ; Crash flag set?
     2FDE 4A4A     
0339 2FE0 1605  14         jne   runlia
0340 2FE2 06A0  32         bl    @filv                 ; Clear 12K VDP memory instead
     2FE4 228E     
0341 2FE6 0000             data  >0000,>00,>3000       ; of 16K, so that PABs survive
     2FE8 0000     
     2FEA 3000     
0346 2FEC 06A0  32 runlia  bl    @filv
     2FEE 228E     
0347 2FF0 0FC0             data  pctadr,spfclr,16      ; Load color table
     2FF2 00F4     
     2FF4 0010     
0348               *--------------------------------------------------------------
0349               * Check if there is a F18A present
0350               *--------------------------------------------------------------
0354 2FF6 06A0  32         bl    @f18unl               ; Unlock the F18A
     2FF8 2748     
0355 2FFA 06A0  32         bl    @f18chk               ; Check if F18A is there \
     2FFC 2772     
0356 2FFE 06A0  32         bl    @f18chk               ; Check if F18A is there | js99er bug?
     3000 2772     
0357 3002 06A0  32         bl    @f18chk               ; Check if F18A is there /
     3004 2772     
0358 3006 06A0  32         bl    @f18lck               ; Lock the F18A again
     3008 275E     
0359               
0360 300A 06A0  32         bl    @putvr                ; Reset all F18a extended registers
     300C 2332     
0361 300E 3201                   data >3201            ; F18a VR50 (>32), bit 1
0363               *--------------------------------------------------------------
0364               * Check if there is a speech synthesizer attached
0365               *--------------------------------------------------------------
0367               *       <<skipped>>
0371               *--------------------------------------------------------------
0372               * Load video mode table & font
0373               *--------------------------------------------------------------
0374 3010 06A0  32 runlic  bl    @vidtab               ; Load video mode table into VDP
     3012 22F8     
0375 3014 7F10             data  spvmod                ; Equate selected video mode table
0376 3016 0204  20         li    tmp0,spfont           ; Get font option
     3018 0000     
0377 301A 0544  14         inv   tmp0                  ; NOFONT (>FFFF) specified ?
0378 301C 1304  14         jeq   runlid                ; Yes, skip it
0379 301E 06A0  32         bl    @ldfnt
     3020 2360     
0380 3022 1100             data  fntadr,spfont         ; Load specified font
     3024 0000     
0381               *--------------------------------------------------------------
0382               * Did a system crash occur before runlib was called?
0383               *--------------------------------------------------------------
0384 3026 0280  22 runlid  ci    r0,>4a4a              ; Crash flag set?
     3028 4A4A     
0385 302A 1602  14         jne   runlie                ; No, continue
0386 302C 0460  28         b     @cpu.crash.main       ; Yes, back to crash handler
     302E 2086     
0387               *--------------------------------------------------------------
0388               * Branch to main program
0389               *--------------------------------------------------------------
0390 3030 0262  22 runlie  ori   config,>0040          ; Enable kernel thread (bit 9 on)
     3032 0040     
0391 3034 0460  28         b     @main                 ; Give control to main program
     3036 6046     
                   < stevie_b7.asm
0054                       copy  "rom.resident.asm"
     **** ****     > rom.resident.asm
0001               * FILE......: rom.resident.asm
0002               * Purpose...: Resident modules in LOW MEMEXP RAM callable from all ROM banks.
0003               
0004                 ; Watch out! Avoid relying on calling code stored in the cartridge ROM area.
0005                 ; It's easier to directly do farjmp call, and this is what we do.
0006                 ; Especially for the spectra2 tasks.
0007               
0008                       ;------------------------------------------------------
0009                       ; Low-level modules
0010                       ;------------------------------------------------------
0011                       copy  "rom.farjump.asm"      ; ROM bankswitch trampoline
     **** ****     > rom.farjump.asm
0001               * FILE......: rom.farjump.asm
0002               * Purpose...: Trampoline to routine in other ROM bank
0003               
0004               ***************************************************************
0005               * rom.farjump - Jump to routine in specified bank
0006               ***************************************************************
0007               *  bl   @rom.farjump
0008               *       data p0,p1,p2
0009               *--------------------------------------------------------------
0010               *  p0 = Write address of target ROM bank
0011               *  p1 = Vector address with target address to jump to
0012               *  p2 = Write address of source ROM bank
0013               *--------------------------------------------------------------
0014               *  bl @xrom.farjump
0015               *
0016               *  tmp0 = Write address of target ROM bank
0017               *  tmp1 = Vector address with target address to jump to
0018               *  tmp2 = Write address of source ROM bank
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * tmp0,tmp1,tmp2,tmp3
0022               *--------------------------------------------------------------
0023               *  Remarks
0024               *  r11 gets pushed/popped from farjump stack, not from normal
0025               *  value stack.
0026               ********|*****|*********************|**************************
0027               rom.farjump:
0028 3038 0649  14         dect  stack
0029 303A C644  30         mov   tmp0,*stack           ; Push tmp0
0030 303C 0649  14         dect  stack
0031 303E C645  30         mov   tmp1,*stack           ; Push tmp1
0032 3040 0649  14         dect  stack
0033 3042 C646  30         mov   tmp2,*stack           ; Push tmp2
0034 3044 0649  14         dect  stack
0035 3046 C647  30         mov   tmp3,*stack           ; Push tmp3
0036                       ;------------------------------------------------------
0037                       ; Parameters
0038                       ;------------------------------------------------------
0039 3048 C13B  30         mov   *r11+,tmp0            ; P0
0040 304A C17B  30         mov   *r11+,tmp1            ; P1
0041 304C C1BB  30         mov   *r11+,tmp2            ; P2
0042 304E 1008  14         jmp   xrom.farjump.push_return
0043                       ;------------------------------------------------------
0044                       ; Push registers to value stack (but not r11!)
0045                       ;------------------------------------------------------
0046               xrom.farjump:
0047 3050 0649  14         dect  stack
0048 3052 C644  30         mov   tmp0,*stack           ; Push tmp0
0049 3054 0649  14         dect  stack
0050 3056 C645  30         mov   tmp1,*stack           ; Push tmp1
0051 3058 0649  14         dect  stack
0052 305A C646  30         mov   tmp2,*stack           ; Push tmp2
0053 305C 0649  14         dect  stack
0054 305E C647  30         mov   tmp3,*stack           ; Push tmp3
0055                       ;------------------------------------------------------
0056                       ; Push to farjump return stack
0057                       ;------------------------------------------------------
0058               xrom.farjump.push_return:
0059 3060 0284  22         ci    tmp0,>6000            ; Invalid bank write address?
     3062 6000     
0060 3064 1116  14         jlt   rom.farjump.bankswitch.failed1
0061                                                   ; Crash if bogus value in bank write address
0062               
0063 3066 C1E0  34         mov   @tv.fj.stackpnt,tmp3  ; Get farjump stack pointer
     3068 A228     
0064 306A 0647  14         dect  tmp3
0065 306C C5CB  30         mov   r11,*tmp3             ; Push return address to farjump stack
0066 306E 0647  14         dect  tmp3
0067 3070 C5C6  30         mov   tmp2,*tmp3            ; Push source ROM bank to farjump stack
0068 3072 C807  38         mov   tmp3,@tv.fj.stackpnt  ; Set farjump stack pointer
     3074 A228     
0069               
0073               
0074                       ;------------------------------------------------------
0075                       ; Bankswitch to target 8K ROM bank
0076                       ;------------------------------------------------------
0077               rom.farjump.bankswitch.target.rom8k:
0078 3076 04D4  26         clr   *tmp0                 ; Switch to target ROM bank 8K >6000
0079 3078 1004  14         jmp   rom.farjump.bankswitch.tgt.done
0080                       ;------------------------------------------------------
0081                       ; Bankswitch to target 4K ROM / 4K RAM banks (FG99 advanced mode)
0082                       ;------------------------------------------------------
0083               rom.farjump.bankswitch.tgt.advfg99:
0084 307A 04D4  26         clr   *tmp0                 ; Switch to target ROM bank 4K >6000
0085 307C 0224  22         ai    tmp0,>0800
     307E 0800     
0086 3080 04D4  26         clr   *tmp0                 ; Switch to target RAM bank 4K >7000
0087                       ;------------------------------------------------------
0088                       ; Bankswitch to target bank(s) completed
0089                       ;------------------------------------------------------
0090               rom.farjump.bankswitch.tgt.done:
0091                       ;------------------------------------------------------
0092                       ; Deref vector from @trmpvector if >ffff
0093                       ;------------------------------------------------------
0094 3082 0285  22         ci    tmp1,>ffff
     3084 FFFF     
0095 3086 1602  14         jne   !
0096 3088 C160  34         mov   @trmpvector,tmp1
     308A A034     
0097                       ;------------------------------------------------------
0098                       ; Deref value in vector
0099                       ;------------------------------------------------------
0100 308C C115  26 !       mov   *tmp1,tmp0            ; Deref value in vector address
0101 308E 1301  14         jeq   rom.farjump.bankswitch.failed1
0102                                                   ; Crash if null-pointer in vector
0103               
0104 3090 1004  14         jmp   rom.farjump.bankswitch.call
0105                                                   ; Call function in target bank
0106                       ;------------------------------------------------------
0107                       ; Assert 1 failed before bank-switch
0108                       ;------------------------------------------------------
0109               rom.farjump.bankswitch.failed1:
0110 3092 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     3094 FFCE     
0111 3096 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     3098 2026     
0112                       ;------------------------------------------------------
0113                       ; Call function in target bank
0114                       ;------------------------------------------------------
0115               rom.farjump.bankswitch.call:
0116 309A 0694  24         bl    *tmp0                 ; Call function
0117                       ;------------------------------------------------------
0118                       ; Bankswitch back to source bank
0119                       ;------------------------------------------------------
0120               rom.farjump.return:
0121 309C C120  34         mov   @tv.fj.stackpnt,tmp0  ; Get farjump stack pointer
     309E A228     
0122 30A0 C154  26         mov   *tmp0,tmp1            ; Get bank write address of caller
0123 30A2 1319  14         jeq   rom.farjump.bankswitch.failed2
0124                                                   ; Crash if null-pointer in address
0125               
0126 30A4 04F4  30         clr   *tmp0+                ; Remove bank write address from
0127                                                   ; farjump stack
0128               
0129 30A6 C2D4  26         mov   *tmp0,r11             ; Get return addr of caller for return
0130               
0131 30A8 04F4  30         clr   *tmp0+                ; Remove return address of caller from
0132                                                   ; farjump stack
0133               
0134                       ;------------------------------------------------------
0135                       ; Assert on memory source address in cartridge space
0136                       ;------------------------------------------------------
0137               rom.farjump.assert.cart:
0138 30AA 028B  22         ci    r11,>6000
     30AC 6000     
0139 30AE 1104  14         jlt   rom.farjump.assert.lowmem
0140 30B0 028B  22         ci    r11,>7fff
     30B2 7FFF     
0141 30B4 1510  14         jgt   rom.farjump.bankswitch.failed2
0142 30B6 1006  14         jmp   !
0143                       ;------------------------------------------------------
0144                       ; Assert on memory source address in low memory expansion
0145                       ;------------------------------------------------------
0146               rom.farjump.assert.lowmem:
0147 30B8 028B  22         ci    r11,>2000
     30BA 2000     
0148 30BC 110C  14         jlt   rom.farjump.bankswitch.failed2
0149 30BE 028B  22         ci    r11,>3fff
     30C0 3FFF     
0150 30C2 1509  14         jgt   rom.farjump.bankswitch.failed2
0151                       ;------------------------------------------------------
0152                       ; Update farjump return stack pointer
0153                       ;------------------------------------------------------
0154 30C4 C804  38 !       mov   tmp0,@tv.fj.stackpnt  ; Update farjump return stack pointer
     30C6 A228     
0155               
0159                       ;------------------------------------------------------
0160                       ; Bankswitch to source 8K ROM bank
0161                       ;------------------------------------------------------
0162               rom.farjump.bankswitch.src.rom8k:
0163 30C8 04D5  26         clr   *tmp1                 ; Switch to source ROM bank 8K >6000
0164 30CA 1009  14         jmp   rom.farjump.exit
0165                       ;------------------------------------------------------
0166                       ; Bankswitch to source 4K ROM / 4K RAM banks (FG99 advanced mode)
0167                       ;------------------------------------------------------
0168               rom.farjump.bankswitch.src.advfg99:
0169 30CC 04D5  26         clr   *tmp1                 ; Switch to source ROM bank 4K >6000
0170 30CE 0225  22         ai    tmp1,>0800
     30D0 0800     
0171 30D2 04D5  26         clr   *tmp1                 ; Switch to source RAM bank 4K >7000
0172 30D4 1004  14         jmp   rom.farjump.exit
0173                       ;------------------------------------------------------
0174                       ; Assert 2 failed after bank-switch
0175                       ;------------------------------------------------------
0176               rom.farjump.bankswitch.failed2:
0177 30D6 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     30D8 FFCE     
0178 30DA 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     30DC 2026     
0179                       ;-------------------------------------------------------
0180                       ; Exit
0181                       ;-------------------------------------------------------
0182               rom.farjump.exit:
0183 30DE C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0184 30E0 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0185 30E2 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0186 30E4 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0187                       ;
0188                       ; Attention!
0189                       ; r11 was popped from farjump stack, not from value stack!
0190                       ; See rom.farjump.return
0191                       ;
0192 30E6 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0012                       copy  "fb.asm"               ; Framebuffer
     **** ****     > fb.asm
0001               * FILE......: fb.asm
0002               * Purpose...: Initialize framebuffer
0003               
0004               ***************************************************************
0005               * fb.init
0006               * Initialize framebuffer
0007               ***************************************************************
0008               *  bl   @fb.init
0009               *--------------------------------------------------------------
0010               *  INPUT
0011               *  none
0012               *--------------------------------------------------------------
0013               *  OUTPUT
0014               *  none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               ********|*****|*********************|**************************
0019               fb.init:
0020 30E8 0649  14         dect  stack
0021 30EA C64B  30         mov   r11,*stack            ; Save return address
0022 30EC 0649  14         dect  stack
0023 30EE C644  30         mov   tmp0,*stack           ; Push tmp0
0024 30F0 0649  14         dect  stack
0025 30F2 C645  30         mov   tmp1,*stack           ; Push tmp1
0026                       ;------------------------------------------------------
0027                       ; Initialize
0028                       ;------------------------------------------------------
0029 30F4 0204  20         li    tmp0,fb.top
     30F6 D000     
0030 30F8 C804  38         mov   tmp0,@fb.top.ptr      ; Set pointer to framebuffer
     30FA A300     
0031 30FC 04E0  34         clr   @fb.topline           ; Top line in framebuffer
     30FE A304     
0032 3100 04E0  34         clr   @fb.row               ; Current row=0
     3102 A306     
0033 3104 04E0  34         clr   @fb.column            ; Current column=0
     3106 A30C     
0034               
0035 3108 0204  20         li    tmp0,colrow
     310A 0050     
0036 310C C804  38         mov   tmp0,@fb.colsline     ; Columns per row=80
     310E A30E     
0037 3110 04E0  34         clr   @fb.vwco              ; Set view window column offset
     3112 A310     
0038               
0039 3114 0204  20         li    tmp0,pane.botrow-1    ; \ Framebuffer
     3116 001C     
0040 3118 C804  38         mov   tmp0,@fb.scrrows.max  ; / Maximum number of physical rows for fb
     311A A31E     
0041               
0042 311C 06A0  32         bl    @fb.calc.scrrows      ; Calculate number of rows
     311E 3184     
0043                                                   ; \ i  @tv.ruler.visible = Ruler visible
0044                                                   ; | i  @edb.special.file = Special file flag
0045                                                   ; / i  @tv.error.visible = Error visible
0046               
0047 3120 04E0  34         clr   @tv.pane.focus        ; Frame buffer has focus!
     3122 A224     
0048 3124 04E0  34         clr   @fb.colorize          ; Don't colorize M1/M2 lines
     3126 A312     
0049 3128 0720  34         seto  @fb.dirty             ; Set dirty flag (trigger screen update)
     312A A318     
0050 312C 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     312E A31A     
0051                       ;------------------------------------------------------
0052                       ; Clear frame buffer
0053                       ;------------------------------------------------------
0054 3130 06A0  32         bl    @film
     3132 2236     
0055 3134 D000             data  fb.top,>00,fb.size    ; Clear it all the way
     3136 0000     
     3138 0960     
0056                       ;------------------------------------------------------
0057                       ; Exit
0058                       ;------------------------------------------------------
0059               fb.init.exit:
0060 313A C179  30         mov   *stack+,tmp1          ; Pop tmp1
0061 313C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0062 313E C2F9  30         mov   *stack+,r11           ; Pop r11
0063 3140 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0013                       copy  "fb.row2line.asm"      ; Calculate line in editor buffer
     **** ****     > fb.row2line.asm
0001               * FILE......: fb.row2line.asm
0002               * Purpose...: Calculate line in editor buffer
0003               
0004               ***************************************************************
0005               * fb.row2line
0006               * Calculate line in editor buffer
0007               ***************************************************************
0008               * bl @fb.row2line
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @fb.topline = Top line in frame buffer
0012               * @parm1      = Row in frame buffer (offset 0..@fb.scrrows)
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * @outparm1 = Matching line in editor buffer
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0
0019               *--------------------------------------------------------------
0020               * Formula
0021               * outparm1 = @fb.topline + @parm1
0022               ********|*****|*********************|**************************
0023               fb.row2line:
0024 3142 0649  14         dect  stack
0025 3144 C64B  30         mov   r11,*stack            ; Save return address
0026 3146 0649  14         dect  stack
0027 3148 C644  30         mov   tmp0,*stack           ; Push tmp0
0028                       ;------------------------------------------------------
0029                       ; Calculate line in editor buffer
0030                       ;------------------------------------------------------
0031 314A C120  34         mov   @parm1,tmp0
     314C A006     
0032 314E A120  34         a     @fb.topline,tmp0
     3150 A304     
0033 3152 C804  38         mov   tmp0,@outparm1
     3154 A018     
0034                       ;------------------------------------------------------
0035                       ; Exit
0036                       ;------------------------------------------------------
0037               fb.row2line.exit:
0038 3156 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0039 3158 C2F9  30         mov   *stack+,r11           ; Pop r11
0040 315A 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0014                       copy  "fb.calc.pointer.asm"  ; Calculate pointer address frame buffer
     **** ****     > fb.calc.pointer.asm
0001               * FILE......: fb.calc.pointer.asm
0002               * Purpose...: Calculate pointer address in frame buffer
0003               
0004               ***************************************************************
0005               * fb.calc.pointer
0006               * Calculate pointer address in frame buffer
0007               ***************************************************************
0008               * bl @fb.calc.pointer
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @fb.top       = Address of top row in frame buffer
0012               * @fb.topline   = Top line in frame buffer
0013               * @fb.row       = Current row in frame buffer (offset 0..@fb.scrrows)
0014               * @fb.column    = Current column in frame buffer
0015               * @fb.colsline  = Columns per line in frame buffer
0016               *--------------------------------------------------------------
0017               * OUTPUT
0018               * @fb.current   = Updated pointer
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * tmp0,tmp1
0022               *--------------------------------------------------------------
0023               * Formula
0024               * pointer = row * colsline + column + deref(@fb.top.ptr)
0025               ********|*****|*********************|**************************
0026               fb.calc.pointer:
0027 315C 0649  14         dect  stack
0028 315E C64B  30         mov   r11,*stack            ; Save return address
0029 3160 0649  14         dect  stack
0030 3162 C644  30         mov   tmp0,*stack           ; Push tmp0
0031 3164 0649  14         dect  stack
0032 3166 C645  30         mov   tmp1,*stack           ; Push tmp1
0033                       ;------------------------------------------------------
0034                       ; Calculate pointer
0035                       ;------------------------------------------------------
0036 3168 C120  34         mov   @fb.row,tmp0
     316A A306     
0037 316C 3920  74         mpy   @fb.colsline,tmp0     ; tmp1 = row  * colsline
     316E A30E     
0038 3170 A160  34         a     @fb.column,tmp1       ; tmp1 = tmp1 + column
     3172 A30C     
0039 3174 A160  34         a     @fb.top.ptr,tmp1      ; tmp1 = tmp1 + base
     3176 A300     
0040 3178 C805  38         mov   tmp1,@fb.current
     317A A302     
0041                       ;------------------------------------------------------
0042                       ; Exit
0043                       ;------------------------------------------------------
0044               fb.calc.pointer.exit:
0045 317C C179  30         mov   *stack+,tmp1          ; Pop tmp1
0046 317E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0047 3180 C2F9  30         mov   *stack+,r11           ; Pop r11
0048 3182 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0015                       copy  "fb.calc.scrrows.asm"  ; Calculate number of rows frame buffer
     **** ****     > fb.calc.scrrows.asm
0001               * FILE......: fb.calc.scrrows.asm
0002               * Purpose...: Calculate number of available rows in frame buffer
0003               
0004               ***************************************************************
0005               * fb.calc.scrrows
0006               * Calculate number of available rows in frame buffer
0007               ***************************************************************
0008               * bl @fb.calc.scrrows
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @tv.ruler.visible = Ruler visible on screen flag
0012               * @edb.special.file = Special file flag (e.g. Master Catalog)
0013               * @tv.error.visible = Error area visible on screen flag
0014               *--------------------------------------------------------------
0015               * OUTPUT
0016               * @fb.scrrows = Number of available rows in frame buffer
0017               *--------------------------------------------------------------
0018               * Register usage
0019               * none
0020               *--------------------------------------------------------------
0021               * Remarks
0022               * none
0023               ********|*****|*********************|**************************
0024               fb.calc.scrrows:
0025 3184 0649  14         dect  stack
0026 3186 C64B  30         mov   r11,*stack            ; Save return address
0027                       ;------------------------------------------------------
0028                       ; Initialisation
0029                       ;------------------------------------------------------
0030 3188 C820  54         mov   @fb.scrrows.max,@fb.scrrows
     318A A31E     
     318C A31C     
0031                                                   ; Set maximum number of available rows
0032                       ;------------------------------------------------------
0033                       ; (1) Handle ruler visible on screen
0034                       ;------------------------------------------------------
0035               fb.calc.scrrows.handle.ruler:
0036 318E 0760  38         abs   @tv.ruler.visible     ; Ruler visible?
     3190 A210     
0037 3192 1302  14         jeq   fb.calc.scrrows.handle.mc
0038 3194 0620  34         dec   @fb.scrrows           ; Yes, adjust rows
     3196 A31C     
0039                       ;------------------------------------------------------
0040                       ; (2) Handle Master Catalog
0041                       ;------------------------------------------------------
0042               fb.calc.scrrows.handle.mc:
0043 3198 8820  50         c     @edb.special.file,@const.0
     319A A522     
     319C 2000     
0044 319E 1302  14         jeq   fb.calc.scrrows.handle.errors
0045 31A0 0620  34         dec   @fb.scrrows           ; Yes, adjust rows
     31A2 A31C     
0046                       ;------------------------------------------------------
0047                       ; (3) Handle error area
0048                       ;------------------------------------------------------
0049               fb.calc.scrrows.handle.errors:
0050 31A4 0760  38         abs   @tv.error.visible     ; Error area visible?
     31A6 A22A     
0051 31A8 1303  14         jeq   fb.calc.scrrows.exit
0052 31AA 6820  54         s     @tv.error.rows,@fb.scrrows
     31AC A22C     
     31AE A31C     
0053                                                   ; Yes, adjust rows
0054                       ;-------------------------------------------------------
0055                       ; Exit
0056                       ;-------------------------------------------------------
0057               fb.calc.scrrows.exit:
0058 31B0 C2F9  30         mov   *stack+,r11           ; Pop r11
0059 31B2 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0016                       copy  "idx.asm"              ; Index management
     **** ****     > idx.asm
0001               * FILE......: idx.asm
0002               * Purpose...: Index management
0003               
0004               ***************************************************************
0005               *  Size of index page is 4K and allows indexing of 2048 lines
0006               *  per page.
0007               *
0008               *  Each index slot (word) has the format:
0009               *    +-----+-----+
0010               *    | MSB | LSB |
0011               *    +-----|-----+   LSB = Pointer offset 00-ff.
0012               *
0013               *  MSB = SAMS Page 40-ff
0014               *        Allows addressing of up to 256 4K SAMS pages (1024 KB)
0015               *
0016               *  LSB = Pointer offset in range 00-ff
0017               *
0018               *        To calculate pointer to line in Editor buffer:
0019               *        Pointer address = edb.top + (LSB * 16)
0020               *
0021               *        Note that the editor buffer itself resides in own 4K memory range
0022               *        starting at edb.top
0023               *
0024               *        All support routines must assure that length-prefixed string in
0025               *        Editor buffer always start on a 16 byte boundary for being
0026               *        accessible via index.
0027               *
0028               *
0029               * The index starts at SAMS page >20 and can allocate up to page >3f
0030               * for a total of 32 pages (128 K). With that up to 65536 lines of text
0031               * can be addressed.
0032               ***************************************************************
0033               
0034               
0035               ***************************************************************
0036               * idx.init
0037               * Initialize index
0038               ***************************************************************
0039               * bl @idx.init
0040               *--------------------------------------------------------------
0041               * INPUT
0042               * none
0043               *--------------------------------------------------------------
0044               * OUTPUT
0045               * none
0046               *--------------------------------------------------------------
0047               * Register usage
0048               * tmp0
0049               ********|*****|*********************|**************************
0050               idx.init:
0051 31B4 0649  14         dect  stack
0052 31B6 C64B  30         mov   r11,*stack            ; Save return address
0053 31B8 0649  14         dect  stack
0054 31BA C644  30         mov   tmp0,*stack           ; Push tmp0
0055                       ;------------------------------------------------------
0056                       ; Initialize
0057                       ;------------------------------------------------------
0058 31BC 0204  20         li    tmp0,idx.top
     31BE B000     
0059 31C0 C804  38         mov   tmp0,@edb.index.ptr   ; Set pointer to index in editor structure
     31C2 A502     
0060               
0061 31C4 C120  34         mov   @tv.sams.b000,tmp0
     31C6 A206     
0062 31C8 C804  38         mov   tmp0,@idx.sams.page   ; Set current SAMS page
     31CA A600     
0063 31CC C804  38         mov   tmp0,@idx.sams.lopage ; Set 1st SAMS page
     31CE A602     
0064                       ;------------------------------------------------------
0065                       ; Clear all index pages
0066                       ;------------------------------------------------------
0067 31D0 0224  22         ai    tmp0,4                ; \ Let's clear all index pages
     31D2 0004     
0068 31D4 C804  38         mov   tmp0,@idx.sams.hipage ; /
     31D6 A604     
0069               
0070 31D8 06A0  32         bl    @_idx.sams.mapcolumn.on
     31DA 31F6     
0071                                                   ; Index in continuous memory region
0072               
0073 31DC 06A0  32         bl    @film
     31DE 2236     
0074 31E0 B000                   data idx.top,>00,idx.size * 5
     31E2 0000     
     31E4 5000     
0075                                                   ; Clear index
0076               
0077 31E6 06A0  32         bl    @_idx.sams.mapcolumn.off
     31E8 322A     
0078                                                   ; Restore memory window layout
0079               
0080 31EA C820  54         mov   @idx.sams.lopage,@idx.sams.hipage
     31EC A602     
     31EE A604     
0081                                                   ; Reset last SAMS page
0082                       ;------------------------------------------------------
0083                       ; Exit
0084                       ;------------------------------------------------------
0085               idx.init.exit:
0086 31F0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0087 31F2 C2F9  30         mov   *stack+,r11           ; Pop r11
0088 31F4 045B  20         b     *r11                  ; Return to caller
0089               
0090               
0091               ***************************************************************
0092               * bl @_idx.sams.mapcolumn.on
0093               *--------------------------------------------------------------
0094               * Register usage
0095               * tmp0, tmp1, tmp2
0096               *--------------------------------------------------------------
0097               *  Remarks
0098               *  Private, only to be called from inside idx module
0099               ********|*****|*********************|**************************
0100               _idx.sams.mapcolumn.on:
0101 31F6 0649  14         dect  stack
0102 31F8 C64B  30         mov   r11,*stack            ; Push return address
0103 31FA 0649  14         dect  stack
0104 31FC C644  30         mov   tmp0,*stack           ; Push tmp0
0105 31FE 0649  14         dect  stack
0106 3200 C645  30         mov   tmp1,*stack           ; Push tmp1
0107 3202 0649  14         dect  stack
0108 3204 C646  30         mov   tmp2,*stack           ; Push tmp2
0109               *--------------------------------------------------------------
0110               * Map index pages into memory window  (b000-ffff)
0111               *--------------------------------------------------------------
0112 3206 C120  34         mov   @idx.sams.lopage,tmp0 ; Get lowest index page
     3208 A602     
0113 320A 0205  20         li    tmp1,idx.top
     320C B000     
0114 320E 0206  20         li    tmp2,5                ; Set loop counter. all pages of index
     3210 0005     
0115                       ;-------------------------------------------------------
0116                       ; Loop over banks
0117                       ;-------------------------------------------------------
0118 3212 06A0  32 !       bl    @xsams.page.set       ; Set SAMS page
     3214 2594     
0119                                                   ; \ i  tmp0  = SAMS page number
0120                                                   ; / i  tmp1  = Memory address
0121               
0122 3216 0584  14         inc   tmp0                  ; Next SAMS index page
0123 3218 0225  22         ai    tmp1,>1000            ; Next memory region
     321A 1000     
0124 321C 0606  14         dec   tmp2                  ; Update loop counter
0125 321E 15F9  14         jgt   -!                    ; Next iteration
0126               *--------------------------------------------------------------
0127               * Exit
0128               *--------------------------------------------------------------
0129               _idx.sams.mapcolumn.on.exit:
0130 3220 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0131 3222 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0132 3224 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0133 3226 C2F9  30         mov   *stack+,r11           ; Pop return address
0134 3228 045B  20         b     *r11                  ; Return to caller
0135               
0136               
0137               ***************************************************************
0138               * _idx.sams.mapcolumn.off
0139               * Restore normal SAMS layout again (single index page)
0140               ***************************************************************
0141               * bl @_idx.sams.mapcolumn.off
0142               *--------------------------------------------------------------
0143               * Register usage
0144               * tmp0, tmp1, tmp2, tmp3
0145               *--------------------------------------------------------------
0146               *  Remarks
0147               *  Private, only to be called from inside idx module
0148               ********|*****|*********************|**************************
0149               _idx.sams.mapcolumn.off:
0150 322A 0649  14         dect  stack
0151 322C C64B  30         mov   r11,*stack            ; Push return address
0152 322E 0649  14         dect  stack
0153 3230 C644  30         mov   tmp0,*stack           ; Push tmp0
0154 3232 0649  14         dect  stack
0155 3234 C645  30         mov   tmp1,*stack           ; Push tmp1
0156 3236 0649  14         dect  stack
0157 3238 C646  30         mov   tmp2,*stack           ; Push tmp2
0158 323A 0649  14         dect  stack
0159 323C C647  30         mov   tmp3,*stack           ; Push tmp3
0160               *--------------------------------------------------------------
0161               * Map index pages into memory window  (b000-????)
0162               *--------------------------------------------------------------
0163 323E 0205  20         li    tmp1,idx.top
     3240 B000     
0164 3242 0206  20         li    tmp2,5                ; Always 5 pages
     3244 0005     
0165 3246 0207  20         li    tmp3,tv.sams.b000     ; Pointer to fist SAMS page
     3248 A206     
0166                       ;-------------------------------------------------------
0167                       ; Loop over table in memory (@tv.sams.b000:@tv.sams.f000)
0168                       ;-------------------------------------------------------
0169 324A C137  30 !       mov   *tmp3+,tmp0           ; Get SAMS page
0170               
0171 324C 06A0  32         bl    @xsams.page.set       ; Set SAMS page
     324E 2594     
0172                                                   ; \ i  tmp0  = SAMS page number
0173                                                   ; / i  tmp1  = Memory address
0174               
0175 3250 0225  22         ai    tmp1,>1000            ; Next memory region
     3252 1000     
0176 3254 0606  14         dec   tmp2                  ; Update loop counter
0177 3256 15F9  14         jgt   -!                    ; Next iteration
0178               *--------------------------------------------------------------
0179               * Exit
0180               *--------------------------------------------------------------
0181               _idx.sams.mapcolumn.off.exit:
0182 3258 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0183 325A C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0184 325C C179  30         mov   *stack+,tmp1          ; Pop tmp1
0185 325E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0186 3260 C2F9  30         mov   *stack+,r11           ; Pop return address
0187 3262 045B  20         b     *r11                  ; Return to caller
0188               
0189               
0190               
0191               ***************************************************************
0192               * _idx.samspage.get
0193               * Get SAMS page for index
0194               ***************************************************************
0195               * bl @_idx.samspage.get
0196               *--------------------------------------------------------------
0197               * INPUT
0198               * tmp0 = Line number
0199               *--------------------------------------------------------------
0200               * OUTPUT
0201               * @outparm1 = Offset for index entry in index SAMS page
0202               *--------------------------------------------------------------
0203               * Register usage
0204               * tmp0, tmp1, tmp2
0205               *--------------------------------------------------------------
0206               *  Remarks
0207               *  Private, only to be called from inside idx module.
0208               *  Activates SAMS page containing required index slot entry.
0209               ********|*****|*********************|**************************
0210               _idx.samspage.get:
0211 3264 0649  14         dect  stack
0212 3266 C64B  30         mov   r11,*stack            ; Save return address
0213 3268 0649  14         dect  stack
0214 326A C644  30         mov   tmp0,*stack           ; Push tmp0
0215 326C 0649  14         dect  stack
0216 326E C645  30         mov   tmp1,*stack           ; Push tmp1
0217 3270 0649  14         dect  stack
0218 3272 C646  30         mov   tmp2,*stack           ; Push tmp2
0219                       ;------------------------------------------------------
0220                       ; Determine SAMS index page
0221                       ;------------------------------------------------------
0222 3274 C184  18         mov   tmp0,tmp2             ; Line number
0223 3276 04C5  14         clr   tmp1                  ; MSW (tmp1) = 0 / LSW (tmp2) = Line number
0224 3278 0204  20         li    tmp0,2048             ; Index entries in 4K SAMS page
     327A 0800     
0225               
0226 327C 3D44 128         div   tmp0,tmp1             ; \ Divide 32 bit value by 2048
0227                                                   ; | tmp1 = quotient  (SAMS page offset)
0228                                                   ; / tmp2 = remainder
0229               
0230 327E 0A16  18         sla   tmp2,1                ; line number * 2
0231 3280 C806  38         mov   tmp2,@outparm1        ; Offset index entry
     3282 A018     
0232               
0233 3284 A160  34         a     @idx.sams.lopage,tmp1 ; Add SAMS page base
     3286 A602     
0234 3288 8805  34         c     tmp1,@idx.sams.page   ; Page already active?
     328A A600     
0235               
0236 328C 130E  14         jeq   _idx.samspage.get.exit
0237                                                   ; Yes, so exit
0238                       ;------------------------------------------------------
0239                       ; Activate SAMS index page
0240                       ;------------------------------------------------------
0241 328E C805  38         mov   tmp1,@idx.sams.page   ; Set current SAMS page
     3290 A600     
0242 3292 C805  38         mov   tmp1,@tv.sams.b000    ; Also keep SAMS window synced in Stevie
     3294 A206     
0243 3296 C105  18         mov   tmp1,tmp0             ; Destination SAMS page
0244               
0245 3298 0205  20         li    tmp1,>b000            ; Memory window for index page
     329A B000     
0246               
0247 329C 06A0  32         bl    @xsams.page.set       ; Switch to SAMS page
     329E 2594     
0248                                                   ; \ i  tmp0 = SAMS page
0249                                                   ; / i  tmp1 = Memory address
0250                       ;------------------------------------------------------
0251                       ; Check if new highest SAMS index page
0252                       ;------------------------------------------------------
0253 32A0 8804  34         c     tmp0,@idx.sams.hipage ; New highest page?
     32A2 A604     
0254 32A4 1202  14         jle   _idx.samspage.get.exit
0255                                                   ; No, exit
0256 32A6 C804  38         mov   tmp0,@idx.sams.hipage ; Yes, set highest SAMS index page
     32A8 A604     
0257                       ;------------------------------------------------------
0258                       ; Exit
0259                       ;------------------------------------------------------
0260               _idx.samspage.get.exit:
0261 32AA C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0262 32AC C179  30         mov   *stack+,tmp1          ; Pop tmp1
0263 32AE C139  30         mov   *stack+,tmp0          ; Pop tmp0
0264 32B0 C2F9  30         mov   *stack+,r11           ; Pop r11
0265 32B2 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0017                       copy  "edb.asm"              ; Editor Buffer
     **** ****     > edb.asm
0001               * FILE......: edb.asm
0002               * Purpose...: Stevie Editor - Editor Buffer module
0003               
0004               ***************************************************************
0005               * edb.init
0006               * Initialize Editor buffer
0007               ***************************************************************
0008               * bl @edb.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ***************************************************************
0021               edb.init:
0022 32B4 0649  14         dect  stack
0023 32B6 C64B  30         mov   r11,*stack            ; Save return address
0024 32B8 0649  14         dect  stack
0025 32BA C644  30         mov   tmp0,*stack           ; Push tmp0
0026                       ;------------------------------------------------------
0027                       ; Initialize
0028                       ;------------------------------------------------------
0029 32BC 0204  20         li    tmp0,edb.top          ; \
     32BE C000     
0030 32C0 C804  38         mov   tmp0,@edb.top.ptr     ; / Set pointer to top of editor buffer
     32C2 A500     
0031 32C4 C804  38         mov   tmp0,@edb.next_free.ptr
     32C6 A508     
0032                                                   ; Set pointer to next free line
0033               
0034 32C8 0720  34         seto  @edb.insmode          ; Turn on insert mode for this editor buffer
     32CA A50A     
0035               
0036 32CC 0204  20         li    tmp0,1
     32CE 0001     
0037 32D0 C804  38         mov   tmp0,@edb.lines       ; Lines=1
     32D2 A504     
0038               
0039 32D4 0720  34         seto  @edb.block.m1         ; Reset block start line
     32D6 A50E     
0040 32D8 0720  34         seto  @edb.block.m2         ; Reset block end line
     32DA A510     
0041               
0042 32DC C820  54         mov   @tv.lineterm,@edb.lineterm
     32DE A236     
     32E0 A524     
0043                                                   ; Set line termination char from default
0044               
0045 32E2 0204  20         li    tmp0,txt.newfile      ; "New file"
     32E4 3B74     
0046 32E6 C804  38         mov   tmp0,@edb.filename.ptr
     32E8 A514     
0047               
0048 32EA 04E0  34         clr   @fh.kilobytes         ; \ Clear kilobytes processed
     32EC A440     
0049 32EE 04E0  34         clr   @fh.kilobytes.prev    ; /
     32F0 A45C     
0050               
0051 32F2 0204  20         li    tmp0,txt.filetype.none
     32F4 3C90     
0052 32F6 C804  38         mov   tmp0,@edb.filetype.ptr
     32F8 A516     
0053               
0054               edb.init.exit:
0055                       ;------------------------------------------------------
0056                       ; Exit
0057                       ;------------------------------------------------------
0058 32FA C139  30         mov   *stack+,tmp0          ; Pop tmp0
0059 32FC C2F9  30         mov   *stack+,r11           ; Pop r11
0060 32FE 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0018                       copy  "cmdb.asm"             ; Command buffer
     **** ****     > cmdb.asm
0001               * FILE......: cmdb.asm
0002               * Purpose...: Stevie Editor - Command Buffer module
0003               
0004               ***************************************************************
0005               * cmdb.init
0006               * Initialize Command Buffer
0007               ***************************************************************
0008               * bl @cmdb.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               cmdb.init:
0022 3300 0649  14         dect  stack
0023 3302 C64B  30         mov   r11,*stack            ; Save return address
0024 3304 0649  14         dect  stack
0025 3306 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 3308 0649  14         dect  stack
0027 330A C645  30         mov   tmp1,*stack           ; Push tmp1
0028                       ;------------------------------------------------------
0029                       ; Initialize
0030                       ;------------------------------------------------------
0031 330C 0204  20         li    tmp0,cmdb.top         ; \ Set pointer to command buffer
     330E EF00     
0032 3310 C804  38         mov   tmp0,@cmdb.top.ptr    ; /
     3312 A700     
0033               
0034 3314 04E0  34         clr   @cmdb.visible         ; Hide command buffer
     3316 A702     
0035 3318 0204  20         li    tmp0,6
     331A 0006     
0036 331C C804  38         mov   tmp0,@cmdb.scrrows    ; Set current command buffer size
     331E A706     
0037 3320 C804  38         mov   tmp0,@cmdb.default    ; Set default command buffer size
     3322 A708     
0038               
0039 3324 04E0  34         clr   @cmdb.lines           ; Number of lines in cmdb buffer
     3326 A718     
0040 3328 04E0  34         clr   @cmdb.dirty           ; Command buffer is clean
     332A A71A     
0041 332C 04E0  34         clr   @cmdb.action.ptr      ; Reset action to execute pointer
     332E A72C     
0042 3330 0720  34         seto  @cmdb.fb.yxsave       ; Reset (removes "write protection")
     3332 A704     
0043                       ;------------------------------------------------------
0044                       ; Calculate VDP address of CMDB top row (TAT!)
0045                       ;------------------------------------------------------
0046 3334 0204  20         li    tmp0,pane.botrow      ; \
     3336 001D     
0047 3338 6120  34         s     @cmdb.scrrows,tmp0    ; | pos = Y * (columns per row)
     333A A706     
0048 333C 3920  70         mpy   @wcolmn,tmp0          ; | result is in tmp1
     333E 833A     
0049 3340 C105  18         mov   tmp1,tmp0             ; | Get result
0050 3342 0224  22         ai    tmp0,vdp.tat.base     ; | Add VDP TAT base address
     3344 1800     
0051 3346 C804  38         mov   tmp0,@cmdb.vdptop     ; /
     3348 A70E     
0052                       ;------------------------------------------------------
0053                       ; Clear command buffer
0054                       ;------------------------------------------------------
0055 334A 06A0  32         bl    @film
     334C 2236     
0056 334E EF00                   data  cmdb.top,>00,cmdb.size
     3350 0000     
     3352 0100     
0057                                                   ; Clear it all the way
0058                       ;------------------------------------------------------
0059                       ; Exit
0060                       ;------------------------------------------------------
0061               cmdb.init.exit:
0062 3354 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0063 3356 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0064 3358 C2F9  30         mov   *stack+,r11           ; Pop r11
0065 335A 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0019                       copy  "errpane.asm"          ; Error pane
     **** ****     > errpane.asm
0001               * FILE......: errpane.asm
0002               * Purpose...: Error pane utilities
0003               
0004               ***************************************************************
0005               * errpane.init
0006               * Initialize error pane
0007               ***************************************************************
0008               * bl @errpane.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0,tmp1,tmp2
0018               *--------------------------------------------------------------
0019               * Notes
0020               ***************************************************************
0021               errpane.init:
0022 335C 0649  14         dect  stack
0023 335E C64B  30         mov   r11,*stack            ; Save return address
0024 3360 0649  14         dect  stack
0025 3362 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 3364 0649  14         dect  stack
0027 3366 C645  30         mov   tmp1,*stack           ; Push tmp1
0028 3368 0649  14         dect  stack
0029 336A C646  30         mov   tmp2,*stack           ; Push tmp2
0030                       ;------------------------------------------------------
0031                       ; Initialize
0032                       ;------------------------------------------------------
0033 336C 04E0  34         clr   @tv.error.visible     ; Set to hidden
     336E A22A     
0034 3370 0204  20         li    tmp0,3
     3372 0003     
0035 3374 C804  38         mov   tmp0,@tv.error.rows   ; Number of rows in error pane
     3376 A22C     
0036               
0037 3378 06A0  32         bl    @film
     337A 2236     
0038 337C A238                   data tv.error.msg,0,160
     337E 0000     
     3380 00A0     
0039                       ;-------------------------------------------------------
0040                       ; Exit
0041                       ;-------------------------------------------------------
0042               errpane.exit:
0043 3382 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0044 3384 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0045 3386 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0046 3388 C2F9  30         mov   *stack+,r11           ; Pop R11
0047 338A 045B  20         b     *r11                  ; Return to caller
0048               
                   < rom.resident.asm
0020                       copy  "tv.asm"               ; Main editor configuration
     **** ****     > tv.asm
0001               * FILE......: tv.asm
0002               * Purpose...: Initialize editor
0003               
0004               ***************************************************************
0005               * tv.init
0006               * Initialize editor settings
0007               ***************************************************************
0008               * bl @tv.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ***************************************************************
0021               tv.init:
0022 338C 0649  14         dect  stack
0023 338E C64B  30         mov   r11,*stack            ; Save return address
0024 3390 0649  14         dect  stack
0025 3392 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 3394 0649  14         dect  stack
0027 3396 C645  30         mov   tmp1,*stack           ; Push tmp1
0028 3398 0649  14         dect  stack
0029 339A C646  30         mov   tmp2,*stack           ; Push tmp2
0030                       ;------------------------------------------------------
0031                       ; Initialize
0032                       ;------------------------------------------------------
0033 339C 0204  20         li    tmp0,1                ; \ Set default color scheme
     339E 0001     
0034 33A0 C804  38         mov   tmp0,@tv.colorscheme  ; /
     33A2 A212     
0035               
0036 33A4 04E0  34         clr   @tv.task.oneshot      ; Reset pointer to oneshot task
     33A6 A226     
0037 33A8 E0A0  34         soc   @wbit10,config        ; Assume ALPHA LOCK is down
     33AA 200C     
0038               
0039 33AC 0204  20         li    tmp0,fj.bottom
     33AE B000     
0040 33B0 C804  38         mov   tmp0,@tv.fj.stackpnt  ; Set pointer to farjump return stack
     33B2 A228     
0041               
0042 33B4 04E0  34         clr   @tv.specmsg.ptr       ; No special message
     33B6 A234     
0043                       ;------------------------------------------------------
0044                       ; Set defaults
0045                       ;------------------------------------------------------
0046 33B8 06A0  32         bl    @cpym2m
     33BA 24F8     
0047 33BC 3DB6                   data def.printer.fname,tv.printer.fname,7
     33BE DE00     
     33C0 0007     
0048               
0049 33C2 06A0  32         bl    @cpym2m
     33C4 24F8     
0050 33C6 3DBD                   data def.clip.fname.a,tv.clip.fname,10
     33C8 DE50     
     33CA 000A     
0051               
0052 33CC 06A0  32         bl    @cpym2m
     33CE 24F8     
0053 33D0 3DF5                   data def.mc.fname.c,tv.mc.fname,13
     33D2 DEA0     
     33D4 000D     
0054               
0055 33D6 04E0  34         clr   @edb.autoinsert       ; Set AutoInsert off by default
     33D8 A50C     
0056               
0057 33DA 0204  20         li    tmp0,13               ; \
     33DC 000D     
0058 33DE C804  38         mov   tmp0,@tv.lineterm     ; | MSB = 00 Line termination mode off
     33E0 A236     
0059                                                   ; / LSB = 13 Carriage return
0060                       ;-------------------------------------------------------
0061                       ; Exit
0062                       ;-------------------------------------------------------
0063               tv.init.exit:
0064 33E2 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0065 33E4 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0066 33E6 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0067 33E8 C2F9  30         mov   *stack+,r11           ; Pop R11
0068 33EA 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0021                       copy  "tv.quit.asm"          ; Exit Stevie and return to monitor
     **** ****     > tv.quit.asm
0001               * FILE......: tv.quit.asm
0002               * Purpose...: Quit Stevie and return to monitor
0003               
0004               ***************************************************************
0005               * tv.quit
0006               * Quit stevie and return to monitor
0007               ***************************************************************
0008               * b    @tv.quit
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               ***************************************************************
0019               tv.quit:
0020                       ;-------------------------------------------------------
0021                       ; Reset/lock F18a
0022                       ;-------------------------------------------------------
0023 33EC 06A0  32         bl    @f18rst               ; Reset and lock the F18A
     33EE 27C4     
0024                       ;-------------------------------------------------------
0025                       ; Load legacy SAMS page layout and exit to monitor
0026                       ;-------------------------------------------------------
0027 33F0 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     33F2 3038     
0028 33F4 600E                   data bank7.rom        ; | i  p0 = bank address
0029 33F6 7F40                   data bankx.vectab     ; | i  p1 = Vector with target address
0030 33F8 600E                   data bankid           ; / i  p2 = Source ROM bank for return
0031               
0032                       ; We never return here. We call @mem.sams.set.legacy (vector1) and
0033                       ; in there activate bank 0 in cartridge space and return to monitor.
0034                       ;
0035                       ; Reason for doing so is that @tv.quit is located in
0036                       ; low memory expansion. So switching SAMS banks or turning off the SAMS
0037                       ; mapper results in invalid OPCODE's because the program just isn't
0038                       ; there in low memory expansion anymore.
                   < rom.resident.asm
0022                       copy  "tv.uint16.pack.asm"   ; Pack string to 16bit unsigned integer
     **** ****     > tv.uint16.pack.asm
0001               * FILE......: tv.uint16.pack.asm
0002               * Purpose...: Pack string to 16bit unsigned integer
0003               
0004               ***************************************************************
0005               * tv.uint16.pack
0006               * Pack (number) string to 16bit unsigned integer
0007               ***************************************************************
0008               * bl @tv.uint16.pack
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Pointer to input string (no length-byte prefix!)
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @outparm1 = 16bit unsigned integer
0015               * @outparm2 = 0 conversion ok, >FFFF invalid input
0016               *--------------------------------------------------------------
0017               * REMARK
0018               * None
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * tmp0, tmp1, tmp2, tmp3, r0, r1
0022               ***************************************************************
0023               tv.uint16.pack:
0024 33FA 0649  14         dect  stack
0025 33FC C64B  30         mov   r11,*stack            ; Push return address
0026 33FE 0649  14         dect  stack
0027 3400 C644  30         mov   tmp0,*stack           ; Push tmp0
0028 3402 0649  14         dect  stack
0029 3404 C645  30         mov   tmp1,*stack           ; Push tmp1
0030 3406 0649  14         dect  stack
0031 3408 C646  30         mov   tmp2,*stack           ; Push tmp2
0032 340A 0649  14         dect  stack
0033 340C C647  30         mov   tmp3,*stack           ; Push tmp3
0034 340E 0649  14         dect  stack
0035 3410 C640  30         mov   r0,*stack             ; Push r0
0036 3412 0649  14         dect  stack
0037 3414 C641  30         mov   r1,*stack             ; Push r1
0038                       ;------------------------------------------------------
0039                       ; Initialisation
0040                       ;------------------------------------------------------
0041 3416 C120  34         mov   @parm1,tmp0           ; Pointer to input string
     3418 A006     
0042 341A 04C5  14         clr   tmp1                  ; Termination character >00
0043 341C 04E0  34         clr   @outparm1             ; Reset output parameters
     341E A018     
0044 3420 04E0  34         clr   @outparm2             ; Reset output parameters
     3422 A01A     
0045                       ;------------------------------------------------------
0046                       ; Get string length
0047                       ;------------------------------------------------------
0048 3424 06A0  32         bl    @xstring.getlenc      ; Get length of C-style string
     3426 2B22     
0049                                                   ; \ i  tmp0   = Pointer to C-style string
0050                                                   ; | i  tmp1   = Termination character
0051                                                   ; / o  @waux1 = Length of string
0052                       ;------------------------------------------------------
0053                       ; Assert
0054                       ;------------------------------------------------------
0055 3428 C1A0  30         mov   @waux1,tmp2           ; Get string length
     342A 833C     
0056 342C 131F  14         jeq   tv.uint16.pack.error  ; No input string given
0057 342E 0286  22         ci    tmp2,5                ; Maximum 5 digits ?
     3430 0005     
0058 3432 151C  14         jgt   tv.uint16.pack.error  ; Input string too long
0059                       ;------------------------------------------------------
0060                       ; Prepare register values
0061                       ;------------------------------------------------------
0062 3434 C120  34         mov   @parm1,tmp0           ; Pointer to input string
     3436 A006     
0063               
0064 3438 A186  18         a     tmp2,tmp2             ; \ Starting offset in tv.uint16.mpy
0065 343A 0226  22         ai    tmp2,-10              ; |    10 - (tmp2 * 2)
     343C FFF6     
0066 343E 0746  18         abs   tmp2                  ; /
0067               
0068 3440 04C7  14         clr   tmp3                  ; Clear final uint16
0069                       ;------------------------------------------------------
0070                       ; Get character
0071                       ;------------------------------------------------------
0072               tv.uint16.pack.loop:
0073 3442 D174  28         movb  *tmp0+,tmp1           ; Get character
0074 3444 0985  32         srl   tmp1,8                ; MSB to LSB
0075                       ;------------------------------------------------------
0076                       ; Character is ASCII 0 or blank (ASCII 32) ?
0077                       ;------------------------------------------------------
0078 3446 1318  14         jeq   tv.uint16.pack.exit   ; End of string reached
0079 3448 0285  22         ci    tmp1,32               ; Blank ?
     344A 0020     
0080 344C 1315  14         jeq   tv.uint16.pack.exit   ; End of string reached
0081                       ;------------------------------------------------------
0082                       ; Character in range 0..9 ?
0083                       ;------------------------------------------------------
0084 344E 0225  22         ai    tmp1,-48              ; Remove ASCII offset
     3450 FFD0     
0085 3452 110C  14         jlt   tv.uint16.pack.error  ; Invalid character, exit
0086 3454 0285  22         ci    tmp1,9
     3456 0009     
0087 3458 1509  14         jgt   tv.uint16.pack.error  ; Invalid character, exit
0088                       ;------------------------------------------------------
0089                       ; Get base 10 multiplier for digit
0090                       ;------------------------------------------------------
0091 345A C026  34         mov   @tv.uint16.mpy(tmp2),r0
     345C 3488     
0092                       ;------------------------------------------------------
0093                       ; Convert number to decimal 10 (final result in tmp3)
0094                       ;------------------------------------------------------
0095 345E 3805  58         mpy   tmp1,r0               ; Multiply digit with r0, 32bit result is
0096                                                   ; in r0 and r1. We need r1 (LSW)
0097 3460 A1C1  18         a     r1,tmp3               ; Add base10 value to final uint16
0098                       ;------------------------------------------------------
0099                       ; Prepare for next digit
0100                       ;------------------------------------------------------
0101 3462 05C6  14         inct  tmp2                  ; Update loop counter
0102 3464 0286  22         ci    tmp2,8                ; Last digit done?
     3466 0008     
0103 3468 12EC  14         jle   tv.uint16.pack.loop   ; Next iteration
0104 346A 1004  14         jmp   tv.uint16.pack.done   ; Done packing uint16, exit
0105                       ;------------------------------------------------------
0106                       ; Invalid character, stop packing and exit
0107                       ;------------------------------------------------------
0108               tv.uint16.pack.error:
0109 346C 04E0  34         clr   @outparm1             ; Empty uint16
     346E A018     
0110 3470 0720  34         seto  @outparm2             ; Invalid input string
     3472 A01A     
0111                       ;-------------------------------------------------------
0112                       ; Save final uint16
0113                       ;-------------------------------------------------------
0114               tv.uint16.pack.done:
0115 3474 C807  38         mov   tmp3,@outparm1
     3476 A018     
0116                       ;-------------------------------------------------------
0117                       ; Exit
0118                       ;-------------------------------------------------------
0119               tv.uint16.pack.exit:
0120 3478 C079  30         mov   *stack+,r1            ; Pop r1
0121 347A C039  30         mov   *stack+,r0            ; Pop r0
0122 347C C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0123 347E C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0124 3480 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0125 3482 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0126 3484 C2F9  30         mov   *stack+,r11           ; Pop r11
0127 3486 045B  20         b     *r11                  ; Return to caller
0128                       ;-------------------------------------------------------
0129                       ; Constants for base 10 mmultipliers
0130                       ;-------------------------------------------------------
0131               tv.uint16.mpy:
0132 3488 2710             data  10000,1000,100,10,1
     348A 03E8     
     348C 0064     
     348E 000A     
     3490 0001     
0133               
                   < rom.resident.asm
0023                       copy  "tv.uint16.unpack.asm" ; Unpack 16bit unsigned integer to string
     **** ****     > tv.uint16.unpack.asm
0001               * FILE......: tv.uint16.unpack.asm
0002               * Purpose...: Unpack 16bit unsigned integer to string
0003               
0004               ***************************************************************
0005               * tv.uint16.unpack
0006               * Unpack 16bit unsigned integer to string
0007               ***************************************************************
0008               * bl @tv.uint16.unpack
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = 16bit unsigned integer
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @uint16.unpacked = Length-prefixed string with unpacked uint16
0015               *                    (6 bytes max)
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0
0019               ***************************************************************
0020               tv.uint16.unpack:
0021 3492 0649  14         dect  stack
0022 3494 C64B  30         mov   r11,*stack            ; Save return address
0023 3496 0649  14         dect  stack
0024 3498 C644  30         mov   tmp0,*stack           ; Push tmp0
0025                       ;------------------------------------------------------
0026                       ; Initialize
0027                       ;------------------------------------------------------
0028 349A 06A0  32         bl    @mknum                ; Convert unsigned number to string
     349C 2A14     
0029 349E A006                   data parm1            ; \ i p0  = Pointer to 16bit unsigned number
0030 34A0 A100                   data rambuf           ; | i p1  = Pointer to 5 byte string buffer
0031 34A2 30                     byte 48               ; | i p2H = Offset for ASCII digit 0
0032 34A3   20                   byte 32               ; / i p2L = Char for replacing leading 0's
0033               
0034 34A4 0204  20         li    tmp0,uint16.unpacked
     34A6 A02C     
0035 34A8 04F4  30         clr   *tmp0+                ; Clear string 01
0036 34AA 04F4  30         clr   *tmp0+                ; Clear string 23
0037 34AC 04F4  30         clr   *tmp0+                ; Clear string 34
0038               
0039 34AE 06A0  32         bl    @trimnum              ; Trim unsigned number string
     34B0 2A6C     
0040 34B2 A100                   data rambuf           ; \ i p0  = Pointer to 5 byte string buffer
0041 34B4 A02C                   data uint16.unpacked  ; | i p1  = Pointer to output buffer
0042 34B6 0020                   data 32               ; / i p2  = Padding char to match against
0043                       ;-------------------------------------------------------
0044                       ; Exit
0045                       ;-------------------------------------------------------
0046               tv.uint16.unpack.exit:
0047 34B8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0048 34BA C2F9  30         mov   *stack+,r11           ; Pop r11
0049 34BC 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0024                       copy  "tv.pad.string.asm"    ; Pad string to specified length
     **** ****     > tv.pad.string.asm
0001               * FILE......: tv.pad.string.asm
0002               * Purpose...: pad string to specified length
0003               
0004               
0005               ***************************************************************
0006               * tv.pad.string
0007               * pad string to specified length
0008               ***************************************************************
0009               * bl @tv.pad.string
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @parm1 = Pointer to length-prefixed string
0013               * @parm2 = Requested length
0014               * @parm3 = Fill character
0015               * @parm4 = Pointer to string buffer
0016               *--------------------------------------------------------------
0017               * OUTPUT
0018               * @outparm1 = Pointer to padded string
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * tmp0,tmp1,tmp2,tmp3
0022               *--------------------------------------------------------------
0023               * Remarks
0024               * Routine must reside in RAM when @parm1 refers to string in
0025               * ROM bank. If you store this routine in a ROM bank, it can
0026               * only reference strings in the same bank or strings in RAM.
0027               * It cannot reference strings in other ROM banks.
0028               ***************************************************************
0029               tv.pad.string:
0030 34BE 0649  14         dect  stack
0031 34C0 C64B  30         mov   r11,*stack            ; Push return address
0032 34C2 0649  14         dect  stack
0033 34C4 C644  30         mov   tmp0,*stack           ; Push tmp0
0034 34C6 0649  14         dect  stack
0035 34C8 C645  30         mov   tmp1,*stack           ; Push tmp1
0036 34CA 0649  14         dect  stack
0037 34CC C646  30         mov   tmp2,*stack           ; Push tmp2
0038 34CE 0649  14         dect  stack
0039 34D0 C647  30         mov   tmp3,*stack           ; Push tmp3
0040                       ;------------------------------------------------------
0041                       ; Asserts
0042                       ;------------------------------------------------------
0043 34D2 C120  34         mov   @parm1,tmp0           ; \ Get string prefix (length-byte)
     34D4 A006     
0044 34D6 D194  26         movb  *tmp0,tmp2            ; /
0045 34D8 0986  32         srl   tmp2,8                ; Right align
0046 34DA C1C6  18         mov   tmp2,tmp3             ; Make copy of length-byte for later use
0047               
0048 34DC 8806  34         c     tmp2,@parm2           ; String length > requested length?
     34DE A008     
0049 34E0 1520  14         jgt   tv.pad.string.panic   ; Yes, crash
0050                       ;------------------------------------------------------
0051                       ; Copy string to buffer
0052                       ;------------------------------------------------------
0053 34E2 C120  34         mov   @parm1,tmp0           ; Get source address
     34E4 A006     
0054 34E6 C160  34         mov   @parm4,tmp1           ; Get destination address
     34E8 A00C     
0055 34EA 0586  14         inc   tmp2                  ; Also include length-byte in copy
0056               
0057 34EC 0649  14         dect  stack
0058 34EE C647  30         mov   tmp3,*stack           ; Push tmp3 (get overwritten by xpym2m)
0059               
0060 34F0 06A0  32         bl    @xpym2m               ; Copy length-prefix string to buffer
     34F2 24FE     
0061                                                   ; \ i  tmp0 = Source CPU memory address
0062                                                   ; | i  tmp1 = Target CPU memory address
0063                                                   ; / i  tmp2 = Number of bytes to copy
0064               
0065 34F4 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0066                       ;------------------------------------------------------
0067                       ; Set length of new string
0068                       ;------------------------------------------------------
0069 34F6 C120  34         mov   @parm2,tmp0           ; Get requested length
     34F8 A008     
0070 34FA 0A84  32         sla   tmp0,8                ; Left align
0071 34FC C160  34         mov   @parm4,tmp1           ; Get pointer to buffer
     34FE A00C     
0072 3500 D544  30         movb  tmp0,*tmp1            ; Set new length of string
0073 3502 A147  18         a     tmp3,tmp1             ; \ Skip to end of string
0074 3504 0585  14         inc   tmp1                  ; /
0075                       ;------------------------------------------------------
0076                       ; Prepare for padding string
0077                       ;------------------------------------------------------
0078 3506 C1A0  34         mov   @parm2,tmp2           ; \ Get number of bytes to fill
     3508 A008     
0079 350A 6187  18         s     tmp3,tmp2             ; |
0080 350C 0586  14         inc   tmp2                  ; /
0081               
0082 350E C120  34         mov   @parm3,tmp0           ; Get byte to padd
     3510 A00A     
0083 3512 0A84  32         sla   tmp0,8                ; Left align
0084                       ;------------------------------------------------------
0085                       ; Right-pad string to destination length
0086                       ;------------------------------------------------------
0087               tv.pad.string.loop:
0088 3514 DD44  32         movb  tmp0,*tmp1+           ; Pad character
0089 3516 0606  14         dec   tmp2                  ; Update loop counter
0090 3518 15FD  14         jgt   tv.pad.string.loop    ; Next character
0091               
0092 351A C820  54         mov   @parm4,@outparm1      ; Set pointer to padded string
     351C A00C     
     351E A018     
0093 3520 1004  14         jmp   tv.pad.string.exit    ; Exit
0094                       ;-----------------------------------------------------------------------
0095                       ; CPU crash
0096                       ;-----------------------------------------------------------------------
0097               tv.pad.string.panic:
0098 3522 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     3524 FFCE     
0099 3526 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     3528 2026     
0100                       ;------------------------------------------------------
0101                       ; Exit
0102                       ;------------------------------------------------------
0103               tv.pad.string.exit:
0104 352A C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0105 352C C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0106 352E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0107 3530 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0108 3532 C2F9  30         mov   *stack+,r11           ; Pop r11
0109 3534 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0025                       ;-----------------------------------------------------------------------
0026                       ; Logic for Index management
0027                       ;-----------------------------------------------------------------------
0028                       copy  "idx.update.asm"       ; Index management - Update entry
     **** ****     > idx.update.asm
0001               * FILE......: idx.update.asm
0002               * Purpose...: Update index entry
0003               
0004               ***************************************************************
0005               * idx.entry.update
0006               * Update index entry - Each entry corresponds to a line
0007               ***************************************************************
0008               * bl @idx.entry.update
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1    = Line number in editor buffer
0012               * @parm2    = Pointer to line in editor buffer
0013               * @parm3    = SAMS page
0014               *--------------------------------------------------------------
0015               * OUTPUT
0016               * @outparm1 = Pointer to updated index entry
0017               *--------------------------------------------------------------
0018               * Register usage
0019               * tmp0,tmp1,tmp2
0020               ********|*****|*********************|**************************
0021               idx.entry.update:
0022 3536 0649  14         dect  stack
0023 3538 C64B  30         mov   r11,*stack            ; Save return address
0024 353A 0649  14         dect  stack
0025 353C C644  30         mov   tmp0,*stack           ; Push tmp0
0026 353E 0649  14         dect  stack
0027 3540 C645  30         mov   tmp1,*stack           ; Push tmp1
0028                       ;------------------------------------------------------
0029                       ; Get parameters
0030                       ;------------------------------------------------------
0031 3542 C120  34         mov   @parm1,tmp0           ; Get line number
     3544 A006     
0032 3546 C160  34         mov   @parm2,tmp1           ; Get pointer
     3548 A008     
0033 354A 1312  14         jeq   idx.entry.update.clear
0034                                                   ; Special handling for "null"-pointer
0035                       ;------------------------------------------------------
0036                       ; Calculate LSB value index slot (pointer offset)
0037                       ;------------------------------------------------------
0038 354C 0245  22         andi  tmp1,>0fff            ; Remove high-nibble from pointer
     354E 0FFF     
0039 3550 0945  24         srl   tmp1,4                ; Get offset (divide by 16)
0040                       ;------------------------------------------------------
0041                       ; Calculate MSB value index slot (SAMS page editor buffer)
0042                       ;------------------------------------------------------
0043 3552 06E0  34         swpb  @parm3
     3554 A00A     
0044 3556 D160  34         movb  @parm3,tmp1           ; Put SAMS page in MSB
     3558 A00A     
0045 355A 06E0  34         swpb  @parm3                ; \ Restore original order again,
     355C A00A     
0046                                                   ; / important for messing up caller parm3!
0047                       ;------------------------------------------------------
0048                       ; Update index slot
0049                       ;------------------------------------------------------
0050               idx.entry.update.save:
0051 355E 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     3560 3264     
0052                                                   ; \ i  tmp0     = Line number
0053                                                   ; / o  outparm1 = Slot offset in SAMS page
0054               
0055 3562 C120  34         mov   @outparm1,tmp0        ; \ Update index slot
     3564 A018     
0056 3566 C905  38         mov   tmp1,@idx.top(tmp0)   ; /
     3568 B000     
0057 356A C804  38         mov   tmp0,@outparm1        ; Pointer to updated index entry
     356C A018     
0058 356E 1008  14         jmp   idx.entry.update.exit
0059                       ;------------------------------------------------------
0060                       ; Special handling for "null"-pointer
0061                       ;------------------------------------------------------
0062               idx.entry.update.clear:
0063 3570 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     3572 3264     
0064                                                   ; \ i  tmp0     = Line number
0065                                                   ; / o  outparm1 = Slot offset in SAMS page
0066               
0067 3574 C120  34         mov   @outparm1,tmp0        ; \ Clear index slot
     3576 A018     
0068 3578 04E4  34         clr   @idx.top(tmp0)        ; /
     357A B000     
0069 357C C804  38         mov   tmp0,@outparm1        ; Pointer to updated index entry
     357E A018     
0070                       ;------------------------------------------------------
0071                       ; Exit
0072                       ;------------------------------------------------------
0073               idx.entry.update.exit:
0074 3580 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0075 3582 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0076 3584 C2F9  30         mov   *stack+,r11           ; Pop r11
0077 3586 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0029                       copy  "idx.pointer.asm"      ; Index management - Get pointer to line
     **** ****     > idx.pointer.asm
0001               * FILE......: idx.pointer.asm
0002               * Purpose...: Get pointer to line in editor buffer
0003               
0004               ***************************************************************
0005               * idx.pointer.get
0006               * Get pointer to editor buffer line content
0007               ***************************************************************
0008               * bl @idx.pointer.get
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Line number in editor buffer
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @outparm1 = Pointer to editor buffer line content
0015               * @outparm2 = SAMS page
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0,tmp1,tmp2
0019               ********|*****|*********************|**************************
0020               idx.pointer.get:
0021 3588 0649  14         dect  stack
0022 358A C64B  30         mov   r11,*stack            ; Save return address
0023 358C 0649  14         dect  stack
0024 358E C644  30         mov   tmp0,*stack           ; Push tmp0
0025 3590 0649  14         dect  stack
0026 3592 C645  30         mov   tmp1,*stack           ; Push tmp1
0027 3594 0649  14         dect  stack
0028 3596 C646  30         mov   tmp2,*stack           ; Push tmp2
0029                       ;------------------------------------------------------
0030                       ; Get slot entry
0031                       ;------------------------------------------------------
0032 3598 C120  34         mov   @parm1,tmp0           ; Line number in editor buffer
     359A A006     
0033               
0034 359C 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page with index slot
     359E 3264     
0035                                                   ; \ i  tmp0     = Line number
0036                                                   ; / o  outparm1 = Slot offset in SAMS page
0037               
0038 35A0 C120  34         mov   @outparm1,tmp0        ; \ Get slot entry
     35A2 A018     
0039 35A4 C164  34         mov   @idx.top(tmp0),tmp1   ; /
     35A6 B000     
0040               
0041 35A8 130C  14         jeq   idx.pointer.get.parm.null
0042                                                   ; Skip if index slot empty
0043                       ;------------------------------------------------------
0044                       ; Calculate MSB (SAMS page)
0045                       ;------------------------------------------------------
0046 35AA C185  18         mov   tmp1,tmp2             ; \
0047 35AC 0986  32         srl   tmp2,8                ; / Right align SAMS page
0048                       ;------------------------------------------------------
0049                       ; Calculate LSB (pointer address)
0050                       ;------------------------------------------------------
0051 35AE 0245  22         andi  tmp1,>00ff            ; Get rid of MSB (SAMS page)
     35B0 00FF     
0052 35B2 0A45  24         sla   tmp1,4                ; Multiply with 16
0053 35B4 0225  22         ai    tmp1,edb.top          ; Add editor buffer base address
     35B6 C000     
0054                       ;------------------------------------------------------
0055                       ; Return parameters
0056                       ;------------------------------------------------------
0057               idx.pointer.get.parm:
0058 35B8 C805  38         mov   tmp1,@outparm1        ; Index slot -> Pointer
     35BA A018     
0059 35BC C806  38         mov   tmp2,@outparm2        ; Index slot -> SAMS page
     35BE A01A     
0060 35C0 1004  14         jmp   idx.pointer.get.exit
0061                       ;------------------------------------------------------
0062                       ; Special handling for "null"-pointer
0063                       ;------------------------------------------------------
0064               idx.pointer.get.parm.null:
0065 35C2 04E0  34         clr   @outparm1
     35C4 A018     
0066 35C6 04E0  34         clr   @outparm2
     35C8 A01A     
0067                       ;------------------------------------------------------
0068                       ; Exit
0069                       ;------------------------------------------------------
0070               idx.pointer.get.exit:
0071 35CA C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0072 35CC C179  30         mov   *stack+,tmp1          ; Pop tmp1
0073 35CE C139  30         mov   *stack+,tmp0          ; Pop tmp0
0074 35D0 C2F9  30         mov   *stack+,r11           ; Pop r11
0075 35D2 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0030                       copy  "idx.delete.asm"       ; Index management - delete slot
     **** ****     > idx.delete.asm
0001               * FILE......: idx_delete.asm
0002               * Purpose...: Delete index entry
0003               
0004               ***************************************************************
0005               * _idx.entry.delete.reorg
0006               * Reorganize index slot entries
0007               ***************************************************************
0008               * bl @_idx.entry.delete.reorg
0009               *--------------------------------------------------------------
0010               *  Remarks
0011               *  Private, only to be called from idx_entry_delete
0012               ********|*****|*********************|**************************
0013               _idx.entry.delete.reorg:
0014                       ;------------------------------------------------------
0015                       ; Reorganize index entries
0016                       ;------------------------------------------------------
0017 35D4 0224  22         ai    tmp0,idx.top          ; Add index base to offset
     35D6 B000     
0018 35D8 C144  18         mov   tmp0,tmp1             ; a = current slot
0019 35DA 05C5  14         inct  tmp1                  ; b = current slot + 2
0020                       ;------------------------------------------------------
0021                       ; Loop forward until end of index
0022                       ;------------------------------------------------------
0023               _idx.entry.delete.reorg.loop:
0024 35DC CD35  46         mov   *tmp1+,*tmp0+         ; Copy b -> a
0025 35DE 0606  14         dec   tmp2                  ; tmp2--
0026 35E0 16FD  14         jne   _idx.entry.delete.reorg.loop
0027                                                   ; Loop unless completed
0028 35E2 045B  20         b     *r11                  ; Return to caller
0029               
0030               
0031               
0032               ***************************************************************
0033               * idx.entry.delete
0034               * Delete index entry - Close gap created by delete
0035               ***************************************************************
0036               * bl @idx.entry.delete
0037               *--------------------------------------------------------------
0038               * INPUT
0039               * @parm1    = Line number in editor buffer to delete
0040               * @parm2    = Line number of last line to check for reorg
0041               *--------------------------------------------------------------
0042               * Register usage
0043               * tmp0,tmp1,tmp2,tmp3
0044               ********|*****|*********************|**************************
0045               idx.entry.delete:
0046 35E4 0649  14         dect  stack
0047 35E6 C64B  30         mov   r11,*stack            ; Save return address
0048 35E8 0649  14         dect  stack
0049 35EA C644  30         mov   tmp0,*stack           ; Push tmp0
0050 35EC 0649  14         dect  stack
0051 35EE C645  30         mov   tmp1,*stack           ; Push tmp1
0052 35F0 0649  14         dect  stack
0053 35F2 C646  30         mov   tmp2,*stack           ; Push tmp2
0054 35F4 0649  14         dect  stack
0055 35F6 C647  30         mov   tmp3,*stack           ; Push tmp3
0056                       ;------------------------------------------------------
0057                       ; Get index slot
0058                       ;------------------------------------------------------
0059 35F8 C120  34         mov   @parm1,tmp0           ; Line number in editor buffer
     35FA A006     
0060               
0061 35FC 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     35FE 3264     
0062                                                   ; \ i  tmp0     = Line number
0063                                                   ; / o  outparm1 = Slot offset in SAMS page
0064               
0065 3600 C120  34         mov   @outparm1,tmp0        ; Index offset
     3602 A018     
0066                       ;------------------------------------------------------
0067                       ; Prepare for index reorg
0068                       ;------------------------------------------------------
0069 3604 C1A0  34         mov   @parm2,tmp2           ; Get last line to check
     3606 A008     
0070 3608 1303  14         jeq   idx.entry.delete.lastline
0071                                                   ; Exit early if last line = 0
0072               
0073 360A 61A0  34         s     @parm1,tmp2           ; Calculate loop
     360C A006     
0074 360E 1504  14         jgt   idx.entry.delete.reorg
0075                                                   ; Reorganize if loop counter > 0
0076                       ;------------------------------------------------------
0077                       ; Special treatment for last line
0078                       ;------------------------------------------------------
0079               idx.entry.delete.lastline:
0080 3610 0224  22         ai    tmp0,idx.top          ; Add index base to offset
     3612 B000     
0081 3614 04D4  26         clr   *tmp0                 ; Clear index entry
0082 3616 1012  14         jmp   idx.entry.delete.exit ; Exit early
0083                       ;------------------------------------------------------
0084                       ; Reorganize index entries
0085                       ;------------------------------------------------------
0086               idx.entry.delete.reorg:
0087 3618 C1E0  34         mov   @parm2,tmp3           ; Get last line to reorganize
     361A A008     
0088 361C 0287  22         ci    tmp3,2048
     361E 0800     
0089 3620 120A  14         jle   idx.entry.delete.reorg.simple
0090                                                   ; Do simple reorg only if single
0091                                                   ; SAMS index page, otherwise complex reorg.
0092                       ;------------------------------------------------------
0093                       ; Complex index reorganization (multiple SAMS pages)
0094                       ;------------------------------------------------------
0095               idx.entry.delete.reorg.complex:
0096 3622 06A0  32         bl    @_idx.sams.mapcolumn.on
     3624 31F6     
0097                                                   ; Index in continuous memory region
0098               
0099                       ;-------------------------------------------------------
0100                       ; Recalculate index offset in continuous memory region
0101                       ;-------------------------------------------------------
0102 3626 C120  34         mov   @parm1,tmp0           ; Restore line number
     3628 A006     
0103 362A 0A14  18         sla   tmp0,1                ; Calculate offset
0104               
0105 362C 06A0  32         bl    @_idx.entry.delete.reorg
     362E 35D4     
0106                                                   ; Reorganize index
0107                                                   ; \ i  tmp0 = Index offset
0108                                                   ; / i  tmp2 = Loop count
0109               
0110 3630 06A0  32         bl    @_idx.sams.mapcolumn.off
     3632 322A     
0111                                                   ; Restore memory window layout
0112               
0113 3634 1002  14         jmp   !
0114                       ;------------------------------------------------------
0115                       ; Simple index reorganization
0116                       ;------------------------------------------------------
0117               idx.entry.delete.reorg.simple:
0118 3636 06A0  32         bl    @_idx.entry.delete.reorg
     3638 35D4     
0119                       ;------------------------------------------------------
0120                       ; Clear index entry (base + offset already set)
0121                       ;------------------------------------------------------
0122 363A 04D4  26 !       clr   *tmp0                 ; Clear index entry
0123                       ;------------------------------------------------------
0124                       ; Exit
0125                       ;------------------------------------------------------
0126               idx.entry.delete.exit:
0127 363C C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0128 363E C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0129 3640 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0130 3642 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0131 3644 C2F9  30         mov   *stack+,r11           ; Pop r11
0132 3646 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0031                       copy  "idx.insert.asm"       ; Index management - insert slot
     **** ****     > idx.insert.asm
0001               * FILE......: idx.insert.asm
0002               * Purpose...: Insert index entry
0003               
0004               ***************************************************************
0005               * _idx.entry.insert.reorg
0006               * Reorganize index slot entries
0007               ***************************************************************
0008               * bl @_idx.entry.insert.reorg
0009               *--------------------------------------------------------------
0010               *  Remarks
0011               *  Private, only to be called from idx_entry_insert
0012               ********|*****|*********************|**************************
0013               _idx.entry.insert.reorg:
0014                       ;------------------------------------------------------
0015                       ; Assert 1
0016                       ;------------------------------------------------------
0017 3648 0286  22         ci    tmp2,2048*5           ; Crash if loop counter value is unrealistic
     364A 2800     
0018                                                   ; Max. 5 SAMS pages, each with 2048 index
0019                                                   ; entries.
0020               
0021 364C 1204  14         jle   !                     ; Continue if ok
0022                       ;------------------------------------------------------
0023                       ; Crash and burn
0024                       ;------------------------------------------------------
0025               _idx.entry.insert.reorg.crash:
0026 364E C80B  38         mov   r11,@>ffce            ; \ Save caller address
     3650 FFCE     
0027 3652 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     3654 2026     
0028                       ;------------------------------------------------------
0029                       ; Reorganize index entries
0030                       ;------------------------------------------------------
0031 3656 0224  22 !       ai    tmp0,idx.top          ; Add index base to offset
     3658 B000     
0032 365A C144  18         mov   tmp0,tmp1             ; a = current slot
0033 365C 05C5  14         inct  tmp1                  ; b = current slot + 2
0034 365E 0586  14         inc   tmp2                  ; One time adjustment for current line
0035                       ;------------------------------------------------------
0036                       ; Assert 2
0037                       ;------------------------------------------------------
0038 3660 C1C6  18         mov   tmp2,tmp3             ; Number of slots to reorganize
0039 3662 0A17  18         sla   tmp3,1                ; adjust to slot size
0040 3664 0507  14         neg   tmp3                  ; tmp3 = -tmp3
0041 3666 A1C4  18         a     tmp0,tmp3             ; tmp3 = tmp3 + tmp0
0042 3668 0287  22         ci    tmp3,idx.top - 4      ; Address before top of index ?
     366A AFFC     
0043 366C 1504  14         jgt   _idx.entry.insert.reorg.loop
0044                                                   ; No, jump to loop start
0045                       ;------------------------------------------------------
0046                       ; Crash and burn
0047                       ;------------------------------------------------------
0048 366E C80B  38         mov   r11,@>ffce            ; \ Save caller address
     3670 FFCE     
0049 3672 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     3674 2026     
0050                       ;------------------------------------------------------
0051                       ; Loop backwards from end of index up to insert point
0052                       ;------------------------------------------------------
0053               _idx.entry.insert.reorg.loop:
0054 3676 C554  38         mov   *tmp0,*tmp1           ; Copy a -> b
0055 3678 0644  14         dect  tmp0                  ; Move pointer up
0056 367A 0645  14         dect  tmp1                  ; Move pointer up
0057 367C 0606  14         dec   tmp2                  ; Next index entry
0058 367E 15FB  14         jgt   _idx.entry.insert.reorg.loop
0059                                                   ; Repeat until done
0060                       ;------------------------------------------------------
0061                       ; Clear index entry at insert point
0062                       ;------------------------------------------------------
0063 3680 05C4  14         inct  tmp0                  ; \ Clear index entry for line
0064 3682 04D4  26         clr   *tmp0                 ; / following insert point
0065               
0066 3684 045B  20         b     *r11                  ; Return to caller
0067               
0068               
0069               
0070               
0071               ***************************************************************
0072               * idx.entry.insert
0073               * Insert index entry
0074               ***************************************************************
0075               * bl @idx.entry.insert
0076               *--------------------------------------------------------------
0077               * INPUT
0078               * @parm1    = Line number in editor buffer to insert
0079               * @parm2    = Line number of last line to check for reorg
0080               *--------------------------------------------------------------
0081               * OUTPUT
0082               * NONE
0083               *--------------------------------------------------------------
0084               * Register usage
0085               * tmp0,tmp2
0086               ********|*****|*********************|**************************
0087               idx.entry.insert:
0088 3686 0649  14         dect  stack
0089 3688 C64B  30         mov   r11,*stack            ; Save return address
0090 368A 0649  14         dect  stack
0091 368C C644  30         mov   tmp0,*stack           ; Push tmp0
0092 368E 0649  14         dect  stack
0093 3690 C645  30         mov   tmp1,*stack           ; Push tmp1
0094 3692 0649  14         dect  stack
0095 3694 C646  30         mov   tmp2,*stack           ; Push tmp2
0096 3696 0649  14         dect  stack
0097 3698 C647  30         mov   tmp3,*stack           ; Push tmp3
0098                       ;------------------------------------------------------
0099                       ; Prepare for index reorg
0100                       ;------------------------------------------------------
0101 369A C1A0  34         mov   @parm2,tmp2           ; Get last line to check
     369C A008     
0102 369E 61A0  34         s     @parm1,tmp2           ; Calculate loop
     36A0 A006     
0103 36A2 130F  14         jeq   idx.entry.insert.reorg.simple
0104                                                   ; Special treatment if last line
0105                       ;------------------------------------------------------
0106                       ; Reorganize index entries
0107                       ;------------------------------------------------------
0108               idx.entry.insert.reorg:
0109 36A4 C1E0  34         mov   @parm2,tmp3
     36A6 A008     
0110 36A8 0287  22         ci    tmp3,2048
     36AA 0800     
0111 36AC 110A  14         jlt   idx.entry.insert.reorg.simple
0112                                                   ; Do simple reorg only if single
0113                                                   ; SAMS index page, otherwise complex reorg.
0114                       ;------------------------------------------------------
0115                       ; Complex index reorganization (multiple SAMS pages)
0116                       ;------------------------------------------------------
0117               idx.entry.insert.reorg.complex:
0118 36AE 06A0  32         bl    @_idx.sams.mapcolumn.on
     36B0 31F6     
0119                                                   ; Index in continuous memory region
0120                                                   ; b000 - ffff (5 SAMS pages)
0121               
0122 36B2 C120  34         mov   @parm2,tmp0           ; Last line number in editor buffer
     36B4 A008     
0123 36B6 0A14  18         sla   tmp0,1                ; tmp0 * 2
0124               
0125 36B8 06A0  32         bl    @_idx.entry.insert.reorg
     36BA 3648     
0126                                                   ; Reorganize index
0127                                                   ; \ i  tmp0 = Last line in index
0128                                                   ; / i  tmp2 = Num. of index entries to move
0129               
0130 36BC 06A0  32         bl    @_idx.sams.mapcolumn.off
     36BE 322A     
0131                                                   ; Restore memory window layout
0132               
0133 36C0 1008  14         jmp   idx.entry.insert.exit
0134                       ;------------------------------------------------------
0135                       ; Simple index reorganization
0136                       ;------------------------------------------------------
0137               idx.entry.insert.reorg.simple:
0138 36C2 C120  34         mov   @parm2,tmp0           ; Last line number in editor buffer
     36C4 A008     
0139               
0140 36C6 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     36C8 3264     
0141                                                   ; \ i  tmp0     = Line number
0142                                                   ; / o  outparm1 = Slot offset in SAMS page
0143               
0144 36CA C120  34         mov   @outparm1,tmp0        ; Index offset
     36CC A018     
0145               
0146 36CE 06A0  32         bl    @_idx.entry.insert.reorg
     36D0 3648     
0147                                                   ; Reorganize index
0148                                                   ; \ i  tmp0 = Last line in index
0149                                                   ; / i  tmp2 = Num. of index entries to move
0150               
0151                       ;------------------------------------------------------
0152                       ; Exit
0153                       ;------------------------------------------------------
0154               idx.entry.insert.exit:
0155 36D2 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0156 36D4 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0157 36D6 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0158 36D8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0159 36DA C2F9  30         mov   *stack+,r11           ; Pop r11
0160 36DC 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0032                       ;-----------------------------------------------------------------------
0033                       ; Logic for editor buffer
0034                       ;-----------------------------------------------------------------------
0035                       copy  "edb.line.mappage.asm"    ; Activate edbuf SAMS page for line
     **** ****     > edb.line.mappage.asm
0001               * FILE......: edb.line.mappage.asm
0002               * Purpose...: Editor buffer SAMS setup
0003               
0004               
0005               ***************************************************************
0006               * edb.line.mappage
0007               * Activate editor buffer SAMS page for line
0008               ***************************************************************
0009               * bl  @edb.line.mappage
0010               *
0011               * tmp0 = Line number in editor buffer (base 1)
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * outparm1 = Pointer to line in editor buffer
0015               * outparm2 = SAMS page
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0, tmp1
0019               ***************************************************************
0020               edb.line.mappage:
0021 36DE 0649  14         dect  stack
0022 36E0 C64B  30         mov   r11,*stack            ; Push return address
0023 36E2 0649  14         dect  stack
0024 36E4 C644  30         mov   tmp0,*stack           ; Push tmp0
0025 36E6 0649  14         dect  stack
0026 36E8 C645  30         mov   tmp1,*stack           ; Push tmp1
0027                       ;------------------------------------------------------
0028                       ; Assert
0029                       ;------------------------------------------------------
0030 36EA 8804  34         c     tmp0,@edb.lines       ; Non-existing line?
     36EC A504     
0031 36EE 1204  14         jle   edb.line.mappage.lookup
0032                                                   ; All checks passed, continue
0033                                                   ;--------------------------
0034                                                   ; Assert failed
0035                                                   ;--------------------------
0036 36F0 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     36F2 FFCE     
0037 36F4 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     36F6 2026     
0038                       ;------------------------------------------------------
0039                       ; Lookup SAMS page for line in parm1
0040                       ;------------------------------------------------------
0041               edb.line.mappage.lookup:
0042 36F8 C804  38         mov   tmp0,@parm1           ; Set line number in editor buffer
     36FA A006     
0043               
0044 36FC 06A0  32         bl    @idx.pointer.get      ; Get pointer to line
     36FE 3588     
0045                                                   ; \ i  parm1    = Line number
0046                                                   ; | o  outparm1 = Pointer to line
0047                                                   ; / o  outparm2 = SAMS page
0048               
0049 3700 C120  34         mov   @outparm2,tmp0        ; SAMS page
     3702 A01A     
0050 3704 C160  34         mov   @outparm1,tmp1        ; Pointer to line
     3706 A018     
0051 3708 130B  14         jeq   edb.line.mappage.exit ; Nothing to page-in if NULL pointer
0052                                                   ; (=empty line)
0053                       ;------------------------------------------------------
0054                       ; Determine if requested SAMS page is already active
0055                       ;------------------------------------------------------
0056 370A 8120  34         c     @tv.sams.c000,tmp0    ; Compare with active page editor buffer
     370C A208     
0057 370E 1308  14         jeq   edb.line.mappage.exit ; Request page already active, so exit
0058                       ;------------------------------------------------------
0059                       ; Activate requested SAMS page
0060                       ;-----------------------------------------------------
0061 3710 06A0  32         bl    @xsams.page.set       ; Switch SAMS memory page
     3712 2594     
0062                                                   ; \ i  tmp0 = SAMS page
0063                                                   ; / i  tmp1 = Memory address
0064               
0065 3714 C820  54         mov   @outparm2,@tv.sams.c000
     3716 A01A     
     3718 A208     
0066                                                   ; Set page in shadow registers
0067               
0068 371A C820  54         mov   @outparm2,@edb.sams.page
     371C A01A     
     371E A518     
0069                                                   ; Set current SAMS page
0070                       ;------------------------------------------------------
0071                       ; Exit
0072                       ;------------------------------------------------------
0073               edb.line.mappage.exit:
0074 3720 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0075 3722 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0076 3724 C2F9  30         mov   *stack+,r11           ; Pop r11
0077 3726 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0036                       copy  "edb.line.getlength.asm"  ; Get line length
     **** ****     > edb.line.getlength.asm
0001               * FILE......: edb.line.getlength.asm
0002               * Purpose...: Get length of specified line in editor buffer
0003               
0004               ***************************************************************
0005               * edb.line.getlength
0006               * Get length of specified line
0007               ***************************************************************
0008               *  bl   @edb.line.getlength
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Line number (base 0)
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @outparm1 = Length of line
0015               * @outparm2 = SAMS page
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0,tmp1
0019               ********|*****|*********************|**************************
0020               edb.line.getlength:
0021 3728 0649  14         dect  stack
0022 372A C64B  30         mov   r11,*stack            ; Push return address
0023 372C 0649  14         dect  stack
0024 372E C644  30         mov   tmp0,*stack           ; Push tmp0
0025 3730 0649  14         dect  stack
0026 3732 C645  30         mov   tmp1,*stack           ; Push tmp1
0027                       ;------------------------------------------------------
0028                       ; Initialisation
0029                       ;------------------------------------------------------
0030 3734 04E0  34         clr   @outparm1             ; Reset length
     3736 A018     
0031 3738 04E0  34         clr   @outparm2             ; Reset SAMS bank
     373A A01A     
0032                       ;------------------------------------------------------
0033                       ; Exit if requested line beyond editor buffer
0034                       ;------------------------------------------------------
0035 373C C120  34         mov   @parm1,tmp0           ; \
     373E A006     
0036 3740 0584  14         inc   tmp0                  ; /  base 1
0037               
0038 3742 8804  34         c     tmp0,@edb.lines       ; Requested line at BOT?
     3744 A504     
0039 3746 1201  14         jle   !                     ; No, continue processing
0040 3748 100B  14         jmp   edb.line.getlength.null
0041                                                   ; Set length 0 and exit early
0042                       ;------------------------------------------------------
0043                       ; Map SAMS page
0044                       ;------------------------------------------------------
0045 374A C120  34 !       mov   @parm1,tmp0           ; Get line
     374C A006     
0046               
0047 374E 06A0  32         bl    @edb.line.mappage     ; Activate editor buffer SAMS page for line
     3750 36DE     
0048                                                   ; \ i  tmp0     = Line number
0049                                                   ; | o  outparm1 = Pointer to line
0050                                                   ; / o  outparm2 = SAMS page
0051               
0052 3752 C120  34         mov   @outparm1,tmp0        ; Store pointer in tmp0
     3754 A018     
0053 3756 1304  14         jeq   edb.line.getlength.null
0054                                                   ; Set length to 0 if null-pointer
0055                       ;------------------------------------------------------
0056                       ; Process line prefix and exit
0057                       ;------------------------------------------------------
0058 3758 C154  26         mov   *tmp0,tmp1            ; Get length into tmp1
0059 375A C805  38         mov   tmp1,@outparm1        ; Save length
     375C A018     
0060 375E 1002  14         jmp   edb.line.getlength.exit
0061                       ;------------------------------------------------------
0062                       ; Set length to 0 if null-pointer
0063                       ;------------------------------------------------------
0064               edb.line.getlength.null:
0065 3760 04E0  34         clr   @outparm1             ; Set length to 0, was a null-pointer
     3762 A018     
0066                       ;------------------------------------------------------
0067                       ; Exit
0068                       ;------------------------------------------------------
0069               edb.line.getlength.exit:
0070 3764 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0071 3766 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0072 3768 C2F9  30         mov   *stack+,r11           ; Pop r11
0073 376A 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0037                       copy  "edb.line.getlength2.asm" ; Get length of current row
     **** ****     > edb.line.getlength2.asm
0001               * FILE......: edb.line.getlength2.asm
0002               * Purpose...: Get length of current row (as seen from editor buffer side)
0003               
0004               ***************************************************************
0005               * edb.line.getlength2
0006               * Get length of current row (as seen from editor buffer side)
0007               ***************************************************************
0008               *  bl   @edb.line.getlength2
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @fb.row = Row in frame buffer
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @fb.row.length = Length of row
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               ********|*****|*********************|**************************
0019               edb.line.getlength2:
0020 376C 0649  14         dect  stack
0021 376E C64B  30         mov   r11,*stack            ; Save return address
0022 3770 0649  14         dect  stack
0023 3772 C644  30         mov   tmp0,*stack           ; Push tmp0
0024                       ;------------------------------------------------------
0025                       ; Calculate line in editor buffer
0026                       ;------------------------------------------------------
0027 3774 C120  34         mov   @fb.topline,tmp0      ; Get top line in frame buffer
     3776 A304     
0028 3778 A120  34         a     @fb.row,tmp0          ; Get current row in frame buffer
     377A A306     
0029 377C C804  38         mov   tmp0,@parm1
     377E A006     
0030                       ;------------------------------------------------------
0031                       ; Get length
0032                       ;------------------------------------------------------
0033 3780 06A0  32         bl    @edb.line.getlength   ; Get length of specified line
     3782 3728     
0034                                                   ; \ i  @parm1    = Line number (base 0)
0035                                                   ; | o  @outparm1 = Length of line
0036                                                   ; / o  @outparm2 = SAMS page
0037               
0038 3784 C820  54         mov   @outparm1,@fb.row.length
     3786 A018     
     3788 A308     
0039                                                   ; Save row length
0040                       ;------------------------------------------------------
0041                       ; Exit
0042                       ;------------------------------------------------------
0043               edb.line.getlength2.exit:
0044 378A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0045 378C C2F9  30         mov   *stack+,r11           ; Pop R11
0046 378E 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0038                       copy  "edb.hipage.alloc.asm"    ; Check/increase highest SAMS page
     **** ****     > edb.hipage.alloc.asm
0001               * FILE......: edb.hipage.alloc.asm
0002               * Purpose...: Editor buffer utilities
0003               
0004               
0005               ***************************************************************
0006               * edb.hipage.alloc
0007               * Check and increase highest SAMS page of editor buffer
0008               ***************************************************************
0009               *  bl   @edb.hipage.alloc
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @edb.next_free.ptr = Pointer to next free line
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0,tmp1
0018               ********|*****|*********************|**************************
0019               edb.hipage.alloc:
0020 3790 0649  14         dect  stack
0021 3792 C64B  30         mov   r11,*stack            ; Save return address
0022 3794 0649  14         dect  stack
0023 3796 C644  30         mov   tmp0,*stack           ; Push tmp0
0024 3798 0649  14         dect  stack
0025 379A C645  30         mov   tmp1,*stack           ; Push tmp1
0026                       ;------------------------------------------------------
0027                       ; 1a. Check if highest SAMS page needs to be increased
0028                       ;------------------------------------------------------
0029               edb.hipage.alloc.check_setpage:
0030 379C C120  34         mov   @edb.next_free.ptr,tmp0
     379E A508     
0031                                                   ;--------------------------
0032                                                   ; Check for page overflow
0033                                                   ;--------------------------
0034 37A0 0244  22         andi  tmp0,>0fff            ; Get rid of highest nibble
     37A2 0FFF     
0035 37A4 0224  22         ai    tmp0,82               ; Assume line of 80 chars (+2 bytes prefix)
     37A6 0052     
0036 37A8 0284  22         ci    tmp0,>1000 - 16       ; 4K boundary reached?
     37AA 0FF0     
0037 37AC 1105  14         jlt   edb.hipage.alloc.setpage
0038                                                   ; Not yet, don't increase SAMS page
0039                       ;------------------------------------------------------
0040                       ; 1b. Increase highest SAMS page (copy-on-write!)
0041                       ;------------------------------------------------------
0042 37AE 05A0  34         inc   @edb.sams.hipage      ; Set highest SAMS page
     37B0 A51C     
0043 37B2 C820  54         mov   @edb.top.ptr,@edb.next_free.ptr
     37B4 A500     
     37B6 A508     
0044                                                   ; Start at top of SAMS page again
0045                       ;------------------------------------------------------
0046                       ; 1c. Switch to SAMS page and exit
0047                       ;------------------------------------------------------
0048               edb.hipage.alloc.setpage:
0049 37B8 C120  34         mov   @edb.sams.hipage,tmp0
     37BA A51C     
0050 37BC C160  34         mov   @edb.top.ptr,tmp1
     37BE A500     
0051 37C0 06A0  32         bl    @xsams.page.set       ; Set SAMS page
     37C2 2594     
0052                                                   ; \ i  tmp0 = SAMS page number
0053                                                   ; / i  tmp1 = Memory address
0054               
0055 37C4 1004  14         jmp   edb.hipage.alloc.exit
0056                       ;------------------------------------------------------
0057                       ; Check failed, crash CPU!
0058                       ;------------------------------------------------------
0059               edb.hipage.alloc.crash:
0060 37C6 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     37C8 FFCE     
0061 37CA 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     37CC 2026     
0062                       ;------------------------------------------------------
0063                       ; Exit
0064                       ;------------------------------------------------------
0065               edb.hipage.alloc.exit:
0066 37CE C179  30         mov   *stack+,tmp1          ; Pop tmp1
0067 37D0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0068 37D2 C2F9  30         mov   *stack+,r11           ; Pop R11
0069 37D4 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0039                       ;-----------------------------------------------------------------------
0040                       ; Utility functions
0041                       ;-----------------------------------------------------------------------
0042                       copy  "pane.topline.clearmsg.asm" ; Remove overlay msg in top line
     **** ****     > pane.topline.clearmsg.asm
0001               * FILE......: pane.topline.clearmsg.asm
0002               * Purpose...: One-shot task for clearing overlay message in top line
0003               
0004               
0005               ***************************************************************
0006               * pane.topline.oneshot.clearmsg
0007               * Remove overlay message in top line
0008               ***************************************************************
0009               * Runs as one-shot task in slot 3
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * none
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * none
0019               ********|*****|*********************|**************************
0020               pane.topline.oneshot.clearmsg:
0021 37D6 0649  14         dect  stack
0022 37D8 C64B  30         mov   r11,*stack            ; Push return address
0023 37DA 0649  14         dect  stack
0024 37DC C660  42         mov   @wyx,*stack           ; Push cursor position
     37DE 832A     
0025                       ;-------------------------------------------------------
0026                       ; Clear message
0027                       ;-------------------------------------------------------
0028 37E0 06A0  32         bl    @hchar
     37E2 27F0     
0029 37E4 0032                   byte 0,50,32,20
     37E6 2014     
0030 37E8 FFFF                   data EOL              ; Clear message
0031               
0032 37EA 04E0  34         clr   @tv.task.oneshot      ; Reset oneshot task
     37EC A226     
0033                       ;-------------------------------------------------------
0034                       ; Exit
0035                       ;-------------------------------------------------------
0036               pane.topline.oneshot.clearmsg.exit:
0037 37EE C839  42         mov   *stack+,@wyx          ; Pop cursor position
     37F0 832A     
0038 37F2 C2F9  30         mov   *stack+,r11           ; Pop R11
0039 37F4 045B  20         b     *r11                  ; Return to task
                   < rom.resident.asm
0043                       copy  "fg99.run.asm"              ; Run FinalGROM cartridge image
     **** ****     > fg99.run.asm
0001               * FILE......: fg99.run.asm
0002               * Purpose...: Run FinalGROM cartridge image
0003               
0004               
0005               ***************************************************************
0006               * fg99.run
0007               * Run FinalGROM cartridge image
0008               ***************************************************************
0009               * bl   @fg99.run
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @tv.fg99.img.ptr = Pointer to cartridge image entry
0013               *
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * r1 in GPL WS, tmp0, tmp1, tmp2, r12
0019               *--------------------------------------------------------------
0020               * Remarks
0021               * Based on tib.run
0022               ********|*****|*********************|**************************
0023               fg99.run:
0024                       ;-------------------------------------------------------
0025                       ; Put VDP in TI Basic compatible mode (32x24)
0026                       ;-------------------------------------------------------
0027 37F6 06A0  32         bl    @f18rst               ; Reset and lock the F18A
     37F8 27C4     
0028               
0029 37FA 06A0  32         bl    @vidtab               ; Load video mode table into VDP
     37FC 22F8     
0030 37FE 7F24                   data tibasic.32x24    ; Equate selected video mode table
0031               
0032 3800 06A0  32         bl    @scroff               ; Turn off screen
     3802 26A4     
0033                       ;------------------------------------------------------
0034                       ; Clear magic string
0035                       ;------------------------------------------------------
0036                       ; Clear the bytes 'DEAD994ABEEF' in core memory.
0037                       ; Indicate it's unsafe to resume Stevie and initialization
0038                       ; is necessary.
0039 3804 04E0  34         clr   @magic.str.w1
     3806 A000     
0040 3808 04E0  34         clr   @magic.str.w2
     380A A002     
0041 380C 04E0  34         clr   @magic.str.w3
     380E A004     
0042                       ;-------------------------------------------------------
0043                       ; Load FG99 cartridge, but do not start cartridge yet
0044                       ;-------------------------------------------------------
0045 3810 C120  34         mov   @tv.fg99.img.ptr,tmp0 ; Get pointer to cartridge image
     3812 A232     
0046 3814 06A0  32         bl    @xfg99                ; Run FinalGROM cartridge image
     3816 2E34     
0047                                                   ; \ i tmp0 = Pointer to cartridge image
0048                                                   ; /
0049                       ;-------------------------------------------------------
0050                       ; Turn SAMS mapper off and exit to monitor
0051                       ;-------------------------------------------------------
0052 3818 020C  20         li    r12,>1e00             ; SAMS CRU address
     381A 1E00     
0053 381C 1E01  16         sbz   1                     ; Disable SAMS mapper
0054                                                   ; \ We keep the mapper off while
0055                                                   ; | running TI Basic or other external
0056                                                   ; / programs.
0057               
0058 381E 0420  42         blwp @0                     ; Return to monitor
     3820 0000     
                   < rom.resident.asm
0044                       ;-----------------------------------------------------------------------
0045                       ; Background tasks
0046                       ;-----------------------------------------------------------------------
0048               
0049                       copy  "task.vdp.cursor.sat.asm"     ; Copy cursor SAT to VDP
     **** ****     > task.vdp.cursor.sat.asm
0001               * FILE......: task.vdp.cursor.sat.asm
0002               * Purpose...: Copy cursor SAT to VDP
0003               
0004               ***************************************************************
0005               * Task - Copy Sprite Attribute Table (SAT) to VDP
0006               ********|*****|*********************|**************************
0007               task.vdp.copy.sat:
0008 3822 0649  14         dect  stack
0009 3824 C64B  30         mov   r11,*stack            ; Save return address
0010 3826 0649  14         dect  stack
0011 3828 C644  30         mov   tmp0,*stack           ; Push tmp0
0012 382A 0649  14         dect  stack
0013 382C C645  30         mov   tmp1,*stack           ; Push tmp1
0014 382E 0649  14         dect  stack
0015 3830 C646  30         mov   tmp2,*stack           ; Push tmp2
0016                       ;------------------------------------------------------
0017                       ; Get pane with focus
0018                       ;------------------------------------------------------
0019 3832 C120  34         mov   @tv.pane.focus,tmp0   ; Get pane with focus
     3834 A224     
0020               
0021 3836 0284  22         ci    tmp0,pane.focus.fb
     3838 0000     
0022 383A 130F  14         jeq   task.vdp.copy.sat.fb  ; Frame buffer has focus
0023               
0024 383C 0284  22         ci    tmp0,pane.focus.cmdb
     383E 0001     
0025 3840 1304  14         jeq   task.vdp.copy.sat.cmdb
0026                                                   ; CMDB buffer has focus
0027                       ;------------------------------------------------------
0028                       ; Assert failed. Invalid value
0029                       ;------------------------------------------------------
0030 3842 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     3844 FFCE     
0031 3846 06A0  32         bl    @cpu.crash            ; / Halt system.
     3848 2026     
0032                       ;------------------------------------------------------
0033                       ; CMDB buffer has focus, position cursor
0034                       ;------------------------------------------------------
0035               task.vdp.copy.sat.cmdb:
0036 384A C820  46         mov   @cmdb.cursor,@wyx     ; Position cursor in CMDB pane
     384C A70A     
     384E 832A     
0037 3850 E0A0  34         soc   @wbit0,config         ; Sprite adjustment on
     3852 2020     
0038 3854 06A0  32         bl    @yx2px                ; \ Calculate pixel position
     3856 2706     
0039                                                   ; | i  @WYX = Cursor YX
0040                                                   ; / o  tmp0 = Pixel YX
0041               
0042 3858 100C  14         jmp   task.vdp.copy.sat.write
0043                       ;------------------------------------------------------
0044                       ; Frame buffer has focus, position cursor
0045                       ;------------------------------------------------------
0046               task.vdp.copy.sat.fb:
0047 385A E0A0  34         soc   @wbit0,config         ; Sprite adjustment on
     385C 2020     
0048 385E 06A0  32         bl    @yx2px                ; \ Calculate pixel position
     3860 2706     
0049                                                   ; | i  @WYX = Cursor YX
0050                                                   ; / o  tmp0 = Pixel YX
0051               
0052                       ;------------------------------------------------------
0053                       ; Cursor Y adjustment (topline, ruler, ...)
0054                       ;------------------------------------------------------
0055 3862 C160  34         mov   @tv.ruler.visible,tmp1
     3864 A210     
0056 3866 1303  14         jeq   task.vdp.copy.sat.fb.noruler
0057 3868 0224  22         ai    tmp0,>1000            ; Adjust VDP cursor because of topline+ruler
     386A 1000     
0058 386C 1002  14         jmp   task.vdp.copy.sat.write
0059               
0060               task.vdp.copy.sat.fb.noruler:
0061 386E 0224  22         ai    tmp0,>0800            ; Adjust VDP cursor because of topline
     3870 0800     
0062                       ;------------------------------------------------------
0063                       ; Dump sprite attribute table
0064                       ;------------------------------------------------------
0065               task.vdp.copy.sat.write:
0066 3872 C804  38         mov   tmp0,@ramsat          ; Set cursor YX
     3874 A056     
0067                       ;------------------------------------------------------
0068                       ; Handle column and row indicators
0069                       ;------------------------------------------------------
0070 3876 C160  34         mov   @tv.ruler.visible,tmp1
     3878 A210     
0071                                                   ; Ruler visible?
0072 387A 1314  14         jeq   task.vdp.copy.sat.hide.indicators
0073                                                   ; Not visible, skip
0074               
0075 387C C160  34         mov   @cmdb.visible,tmp1
     387E A702     
0076 3880 0285  22         ci    tmp1,>ffff            ; CMDB pane visible?
     3882 FFFF     
0077 3884 130F  14         jeq   task.vdp.copy.sat.hide.indicators
0078                                                   ; Not visible, skip
0079               
0080 3886 0244  22         andi  tmp0,>ff00            ; \ Clear X position
     3888 FF00     
0081 388A 0264  22         ori   tmp0,240              ; | Line indicator on pixel X 240
     388C 00F0     
0082 388E C804  38         mov   tmp0,@ramsat+4        ; / Set line indicator    <
     3890 A05A     
0083               
0084 3892 C120  34         mov   @ramsat,tmp0
     3894 A056     
0085 3896 0244  22         andi  tmp0,>00ff            ; \ Clear Y position
     3898 00FF     
0086 389A 0264  22         ori   tmp0,>0800            ; | Column indicator on pixel Y 8
     389C 0800     
0087 389E C804  38         mov   tmp0,@ramsat+8        ; / Set column indicator  v
     38A0 A05E     
0088               
0089 38A2 1005  14         jmp   task.vdp.copy.sat.write2
0090                       ;------------------------------------------------------
0091                       ; Do not show column and row indicators
0092                       ;------------------------------------------------------
0093               task.vdp.copy.sat.hide.indicators:
0094 38A4 04C5  14         clr   tmp1
0095 38A6 D805  38         movb  tmp1,@ramsat+7        ; \ Hide line indicator    <
     38A8 A05D     
0096                                                   ; / by transparant color
0097 38AA D805  38         movb  tmp1,@ramsat+11       ; \ Hide column indicator  v
     38AC A061     
0098                                                   ; / by transparant color
0099                       ;------------------------------------------------------
0100                       ; Dump to VDP
0101                       ;------------------------------------------------------
0102               task.vdp.copy.sat.write2:
0103 38AE 06A0  32         bl    @cpym2v               ; Copy sprite SAT to VDP
     38B0 24A4     
0104 38B2 2180                   data sprsat,ramsat,14 ; \ i  p0 = VDP destination
     38B4 A056     
     38B6 000E     
0105                                                   ; | i  p1 = ROM/RAM source
0106                                                   ; / i  p2 = Number of bytes to write
0107                       ;------------------------------------------------------
0108                       ; Exit
0109                       ;------------------------------------------------------
0110               task.vdp.copy.sat.exit:
0111 38B8 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0112 38BA C179  30         mov   *stack+,tmp1          ; Pop tmp1
0113 38BC C139  30         mov   *stack+,tmp0          ; Pop tmp0
0114 38BE C2F9  30         mov   *stack+,r11           ; Pop r11
0115 38C0 0460  28         b     @slotok               ; Exit task
     38C2 2EF2     
                   < rom.resident.asm
0050                       copy  "task.vdp.cursor.sprite.asm"  ; Set cursor shape in VDP (blink)
     **** ****     > task.vdp.cursor.sprite.asm
0001               * FILE......: task.vdp.cursor.sprite.asm
0002               * Purpose...: VDP sprite cursor shape (sprite version)
0003               
0004               ***************************************************************
0005               * Task - Update cursor shape (blink)
0006               ********|*****|*********************|**************************
0007               task.vdp.cursor:
0008 38C4 0649  14         dect  stack
0009 38C6 C64B  30         mov   r11,*stack            ; Save return address
0010                       ;------------------------------------------------------
0011                       ; Set cursor shape (sprite version)
0012                       ;------------------------------------------------------
0013 38C8 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     38CA 3038     
0014 38CC 600C                   data bank6.rom        ; | i  p0 = bank address
0015 38CE 7F4A                   data vec.6            ; | i  p1 = Vector with target address
0016 38D0 600E                   data bankid           ; / i  p2 = Source ROM bank for return
0017                       ;------------------------------------------------------
0018                       ; Exit
0019                       ;------------------------------------------------------
0020               task.vdp.cursor.exit:
0021 38D2 C2F9  30         mov   *stack+,r11           ; Pop r11
0022 38D4 0460  28         b     @slotok               ; Exit task
     38D6 2EF2     
                   < rom.resident.asm
0051               
0057               
0058                       copy  "task.oneshot.asm"            ; Run "one shot" task
     **** ****     > task.oneshot.asm
0001               * FILE......: task.oneshot.asm
0002               * Purpose...: Trigger one-shot task
0003               
0004               ***************************************************************
0005               * Task - One-shot
0006               ***************************************************************
0007               
0008               task.oneshot:
0009 38D8 C120  34         mov   @tv.task.oneshot,tmp0  ; Get pointer to one-shot task
     38DA A226     
0010 38DC 1301  14         jeq   task.oneshot.exit
0011               
0012 38DE 0694  24         bl    *tmp0                  ; Execute one-shot task
0013                       ;------------------------------------------------------
0014                       ; Exit
0015                       ;------------------------------------------------------
0016               task.oneshot.exit:
0017 38E0 0460  28         b     @slotok                ; Exit task
     38E2 2EF2     
                   < rom.resident.asm
0059                       ;------------------------------------------------------
0060                       ; Program data
0061                       ;------------------------------------------------------
0062                       even
0063                       copy  "data.constants.asm"          ; Constants
     **** ****     > data.constants.asm
0001               * FILE......: data.constants.asm
0002               * Purpose...: Stevie Editor - data segment (constants)
0003               
0004               ***************************************************************
0005               *                      Constants
0006               ********|*****|*********************|**************************
0007               
0008               ***************************************************************
0009               * Sprite Attribute Table
0010               *--------------------------------------------------------------
0011               romsat:
0012                                                   ; YX, initial shape and color
0013 38E4 0000             data  >0000,>0001           ; Cursor
     38E6 0001     
0014 38E8 0000             data  >0000,>0101           ; Current line indicator     <
     38EA 0101     
0015 38EC 0820             data  >0820,>0201           ; Current column indicator   v
     38EE 0201     
0016               nosprite:
0017 38F0 D000             data  >d000                 ; End-of-Sprites list
0018               
0019               
0020               ***************************************************************
0021               * Stevie color schemes table
0022               *--------------------------------------------------------------
0023               * ;
0024               * ; Word 1
0025               * ; A  MSB  high-nibble    Foreground color text line in frame buffer
0026               * ; B  MSB  low-nibble     Background color text line in frame buffer
0027               * ; C  LSB  high-nibble    Foreground color top/bottom line
0028               * ; D  LSB  low-nibble     Background color top/bottom line
0029               * ;
0030               * ; Word 2
0031               * ; E  MSB  high-nibble    Foreground color cmdb pane
0032               * ; F  MSB  low-nibble     Background color cmdb pane
0033               * ; G  LSB  high-nibble    Cursor foreground color cmdb pane
0034               * ; H  LSB  low-nibble     Cursor foreground color frame buffer
0035               * ;
0036               * ; Word 3
0037               * ; I  MSB  high-nibble    Foreground color busy top/bottom line
0038               * ; J  MSB  low-nibble     Background color busy top/bottom line
0039               * ; K  LSB  high-nibble    Foreground color marked line in frame buffer
0040               * ; L  LSB  low-nibble     Background color marked line in frame buffer
0041               * ;
0042               * ; Word 4
0043               * ; M  MSB  high-nibble    Foreground color command buffer header line
0044               * ; N  MSB  low-nibble     Background color command buffer header line
0045               * ; O  LSB  high-nibble    Foreground color line+column indicator frame buffer
0046               * ; P  LSB  low-nibble     Foreground color ruler frame buffer
0047               *
0048               * ; Colors
0049               * ; 0  Transparant
0050               * ; 1  black
0051               * ; 2  Green
0052               * ; 3  Light Green
0053               * ; 4  Blue
0054               * ; 5  Light Blue
0055               * ; 6  Dark Red
0056               * ; 7  Cyan
0057               * ; 8  Red
0058               * ; 9  Light Red
0059               * ; A  Yellow
0060               * ; B  Light Yellow
0061               * ; C  Dark Green
0062               * ; D  Magenta
0063               * ; E  Grey
0064               * ; F  White
0065               *--------------------------------------------------------------
0066      000C     tv.colorscheme.entries  equ 12        ; Entries in table
0067               
0068               tv.colorscheme.table:
0069                       ;                             ;
0070                       ;      ABCD  EFGH  IJKL  MNOP ;
0071 38F2 F417             data  >f417,>f171,>1b1f,>7111 ; 1  White on blue with cyan touch
     38F4 F171     
     38F6 1B1F     
     38F8 7111     
0072 38FA 21F0             data  >21f0,>21ff,>f112,>21ff ; 2  Dark green on black (minimalistic)
     38FC 21FF     
     38FE F112     
     3900 21FF     
0073 3902 A11A             data  >a11a,>f0ff,>1f1a,>f1ff ; 3  Dark yellow on black
     3904 F0FF     
     3906 1F1A     
     3908 F1FF     
0074 390A 1E1E             data  >1e1e,>1e11,>1ee1,>1e11 ; 4  Black on grey (minimalistic)
     390C 1E11     
     390E 1EE1     
     3910 1E11     
0075 3912 151F             data  >151f,>1511,>1f1f,>1511 ; 5  Black on light blue
     3914 1511     
     3916 1F1F     
     3918 1511     
0076 391A 1313             data  >1313,>1311,>1331,>1311 ; 6  Black on light green (minimalistic)
     391C 1311     
     391E 1331     
     3920 1311     
0077 3922 1771             data  >1771,>1011,>0171,>1711 ; 7  Black on cyan
     3924 1011     
     3926 0171     
     3928 1711     
0078 392A 2112             data  >2112,>f0ff,>1f12,>f1f6 ; 8  Dark green on black
     392C F0FF     
     392E 1F12     
     3930 F1F6     
0079 3932 1FF1             data  >1ff1,>1011,>f1f1,>1f11 ; 9  Black on white
     3934 1011     
     3936 F1F1     
     3938 1F11     
0080 393A 1AF1             data  >1af1,>a111,>1f1f,>f11f ; 10 Black on dark yellow
     393C A111     
     393E 1F1F     
     3940 F11F     
0081 3942 1919             data  >1919,>1911,>1991,>1911 ; 11 Black on light red (minimalistic)
     3944 1911     
     3946 1991     
     3948 1911     
0082 394A FDF1             data  >fdf1,>1d11,>fddf,>1d11 ; 12 White on magenta
     394C 1D11     
     394E FDDF     
     3950 1D11     
0083                       even
0084               
0085               ***************************************************************
0086               * Tab positions
0087               ********|*****|*********************|**************************
0088               tv.tabs.table.lr:
0089 3952 0007             byte  0,7,12,25             ; \   Default tab positions as used
     3954 0C19     
0090 3956 1E2D             byte  30,45,59,79           ; |   in Editor/Assembler module.
     3958 3B4F     
0091 395A FF00             byte  >ff,0,0,0             ; |   Up to 11 positions supported.
     395C 0000     
0092                                                   ; /   >ff means end-of-list.
0093               
0094               tv.tabs.table.rl:
0095 395E 4F3B             byte  79,59,45,30           ; \   Default tab positions as used
     3960 2D1E     
0096 3962 190C             byte  25,12,7,0             ; |   in Editor/Assembler module.
     3964 0700     
0097 3966 FF00             byte  >ff,0,0,0             ; |   Up to 11 positions supported.
     3968 0000     
0098                                                   ; /   >ff means end-of-list.
0099               
0100               ***************************************************************
0101               * Constants for numbers 0-10
0102               ********|*****|*********************|**************************
0103      2000     const.0       equ   w$0000          ; 0
0104      2002     const.1       equ   w$0001          ; 1
0105      2004     const.2       equ   w$0002          ; 2
0106 396A 0003     const.3       data  3               ; 3
0107      2006     const.4       equ   w$0004          ; 4
0108 396C 0005     const.5       data  5               ; 5
0109 396E 0006     const.6       data  6               ; 6
0110 3970 0007     const.7       data  7               ; 7
0111      2008     const.8       equ   w$0008          ; 8
0112 3972 0009     const.9       data  9               ; 9
0113 3974 000A     const.10      data  10              ; 10 ; A
0114 3976 000B     const.11      data  11              ; 11 ; B
0115 3978 000C     const.12      data  12              ; 12 ; C
0116 397A 000D     const.13      data  13              ; 13 ; D
0117 397C 000E     const.14      data  14              ; 14 ; E
0118 397E 000F     const.15      data  15              ; 15 ; F
0119 3980 0020     const.32      data  32              ; 32
0120 3982 0050     const.80      data  80              ; 80
                   < rom.resident.asm
0064                       copy  "data.strings.asm"            ; Strings
     **** ****     > data.strings.asm
0001               * FILE......: data.strings.asm
0002               * Purpose...: RAM shared strings
0003               
0004               ***************************************************************
0005               *                       Strings
0006               ***************************************************************
0007 3984 012C     txt.delim          stri ','
0008                                  even
0009 3986 0520     txt.bottom         stri '  BOT'
     3988 2042     
     398A 4F54     
0010                                  even
0011 398C 044F     txt.ovrwrite       stri 'OVR '
     398E 5652     
     3990 20       
0012                                  even
0013 3992 0449     txt.insert         stri 'INS '
     3994 4E53     
     3996 20       
0014                                  even
0015 3998 0449     txt.autoinsert     stri 'INS+'
     399A 4E53     
     399C 2B       
0016                                  even
0017 399E 012A     txt.star           stri '*'
0018                                  even
0019 39A0 0A4C     txt.loading        stri 'Loading...'
     39A2 6F61     
     39A4 6469     
     39A6 6E67     
     39A8 2E2E     
     39AA 2E       
0020                                  even
0021 39AC 0A53     txt.saving         stri 'Saving....'
     39AE 6176     
     39B0 696E     
     39B2 672E     
     39B4 2E2E     
     39B6 2E       
0022                                  even
0023 39B8 1250     txt.printing       stri 'Printing file.....'
     39BA 7269     
     39BC 6E74     
     39BE 696E     
     39C0 6720     
     39C2 6669     
     39C4 6C65     
     39C6 2E2E     
     39C8 2E2E     
     39CA 2E       
0024                                  even
0025 39CC 1244     txt.block.del      stri 'Deleting block....'
     39CE 656C     
     39D0 6574     
     39D2 696E     
     39D4 6720     
     39D6 626C     
     39D8 6F63     
     39DA 6B2E     
     39DC 2E2E     
     39DE 2E       
0026                                  even
0027 39E0 1143     txt.block.copy     stri 'Copying block....'
     39E2 6F70     
     39E4 7969     
     39E6 6E67     
     39E8 2062     
     39EA 6C6F     
     39EC 636B     
     39EE 2E2E     
     39F0 2E2E     
0028                                  even
0029 39F2 104D     txt.block.move     stri 'Moving block....'
     39F4 6F76     
     39F6 696E     
     39F8 6720     
     39FA 626C     
     39FC 6F63     
     39FE 6B2E     
     3A00 2E2E     
     3A02 2E       
0030                                  even
0031 3A04 1853     txt.block.save     stri 'Saving block to file....'
     3A06 6176     
     3A08 696E     
     3A0A 6720     
     3A0C 626C     
     3A0E 6F63     
     3A10 6B20     
     3A12 746F     
     3A14 2066     
     3A16 696C     
     3A18 652E     
     3A1A 2E2E     
     3A1C 2E       
0032                                  even
0033 3A1E 1843     txt.block.clip     stri 'Copying to clipboard....'
     3A20 6F70     
     3A22 7969     
     3A24 6E67     
     3A26 2074     
     3A28 6F20     
     3A2A 636C     
     3A2C 6970     
     3A2E 626F     
     3A30 6172     
     3A32 642E     
     3A34 2E2E     
     3A36 2E       
0034                                  even
0035 3A38 1250     txt.block.print    stri 'Printing block....'
     3A3A 7269     
     3A3C 6E74     
     3A3E 696E     
     3A40 6720     
     3A42 626C     
     3A44 6F63     
     3A46 6B2E     
     3A48 2E2E     
     3A4A 2E       
0036                                  even
0037 3A4C 1343     txt.clearmem       stri 'Clearing memory....'
     3A4E 6C65     
     3A50 6172     
     3A52 696E     
     3A54 6720     
     3A56 6D65     
     3A58 6D6F     
     3A5A 7279     
     3A5C 2E2E     
     3A5E 2E2E     
0038                                  even
0039 3A60 1552     txt.readdir        stri 'Reading directory....'
     3A62 6561     
     3A64 6469     
     3A66 6E67     
     3A68 2064     
     3A6A 6972     
     3A6C 6563     
     3A6E 746F     
     3A70 7279     
     3A72 2E2E     
     3A74 2E2E     
0040                                  even
0041 3A76 0E4C     txt.done.load      stri 'Load completed'
     3A78 6F61     
     3A7A 6420     
     3A7C 636F     
     3A7E 6D70     
     3A80 6C65     
     3A82 7465     
     3A84 64       
0042                                  even
0043 3A86 1049     txt.done.insert    stri 'Insert completed'
     3A88 6E73     
     3A8A 6572     
     3A8C 7420     
     3A8E 636F     
     3A90 6D70     
     3A92 6C65     
     3A94 7465     
     3A96 64       
0044                                  even
0045 3A98 1041     txt.done.append    stri 'Append completed'
     3A9A 7070     
     3A9C 656E     
     3A9E 6420     
     3AA0 636F     
     3AA2 6D70     
     3AA4 6C65     
     3AA6 7465     
     3AA8 64       
0046                                  even
0047 3AAA 0E53     txt.done.save      stri 'Save completed'
     3AAC 6176     
     3AAE 6520     
     3AB0 636F     
     3AB2 6D70     
     3AB4 6C65     
     3AB6 7465     
     3AB8 64       
0048                                  even
0049 3ABA 0E43     txt.done.copy      stri 'Copy completed'
     3ABC 6F70     
     3ABE 7920     
     3AC0 636F     
     3AC2 6D70     
     3AC4 6C65     
     3AC6 7465     
     3AC8 64       
0050                                  even
0051 3ACA 0F50     txt.done.print     stri 'Print completed'
     3ACC 7269     
     3ACE 6E74     
     3AD0 2063     
     3AD2 6F6D     
     3AD4 706C     
     3AD6 6574     
     3AD8 6564     
0052                                  even
0053 3ADA 1044     txt.done.delete    stri 'Delete completed'
     3ADC 656C     
     3ADE 6574     
     3AE0 6520     
     3AE2 636F     
     3AE4 6D70     
     3AE6 6C65     
     3AE8 7465     
     3AEA 64       
0054                                  even
0055 3AEC 0F43     txt.done.clipboard stri 'Clipboard saved'
     3AEE 6C69     
     3AF0 7062     
     3AF2 6F61     
     3AF4 7264     
     3AF6 2073     
     3AF8 6176     
     3AFA 6564     
0056                                  even
0057 3AFC 0D43     txt.done.clipdev   stri 'Clipboard set'
     3AFE 6C69     
     3B00 7062     
     3B02 6F61     
     3B04 7264     
     3B06 2073     
     3B08 6574     
0058                                  even
0059 3B0A 124D     txt.done.mc        stri 'Master Catalog set'
     3B0C 6173     
     3B0E 7465     
     3B10 7220     
     3B12 4361     
     3B14 7461     
     3B16 6C6F     
     3B18 6720     
     3B1A 7365     
     3B1C 74       
0060                                  even
0061 3B1E 0E41     txt.autoins.on     stri 'Autoinsert: on'
     3B20 7574     
     3B22 6F69     
     3B24 6E73     
     3B26 6572     
     3B28 743A     
     3B2A 206F     
     3B2C 6E       
0062                                  even
0063 3B2E 0F41     txt.autoins.off    stri 'Autoinsert: off'
     3B30 7574     
     3B32 6F69     
     3B34 6E73     
     3B36 6572     
     3B38 743A     
     3B3A 206F     
     3B3C 6666     
0064                                  even
0065 3B3E 0B46     txt.fastmode       stri 'Fastmode IO'
     3B40 6173     
     3B42 746D     
     3B44 6F64     
     3B46 6520     
     3B48 494F     
0066                                  even
0067 3B4A 1E44     txt.uncrunching    stri 'Detokenizing TI Basic line....'
     3B4C 6574     
     3B4E 6F6B     
     3B50 656E     
     3B52 697A     
     3B54 696E     
     3B56 6720     
     3B58 5449     
     3B5A 2042     
     3B5C 6173     
     3B5E 6963     
     3B60 206C     
     3B62 696E     
     3B64 652E     
     3B66 2E2E     
     3B68 2E       
0068                                  even
0069 3B6A 026B     txt.kb             stri 'kb'
     3B6C 62       
0070                                  even
0071 3B6E 054C     txt.lines          stri 'Lines'
     3B70 696E     
     3B72 6573     
0072                                  even
0073 3B74 0A5B     txt.newfile        stri '[New file]'
     3B76 4E65     
     3B78 7720     
     3B7A 6669     
     3B7C 6C65     
     3B7E 5D       
0074                                  even
0075 3B80 0D5B     txt.tib1           stri '[TI Basic #1]'
     3B82 5449     
     3B84 2042     
     3B86 6173     
     3B88 6963     
     3B8A 2023     
     3B8C 315D     
0076                                  even
0077 3B8E 0D5B     txt.tib2           stri '[TI Basic #2]'
     3B90 5449     
     3B92 2042     
     3B94 6173     
     3B96 6963     
     3B98 2023     
     3B9A 325D     
0078                                  even
0079 3B9C 0D5B     txt.tib3           stri '[TI Basic #3]'
     3B9E 5449     
     3BA0 2042     
     3BA2 6173     
     3BA4 6963     
     3BA6 2023     
     3BA8 335D     
0080                                  even
0081 3BAA 0D5B     txt.tib4           stri '[TI Basic #4]'
     3BAC 5449     
     3BAE 2042     
     3BB0 6173     
     3BB2 6963     
     3BB4 2023     
     3BB6 345D     
0082                                  even
0083 3BB8 0D5B     txt.tib5           stri '[TI Basic #5]'
     3BBA 5449     
     3BBC 2042     
     3BBE 6173     
     3BC0 6963     
     3BC2 2023     
     3BC4 355D     
0084                                  even
0085 3BC6 0444     txt.filetype.dv80  stri 'DV80'
     3BC8 5638     
     3BCA 30       
0086                                  even
0087 3BCC 034D     txt.m1             stri 'M1='
     3BCE 313D     
0088                                  even
0089 3BD0 034D     txt.m2             stri 'M2='
     3BD2 323D     
0090                                  even
0091 3BD4 1E46     txt.keys.default   stri 'F9-Menu  ^H-Help  ^U-Shortcuts'
     3BD6 392D     
     3BD8 4D65     
     3BDA 6E75     
     3BDC 2020     
     3BDE 5E48     
     3BE0 2D48     
     3BE2 656C     
     3BE4 7020     
     3BE6 205E     
     3BE8 552D     
     3BEA 5368     
     3BEC 6F72     
     3BEE 7463     
     3BF0 7574     
     3BF2 73       
0092                                  even
0093 3BF4 2946     txt.keys.defaultb  stri 'F9-Menu  ^H-Help  ^U-Shortcuts  F0-Basic#'
     3BF6 392D     
     3BF8 4D65     
     3BFA 6E75     
     3BFC 2020     
     3BFE 5E48     
     3C00 2D48     
     3C02 656C     
     3C04 7020     
     3C06 205E     
     3C08 552D     
     3C0A 5368     
     3C0C 6F72     
     3C0E 7463     
     3C10 7574     
     3C12 7320     
     3C14 2046     
     3C16 302D     
     3C18 4261     
     3C1A 7369     
     3C1C 6323     
0094                                  even
0095 3C1E 3446     txt.keys.block     stri 'F9-Exit  ^Copy ^Move ^Del ^Save ^Print ^[1-3]Clipbrd'
     3C20 392D     
     3C22 4578     
     3C24 6974     
     3C26 2020     
     3C28 5E43     
     3C2A 6F70     
     3C2C 7920     
     3C2E 5E4D     
     3C30 6F76     
     3C32 6520     
     3C34 5E44     
     3C36 656C     
     3C38 205E     
     3C3A 5361     
     3C3C 7665     
     3C3E 205E     
     3C40 5072     
     3C42 696E     
     3C44 7420     
     3C46 5E5B     
     3C48 312D     
     3C4A 335D     
     3C4C 436C     
     3C4E 6970     
     3C50 6272     
     3C52 64       
0096                                  even
0097 3C54 2C46     txt.keys.basic1    stri 'F9-Back  F5-AutoUnpack  SPACE-Unpack program'
     3C56 392D     
     3C58 4261     
     3C5A 636B     
     3C5C 2020     
     3C5E 4635     
     3C60 2D41     
     3C62 7574     
     3C64 6F55     
     3C66 6E70     
     3C68 6163     
     3C6A 6B20     
     3C6C 2053     
     3C6E 5041     
     3C70 4345     
     3C72 2D55     
     3C74 6E70     
     3C76 6163     
     3C78 6B20     
     3C7A 7072     
     3C7C 6F67     
     3C7E 7261     
     3C80 6D       
0098                                  even
0099 3C82 020E     txt.alpha.down     data >020e,>0f00
     3C84 0F00     
0100 3C86 0110     txt.vertline       data >0110
0101 3C88 011C     txt.keymarker      byte 1,28
0102                                  even
0103 3C8A 0120     txt.ws1            stri ' '
0104                                  even
0105 3C8C 0220     txt.ws2            stri '  '
     3C8E 20       
0106                                  even
0107 3C90 0420     txt.ws4            stri '    '
     3C92 2020     
     3C94 20       
0108                                  even
0109      3C90     txt.filetype.none  equ txt.ws4
0110               
0111 3C96 3550     txt.msg.mastcat    stri 'Put cursor on file in list and press ^O to load file.'
     3C98 7574     
     3C9A 2063     
     3C9C 7572     
     3C9E 736F     
     3CA0 7220     
     3CA2 6F6E     
     3CA4 2066     
     3CA6 696C     
     3CA8 6520     
     3CAA 696E     
     3CAC 206C     
     3CAE 6973     
     3CB0 7420     
     3CB2 616E     
     3CB4 6420     
     3CB6 7072     
     3CB8 6573     
     3CBA 7320     
     3CBC 5E4F     
     3CBE 2074     
     3CC0 6F20     
     3CC2 6C6F     
     3CC4 6164     
     3CC6 2066     
     3CC8 696C     
     3CCA 652E     
0112                                  even
0113               
0114 3CCC 1D54     txt.msg.tibasic    stri 'TI Basic program mode active.'
     3CCE 4920     
     3CD0 4261     
     3CD2 7369     
     3CD4 6320     
     3CD6 7072     
     3CD8 6F67     
     3CDA 7261     
     3CDC 6D20     
     3CDE 6D6F     
     3CE0 6465     
     3CE2 2061     
     3CE4 6374     
     3CE6 6976     
     3CE8 652E     
0115                                  even
0116               
0117               ;--------------------------------------------------------------
0118               ; Strings for error line pane
0119               ;--------------------------------------------------------------
0120 3CEA 1546     txt.ioerr.load     stri 'Failed loading file: '
     3CEC 6169     
     3CEE 6C65     
     3CF0 6420     
     3CF2 6C6F     
     3CF4 6164     
     3CF6 696E     
     3CF8 6720     
     3CFA 6669     
     3CFC 6C65     
     3CFE 3A20     
0121                                  even
0122 3D00 1446     txt.ioerr.save     stri 'Failed saving file: '
     3D02 6169     
     3D04 6C65     
     3D06 6420     
     3D08 7361     
     3D0A 7669     
     3D0C 6E67     
     3D0E 2066     
     3D10 696C     
     3D12 653A     
     3D14 20       
0123                                  even
0124 3D16 1B46     txt.ioerr.print    stri 'Failed printing to device: '
     3D18 6169     
     3D1A 6C65     
     3D1C 6420     
     3D1E 7072     
     3D20 696E     
     3D22 7469     
     3D24 6E67     
     3D26 2074     
     3D28 6F20     
     3D2A 6465     
     3D2C 7669     
     3D2E 6365     
     3D30 3A20     
0125                                  even
0126 3D32 164E     txt.io.nofile      stri 'No filename specified.'
     3D34 6F20     
     3D36 6669     
     3D38 6C65     
     3D3A 6E61     
     3D3C 6D65     
     3D3E 2073     
     3D40 7065     
     3D42 6369     
     3D44 6669     
     3D46 6564     
     3D48 2E       
0127                                  even
0128 3D4A 2D49     txt.memfull.load   stri 'Index full. File too large for editor buffer.'
     3D4C 6E64     
     3D4E 6578     
     3D50 2066     
     3D52 756C     
     3D54 6C2E     
     3D56 2046     
     3D58 696C     
     3D5A 6520     
     3D5C 746F     
     3D5E 6F20     
     3D60 6C61     
     3D62 7267     
     3D64 6520     
     3D66 666F     
     3D68 7220     
     3D6A 6564     
     3D6C 6974     
     3D6E 6F72     
     3D70 2062     
     3D72 7566     
     3D74 6665     
     3D76 722E     
0129                                  even
0130 3D78 2D43     txt.block.inside   stri 'Copy/Move target must be outside M1-M2 range.'
     3D7A 6F70     
     3D7C 792F     
     3D7E 4D6F     
     3D80 7665     
     3D82 2074     
     3D84 6172     
     3D86 6765     
     3D88 7420     
     3D8A 6D75     
     3D8C 7374     
     3D8E 2062     
     3D90 6520     
     3D92 6F75     
     3D94 7473     
     3D96 6964     
     3D98 6520     
     3D9A 4D31     
     3D9C 2D4D     
     3D9E 3220     
     3DA0 7261     
     3DA2 6E67     
     3DA4 652E     
0131                                  even
0132               
0133               ;--------------------------------------------------------------
0134               ; Strings for command buffer
0135               ;--------------------------------------------------------------
0136 3DA6 013E     txt.cmdb.prompt    stri '>'
0137                                  even
0138 3DA8 0D43     txt.colorscheme    stri 'Color scheme:'
     3DAA 6F6C     
     3DAC 6F72     
     3DAE 2073     
     3DB0 6368     
     3DB2 656D     
     3DB4 653A     
0139                                  even
                   < rom.resident.asm
0065                       copy  "data.defaults.asm"           ; Default values (devices, ...)
     **** ****     > data.defaults.asm
0001               * FILE......: data.defaults.asm
0002               * Purpose...: Default values for Stevie
0003               
0004               ***************************************************************
0005               *                     Default values
0006               ********|*****|*********************|**************************
0007 3DB6 0650     def.printer.fname   stri 'PI.PIO'
     3DB8 492E     
     3DBA 5049     
     3DBC 4F       
0008 3DBD   09     def.clip.fname.a    stri 'DSK1.CLIP'
     3DBE 4453     
     3DC0 4B31     
     3DC2 2E43     
     3DC4 4C49     
     3DC6 50       
0009 3DC7   09     def.clip.fname.b    stri 'DSK6.CLIP'
     3DC8 4453     
     3DCA 4B36     
     3DCC 2E43     
     3DCE 4C49     
     3DD0 50       
0010 3DD1   09     def.clip.fname.c    stri 'TIPI.CLIP'
     3DD2 5449     
     3DD4 5049     
     3DD6 2E43     
     3DD8 4C49     
     3DDA 50       
0011 3DDB   0C     def.mc.fname.a      stri 'DSK1.MASTCAT'
     3DDC 4453     
     3DDE 4B31     
     3DE0 2E4D     
     3DE2 4153     
     3DE4 5443     
     3DE6 4154     
0012 3DE8 0C44     def.mc.fname.b      stri 'DSK6.MASTCAT'
     3DEA 534B     
     3DEC 362E     
     3DEE 4D41     
     3DF0 5354     
     3DF2 4341     
     3DF4 54       
0013 3DF5   0C     def.mc.fname.c      stri 'TIPI.MASTCAT'
     3DF6 5449     
     3DF8 5049     
     3DFA 2E4D     
     3DFC 4153     
     3DFE 5443     
     3E00 4154     
0014 3E02 2F2C     def.devices         stri ',DSK,HDX,IDE,PI.,PIO,TIPI.,RD,SCS,SDD,WDS,RS232'
     3E04 4453     
     3E06 4B2C     
     3E08 4844     
     3E0A 582C     
     3E0C 4944     
     3E0E 452C     
     3E10 5049     
     3E12 2E2C     
     3E14 5049     
     3E16 4F2C     
     3E18 5449     
     3E1A 5049     
     3E1C 2E2C     
     3E1E 5244     
     3E20 2C53     
     3E22 4353     
     3E24 2C53     
     3E26 4444     
     3E28 2C57     
     3E2A 4453     
     3E2C 2C52     
     3E2E 5332     
     3E30 3332     
                   < rom.resident.asm
0066                       copy  "data.fg99.carts.asm"         ; Cartridge images
     **** ****     > data.fg99.carts.asm
0001               * FILE......: data.fg99.carts.asm
0002               * Purpose...: FinalGROM cartridge images
0003               
0004               ***************************************************************
0005               *                   Cartridge images
0006               ***************************************************************
0007                      even
0008               *--------------------------------------------------------------
0009               * Cartridge 'Force Command'
0010               *--------------------------------------------------------------
0011               fg99.cart.fcmd:
0012 3E32 99              byte   >99                   ; \
0013 3E33   4F            text   'OKFG99'              ; | Send this to reload
     3E34 4B46     
     3E36 4739     
     3E38 39       
0014 3E39   99            byte   >99                   ; /
0015 3E3A 4643            text   "FCMDG"               ; \ File to load (8 chars, pad with >00)
     3E3C 4D44     
     3E3E 47       
0016 3E3F   00            byte   >00, >00, >00         ; /
     3E40 0000     
0017 3E42 0000            data   >0000                 ; >0000 for GROM/mixed, >FFFF for ROM only
0018 3E44 0000            data   >0000                 ; Start address
0019                      even
0020               
0021               *--------------------------------------------------------------
0022               * Cartridge 'Extended Basic GEM'
0023               *--------------------------------------------------------------
0024               fg99.cart.xbgem:
0025 3E46 99              byte   >99                   ; \
0026 3E47   4F            text   'OKFG99'              ; | Send this to reload
     3E48 4B46     
     3E4A 4739     
     3E4C 39       
0027 3E4D   99            byte   >99                   ; /
0028 3E4E 5842            text   "XB29GEMG"            ; \ File to load (8 chars, pad with >00)
     3E50 3239     
     3E52 4745     
     3E54 4D47     
0029                      ;                            ; /
0030 3E56 0000            data   >0000                 ; >0000 for GROM/mixed, >FFFF for ROM only
0031 3E58 0000            data   >0000                 ; Start address
0032                      even
0033               
0034               *--------------------------------------------------------------
0035               * Cartridge 'Rich Extended Basic'
0036               *--------------------------------------------------------------
0037               fg99.cart.rxb:
0038 3E5A 99              byte   >99                   ; \
0039 3E5B   4F            text   'OKFG99'              ; | Send this to reload
     3E5C 4B46     
     3E5E 4739     
     3E60 39       
0040 3E61   99            byte   >99                   ; /
0041 3E62 5258            text   "RXBG"                ; \ File to load (8 chars, pad with >00)
     3E64 4247     
0042 3E66 0000            byte   >00, >00, >00, >00    ; /
     3E68 0000     
0043 3E6A 0000            data   >0000                 ; >0000 for GROM/mixed, >FFFF for ROM only
0044 3E6C 0000            data   >0000                 ; Start address
0045                      even
0046               
0047               *--------------------------------------------------------------
0048               * Cartridge 'fbForth'
0049               *--------------------------------------------------------------
0050               fg99.cart.fbforth:
0051 3E6E 99              byte   >99                   ; \
0052 3E6F   4F            text   'OKFG99'              ; | Send this to reload
     3E70 4B46     
     3E72 4739     
     3E74 39       
0053 3E75   99            byte   >99                   ; /
0054 3E76 4642            text   "FBFORTHC"            ; \ File to load (8 chars, pad with >00)
     3E78 464F     
     3E7A 5254     
     3E7C 4843     
0055                      ;                            ; /
0056 3E7E 0000            data   >0000                 ; >0000 for GROM/mixed, >FFFF for ROM only
0057 3E80 0000            data   >0000                 ; Start address
0058                      even
                   < rom.resident.asm
                   < stevie_b7.asm
0055                       ;------------------------------------------------------
0056                       ; Activate bank 1 and branch to  >6036
0057                       ;------------------------------------------------------
0058 3E82 04E0  34         clr   @bank1.rom            ; Activate bank 1 "James" ROM
     3E84 6002     
0059               
0063               
0064 3E86 0460  28         b     @kickstart.code2      ; Jump to entry routine
     3E88 6046     
0065               ***************************************************************
0066               * Step 3: Include main editor modules
0067               ********|*****|*********************|**************************
0068               main:
0069                       aorg  kickstart.code2       ; >6046
0070 6046 06A0  32         bl    @cpu.crash            ; Should never get here
     6048 2026     
0071                       ;-----------------------------------------------------------------------
0072                       ; SAMS support routines and utilities
0073                       ;-----------------------------------------------------------------------
0074                       copy  "magic.asm"                  ; Magic string handling
     **** ****     > magic.asm
0001               * FILE......: magic.asm
0002               * Purpose...: Handle magic strings
0003               
0004               ***************************************************************
0005               * magic.set
0006               * Set magic string in core memory
0007               ***************************************************************
0008               * bl @magic.set
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               *--------------------------------------------------------------
0019               * Set the bytes 'DEAD994ABEEF' in core memory.
0020               * If the sequence is set then Stevie knows its safe to resume
0021               * without initializing.
0022               ********|*****|*********************|**************************
0023               magic.set:
0024 604A 0649  14         dect  stack
0025 604C C64B  30         mov   r11,*stack            ; Save return address
0026                       ;------------------------------------------------------
0027                       ; Set magic string
0028                       ;------------------------------------------------------
0029 604E C820  54         mov   @magic.string+0,@magic.str.w1
     6050 609C     
     6052 A000     
0030 6054 C820  54         mov   @magic.string+2,@magic.str.w2
     6056 609E     
     6058 A002     
0031 605A C820  54         mov   @magic.string+4,@magic.str.w3
     605C 60A0     
     605E A004     
0032                       ;------------------------------------------------------
0033                       ; Exit
0034                       ;------------------------------------------------------
0035               magic.set.exit:
0036 6060 C2F9  30         mov   *stack+,r11           ; Pop r11
0037 6062 045B  20         b     *r11                  ; Return to caller
0038               
0039               
0040               
0041               ***************************************************************
0042               * magic.clear
0043               * Clear magic string in core memory
0044               ***************************************************************
0045               * bl @magic.set
0046               *--------------------------------------------------------------
0047               * INPUT
0048               * none
0049               *--------------------------------------------------------------
0050               * OUTPUT
0051               * none
0052               *--------------------------------------------------------------
0053               * Register usage
0054               * none
0055               *--------------------------------------------------------------
0056               * Clear the bytes 'DEAD994ABEEF' in core memory.
0057               * Indicate it's unsafe to resume Stevie and initialization
0058               * is necessary.
0059               ********|*****|*********************|**************************
0060               magic.clear:
0061 6064 0649  14         dect  stack
0062 6066 C64B  30         mov   r11,*stack            ; Save return address
0063                       ;------------------------------------------------------
0064                       ; Clear magic string
0065                       ;------------------------------------------------------
0066 6068 04E0  34         clr   @magic.str.w1
     606A A000     
0067 606C 04E0  34         clr   @magic.str.w2
     606E A002     
0068 6070 04E0  34         clr   @magic.str.w3
     6072 A004     
0069                       ;------------------------------------------------------
0070                       ; Exit
0071                       ;------------------------------------------------------
0072               magic.clear.exit:
0073 6074 C2F9  30         mov   *stack+,r11           ; Pop r11
0074 6076 045B  20         b     *r11                  ; Return to caller
0075               
0076               
0077               
0078               ***************************************************************
0079               * magic.check
0080               * Check if magic string is set
0081               ***************************************************************
0082               * bl @magic.set
0083               *--------------------------------------------------------------
0084               * INPUT
0085               * none
0086               *--------------------------------------------------------------
0087               * OUTPUT
0088               * r0 = >ffff Magic string set
0089               * r0 = >0000 Magic string not set
0090               *--------------------------------------------------------------
0091               * Register usage
0092               * r0
0093               *--------------------------------------------------------------
0094               * Clear the bytes 'DEAD994ABEEF' in core memory.
0095               * Indicate it's unsafe to resume Stevie and initialization
0096               * is necessary.
0097               ********|*****|*********************|**************************
0098               magic.check:
0099 6078 0649  14         dect  stack
0100 607A C64B  30         mov   r11,*stack            ; Save return address
0101                       ;------------------------------------------------------
0102                       ; Check magic string
0103                       ;------------------------------------------------------
0104 607C 04C0  14         clr   r0                    ; Reset flag
0105               
0106 607E 8820  50         c     @magic.str.w1,@magic.string
     6080 A000     
     6082 609C     
0107 6084 1609  14         jne   magic.check.exit
0108 6086 8820  50         c     @magic.str.w2,@magic.string+2
     6088 A002     
     608A 609E     
0109 608C 1605  14         jne   magic.check.exit
0110 608E 8820  50         c     @magic.str.w3,@magic.string+4
     6090 A004     
     6092 60A0     
0111 6094 1601  14         jne   magic.check.exit
0112               
0113 6096 0700  14         seto  r0                    ; Yes, magic string is set
0114                       ;------------------------------------------------------
0115                       ; Exit
0116                       ;------------------------------------------------------
0117               magic.check.exit:
0118 6098 C2F9  30         mov   *stack+,r11           ; Pop r11
0119 609A 045B  20         b     *r11                  ; Return to caller
0120               
0121               
0122               
0123 609C DEAD     magic.string  byte >de,>ad,>99,>4a,>be,>ef
     609E 994A     
     60A0 BEEF     
0124                                                   ; DEAD 994A BEEF
                   < stevie_b7.asm
0075                       copy  "mem.sams.layout.asm"        ; Setup SAMS banks from cart space
     **** ****     > mem.sams.layout.asm
0001               
0002               ***************************************************************
0003               * _mem.sams.set.banks
0004               * Setup SAMS memory banks
0005               ***************************************************************
0006               * INPUT
0007               * r0
0008               *--------------------------------------------------------------
0009               * OUTPUT
0010               * none
0011               *--------------------------------------------------------------
0012               * Register usage
0013               * r0, r12
0014               *--------------------------------------------------------------
0015               * Remarks
0016               * Setup SAMS standard layout without using any library calls
0017               * or stack. Must run without dependencies.
0018               * This is the same order as when using SAMS transparent mode.
0019               ********|*****|*********************|**************************
0020               _mem.sams.set.banks:
0021                       ;-------------------------------------------------------
0022                       ; Setup SAMS banks using inline code
0023                       ;-------------------------------------------------------
0024 60A2 020C  20         li    r12,>1e00             ; SAMS CRU address
     60A4 1E00     
0025 60A6 1D00  16         sbo   0                     ; Enable access to SAMS registers
0026               
0027 60A8 C830  50         mov   *r0+,@>4004           ; Set page for >2000 - >2fff
     60AA 4004     
0028 60AC C830  50         mov   *r0+,@>4006           ; Set page for >3000 - >3fff
     60AE 4006     
0029 60B0 C830  50         mov   *r0+,@>4014           ; Set page for >a000 - >afff
     60B2 4014     
0030 60B4 C830  50         mov   *r0+,@>4016           ; Set page for >b000 - >bfff
     60B6 4016     
0031 60B8 C830  50         mov   *r0+,@>4018           ; Set page for >c000 - >cfff
     60BA 4018     
0032 60BC C830  50         mov   *r0+,@>401a           ; Set page for >d000 - >dfff
     60BE 401A     
0033 60C0 C830  50         mov   *r0+,@>401c           ; Set page for >e000 - >efff
     60C2 401C     
0034 60C4 C830  50         mov   *r0+,@>401e           ; Set page for >f000 - >ffff
     60C6 401E     
0035               
0036 60C8 1E00  16         sbz   0                     ; Disable access to SAMS registers
0037                       ;------------------------------------------------------
0038                       ; Exit
0039                       ;------------------------------------------------------
0040               mem.sams.set.banks.exit:
0041 60CA 045B  20         b     *r11                  ; Return
0042               
0043               
0044               
0045               
0046               ***************************************************************
0047               * mem.sams.set.legacy
0048               * Setup SAMS memory banks to legacy layout and exit to monitor
0049               ***************************************************************
0050               * INPUT
0051               * none
0052               *--------------------------------------------------------------
0053               * OUTPUT
0054               * none
0055               *--------------------------------------------------------------
0056               * Register usage
0057               * r12
0058               *--------------------------------------------------------------
0059               * Remarks
0060               * Setup SAMS standard layout without using any library calls
0061               * or stack. Must run without dependencies.
0062               * This is the same order as when using SAMS transparent mode.
0063               *
0064               * We never do a normal return from this routine, instead we
0065               * activate bank 0 in the cartridge space and return to monitor.
0066               ********|*****|*********************|**************************
0067               mem.sams.set.legacy:
0068 60CC 020C  20         li    r12,>1e00             ; SAMS CRU address
     60CE 1E00     
0069 60D0 1E01  16         sbz   1                     ; Disable SAMS mapper
0070                                                   ; \ We keep the mapper off while
0071                                                   ; | running TI Basic or other external
0072                                                   ; / programs.
0073                       ;-------------------------------------------------------
0074                       ; Setup SAMS banks using inline code
0075                       ;-------------------------------------------------------
0076 60D2 0200  20         li    r0,mem.sams.layout.legacy
     60D4 6C7E     
0077 60D6 06A0  32         bl    @_mem.sams.set.banks  ; Set SAMS banks
     60D8 60A2     
0078                       ;-------------------------------------------------------
0079                       ; Poke exit routine into scratchpad memory
0080                       ;-------------------------------------------------------
0081 60DA C820  46         mov   @mem.sams.set.legacy.code,@>8300
     60DC 60FC     
     60DE 8300     
0082 60E0 C820  46         mov   @mem.sams.set.legacy.code+2,@>8302
     60E2 60FE     
     60E4 8302     
0083 60E6 C820  46         mov   @mem.sams.set.legacy.code+4,@>8304
     60E8 6100     
     60EA 8304     
0084 60EC C820  46         mov   @mem.sams.set.legacy.code+6,@>8306
     60EE 6102     
     60F0 8306     
0085 60F2 C820  46         mov   @mem.sams.set.legacy.code+8,@>8308
     60F4 6104     
     60F6 8308     
0086 60F8 0460  24         b     @>8300                ; Run code. Bye bye.
     60FA 8300     
0087                       ;-------------------------------------------------------
0088                       ; Assembly language code for returning to monitor
0089                       ;-------------------------------------------------------
0090               mem.sams.set.legacy.code:
0091 60FC 04E0             data  >04e0,bank0.rom       ; Activate bank 0
     60FE 6000     
0092 6100 0420             data  >0420,>0000           ; blwp @0
     6102 0000     
0093               
0094               
0095               
0096               ***************************************************************
0097               * mem.sams.set.boot
0098               * Setup SAMS memory banks for stevie startup
0099               ***************************************************************
0100               * INPUT
0101               * none
0102               *--------------------------------------------------------------
0103               * OUTPUT
0104               * none
0105               *--------------------------------------------------------------
0106               * Register usage
0107               * r0, r12
0108               *--------------------------------------------------------------
0109               * Remarks
0110               * Setup SAMS layout for stevie without using any library calls
0111               * or stack. Must run without dependencies.
0112               ********|*****|*********************|**************************
0113               mem.sams.set.boot:
0114                       ;-------------------------------------------------------
0115                       ; Setup SAMS banks using inline code
0116                       ;-------------------------------------------------------
0117 6104 0200  20         li    r0,mem.sams.layout.boot
     6106 6C5E     
0118 6108 10CC  14         jmp   _mem.sams.set.banks   ; Set SAMS banks
0119               
0120               
0121               
0122               ***************************************************************
0123               * mem.sams.set.external
0124               * Setup SAMS memory banks for calling external program
0125               ***************************************************************
0126               * INPUT
0127               * none
0128               *--------------------------------------------------------------
0129               * OUTPUT
0130               * none
0131               *--------------------------------------------------------------
0132               * Register usage
0133               * r0, r12
0134               *--------------------------------------------------------------
0135               * Remarks
0136               * Main purpose is for doing a VDP dump of the Stevie screen
0137               * before an external program is called.
0138               *
0139               * It's expected that for the external program itself a separate
0140               * SAMS layout is used, for example TI basic session 1, ...
0141               ********|*****|*********************|**************************
0142               mem.sams.set.external:
0143                       ;-------------------------------------------------------
0144                       ; Setup SAMS banks using inline code
0145                       ;-------------------------------------------------------
0146 610A 0200  20         li    r0,mem.sams.layout.external
     610C 6C6E     
0147 610E 10C9  14         jmp   _mem.sams.set.banks   ; Set SAMS banks
0148               
0149               
0150               
0151               
0152               ***************************************************************
0153               * mem.sams.set.basic1
0154               * Setup SAMS memory banks for TI Basic session 1
0155               ***************************************************************
0156               * INPUT
0157               * none
0158               *--------------------------------------------------------------
0159               * OUTPUT
0160               * none
0161               *--------------------------------------------------------------
0162               * Register usage
0163               * tmp0, r12
0164               *--------------------------------------------------------------
0165               * Remarks
0166               * Purpose is to handle backup/restore all the VDP memory
0167               * used by this TI Basic session.
0168               ********|*****|*********************|**************************
0169               mem.sams.set.basic1:
0170                       ;-------------------------------------------------------
0171                       ; Setup SAMS banks using inline code
0172                       ;-------------------------------------------------------
0173 6110 0200  20         li    r0,mem.sams.layout.basic1
     6112 6C8E     
0174 6114 C800  38         mov   r0,@tib.samstab.ptr
     6116 A0EA     
0175 6118 10C4  14         jmp   _mem.sams.set.banks   ; Set SAMS banks
0176               
0177               
0178               
0179               ***************************************************************
0180               * mem.sams.set.basic2
0181               * Setup SAMS memory banks for TI Basic session 2
0182               ***************************************************************
0183               * INPUT
0184               * none
0185               *--------------------------------------------------------------
0186               * OUTPUT
0187               * none
0188               *--------------------------------------------------------------
0189               * Register usage
0190               * tmp0, r12
0191               *--------------------------------------------------------------
0192               * Remarks
0193               * Purpose is to handle backup/restore all the VDP memory
0194               * used by this TI Basic session.
0195               ********|*****|*********************|**************************
0196               mem.sams.set.basic2:
0197                       ;-------------------------------------------------------
0198                       ; Setup SAMS banks using inline code
0199                       ;-------------------------------------------------------
0200 611A 0200  20         li    r0,mem.sams.layout.basic2
     611C 6C9E     
0201 611E C800  38         mov   r0,@tib.samstab.ptr
     6120 A0EA     
0202 6122 10BF  14         jmp   _mem.sams.set.banks   ; Set SAMS banks
0203               
0204               
0205               
0206               ***************************************************************
0207               * mem.sams.set.basic3
0208               * Setup SAMS memory banks for TI Basic session 3
0209               ***************************************************************
0210               * INPUT
0211               * none
0212               *--------------------------------------------------------------
0213               * OUTPUT
0214               * none
0215               *--------------------------------------------------------------
0216               * Register usage
0217               * tmp0, r12
0218               *--------------------------------------------------------------
0219               * Remarks
0220               * Purpose is to handle backup/restore all the VDP memory
0221               * used by this TI Basic session.
0222               ********|*****|*********************|**************************
0223               mem.sams.set.basic3:
0224                       ;-------------------------------------------------------
0225                       ; Setup SAMS banks using inline code
0226                       ;-------------------------------------------------------
0227 6124 0200  20         li    r0,mem.sams.layout.basic3
     6126 6CAE     
0228 6128 C800  38         mov   r0,@tib.samstab.ptr
     612A A0EA     
0229 612C 10BA  14         jmp   _mem.sams.set.banks   ; Set SAMS banks
0230               
0231               
0232               ***************************************************************
0233               * mem.sams.set.basic4
0234               * Setup SAMS memory banks for TI Basic session 4
0235               ***************************************************************
0236               * INPUT
0237               * none
0238               *--------------------------------------------------------------
0239               * OUTPUT
0240               * none
0241               *--------------------------------------------------------------
0242               * Register usage
0243               * tmp0, r12
0244               *--------------------------------------------------------------
0245               * Remarks
0246               * Purpose is to handle backup/restore all the VDP memory
0247               * used by this TI Basic session.
0248               ********|*****|*********************|**************************
0249               mem.sams.set.basic4:
0250                       ;-------------------------------------------------------
0251                       ; Setup SAMS banks using inline code
0252                       ;-------------------------------------------------------
0253 612E 0200  20         li    r0,mem.sams.layout.basic4
     6130 6CBE     
0254 6132 C800  38         mov   r0,@tib.samstab.ptr
     6134 A0EA     
0255 6136 10B5  14         jmp   _mem.sams.set.banks   ; Set SAMS banks
0256               
0257               
0258               ***************************************************************
0259               * mem.sams.set.basic5
0260               * Setup SAMS memory banks for TI Basic session 5
0261               ***************************************************************
0262               * INPUT
0263               * none
0264               *--------------------------------------------------------------
0265               * OUTPUT
0266               * none
0267               *--------------------------------------------------------------
0268               * Register usage
0269               * tmp0, r12
0270               *--------------------------------------------------------------
0271               * Remarks
0272               * Purpose is to handle backup/restore all the VDP memory
0273               * used by this TI Basic session.
0274               ********|*****|*********************|**************************
0275               mem.sams.set.basic5:
0276                       ;-------------------------------------------------------
0277                       ; Setup SAMS banks using inline code
0278                       ;-------------------------------------------------------
0279 6138 0200  20         li    r0,mem.sams.layout.basic5
     613A 6CCE     
0280 613C C800  38         mov   r0,@tib.samstab.ptr
     613E A0EA     
0281 6140 10B0  14         jmp   _mem.sams.set.banks   ; Set SAMS banks
0282               
0283               
0284               ***************************************************************
0285               * mem.sams.set.stevie
0286               * Setup SAMS memory banks for stevie
0287               ***************************************************************
0288               * INPUT
0289               * none
0290               *--------------------------------------------------------------
0291               * OUTPUT
0292               * none
0293               *--------------------------------------------------------------
0294               * Register usage
0295               * r0, r12
0296               *--------------------------------------------------------------
0297               * Remarks
0298               * Setup SAMS layout for stevie without using any library calls
0299               * or stack. Must run without dependencies.
0300               *
0301               * Expects @tv.sams.xxxx variables to be set in advance with
0302               * routine "sams.layout.copy".
0303               *
0304               * Also the SAMS bank with the @tv.sams.xxxx variable must already
0305               * be active and may not switch to another bank.
0306               *
0307               * Is used for settings SAMS banks as they were before an
0308               * external program environment was called (e.g. TI Basic).
0309               ********|*****|*********************|**************************
0310               mem.sams.set.stevie:
0311                       ;-------------------------------------------------------
0312                       ; Setup SAMS banks using inline code
0313                       ;-------------------------------------------------------
0314 6142 020C  20         li    r12,>1e00             ; SAMS CRU address
     6144 1E00     
0315 6146 1D00  16         sbo   0                     ; Enable access to SAMS registers
0316               
0317 6148 1D01  16         sbo   1                     ; Enable SAMS mapper
0318                                                   ; \ Mapper must be on while setting SAMS
0319                                                   ; | registers with values in @tv.sams.xxxx
0320                                                   ; | Obviously, this requires the SAMS banks
0321                                                   ; | with the @tv.sams.xxxx variables not
0322                                                   ; / to change.
0323               
0324 614A C020  34         mov   @tv.sams.2000,r0      ; \
     614C A200     
0325 614E 06C0  14         swpb  r0                    ; | Set page for >2000 - >2fff
0326 6150 C800  38         mov   r0,@>4004             ; /
     6152 4004     
0327               
0328 6154 C020  34         mov   @tv.sams.3000,r0      ; \
     6156 A202     
0329 6158 06C0  14         swpb  r0                    ; | Set page for >3000 - >3fff
0330 615A C800  38         mov   r0,@>4006             ; /
     615C 4006     
0331               
0332 615E C020  34         mov   @tv.sams.a000,r0      ; \
     6160 A204     
0333 6162 06C0  14         swpb  r0                    ; | Set page for >a000 - >afff
0334 6164 C800  38         mov   r0,@>4014             ; /
     6166 4014     
0335               
0336 6168 C020  34         mov   @tv.sams.b000,r0      ; \
     616A A206     
0337 616C 06C0  14         swpb  r0                    ; | Set page for >b000 - >bfff
0338 616E C800  38         mov   r0,@>4016             ; /
     6170 4016     
0339               
0340 6172 C020  34         mov   @tv.sams.c000,r0      ; \
     6174 A208     
0341 6176 06C0  14         swpb  r0                    ; | Set page for >c000 - >cfff
0342 6178 C800  38         mov   r0,@>4018             ; /
     617A 4018     
0343               
0344 617C C020  34         mov   @tv.sams.d000,r0      ; \
     617E A20A     
0345 6180 06C0  14         swpb  r0                    ; | Set page for >d000 - >dfff
0346 6182 C800  38         mov   r0,@>401a             ; /
     6184 401A     
0347               
0348 6186 C020  34         mov   @tv.sams.e000,r0      ; \
     6188 A20C     
0349 618A 06C0  14         swpb  r0                    ; | Set page for >e000 - >efff
0350 618C C800  38         mov   r0,@>401c             ; /
     618E 401C     
0351               
0352 6190 C020  34         mov   @tv.sams.f000,r0      ; \
     6192 A20E     
0353 6194 06C0  14         swpb  r0                    ; | Set page for >f000 - >ffff
0354 6196 C800  38         mov   r0,@>401e             ; /
     6198 401E     
0355               
0356 619A 1E00  16         sbz   0                     ; Disable access to SAMS registers
0357 619C 1D01  16         sbo   1                     ; Enable SAMS mapper
0358                       ;------------------------------------------------------
0359                       ; Exit
0360                       ;------------------------------------------------------
0361               mem.sams.set.stevie.exit:
0362 619E 045B  20         b     *r11                  ; Return
                   < stevie_b7.asm
0076                       copy  "tv.reset.asm"               ; Reset editor (clear buffers)
     **** ****     > tv.reset.asm
0001               * FILE......: tv.reset.asm
0002               * Purpose...: Reset editor (clear buffers)
0003               
0004               
0005               ***************************************************************
0006               * tv.reset
0007               * Reset editor (clear buffers)
0008               ***************************************************************
0009               * bl @tv.reset
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * none
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * r11
0019               *--------------------------------------------------------------
0020               * Notes
0021               ********|*****|*********************|**************************
0022               tv.reset:
0023 61A0 0649  14         dect  stack
0024 61A2 C64B  30         mov   r11,*stack            ; Save return address
0025                       ;------------------------------------------------------
0026                       ; Reset editor
0027                       ;------------------------------------------------------
0028 61A4 06A0  32         bl    @cmdb.init            ; Initialize command buffer
     61A6 3300     
0029 61A8 06A0  32         bl    @edb.init             ; Initialize editor buffer
     61AA 32B4     
0030 61AC 06A0  32         bl    @idx.init             ; Initialize index
     61AE 31B4     
0031 61B0 06A0  32         bl    @fb.init              ; Initialize framebuffer
     61B2 30E8     
0032 61B4 06A0  32         bl    @errpane.init         ; Initialize error pane
     61B6 335C     
0033                       ;------------------------------------------------------
0034                       ; Remove markers and shortcuts
0035                       ;------------------------------------------------------
0036 61B8 06A0  32         bl    @hchar
     61BA 27F0     
0037 61BC 0032                   byte 0,50,32,20       ; Remove markers
     61BE 2014     
0038 61C0 1D00                   byte pane.botrow,0,32,51
     61C2 2033     
0039 61C4 FFFF                   data eol              ; Remove block shortcuts
0040                       ;-------------------------------------------------------
0041                       ; Exit
0042                       ;-------------------------------------------------------
0043               tv.reset.exit:
0044 61C6 C2F9  30         mov   *stack+,r11           ; Pop R11
0045 61C8 045B  20         b     *r11                  ; Return to caller
                   < stevie_b7.asm
0077                       ;-----------------------------------------------------------------------
0078                       ; TI Basic sessions
0079                       ;-----------------------------------------------------------------------
0080                       copy  "tib.session.run.asm"        ; Run TI Basic session
     **** ****     > tib.session.run.asm
0001               * FILE......: tib.session.run.asm
0002               * Purpose...: Run TI Basic session
0003               
0004               
0005               ***************************************************************
0006               * tib.run
0007               * Run TI Basic session
0008               ***************************************************************
0009               * bl   @tib.run
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @tib.session = TI Basic session to start/resume
0013               *
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * r1 in GPL WS, tmp0, tmp1, tmp2, r12
0019               *--------------------------------------------------------------
0020               * Remarks
0021               * tib.run >> b @0070 (GPL interpreter/TI Basic)
0022               *         >> isr
0023               *         >> tibasic.return
0024               *
0025               * Memory
0026               * >83b4       ISR counter for triggering periodic actions
0027               * >83b6       TI Basic Session ID
0028               * >f000-ffff  Mailbox Stevie integration
0029               ********|*****|*********************|**************************
0030               tib.run:
0031 61CA 0649  14         dect  stack
0032 61CC C64B  30         mov   r11,*stack            ; Save return address
0033 61CE 0649  14         dect  stack
0034 61D0 C644  30         mov   tmp0,*stack           ; Push tmp0
0035 61D2 0649  14         dect  stack
0036 61D4 C645  30         mov   tmp1,*stack           ; Push tmp1
0037 61D6 0649  14         dect  stack
0038 61D8 C646  30         mov   tmp2,*stack           ; Push tmp2
0039 61DA 0649  14         dect  stack
0040 61DC C64C  30         mov   r12,*stack            ; Push r12
0041                       ;-------------------------------------------------------
0042                       ; Setup SAMS memory
0043                       ;-------------------------------------------------------
0044 61DE C802  38         mov   config,@tv.sp2.conf   ; Backup the SP2 config register
     61E0 A22E     
0045               
0046 61E2 06A0  32         bl    @sams.layout.copy     ; Backup Stevie SAMS page layout
     61E4 265C     
0047 61E6 A200                   data tv.sams.2000     ; \ @i = target address of 8 words table
0048                                                   ; /      that contains SAMS layout
0049               
0050 61E8 06A0  32         bl    @scroff               ; Turn off screen
     61EA 26A4     
0051               
0052 61EC 06A0  32         bl    @mem.sams.set.external
     61EE 610A     
0053                                                   ; Load SAMS page layout (from cart space)
0054                                                   ; before running external program.
0055               
0056 61F0 06A0  32         bl    @cpyv2m
     61F2 24D6     
0057 61F4 0000                   data >0000,>b000,16384
     61F6 B000     
     61F8 4000     
0058                                                   ; Copy Stevie 16K VDP memory to RAM buffer
0059                                                   ; >b000->efff
0060                       ;-------------------------------------------------------
0061                       ; Put VDP in TI Basic compatible mode (32x24)
0062                       ;-------------------------------------------------------
0063 61FA 06A0  32         bl    @f18rst               ; Reset and lock the F18A
     61FC 27C4     
0064               
0065 61FE 06A0  32         bl    @vidtab               ; Load video mode table into VDP
     6200 22F8     
0066 6202 7F24                   data tibasic.32x24    ; Equate selected video mode table
0067                       ;-------------------------------------------------------
0068                       ; Keep TI Basic session ID for later use
0069                       ;-------------------------------------------------------
0070 6204 C120  34         mov   @tib.session,tmp0     ; \
     6206 A0B4     
0071                                                   ; | Store TI Basic session ID in tmp0.
0072                                                   ; | Througout the subroutine tmp0 will
0073                                                   ; | keep this value, even when SAMS
0074                                                   ; | banks are switched.
0075                                                   ; |
0076 6208 C804  30         mov   tmp0,@>83fe           ; | Also store a copy in the Stevie
     620A 83FE     
0077                                                   ; | scratchpad >83fe for later use in
0078                                                   ; / TI Basic scratchpad.
0079                       ;-------------------------------------------------------
0080                       ; Switch for TI Basic session
0081                       ;-------------------------------------------------------
0082 620C 0284  22         ci    tmp0,1
     620E 0001     
0083 6210 1310  14         jeq   tib.run.init.basic1
0084 6212 0284  22         ci    tmp0,2
     6214 0002     
0085 6216 131E  14         jeq   tib.run.init.basic2
0086 6218 0284  22         ci    tmp0,3
     621A 0003     
0087 621C 132C  14         jeq   tib.run.init.basic3
0088 621E 0284  22         ci    tmp0,4
     6220 0004     
0089 6222 1338  14         jeq   tib.run.init.basic4
0090 6224 0284  22         ci    tmp0,5
     6226 0005     
0091 6228 1344  14         jeq   tib.run.init.basic5
0092                       ;-------------------------------------------------------
0093                       ; Assert, should never get here
0094                       ;-------------------------------------------------------
0095 622A C80B  38         mov   r11,@>ffce            ; \ Save caller address
     622C FFCE     
0096 622E 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     6230 2026     
0097                       ;-------------------------------------------------------
0098                       ; New TI Basic session 1
0099                       ;-------------------------------------------------------
0100               tib.run.init.basic1:
0101 6232 C160  34         mov   @tib.status1,tmp1     ; Resume TI Basic session?
     6234 A0B6     
0102 6236 1302  14         jeq   !                     ; No, new session
0103 6238 0460  28         b     @tib.run.resume.basic1
     623A 634E     
0104               
0105 623C 0265  22 !       ori   tmp1,1                ; \
     623E 0001     
0106 6240 C805  38         mov   tmp1,@tib.status1     ; / Set resume flag for next run
     6242 A0B6     
0107               
0108 6244 06A0  32         bl    @mem.sams.set.basic1  ; \ Load SAMS page layout (from cart space)
     6246 6110     
0109                                                   ; / for TI Basic session 1
0110               
0111 6248 06A0  32         bl    @cpym2v
     624A 24A4     
0112 624C 06F8                   data >06f8,tibasic.patterns,8
     624E 63E8     
     6250 0008     
0113                                                   ; Copy pattern TI-Basic session ID 1
0114               
0115 6252 103E  14         jmp   tib.run.init.rest     ; Continue initialisation
0116               
0117                       ;-------------------------------------------------------
0118                       ; New TI Basic session 2
0119                       ;-------------------------------------------------------
0120               tib.run.init.basic2:
0121 6254 C160  34         mov   @tib.status2,tmp1     ; Resume TI Basic session?
     6256 A0B8     
0122 6258 1302  14         jeq   !                     ; No, new session
0123 625A 0460  28         b     @tib.run.resume.basic2
     625C 635E     
0124               
0125 625E 0265  22 !       ori   tmp1,1                ; \
     6260 0001     
0126 6262 C805  38         mov   tmp1,@tib.status2     ; / Set resume flag for next run
     6264 A0B8     
0127               
0128 6266 06A0  32         bl    @mem.sams.set.basic2  ; \ Load SAMS page layout (from cart space)
     6268 611A     
0129                                                   ; / for TI Basic session 2
0130               
0131 626A 06A0  32         bl    @cpym2v
     626C 24A4     
0132 626E 06F8                   data >06f8,tibasic.patterns+8,8
     6270 63F0     
     6272 0008     
0133                                                   ; Copy pattern TI-Basic session ID 2
0134               
0135 6274 102D  14         jmp   tib.run.init.rest     ; Continue initialisation
0136                       ;-------------------------------------------------------
0137                       ; New TI Basic session 3
0138                       ;-------------------------------------------------------
0139               tib.run.init.basic3:
0140 6276 C160  34         mov   @tib.status3,tmp1     ; Resume TI Basic session?
     6278 A0BA     
0141 627A 1579  14         jgt   tib.run.resume.basic3 ; yes, do resume
0142               
0143 627C 0265  22         ori   tmp1,1                ; \
     627E 0001     
0144 6280 C805  38         mov   tmp1,@tib.status3     ; / Set resume flag for next run
     6282 A0BA     
0145               
0146 6284 06A0  32         bl    @mem.sams.set.basic3  ; \ Load SAMS page layout (from cart space)
     6286 6124     
0147                                                   ; / for TI Basic session 3
0148               
0149 6288 06A0  32         bl    @cpym2v
     628A 24A4     
0150 628C 06F8                   data >06f8,tibasic.patterns+16,8
     628E 63F8     
     6290 0008     
0151                                                   ; Copy pattern TI-Basic session ID 3
0152               
0153 6292 101E  14         jmp   tib.run.init.rest     ; Continue initialisation
0154                       ;-------------------------------------------------------
0155                       ; New TI Basic session 4
0156                       ;-------------------------------------------------------
0157               tib.run.init.basic4:
0158 6294 C160  34         mov   @tib.status4,tmp1     ; Resume TI Basic session?
     6296 A0BC     
0159 6298 1572  14         jgt   tib.run.resume.basic4 ; yes, do resume
0160               
0161 629A 0265  22         ori   tmp1,1                ; \
     629C 0001     
0162 629E C805  38         mov   tmp1,@tib.status4     ; / Set resume flag for next run
     62A0 A0BC     
0163               
0164 62A2 06A0  32         bl    @mem.sams.set.basic4  ; \ Load SAMS page layout (from cart space)
     62A4 612E     
0165                                                   ; / for TI Basic session 4
0166               
0167 62A6 06A0  32         bl    @cpym2v
     62A8 24A4     
0168 62AA 06F8                   data >06f8,tibasic.patterns+24,8
     62AC 6400     
     62AE 0008     
0169                                                   ; Copy pattern TI-Basic session ID 4
0170               
0171 62B0 100F  14         jmp   tib.run.init.rest     ; Continue initialisation
0172                       ;-------------------------------------------------------
0173                       ; New TI Basic session 5
0174                       ;-------------------------------------------------------
0175               tib.run.init.basic5:
0176 62B2 C160  34         mov   @tib.status5,tmp1     ; Resume TI Basic session?
     62B4 A0BE     
0177 62B6 156B  14         jgt   tib.run.resume.basic5 ; yes, do resume
0178               
0179 62B8 0265  22         ori   tmp1,1                ; \
     62BA 0001     
0180 62BC C805  38         mov   tmp1,@tib.status5     ; / Set resume flag for next run
     62BE A0BE     
0181               
0182 62C0 06A0  32         bl    @mem.sams.set.basic5  ; \ Load SAMS page layout (from cart space)
     62C2 6138     
0183                                                   ; / for TI Basic session 5
0184               
0185 62C4 06A0  32         bl    @cpym2v
     62C6 24A4     
0186 62C8 06F8                   data >06f8,tibasic.patterns+32,8
     62CA 6408     
     62CC 0008     
0187                                                   ; Copy pattern TI-Basic session ID 5
0188               
0189 62CE 1000  14         jmp   tib.run.init.rest     ; Continue initialisation
0190                       ;-------------------------------------------------------
0191                       ; New TI Basic session (part 2)
0192                       ;-------------------------------------------------------
0193               tib.run.init.rest:
0194 62D0 06A0  32         bl    @ldfnt
     62D2 2360     
0195 62D4 0900                   data >0900,fnopt3     ; Load font (upper & lower case)
     62D6 000C     
0196               
0197 62D8 06A0  32         bl    @filv
     62DA 228E     
0198 62DC 0300                   data >0300,>D0,2      ; No sprites
     62DE 00D0     
     62E0 0002     
0199               
0200 62E2 06A0  32         bl    @cpu.scrpad.backup    ; (1) Backup stevie primary scratchpad to
     62E4 2B5E     
0201                                                   ;     fixed memory address @cpu.scrpad.tgt
0202               
0203 62E6 06A0  32         bl    @cpym2m
     62E8 24F8     
0204 62EA F000                   data >f000,cpu.scrpad2,256
     62EC AD00     
     62EE 0100     
0205                                                   ; (2) Stevie scratchpad dump cannot stay
0206                                                   ;     there, move to final destination.
0207               
0208 62F0 06A0  32         bl    @cpym2m
     62F2 24F8     
0209 62F4 7E00                   data cpu.scrpad.src,cpu.scrpad.tgt,256
     62F6 F000     
     62F8 0100     
0210                                                   ; (3) Copy OS monitor scratchpad dump from
0211                                                   ;     cartridge rom to @cpu.scrpad.tgt
0212               
0213 62FA 02E0  18         lwpi  cpu.scrpad2           ; Flip workspace before starting restore
     62FC AD00     
0214 62FE 06A0  36         bl    @cpu.scrpad.restore   ; Restore scratchpad from @cpu.scrpad.tgt
     6300 2B92     
0215 6302 02E0  18         lwpi  cpu.scrpad1           ; Flip workspace to scratchpad again
     6304 8300     
0216               
0217                       ; ATTENTION
0218                       ; From here on no more access to any of the SP2 or stevie routines.
0219                       ; We're on unknown territory.
0220               
0221 6306 C820  46         mov   @cpu.scrpad2+254,@>83b6
     6308 ADFE     
     630A 83B6     
0222                                                   ; \ Store TI Basic session ID in TI Basic
0223                                                   ; | scratchpad address >83b6.
0224                                                   ; | Note that >83fe in Stevie scratchpad has
0225                                                   ; / a copy of the TI basic session ID.
0226                       ;-------------------------------------------------------
0227                       ; Poke some values
0228                       ;-------------------------------------------------------
0229 630C C820  46         mov   @tibasic.scrpad.83d4,@>83d4
     630E 63E0     
     6310 83D4     
0230 6312 C820  46         mov   @tibasic.scrpad.83fa,@>83fa
     6314 63E2     
     6316 83FA     
0231 6318 C820  46         mov   @tibasic.scrpad.83fc,@>83fc
     631A 63E4     
     631C 83FC     
0232 631E C820  46         mov   @tibasic.scrpad.83fe,@>83fe
     6320 63E6     
     6322 83FE     
0233                       ;-------------------------------------------------------
0234                       ; Register ISR hook in scratch pad
0235                       ;-------------------------------------------------------
0236 6324 02E0  18         lwpi  cpu.scrpad1           ; Scratchpad in >8300 again
     6326 8300     
0237 6328 0201  20         li    r1,isr                ; \
     632A 6410     
0238 632C C801  30         mov   r1,@>83c4             ; | >83c4 = Pointer to start address of ISR
     632E 83C4     
0239                                                   ; /
0240               
0241 6330 020C  20         li    r12,>1e00             ; \ Disable SAMS mapper (transparent mode)
     6332 1E00     
0242 6334 1E01  16         sbz   1                     ; /
0243                       ;-------------------------------------------------------
0244                       ; Run TI Basic session in GPL Interpreter
0245                       ;-------------------------------------------------------
0246 6336 02E0  18         lwpi  >83e0
     6338 83E0     
0247 633A 0201  20         li    r1,>216f              ; Entrypoint for GPL TI Basic interpreter
     633C 216F     
0248 633E D801  38         movb  r1,@grmwa             ; \
     6340 9C02     
0249 6342 06C1  14         swpb  r1                    ; | Set GPL address
0250 6344 D801  38         movb  r1,@grmwa             ; /
     6346 9C02     
0251 6348 1000  14         nop
0252 634A 0460  24         b     @>0070                ; Start GPL interpreter
     634C 0070     
0253                       ;-------------------------------------------------------
0254                       ; Resume TI-Basic session 1
0255                       ;-------------------------------------------------------
0256               tib.run.resume.basic1:
0257 634E 06A0  32         bl    @mem.sams.set.basic1  ; \ Load SAMS page layout (from cart space)
     6350 6110     
0258                                                   ; / for TI Basic session 1
0259               
0260 6352 06A0  32         bl    @cpym2m               ; \ Copy TI Basic scratchpad to fixed memory
     6354 24F8     
0261 6356 F100                   data >f100,>f000,256  ; / address @cpu.scrpad.target
     6358 F000     
     635A 0100     
0262               
0263 635C 101F  14         jmp   tib.run.resume.part2  ; Continue resume
0264                       ;-------------------------------------------------------
0265                       ; Resume TI-Basic session 2
0266                       ;-------------------------------------------------------
0267               tib.run.resume.basic2:
0268 635E 06A0  32         bl    @mem.sams.set.basic2  ; \ Load SAMS page layout (from cart space)
     6360 611A     
0269                                                   ; / for TI Basic session 2
0270               
0271 6362 06A0  32         bl    @cpym2m               ; \ Copy TI Basic scratchpad to fixed memory
     6364 24F8     
0272 6366 F200                   data >f200,>f000,256  ; / address @cpu.scrpad.target
     6368 F000     
     636A 0100     
0273               
0274 636C 1017  14         jmp   tib.run.resume.part2  ; Continue resume
0275                       ;-------------------------------------------------------
0276                       ; Resume TI-Basic session 3
0277                       ;-------------------------------------------------------
0278               tib.run.resume.basic3:
0279 636E 06A0  32         bl    @mem.sams.set.basic3  ; \ Load SAMS page layout (from cart space)
     6370 6124     
0280                                                   ; / for TI Basic session 3
0281               
0282 6372 06A0  32         bl    @cpym2m               ; \ Copy TI Basic scratchpad to fixed memory
     6374 24F8     
0283 6376 F300                   data >f300,>f000,256  ; / address @cpu.scrpad.target
     6378 F000     
     637A 0100     
0284               
0285 637C 100F  14         jmp   tib.run.resume.part2  ; Continue resume
0286                       ;-------------------------------------------------------
0287                       ; Resume TI-Basic session 4
0288                       ;-------------------------------------------------------
0289               tib.run.resume.basic4:
0290 637E 06A0  32         bl    @mem.sams.set.basic4  ; \ Load SAMS page layout (from cart space)
     6380 612E     
0291                                                   ; / for TI Basic session 4
0292               
0293 6382 06A0  32         bl    @cpym2m               ; \ Copy TI Basic scratchpad to fixed memory
     6384 24F8     
0294 6386 F400                   data >f400,>f000,256  ; / address @cpu.scrpad.target
     6388 F000     
     638A 0100     
0295               
0296 638C 1007  14         jmp   tib.run.resume.part2  ; Continue resume
0297                       ;-------------------------------------------------------
0298                       ; Resume TI-Basic session 5
0299                       ;-------------------------------------------------------
0300               tib.run.resume.basic5:
0301 638E 06A0  32         bl    @mem.sams.set.basic5  ; \ Load SAMS page layout (from cart space)
     6390 6138     
0302                                                   ; / for TI Basic session 5
0303               
0304 6392 06A0  32         bl    @cpym2m               ; \ Copy TI Basic scratchpad to fixed memory
     6394 24F8     
0305 6396 F500                   data >f500,>f000,256  ; / address @cpu.scrpad.target
     6398 F000     
     639A 0100     
0306                       ;-------------------------------------------------------
0307                       ; Resume TI-Basic session (part 2)
0308                       ;-------------------------------------------------------
0309               tib.run.resume.part2:
0310 639C C1E0  30         mov   @>83fc,r7             ; Get 'Hide SID' flag
     639E 83FC     
0311 63A0 1304  14         jeq   tib.run.resume.vdp    ; Flag is reset, skip clearing SID
0312               
0313 63A2 0207  20         li    r7,>8080              ; Whitespace (with TI-Basic offset >60)
     63A4 8080     
0314 63A6 C807  38         mov   r7,@>b01e             ; Clear SID in VDP screen backup
     63A8 B01E     
0315                       ;-------------------------------------------------------
0316                       ; Restore VDP memory
0317                       ;-------------------------------------------------------
0318               tib.run.resume.vdp:
0319 63AA 06A0  32         bl    @cpym2v
     63AC 24A4     
0320 63AE 0000                   data >0000,>b000,16384
     63B0 B000     
     63B2 4000     
0321                                                   ; Restore TI Basic 16K VDP memory from
0322                                                   ; RAM buffer >b000->efff
0323                       ;-------------------------------------------------------
0324                       ; Clear crunch buffer (crunched statement from before)
0325                       ;-------------------------------------------------------
0326 63B4 06A0  32         bl    @filv
     63B6 228E     
0327 63B8 0320                   data >0320,0,80       ; \ Clear crunch buffer to remove statement
     63BA 0000     
     63BC 0050     
0328                                                   ; / used for returning to Stevie before.
0329                       ;-------------------------------------------------------
0330                       ; Restore scratchpad memory
0331                       ;-------------------------------------------------------
0332               tib.run.resume.scrpad:
0333 63BE 02E0  18         lwpi  cpu.scrpad2           ; Flip workspace before starting restore
     63C0 AD00     
0334 63C2 06A0  36         bl    @cpu.scrpad.restore   ; Restore scratchpad from @cpu.scrpad.tgt
     63C4 2B92     
0335 63C6 02E0  18         lwpi  cpu.scrpad1           ; Flip workspace to scratchpad again
     63C8 8300     
0336               
0337 63CA C820  46         mov   @cpu.scrpad2+252,@>83b4
     63CC ADFC     
     63CE 83B4     
0338                                                   ; \ Store 'Hide SID' flag in TI Basic
0339                                                   ; | scratchpad address >83b4.
0340                                                   ; | Note that >83fc in Stevie scratchpad
0341                                                   ; / has copy of the flag.
0342                       ;-------------------------------------------------------
0343                       ; Load legacy SAMS bank layout
0344                       ;-------------------------------------------------------
0345               tibasic.resume.load:
0346 63D0 02E0  18         lwpi  cpu.scrpad1           ; Workspace must be in scratchpad again!
     63D2 8300     
0347 63D4 04CB  14         clr   r11
0348               
0349 63D6 020C  20         li    r12,>1e00             ; \ Disable SAMS mapper (transparent mode)
     63D8 1E00     
0350 63DA 1E01  16         sbz   1                     ; / >02 >03 >0a >0b >0c >0d >0e >0f
0351               
0352                       ; ATTENTION
0353                       ; From here on no more access to any of the SP2 or stevie routines.
0354                       ; We're on unknown territory.
0355               
0356                       ;-------------------------------------------------------
0357                       ; Resume TI Basic interpreter
0358                       ;-------------------------------------------------------
0359 63DC 0460  24         b     @>0ab8                ; Return from interrupt routine.
     63DE 0AB8     
0360                                                   ; See TI Intern page 32 (german)
0361                       ;-------------------------------------------------------
0362                       ; Required values for TI Basic scratchpad
0363                       ;-------------------------------------------------------
0364               tibasic.scrpad.83d4:
0365 63E0 E000             data  >e000
0366               tibasic.scrpad.83fa:
0367 63E2 9800             data  >9800
0368               tibasic.scrpad.83fc:
0369 63E4 0108             data  >0108
0370               tibasic.scrpad.83fe:
0371 63E6 8C02             data  >8c02
0372               
0373               
0374               
0375               
0376               ***************************************************************
0377               * Patterns for session indicator digits 1-5
0378               ********|*****|*********************|**************************
0379               tibasic.patterns:
0380 63E8 007E             byte  >00,>7E,>E7,>C7,>E7,>E7,>C3,>7E ; 1
     63EA E7C7     
     63EC E7E7     
     63EE C37E     
0381 63F0 007E             byte  >00,>7E,>C3,>F3,>C3,>CF,>C3,>7E ; 2
     63F2 C3F3     
     63F4 C3CF     
     63F6 C37E     
0382 63F8 007E             byte  >00,>7E,>C3,>F3,>C3,>F3,>C3,>7E ; 3
     63FA C3F3     
     63FC C3F3     
     63FE C37E     
0383 6400 007E             byte  >00,>7E,>D3,>D3,>C3,>F3,>F3,>7E ; 4
     6402 D3D3     
     6404 C3F3     
     6406 F37E     
0384 6408 007E             byte  >00,>7E,>C3,>CF,>C3,>F3,>C3,>7E ; 5
     640A C3CF     
     640C C3F3     
     640E C37E     
                   < stevie_b7.asm
0081                       copy  "tib.session.isr.asm"        ; TI Basic integration hook
     **** ****     > tib.session.isr.asm
0001               * FILE......: tib.session.isr.asm
0002               * Purpose...: TI Basic integration hook
0003               
0004               
0005               ***************************************************************
0006               * isr
0007               * TI Basic integration hook
0008               ***************************************************************
0009               * Called from console rom at >0ab6
0010               * See TI Intern page 32 (german) for details
0011               *--------------------------------------------------------------
0012               * OUTPUT
0013               * none
0014               *--------------------------------------------------------------
0015               * Register usage
0016               * r7, 12
0017               ********|*****|*********************|**************************
0018               isr:
0019 6410 0300  22         limi  0                     ; \ Turn off interrupts
     6412 0000     
0020                                                   ; / Prevent ISR reentry
0021               
0022 6414 C807  38         mov   r7,@rambuf            ; Backup R7
     6416 A100     
0023 6418 C80C  38         mov   r12,@rambuf+2         ; Backup R12
     641A A102     
0024                       ;--------------------------------------------------------------
0025                       ; Exit ISR if TI-Basic is busy running a program
0026                       ;--------------------------------------------------------------
0027 641C C1E0  30         mov   @>8344,r7             ; Busy running program?
     641E 8344     
0028 6420 0287  22         ci    r7,>0100
     6422 0100     
0029 6424 1601  14         jne   isr.showid            ; No, TI-Basic is in command line mode.
0030                       ;--------------------------------------------------------------
0031                       ; TI-Basic program running
0032                       ;--------------------------------------------------------------
0033 6426 1022  14         jmp   isr.exit              ; Exit
0034                       ;--------------------------------------------------------------
0035                       ; Show TI-Basic session ID and scan crunch buffer
0036                       ;--------------------------------------------------------------
0037               isr.showid:
0038 6428 C1E0  30         mov   @>83b4,r7             ; Get counter
     642A 83B4     
0039 642C 0287  22         ci    r7,>003c              ; Counter limit reached ?
     642E 003C     
0040 6430 1112  14         jlt   isr.counter           ; Not yet, skip showing Session ID
0041 6432 04E0  26         clr   @>83b4                ; Reset counter
     6434 83B4     
0042                       ;--------------------------------------------------------------
0043                       ; Setup VDP write address for column 30
0044                       ;--------------------------------------------------------------
0045 6436 0207  20         li    r7,>401e              ; \
     6438 401E     
0046 643A 06C7  14         swpb  r7                    ; | >1c is the VDP column position
0047 643C D807  30         movb  r7,@vdpa              ; | where bytes should be written
     643E 8C02     
0048 6440 06C7  14         swpb  r7                    ; |
0049 6442 D807  30         movb  r7,@vdpa              ; /
     6444 8C02     
0050                       ;-------------------------------------------------------
0051                       ; Write session ID
0052                       ;-------------------------------------------------------
0053 6446 0207  20         li    r7,>83df              ; Char '#' and char >df
     6448 83DF     
0054 644A D807  30         movb  r7,@vdpw              ; Write byte
     644C 8C00     
0055 644E 06C7  14         swpb  r7
0056 6450 D807  30         movb  r7,@vdpw              ; Write byte
     6452 8C00     
0057 6454 1011  14         jmp   isr.scan.crunchbuf    ; Go scan crunch buffer
0058                       ;-------------------------------------------------------
0059                       ; Increase counter
0060                       ;-------------------------------------------------------
0061               isr.counter:
0062 6456 05A0  26         inc   @>83b4                ; Increase counter
     6458 83B4     
0063                       ;-------------------------------------------------------
0064                       ; Hotkey pressed?
0065                       ;-------------------------------------------------------
0066               isr.hotkey:
0067 645A C1E0  30         mov   @>8374,r7             ; \ Get keyboard scancode from @>8375
     645C 8374     
0068 645E 0247  22         andi  r7,>00ff              ; / LSB only
     6460 00FF     
0069 6462 0287  22         ci    r7,>0f                ; Hotkey fctn + '9' pressed?
     6464 000F     
0070 6466 1602  14         jne   isr.exit              ; No, normal exit
0071 6468 0460  28         b     @tib.run.return       ; Yes, return to Stevie
     646A 6544     
0072                       ;-------------------------------------------------------
0073                       ; Return from ISR
0074                       ;-------------------------------------------------------
0075               isr.exit:
0076 646C C320  34         mov   @rambuf+2,r12         ; Restore R12
     646E A102     
0077 6470 C1E0  34         mov   @rambuf,r7            ; Restore R7
     6472 A100     
0078 6474 045B  20         b     *r11                  ; Return from ISR
0079               
0080 6476 0D0D     blabla  byte  >0d,>0d
0081               
0082               
0083               ***************************************************************
0084               * isr.scan.crunbuf
0085               * Scan the VDP crunch buffer for file commands NEW/OLD/SAVE
0086               ***************************************************************
0087               * Called from isr
0088               *--------------------------------------------------------------
0089               * OUTPUT
0090               * none
0091               *--------------------------------------------------------------
0092               * Register usage
0093               * r7, r10
0094               *
0095               * Memory usage
0096               * >ffd0 - >ffff  TI Basic program filename
0097               ********|*****|*********************|**************************
0098               isr.scan.crunchbuf:
0099                       ;-------------------------------------------------------
0100                       ; Read token at VDP >0320
0101                       ;-------------------------------------------------------
0102 6478 0207  20         li    r7,>0320              ; \
     647A 0320     
0103 647C 06C7  14         swpb  r7                    ; |  Setup VDP read address
0104 647E D807  30         movb  r7,@vdpa              ; |
     6480 8C02     
0105 6482 06C7  14         swpb  r7                    ; |
0106 6484 D807  30         movb  r7,@vdpa              ; /
     6486 8C02     
0107               
0108 6488 D1E0  30         movb  @vdpr,r7              ; Read MSB
     648A 8800     
0109 648C 06C7  14         swpb  r7
0110 648E D1E0  30         movb  @vdpr,r7              ; Read LSB
     6490 8800     
0111 6492 06C7  14         swpb  r7                    ; Restore order
0112                       ;-------------------------------------------------------
0113                       ; Scan for END
0114                       ;-------------------------------------------------------
0115               isr.scan.end:
0116 6494 9807  34         cb    r7,@data.tk.end       ; END?
     6496 64D5     
0117 6498 1602  14         jne   isr.scan.old          ; No, check if other token
0118 649A 0460  28         b     @tib.run.return       ; Yes, return to Stevie
     649C 6544     
0119                       ;-------------------------------------------------------
0120                       ; Scan for OLD
0121                       ;-------------------------------------------------------
0122               isr.scan.old:
0123 649E 9807  34         cb    r7,@data.tk.old       ; OLD?
     64A0 64D3     
0124 64A2 1601  14         jne   isr.scan.save         ; No, check if other token
0125 64A4 100E  14         jmp   isr.scan.copy         ; Copy parameter to high-memory
0126                       ;-------------------------------------------------------
0127                       ; Scan for SAVE
0128                       ;-------------------------------------------------------
0129               isr.scan.save:
0130 64A6 9807  34         cb    r7,@data.tk.save      ; SAVE?
     64A8 64D4     
0131 64AA 1601  14         jne   isr.scan.new          ; No, check if other token
0132 64AC 100A  14         jmp   isr.scan.copy         ; Copy parameter to high-memory
0133                       ;-------------------------------------------------------
0134                       ; Scan for NEW
0135                       ;-------------------------------------------------------
0136               isr.scan.new:
0137 64AE 9807  34         cb    r7,@data.tk.new       ; NEW?
     64B0 64D2     
0138 64B2 160E  14         jne   isr.scan.exit         ; Exit crunch buffer scan
0139                       ;-------------------------------------------------------
0140                       ; Clear TI Basic auxiliary memory buffer
0141                       ;-------------------------------------------------------
0142 64B4 0207  20         li    r7,tib.aux
     64B6 FF00     
0143 64B8 04F7  30 !       clr   *r7+                  ; \
0144 64BA 0287  22         ci    r7,tib.aux.end        ; | Clear memory
     64BC FFFA     
0145 64BE 12FC  14         jle   -!                    ; /
0146 64C0 1007  14         jmp   isr.scan.exit         ; Exit
0147                       ;-------------------------------------------------------
0148                       ; Copy TI Basic program filename to high memory
0149                       ;-------------------------------------------------------
0150               isr.scan.copy:
0151 64C2 04C7  14         clr   r7                    ;
0152 64C4 020A  20         li    r10,tib.aux.fname     ; Target address in high memory
     64C6 FF00     
0153               isr.scan.copy.loop:
0154 64C8 D1E0  30         movb  @vdpr,r7              ; Read LSB
     64CA 8800     
0155 64CC DE87  32         movb  r7,*r10+              ; Copy byte to RAM
0156 64CE 16FC  14         jne   isr.scan.copy.loop    ; Copy until termination token found
0157                       ;-------------------------------------------------------
0158                       ; TI Basic program filename copied
0159                       ;-------------------------------------------------------
0160               isr.scan.exit:
0161 64D0 10C4  14         jmp   isr.hotkey            ; Continue processing isr
0162               
0163               
0164               
0165               ***************************************************************
0166               * Tokens TI Basic commands
0167               ********|*****|*********************|**************************
0168 64D2 01       data.tk.new   byte >01              ; NEW
0169 64D3   06     data.tk.old   byte >06              ; OLD
0170 64D4 08       data.tk.save  byte >08              ; SAVE
0171 64D5   8B     data.tk.end   byte >8b              ; END
0172 64D6 8E       data.tk.break byte >8e              ; BREAK
                   < stevie_b7.asm
0082                       copy  "tib.session.return.asm"     ; Return to Stevie
     **** ****     > tib.session.return.asm
0001               * FILE......: tib.session.return.asm
0002               * Purpose...: Return from TI Basic session to Stevie
0003               
0004               
0005               ***************************************************************
0006               * tib.run.return.mon
0007               * Return from OS Monitor to Stevie
0008               ***************************************************************
0009               * bl   @tib.run.return.mon
0010               *--------------------------------------------------------------
0011               * OUTPUT
0012               * none
0013               *--------------------------------------------------------------
0014               * Register usage
0015               * r1 in GPL WS, tmp0, tmp1
0016               *--------------------------------------------------------------
0017               * REMARKS
0018               * Only called from program selection screen after exit out of
0019               * TI Basic with FCTN-QUIT, BYE or by running an assembly
0020               * program that did "BLWP @0".
0021               ********|*****|*********************|**************************
0022               tib.run.return.mon:
0023 64D8 020C  20         li    r12,>1e00             ; \ Enable SAMS mapper again
     64DA 1E00     
0024 64DC 1D01  16         sbo   1                     ; | We stil have the SAMS banks layout
0025                                                   ; / mem.sams.layout.external
0026                       ;------------------------------------------------------
0027                       ; Check magic string (inline version, no SP2 present!)
0028                       ;------------------------------------------------------
0029 64DE 8820  50         c     @magic.str.w1,@magic.string
     64E0 A000     
     64E2 609C     
0030 64E4 1611  14         jne   !
0031 64E6 8820  50         c     @magic.str.w2,@magic.string+2
     64E8 A002     
     64EA 609E     
0032 64EC 160D  14         jne   !
0033 64EE 8820  50         c     @magic.str.w3,@magic.string+4
     64F0 A004     
     64F2 60A0     
0034 64F4 1609  14         jne   !
0035                       ;-------------------------------------------------------
0036                       ; Initialize
0037                       ;-------------------------------------------------------
0038 64F6 C120  34         mov   @tib.session,tmp0
     64F8 A0B4     
0039 64FA 0284  22         ci    tmp0,1
     64FC 0001     
0040 64FE 1104  14         jlt   !
0041 6500 0284  22         ci    tmp0,5
     6502 0005     
0042 6504 1501  14         jgt   !
0043 6506 1002  14         jmp   tib.run.return.mon.cont
0044                       ;-------------------------------------------------------
0045                       ; Initialize Stevie
0046                       ;-------------------------------------------------------
0047 6508 0460  28 !       b     @kickstart.code1      ; Initialize Stevie
     650A 6040     
0048                       ;-------------------------------------------------------
0049                       ; Resume Stevie
0050                       ;-------------------------------------------------------
0051               tib.run.return.mon.cont:
0052 650C 02E0  18         lwpi  cpu.scrpad2           ; Activate workspace at >ad00 that was
     650E AD00     
0053                                                   ; paged out in tibasic.init
0054               
0055 6510 06A0  36         bl    @cpu.scrpad.pgin      ; \ Page-in scratchpad memory previously
     6512 2BE4     
0056 6514 AD00                   data cpu.scrpad2      ; | stored at >ad00 and set wp at >8300
0057                                                   ; / Destroys registers tmp0-tmp2
0058               
0059 6516 D820  46         movb  @w$ffff,@>8375        ; Reset keycode
     6518 2022     
     651A 8375     
0060               
0061 651C C0A0  42         mov   @tv.sp2.conf,config   ; Restore the SP2 config register
     651E A22E     
0062               
0063 6520 06A0  36         bl    @mute                 ; Mute sound generators
     6522 2868     
0064 6524 06A0  36         bl    @scroff               ; Turn screen off
     6526 26A4     
0065               
0066                       ; Prevent resuming the TI Basic session that lead us here.
0067                       ; Easiest thing to do is to reinitalize the session upon next start.
0068               
0069                       ;-------------------------------------------------------
0070                       ; Assert TI basic sesion ID
0071                       ;-------------------------------------------------------
0072 6528 C120  42         mov   @tib.session,tmp0     ; Get session ID
     652A A0B4     
0073 652C 1307  14         jeq   !
0074 652E 0284  26         ci    tmp0,5
     6530 0005     
0075 6532 1504  14         jgt   !
0076                       ;-------------------------------------------------------
0077                       ; Reset session resume flag (tibasicX.status)
0078                       ;-------------------------------------------------------
0079 6534 0A14  26         sla   tmp0,1                ; Word align
0080 6536 04E4  38         clr   @tib.session(tmp0)
     6538 A0B4     
0081 653A 107A  14         jmp   tib.run.return.stevie
0082                       ;-------------------------------------------------------
0083                       ; Assert failed
0084                       ;-------------------------------------------------------
0085 653C C80B  42 !       mov   r11,@>ffce            ; \ Save caller address
     653E FFCE     
0086 6540 06A0  36         bl    @cpu.crash            ; / Crash and halt system
     6542 2026     
0087               
0088               
0089               
0090               ***************************************************************
0091               * tib.run.return
0092               * Return from TI Basic to Stevie
0093               ***************************************************************
0094               * bl   @tib.run.return
0095               *--------------------------------------------------------------
0096               * OUTPUT
0097               * none
0098               *--------------------------------------------------------------
0099               * Register usage
0100               * r1 in GPL WS, tmp0, tmp1
0101               *--------------------------------------------------------------
0102               * REMARKS
0103               * Called from ISR code
0104               ********|*****|*********************|**************************
0105               tib.run.return:
0106 6544 020C  24         li    r12,>1e00             ; \ Enable SAMS mapper again with
     6546 1E00     
0107 6548 1D01  20         sbo   1                     ; | sams layout table
0108                                                   ; / mem.sams.layout.basic[1-5]
0109               
0110 654A 02E0  18         lwpi  cpu.scrpad2           ; Activate Stevie workspace that got
     654C AD00     
0111                                                   ; paged-out in tibasic.init
0112               
0113 654E D820  46         movb  @w$ffff,@>8375        ; Reset keycode
     6550 2022     
     6552 8375     
0114               
0115               
0116 6554 1D00  20         sbo   0                     ; Enable writing to SAMS registers
0117 6556 C820  54         mov   @tib.run.return.data.samspage,@>401c
     6558 6690     
     655A 401C     
0118                                                   ; \ Temporarily map SAMS page >0f to
0119                                                   ; | memory window >0e00 - >0eff
0120                                                   ; |
0121                                                   ; | Needed for copying BASIC program
0122                                                   ; | filename at >ef00 to destination >f?00
0123                                                   ; | in SAMS page >ff
0124                                                   ; /
0125 655C 1E00  20         sbz   0                     ; Disable writing to SAMS registers
0126               
0127                       ;-------------------------------------------------------
0128                       ; Backup scratchpad of TI-Basic session 1
0129                       ;-------------------------------------------------------
0130               tib.run.return.1:
0131 655E 8820  50         c     @tib.session,@const.1
     6560 A0B4     
     6562 2002     
0132 6564 160B  14         jne   tib.run.return.2      ; Not the current session, check next one.
0133               
0134 6566 06A0  36         bl    @cpym2m
     6568 24F8     
0135 656A 8300                   data >8300,>f100,256  ; Backup TI Basic scratchpad to >f100
     656C F100     
     656E 0100     
0136               
0137 6570 06A0  36         bl    @cpym2m
     6572 24F8     
0138 6574 EF00                   data >ef00,>f600,256  ; Backup auxiliary memory to >f600
     6576 F600     
     6578 0100     
0139               
0140 657A 1040  14         jmp   tib.return.page_in    ; Skip to page-in
0141                       ;-------------------------------------------------------
0142                       ; Backup scratchpad of TI-Basic session 2
0143                       ;-------------------------------------------------------
0144               tib.run.return.2:
0145 657C 8820  50         c     @tib.session,@const.2
     657E A0B4     
     6580 2004     
0146 6582 160B  14         jne   tib.run.return.3      ; Not the current session, check next one.
0147               
0148 6584 06A0  36         bl    @cpym2m
     6586 24F8     
0149 6588 8300                   data >8300,>f200,256  ; Backup TI Basic scratchpad to >f200
     658A F200     
     658C 0100     
0150               
0151 658E 06A0  36         bl    @cpym2m
     6590 24F8     
0152 6592 EF00                   data >ef00,>f700,256  ; Backup auxiliary memory to >f700
     6594 F700     
     6596 0100     
0153               
0154 6598 1031  14         jmp   tib.return.page_in    ; Skip to page-in
0155                       ;-------------------------------------------------------
0156                       ; Backup scratchpad of TI-Basic session 3
0157                       ;-------------------------------------------------------
0158               tib.run.return.3:
0159 659A 8820  50         c     @tib.session,@const.3
     659C A0B4     
     659E 396A     
0160 65A0 160B  14         jne   tib.run.return.4      ; Not the current session, check next one.
0161               
0162 65A2 06A0  36         bl    @cpym2m
     65A4 24F8     
0163 65A6 8300                   data >8300,>f300,256  ; Backup TI Basic scratchpad to >f300
     65A8 F300     
     65AA 0100     
0164               
0165 65AC 06A0  36         bl    @cpym2m
     65AE 24F8     
0166 65B0 EF00                   data >ef00,>f800,256  ; Backup auxiliary memory to >f800
     65B2 F800     
     65B4 0100     
0167               
0168 65B6 1022  14         jmp   tib.return.page_in    ; Skip to page-in
0169                       ;-------------------------------------------------------
0170                       ; Backup scratchpad of TI-Basic session 4
0171                       ;-------------------------------------------------------
0172               tib.run.return.4:
0173 65B8 8820  50         c     @tib.session,@const.4
     65BA A0B4     
     65BC 2006     
0174 65BE 160B  14         jne   tib.run.return.5      ; Not the current session, check next one.
0175               
0176 65C0 06A0  36         bl    @cpym2m
     65C2 24F8     
0177 65C4 8300                   data >8300,>f400,256  ; Backup TI Basic scratchpad to >f400
     65C6 F400     
     65C8 0100     
0178               
0179 65CA 06A0  36         bl    @cpym2m
     65CC 24F8     
0180 65CE EF00                   data >ef00,>f900,256  ; Backup auxiliary memory to >f900
     65D0 F900     
     65D2 0100     
0181               
0182 65D4 1013  14         jmp   tib.return.page_in    ; Skip to page-in
0183                       ;-------------------------------------------------------
0184                       ; Backup scratchpad of TI-Basic session 5
0185                       ;-------------------------------------------------------
0186               tib.run.return.5:
0187 65D6 8820  50         c     @tib.session,@const.5
     65D8 A0B4     
     65DA 396C     
0188 65DC 160B  14         jne   tib.run.return.failed ; Not the current session, abort here
0189               
0190 65DE 06A0  36         bl    @cpym2m
     65E0 24F8     
0191 65E2 8300                   data >8300,>f500,256  ; Backup TI Basic scratchpad to >f500
     65E4 F500     
     65E6 0100     
0192               
0193 65E8 06A0  36         bl    @cpym2m
     65EA 24F8     
0194 65EC EF00                   data >ef00,>fa00,256  ; Backup auxiliary memory to >fa00
     65EE FA00     
     65F0 0100     
0195               
0196 65F2 1004  14         jmp   tib.return.page_in    ; Skip to page-in
0197                       ;-------------------------------------------------------
0198                       ; Asserts failed
0199                       ;-------------------------------------------------------
0200               tib.run.return.failed:
0201 65F4 C80B  42         mov   r11,@>ffce            ; \ Save caller address
     65F6 FFCE     
0202 65F8 06A0  36         bl    @cpu.crash            ; / Crash and halt system
     65FA 2026     
0203                       ;-------------------------------------------------------
0204                       ; Page-in scratchpad memory
0205                       ;-------------------------------------------------------
0206               tib.return.page_in:
0207 65FC 1D00  20         sbo   0                     ; Enable writing to SAMS registers
0208               
0209 65FE C120  42         mov   @tib.samstab.ptr,tmp0 ; \ Get pointer to basic session SAMS table.
     6600 A0EA     
0210 6602 0224  30         ai    tmp0,12               ; / Get 7th entry in table
     6604 000C     
0211               
0212 6606 C814  50         mov   *tmp0,@>401c          ; \ Restore SAMS page in
     6608 401C     
0213                                                   ; | memory window >0e00 - >0eff
0214                                                   ; | Was temporarily paged-out
0215                                                   ; | in tib.return.run
0216                                                   ; / Required before doing VDP memory dump
0217               
0218 660A 1E00  20         sbz   0                     ; Disable writing to SAMS registers
0219               
0220 660C 06A0  36         bl    @cpym2m
     660E 24F8     
0221 6610 AD00                   data cpu.scrpad2,cpu.scrpad1,256
     6612 8300     
     6614 0100     
0222                                                   ; Restore scratchpad contents
0223               
0224 6616 02E0  18         lwpi  cpu.scrpad1           ; Activate primary scratchpad
     6618 8300     
0225               
0226 661A C0A0  34         mov   @tv.sp2.conf,config   ; Restore the SP2 config register
     661C A22E     
0227               
0228 661E 06A0  32         bl    @mute                 ; Mute sound generators
     6620 2868     
0229                       ;-------------------------------------------------------
0230                       ; Cleanup after return from TI Basic
0231                       ;-------------------------------------------------------
0232               tib.run.return.vdpdump:
0233 6622 06A0  32         bl    @scroff               ; Turn screen off
     6624 26A4     
0234 6626 06A0  32         bl    @cpyv2m
     6628 24D6     
0235 662A 0000                   data >0000,>b000,16384
     662C B000     
     662E 4000     
0236                                                   ; Dump TI Basic 16K VDP memory to ram buffer
0237                                                   ; >b000->efff
0238                       ;-------------------------------------------------------
0239                       ; Restore VDP screen with Stevie content
0240                       ;-------------------------------------------------------
0241               tib.run.return.stevie:
0242 6630 06A0  32         bl    @mem.sams.set.external
     6632 610A     
0243                                                   ; Load SAMS page layout when returning from
0244                                                   ; external program.
0245               
0246 6634 06A0  32         bl    @cpym2v
     6636 24A4     
0247 6638 0000                   data >0000,>b000,16384
     663A B000     
     663C 4000     
0248                                                   ; Restore Stevie 16K to VDP from RAM buffer
0249                                                   ; >b000->efff
0250                       ;-------------------------------------------------------
0251                       ; Restore SAMS memory layout for editor buffer and index
0252                       ;-------------------------------------------------------
0253 663E 06A0  32         bl    @mem.sams.set.stevie  ; Setup SAMS memory banks for stevie
     6640 6142     
0254                                                   ; \ For this to work the bank having the
0255                                                   ; | @tv.sams.xxxx variables must already
0256                                                   ; | be active and may not switch to
0257                                                   ; / another bank.
0258                       ;-------------------------------------------------------
0259                       ; Setup F18a 80x30 mode again
0260                       ;-------------------------------------------------------
0261 6642 06A0  32         bl    @f18unl               ; Unlock the F18a
     6644 2748     
0263               
0264 6646 06A0  32         bl    @putvr                ; Turn on 30 rows mode.
     6648 2332     
0265 664A 3140                   data >3140            ; F18a VR49 (>31), bit 40
0266               
0268               
0269 664C 06A0  32         bl    @vidtab               ; Load video mode table into VDP
     664E 22F8     
0270 6650 7F10                   data stevie.80x30     ; Equate selected video mode table
0271               
0272 6652 06A0  32         bl    @putvr                ; Turn on position based attributes
     6654 2332     
0273 6656 3202                   data >3202            ; F18a VR50 (>32), bit 2
0274               
0275 6658 06A0  32         bl    @putvr                ; Set VDP TAT base address for position
     665A 2332     
0276 665C 0360                   data >0360            ; based attributes (>40 * >60 = >1800)
0277               
0278 665E 06A0  32         bl    @tibasic.buildstr     ; Build session identifier string
     6660 6C28     
0279               
0280 6662 04E0  34         clr   @parm1                ; Screen off while reloading color scheme
     6664 A006     
0281 6666 04E0  34         clr   @parm2                ; Don't skip colorizing marked lines
     6668 A008     
0282 666A 04E0  34         clr   @parm3                ; Colorize all panes
     666C A00A     
0283               
0284 666E 06A0  32         bl    @pane.colorscheme.load
     6670 6BF2     
0285                                                   ; Reload color scheme
0286                                                   ; \ i  @parm1 = Skip screen off if >FFFF
0287                                                   ; | i  @parm2 = Skip colorizing marked lines
0288                                                   ; |             if >FFFF
0289                                                   ; | i  @parm3 = Only colorize CMDB pane
0290                                                   ; /             if >FFFF
0291               
0292 6672 06A0  32         bl    @fb.calc.scrrows      ; Calculate number of rows
     6674 3184     
0293                                                   ; \ i  @tv.ruler.visible = Ruler visible
0294                                                   ; | i  @edb.special.file = Special file flag
0295                                                   ; / i  @tv.error.visible = Error visible
0296               
0297 6676 C120  34         mov   @tib.autounpk,tmp0    ; AutoUnpack is on?
     6678 A0C0     
0298 667A 1604  14         jne   tib.run.return.exit   ; Yes, skip keylist
0299                       ;------------------------------------------------------
0300                       ; Set shortcut list in bottom status line
0301                       ;------------------------------------------------------
0302 667C 0204  20         li    tmp0,txt.keys.basic1
     667E 3C54     
0303 6680 C804  38         mov   tmp0,@cmdb.pankeys    ; Save Keylist in status line
     6682 A72A     
0304                       ;------------------------------------------------------
0305                       ; Exit
0306                       ;------------------------------------------------------
0307               tib.run.return.exit:
0308 6684 C339  30         mov   *stack+,r12           ; Pop r12
0309 6686 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0310 6688 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0311 668A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0312 668C C2F9  30         mov   *stack+,r11           ; Pop r11
0313 668E 045B  20         b     *r11                  ; Return
0314               
0315               tib.run.return.data.samspage
0316 6690 0F00             data  >0f00                 ; SAMS page >0f
                   < stevie_b7.asm
0083                       ;-----------------------------------------------------------------------
0084                       ; TI Basic program uncruncher
0085                       ;-----------------------------------------------------------------------
0086                       copy  "tib.uncrunch.helper.asm"    ; Helper functions for uncrunching
     **** ****     > tib.uncrunch.helper.asm
0001               * FILE......: tib.uncrunch.helper asm
0002               * Purpose...: Helper functions used for uncrunching
0003               
0004               
0005               ***************************************************************
0006               * _v2sams
0007               * Convert VDP address to SAMS page equivalent and get SAMS page
0008               ***************************************************************
0009               * bl   _v2sams
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * tmp0 = VRAM address in range >0000 - >3fff
0013               *
0014               * OUTPUT
0015               * @tib.var3 = SAMS page ID mapped to VRAM address
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0, tmp1
0019               *--------------------------------------------------------------
0020               * Remarks
0021               * Converts the VDP address to index into SAMS page layout table
0022               * mem.sams.layout.basic(X) and get SAMS page.
0023               *
0024               * Index offset in SAMS page layout table:
0025               * VRAM 0000-0fff = 6   \
0026               * VRAM 1000-1fff = 8   |  Offset of slots with SAMS pages having
0027               * VRAM 2000-2fff = 10  |  the 16K VDP dump of TI basic session.
0028               * VRAM 3000-3fff = 12  /
0029               ********|*****|*********************|**************************
0030               _v2sams:
0031 6692 0649  14         dect  stack
0032 6694 C64B  30         mov   r11,*stack            ; Save return address
0033 6696 0649  14         dect  stack
0034 6698 C644  30         mov   tmp0,*stack           ; Push tmp0
0035 669A 0649  14         dect  stack
0036 669C C645  30         mov   tmp1,*stack           ; Push tmp1
0037                       ;------------------------------------------------------
0038                       ; Calculate index in SAMS page table
0039                       ;------------------------------------------------------
0040 669E 0244  22         andi  tmp0,>f000            ; Only keep high-nibble of MSB
     66A0 F000     
0041               
0042 66A2 09B4  38         srl   tmp0,11               ; Move high-nibble to LSB and multiply by 2
0043 66A4 A120  34         a     @tib.stab.ptr,tmp0    ; Add pointer base address
     66A6 A0C2     
0044               
0045                       ;
0046                       ; In the SAMS page layout table of the TI Basic session, the 16K VDP
0047                       ; memory dump page starts at the 4th word. So need to add fixed offset.
0048                       ;
0049 66A8 0224  22         ai    tmp0,6                ; Add fixed offset
     66AA 0006     
0050 66AC C114  26         mov   *tmp0,tmp0            ; Get SAMS page number
0051                       ;------------------------------------------------------
0052                       ; Check if SAMS page needs to be switched
0053                       ;------------------------------------------------------
0054 66AE 8804  34         c     tmp0,@tib.var3        ; SAMS page has changed?
     66B0 A0F0     
0055 66B2 1307  14         jeq   _v2sams.exit          ; No, exit early
0056               
0057 66B4 C804  38         mov   tmp0,@tib.var3        ; Set new SAMS page
     66B6 A0F0     
0058 66B8 0984  32         srl   tmp0,8                ; MSB to LSB
0059 66BA 0205  20         li    tmp1,>f000            ; Memory address to map to
     66BC F000     
0060               
0061 66BE 06A0  32         bl    @xsams.page.set       ; Set SAMS page
     66C0 2594     
0062                                                   ; \ i  tmp0  = SAMS page number
0063                                                   ; / i  tmp1  = Memory map address
0064                       ;------------------------------------------------------
0065                       ; Exit
0066                       ;------------------------------------------------------
0067               _v2sams.exit:
0068 66C2 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0069 66C4 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0070 66C6 C2F9  30         mov   *stack+,r11           ; Pop r11
0071 66C8 045B  20         b     *r11                  ; Return
                   < stevie_b7.asm
0087                       copy  "tib.uncrunch.asm"           ; Uncrunch TI Basic program
     **** ****     > tib.uncrunch.asm
0001               * FILE......: tib.uncrunch.prep.asm
0002               * Purpose...: Uncrunch TI Basic program to editor buffer
0003               
0004               
0005               ***************************************************************
0006               * tib.uncrunch
0007               * Uncrunch TI Basic program to editor buffer
0008               ***************************************************************
0009               * bl   @tib.uncrunch
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @parm1 = TI Basic session to uncrunch (1-5)
0013               *
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0, tmp1, tmp2, tmp3, tmp4
0019               ********|*****|*********************|**************************
0020               tib.uncrunch:
0021 66CA 0649  14         dect  stack
0022 66CC C64B  30         mov   r11,*stack            ; Save return address
0023 66CE 0649  14         dect  stack
0024 66D0 C644  30         mov   tmp0,*stack           ; Push tmp0
0025 66D2 0649  14         dect  stack
0026 66D4 C645  30         mov   tmp1,*stack           ; Push tmp1
0027                       ;------------------------------------------------------
0028                       ; Set indicator
0029                       ;------------------------------------------------------
0030 66D6 0649  14         dect  stack
0031 66D8 C660  46         mov   @parm1,*stack         ; Push @parm1
     66DA A006     
0032               
0033 66DC 06A0  32         bl    @fm.newfile           ; \ Clear editor buffer
     66DE 6C16     
0034                                                   ; / (destroys parm1)
0035                       ;------------------------------------------------------
0036                       ; Determine filename
0037                       ;------------------------------------------------------
0038 66E0 C119  26         mov   *stack,tmp0           ; Get TI Basic session
0039 66E2 0A14  18         sla   tmp0,1                ; Align to word boundary
0040 66E4 C824  54         mov   @data.filename.ptr(tmp0),@edb.filename.ptr
     66E6 6746     
     66E8 A514     
0041               
0042 66EA C820  54         mov   @tv.busycolor,@parm1  ; Get busy color
     66EC A21C     
     66EE A006     
0043 66F0 06A0  32         bl    @pane.colorscheme.statlines
     66F2 6C04     
0044                                                   ; Set color combination for status line
0045                                                   ; \ i  @parm1 = Color combination
0046                                                   ; /
0047               
0048 66F4 C839  50         mov   *stack+,@parm1        ; Pop @parm1
     66F6 A006     
0049               
0050 66F8 06A0  32         bl    @hchar
     66FA 27F0     
0051 66FC 1D00                   byte pane.botrow,0,32,55
     66FE 2037     
0052 6700 FFFF                   data eol              ; Remove shortcuts
0053               
0054 6702 06A0  32         bl    @putat
     6704 2442     
0055 6706 1D00                   byte pane.botrow,0
0056 6708 3B4A                   data txt.uncrunching  ; Show expansion message
0057                       ;------------------------------------------------------
0058                       ; Prepare for uncrunching
0059                       ;------------------------------------------------------
0060 670A 06A0  32         bl    @tib.uncrunch.prepare ; Prepare for uncrunching TI Basic program
     670C 6752     
0061                                                   ; \ i  @parm1 = TI Basic session to uncrunch
0062                                                   ; /
0063                       ;------------------------------------------------------
0064                       ; Uncrunch TI Basic program
0065                       ;------------------------------------------------------
0066 670E 06A0  32         bl    @tib.uncrunch.prg     ; Uncrunch TI Basic program
     6710 6820     
0067                       ;------------------------------------------------------
0068                       ; Prepare for exit
0069                       ;------------------------------------------------------
0070 6712 C120  34         mov   @tv.sams.f000,tmp0    ; Get SAMS page number
     6714 A20E     
0071 6716 0205  20         li    tmp1,>f000            ; Map SAMS page to >f000-ffff
     6718 F000     
0072               
0073 671A 06A0  32         bl    @xsams.page.set       ; Set SAMS page
     671C 2594     
0074                                                   ; \ i  tmp0  = SAMS page number
0075                                                   ; / i  tmp1  = Memory map address
0076                       ;------------------------------------------------------
0077                       ; Close dialog and refresh frame buffer
0078                       ;------------------------------------------------------
0079 671E 06A0  32         bl    @cmdb.dialog.close    ; Close dialog
     6720 6BE0     
0080               
0081 6722 04E0  34         clr   @parm1                ; Goto line 1
     6724 A006     
0082               
0083 6726 06A0  32         bl    @fb.refresh           ; Refresh frame buffer
     6728 6C3A     
0084                                                   ; \ i  @parm1 = Line to start with
0085                                                   ; /             (becomes @fb.topline)
0086               
0087 672A 04E0  34         clr   @fb.row               ; Frame buffer line 0
     672C A306     
0088 672E 04E0  34         clr   @fb.column            ; Frame buffer column 0
     6730 A30C     
0089 6732 04E0  26         clr   @wyx                  ; Position VDP cursor
     6734 832A     
0090               
0091 6736 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     6738 315C     
0092                                                   ; \ i   @fb.top      = Address top row in FB
0093                                                   ; | i   @fb.topline  = Top line in FB
0094                                                   ; | i   @fb.row      = Current row in FB
0095                                                   ; |                  (offset 0..@fb.scrrows)
0096                                                   ; | i   @fb.column   = Current column in FB
0097                                                   ; | i   @fb.colsline = Columns per line FB
0098                                                   ; |
0099                                                   ; / o   @fb.current  = Updated pointer
0100               
0101 673A 06A0  32         bl    @edb.line.getlength2  ; \ Get length current line
     673C 376C     
0102                                                   ; | i  @fb.row        = Row in frame buffer
0103                                                   ; / o  @fb.row.length = Length of row
0104                       ;------------------------------------------------------
0105                       ; Exit
0106                       ;------------------------------------------------------
0107               tib.uncrunch.exit:
0108 673E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0109 6740 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0110 6742 C2F9  30         mov   *stack+,r11           ; Pop r11
0111 6744 045B  20         b     *r11                  ; Return
0112               
0113               
0114               data.filename.ptr:
0115 6746 3B74             data  txt.newfile,txt.tib1,txt.tib2,txt.tib3,txt.tib4,txt.tib5
     6748 3B80     
     674A 3B8E     
     674C 3B9C     
     674E 3BAA     
     6750 3BB8     
                   < stevie_b7.asm
0088                       copy  "tib.uncrunch.prep.asm"      ; Prepare for uncrunching
     **** ****     > tib.uncrunch.prep.asm
0001               * FILE......: tib.uncrunch.prep.asm
0002               * Purpose...: Uncrunch TI Basic program to editor buffer
0003               
0004               
0005               ***************************************************************
0006               * tib.uncrunch.prepare
0007               * Prepare for uncrunching TI-Basic program
0008               ***************************************************************
0009               * bl   @tib.uncrunch.prepare
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @parm1 = TI Basic session to uncrunch (1-5)
0013               *
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0
0019               *--------------------------------------------------------------
0020               * Remarks
0021               *
0022               * Pointers:
0023               * @tib.scrpad.ptr = Scratchpad address in SAMS page >ff
0024               * @tib.stab.ptr   = SAMS page layout table of TI Basic session
0025               *
0026               * Pointers to tables in VRAM:
0027               * @tib.lnt.top.ptr  = Top of line number table
0028               * @tib.lnt.bot.ptr  = Bottom of line number table
0029               * @tib.symt.top.ptr = Top of symbol table
0030               * @tib.symt.bot.ptr = Bottom of symbol table
0031               * @tib.strs.top.ptr = Top of string space
0032               * @tib.strs.bot.ptr = Bottom of string space
0033               *
0034               * Variables
0035               * @tib.var1  = TI Basic session
0036               * @tib.var2  = Address of SAMS page layout table entry mapped to VRAM address
0037               * @tib.var3  = SAMS page ID mapped to VRAM address
0038               * @tib.lines = Number of lines in TI Basic program
0039               ********|*****|*********************|**************************
0040               tib.uncrunch.prepare:
0041 6752 0649  14         dect  stack
0042 6754 C64B  30         mov   r11,*stack            ; Save return address
0043 6756 0649  14         dect  stack
0044 6758 C644  30         mov   tmp0,*stack           ; Push tmp0
0045 675A 0649  14         dect  stack
0046 675C C645  30         mov   tmp1,*stack           ; Push tmp1
0047 675E 0649  14         dect  stack
0048 6760 C646  30         mov   tmp2,*stack           ; Push tmp2
0049                       ;------------------------------------------------------
0050                       ; Initialisation
0051                       ;------------------------------------------------------
0052 6762 04E0  34         clr   @tib.var1             ;
     6764 A0EC     
0053 6766 04E0  34         clr   @tib.var2             ; Clear temporary variables
     6768 A0EE     
0054 676A 04E0  34         clr   @tib.var3             ;
     676C A0F0     
0055 676E 04E0  34         clr   @tib.var4             ;
     6770 A0F2     
0056 6772 04E0  34         clr   @tib.var5             ;
     6774 A0F4     
0057                       ;------------------------------------------------------
0058                       ; (1) Assert on TI basic session
0059                       ;------------------------------------------------------
0060 6776 C120  34         mov   @parm1,tmp0           ; Get session to uncrunch
     6778 A006     
0061 677A C804  38         mov   tmp0,@tib.var1        ; Make copy
     677C A0EC     
0062               
0063 677E 0284  22         ci    tmp0,1                ; \
     6780 0001     
0064 6782 1103  14         jlt   !                     ; | Skip to (2) if valid
0065 6784 0284  22         ci    tmp0,5                ; | session ID.
     6786 0005     
0066 6788 1204  14         jle   tib.uncrunch.prepare.2; /
0067                       ;------------------------------------------------------
0068                       ; Assert failed
0069                       ;------------------------------------------------------
0070 678A C80B  38 !       mov   r11,@>ffce            ; \ Save caller address
     678C FFCE     
0071 678E 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     6790 2026     
0072                       ;------------------------------------------------------
0073                       ; (2) Get scratchpad of TI Basic session
0074                       ;------------------------------------------------------
0075               tib.uncrunch.prepare.2:
0076 6792 06A0  32         bl    @sams.page.set        ; Set SAMS page
     6794 2590     
0077 6796 00FF                   data >00ff,>f000      ; \ i  p1  = SAMS page number
     6798 F000     
0078                                                   ; / i  p2  = Memory map address
0079               
0080                       ; TI Basic session 1 scratchpad >f100
0081                       ; TI Basic session 2 scratchpad >f200
0082                       ; TI Basic session 3 scratchpad >f300
0083                       ; TI Basic session 4 scratchpad >f400
0084                       ; TI Basic session 5 scratchpad >f500
0085               
0086 679A C120  34         mov   @tib.var1,tmp0        ; Get TI Basic session
     679C A0EC     
0087 679E 0A84  32         sla   tmp0,8                ; Get scratchpad offset (>100->500)
0088 67A0 0224  22         ai    tmp0,>f000            ; Add base address
     67A2 F000     
0089 67A4 C804  38         mov   tmp0,@tib.scrpad.ptr  ; Store pointer to scratchpad in SAMS
     67A6 A0C4     
0090                       ;------------------------------------------------------
0091                       ; (3) Get relevant pointers stored in scratchpad
0092                       ;------------------------------------------------------
0093 67A8 C824  54         mov   @>18(tmp0),@tib.strs.top.ptr
     67AA 0018     
     67AC A0CE     
0094                                                   ; @>8318 Pointer to top of string space
0095                                                   ; in VRAM
0096               
0097 67AE C824  54         mov   @>1a(tmp0),@tib.strs.bot.ptr
     67B0 001A     
     67B2 A0D0     
0098                                                   ; @>831a Pointer to bottom of string space
0099                                                   ; in VRAM
0100               
0101 67B4 C824  54         mov   @>30(tmp0),@tib.lnt.bot.ptr
     67B6 0030     
     67B8 A0C8     
0102                                                   ; @>8330 Pointer to bottom of line number
0103                                                   ; table in VRAM
0104               
0105 67BA C824  54         mov   @>32(tmp0),@tib.lnt.top.ptr
     67BC 0032     
     67BE A0C6     
0106                                                   ; @>8332 Pointer to top of line number
0107                                                   ; table in VRAM
0108               
0109 67C0 C820  54         mov   @tib.lnt.bot.ptr,@tib.symt.top.ptr
     67C2 A0C8     
     67C4 A0CA     
0110 67C6 0660  34         dect  @tib.symt.top.ptr     ; Pointer to top of symbol table in VRAM.
     67C8 A0CA     
0111                                                   ; Table top is just below the bottom of
0112                                                   ; the line number table.
0113               
0114 67CA C824  54         mov   @>3e(tmp0),@tib.symt.bot.ptr
     67CC 003E     
     67CE A0CC     
0115                                                   ; @>833e Pointer to bottom of symbol table
0116                                                   ; in VRAM
0117                       ;------------------------------------------------------
0118                       ; (4) Calculate number of lines in TI Basic program
0119                       ;------------------------------------------------------
0120 67D0 C120  34         mov   @tib.lnt.top.ptr,tmp0 ; \ Size of line number table entry: 4 bytes
     67D2 A0C6     
0121 67D4 6120  34         s     @tib.lnt.bot.ptr,tmp0 ; /
     67D6 A0C8     
0122 67D8 1305  14         jeq   tib.uncrunch.prepare.np
0123               
0124 67DA 0584  14         inc   tmp0                  ; One time offset
0125 67DC 0924  20         srl   tmp0,2                ; tmp0=tmp0/4
0126 67DE C804  38         mov   tmp0,@tib.lines       ; Save lines
     67E0 A0D2     
0127 67E2 1002  14         jmp   tib.uncrunch.prepare.5
0128                       ;------------------------------------------------------
0129                       ; No program present
0130                       ;------------------------------------------------------
0131               tib.uncrunch.prepare.np:
0132 67E4 04E0  34         clr   @tib.lines            ; No program
     67E6 A0D2     
0133                       ;------------------------------------------------------
0134                       ; (5) Get pointer to SAMS page table
0135                       ;------------------------------------------------------
0136               tib.uncrunch.prepare.5:
0137                       ; The data tables of the 5 TI basic sessions form a
0138                       ; uniform region, we calculate the index of the 1st word in the
0139                       ; specified session.
0140 67E8 C120  34         mov   @tib.var1,tmp0        ; Get TI Basic session
     67EA A0EC     
0141               
0142 67EC 0A44  24         sla   tmp0,4                ; \ Get index of first word in SAMS page
0143                                                   ; | layout (of following TI Basic session)
0144                                                   ; /
0145               
0146 67EE 0224  22         ai    tmp0,mem.sams.layout.basic - 16
     67F0 6C7E     
0147                                                   ; Add base address for specified session
0148               
0149 67F2 C804  38         mov   tmp0,@tib.stab.ptr    ; Save pointer
     67F4 A0C2     
0150               
0151                       ;------------------------------------------------------
0152                       ; (6) Get filename of TI basic program
0153                       ;------------------------------------------------------
0154 67F6 C120  34         mov   @tib.scrpad.ptr,tmp0  ; Get pointer to scratchpad in SAMS
     67F8 A0C4     
0155 67FA 0224  22         ai    tmp0,>0500            ; Add offset for reaching auxiliary memory
     67FC 0500     
0156                                                   ; \ Session 1: >f100 + >0500 = >f600
0157                                                   ; | ...
0158                                                   ; / Session 5: >f500 + >0500 = >fa00
0159               
0160 67FE C154  26         mov   *tmp0,tmp1            ; Check if filename set
0161 6800 130A  14         jeq   tib.uncrunch.prepare.exit
0162                                                   ; No, skip setting filename
0163                       ;------------------------------------------------------
0164                       ; Set filename of editor buffer
0165                       ;------------------------------------------------------
0166 6802 0205  20         li    tmp1,edb.filename     ; Destination for copy
     6804 A526     
0167 6806 0206  20         li    tmp2,80               ; Number of bytes to copy
     6808 0050     
0168               
0169 680A 06A0  32         bl    @xpym2m               ; \ Copy TI Basic filename
     680C 24FE     
0170                                                   ; | i  tmp0 = Source address
0171                                                   ; | i  tmp1 = Target address
0172                                                   ; / i  tmp2 = Number of bytes to copy
0173               
0174 680E 0204  20         li    tmp0,edb.filename     ; Set pointer to filename
     6810 A526     
0175 6812 C804  38         mov   tmp0,@edb.filename.ptr
     6814 A514     
0176                       ;------------------------------------------------------
0177                       ; Exit
0178                       ;------------------------------------------------------
0179               tib.uncrunch.prepare.exit:
0180 6816 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0181 6818 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0182 681A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0183 681C C2F9  30         mov   *stack+,r11           ; Pop r11
0184 681E 045B  20         b     *r11                  ; Return
                   < stevie_b7.asm
0089                       copy  "tib.uncrunch.prg.asm"       ; Uncrunch tokenized program code
     **** ****     > tib.uncrunch.prg.asm
0001               * FILE......: tib.uncrunch.prg.asm
0002               * Purpose...: Uncrunch tokenized program code
0003               
0004               ***************************************************************
0005               * tib.uncrunch.prg
0006               * Uncrunch tokenized program code
0007               ***************************************************************
0008               * bl   @tibasic.uncrunch.prg
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = TI Basic session to uncrunch (1-5)
0012               *
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0, tmp1, tmp2, tmp3, tmp4
0018               *--------------------------------------------------------------
0019               * Remarks
0020               *
0021               * Pointers:
0022               * @tib.scrpad.ptr = Scratchpad address in SAMS page >ff
0023               * @tib.stab.ptr   = SAMS page layout table of TI Basic session
0024               *
0025               * Pointers to tables in VRAM:
0026               * @tib.lnt.top.ptr  = Top of line number table
0027               * @tib.lnt.bot.ptr  = Bottom of line number table
0028               * @tib.symt.top.ptr = Top of symbol table
0029               * @tib.symt.bot.ptr = Bottom of symbol table
0030               * @tib.strs.top.ptr = Top of string space
0031               * @tib.strs.bot.ptr = Bottom of string space
0032               *
0033               * Variables
0034               * @tib.var1  = TI Basic Session
0035               * @tib.var2  = Saved VRAM address
0036               * @tib.var3  = SAMS page ID mapped to VRAM address
0037               * @tib.var4  = Line number in program
0038               * @tib.var5  = Pointer to statement (VRAM)
0039               * @tib.var6  = Current position (addr) in uncrunch area
0040               * @tib.var7  = **free**
0041               * @tib.var8  = Basic statement length in bytes
0042               * @tib.var9  = Target line number in editor buffer
0043               * @tib.lines = Number of lines in TI Basic program
0044               *
0045               * Register usage
0046               * tmp0  = (Mapped) address of line number or statement in VDP
0047               * tmp1  = Token to process
0048               * tmp2  = Statement length
0049               * tmp3  = Lines to process counter
0050               *
0051               * tmp0,tmp1,tmp2 also used as work registers at times
0052               ********|*****|*********************|**************************
0053               tib.uncrunch.prg:
0054 6820 0649  14         dect  stack
0055 6822 C64B  30         mov   r11,*stack            ; Save return address
0056 6824 0649  14         dect  stack
0057 6826 C644  30         mov   tmp0,*stack           ; Push tmp0
0058 6828 0649  14         dect  stack
0059 682A C645  30         mov   tmp1,*stack           ; Push tmp1
0060 682C 0649  14         dect  stack
0061 682E C646  30         mov   tmp2,*stack           ; Push tmp2
0062 6830 0649  14         dect  stack
0063 6832 C647  30         mov   tmp3,*stack           ; Push tmp3
0064                       ;------------------------------------------------------
0065                       ; Exit early if no TI Basic program
0066                       ;------------------------------------------------------
0067 6834 8820  50         c     @tib.lnt.top.ptr,@tib.lnt.bot.ptr
     6836 A0C6     
     6838 A0C8     
0068                                                   ; Line number table is empty?
0069 683A 1602  14         jne   !                     ; No, keep on processing
0070 683C 0460  28         b     @tib.uncrunch.prg.exit
     683E 6968     
0071                       ;------------------------------------------------------
0072                       ; Initialisation
0073                       ;------------------------------------------------------
0074 6840 C120  34 !       mov   @tib.lnt.top.ptr,tmp0 ; Get top of line number table
     6842 A0C6     
0075 6844 0224  22         ai    tmp0,-3               ; One time adjustment
     6846 FFFD     
0076 6848 C804  38         mov   tmp0,@tib.var2        ; Save VRAM address
     684A A0EE     
0077               
0078 684C 04E0  34         clr   @tib.var9             ; 1st line in editor buffer
     684E A0FC     
0079 6850 C1E0  34         mov   @tib.lines,tmp3       ; Set lines to process counter
     6852 A0D2     
0080                       ;------------------------------------------------------
0081                       ; Loop over program listing
0082                       ;------------------------------------------------------
0083               tib.uncrunch.prg.lnt.loop:
0084 6854 C120  34         mov   @tib.var2,tmp0        ; Get VRAM address
     6856 A0EE     
0085               
0086                       ; data  c99_dbg_tmp0          ; \ Print vram address in tmp0 on classic99
0087                       ; data  >1001                 ; | debugger console.
0088                       ; data  data.printf.vram.lnt  ; /
0089               
0090 6858 06A0  32         bl    @_v2sams              ; Get SAMS page mapped to VRAM address
     685A 6692     
0091                                                   ; \ i  tmp0 = VRAM address
0092                                                   ; |
0093                                                   ; | o  @tib.var3 = SAMS page ID mapped to
0094                                                   ; |    VRAM address.
0095                                                   ; /
0096                       ;------------------------------------------------------
0097                       ; 1. Get line number
0098                       ;------------------------------------------------------
0099 685C 0264  22         ori   tmp0,>f000            ; \ Use mapped address in >f000->ffff window
     685E F000     
0100                                                   ; | instead of VRAM address.
0101                                                   ; |
0102                                                   ; / Example: >f7b3 maps to >37b3.
0103               
0104 6860 D834  48         movb  *tmp0+,@tib.var4      ; Line number MSB
     6862 A0F2     
0105 6864 D834  48         movb  *tmp0+,@tib.var4+1    ; Line number LSB
     6866 A0F3     
0106               
0107                       ;------------------------------------------------------
0108                       ; 1a. Get Pointer to statement (VRAM)
0109                       ;------------------------------------------------------
0110 6868 D834  48         movb  *tmp0+,@tib.var5      ; Pointer to statement MSB
     686A A0F4     
0111 686C D834  48         movb  *tmp0+,@tib.var5+1    ; Pointer to statement LSB
     686E A0F5     
0112               
0113 6870 A820  54         a     @w$0004,@tib.var2     ; Sync VRAM address with mapped address in
     6872 2006     
     6874 A0EE     
0114                                                   ; tmp0 for steps 1 and 1a.
0115                       ;------------------------------------------------------
0116                       ; 2. Put line number in uncrunch area
0117                       ;------------------------------------------------------
0118 6876 0649  14         dect  stack
0119 6878 C644  30         mov   tmp0,*stack           ; Push tmp0
0120 687A 0649  14         dect  stack
0121 687C C645  30         mov   tmp1,*stack           ; Push tmp1
0122 687E 0649  14         dect  stack
0123 6880 C646  30         mov   tmp2,*stack           ; Push tmp2
0124 6882 0649  14         dect  stack
0125 6884 C647  30         mov   tmp3,*stack           ; Push tmp3
0126               
0127 6886 06A0  32         bl    @mknum                ; Convert unsigned number to string
     6888 2A14     
0128 688A A0F2                   data tib.var4         ; \ i  p1    = Source
0129 688C A100                   data rambuf           ; | i  p2    = Destination
0130 688E 30                     byte 48               ; | i  p3MSB = ASCII offset
0131 688F   20                   byte 32               ; / i  p3LSB = Padding character
0132               
0133 6890 04E0  34         clr   @fb.uncrunch.area     ; \
     6892 D960     
0134 6894 04E0  34         clr   @fb.uncrunch.area+2   ; | Clear length-byte and line number space
     6896 D962     
0135 6898 04E0  34         clr   @fb.uncrunch.area+4   ; /
     689A D964     
0136               
0137 689C 06A0  32         bl    @at
     689E 26E4     
0138 68A0 1D1C                   byte pane.botrow,28   ; Position cursor
0139               
0140 68A2 06A0  32         bl    @trimnum              ; Trim line number and move to uncrunch area
     68A4 2A6C     
0141 68A6 A100                   data rambuf           ; \ i  p1 = Source
0142 68A8 D960                   data fb.uncrunch.area ; | i  p2 = Destination
0143 68AA 0020                   data 32               ; / i  p3 = Padding character to scan
0144               
0145 68AC C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0146 68AE C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0147 68B0 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0148 68B2 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0149                       ;------------------------------------------------------
0150                       ; 2a. Put space character following line number
0151                       ;------------------------------------------------------
0152               
0153                       ; Temporary re-use of tmp0 as work register for operations.
0154               
0155 68B4 D120  34         movb  @fb.uncrunch.area,tmp0
     68B6 D960     
0156                                                   ; Get length of trimmed number into MSB
0157 68B8 0984  32         srl   tmp0,8                ; Move to LSB
0158 68BA 0224  22         ai    tmp0,fb.uncrunch.area+1
     68BC D961     
0159                                                   ; Add base address and length byte
0160               
0161 68BE 0205  20         li    tmp1,>2000            ; \ Put white space character (ASCII 32)
     68C0 2000     
0162 68C2 DD05  32         movb  tmp1,*tmp0+           ; / following line number.
0163 68C4 C804  38         mov   tmp0,@tib.var6        ; Save position in uncrunch area
     68C6 A0F6     
0164               
0165 68C8 B820  54         ab    @w$0100,@fb.uncrunch.area
     68CA 2012     
     68CC D960     
0166                                                   ; Increase length-byte in uncrunch area
0167                       ;------------------------------------------------------
0168                       ; 3. Prepare for uncrunching program statement
0169                       ;------------------------------------------------------
0170 68CE C120  34         mov   @tib.var5,tmp0        ; Get pointer to statement
     68D0 A0F4     
0171 68D2 0604  14         dec   tmp0                  ; Goto statement length prefix
0172               
0178               
0179 68D4 06A0  32         bl    @_v2sams              ; Get SAMS page mapped to VRAM address
     68D6 6692     
0180                                                   ; \ i  tmp0 = VRAM address
0181                                                   ; |
0182                                                   ; | o  @tib.var3 = SAMS page ID mapped to
0183                                                   ; |    VRAM address.
0184                                                   ; /
0185               
0186 68D8 0264  22         ori   tmp0,>f000            ; \ Use mapped address in >f000->ffff window
     68DA F000     
0187                                                   ; | instead of VRAM address.
0188                                                   ; |
0189                                                   ; / Example: >f7b3 maps to >37b3.
0190               
0191 68DC C160  34         mov   @tib.var4,tmp1
     68DE A0F2     
0192               
0198               
0199 68E0 D174  28         movb  *tmp0+,tmp1           ; \ Get statement length in bytes
0200 68E2 0985  32         srl   tmp1,8                ; / MSB to LSB
0201               
0202 68E4 C805  38         mov   tmp1,@tib.var8        ; Save statement length
     68E6 A0FA     
0203 68E8 C185  18         mov   tmp1,tmp2             ; Set statement length in work register
0204                       ;------------------------------------------------------
0205                       ; 4. Uncrunch program statement to uncrunch area
0206                       ;------------------------------------------------------
0207               tib.uncrunch.prg.statement.loop:
0208 68EA D154  26         movb  *tmp0,tmp1            ; Get token into MSB
0209 68EC 0985  32         srl   tmp1,8                ; Move token to LSB
0210 68EE 1320  14         jeq   tib.uncrnch.prg.copy.statement
0211                                                   ; Skip to (5) if termination token >00
0212               
0213 68F0 0285  22         ci    tmp1,>80              ; Is a valid token?
     68F2 0080     
0214 68F4 110D  14         jlt   tib.uncrunch.prg.statement.loop.nontoken
0215                                                   ; Skip decode for non-token
0216               
0217 68F6 C804  38         mov   tmp0,@parm2           ; Mapped position in crunched statement
     68F8 A008     
0218 68FA C805  38         mov   tmp1,@parm1           ; Token to process
     68FC A006     
0219               
0220 68FE 06A0  32         bl    @tib.uncrunch.token   ; Decode statement token to uncrunch area
     6900 69A4     
0221                                                   ; \ i  @parm1 = Token to process
0222                                                   ; |
0223                                                   ; | i  @parm2 = Mapped position (addr) in
0224                                                   ; |    crunched statement.
0225                                                   ; |
0226                                                   ; | o  @outparm1 = New position (addr) in
0227                                                   ; |    crunched statement.
0228                                                   ; |
0229                                                   ; | o  @outparm2 = Bytes processed in
0230                                                   ; |    crunched statement.
0231                                                   ; |
0232                                                   ; | o  @tib.var6 = Position (addr) in
0233                                                   ; /    uncrunch area.
0234               
0235 6902 C120  34         mov   @outparm1,tmp0        ; Forward in crunched statement
     6904 A018     
0236               
0237 6906 61A0  34         s     @outparm2,tmp2        ; Update statement length
     6908 A01A     
0238 690A 15EF  14         jgt   tib.uncrunch.prg.statement.loop
0239                                                   ; Process next token(s) unless done
0240               
0241 690C 1311  14         jeq   tib.uncrnch.prg.copy.statement
0242                                                   ; Continue with (5)
0243               
0244 690E 110C  14         jlt   tib.uncrnch.prg.statement.loop.panic
0245                                                   ; Assert
0246                       ;------------------------------------------------------
0247                       ; 4a. Non-token without decode
0248                       ;------------------------------------------------------
0249               tib.uncrunch.prg.statement.loop.nontoken:
0250 6910 C160  34         mov   @tib.var6,tmp1        ; Get position (addr) in uncrunch area
     6912 A0F6     
0251 6914 DD74  42         movb  *tmp0+,*tmp1+         ; Copy non-token to uncrunch area
0252               
0253 6916 C805  38         mov   tmp1,@tib.var6        ; Save position in uncrunch area
     6918 A0F6     
0254 691A B820  54         ab    @w$0100,@fb.uncrunch.area
     691C 2012     
     691E D960     
0255                                                   ; Increase length-byte in uncrunch area
0256               
0257 6920 0606  14         dec   tmp2                  ; update statement length
0258 6922 1102  14         jlt   tib.uncrnch.prg.statement.loop.panic
0259                                                   ; Assert
0260               
0261 6924 15E2  14         jgt   tib.uncrunch.prg.statement.loop
0262                                                   ; Process next token(s) unless done
0263 6926 1304  14         jeq   tib.uncrnch.prg.copy.statement
0264                       ;------------------------------------------------------
0265                       ; CPU crash
0266                       ;------------------------------------------------------
0267               tib.uncrnch.prg.statement.loop.panic:
0268 6928 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     692A FFCE     
0269 692C 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     692E 2026     
0270                       ;------------------------------------------------------
0271                       ; 5. Copy uncrunched statement to editor buffer
0272                       ;------------------------------------------------------
0273               tib.uncrnch.prg.copy.statement:
0274 6930 C820  54         mov   @tib.var9,@parm1      ; Get editor buffer line number to store
     6932 A0FC     
     6934 A006     
0275                                                   ; statement in.
0276               
0277 6936 06A0  32         bl    @tib.uncrunch.line.pack
     6938 6B46     
0278                                                   ; Pack uncrunched line to editor buffer
0279                                                   ; \ i  @fb.uncrunch.area = Pointer to
0280                                                   ; |    buffer having uncrushed statement
0281                                                   ; |
0282                                                   ; | i  @parm1 = Line number in editor buffer
0283                                                   ; /
0284               
0285 693A 05A0  34         inc   @tib.var9             ; Next line
     693C A0FC     
0286 693E 05A0  34         inc   @edb.lines            ; Update Line counter
     6940 A504     
0287                       ;------------------------------------------------------
0288                       ; 6. Next entry in line number table
0289                       ;------------------------------------------------------
0290 6942 0607  14         dec   tmp3                  ; Last line processed?
0291 6944 1305  14         jeq   tib.uncrunch.prg.done ; yes, prepare for exit
0292               
0293 6946 6820  54         s     @w$0008,@tib.var2     ; Next entry in VRAM line number table
     6948 2008     
     694A A0EE     
0294 694C 0460  28         b     @tib.uncrunch.prg.lnt.loop
     694E 6854     
0295                       ;------------------------------------------------------
0296                       ; 7. Finished processing program
0297                       ;------------------------------------------------------
0298               tib.uncrunch.prg.done:
0299 6950 0720  34         seto  @fb.dirty             ; Refresh screen buffer
     6952 A318     
0300 6954 0720  34         seto  @edb.dirty            ; Update screen with editor buffer when done
     6956 A506     
0301               
0302 6958 0204  20         li    tmp0,id.special.basic  ;
     695A 0003     
0303 695C C804  38         mov   tmp0,@edb.special.file ; Set filetype to TI Basic program
     695E A522     
0304               
0305 6960 0204  20         li    tmp0,txt.msg.tibasic
     6962 3CCC     
0306 6964 C804  38         mov   tmp0,@tv.specmsg.ptr
     6966 A234     
0307               
0308                       ;------------------------------------------------------
0309                       ; Exit
0310                       ;------------------------------------------------------
0311               tib.uncrunch.prg.exit:
0312 6968 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0313 696A C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0314 696C C179  30         mov   *stack+,tmp1          ; Pop tmp1
0315 696E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0316 6970 C2F9  30         mov   *stack+,r11           ; Pop r11
0317 6972 045B  20         b     *r11                  ; Return
0318               
0319               
0320               data.printf.vram.lnt:
0321 6974 5652            text   'VRAM LNT >%04X'
     6976 414D     
     6978 204C     
     697A 4E54     
     697C 203E     
     697E 2530     
     6980 3458     
0322 6982 00              byte   0
0323                      even
0324               
0325               data.printf.vram.stmt:
0326 6984 5652            text   'VRAM STM >%04X'
     6986 414D     
     6988 2053     
     698A 544D     
     698C 203E     
     698E 2530     
     6990 3458     
0327 6992 00              byte   0
0328                      even
0329               
0330               data.printf.vram.lnum:
0331 6994 4261            text   'Basic line: %u'
     6996 7369     
     6998 6320     
     699A 6C69     
     699C 6E65     
     699E 3A20     
     69A0 2575     
0332 69A2 00              byte   0
                   < stevie_b7.asm
0090                       copy  "tib.uncrunch.token.asm"     ; Decode statement token
     **** ****     > tib.uncrunch.token.asm
0001               * FILE......: tib.uncrunch.token.asm
0002               * Purpose...: Decode token to uncrunch area
0003               
0004               
0005               ***************************************************************
0006               * tib.uncrunch.token
0007               * Decode token to uncrunch area
0008               ***************************************************************
0009               * bl   @tib.uncrunch.token
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @parm1 = Token to process
0013               * @parm2 = Mapped position (addr) in crunched statement
0014               *
0015               * OUTPUT
0016               * @outparm1  = New position (addr) in crunched statement
0017               * @outparm2  = Input bytes processed in crunched statement
0018               * @tib.var6  = Current position (addr) in uncrunch area
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * tmp0, tmp1, tmp2, tmp3, tmp4
0022               *--------------------------------------------------------------
0023               * Remarks
0024               * For TI Basic statement decode see:
0025               * https://www.unige.ch/medecine/nouspikel/ti99/basic.htm#statements
0026               *
0027               * Using @outparm2 for storing the number of input bytes
0028               * processed in crunched statement
0029               *
0030               * Using @tib.var10 for storing the number of decoded output bytes
0031               * generated in uncrunch area.
0032               *
0033               * Variables
0034               * @tib.var6  = Current position (addr) in uncrunch area
0035               * @tib.var9  = Temporary use
0036               * @tib.var10 = Temporary use
0037               ********|*****|*********************|**************************
0038               tib.uncrunch.token:
0039 69A4 0649  14         dect  stack
0040 69A6 C64B  30         mov   r11,*stack            ; Save return address
0041 69A8 0649  14         dect  stack
0042 69AA C644  30         mov   tmp0,*stack           ; Push tmp0
0043 69AC 0649  14         dect  stack
0044 69AE C645  30         mov   tmp1,*stack           ; Push tmp1
0045 69B0 0649  14         dect  stack
0046 69B2 C646  30         mov   tmp2,*stack           ; Push tmp2
0047 69B4 0649  14         dect  stack
0048 69B6 C647  30         mov   tmp3,*stack           ; Push tmp3
0049 69B8 0649  14         dect  stack
0050 69BA C648  30         mov   tmp4,*stack           ; Push tmp4
0051 69BC 0649  14         dect  stack
0052 69BE C660  46         mov   @tib.var9,*stack      ; Push @tib.var.9
     69C0 A0FC     
0053 69C2 0649  14         dect  stack
0054 69C4 C660  46         mov   @tib.var10,*stack     ; Push @tib.var.10
     69C6 A0FE     
0055                       ;------------------------------------------------------
0056                       ; Initialisation
0057                       ;------------------------------------------------------
0058 69C8 C120  34         mov   @parm1,tmp0           ; Get token
     69CA A006     
0059 69CC C820  54         mov   @parm2,@outparm1      ; Position (addr) in crunched statement
     69CE A008     
     69D0 A018     
0060               
0061 69D2 04E0  34         clr   @outparm2             ; Set input bytes processed
     69D4 A01A     
0062 69D6 04E0  34         clr   @tib.var10            ; Set output bytes generated (uncrunch area)
     69D8 A0FE     
0063                       ;------------------------------------------------------
0064                       ; 1. Decide how to process token
0065                       ;------------------------------------------------------
0066 69DA 0284  22         ci    tmp0,>c7              ; Quoted string?
     69DC 00C7     
0067 69DE 132A  14         jeq   tib.uncrunch.token.quoted
0068               
0069 69E0 0284  22         ci    tmp0,>c8              ; Unquoted string?
     69E2 00C8     
0070 69E4 134D  14         jeq   tib.uncrunch.token.unquoted
0071               
0072 69E6 0284  22         ci    tmp0,>c9              ; line number?
     69E8 00C9     
0073 69EA 136A  14         jeq   tib.uncrunch.token.linenum
0074                       ;------------------------------------------------------
0075                       ; 2. Decode token range >80 - >ff in lookup table
0076                       ;------------------------------------------------------
0077               tib.uncrunch.token.lookup:
0078 69EC 0224  22         ai    tmp0,->0080           ; Token range >80 - >ff
     69EE FF80     
0079 69F0 0A14  18         sla   tmp0,1                ; Make it a word offset
0080 69F2 C124  34         mov   @tib.tokenindex(tmp0),tmp0
     69F4 6F72     
0081                                                   ; Get pointer to token definition
0082 69F6 0584  14         inc   tmp0                  ; Skip token identifier
0083               
0084 69F8 D1B4  28         movb  *tmp0+,tmp2           ; Get length of decoded keyword
0085 69FA 0986  32         srl   tmp2,8                ; MSB to LSB
0086               
0087 69FC C160  34         mov   @tib.var6,tmp1        ; Get current pos (addr) in uncrunch area
     69FE A0F6     
0088 6A00 A806  38         a     tmp2,@tib.var6        ; Set current pos (addr) in uncrunch area
     6A02 A0F6     
0089               
0090 6A04 05A0  34         inc   @outparm2             ; Set input bytes processed
     6A06 A01A     
0091 6A08 C806  38         mov   tmp2,@tib.var10       ; Set output bytes generated (uncrunch area)
     6A0A A0FE     
0092               
0093 6A0C 06A0  32         bl    @xpym2m               ; Copy keyword to uncrunch area
     6A0E 24FE     
0094                                                   ; \ i  tmp0 = Source address
0095                                                   ; | i  tmp1 = Destination address
0096                                                   ; / i  tmp2 = Number of bytes to copy
0097               
0098 6A10 C120  34         mov   @parm1,tmp0           ; Get token again
     6A12 A006     
0099 6A14 0284  22         ci    tmp0,>b2              ; Token range with keyword needing blank?
     6A16 00B2     
0100 6A18 1509  14         jgt   !                     ; No, as of >b3 skip to (2b)
0101                       ;------------------------------------------------------
0102                       ; 2a. Write trailing blank after decoded keyword
0103                       ;------------------------------------------------------
0104 6A1A 0204  20         li    tmp0,>2000            ; Blank in MSB
     6A1C 2000     
0105 6A1E C160  34         mov   @tib.var6,tmp1        ; Get current pos (addr) in uncrunch area
     6A20 A0F6     
0106 6A22 D554  38         movb  *tmp0,*tmp1           ; Write trailing blank
0107 6A24 05A0  34         inc   @tib.var6             ; Set current pos (addr) in uncrunch area
     6A26 A0F6     
0108 6A28 05A0  34         inc   @tib.var10            ; Set output bytes generated (uncrunch area)
     6A2A A0FE     
0109                       ;------------------------------------------------------
0110                       ; 2b. Update variables related to crunched statement
0111                       ;------------------------------------------------------
0112 6A2C 05A0  34 !       inc   @outparm1             ; New pos (addr) in crunched statement
     6A2E A018     
0113 6A30 0460  28         b     @tib.uncrunch.token.setlen
     6A32 6B26     
0114                       ;------------------------------------------------------
0115                       ; 3. Special handling >c7: Decode quoted string
0116                       ;------------------------------------------------------
0117               tib.uncrunch.token.quoted:
0118 6A34 0204  20         li    tmp0,>2200            ; ASCII " in LSB
     6A36 2200     
0119 6A38 C160  34         mov   @tib.var6,tmp1        ; Get current pos (addr) in uncrunch area
     6A3A A0F6     
0120 6A3C DD44  32         movb  tmp0,*tmp1+           ; Write 1st double quote
0121               
0122 6A3E C120  34         mov   @parm2,tmp0           ; Get position (addr) in crunched statement
     6A40 A008     
0123 6A42 0584  14         inc   tmp0                  ; Skip token
0124 6A44 D1B4  28         movb  *tmp0+,tmp2           ; Get length byte following >C7 token
0125 6A46 0986  32         srl   tmp2,8                ; MSB to LSB
0126 6A48 130B  14         jeq   tib.uncrunch.token.quoted.quote2
0127                                                   ; Skip to (3c) if empty string
0128                       ;------------------------------------------------------
0129                       ; 3b. Copy string to uncrunch area
0130                       ;------------------------------------------------------
0131 6A4A 0649  14         dect  stack
0132 6A4C C644  30         mov   tmp0,*stack           ; Push tmp0
0133 6A4E 0649  14         dect  stack
0134 6A50 C645  30         mov   tmp1,*stack           ; Push tmp1
0135 6A52 0649  14         dect  stack
0136 6A54 C646  30         mov   tmp2,*stack           ; Push tmp2
0137               
0138 6A56 06A0  32         bl    @xpym2m               ; Copy string from crunched statement to
     6A58 24FE     
0139                                                   ; uncrunch area.
0140                                                   ; \ i  tmp0 = Source address
0141                                                   ; | i  tmp1 = Destination address
0142                                                   ; / i  tmp2 = Number of bytes to copy
0143               
0144 6A5A C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0145 6A5C C179  30         mov   *stack+,tmp1          ; Pop tmp1
0146 6A5E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0147                       ;------------------------------------------------------
0148                       ; 3c. Write trailing double quote
0149                       ;------------------------------------------------------
0150               tib.uncrunch.token.quoted.quote2:
0151 6A60 0204  20         li    tmp0,>2200            ; " in MSB
     6A62 2200     
0152 6A64 A146  18         a     tmp2,tmp1             ; Forward in uncrunch area
0153 6A66 DD44  32         movb  tmp0,*tmp1+           ; Write 2nd double quote
0154 6A68 C805  38         mov   tmp1,@tib.var6        ; Set current pos (addr) in uncrunch area
     6A6A A0F6     
0155                       ;------------------------------------------------------
0156                       ; 3d. Update variables related to crunched statement
0157                       ;------------------------------------------------------
0158 6A6C C106  18         mov   tmp2,tmp0             ; \ Get num of bytes copied to uncrunch area
0159 6A6E 05C4  14         inct  tmp0                  ; / Count token byte and length byte
0160 6A70 C804  38         mov   tmp0,@outparm2        ; Set input bytes processed
     6A72 A01A     
0161               
0162 6A74 C804  38         mov   tmp0,@tib.var10       ; Set output bytes generated (uncrunch area)
     6A76 A0FE     
0163                                                   ; Same number as input bytes processed,
0164                                                   ; because quotes match token & length byte.
0165               
0166 6A78 A820  54         a     @outparm2,@outparm1   ; New position (addr) in crunched statement
     6A7A A01A     
     6A7C A018     
0167               
0168 6A7E 1053  14         jmp   tib.uncrunch.token.setlen
0169                       ;------------------------------------------------------
0170                       ; 4. Special handling >c8: Decode unquoted string
0171                       ;------------------------------------------------------
0172               tib.uncrunch.token.unquoted:
0173 6A80 C160  34         mov   @tib.var6,tmp1        ; Get current pos (addr) in uncrunch area
     6A82 A0F6     
0174 6A84 C120  34         mov   @parm2,tmp0           ; Get position (addr) in crunched statement
     6A86 A008     
0175 6A88 0584  14         inc   tmp0                  ; Skip token
0176 6A8A D1B4  28         movb  *tmp0+,tmp2           ; Get length byte following >C8 token
0177 6A8C 0986  32         srl   tmp2,8                ; MSB to LSB
0178               
0179 6A8E 0649  14         dect  stack
0180 6A90 C644  30         mov   tmp0,*stack           ; Push tmp0
0181 6A92 0649  14         dect  stack
0182 6A94 C645  30         mov   tmp1,*stack           ; Push tmp1
0183 6A96 0649  14         dect  stack
0184 6A98 C646  30         mov   tmp2,*stack           ; Push tmp2
0185               
0186 6A9A 06A0  32         bl    @xpym2m               ; Copy string from crunched statement to
     6A9C 24FE     
0187                                                   ; uncrunch area.
0188                                                   ; \ i  tmp0 = Source address
0189                                                   ; | i  tmp1 = Destination address
0190                                                   ; / i  tmp2 = Number of bytes to copy
0191               
0192 6A9E C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0193 6AA0 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0194 6AA2 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0195               
0196 6AA4 A146  18         a     tmp2,tmp1             ; Forward in uncrunch area
0197 6AA6 C805  38         mov   tmp1,@tib.var6        ; Set current pos (addr) in uncrunch area
     6AA8 A0F6     
0198                       ;------------------------------------------------------
0199                       ; 4a. Update variables related to crunched statement
0200                       ;------------------------------------------------------
0201 6AAA C106  18         mov   tmp2,tmp0             ; \ Amount of bytes copied to uncrunch area
0202 6AAC 05C4  14         inct  tmp0                  ; / Count token byte and length byte
0203 6AAE C804  38         mov   tmp0,@outparm2        ; Set input bytes processed
     6AB0 A01A     
0204               
0205 6AB2 0644  14         dect  tmp0                  ; Don't count token byte and length byte
0206 6AB4 C804  38         mov   tmp0,@tib.var10       ; Set output bytes generated (uncrunch area)
     6AB6 A0FE     
0207               
0208 6AB8 A820  54         a     @outparm2,@outparm1   ; New position (addr) in crunched statement
     6ABA A01A     
     6ABC A018     
0209               
0210 6ABE 1033  14         jmp   tib.uncrunch.token.setlen
0211                       ;------------------------------------------------------
0212                       ; 5. Special handling >c9: Decode line number
0213                       ;------------------------------------------------------
0214               tib.uncrunch.token.linenum:
0215 6AC0 C120  34         mov   @parm2,tmp0           ; Get position (addr) in crunched statement
     6AC2 A008     
0216 6AC4 0584  14         inc   tmp0                  ; Skip token
0217 6AC6 C160  34         mov   @tib.var6,tmp1        ; Get current pos (addr) in uncrunch area
     6AC8 A0F6     
0218               
0219 6ACA D174  28         movb  *tmp0+,tmp1           ; Get MSB of line number into MSB
0220 6ACC 0985  32         srl   tmp1,8                ; MSB to LSB
0221 6ACE D174  28         movb  *tmp0+,tmp1           ; Get LSB of line number into MSB
0222 6AD0 06C5  14         swpb  tmp1                  ; Put it in the right order
0223 6AD2 C805  38         mov   tmp1,@tib.var9        ; Put line number word in temporary variable
     6AD4 A0FC     
0224                       ;------------------------------------------------------
0225                       ; 5a. Convert line number (word) to string
0226                       ;------------------------------------------------------
0227               
0228                       ; mknum destroys tmp0-tmp4
0229                       ; That's why we push/pop up to tmp4 although tmp3-tmp4 not used here.
0230               
0231 6AD6 06A0  32         bl    @mknum                ; Convert unsigned number to string
     6AD8 2A14     
0232 6ADA A0FC                   data  tib.var9        ; \ i  p1    = Source
0233 6ADC A100                   data  rambuf          ; | i  p2    = Destination
0234 6ADE 30                     byte  48              ; | i  p3MSB = ASCII offset
0235 6ADF   20                   byte  32              ; / i  p3LSB = Padding character
0236               
0237 6AE0 06A0  32         bl    @trimnum              ; Trim number, remove leading spaces
     6AE2 2A6C     
0238 6AE4 A100                   data  rambuf          ; \ i  p1 = Source
0239 6AE6 A105                   data  rambuf+5        ; | i  p2 = Destination
0240 6AE8 0020                   data  32              ; / i  p3 = Padding character to look for
0241                       ;------------------------------------------------------
0242                       ; 5b. Copy decoded line number to uncrunch area
0243                       ;------------------------------------------------------
0244 6AEA 0204  20         li    tmp0,rambuf+6         ; Start of line number string
     6AEC A106     
0245 6AEE C160  34         mov   @tib.var6,tmp1        ; Get current pos (addr) in uncrunch area
     6AF0 A0F6     
0246               
0247 6AF2 D1A0  34         movb  @rambuf+5,tmp2        ; Get string length
     6AF4 A105     
0248 6AF6 0986  32         srl   tmp2,8                ; MSB to LSB
0249               
0250 6AF8 C806  38         mov   tmp2,@tib.var10       ; Set output bytes generated
     6AFA A0FE     
0251 6AFC A820  54         a     @tib.var10,@tib.var6  ; Set current pos (addr) in uncrunch area
     6AFE A0FE     
     6B00 A0F6     
0252               
0253 6B02 0649  14         dect  stack
0254 6B04 C644  30         mov   tmp0,*stack           ; Push tmp0
0255 6B06 0649  14         dect  stack
0256 6B08 C645  30         mov   tmp1,*stack           ; Push tmp1
0257 6B0A 0649  14         dect  stack
0258 6B0C C646  30         mov   tmp2,*stack           ; Push tmp2
0259               
0260 6B0E 06A0  32         bl    @xpym2m               ; Copy string from crunched statement to
     6B10 24FE     
0261                                                   ; uncrunch area.
0262                                                   ; \ i  tmp0 = Source address
0263                                                   ; | i  tmp1 = Destination address
0264                                                   ; / i  tmp2 = Number of bytes to copy
0265               
0266 6B12 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0267 6B14 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0268 6B16 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0269                       ;------------------------------------------------------
0270                       ; 5c. Update variables related to crunched statement
0271                       ;------------------------------------------------------
0272 6B18 0204  20         li    tmp0,3                ; Token + line number word
     6B1A 0003     
0273 6B1C A804  38         a     tmp0,@outparm1        ; New pos (addr) in crunched statement
     6B1E A018     
0274 6B20 C804  38         mov   tmp0,@outparm2        ; Set input bytes processed
     6B22 A01A     
0275 6B24 1000  14         jmp   tib.uncrunch.token.setlen
0276                       ;------------------------------------------------------
0277                       ; 6. Update uncrunched statement length byte
0278                       ;------------------------------------------------------
0279               tib.uncrunch.token.setlen:
0280 6B26 C120  34         mov   @tib.var10,tmp0       ; Get output bytes generated
     6B28 A0FE     
0281 6B2A 0A84  32         sla   tmp0,8                ; LSB to MSB
0282 6B2C B804  38         ab    tmp0,@fb.uncrunch.area
     6B2E D960     
0283                                                   ; Update string length-prefix byte
0284                       ;------------------------------------------------------
0285                       ; Exit
0286                       ;------------------------------------------------------
0287               tib.uncrunch.token.exit:
0288 6B30 C839  50         mov   *stack+,@tib.var10    ; Pop @tib.var10
     6B32 A0FE     
0289 6B34 C839  50         mov   *stack+,@tib.var9     ; Pop @tib.var9
     6B36 A0FC     
0290 6B38 C239  30         mov   *stack+,tmp4          ; Pop tmp4
0291 6B3A C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0292 6B3C C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0293 6B3E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0294 6B40 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0295 6B42 C2F9  30         mov   *stack+,r11           ; Pop r11
0296 6B44 045B  20         b     *r11                  ; Return
                   < stevie_b7.asm
0091                       copy  "tib.uncrunch.line.pack.asm" ; Pack line to editor buffer
     **** ****     > tib.uncrunch.line.pack.asm
0001               * FILE......: tib.uncrunch.line.pack
0002               * Purpose...: Pack uncrunched line to editor buffer
0003               
0004               ***************************************************************
0005               * tib.uncrunch.line.pack
0006               * Pack uncrunched statement line to editor buffer
0007               ***************************************************************
0008               *  bl   @tib.uncrunch.line.pack
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @fb.uncrunch  = Pointer to uncrunch area
0012               * @parm1        = Line in editor buffer
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0,tmp1,tmp2,tmp3,tmp4
0018               *--------------------------------------------------------------
0019               * Remarks
0020               * none
0021               ********|*****|*********************|**************************
0022               tib.uncrunch.line.pack:
0023 6B46 0649  14         dect  stack
0024 6B48 C64B  30         mov   r11,*stack            ; Save return address
0025 6B4A 0649  14         dect  stack
0026 6B4C C644  30         mov   tmp0,*stack           ; Push tmp0
0027 6B4E 0649  14         dect  stack
0028 6B50 C645  30         mov   tmp1,*stack           ; Push tmp1
0029 6B52 0649  14         dect  stack
0030 6B54 C646  30         mov   tmp2,*stack           ; Push tmp2
0031 6B56 0649  14         dect  stack
0032 6B58 C647  30         mov   tmp3,*stack           ; Push tmp3
0033 6B5A 0649  14         dect  stack
0034 6B5C C648  30         mov   tmp4,*stack           ; Push tmp4
0035                       ;------------------------------------------------------
0036                       ; 1. Prepare scan
0037                       ;------------------------------------------------------
0038 6B5E 0205  20         li    tmp1,fb.uncrunch.area ; Get pointer to uncrunch area
     6B60 D960     
0039 6B62 C1E0  34         mov   @parm1,tmp3           ; Editor buffer line
     6B64 A006     
0040               
0041 6B66 D235  28         movb  *tmp1+,tmp4           ; Get length byte
0042 6B68 0988  32         srl   tmp4,8                ; MSB to LSB
0043               
0044 6B6A 06A0  32         bl    @edb.hipage.alloc     ; Check and increase highest SAMS page
     6B6C 3790     
0045                                                   ; \ i  @edb.next_free.ptr = Pointer to next
0046                                                   ; /    free line
0047                       ;------------------------------------------------------
0048                       ; 2. Update index
0049                       ;------------------------------------------------------
0050 6B6E C807  38         mov   tmp3,@parm1           ; Set editor buffer line
     6B70 A006     
0051 6B72 C820  54         mov   @edb.next_free.ptr,@parm2
     6B74 A508     
     6B76 A008     
0052                                                   ; Pointer to new line
0053 6B78 C820  54         mov   @edb.sams.hipage,@parm3
     6B7A A51C     
     6B7C A00A     
0054                                                   ; SAMS page to use
0055               
0056 6B7E 06A0  32         bl    @idx.entry.update     ; Update index
     6B80 3536     
0057                                                   ; \ i  @parm1 = Line number in editor buffer
0058                                                   ; | i  @parm2 = pointer to line in
0059                                                   ; |             editor buffer
0060                                                   ; / i  @parm3 = SAMS page
0061                       ;------------------------------------------------------
0062                       ; 3. Set line prefix in editor buffer
0063                       ;------------------------------------------------------
0064 6B82 0204  20         li    tmp0,fb.uncrunch.area+1
     6B84 D961     
0065                                                   ; Source for memory copy
0066 6B86 C160  34         mov   @edb.next_free.ptr,tmp1
     6B88 A508     
0067                                                   ; Address of line in editor buffer
0068               
0069 6B8A 05E0  34         inct  @edb.next_free.ptr    ; Adjust pointer
     6B8C A508     
0070               
0071 6B8E C188  18         mov   tmp4,tmp2             ; Get line length
0072 6B90 CD46  34         mov   tmp2,*tmp1+           ; Set saved line length as line prefix
0073                       ;------------------------------------------------------
0074                       ; 4. Copy line from uncrunch area to editor buffer
0075                       ;------------------------------------------------------
0076               tib.uncrunch.line.pack.copyline:
0077 6B92 0286  22         ci    tmp2,2
     6B94 0002     
0078 6B96 1603  14         jne   tib.uncrunch.line.pack.copyline.checkbyte
0079 6B98 DD74  42         movb  *tmp0+,*tmp1+         ; \ Copy single word on possible
0080 6B9A DD74  42         movb  *tmp0+,*tmp1+         ; / uneven address
0081 6B9C 1007  14         jmp   tib.uncrunch.line.pack.copyline.align16
0082               
0083               tib.uncrunch.line.pack.copyline.checkbyte:
0084 6B9E 0286  22         ci    tmp2,1
     6BA0 0001     
0085 6BA2 1602  14         jne   tib.uncrunch.line.pack.copyline.block
0086 6BA4 D554  38         movb  *tmp0,*tmp1           ; Copy single byte
0087 6BA6 1002  14         jmp   tib.uncrunch.line.pack.copyline.align16
0088               
0089               tib.uncrunch.line.pack.copyline.block:
0090 6BA8 06A0  32         bl    @xpym2m               ; Copy memory block
     6BAA 24FE     
0091                                                   ; \ i  tmp0 = source
0092                                                   ; | i  tmp1 = destination, see (1)
0093                                                   ; / i  tmp2 = bytes to copy
0094                       ;------------------------------------------------------
0095                       ; 5. Align pointer to multiple of 16 memory address
0096                       ;------------------------------------------------------
0097               tib.uncrunch.line.pack.copyline.align16:
0098 6BAC A808  38         a     tmp4,@edb.next_free.ptr  ; Add length of line
     6BAE A508     
0099               
0100 6BB0 C120  34         mov   @edb.next_free.ptr,tmp0  ; \ Round up to next multiple of 16.
     6BB2 A508     
0101 6BB4 0504  14         neg   tmp0                     ; | tmp0 = tmp0 + (-tmp0 & 15)
0102 6BB6 0244  22         andi  tmp0,15                  ; | Hacker's Delight 2nd Edition
     6BB8 000F     
0103 6BBA A804  38         a     tmp0,@edb.next_free.ptr  ; / Chapter 2
     6BBC A508     
0104                       ;------------------------------------------------------
0105                       ; 6. Restore SAMS page and prepare for exit
0106                       ;------------------------------------------------------
0107               tib.uncrunch.line.pack.prepexit:
0108 6BBE 8820  50         c     @edb.sams.hipage,@edb.sams.page
     6BC0 A51C     
     6BC2 A518     
0109 6BC4 1306  14         jeq   tib.uncrunch.line.pack.exit
0110                                                      ; Exit early if SAMS page already mapped
0111               
0112 6BC6 C120  34         mov   @edb.sams.page,tmp0
     6BC8 A518     
0113 6BCA C160  34         mov   @edb.top.ptr,tmp1
     6BCC A500     
0114 6BCE 06A0  32         bl    @xsams.page.set       ; Set SAMS page
     6BD0 2594     
0115                                                   ; \ i  tmp0 = SAMS page number
0116                                                   ; / i  tmp1 = Memory address
0117                       ;------------------------------------------------------
0118                       ; Exit
0119                       ;------------------------------------------------------
0120               tib.uncrunch.line.pack.exit:
0121 6BD2 C239  30         mov   *stack+,tmp4          ; Pop tmp4
0122 6BD4 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0123 6BD6 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0124 6BD8 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0125 6BDA C139  30         mov   *stack+,tmp0          ; Pop tmp0
0126 6BDC C2F9  30         mov   *stack+,r11           ; Pop R11
0127 6BDE 045B  20         b     *r11                  ; Return to caller
                   < stevie_b7.asm
0092                       ;-----------------------------------------------------------------------
0093                       ; Stubs
0094                       ;-----------------------------------------------------------------------
0095                       copy  "rom.stubs.bank7.asm"        ; Bank specific stubs
     **** ****     > rom.stubs.bank7.asm
0001               * FILE......: rom.stubs.bank7.asm
0002               * Purpose...: Bank 7 stubs for functions in other banks
0003               
0004               
0005               
0006               ***************************************************************
0007               * Stub for "cmdb.dialog.close"
0008               * bank1 vec.18
0009               ********|*****|*********************|**************************
0010               cmdb.dialog.close:
0011 6BE0 0649  14         dect  stack
0012 6BE2 C64B  30         mov   r11,*stack            ; Save return address
0013                       ;------------------------------------------------------
0014                       ; Call function in bank 1
0015                       ;------------------------------------------------------
0016 6BE4 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     6BE6 3038     
0017 6BE8 6002                   data bank1.rom        ; | i  p0 = bank address
0018 6BEA 7F62                   data vec.18           ; | i  p1 = Vector with target address
0019 6BEC 600E                   data bankid           ; / i  p2 = Source ROM bank for return
0020                       ;------------------------------------------------------
0021                       ; Exit
0022                       ;------------------------------------------------------
0023 6BEE C2F9  30         mov   *stack+,r11           ; Pop r11
0024 6BF0 045B  20         b     *r11                  ; Return to caller
0025               
0026               
0027               ***************************************************************
0028               * Stub for "pane.colorscheme.load"
0029               * bank1 vec.31
0030               ********|*****|*********************|**************************
0031               pane.colorscheme.load:
0032 6BF2 0649  14         dect  stack
0033 6BF4 C64B  30         mov   r11,*stack            ; Save return address
0034                       ;------------------------------------------------------
0035                       ; Call function in bank 1
0036                       ;------------------------------------------------------
0037 6BF6 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     6BF8 3038     
0038 6BFA 6002                   data bank1.rom        ; | i  p0 = bank address
0039 6BFC 7F7C                   data vec.31           ; | i  p1 = Vector with target address
0040 6BFE 600E                   data bankid           ; / i  p2 = Source ROM bank for return
0041                       ;------------------------------------------------------
0042                       ; Exit
0043                       ;------------------------------------------------------
0044 6C00 C2F9  30         mov   *stack+,r11           ; Pop r11
0045 6C02 045B  20         b     *r11                  ; Return to caller
0046               
0047               
0048               ***************************************************************
0049               * Stub for "pane.action.colorscheme.statline"
0050               * bank1 vec.32
0051               ********|*****|*********************|**************************
0052               pane.colorscheme.statlines:
0053 6C04 0649  14         dect  stack
0054 6C06 C64B  30         mov   r11,*stack            ; Save return address
0055                       ;------------------------------------------------------
0056                       ; Call function in bank 1
0057                       ;------------------------------------------------------
0058 6C08 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     6C0A 3038     
0059 6C0C 6002                   data bank1.rom        ; | i  p0 = bank address
0060 6C0E 7F7E                   data vec.32           ; | i  p1 = Vector with target address
0061 6C10 600E                   data bankid           ; / i  p2 = Source ROM bank for return
0062                       ;------------------------------------------------------
0063                       ; Exit
0064                       ;------------------------------------------------------
0065 6C12 C2F9  30         mov   *stack+,r11           ; Pop r11
0066 6C14 045B  20         b     *r11                  ; Return to caller
0067               
0068               ***************************************************************
0069               * Stub for "fm.newfile"
0070               * bank2 vec.5
0071               ********|*****|*********************|**************************
0072               fm.newfile:
0073 6C16 0649  14         dect  stack
0074 6C18 C64B  30         mov   r11,*stack            ; Save return address
0075                       ;------------------------------------------------------
0076                       ; Call function in bank 2
0077                       ;------------------------------------------------------
0078 6C1A 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     6C1C 3038     
0079 6C1E 6004                   data bank2.rom        ; | i  p0 = bank address
0080 6C20 7F48                   data vec.5            ; | i  p1 = Vector with target address
0081 6C22 600E                   data bankid           ; / i  p2 = Source ROM bank for return
0082                       ;------------------------------------------------------
0083                       ; Exit
0084                       ;------------------------------------------------------
0085 6C24 C2F9  30         mov   *stack+,r11           ; Pop r11
0086 6C26 045B  20         b     *r11                  ; Return to caller
0087               
0088               
0089               ***************************************************************
0090               * Stub for "tibasic.buildstr"
0091               * bank3 vec.23
0092               ********|*****|*********************|**************************
0093               tibasic.buildstr:
0094 6C28 0649  14         dect  stack
0095 6C2A C64B  30         mov   r11,*stack            ; Save return address
0096                       ;------------------------------------------------------
0097                       ; Call function in bank 3
0098                       ;------------------------------------------------------
0099 6C2C 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     6C2E 3038     
0100 6C30 6006                   data bank3.rom        ; | i  p0 = bank address
0101 6C32 7F6C                   data vec.23           ; | i  p1 = Vector with target address
0102 6C34 600E                   data bankid           ; / i  p2 = Source ROM bank for return
0103                       ;------------------------------------------------------
0104                       ; Exit
0105                       ;------------------------------------------------------
0106 6C36 C2F9  30         mov   *stack+,r11           ; Pop r11
0107 6C38 045B  20         b     *r11                  ; Return to caller
0108               
0109               
0110               ***************************************************************
0111               * Stub for "fb.refresh"
0112               * bank4 vec.8
0113               ********|*****|*********************|**************************
0114               fb.refresh:
0115 6C3A 0649  14         dect  stack
0116 6C3C C64B  30         mov   r11,*stack            ; Save return address
0117                       ;------------------------------------------------------
0118                       ; Call function in bank 4
0119                       ;------------------------------------------------------
0120 6C3E 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     6C40 3038     
0121 6C42 6008                   data bank4.rom        ; | i  p0 = bank address
0122 6C44 7F4E                   data vec.8            ; | i  p1 = Vector with target address
0123 6C46 600E                   data bankid           ; / i  p2 = Source ROM bank for return
0124                       ;------------------------------------------------------
0125                       ; Exit
0126                       ;------------------------------------------------------
0127 6C48 C2F9  30         mov   *stack+,r11           ; Pop r11
0128 6C4A 045B  20         b     *r11                  ; Return to caller
                   < stevie_b7.asm
0096                       copy  "rom.stubs.bankx.asm"        ; Stubs to include in all banks
     **** ****     > rom.stubs.bankx.asm
0001               * FILE......: rom.stubs.bankx.asm
0002               * Purpose...: Stubs to include in all banks (with exceptions)
0003               
0004               
0006               ***************************************************************
0007               * Stub for "mem.sams.setup.stevie"
0008               * Exclude: bank0, bank1
0009               * bank1 vec.1
0010               ********|*****|*********************|**************************
0011               mem.sams.setup.stevie:
0012 6C4C 0649  14         dect  stack
0013 6C4E C64B  30         mov   r11,*stack            ; Save return address
0014                       ;------------------------------------------------------
0015                       ; Call function in bank 1
0016                       ;------------------------------------------------------
0017 6C50 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     6C52 3038     
0018 6C54 6002                   data bank1.rom        ; | i  p0 = bank address
0019 6C56 7F40                   data vec.1            ; | i  p1 = Vector with target address
0020 6C58 600E                   data bankid           ; / i  p2 = Source ROM bank for return
0021                       ;------------------------------------------------------
0022                       ; Exit
0023                       ;------------------------------------------------------
0024 6C5A C2F9  30         mov   *stack+,r11           ; Pop r11
0025 6C5C 045B  20         b     *r11                  ; Return to caller
0027               
0028               
                   < stevie_b7.asm
0097                       ;-----------------------------------------------------------------------
0098                       ; Program data
0099                       ;-----------------------------------------------------------------------
0100                       copy  "data.sams.layout.asm"       ; SAMS bank layout for multi-purpose
     **** ****     > data.sams.layout.asm
0001               * FILE......: data.sams.layout.asm
0002               * Purpose...: SAMS bank layout for Stevie
0003               
0004               
0005               ; Following 32K memory regions are locked with
0006               ; fixed SAMS pages while running Stevie:
0007               ;
0008               ;  ---------------------------------------
0009               ;  >2000-2fff  SAMS page >00      locked
0010               ;  >3000-3fff  SAMS page >01      locked
0011               ;  >a000-afff  SAMS page >04      locked
0012               ;  ---------------------------------------
0013               ;  >b000-bfff  SAMS page >20-3f   variable
0014               ;  >c000-cfff  SAMS page >40-ff   variable
0015               ;  ---------------------------------------
0016               ;  >d000-dfff  SAMS page >05      locked+
0017               ;  >e000-efff  SAMS page >06      locked+
0018               ;  >f000-ffff  SAMS page >07      locked+
0019               ;  ---------------------------------------
0020               ;
0021               ;  1. During index search/reorganization the index temporarily
0022               ;     extends into memory range d000-ffff swapping the
0023               ;     otherwise locked+ pages as required.
0024               ;
0025               ;  2. Only when en external program is running (e.g. TI Basic)
0026               ;     or when terminating Stevie, the legacy page layout table
0027               ;     gets reactivated.
0028               
0029               
0030               
0031               ***************************************************************
0032               * SAMS page layout table
0033               * Stevie boot order
0034               *--------------------------------------------------------------
0035               mem.sams.layout.boot:
0036 6C5E 0200             data  >0200                 ; >2000-2fff, SAMS page >02
0037 6C60 0300             data  >0300                 ; >3000-3fff, SAMS page >03
0038 6C62 0400             data  >0400                 ; >a000-afff, SAMS page >04
0039 6C64 2000             data  >2000                 ; >b000-bfff, SAMS page >20
0040                                                   ; \
0041                                                   ; | Index can allocate
0042                                                   ; | pages >20 to >3f.
0043                                                   ; /
0044 6C66 4000             data  >4000                 ; >c000-cfff, SAMS page >40
0045                                                   ; \
0046                                                   ; | Editor buffer can allocate
0047                                                   ; | pages >40 to >ff.
0048                                                   ; /
0049 6C68 0500             data  >0500                 ; >d000-dfff, SAMS page >05
0050 6C6A 0600             data  >0600                 ; >e000-efff, SAMS page >06
0051 6C6C 0700             data  >0700                 ; >f000-ffff, SAMS page >07
0052               
0053               
0054               ***************************************************************
0055               * SAMS page layout table
0056               * Before running external progam
0057               *--------------------------------------------------------------
0058               mem.sams.layout.external:
0059 6C6E 0200             data  >0200                 ; >2000-2fff, SAMS page >00
0060 6C70 0300             data  >0300                 ; >3000-3fff, SAMS page >01
0061 6C72 0400             data  >0400                 ; >a000-afff, SAMS page >04
0062               
0063 6C74 1000             data  >1000                 ; >b000-efff, SAMS page >10
0064 6C76 1100             data  >1100                 ; \
0065 6C78 1200             data  >1200                 ; | Stevie session
0066 6C7A 1300             data  >1300                 ; | VDP content
0067                                                   ; /
0068 6C7C 0700             data  >0700                 ; >f000-ffff, SAMS page >07
0069               
0070               
0071               ***************************************************************
0072               * SAMS legacy page layout table
0073               * While running external program
0074               *--------------------------------------------------------------
0075               mem.sams.layout.legacy:
0076 6C7E 0200             data  >0200                 ; >2000-2fff, SAMS page >02
0077 6C80 0300             data  >0300                 ; >3000-3fff, SAMS page >03
0078 6C82 0A00             data  >0a00                 ; >a000-afff, SAMS page >0a
0079 6C84 0B00             data  >0b00                 ; >b000-bfff, SAMS page >0b
0080 6C86 0C00             data  >0c00                 ; >c000-cfff, SAMS page >0c
0081 6C88 0D00             data  >0d00                 ; >d000-dfff, SAMS page >0d
0082 6C8A 0E00             data  >0e00                 ; >e000-efff, SAMS page >0e
0083 6C8C 0F00             data  >0f00                 ; >f000-ffff, SAMS page >0f
0084               
0085               
0086               
0087               ***************************************************************
0088               * SAMS page layout table
0089               * Backup TI Basic session 1 VRAM, scratchpad + auxiliary
0090               *--------------------------------------------------------------
0091               mem.sams.layout.basic1:
0092 6C8E 0200             data  >0200                 ; . >2000-2fff
0093 6C90 0300             data  >0300                 ; . >3000-3fff
0094 6C92 0400             data  >0400                 ; . >a000-afff
0095 6C94 FB00             data  >fb00                 ; \ >b000-efff
0096 6C96 FC00             data  >fc00                 ; |
0097 6C98 FD00             data  >fd00                 ; | 16K VDP dump
0098 6C9A FE00             data  >fe00                 ; /
0099 6C9C FF00             data  >ff00                 ; . >f000-ffff
0100               
0101               
0102               ***************************************************************
0103               * SAMS page layout table
0104               * Backup TI Basic session 2 VRAM, scratchpad + auxiliary
0105               *--------------------------------------------------------------
0106               mem.sams.layout.basic2:
0107 6C9E 0200             data  >0200                 ; . >2000-2fff
0108 6CA0 0300             data  >0300                 ; . >3000-3fff
0109 6CA2 0400             data  >0400                 ; . >a000-afff
0110 6CA4 F700             data  >f700                 ; \ >b000-efff
0111 6CA6 F800             data  >f800                 ; |
0112 6CA8 F900             data  >f900                 ; | 16K VDP dump
0113 6CAA FA00             data  >fa00                 ; /
0114 6CAC FF00             data  >ff00                 ; . >f000-ffff
0115               
0116               
0117               ***************************************************************
0118               * SAMS page layout table
0119               * Backup TI Basic session 3 VRAM, scratchpad + auxiliary
0120               *--------------------------------------------------------------
0121               mem.sams.layout.basic3:
0122 6CAE 0200             data  >0200                 ; . >2000-2fff
0123 6CB0 0300             data  >0300                 ; . >3000-3fff
0124 6CB2 0400             data  >0400                 ; . >a000-afff
0125 6CB4 F300             data  >f300                 ; \ >b000-efff
0126 6CB6 F400             data  >f400                 ; |
0127 6CB8 F500             data  >f500                 ; | 16K VDP dump
0128 6CBA F600             data  >f600                 ; /
0129 6CBC FF00             data  >ff00                 ; . >f000-ffff
0130               
0131               
0132               ***************************************************************
0133               * SAMS page layout table
0134               * Backup TI Basic session 4 VRAM, scratchpad + auxiliary
0135               *--------------------------------------------------------------
0136               mem.sams.layout.basic4:
0137 6CBE 0200             data  >0200                 ; . >2000-2fff
0138 6CC0 0300             data  >0300                 ; . >3000-3fff
0139 6CC2 0400             data  >0400                 ; . >a000-afff
0140 6CC4 EF00             data  >ef00                 ; \ >b000-efff
0141 6CC6 F000             data  >f000                 ; |
0142 6CC8 F100             data  >f100                 ; | 16K VDP dump
0143 6CCA F200             data  >f200                 ; /
0144 6CCC FF00             data  >ff00                 ; . >f000-ffff
0145               
0146               
0147               ***************************************************************
0148               * SAMS page layout table
0149               * Backup TI Basic session 5 VRAM, scratchpad + auxiliary
0150               *--------------------------------------------------------------
0151               mem.sams.layout.basic5:
0152 6CCE 0200             data  >0200                 ; . >2000-2fff
0153 6CD0 0300             data  >0300                 ; . >3000-3fff
0154 6CD2 0400             data  >0400                 ; . >a000-afff
0155 6CD4 EB00             data  >eb00                 ; \ >b000-efff
0156 6CD6 EC00             data  >ec00                 ; |
0157 6CD8 ED00             data  >ed00                 ; | 16K VDP dump
0158 6CDA EE00             data  >ee00                 ; /
0159 6CDC FF00             data  >ff00                 ; . >f000-ffff
0160               
0161               
0162      6C8E     mem.sams.layout.basic  equ mem.sams.layout.basic1
                   < stevie_b7.asm
0101                       copy  "data.tib.tokens.asm"        ; TI Basic tokens
     **** ****     > data.tib.tokens.asm
0001               * FILE......: data.tib.tokens.asm
0002               * Purpose...: TI Basic tokens
0003               
0004               
0005               ***************************************************************
0006               *                      TI Basic tokens
0007               ***************************************************************
0008               
0009               ;-----------------------------------------------------------------------
0010               ; Command tokens
0011               ;-----------------------------------------------------------------------
0012 6CDE 0003     tk.00   byte   >00,3,'R','U','N'
     6CE0 5255     
     6CE2 4E       
0013                       even
0014 6CE4 0103     tk.01   byte   >01,3,'N','E','W'
     6CE6 4E45     
     6CE8 57       
0015                       even
0016 6CEA 0203     tk.02   byte   >02,3,'C','O','N'
     6CEC 434F     
     6CEE 4E       
0017                       even
0018 6CF0 0208     tk.02l  byte   >02,8,'C','O','N','T','I','N','U','E'
     6CF2 434F     
     6CF4 4E54     
     6CF6 494E     
     6CF8 5545     
0019                       even
0020 6CFA 0304     tk.03   byte   >03,4,'L','I','S','T'
     6CFC 4C49     
     6CFE 5354     
0021                       even
0022 6D00 0403     tk.04   byte   >04,3,'B','Y','E'
     6D02 4259     
     6D04 45       
0023                       even
0024 6D06 0503     tk.05   byte   >05,3,'N','U','M'
     6D08 4E55     
     6D0A 4D       
0025                       even
0026 6D0C 0506     tk.05l  byte   >05,6,'N','U','M','B','E','R'
     6D0E 4E55     
     6D10 4D42     
     6D12 4552     
0027                       even
0028 6D14 0603     tk.06   byte   >06,3,'O','L','D'
     6D16 4F4C     
     6D18 44       
0029                       even
0030 6D1A 0703     tk.07   byte   >07,3,'R','E','S'
     6D1C 5245     
     6D1E 53       
0031                       even
0032 6D20 070A     tk.07l  byte   >07,10,'R','E','S','E','Q','U','E','N','C','E'
     6D22 5245     
     6D24 5345     
     6D26 5155     
     6D28 454E     
     6D2A 4345     
0033                       even
0034 6D2C 0804     tk.08   byte   >08,4,'S','A','V','E'
     6D2E 5341     
     6D30 5645     
0035                       even
0036 6D32 0904     tk.09   byte   >09,4,'E','D','I','T'
     6D34 4544     
     6D36 4954     
0037                       even
0038               ;-----------------------------------------------------------------------
0039               ; Program tokens
0040               ;-----------------------------------------------------------------------
0041 6D38 8105     tk.81   byte   >81,5,' ','E','L','S','E'
     6D3A 2045     
     6D3C 4C53     
     6D3E 45       
0042                       even
0043 6D40 8402     tk.84   byte   >84,2,'I','F'
     6D42 4946     
0044                       even
0045 6D44 8502     tk.85   byte   >85,2,'G','O'
     6D46 474F     
0046                       even
0047 6D48 8604     tk.86   byte   >86,4,'G','O','T','O'
     6D4A 474F     
     6D4C 544F     
0048                       even
0049 6D4E 8705     tk.87   byte   >87,5,'G','O','S','U','B'
     6D50 474F     
     6D52 5355     
     6D54 42       
0050                       even
0051 6D56 8806     tk.88   byte   >88,6,'R','E','T','U','R','N'
     6D58 5245     
     6D5A 5455     
     6D5C 524E     
0052                       even
0053 6D5E 8903     tk.89   byte   >89,3,'D','E','F'
     6D60 4445     
     6D62 46       
0054                       even
0055 6D64 8A03     tk.8a   byte   >8A,3,'D','I','M'
     6D66 4449     
     6D68 4D       
0056                       even
0057 6D6A 8B03     tk.8b   byte   >8B,3,'E','N','D'
     6D6C 454E     
     6D6E 44       
0058                       even
0059 6D70 8C03     tk.8c   byte   >8C,3,'F','O','R'
     6D72 464F     
     6D74 52       
0060                       even
0061 6D76 8D03     tk.8d   byte   >8D,3,'L','E','T'
     6D78 4C45     
     6D7A 54       
0062                       even
0063 6D7C 8E05     tk.8e   byte   >8E,5,'B','R','E','A','K'
     6D7E 4252     
     6D80 4541     
     6D82 4B       
0064                       even
0065 6D84 8F07     tk.8f   byte   >8F,7,'U','N','B','R','E','A','K'
     6D86 554E     
     6D88 4252     
     6D8A 4541     
     6D8C 4B       
0066                       even
0067 6D8E 9005     tk.90   byte   >90,5,'T','R','A','C','E'
     6D90 5452     
     6D92 4143     
     6D94 45       
0068                       even
0069 6D96 9107     tk.91   byte   >91,7,'U','N','T','R','A','C','E'
     6D98 554E     
     6D9A 5452     
     6D9C 4143     
     6D9E 45       
0070                       even
0071 6DA0 9205     tk.92   byte   >92,5,'I','N','P','U','T'
     6DA2 494E     
     6DA4 5055     
     6DA6 54       
0072                       even
0073 6DA8 9304     tk.93   byte   >93,4,'D','A','T','A'
     6DAA 4441     
     6DAC 5441     
0074                       even
0075 6DAE 9407     tk.94   byte   >94,7,'R','E','S','T','O','R','E'
     6DB0 5245     
     6DB2 5354     
     6DB4 4F52     
     6DB6 45       
0076                       even
0077 6DB8 9509     tk.95   byte   >95,9,'R','A','N','D','O','M','I','Z','E'
     6DBA 5241     
     6DBC 4E44     
     6DBE 4F4D     
     6DC0 495A     
     6DC2 45       
0078                       even
0079 6DC4 9604     tk.96   byte   >96,4,'N','E','X','T'
     6DC6 4E45     
     6DC8 5854     
0080                       even
0081 6DCA 9704     tk.97   byte   >97,4,'R','E','A','D'
     6DCC 5245     
     6DCE 4144     
0082                       even
0083 6DD0 9804     tk.98   byte   >98,4,'S','T','O','P'
     6DD2 5354     
     6DD4 4F50     
0084                       even
0085 6DD6 9906     tk.99   byte   >99,6,'D','E','L','E','T','E'
     6DD8 4445     
     6DDA 4C45     
     6DDC 5445     
0086                       even
0087 6DDE 9A03     tk.9a   byte   >9A,3,'R','E','M'
     6DE0 5245     
     6DE2 4D       
0088                       even
0089 6DE4 9B02     tk.9b   byte   >9B,2,'O','N'
     6DE6 4F4E     
0090                       even
0091 6DE8 9C05     tk.9c   byte   >9C,5,'P','R','I','N','T'
     6DEA 5052     
     6DEC 494E     
     6DEE 54       
0092                       even
0093 6DF0 9D04     tk.9d   byte   >9D,4,'C','A','L','L'
     6DF2 4341     
     6DF4 4C4C     
0094                       even
0095 6DF6 9E06     tk.9e   byte   >9E,6,'O','P','T','I','O','N'
     6DF8 4F50     
     6DFA 5449     
     6DFC 4F4E     
0096                       even
0097 6DFE 9F04     tk.9f   byte   >9F,4,'O','P','E','N'
     6E00 4F50     
     6E02 454E     
0098                       even
0099 6E04 A005     tk.a0   byte   >A0,5,'C','L','O','S','E'
     6E06 434C     
     6E08 4F53     
     6E0A 45       
0100                       even
0101 6E0C A103     tk.a1   byte   >A1,3,'S','U','B'
     6E0E 5355     
     6E10 42       
0102                       even
0103 6E12 A207     tk.a2   byte   >A2,7,'D','I','S','P','L','A','Y'
     6E14 4449     
     6E16 5350     
     6E18 4C41     
     6E1A 59       
0104                       even
0105 6E1C B005     tk.b0   byte   >B0,5,' ','T','H','E','N'
     6E1E 2054     
     6E20 4845     
     6E22 4E       
0106                       even
0107 6E24 B103     tk.b1   byte   >B1,3,' ','T','O'
     6E26 2054     
     6E28 4F       
0108                       even
0109 6E2A B205     tk.b2   byte   >B2,5,' ','S','T','E','P'
     6E2C 2053     
     6E2E 5445     
     6E30 50       
0110                       even
0111 6E32 B301     tk.b3   byte   >B3,1,','
     6E34 2C       
0112                       even
0113 6E36 B401     tk.b4   byte   >B4,1,';'
     6E38 3B       
0114                       even
0115 6E3A B501     tk.b5   byte   >B5,1,':'
     6E3C 3A       
0116                       even
0117 6E3E B601     tk.b6   byte   >B6,1,')'
     6E40 29       
0118                       even
0119 6E42 B701     tk.b7   byte   >B7,1,'('
     6E44 28       
0120                       even
0121 6E46 B801     tk.b8   byte   >B8,1,'&'
     6E48 26       
0122                       even
0123 6E4A BE01     tk.be   byte   >BE,1,'='
     6E4C 3D       
0124                       even
0125 6E4E BF01     tk.bf   byte   >BF,1,'<'
     6E50 3C       
0126                       even
0127 6E52 C001     tk.c0   byte   >C0,1,'>'
     6E54 3E       
0128                       even
0129 6E56 C101     tk.c1   byte   >C1,1,'+'
     6E58 2B       
0130                       even
0131 6E5A C201     tk.c2   byte   >C2,1,'-'
     6E5C 2D       
0132                       even
0133 6E5E C301     tk.c3   byte   >C3,1,'*'
     6E60 2A       
0134                       even
0135 6E62 C401     tk.c4   byte   >C4,1,'/'
     6E64 2F       
0136                       even
0137 6E66 C501     tk.c5   byte   >C5,1,'^'
     6E68 5E       
0138                       even
0139 6E6A C701     tk.c7   byte   >C7,1,34                ; Quote character
     6E6C 22       
0140                       even
0141 6E6E C801     tk.c8   byte   >C8,1,' '
     6E70 20       
0142                       even
0143 6E72 C901     tk.c9   byte   >C9,1,' '
     6E74 20       
0144                       even
0145 6E76 CA03     tk.ca   byte   >CA,3,'E','O','F'
     6E78 454F     
     6E7A 46       
0146                       even
0147 6E7C CB03     tk.cb   byte   >CB,3,'A','B','S'
     6E7E 4142     
     6E80 53       
0148                       even
0149 6E82 CC03     tk.cc   byte   >CC,3,'A','T','N'
     6E84 4154     
     6E86 4E       
0150                       even
0151 6E88 CD03     tk.cd   byte   >CD,3,'C','O','S'
     6E8A 434F     
     6E8C 53       
0152                       even
0153 6E8E CE03     tk.ce   byte   >CE,3,'E','X','P'
     6E90 4558     
     6E92 50       
0154                       even
0155 6E94 CF03     tk.cf   byte   >CF,3,'I','N','T'
     6E96 494E     
     6E98 54       
0156                       even
0157 6E9A D003     tk.d0   byte   >D0,3,'L','O','G'
     6E9C 4C4F     
     6E9E 47       
0158                       even
0159 6EA0 D103     tk.d1   byte   >D1,3,'S','G','N'
     6EA2 5347     
     6EA4 4E       
0160                       even
0161 6EA6 D203     tk.d2   byte   >D2,3,'S','I','N'
     6EA8 5349     
     6EAA 4E       
0162                       even
0163 6EAC D303     tk.d3   byte   >D3,3,'S','Q','R'
     6EAE 5351     
     6EB0 52       
0164                       even
0165 6EB2 D403     tk.d4   byte   >D4,3,'T','A','N'
     6EB4 5441     
     6EB6 4E       
0166                       even
0167 6EB8 D503     tk.d5   byte   >D5,3,'L','E','N'
     6EBA 4C45     
     6EBC 4E       
0168                       even
0169 6EBE D604     tk.d6   byte   >D6,4,'C','H','R','$'
     6EC0 4348     
     6EC2 5224     
0170                       even
0171 6EC4 D703     tk.d7   byte   >D7,3,'R','N','D'
     6EC6 524E     
     6EC8 44       
0172                       even
0173 6ECA D804     tk.d8   byte   >D8,4,'S','E','G','$'
     6ECC 5345     
     6ECE 4724     
0174                       even
0175 6ED0 D903     tk.d9   byte   >D9,3,'P','O','S'
     6ED2 504F     
     6ED4 53       
0176                       even
0177 6ED6 DA03     tk.da   byte   >DA,3,'V','A','L'
     6ED8 5641     
     6EDA 4C       
0178                       even
0179 6EDC DB04     tk.db   byte   >DB,4,'S','T','R','$'
     6EDE 5354     
     6EE0 5224     
0180                       even
0181 6EE2 DC03     tk.dc   byte   >DC,3,'A','S','C'
     6EE4 4153     
     6EE6 43       
0182                       even
0183 6EE8 DE03     tk.de   byte   >DE,3,'R','E','C'
     6EEA 5245     
     6EEC 43       
0184                       even
0185 6EEE F104     tk.f1   byte   >F1,4,'B','A','S','E'
     6EF0 4241     
     6EF2 5345     
0186                       even
0187 6EF4 F308     tk.f3   byte   >F3,8,'V','A','R','I','A','B','L','E'
     6EF6 5641     
     6EF8 5249     
     6EFA 4142     
     6EFC 4C45     
0188                       even
0189 6EFE F408     tk.f4   byte   >F4,8,'R','E','L','A','T','I','V','E'
     6F00 5245     
     6F02 4C41     
     6F04 5449     
     6F06 5645     
0190                       even
0191 6F08 F508     tk.f5   byte   >F5,8,'I','N','T','E','R','N','A','L'
     6F0A 494E     
     6F0C 5445     
     6F0E 524E     
     6F10 414C     
0192                       even
0193 6F12 F60A     tk.f6   byte   >F6,10,'S','E','Q','U','E','N','T','I','A','L'
     6F14 5345     
     6F16 5155     
     6F18 454E     
     6F1A 5449     
     6F1C 414C     
0194                       even
0195 6F1E F706     tk.f7   byte   >F7,6,'O','U','T','P','U','T'
     6F20 4F55     
     6F22 5450     
     6F24 5554     
0196                       even
0197 6F26 F806     tk.f8   byte   >F8,6,'U','P','D','A','T','E'
     6F28 5550     
     6F2A 4441     
     6F2C 5445     
0198                       even
0199 6F2E F906     tk.f9   byte   >F9,6,'A','P','P','E','N','D'
     6F30 4150     
     6F32 5045     
     6F34 4E44     
0200                       even
0201 6F36 FA06     tk.fa   byte   >FA,6,'F','I','X','E','D',' '
     6F38 4649     
     6F3A 5845     
     6F3C 4420     
0202                       even
0203 6F3E FB09     tk.fb   byte   >FB,9,'P','E','R','M','A','N','E','N','T'
     6F40 5045     
     6F42 524D     
     6F44 414E     
     6F46 454E     
     6F48 54       
0204                       even
0205 6F4A FC03     tk.fc   byte   >FC,3,'T','A','B'
     6F4C 5441     
     6F4E 42       
0206                       even
0207 6F50 FD01     tk.fd   byte   >FD,1,'#'
     6F52 23       
0208                       even
0209 6F54 FF01     tk.noop byte   >FF,1,'?'
     6F56 3F       
0210                       even
0211               ;-----------------------------------------------------------------------
0212               ; Token index command mode
0213               ;-----------------------------------------------------------------------
0214 6F58 6CDE     tki.00  data   tk.00               ; RUN
0215 6F5A 6CE4     tki.01  data   tk.01               ; NEW
0216 6F5C 6CEA     tki.02  data   tk.02               ; CON
0217 6F5E 6CF0     tki.02l data   tk.02l              ; CONTINUE
0218 6F60 6CFA     tki.03  data   tk.03               ; LIST
0219 6F62 6D00     tki.04  data   tk.04               ; BYE
0220 6F64 6D06     tki.05  data   tk.05               ; NUM
0221 6F66 6D0C     tki.05l data   tk.05l              ; NUMBER
0222 6F68 6D14     tki.06  data   tk.06               ; OLD
0223 6F6A 6D1A     tki.07  data   tk.07               ; RES
0224 6F6C 6D20     tki.07l data   tk.07l              ; RESEQUENCE
0225 6F6E 6D2C     tki.08  data   tk.08               ; SAVE
0226 6F70 6D32     tki.09  data   tk.09               ; EDIT
0227               ;-----------------------------------------------------------------------
0228               ; Token index program statement
0229               ;-----------------------------------------------------------------------
0230 6F72 6F54     tki.80  data   tk.noop             ;
0231 6F74 6D38     tki.81  data   tk.81               ; ELSE
0232 6F76 6F54     tki.82  data   tk.noop             ;
0233 6F78 6F54     tki.83  data   tk.noop             ;
0234 6F7A 6D40     tki.84  data   tk.84               ; IF
0235 6F7C 6D44     tki.85  data   tk.85               ; GO
0236 6F7E 6D48     tki.86  data   tk.86               ; GOTO
0237 6F80 6D4E     tki.87  data   tk.87               ; GOSUB
0238 6F82 6D56     tki.88  data   tk.88               ; RETURN
0239 6F84 6D5E     tki.89  data   tk.89               ; DEF
0240 6F86 6D64     tki.8a  data   tk.8a               ; DIM
0241 6F88 6D6A     tki.8b  data   tk.8b               ; END
0242 6F8A 6D70     tki.8c  data   tk.8c               ; FOR
0243 6F8C 6D76     tki.8d  data   tk.8d               ; LET
0244 6F8E 6D7C     tki.8e  data   tk.8e               ; BREAK
0245 6F90 6D84     tki.8f  data   tk.8f               ; UNBREAK
0246 6F92 6D8E     tki.90  data   tk.90               ; TRACE
0247 6F94 6D96     tki.91  data   tk.91               ; UNTRACE
0248 6F96 6DA0     tki.92  data   tk.92               ; INPUT
0249 6F98 6DA8     tki.93  data   tk.93               ; DATA
0250 6F9A 6DAE     tki.94  data   tk.94               ; RESTORE
0251 6F9C 6DB8     tki.95  data   tk.95               ; RANDOMIZE
0252 6F9E 6DC4     tki.96  data   tk.96               ; NEXT
0253 6FA0 6DCA     tki.97  data   tk.97               ; READ
0254 6FA2 6DD0     tki.98  data   tk.98               ; STOP
0255 6FA4 6DD6     tki.99  data   tk.99               ; DELETE
0256 6FA6 6DDE     tki.9a  data   tk.9a               ; REM
0257 6FA8 6DE4     tki.9b  data   tk.9b               ; ON
0258 6FAA 6DE8     tki.9c  data   tk.9c               ; PRINT
0259 6FAC 6DF0     tki.9d  data   tk.9d               ; CALL
0260 6FAE 6DF6     tki.9e  data   tk.9e               ; OPTION
0261 6FB0 6DFE     tki.9f  data   tk.9f               ; OPEN
0262 6FB2 6E04     tki.a0  data   tk.a0               ; CLOSE
0263 6FB4 6E0C     tki.a1  data   tk.a1               ; SUB
0264 6FB6 6E12     tki.a2  data   tk.a2               ; DISPLAY
0265 6FB8 6F54     tki.a3  data   tk.noop             ;
0266 6FBA 6F54     tki.a4  data   tk.noop             ;
0267 6FBC 6F54     tki.a5  data   tk.noop             ;
0268 6FBE 6F54     tki.a6  data   tk.noop             ;
0269 6FC0 6F54     tki.a7  data   tk.noop             ;
0270 6FC2 6F54     tki.a8  data   tk.noop             ;
0271 6FC4 6F54     tki.a9  data   tk.noop             ;
0272 6FC6 6F54     tki.aa  data   tk.noop             ;
0273 6FC8 6F54     tki.ab  data   tk.noop             ;
0274 6FCA 6F54     tki.ac  data   tk.noop             ;
0275 6FCC 6F54     tki.ad  data   tk.noop             ;
0276 6FCE 6F54     tki.ae  data   tk.noop             ;
0277 6FD0 6F54     tki.af  data   tk.noop             ;
0278 6FD2 6E1C     tki.b0  data   tk.b0               ; THEN
0279 6FD4 6E24     tki.b1  data   tk.b1               ; TO
0280 6FD6 6E2A     tki.b2  data   tk.b2               ; STEP
0281 6FD8 6E32     tki.b3  data   tk.b3               ; ,
0282 6FDA 6E36     tki.b4  data   tk.b4               ; ;
0283 6FDC 6E3A     tki.b5  data   tk.b5               ; :
0284 6FDE 6E3E     tki.b6  data   tk.b6               ; )
0285 6FE0 6E42     tki.b7  data   tk.b7               ; (
0286 6FE2 6E46     tki.b8  data   tk.b8               ; &
0287 6FE4 6F54     tki.b9  data   tk.noop             ;
0288 6FE6 6F54     tki.ba  data   tk.noop             ;
0289 6FE8 6F54     tki.bb  data   tk.noop             ;
0290 6FEA 6F54     tki.bc  data   tk.noop             ;
0291 6FEC 6F54     tki.bd  data   tk.noop             ;
0292 6FEE 6E4A     tki.be  data   tk.be               ; =
0293 6FF0 6E4E     tki.bf  data   tk.bf               ; <
0294 6FF2 6E52     tki.c0  data   tk.c0               ; >
0295 6FF4 6E56     tki.c1  data   tk.c1               ; +
0296 6FF6 6E5A     tki.c2  data   tk.c2               ; -
0297 6FF8 6E5E     tki.c3  data   tk.c3               ; *
0298 6FFA 6E62     tki.c4  data   tk.c4               ; /
0299 6FFC 6E66     tki.c5  data   tk.c5               ; ^
0300 6FFE 6F54     tki.c6  data   tk.noop             ;
0301 7000 6E6A     tki.c7  data   tk.c7               ; Quoted string
0302 7002 6E6E     tki.c8  data   tk.c8               ; Unquoted string
0303 7004 6E72     tki.c9  data   tk.c9               ; Line number
0304 7006 6E76     tki.ca  data   tk.ca               ; EOF
0305 7008 6E7C     tki.cb  data   tk.cb               ; ABS
0306 700A 6E82     tki.cc  data   tk.cc               ; ATN
0307 700C 6E88     tki.cd  data   tk.cd               ; COS
0308 700E 6E8E     tki.ce  data   tk.ce               ; EXP
0309 7010 6E94     tki.cf  data   tk.cf               ; INT
0310 7012 6E9A     tki.d0  data   tk.d0               ; LOG
0311 7014 6EA0     tki.d1  data   tk.d1               ; SGN
0312 7016 6EA6     tki.d2  data   tk.d2               ; SIN
0313 7018 6EAC     tki.d3  data   tk.d3               ; SQR
0314 701A 6EB2     tki.d4  data   tk.d4               ; TAN
0315 701C 6EB8     tki.d5  data   tk.d5               ; LEN
0316 701E 6EBE     tki.d6  data   tk.d6               ; CHAR$
0317 7020 6EC4     tki.d7  data   tk.d7               ; RND
0318 7022 6ECA     tki.d8  data   tk.d8               ; SEG$
0319 7024 6ED0     tki.d9  data   tk.d9               ; POS
0320 7026 6ED6     tki.da  data   tk.da               ; VAL
0321 7028 6EDC     tki.db  data   tk.db               ; STR$
0322 702A 6EE2     tki.dc  data   tk.dc               ; ASC
0323 702C 6F54     tki.dd  data   tk.noop             ;
0324 702E 6EE8     tki.de  data   tk.de               ; REC
0325 7030 6F54     tki.df  data   tk.noop             ;
0326 7032 6F54     tki.e0  data   tk.noop             ;
0327 7034 6F54     tki.e1  data   tk.noop             ;
0328 7036 6F54     tki.e2  data   tk.noop             ;
0329 7038 6F54     tki.e3  data   tk.noop             ;
0330 703A 6F54     tki.e4  data   tk.noop             ;
0331 703C 6F54     tki.e5  data   tk.noop             ;
0332 703E 6F54     tki.e6  data   tk.noop             ;
0333 7040 6F54     tki.e7  data   tk.noop             ;
0334 7042 6F54     tki.e8  data   tk.noop             ;
0335 7044 6F54     tki.e9  data   tk.noop             ;
0336 7046 6F54     tki.ea  data   tk.noop             ;
0337 7048 6F54     tki.eb  data   tk.noop             ;
0338 704A 6F54     tki.ec  data   tk.noop             ;
0339 704C 6F54     tki.ed  data   tk.noop             ;
0340 704E 6F54     tki.ee  data   tk.noop             ;
0341 7050 6F54     tki.ef  data   tk.noop             ;
0342 7052 6F54     tki.f0  data   tk.noop             ;
0343 7054 6EEE     tki.f1  data   tk.f1               ; BASE
0344 7056 6F54     tki.f2  data   tk.noop             ;
0345 7058 6EF4     tki.f3  data   tk.f3               ; VARIABLE
0346 705A 6EFE     tki.f4  data   tk.f4               ; RELATIVE
0347 705C 6F08     tki.f5  data   tk.f5               ; INTERNAL
0348 705E 6F12     tki.f6  data   tk.f6               ; SEQUENTIAL
0349 7060 6F1E     tki.f7  data   tk.f7               ; OUTPUT
0350 7062 6F26     tki.f8  data   tk.f8               ; UPDATE
0351 7064 6F2E     tki.f9  data   tk.f9               ; APPEND
0352 7066 6F36     tki.fa  data   tk.fa               ; FIXED
0353 7068 6F3E     tki.fb  data   tk.fb               ; PERMANENT
0354 706A 6F4A     tki.fc  data   tk.fc               ; TAB
0355 706C 6F50     tki.fd  data   tk.fd               ; #
0356 706E 6F54     tki.fe  data   tk.noop             ;
0357 7070 6F54     tki.ff  data   tk.noop             ; <NOOP>
0358               
0359      6F72     tib.tokenindex equ tki.80
                   < stevie_b7.asm
0102                       ;-----------------------------------------------------------------------
0103                       ; Scratchpad memory dump
0104                       ;-----------------------------------------------------------------------
0105                       aorg >7e00
0106                       copy  "data.scrpad.asm"            ; Required for TI Basic
     **** ****     > data.scrpad.asm
0001               * FILE......: data.scrpad.asm
0002               * Purpose...: Stevie Editor - data segment (scratchpad dump)
0003               
0004               ***************************************************************
0005               *    TI MONITOR scratchpad dump on cartridge menu screen
0006               ***************************************************************
0007               
0008               scrpad.monitor:
0009                       ;-------------------------------------------------------
0010                       ; Scratchpad TI monitor on cartridge selection screen
0011                       ;-------------------------------------------------------
0012 7E00 0000             byte  >00,>00,>21,>4D,>00,>00,>00,>00    ; >8300 - >8307
     7E02 214D     
     7E04 0000     
     7E06 0000     
0013 7E08 0000             byte  >00,>00,>00,>00,>00,>00,>00,>00    ; >8308 - >830f
     7E0A 0000     
     7E0C 0000     
     7E0E 0000     
0014 7E10 0000             byte  >00,>00,>00,>00,>00,>00,>00,>00    ; >8310 - >8317
     7E12 0000     
     7E14 0000     
     7E16 0000     
0015 7E18 0000             byte  >00,>00,>00,>00,>00,>00,>00,>00    ; >8318 - >831f
     7E1A 0000     
     7E1C 0000     
     7E1E 0000     
0016 7E20 0000             byte  >00,>00,>00,>00,>00,>00,>00,>00    ; >8320 - >8327
     7E22 0000     
     7E24 0000     
     7E26 0000     
0017 7E28 0000             byte  >00,>00,>00,>00,>00,>00,>00,>00    ; >8328 - >832f
     7E2A 0000     
     7E2C 0000     
     7E2E 0000     
0018 7E30 0000             byte  >00,>00,>00,>00,>00,>00,>00,>00    ; >8330 - >8337
     7E32 0000     
     7E34 0000     
     7E36 0000     
0019 7E38 0000             byte  >00,>00,>00,>00,>00,>00,>00,>00    ; >8338 - >833f
     7E3A 0000     
     7E3C 0000     
     7E3E 0000     
0020 7E40 0000             byte  >00,>00,>60,>13,>00,>00,>00,>00    ; >8340 - >8347
     7E42 6013     
     7E44 0000     
     7E46 0000     
0021 7E48 0000             byte  >00,>00,>00,>00,>00,>00,>00,>00    ; >8348 - >834f
     7E4A 0000     
     7E4C 0000     
     7E4E 0000     
0022 7E50 0000             byte  >00,>00,>01,>24,>00,>00,>00,>00    ; >8350 - >8357
     7E52 0124     
     7E54 0000     
     7E56 0000     
0023 7E58 311E             byte  >31,>1E,>00,>00,>00,>00,>00,>08    ; >8358 - >835f
     7E5A 0000     
     7E5C 0000     
     7E5E 0008     
0024 7E60 0000             byte  >00,>00,>00,>00,>00,>00,>00,>00    ; >8360 - >8367
     7E62 0000     
     7E64 0000     
     7E66 0000     
0025 7E68 0000             byte  >00,>00,>21,>52,>01,>06,>00,>00    ; >8368 - >836f
     7E6A 2152     
     7E6C 0106     
     7E6E 0000     
0026 7E70 37D7             byte  >37,>D7,>FE,>7E,>00,>FF,>00,>00    ; >8370 - >8377
     7E72 FE7E     
     7E74 00FF     
     7E76 0000     
0027 7E78 52D2             byte  >52,>D2,>00,>E4,>00,>00,>05,>09    ; >8378 - >837f
     7E7A 00E4     
     7E7C 0000     
     7E7E 0509     
0028 7E80 02FA             byte  >02,>FA,>03,>85,>00,>00,>00,>00    ; >8380 - >8387
     7E82 0385     
     7E84 0000     
     7E86 0000     
0029 7E88 0000             byte  >00,>00,>00,>00,>00,>00,>00,>00    ; >8388 - >838f
     7E8A 0000     
     7E8C 0000     
     7E8E 0000     
0030 7E90 0000             byte  >00,>00,>00,>00,>00,>00,>00,>00    ; >8390 - >8397
     7E92 0000     
     7E94 0000     
     7E96 0000     
0031 7E98 0000             byte  >00,>00,>00,>00,>00,>00,>00,>00    ; >8398 - >839f
     7E9A 0000     
     7E9C 0000     
     7E9E 0000     
0032 7EA0 0000             byte  >00,>00,>00,>00,>00,>00,>00,>00    ; >83A0 - >83a7
     7EA2 0000     
     7EA4 0000     
     7EA6 0000     
0033 7EA8 0000             byte  >00,>00,>00,>00,>00,>00,>00,>00    ; >83A8 - >83af
     7EAA 0000     
     7EAC 0000     
     7EAE 0000     
0034 7EB0 0000             byte  >00,>00,>00,>00,>00,>00,>00,>00    ; >83B0 - >83b7
     7EB2 0000     
     7EB4 0000     
     7EB6 0000     
0035 7EB8 0000             byte  >00,>00,>00,>00,>00,>00,>00,>00    ; >83B8 - >83bf
     7EBA 0000     
     7EBC 0000     
     7EBE 0000     
0036 7EC0 5209             byte  >52,>09,>00,>00,>00,>00,>00,>00    ; >83C0 - >83c7
     7EC2 0000     
     7EC4 0000     
     7EC6 0000     
0037 7EC8 FFFF             byte  >FF,>FF,>FF,>00,>04,>84,>00,>00    ; >83C8 - >83cf
     7ECA FF00     
     7ECC 0484     
     7ECE 0000     
0038 7ED0 9804             byte  >98,>04,>E0,>00,>E0,>d5,>0A,>A6    ; >83D0 - >83d7
     7ED2 E000     
     7ED4 E0D5     
     7ED6 0AA6     
0039 7ED8 0070             byte  >00,>70,>83,>E0,>00,>74,>D0,>02    ; >83D8 - >83df
     7EDA 83E0     
     7EDC 0074     
     7EDE D002     
0040 7EE0 FFFF             byte  >FF,>FF,>FF,>FF,>00,>00,>04,>84    ; >83E0 - >83e7
     7EE2 FFFF     
     7EE4 0000     
     7EE6 0484     
0041 7EE8 0080             byte  >00,>80,>00,>00,>00,>00,>00,>00    ; >83E8 - >83ef
     7EEA 0000     
     7EEC 0000     
     7EEE 0000     
0042 7EF0 0000             byte  >00,>00,>00,>06,>05,>20,>04,>80    ; >83F0 - >83f7
     7EF2 0006     
     7EF4 0520     
     7EF6 0480     
0043 7EF8 0006             byte  >00,>06,>98,>00,>01,>08,>8C,>02    ; >83F8 - >83ff
     7EFA 9800     
     7EFC 0108     
     7EFE 8C02     
                   < stevie_b7.asm
0107                       ;-----------------------------------------------------------------------
0108                       ; Bank full check
0109                       ;-----------------------------------------------------------------------
0113                       ;-----------------------------------------------------------------------
0114                       ; Show ROM bank in CPU crash screen
0115                       ;-----------------------------------------------------------------------
0116                       copy  "rom.crash.asm"
     **** ****     > rom.crash.asm
0001               * FILE......: rom.crash.asm
0002               * Purpose...: Show ROM bank number on CPU crash
0003               
0004               ***************************************************************
0005               * Show ROM bank number on CPU crash
0006               ********|*****|*********************|**************************
0007               cpu.crash.showbank:
0008                       aorg  bankx.crash.showbank
0009 7F00 06A0  32         bl    @putat
     7F02 2442     
0010 7F04 0314                   byte 3,20
0011 7F06 7F38                   data cpu.crash.showbank.bankstr
0012 7F08 10FF  14         jmp   $
                   < stevie_b7.asm
0117                       ;-----------------------------------------------------------------------
0118                       ; Table for VDP modes
0119                       ;-----------------------------------------------------------------------
0120                       copy  "data.vdpmodes.asm"   ; Table for VDP modes
     **** ****     > data.vdpmodes.asm
0001               * FILE......: data.vdp.modes.asm
0002               * Purpose...: VDP modes tables
0003               
0004                           aorg bankx.vdptab
0005               
0006               ; ====================================================================
0007               ; Keep the tables in sequence, or change offsets in equ.f18a.*.asm
0008               ; ====================================================================
0009               
0010               ***************************************************************
0011               * Textmode (80 columns, 30 rows) - F18A
0012               *--------------------------------------------------------------
0013               *
0014               * ; VDP#0 Control bits
0015               * ;      bit 6=0: M3 | Graphics 1 mode
0016               * ;      bit 7=0: Disable external VDP input
0017               * ; VDP#1 Control bits
0018               * ;      bit 0=1: 16K selection
0019               * ;      bit 1=1: Enable display
0020               * ;      bit 2=1: Enable VDP interrupt
0021               * ;      bit 3=1: M1 \ TEXT MODE
0022               * ;      bit 4=0: M2 /
0023               * ;      bit 5=0: reserved
0024               * ;      bit 6=0: 8x8 sprites
0025               * ;      bit 7=0: Sprite magnification (1x)
0026               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >960)
0027               * ; VDP#3 PCT (Pattern color table)      at >0FC0  (>3F * >040)
0028               * ; VDP#4 PDT (Pattern descriptor table) at >1000  (>02 * >800)
0029               * ; VDP#5 SAT (sprite attribute list)    at >2180  (>43 * >080)
0030               * ; VDP#6 SPT (Sprite pattern table)     at >2800  (>05 * >800)
0031               * ; VDP#7 Set foreground/background color
0032               ***************************************************************
0033               stevie.80x30:
0034 7F10 04F0             byte  >04,>f0,>00,>3f,>02,>43,>05,SPFCLR,0,80
     7F12 003F     
     7F14 0243     
     7F16 05F4     
     7F18 0050     
0035               
0036               
0037               ***************************************************************
0038               * Textmode (80 columns, 60 rows) - F18A
0039               *--------------------------------------------------------------
0040               *
0041               * ; VDP#0 Control bits
0042               * ;      bit 6=0: M3 | Graphics 1 mode
0043               * ;      bit 7=0: Disable external VDP input
0044               * ; VDP#1 Control bits
0045               * ;      bit 0=1: 16K selection
0046               * ;      bit 1=1: Enable display
0047               * ;      bit 2=1: Enable VDP interrupt
0048               * ;      bit 3=1: M1 \ TEXT MODE
0049               * ;      bit 4=0: M2 /
0050               * ;      bit 5=0: reserved
0051               * ;      bit 6=0: 8x8 sprites
0052               * ;      bit 7=0: Sprite magnification (1x)
0053               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >12c0)
0054               * ; VDP#3 PCT (Pattern color table)      at >0FC0  (>3F * >040) - not used!
0055               * ; VDP#4 PDT (Pattern descriptor table) at >3000  (>06 * >800)
0056               * ; VDP#5 SAT (sprite attribute list)    at >3A00  (>74 * >080)
0057               * ; VDP#6 SPT (Sprite pattern table)     at >3800  (>07 * >800)
0058               * ; VDP#7 Set foreground/background color
0059               ***************************************************************
0060               stevie.80x60:
0061 7F1A 04F0             byte  >04,>f0,>00,>3f,>06,>74,>07,SPFCLR,0,80
     7F1C 003F     
     7F1E 0674     
     7F20 07F4     
     7F22 0050     
0062               
0063               
0064               
0065               ***************************************************************
0066               * TI Basic mode (32 columns/24 rows)
0067               *--------------------------------------------------------------
0068               tibasic.32x24:
0069 7F24 00E2             byte  >00,>e2,>00,>0c,>00,>06,>00,>07,0,32
     7F26 000C     
     7F28 0006     
     7F2A 0007     
     7F2C 0020     
0070               *
0071               * ; VDP#0 Control bits
0072               * ;      bit 6=0: M3 | Graphics 1 mode
0073               * ;      bit 7=0: Disable external VDP input
0074               * ; VDP#1 Control bits
0075               * ;      bit 0=1: 16K selection
0076               * ;      bit 1=1: Enable display
0077               * ;      bit 2=1: Enable VDP interrupt
0078               * ;      bit 3=0: M1 \ Graphics 1 mode
0079               * ;      bit 4=0: M2 /
0080               * ;      bit 5=0: reserved
0081               * ;      bit 6=1: 16x16 sprites
0082               * ;      bit 7=0: Sprite magnification (1x)
0083               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0084               * ; VDP#3 PCT (Pattern color table)      at >0300  (>0C * >040)
0085               * ; VDP#4 PDT (Pattern descriptor table) at >0000  (>00 * >800)
0086               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0087               * ; VDP#6 SPT (Sprite pattern table)     at >0000  (>00 * >800)
0088               * ; VDP#7 Set screen background color
0089               
0090               
0091               
0092               
0093               
0094               
0095               ***************************************************************
0096               * TI Basic mode (32 columns/30 rows) - F18A
0097               *--------------------------------------------------------------
0098               tibasic.32x30:
0099 7F2E 00E2             byte  >00,>e2,>00,>0c,>00,>06,>00,>07,0,32
     7F30 000C     
     7F32 0006     
     7F34 0007     
     7F36 0020     
0100               *
0101               * ; VDP#0 Control bits
0102               * ;      bit 6=0: M3 | Graphics 1 mode
0103               * ;      bit 7=0: Disable external VDP input
0104               * ; VDP#1 Control bits
0105               * ;      bit 0=1: 16K selection
0106               * ;      bit 1=1: Enable display
0107               * ;      bit 2=1: Enable VDP interrupt
0108               * ;      bit 3=0: M1 \ Graphics 1 mode
0109               * ;      bit 4=0: M2 /
0110               * ;      bit 5=0: reserved
0111               * ;      bit 6=1: 16x16 sprites
0112               * ;      bit 7=0: Sprite magnification (1x)
0113               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0114               * ; VDP#3 PCT (Pattern color table)      at >0300  (>0C * >040)
0115               * ; VDP#4 PDT (Pattern descriptor table) at >0000  (>00 * >800)
0116               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0117               * ; VDP#6 SPT (Sprite pattern table)     at >0000  (>00 * >800)
0118               * ; VDP#7 Set screen background color
0119               * ;
0120               * ; The table by itself is not sufficient for turning on 30 rows
0121               * ; mode. You also need to unlock the F18a and set VR49 (>31) to
0122               * ; value >40.
                   < stevie_b7.asm
0121                       ;-----------------------------------------------------------------------
0122                       ; Vector table
0123                       ;-----------------------------------------------------------------------
0124                       copy  "rom.vectors.bank7.asm"    ; Vector table bank 7
     **** ****     > rom.vectors.bank7.asm
0001               * FILE......: rom.vectors.bank7.asm
0002               * Purpose...: Bank 7 vectors for trampoline function
0003               
0004               *--------------------------------------------------------------
0005               * ROM identification string for CPU crash
0006               *--------------------------------------------------------------
0007               cpu.crash.showbank.bankstr:
0008 7F38 0552             stri 'ROM#7'
     7F3A 4F4D     
     7F3C 2337     
0009               
0010               *--------------------------------------------------------------
0011               * ROM 7: Vectors 1-32
0012               *--------------------------------------------------------------
0013                       aorg  bankx.vectab
0014 7F40 60CC     vec.1   data  mem.sams.set.legacy   ;
0015 7F42 6104     vec.2   data  mem.sams.set.boot     ;
0016 7F44 6142     vec.3   data  mem.sams.set.stevie   ;
0017 7F46 610A     vec.4   data  mem.sams.set.external ;
0018 7F48 6110     vec.5   data  mem.sams.set.basic1   ;
0019 7F4A 611A     vec.6   data  mem.sams.set.basic2   ;
0020 7F4C 6124     vec.7   data  mem.sams.set.basic3   ;
0021 7F4E 612E     vec.8   data  mem.sams.set.basic4   ;
0022 7F50 6138     vec.9   data  mem.sams.set.basic5   ;
0023 7F52 61CA     vec.10  data  tib.run               ;
0024 7F54 66CA     vec.11  data  tib.uncrunch          ;
0025 7F56 2026     vec.12  data  cpu.crash             ;
0026 7F58 2026     vec.13  data  cpu.crash             ;
0027 7F5A 2026     vec.14  data  cpu.crash             ;
0028 7F5C 2026     vec.15  data  cpu.crash             ;
0029 7F5E 2026     vec.16  data  cpu.crash             ;
0030 7F60 2026     vec.17  data  cpu.crash             ;
0031 7F62 2026     vec.18  data  cpu.crash             ;
0032 7F64 2026     vec.19  data  cpu.crash             ;
0033 7F66 604A     vec.20  data  magic.set             ;
0034 7F68 6064     vec.21  data  magic.clear           ;
0035 7F6A 6078     vec.22  data  magic.check           ;
0036 7F6C 61A0     vec.23  data  tv.reset              ;
0037 7F6E 2026     vec.24  data  cpu.crash             ;
0038 7F70 2026     vec.25  data  cpu.crash             ;
0039 7F72 2026     vec.26  data  cpu.crash             ;
0040 7F74 2026     vec.27  data  cpu.crash             ;
0041 7F76 2026     vec.28  data  cpu.crash             ;
0042 7F78 2026     vec.29  data  cpu.crash             ;
0043 7F7A 2026     vec.30  data  cpu.crash             ;
0044 7F7C 2026     vec.31  data  cpu.crash             ;
0045 7F7E 2026     vec.32  data  cpu.crash             ;
0046               *--------------------------------------------------------------
0047               * ROM 7: Vectors 33-64
0048               *--------------------------------------------------------------
0049 7F80 2026     vec.33  data  cpu.crash             ;
0050 7F82 2026     vec.34  data  cpu.crash             ;
0051 7F84 2026     vec.35  data  cpu.crash             ;
0052 7F86 2026     vec.36  data  cpu.crash             ;
0053 7F88 2026     vec.37  data  cpu.crash             ;
0054 7F8A 2026     vec.38  data  cpu.crash             ;
0055 7F8C 2026     vec.39  data  cpu.crash             ;
0056 7F8E 2026     vec.40  data  cpu.crash             ;
0057 7F90 2026     vec.41  data  cpu.crash             ;
0058 7F92 2026     vec.42  data  cpu.crash             ;
0059 7F94 2026     vec.43  data  cpu.crash             ;
0060 7F96 2026     vec.44  data  cpu.crash             ;
0061 7F98 2026     vec.45  data  cpu.crash             ;
0062 7F9A 2026     vec.46  data  cpu.crash             ;
0063 7F9C 2026     vec.47  data  cpu.crash             ;
0064 7F9E 2026     vec.48  data  cpu.crash             ;
0065 7FA0 2026     vec.49  data  cpu.crash             ;
0066 7FA2 2026     vec.50  data  cpu.crash             ;
0067 7FA4 2026     vec.51  data  cpu.crash             ;
0068 7FA6 2026     vec.52  data  cpu.crash             ;
0069 7FA8 2026     vec.53  data  cpu.crash             ;
0070 7FAA 2026     vec.54  data  cpu.crash             ;
0071 7FAC 2026     vec.55  data  cpu.crash             ;
0072 7FAE 2026     vec.56  data  cpu.crash             ;
0073 7FB0 2026     vec.57  data  cpu.crash             ;
0074 7FB2 2026     vec.58  data  cpu.crash             ;
0075 7FB4 2026     vec.59  data  cpu.crash             ;
0076 7FB6 2026     vec.60  data  cpu.crash             ;
0077 7FB8 2026     vec.61  data  cpu.crash             ;
0078 7FBA 2026     vec.62  data  cpu.crash             ;
0079 7FBC 2026     vec.63  data  cpu.crash             ;
0080 7FBE 2026     vec.64  data  cpu.crash             ;
0081               *--------------------------------------------------------------
0082               * ROM 7: Vectors 65-96
0083               *--------------------------------------------------------------
0084 7FC0 2026     vec.65  data  cpu.crash             ;
0085 7FC2 2026     vec.66  data  cpu.crash             ;
0086 7FC4 2026     vec.67  data  cpu.crash             ;
0087 7FC6 2026     vec.68  data  cpu.crash             ;
0088 7FC8 2026     vec.69  data  cpu.crash             ;
0089 7FCA 2026     vec.70  data  cpu.crash             ;
0090 7FCC 2026     vec.71  data  cpu.crash             ;
0091 7FCE 2026     vec.72  data  cpu.crash             ;
0092 7FD0 2026     vec.73  data  cpu.crash             ;
0093 7FD2 2026     vec.74  data  cpu.crash             ;
0094 7FD4 2026     vec.75  data  cpu.crash             ;
0095 7FD6 2026     vec.76  data  cpu.crash             ;
0096 7FD8 2026     vec.77  data  cpu.crash             ;
0097 7FDA 2026     vec.78  data  cpu.crash             ;
0098 7FDC 2026     vec.79  data  cpu.crash             ;
0099 7FDE 2026     vec.80  data  cpu.crash             ;
0100 7FE0 2026     vec.81  data  cpu.crash             ;
0101 7FE2 2026     vec.82  data  cpu.crash             ;
0102 7FE4 2026     vec.83  data  cpu.crash             ;
0103 7FE6 2026     vec.84  data  cpu.crash             ;
0104 7FE8 2026     vec.85  data  cpu.crash             ;
0105 7FEA 2026     vec.86  data  cpu.crash             ;
0106 7FEC 2026     vec.87  data  cpu.crash             ;
0107 7FEE 2026     vec.88  data  cpu.crash             ;
0108 7FF0 2026     vec.89  data  cpu.crash             ;
0109 7FF2 2026     vec.90  data  cpu.crash             ;
0110 7FF4 2026     vec.91  data  cpu.crash             ;
0111 7FF6 2026     vec.92  data  cpu.crash             ;
0112 7FF8 2026     vec.93  data  cpu.crash             ;
0113 7FFA 2026     vec.94  data  cpu.crash             ;
0114 7FFC 2026     vec.95  data  cpu.crash             ;
0115 7FFE 2026     vec.96  data  cpu.crash             ;
                   < stevie_b7.asm

    ANYKEY.............. >200A :     
    AT.................. >26E4 :     
    BANK0.RAM........... >6800 :     
    BANK0.ROM........... >6000 :     
    BANK1.RAM........... >6802 :     
    BANK1.ROM........... >6002 :     
    BANK2.RAM........... >6804 :     
    BANK2.ROM........... >6004 :     
    BANK3.RAM........... >6806 :     
    BANK3.ROM........... >6006 :     
    BANK4.RAM........... >6808 :     
    BANK4.ROM........... >6008 :     
    BANK5.RAM........... >680A :     
    BANK5.ROM........... >600A :     
    BANK6.RAM........... >680C :     
    BANK6.ROM........... >600C :     
    BANK7.RAM........... >680E :     
    BANK7.ROM........... >600E :     
    BANKID.............. >600E :     
    BANKX.CRASH.SHOWBANK >7F00 :     
    BANKX.VDPTAB........ >7F10 :     
    BANKX.VECTAB........ >7F40 :     
    BLABLA.............. >6476 :     
    BTIHI............... >8314 :     
    BVDPST.............. >831A :     
    BX.................. >832B :     
    BY.................. >832A :     
    C99_BRK............. >0113 :     
    C99_DBGR0........... >0120 :     
    C99_DBGR1........... >0121 :     
    C99_DBGR10.......... >012A :     
    C99_DBGR11.......... >012B :     
    C99_DBGR12.......... >012C :     
    C99_DBGR13.......... >012D :     
    C99_DBGR14.......... >012E :     
    C99_DBGR15.......... >012F :     
    C99_DBGR2........... >0122 :     
    C99_DBGR3........... >0123 :     
    C99_DBGR4........... >0124 :     
    C99_DBGR5........... >0125 :     
    C99_DBGR6........... >0126 :     
    C99_DBGR7........... >0127 :     
    C99_DBGR8........... >0128 :     
    C99_DBGR9........... >0129 :     
    C99_DBG_R0.......... >0120 :     
    C99_DBG_R1.......... >0121 :     
    C99_DBG_R2.......... >0122 :     
    C99_DBG_R3.......... >0123 :     
    C99_DBG_R4.......... >0124 :     
    C99_DBG_R5.......... >0125 :     
    C99_DBG_R6.......... >0126 :     
    C99_DBG_R7.......... >0127 :     
    C99_DBG_R8.......... >0128 :     
    C99_DBG_R9.......... >0199 :     
    C99_DBG_RA.......... >012A :     
    C99_DBG_RB.......... >012B :     
    C99_DBG_RC.......... >012C :     
    C99_DBG_RD.......... >012D :     
    C99_DBG_RE.......... >012E :     
    C99_DBG_RF.......... >012F :     
    C99_DBG_STCK........ >0199 :     
    C99_DBG_TMP0........ >0124 :     
    C99_DBG_TMP1........ >0125 :     
    C99_DBG_TMP2........ >0126 :     
    C99_DBG_TMP3........ >0127 :     
    C99_DBG_TMP4........ >0128 :     
    C99_NORM............ >0110 :     
    C99_OVRD............ >0111 :     
    C99_QUIT............ >0114 :     
    C99_SMAX............ >0112 :     
    CAT.DEVICE.......... >EEB0 :     
    CAT.FILECOUNT....... >E000 :     
    CAT.FNLIST.......... >E8BC :     
    CAT.FPICKER.IDX..... >E002 :     
    CAT.FREE1........... >E006 :     
    CAT.FREE2........... >E008 :     
    CAT.FREE3........... >E00A :     
    CAT.FREE4........... >E00C :     
    CAT.FREE5........... >E00E :     
    CAT.FREE6........... >E010 :     
    CAT.FSLIST.......... >E2BA :     
    CAT.FTLIST.......... >E23A :     
    CAT.NOFILESPAGE..... >E004 :     
    CAT.PTRLIST......... >E13C :     
    CAT.RSLIST.......... >E33A :     
    CAT.SIZE............ >0F00 :     
    CAT.SIZELIST........ >E6C0 :     
    CAT.TOP............. >E000 :     
    CAT.TYPELIST........ >E3C6 :     
    CAT.VAR1............ >E12C :     
    CAT.VAR2............ >E12E :     
    CAT.VAR3............ >E130 :     
    CAT.VAR4............ >E132 :     
    CAT.VAR5............ >E134 :     
    CAT.VAR6............ >E136 :     
    CAT.VAR7............ >E138 :     
    CAT.VAR8............ >E13A :     
    CAT.VOLNAME......... >E3BA :     
    CLHOOK.............. >2F30 :     
    CLIP1............... >3100 :     
    CLIP2............... >3200 :     
    CLIP3............... >3300 :     
    CLIP4............... >3400 :     
    CLIP5............... >3500 :     
    CLSLOT.............. >2F58 :     
    CMDB.ACTION.PTR..... >A72C :     
    CMDB.CMD............ >A72F :     
    CMDB.CMDALL......... >A72E :     
    CMDB.CMDLEN......... >A72E :     
    CMDB.COLUMN......... >A714 :     
    CMDB.CURSOR......... >A70A :     
    CMDB.DEFAULT........ >A708 :     
    CMDB.DFLT.FNAME..... >A7B2 :     
    CMDB.DIALOG......... >A71C :     
    CMDB.DIALOG.CLOSE... >6BE0 :     
    CMDB.DIALOG.VAR..... >A71E :     
    CMDB.DIRTY.......... >A71A :     
    CMDB.FB.YXSAVE...... >A704 :     
    CMDB.FREE........... >A800 :     
    CMDB.INIT........... >3300 :     
    CMDB.INIT.EXIT...... >3354 :     
    CMDB.LENGTH......... >A716 :     
    CMDB.LINES.......... >A718 :     
    CMDB.PANHEAD........ >A720 :     
    CMDB.PANHEAD.BUF.... >A780 :     
    CMDB.PANHINT........ >A724 :     
    CMDB.PANHINT2....... >A726 :     
    CMDB.PANINFO........ >A722 :     
    CMDB.PANKEYS........ >A72A :     
    CMDB.PANMARKERS..... >A728 :     
    CMDB.ROWS........... >0006 :     
    CMDB.SCRROWS........ >A706 :     
    CMDB.SIZE........... >0100 :     
    CMDB.STRUCT......... >A700 :     
    CMDB.TOP............ >EF00 :     
    CMDB.TOP.PTR........ >A700 :     
    CMDB.VDPTOP......... >A70E :     
    CMDB.VISIBLE........ >A702 :     
    CMDB.YXPROMPT....... >A712 :     
    CMDB.YXSAVE......... >A70C :     
    CMDB.YXTOP.......... >A710 :     
    COLROW.............. >0050 :     
    CONFIG.............. >0002 :     
    CONST.0............. >2000 :     
    CONST.1............. >2002 :     
    CONST.10............ >3974 :     
    CONST.11............ >3976 :     
    CONST.12............ >3978 :     
    CONST.13............ >397A :     
    CONST.14............ >397C :     
    CONST.15............ >397E :     
    CONST.2............. >2004 :     
    CONST.3............. >396A :     
    CONST.32............ >3980 :     
    CONST.4............. >2006 :     
    CONST.5............. >396C :     
    CONST.6............. >396E :     
    CONST.7............. >3970 :     
    CONST.8............. >2008 :     
    CONST.80............ >3982 :     
    CONST.9............. >3972 :     
    CORE1.FREE.......... >A100 :     
    CORE1.FREE1......... >A036 :     
    CORE1.FREE2......... >A0D4 :     
    CORE1.TOP........... >A000 :     
    CORE2.FREE.......... >A200 :     
    CORE2.TOP........... >A100 :     
    CPU.CRASH........... >2026 :     
    CPU.CRASH.MAIN...... >2086 :     
    CPU.CRASH.MSG.CALLER >2198 :     
    CPU.CRASH.MSG.CRASHED >2182 :     
    CPU.CRASH.MSG.ID.... >21D8 :     
    CPU.CRASH.MSG.MARKER >21B0 :     
    CPU.CRASH.MSG.R..... >21AE :     
    CPU.CRASH.MSG.SOURCE >21C0 :     
    CPU.CRASH.MSG.ST.... >21BA :     
    CPU.CRASH.MSG.WP.... >21B4 :     
    CPU.CRASH.RESET..... >2076 :     
    CPU.CRASH.SHOWBANK.. >7F00 :     
    CPU.CRASH.SHOWBANK.BANKSTR >7F38 :     
    CPU.CRASH.SHOWREG... >20EC :     
    CPU.CRASH.SHOWREG.CONTENT >2142 :     
    CPU.CRASH.SHOWREG.LABEL >20FA :     
    CPU.SCRPAD.BACKUP... >2B5E :     
    CPU.SCRPAD.BACKUP.COPY >2B76 :     
    CPU.SCRPAD.BACKUP.EXIT >2B90 :     
    CPU.SCRPAD.PGIN..... >2BE4 :     
    CPU.SCRPAD.PGIN.EXIT >2C06 :     
    CPU.SCRPAD.PGOUT.... >2BA6 :     
    CPU.SCRPAD.PGOUT.AFTER.RTWP >2BDE :     
    CPU.SCRPAD.PGOUT.EXIT >2BE2 :     
    CPU.SCRPAD.RESTORE.. >2B92 :     
    CPU.SCRPAD.RESTORE.COPY >2B9A :     
    CPU.SCRPAD.RESTORE.EXIT >2BA4 :     
    CPU.SCRPAD.SRC...... >7E00 :     
    CPU.SCRPAD.TGT...... >F000 :     
    CPU.SCRPAD1......... >8300 :     
    CPU.SCRPAD2......... >AD00 :     
    CPYCHK.............. >250A :     
    CPYM0............... >2516 :     
    CPYM1............... >2522 :     
    CPYM2............... >252A :     
    CPYM2M.............. >24F8 :     
    CPYM2V.............. >24A4 :     
    CPYM3............... >253A :     
    CPYM4............... >2544 :     
    CPYMZ............... >2550 :     
    CPYODD.............. >2552 :     
    CPYV2M.............. >24D6 :     
    DATA.FILENAME.PTR... >6746 :     
    DATA.PRINTF.VRAM.LNT >6974 :     
    DATA.PRINTF.VRAM.LNUM >6994 :     
    DATA.PRINTF.VRAM.STMT >6984 :     
    DATA.TK.BREAK....... >64D6 :     
    DATA.TK.END......... >64D5 :     
    DATA.TK.NEW......... >64D2 :     
    DATA.TK.OLD......... >64D3 :     
    DATA.TK.SAVE........ >64D4 :     
    DEBUG............... >0000 :     
    DEF.CLIP.FNAME.A.... >3DBD :     
    DEF.CLIP.FNAME.B.... >3DC7 :     
    DEF.CLIP.FNAME.C.... >3DD1 :     
    DEF.DEVICES......... >3E02 :     
    DEF.MC.FNAME.A...... >3DDB :     
    DEF.MC.FNAME.B...... >3DE8 :     
    DEF.MC.FNAME.C...... >3DF5 :     
    DEF.PRINTER.FNAME... >3DB6 :     
    DEVICE.F18A......... >0001 :     
    DEVICE.FG99.MODE.ADV >0000 :     
    DOFILL.............. >2280 :     
    DOWN................ >26EA :     
    DSRLNK.............. >2C08 :     
    DSRLNK.DEVICE_NAME.GET_LENGTH >2C62 :     
    DSRLNK.DSRLWS....... >A400 :     
    DSRLNK.DSRSCAN.CALL_DSR >2CDE :     
    DSRLNK.DSRSCAN.CARDLOOP >2C8E :     
    DSRLNK.DSRSCAN.CARDOFF >2C88 :     
    DSRLNK.DSRSCAN.DSR.8 >2D10 :     
    DSRLNK.DSRSCAN.DSR.A >2D20 :     
    DSRLNK.DSRSCAN.GETENTRY >2CB8 :     
    DSRLNK.DSRSCAN.NEXTENTRY >2CB2 :     
    DSRLNK.DSRSCAN.RETURN_DSR >2D00 :     
    DSRLNK.DSRSCAN.START >2C7E :     
    DSRLNK.DSTYPE....... >A40A :     
    DSRLNK.ERROR.DEVICENAME_INVALID >2D2C :     
    DSRLNK.ERROR.IO_ERROR >2D2E :     
    DSRLNK.ERROR.NODSR_FOUND >2D28 :     
    DSRLNK.ERROR.NODSR_FOUND_OFF >2D26 :     
    DSRLNK.FLGPTR....... >A434 :     
    DSRLNK.INIT......... >2C0C :     
    DSRLNK.NAMSTO....... >A420 :     
    DSRLNK.PERIOD....... >2D78 :     
    DSRLNK.REUSE........ >2D38 :     
    DSRLNK.REUSE.INIT... >2D3C :     
    DSRLNK.SAV8A........ >A428 :     
    DSRLNK.SAVCRU....... >A42A :     
    DSRLNK.SAVENT....... >A42C :     
    DSRLNK.SAVLEN....... >A432 :     
    DSRLNK.SAVPAB....... >A42E :     
    DSRLNK.SAVVER....... >A430 :     
    EDB.AUTOINSERT...... >A50C :     
    EDB.BK.FB.ROW....... >A520 :     
    EDB.BK.FB.TOPLINE... >A51E :     
    EDB.BLOCK.M1........ >A50E :     
    EDB.BLOCK.M2........ >A510 :     
    EDB.BLOCK.VAR....... >A512 :     
    EDB.DIRTY........... >A506 :     
    EDB.FILENAME........ >A526 :     
    EDB.FILENAME.PTR.... >A514 :     
    EDB.FILETYPE.PTR.... >A516 :     
    EDB.FREE............ >A576 :     
    EDB.HIPAGE.ALLOC.... >3790 :     
    EDB.HIPAGE.ALLOC.CHECK_SETPAGE >379C :     
    EDB.HIPAGE.ALLOC.CRASH >37C6 :     
    EDB.HIPAGE.ALLOC.EXIT >37CE :     
    EDB.HIPAGE.ALLOC.SETPAGE >37B8 :     
    EDB.INDEX.PTR....... >A502 :     
    EDB.INIT............ >32B4 :     
    EDB.INIT.EXIT....... >32FA :     
    EDB.INSMODE......... >A50A :     
    EDB.LINE.GETLENGTH.. >3728 :     
    EDB.LINE.GETLENGTH.EXIT >3764 :     
    EDB.LINE.GETLENGTH.NULL >3760 :     
    EDB.LINE.GETLENGTH2. >376C :     
    EDB.LINE.GETLENGTH2.EXIT >378A :     
    EDB.LINE.MAPPAGE.... >36DE :     
    EDB.LINE.MAPPAGE.EXIT >3720 :     
    EDB.LINE.MAPPAGE.LOOKUP >36F8 :     
    EDB.LINES........... >A504 :     
    EDB.LINETERM........ >A524 :     
    EDB.NEXT_FREE.PTR... >A508 :     
    EDB.SAMS.HIPAGE..... >A51C :     
    EDB.SAMS.LOPAGE..... >A51A :     
    EDB.SAMS.PAGE....... >A518 :     
    EDB.SIZE............ >1000 :     
    EDB.SPECIAL.FILE.... >A522 :     
    EDB.STRUCT.......... >A500 :     
    EDB.TOP............. >C000 :     
    EDB.TOP.PTR......... >A500 :     
    ENKNL............... >200E :     
    ENUSR............... >2012 :     
    EOL................. >FFFF :     
    ERRPANE.EXIT........ >3382 :     
    ERRPANE.INIT........ >335C :     
    F18CHK.............. >2772 :     
    F18CHK_EXIT......... >27B0 :     
    F18CHK_GPU.......... >27BC :     
    F18CHK_NO........... >27A6 :     
    F18CHK_YES.......... >27AC :     
    F18FW1.............. >27EE :     
    F18FWV.............. >27D4 :     
    F18IDL.............. >2768 :     
    F18LCK.............. >275E :     
    F18RST.............. >27C4 :     
    F18UNL.............. >2748 :     
    FB.CALC.POINTER..... >315C :     
    FB.CALC.POINTER.EXIT >317C :     
    FB.CALC.SCRROWS..... >3184 :     
    FB.CALC.SCRROWS.EXIT >31B0 :     
    FB.CALC.SCRROWS.HANDLE.ERRORS >31A4 :     
    FB.CALC.SCRROWS.HANDLE.MC >3198 :     
    FB.CALC.SCRROWS.HANDLE.RULER >318E :     
    FB.COLORIZE......... >A312 :     
    FB.COLSLINE......... >A30E :     
    FB.COLUMN........... >A30C :     
    FB.CURRENT.......... >A302 :     
    FB.CURTOGGLE........ >A314 :     
    FB.DIRTY............ >A318 :     
    FB.FREE............. >A3C0 :     
    FB.INIT............. >30E8 :     
    FB.INIT.EXIT........ >313A :     
    FB.REFRESH.......... >6C3A :     
    FB.ROW.............. >A306 :     
    FB.ROW.DIRTY........ >A30A :     
    FB.ROW.LENGTH....... >A308 :     
    FB.ROW2LINE......... >3142 :     
    FB.ROW2LINE.EXIT.... >3156 :     
    FB.RULER.SIT........ >A320 :     
    FB.RULER.TAT........ >A370 :     
    FB.SCRROWS.......... >A31C :     
    FB.SCRROWS.MAX...... >A31E :     
    FB.SIZE............. >0960 :     
    FB.STATUS.DIRTY..... >A31A :     
    FB.STRUCT........... >A300 :     
    FB.TOP.............. >D000 :     
    FB.TOP.PTR.......... >A300 :     
    FB.TOPLINE.......... >A304 :     
    FB.UNCRUNCH.AREA.... >D960 :     
    FB.VWCO............. >A310 :     
    FB.YXSAVE........... >A316 :     
    FG99................ >2E32 :     
    FG99.CART.FBFORTH... >3E6E :     
    FG99.CART.FCMD...... >3E32 :     
    FG99.CART.RXB....... >3E5A :     
    FG99.CART.XBGEM..... >3E46 :     
    FG99.EXIT........... >2E6C :     
    FG99.RUN............ >37F6 :     
    FG99.SEND.LOOP...... >2E42 :     
    FG99.WAIT........... >2E5A :     
    FH.CALLBACK1........ >A450 :     
    FH.CALLBACK2........ >A452 :     
    FH.CALLBACK3........ >A454 :     
    FH.CALLBACK4........ >A456 :     
    FH.CALLBACK5........ >A458 :     
    FH.COUNTER.......... >A442 :     
    FH.DIR.REC.PTR...... >A468 :     
    FH.FILETYPE......... >A44C :     
    FH.FNAME.PTR........ >A444 :     
    FH.FOPMODE.......... >A44A :     
    FH.FOPMODE.NONE..... >0000 :     
    FH.FOPMODE.READFILE. >0001 :     
    FH.FOPMODE.WRITEFILE >0002 :     
    FH.FREE............. >A4BA :     
    FH.FTYPE.INIT....... >A45A :     
    FH.IORESULT......... >A43A :     
    FH.KILOBYTES........ >A440 :     
    FH.KILOBYTES.PREV... >A45C :     
    FH.LINE............. >A45E :     
    FH.MEMBUFFER........ >A46A :     
    FH.OFFSETOPCODE..... >A44E :     
    FH.PAB.PTR.......... >A436 :     
    FH.PABSTAT.......... >A438 :     
    FH.PABTPL.PTR....... >A466 :     
    FH.RAM.PTR.......... >A45C :     
    FH.RECLEN........... >A43E :     
    FH.RECORDS.......... >A43C :     
    FH.SAMS.HIPAGE...... >A448 :     
    FH.SAMS.PAGE........ >A446 :     
    FH.STRUCT........... >A400 :     
    FH.TEMP1............ >A460 :     
    FH.TEMP2............ >A462 :     
    FH.TEMP3............ >A464 :     
    FH.VPAB............. >0A60 :     
    FH.VRECBUF.......... >0960 :     
    FH.WORKMODE......... >A45A :     
    FIL.EXIT............ >228C :     
    FIL16B.............. >2276 :     
    FILCHK.............. >2248 :     
    FILCHK2............. >2258 :     
    FILCHK3............. >2264 :     
    FILE.CLOSE.......... >2D9E :     
    FILE.DELETE......... >2DD6 :     
    FILE.IMAGE.LOAD..... >2DD2 :     
    FILE.IMAGE.SAVE..... >2DD4 :     
    FILE.OPEN........... >2D7A :     
    FILE.RECORD.READ.... >2DAA :     
    FILE.RECORD.SEEK.... >2DD0 :     
    FILE.RECORD.WRITE... >2DB6 :     
    FILE.RENAME......... >2DD8 :     
    FILE.STATUS......... >2DDA :     
    FILM................ >2236 :     
    FILV................ >228E :     
    FILZZ............... >22B4 :     
    FJ.BOTTOM........... >B000 :     
    FM.NEWFILE.......... >6C16 :     
    FNOPT1.............. >0000 :     
    FNOPT2.............. >0006 :     
    FNOPT3.............. >000C :     
    FNOPT4.............. >0012 :     
    FNOPT5.............. >8000 :     
    FNOPT6.............. >8006 :     
    FNOPT7.............. >800C :     
    FNOPT8.............. >8012 :     
    FNTADR.............. >1100 :     
    GRAPH1.............. >21F2 :     
    GRMRA............... >9802 :     
    GRMRD............... >9800 :     
    GRMWA............... >9C02 :     
    GRMWD............... >9C00 :     
    HCHAR............... >27F0 :     
    HCHAR1.............. >280A :     
    HCHAR2.............. >2814 :     
    HCHARX.............. >27F6 :     
    HEAP.TOP............ >F000 :     
    HOOKOK.............. >2E76 :     
    ID.DIALOG.APPEND.... >000E :     
    ID.DIALOG.BASIC..... >006B :     
    ID.DIALOG.BLOCK..... >0066 :     
    ID.DIALOG.CARTRIDGE. >006A :     
    ID.DIALOG.CFG....... >006C :     
    ID.DIALOG.CFG.CLIP.. >0011 :     
    ID.DIALOG.CFG.MC.... >0012 :     
    ID.DIALOG.CLIPBOARD. >0067 :     
    ID.DIALOG.DIR....... >0014 :     
    ID.DIALOG.EDITOR.... >006D :     
    ID.DIALOG.FILE...... >0069 :     
    ID.DIALOG.FONT...... >006E :     
    ID.DIALOG.GOTO...... >0013 :     
    ID.DIALOG.HELP...... >0068 :     
    ID.DIALOG.INSERT.... >000D :     
    ID.DIALOG.LOAD...... >000A :     
    ID.DIALOG.MENU...... >0064 :     
    ID.DIALOG.PRINT..... >000F :     
    ID.DIALOG.PRINTBLOCK >0010 :     
    ID.DIALOG.SAVE...... >000B :     
    ID.DIALOG.SAVEBLOCK. >000C :     
    ID.DIALOG.SHORTCUTS. >006F :     
    ID.DIALOG.UNSAVED... >0065 :     
    ID.FILE.APPENDFILE.. >0003 :     
    ID.FILE.CLIPBLOCK... >0006 :     
    ID.FILE.INSERTFILE.. >0002 :     
    ID.FILE.LOADFILE.... >0001 :     
    ID.FILE.PRINTBLOCK.. >0008 :     
    ID.FILE.PRINTFILE... >0007 :     
    ID.FILE.SAVEBLOCK... >0005 :     
    ID.FILE.SAVEFILE.... >0004 :     
    ID.SPECIAL.BASIC.... >0003 :     
    ID.SPECIAL.MASTCAT.. >0001 :     
    ID.SPECIAL.NORMAL... >0000 :     
    ID.SPECIAL.READONLY. >0002 :     
    IDX.ENTRY.DELETE.... >35E4 :     
    IDX.ENTRY.DELETE.EXIT >363C :     
    IDX.ENTRY.DELETE.LASTLINE >3610 :     
    IDX.ENTRY.DELETE.REORG >3618 :     
    IDX.ENTRY.DELETE.REORG.COMPLEX >3622 :     
    IDX.ENTRY.DELETE.REORG.SIMPLE >3636 :     
    IDX.ENTRY.INSERT.... >3686 :     
    IDX.ENTRY.INSERT.EXIT >36D2 :     
    IDX.ENTRY.INSERT.REORG >36A4 :     
    IDX.ENTRY.INSERT.REORG.COMPLEX >36AE :     
    IDX.ENTRY.INSERT.REORG.SIMPLE >36C2 :     
    IDX.ENTRY.UPDATE.... >3536 :     
    IDX.ENTRY.UPDATE.CLEAR >3570 :     
    IDX.ENTRY.UPDATE.EXIT >3580 :     
    IDX.ENTRY.UPDATE.SAVE >355E :     
    IDX.FREE............ >A606 :     
    IDX.INIT............ >31B4 :     
    IDX.INIT.EXIT....... >31F0 :     
    IDX.POINTER.GET..... >3588 :     
    IDX.POINTER.GET.EXIT >35CA :     
    IDX.POINTER.GET.PARM >35B8 :     
    IDX.POINTER.GET.PARM.NULL >35C2 :     
    IDX.SAMS.HIPAGE..... >A604 :     
    IDX.SAMS.LOPAGE..... >A602 :     
    IDX.SAMS.PAGE....... >A600 :     
    IDX.SIZE............ >1000 :     
    IDX.STRUCT.......... >A600 :     
    IDX.TOP............. >B000 :     
    INTOFF.............. >26B4 :     
    INTON............... >26BC :     
    IO.ERR.BAD_DEVICE_NAME >0000 :     
    IO.ERR.BAD_OPEN_ATTRIBUTE >0002 :     
    IO.ERR.DEVICE_ERROR. >0006 :     
    IO.ERR.DEVICE_WRITE_PROTTECTED >0001 :     
    IO.ERR.EOF.......... >0005 :     
    IO.ERR.FILE_ERROR... >0007 :     
    IO.ERR.ILLEGAL_OPERATION >0003 :     
    IO.ERR.NO_ERROR_OCCURED >0000 :     
    IO.ERR.OUT_OF_TABLE_BUFFER_SPACE >0004 :     
    IO.OP.CLOSE......... >0001 :     
    IO.OP.DELFILE....... >0007 :     
    IO.OP.LOAD.......... >0005 :     
    IO.OP.OPEN.......... >0000 :     
    IO.OP.READ.......... >0002 :     
    IO.OP.REWIND........ >0004 :     
    IO.OP.SAVE.......... >0006 :     
    IO.OP.SCRATCH....... >0008 :     
    IO.OP.STATUS........ >0009 :     
    IO.OP.WRITE......... >0003 :     
    IO.REL.APP.DIS.FIX.. >0007 :     
    IO.REL.APP.DIS.VAR.. >0017 :     
    IO.REL.APP.INT.FIX.. >000F :     
    IO.REL.APP.INT.VAR.. >001F :     
    IO.REL.INP.DIS.FIX.. >0005 :     
    IO.REL.INP.DIS.VAR.. >0015 :     
    IO.REL.INP.INT.FIX.. >000D :     
    IO.REL.INP.INT.VAR.. >001D :     
    IO.REL.OUT.DIS.FIX.. >0003 :     
    IO.REL.OUT.DIS.VAR.. >0013 :     
    IO.REL.OUT.INT.FIX.. >000B :     
    IO.REL.OUT.INT.VAR.. >001B :     
    IO.REL.UPD.DIS.FIX.. >0001 :     
    IO.REL.UPD.DIS.VAR.. >0011 :     
    IO.REL.UPD.INT.FIX.. >0009 :     
    IO.REL.UPD.INT.VAR.. >0019 :     
    IO.SEQ.APP.DIS.FIX.. >0006 :     
    IO.SEQ.APP.DIS.VAR.. >0016 :     
    IO.SEQ.APP.INT.FIX.. >000E :     
    IO.SEQ.APP.INT.VAR.. >001E :     
    IO.SEQ.INP.DIS.FIX.. >0004 :     
    IO.SEQ.INP.DIS.VAR.. >0014 :     
    IO.SEQ.INP.INT.FIX.. >000C :     
    IO.SEQ.INP.INT.VAR.. >001C :     
    IO.SEQ.OUT.DIS.FIX.. >0002 :     
    IO.SEQ.OUT.DIS.VAR.. >0012 :     
    IO.SEQ.OUT.INT.FIX.. >000A :     
    IO.SEQ.OUT.INT.VAR.. >001A :     
    IO.SEQ.UPD.DIS.FIX.. >0000 :     
    IO.SEQ.UPD.DIS.VAR.. >0010 :     
    IO.SEQ.UPD.INT.FIX.. >0008 :     
    IO.SEQ.UPD.INT.VAR.. >0018 :     
    ISR................. >6410 :     
    ISR.COUNTER......... >6456 :     
    ISR.EXIT............ >646C :     
    ISR.HOTKEY.......... >645A :     
    ISR.SCAN.COPY....... >64C2 :     
    ISR.SCAN.COPY.LOOP.. >64C8 :     
    ISR.SCAN.CRUNCHBUF.. >6478 :     
    ISR.SCAN.END........ >6494 :     
    ISR.SCAN.EXIT....... >64D0 :     
    ISR.SCAN.NEW........ >64AE :     
    ISR.SCAN.OLD........ >649E :     
    ISR.SCAN.SAVE....... >64A6 :     
    ISR.SHOWID.......... >6428 :     
    KBF.KBCLEAR......... >0001 :     
    KBFLAGS............. >A026 :     
    KEY.CTRL.0.......... >00B0 :     
    KEY.CTRL.1.......... >00B1 :     
    KEY.CTRL.2.......... >00B2 :     
    KEY.CTRL.3.......... >00B3 :     
    KEY.CTRL.4.......... >00B4 :     
    KEY.CTRL.5.......... >00B5 :     
    KEY.CTRL.6.......... >00B6 :     
    KEY.CTRL.7.......... >00B7 :     
    KEY.CTRL.8.......... >009E :     
    KEY.CTRL.9.......... >009F :     
    KEY.CTRL.A.......... >0081 :     
    KEY.CTRL.B.......... >0082 :     
    KEY.CTRL.C.......... >0083 :     
    KEY.CTRL.COMMA...... >0080 :     
    KEY.CTRL.D.......... >0084 :     
    KEY.CTRL.DOT........ >009B :     
    KEY.CTRL.E.......... >0085 :     
    KEY.CTRL.F.......... >0086 :     
    KEY.CTRL.G.......... >0087 :     
    KEY.CTRL.H.......... >0088 :     
    KEY.CTRL.I.......... >0089 :     
    KEY.CTRL.J.......... >008A :     
    KEY.CTRL.K.......... >008B :     
    KEY.CTRL.L.......... >008C :     
    KEY.CTRL.M.......... >008D :     
    KEY.CTRL.N.......... >008E :     
    KEY.CTRL.O.......... >008F :     
    KEY.CTRL.P.......... >0090 :     
    KEY.CTRL.PLUS....... >009D :     
    KEY.CTRL.Q.......... >0091 :     
    KEY.CTRL.R.......... >0092 :     
    KEY.CTRL.S.......... >0093 :     
    KEY.CTRL.SLASH...... >00BB :     
    KEY.CTRL.SPACE...... >00F0 :     
    KEY.CTRL.T.......... >0094 :     
    KEY.CTRL.U.......... >0095 :     
    KEY.CTRL.V.......... >0096 :     
    KEY.CTRL.W.......... >0097 :     
    KEY.CTRL.X.......... >0098 :     
    KEY.CTRL.Y.......... >0099 :     
    KEY.CTRL.Z.......... >009A :     
    KEY.ENTER........... >000D :     
    KEY.FCTN.0.......... >00BC :     
    KEY.FCTN.1.......... >0003 :     
    KEY.FCTN.2.......... >0004 :     
    KEY.FCTN.3.......... >0007 :     
    KEY.FCTN.4.......... >0002 :     
    KEY.FCTN.5.......... >000E :     
    KEY.FCTN.6.......... >000C :     
    KEY.FCTN.7.......... >0001 :     
    KEY.FCTN.8.......... >0006 :     
    KEY.FCTN.9.......... >000F :     
    KEY.FCTN.A.......... >0000 :     
    KEY.FCTN.B.......... >00BE :     
    KEY.FCTN.C.......... >0000 :     
    KEY.FCTN.COMMA...... >00B8 :     
    KEY.FCTN.D.......... >0009 :     
    KEY.FCTN.DOT........ >00B9 :     
    KEY.FCTN.E.......... >000B :     
    KEY.FCTN.F.......... >0000 :     
    KEY.FCTN.G.......... >0000 :     
    KEY.FCTN.H.......... >00BF :     
    KEY.FCTN.I.......... >0000 :     
    KEY.FCTN.J.......... >00C0 :     
    KEY.FCTN.K.......... >00C1 :     
    KEY.FCTN.L.......... >00C2 :     
    KEY.FCTN.M.......... >00C3 :     
    KEY.FCTN.N.......... >00C4 :     
    KEY.FCTN.O.......... >0000 :     
    KEY.FCTN.P.......... >0000 :     
    KEY.FCTN.PLUS....... >0005 :     
    KEY.FCTN.Q.......... >00C5 :     
    KEY.FCTN.R.......... >0000 :     
    KEY.FCTN.S.......... >0008 :     
    KEY.FCTN.T.......... >0000 :     
    KEY.FCTN.U.......... >0000 :     
    KEY.FCTN.V.......... >007F :     
    KEY.FCTN.W.......... >007E :     
    KEY.FCTN.X.......... >000A :     
    KEY.FCTN.Y.......... >00C6 :     
    KEY.FCTN.Z.......... >0000 :     
    KEY.LC.B............ >00A2 :     
    KEY.LC.E............ >00A5 :     
    KEY.LC.F............ >00A6 :     
    KEY.LC.H............ >00A8 :     
    KEY.LC.N............ >006E :     
    KEY.LC.O............ >006F :     
    KEY.LC.P............ >0070 :     
    KEY.LC.Q............ >0071 :     
    KEY.LC.R............ >0072 :     
    KEY.LC.S............ >0073 :     
    KEY.LC.X............ >0078 :     
    KEY.NUM.0........... >0030 :     
    KEY.NUM.1........... >0031 :     
    KEY.NUM.2........... >0032 :     
    KEY.NUM.3........... >0033 :     
    KEY.NUM.4........... >0034 :     
    KEY.NUM.5........... >0035 :     
    KEY.NUM.6........... >0036 :     
    KEY.NUM.7........... >0037 :     
    KEY.NUM.8........... >0038 :     
    KEY.NUM.9........... >0039 :     
    KEY.SPACE........... >0020 :     
    KEY.UC.A............ >0041 :     
    KEY.UC.B............ >0042 :     
    KEY.UC.C............ >0043 :     
    KEY.UC.D............ >0044 :     
    KEY.UC.E............ >0045 :     
    KEY.UC.F............ >0046 :     
    KEY.UC.G............ >0047 :     
    KEY.UC.H............ >0048 :     
    KEY.UC.I............ >0049 :     
    KEY.UC.J............ >004A :     
    KEY.UC.K............ >004B :     
    KEY.UC.L............ >004C :     
    KEY.UC.M............ >004D :     
    KEY.UC.N............ >004E :     
    KEY.UC.O............ >004F :     
    KEY.UC.P............ >0050 :     
    KEY.UC.Q............ >0051 :     
    KEY.UC.R............ >0052 :     
    KEY.UC.S............ >0053 :     
    KEY.UC.X............ >0058 :     
    KEYCODE1............ >A028 :     
    KEYCODE2............ >A02A :     
    KICKSTART.CODE1..... >6040 :     
    KICKSTART.CODE2..... >6046 :     
    KICKSTART.RESUME.... >6038 :     
    KSCAN............... >000E :     
    KTHREAD............. >2F10 :     
    KTHREAD_EXIT........ >2F22 :     
    KTHREAD_KB.......... >2F1E :     
    LDFNT............... >2360 :     
    LDFNT1.............. >2378 :     
    LDFNT2.............. >23B2 :     
    LDFNT3.............. >23C6 :     
    LDFNT4.............. >23DA :     
    LOADMC.............. >221A :     
    MAGIC.CHECK......... >6078 :     
    MAGIC.CHECK.EXIT.... >6098 :     
    MAGIC.CLEAR......... >6064 :     
    MAGIC.CLEAR.EXIT.... >6074 :     
    MAGIC.SET........... >604A :     
    MAGIC.SET.EXIT...... >6060 :     
    MAGIC.STR.W1........ >A000 :     
    MAGIC.STR.W2........ >A002 :     
    MAGIC.STR.W3........ >A004 :     
    MAGIC.STRING........ >609C :     
    MAIN................ >6046 :     
    MCCODE.............. >2210 :     
    MCLOOP.............. >8320 :     
    MCSPRD.............. >8322 :     
    MEM.SAMS.LAYOUT.BASIC >6C8E :     
    MEM.SAMS.LAYOUT.BASIC1 >6C8E :     
    MEM.SAMS.LAYOUT.BASIC2 >6C9E :     
    MEM.SAMS.LAYOUT.BASIC3 >6CAE :     
    MEM.SAMS.LAYOUT.BASIC4 >6CBE :     
    MEM.SAMS.LAYOUT.BASIC5 >6CCE :     
    MEM.SAMS.LAYOUT.BOOT >6C5E :     
    MEM.SAMS.LAYOUT.EXTERNAL >6C6E :     
    MEM.SAMS.LAYOUT.LEGACY >6C7E :     
    MEM.SAMS.SET.BANKS.EXIT >60CA :     
    MEM.SAMS.SET.BASIC1. >6110 :     
    MEM.SAMS.SET.BASIC2. >611A :     
    MEM.SAMS.SET.BASIC3. >6124 :     
    MEM.SAMS.SET.BASIC4. >612E :     
    MEM.SAMS.SET.BASIC5. >6138 :     
    MEM.SAMS.SET.BOOT... >6104 :     
    MEM.SAMS.SET.EXTERNAL >610A :     
    MEM.SAMS.SET.LEGACY. >60CC :     
    MEM.SAMS.SET.LEGACY.CODE >60FC :     
    MEM.SAMS.SET.STEVIE. >6142 :     
    MEM.SAMS.SET.STEVIE.EXIT >619E :     
    MEM.SAMS.SETUP.STEVIE >6C4C :     
    MKHEX............... >2986 :     
    MKHEX1.............. >299E :     
    MKHEX1.DIGIT09...... >29B4 :     
    MKHEX1.DIGITAF...... >29AA :     
    MKHEX2.............. >29BA :     
    MKHEX3.............. >29FC :     
    MKHOO1.............. >2F2E :     
    MKHOOK.............. >2F26 :     
    MKNUM............... >2A14 :     
    MKNUM1.............. >2A26 :     
    MKNUM2.............. >2A42 :     
    MKNUM3.............. >2A46 :     
    MKNUM4.............. >2A50 :     
    MKNUM5.............. >2A58 :     
    MKSLO1.............. >2F54 :     
    MKSLOT.............. >2F3A :     
    MMPLA1.............. >28F2 :     
    MMPLA2.............. >28F8 :     
    MMPLAY.............. >28EA :     
    MUTE................ >2868 :     
    MUTE2............... >286C :     
    MUTTAB.............. >2882 :     
    NOFONT.............. >FFFF :     
    NOREP............... >0000 :     
    NOSPRITE............ >38F0 :     
    NUM1................ >3030 :     
    NUM2................ >3020 :     
    OUTPARM1............ >A018 :     
    OUTPARM2............ >A01A :     
    OUTPARM3............ >A01C :     
    OUTPARM4............ >A01E :     
    OUTPARM5............ >A020 :     
    OUTPARM6............ >A022 :     
    OUTPARM7............ >A024 :     
    PALON............... >201C :     
    PANE.BOTROW......... >001D :     
    PANE.COLORSCHEME.LOAD >6BF2 :     
    PANE.COLORSCHEME.STATLINES >6C04 :     
    PANE.FOCUS.CMDB..... >0001 :     
    PANE.FOCUS.FB....... >0000 :     
    PANE.TOPLINE.ONESHOT.CLEARMSG >37D6 :     
    PANE.TOPLINE.ONESHOT.CLEARMSG.EXIT >37EE :     
    PARM1............... >A006 :     
    PARM2............... >A008 :     
    PARM3............... >A00A :     
    PARM4............... >A00C :     
    PARM5............... >A00E :     
    PARM6............... >A010 :     
    PARM7............... >A012 :     
    PARM8............... >A014 :     
    PARM9............... >A016 :     
    PCTADR.............. >0FC0 :     
    POPR0............... >2230 :     
    POPR1............... >222E :     
    POPR2............... >222C :     
    POPR3............... >222A :     
    POPRT............... >2232 :     
    PREFIX.............. >2A08 :     
    PUTAT............... >2442 :     
    PUTHEX.............. >2A0A :     
    PUTLST.............. >244A :     
    PUTLST.EXIT......... >24A0 :     
    PUTLST.LOOP......... >2452 :     
    PUTLST.NEXT......... >2494 :     
    PUTNUM.............. >2A92 :     
    PUTSTR.............. >241E :     
    PUTV01.............. >2346 :     
    PUTVR............... >2332 :     
    PUTVRX.............. >2334 :     
    R0.................. >0000 :     
    R0HB................ >8300 :     
    R0LB................ >8301 :     
    R1.................. >0001 :     
    R10................. >000A :     
    R10HB............... >8314 :     
    R10LB............... >8315 :     
    R11................. >000B :     
    R11HB............... >8316 :     
    R11LB............... >8317 :     
    R12................. >000C :     
    R12HB............... >8318 :     
    R12LB............... >8319 :     
    R13................. >000D :     
    R13HB............... >831A :     
    R13LB............... >831B :     
    R14................. >000E :     
    R14HB............... >831C :     
    R14LB............... >831D :     
    R15................. >000F :     
    R15HB............... >831E :     
    R15LB............... >831F :     
    R1HB................ >8302 :     
    R1LB................ >8303 :     
    R2.................. >0002 :     
    R2HB................ >8304 :     
    R2LB................ >8305 :     
    R3.................. >0003 :     
    R3HB................ >8306 :     
    R3LB................ >8307 :     
    R4.................. >0004 :     
    R4HB................ >8308 :     
    R4LB................ >8309 :     
    R5.................. >0005 :     
    R5HB................ >830A :     
    R5LB................ >830B :     
    R6.................. >0006 :     
    R6HB................ >830C :     
    R6LB................ >830D :     
    R7.................. >0007 :     
    R7HB................ >830E :     
    R7LB................ >830F :     
    R8.................. >0008 :     
    R8HB................ >8310 :     
    R8LB................ >8311 :     
    R9.................. >0009 :     
    R9HB................ >8312 :     
    R9LB................ >8313 :     
    RAM.MSG1............ >F050 :     
    RAM.MSG2............ >F0A0 :     
    RAMBUF.............. >A100 :     
    RAMSAT.............. >A056 :     
    RKSCAN.............. >2924 :     
    RKSCAN.EXIT......... >297A :     
    ROM.FARJUMP......... >3038 :     
    ROM.FARJUMP.ASSERT.CART >30AA :     
    ROM.FARJUMP.ASSERT.LOWMEM >30B8 :     
    ROM.FARJUMP.BANKSWITCH.CALL >309A :     
    ROM.FARJUMP.BANKSWITCH.FAILED1 >3092 :     
    ROM.FARJUMP.BANKSWITCH.FAILED2 >30D6 :     
    ROM.FARJUMP.BANKSWITCH.SRC.ADVFG99 >30CC :     
    ROM.FARJUMP.BANKSWITCH.SRC.ROM8K >30C8 :     
    ROM.FARJUMP.BANKSWITCH.TARGET.ROM8K >3076 :     
    ROM.FARJUMP.BANKSWITCH.TGT.ADVFG99 >307A :     
    ROM.FARJUMP.BANKSWITCH.TGT.DONE >3082 :     
    ROM.FARJUMP.EXIT.... >30DE :     
    ROM.FARJUMP.RETURN.. >309C :     
    ROM.PROGRAM1........ >600C :     
    ROM.PROGRAM2........ >6024 :     
    ROM0_KSCAN_ON....... >0001 :     
    ROM0_KSCAN_OUT...... >A028 :     
    ROMSAT.............. >38E4 :     
    RSSLOT.............. >2F66 :     
    RUNLI1.............. >2F7E :     
    RUNLI2.............. >2F8A :     
    RUNLI3.............. >2F8E :     
    RUNLI3A............. >2F96 :     
    RUNLI4.............. >2FA0 :     
    RUNLI5.............. >2FAA :     
    RUNLI6.............. >2FB8 :     
    RUNLI7.............. >2FC6 :     
    RUNLI9.............. >2FCA :     
    RUNLIA.............. >2FEC :     
    RUNLIB.............. >2F7A :     
    RUNLIC.............. >3010 :     
    RUNLID.............. >3026 :     
    RUNLIE.............. >3030 :     
    S16X16.............. >26DC :     
    S8X8................ >26D4 :     
    SAMS.LAYOUT......... >260C :     
    SAMS.LAYOUT.COPY.... >265C :     
    SAMS.LAYOUT.COPY.DATA >2694 :     
    SAMS.LAYOUT.COPY.EXIT >2688 :     
    SAMS.LAYOUT.COPY.LOOP >267A :     
    SAMS.LAYOUT.EXIT.... >2644 :     
    SAMS.LAYOUT.STANDARD >264C :     
    SAMS.MAPPING.OFF.... >25FE :     
    SAMS.MAPPING.OFF.EXIT >2608 :     
    SAMS.MAPPING.ON..... >25F0 :     
    SAMS.MAPPING.ON.EXIT >25FA :     
    SAMS.PAGE.GET....... >255A :     
    SAMS.PAGE.GET.EXIT.. >2588 :     
    SAMS.PAGE.SET....... >2590 :     
    SAMS.PAGE.SET.EXIT.. >25E4 :     
    SAMS.PAGE.SET.SWITCH_PAGE >25D4 :     
    SCROFF.............. >26A4 :     
    SCRON............... >26AC :     
    SCRPAD.83C6......... >2980 :     
    SCRPAD.83FA......... >2982 :     
    SCRPAD.83FE......... >2984 :     
    SCRPAD.MONITOR...... >7E00 :     
    SDEXI1.............. >291C :     
    SDEXI2.............. >291E :     
    SDEXIT.............. >290A :     
    SDOPT1.............. >0007 :     
    SDOPT2.............. >0005 :     
    SDOPT3.............. >0006 :     
    SDOPT4.............. >0004 :     
    SDPLA1.............. >28A4 :     
    SDPLA2.............. >28AE :     
    SDPLA3.............. >28B0 :     
    SDPLAY.............. >289C :     
    SDPREP.............. >2886 :     
    SETX................ >26FA :     
    SKIP_CPU_CRC16...... >0001 :     
    SKIP_CPU_RLE_COMPRESS >0001 :     
    SKIP_CPU_RLE_DECOMPRESS >0001 :     
    SKIP_GROM_CPU_COPY.. >0001 :     
    SKIP_GROM_VRAM_COPY. >0001 :     
    SKIP_RANDOM_GENERATOR >0001 :     
    SKIP_ROM_BANKSWITCH. >0001 :     
    SKIP_SAMS_LAYOUT.... >0001 :     
    SKIP_SAMS_SIZE...... >0001 :     
    SKIP_SPEECH_DETECTION >0001 :     
    SKIP_SPEECH_PLAYER.. >0001 :     
    SKIP_VDP_BITMAP..... >0001 :     
    SKIP_VDP_BOXES...... >0001 :     
    SKIP_VDP_PX2YX_CALC. >0001 :     
    SKIP_VDP_RLE_DECOMPRESS >0001 :     
    SKIP_VDP_VIEWPORT... >0001 :     
    SKIP_VIRTUAL_KEYBOARD >0001 :     
    SLOTOK.............. >2EF2 :     
    SMAG1X.............. >26C4 :     
    SMAG2X.............. >26CC :     
    SOUND............... >8400 :     
    SP2.STKTOP.......... >A900 :     
    SPCHRD.............. >9000 :     
    SPCHWT.............. >9400 :     
    SPCODE.............. >2216 :     
    SPFBCK.............. >0004 :     
    SPFCLR.............. >00F4 :     
    SPFONT.............. >0000 :     
    SPKOFF.............. >FF00 :     
    SPKON............... >6000 :     
    SPRITECURSOR........ >0001 :     
    SPRPDT.............. >2800 :     
    SPRSAT.............. >2180 :     
    SPVMOD.............. >7F10 :     
    STACK............... >0009 :     
    STARTUP_KEEP_VDPMEMORY >0001 :     
    STEVIE.80X30........ >7F10 :     
    STEVIE.80X60........ >7F1A :     
    STRING.GETLENC...... >2B08 :     
    STRING.GETLENC.EXIT. >2B54 :     
    STRING.GETLENC.LOOP. >2B36 :     
    STRING.GETLENC.PANIC >2B4C :     
    STRING.GETLENC.PUTLENGTH >2B44 :     
    STRING.LTRIM........ >2A9C :     
    STRING.LTRIM.EXIT... >2AFC :     
    STRING.LTRIM.MOVE... >2AE2 :     
    STRING.LTRIM.PANIC.. >2AF4 :     
    STRING.LTRIM.SCAN... >2AD6 :     
    TALKOF.............. >00FF :     
    TALKON.............. >0060 :     
    TASK.ONESHOT........ >38D8 :     
    TASK.ONESHOT.EXIT... >38E0 :     
    TASK.VDP.COPY.SAT... >3822 :     
    TASK.VDP.COPY.SAT.CMDB >384A :     
    TASK.VDP.COPY.SAT.EXIT >38B8 :     
    TASK.VDP.COPY.SAT.FB >385A :     
    TASK.VDP.COPY.SAT.FB.NORULER >386E :     
    TASK.VDP.COPY.SAT.HIDE.INDICATORS >38A4 :     
    TASK.VDP.COPY.SAT.WRITE >3872 :     
    TASK.VDP.COPY.SAT.WRITE2 >38AE :     
    TASK.VDP.CURSOR..... >38C4 :     
    TASK.VDP.CURSOR.EXIT >38D2 :     
    TIB.AUTOUNPK........ >A0C0 :     
    TIB.AUX............. >FF00 :     
    TIB.AUX.END......... >FFFA :     
    TIB.AUX.FNAME....... >FF00 :     
    TIB.LINES........... >A0D2 :     
    TIB.LNT.BOT.PTR..... >A0C8 :     
    TIB.LNT.TOP.PTR..... >A0C6 :     
    TIB.RETURN.PAGE_IN.. >65FC :     
    TIB.RUN............. >61CA :     
    TIB.RUN.INIT.BASIC1. >6232 :     
    TIB.RUN.INIT.BASIC2. >6254 :     
    TIB.RUN.INIT.BASIC3. >6276 :     
    TIB.RUN.INIT.BASIC4. >6294 :     
    TIB.RUN.INIT.BASIC5. >62B2 :     
    TIB.RUN.INIT.REST... >62D0 :     
    TIB.RUN.RESUME.BASIC1 >634E :     
    TIB.RUN.RESUME.BASIC2 >635E :     
    TIB.RUN.RESUME.BASIC3 >636E :     
    TIB.RUN.RESUME.BASIC4 >637E :     
    TIB.RUN.RESUME.BASIC5 >638E :     
    TIB.RUN.RESUME.PART2 >639C :     
    TIB.RUN.RESUME.SCRPAD >63BE :     
    TIB.RUN.RESUME.VDP.. >63AA :     
    TIB.RUN.RETURN...... >6544 :     
    TIB.RUN.RETURN.1.... >655E :     
    TIB.RUN.RETURN.2.... >657C :     
    TIB.RUN.RETURN.3.... >659A :     
    TIB.RUN.RETURN.4.... >65B8 :     
    TIB.RUN.RETURN.5.... >65D6 :     
    TIB.RUN.RETURN.DATA.SAMSPAGE >6690 :     
    TIB.RUN.RETURN.EXIT. >6684 :     
    TIB.RUN.RETURN.FAILED >65F4 :     
    TIB.RUN.RETURN.MON.. >64D8 :     
    TIB.RUN.RETURN.MON.CONT >650C :     
    TIB.RUN.RETURN.STEVIE >6630 :     
    TIB.RUN.RETURN.VDPDUMP >6622 :     
    TIB.SAMSTAB.PTR..... >A0EA :     
    TIB.SCRPAD.PTR...... >A0C4 :     
    TIB.SESSION......... >A0B4 :     
    TIB.STAB.PTR........ >A0C2 :     
    TIB.STATUS1......... >A0B6 :     
    TIB.STATUS2......... >A0B8 :     
    TIB.STATUS3......... >A0BA :     
    TIB.STATUS4......... >A0BC :     
    TIB.STATUS5......... >A0BE :     
    TIB.STRS.BOT.PTR.... >A0D0 :     
    TIB.STRS.TOP.PTR.... >A0CE :     
    TIB.SYMT.BOT.PTR.... >A0CC :     
    TIB.SYMT.TOP.PTR.... >A0CA :     
    TIB.TOKENINDEX...... >6F72 :     
    TIB.UNCRNCH.PRG.COPY.STATEMENT >6930 :     
    TIB.UNCRNCH.PRG.STATEMENT.LOOP.PANIC >6928 :     
    TIB.UNCRUNCH........ >66CA :     
    TIB.UNCRUNCH.EXIT... >673E :     
    TIB.UNCRUNCH.LINE.PACK >6B46 :     
    TIB.UNCRUNCH.LINE.PACK.COPYLINE >6B92 :     
    TIB.UNCRUNCH.LINE.PACK.COPYLINE.ALIGN16 >6BAC :     
    TIB.UNCRUNCH.LINE.PACK.COPYLINE.BLOCK >6BA8 :     
    TIB.UNCRUNCH.LINE.PACK.COPYLINE.CHECKBYTE >6B9E :     
    TIB.UNCRUNCH.LINE.PACK.EXIT >6BD2 :     
    TIB.UNCRUNCH.LINE.PACK.PREPEXIT >6BBE :     
    TIB.UNCRUNCH.PREPARE >6752 :     
    TIB.UNCRUNCH.PREPARE.2 >6792 :     
    TIB.UNCRUNCH.PREPARE.5 >67E8 :     
    TIB.UNCRUNCH.PREPARE.EXIT >6816 :     
    TIB.UNCRUNCH.PREPARE.NP >67E4 :     
    TIB.UNCRUNCH.PRG.... >6820 :     
    TIB.UNCRUNCH.PRG.DONE >6950 :     
    TIB.UNCRUNCH.PRG.EXIT >6968 :     
    TIB.UNCRUNCH.PRG.LNT.LOOP >6854 :     
    TIB.UNCRUNCH.PRG.STATEMENT.LOOP >68EA :     
    TIB.UNCRUNCH.PRG.STATEMENT.LOOP.NONTOKEN >6910 :     
    TIB.UNCRUNCH.TOKEN.. >69A4 :     
    TIB.UNCRUNCH.TOKEN.EXIT >6B30 :     
    TIB.UNCRUNCH.TOKEN.LINENUM >6AC0 :     
    TIB.UNCRUNCH.TOKEN.LOOKUP >69EC :     
    TIB.UNCRUNCH.TOKEN.QUOTED >6A34 :     
    TIB.UNCRUNCH.TOKEN.QUOTED.QUOTE2 >6A60 :     
    TIB.UNCRUNCH.TOKEN.SETLEN >6B26 :     
    TIB.UNCRUNCH.TOKEN.UNQUOTED >6A80 :     
    TIB.VAR1............ >A0EC :     
    TIB.VAR10........... >A0FE :     
    TIB.VAR2............ >A0EE :     
    TIB.VAR3............ >A0F0 :     
    TIB.VAR4............ >A0F2 :     
    TIB.VAR5............ >A0F4 :     
    TIB.VAR6............ >A0F6 :     
    TIB.VAR7............ >A0F8 :     
    TIB.VAR8............ >A0FA :     
    TIB.VAR9............ >A0FC :     
    TIBASIC.32X24....... >7F24 :     
    TIBASIC.32X30....... >7F2E :     
    TIBASIC.BUILDSTR.... >6C28 :     
    TIBASIC.PATTERNS.... >63E8 :     
    TIBASIC.RESUME.LOAD. >63D0 :     
    TIBASIC.SCRPAD.83D4. >63E0 :     
    TIBASIC.SCRPAD.83FA. >63E2 :     
    TIBASIC.SCRPAD.83FC. >63E4 :     
    TIBASIC.SCRPAD.83FE. >63E6 :     
    TIMERS.............. >A064 :     
    TK.00............... >6CDE :     
    TK.01............... >6CE4 :     
    TK.02............... >6CEA :     
    TK.02L.............. >6CF0 :     
    TK.03............... >6CFA :     
    TK.04............... >6D00 :     
    TK.05............... >6D06 :     
    TK.05L.............. >6D0C :     
    TK.06............... >6D14 :     
    TK.07............... >6D1A :     
    TK.07L.............. >6D20 :     
    TK.08............... >6D2C :     
    TK.09............... >6D32 :     
    TK.81............... >6D38 :     
    TK.84............... >6D40 :     
    TK.85............... >6D44 :     
    TK.86............... >6D48 :     
    TK.87............... >6D4E :     
    TK.88............... >6D56 :     
    TK.89............... >6D5E :     
    TK.8A............... >6D64 :     
    TK.8B............... >6D6A :     
    TK.8C............... >6D70 :     
    TK.8D............... >6D76 :     
    TK.8E............... >6D7C :     
    TK.8F............... >6D84 :     
    TK.90............... >6D8E :     
    TK.91............... >6D96 :     
    TK.92............... >6DA0 :     
    TK.93............... >6DA8 :     
    TK.94............... >6DAE :     
    TK.95............... >6DB8 :     
    TK.96............... >6DC4 :     
    TK.97............... >6DCA :     
    TK.98............... >6DD0 :     
    TK.99............... >6DD6 :     
    TK.9A............... >6DDE :     
    TK.9B............... >6DE4 :     
    TK.9C............... >6DE8 :     
    TK.9D............... >6DF0 :     
    TK.9E............... >6DF6 :     
    TK.9F............... >6DFE :     
    TK.A0............... >6E04 :     
    TK.A1............... >6E0C :     
    TK.A2............... >6E12 :     
    TK.B0............... >6E1C :     
    TK.B1............... >6E24 :     
    TK.B2............... >6E2A :     
    TK.B3............... >6E32 :     
    TK.B4............... >6E36 :     
    TK.B5............... >6E3A :     
    TK.B6............... >6E3E :     
    TK.B7............... >6E42 :     
    TK.B8............... >6E46 :     
    TK.BE............... >6E4A :     
    TK.BF............... >6E4E :     
    TK.C0............... >6E52 :     
    TK.C1............... >6E56 :     
    TK.C2............... >6E5A :     
    TK.C3............... >6E5E :     
    TK.C4............... >6E62 :     
    TK.C5............... >6E66 :     
    TK.C7............... >6E6A :     
    TK.C8............... >6E6E :     
    TK.C9............... >6E72 :     
    TK.CA............... >6E76 :     
    TK.CB............... >6E7C :     
    TK.CC............... >6E82 :     
    TK.CD............... >6E88 :     
    TK.CE............... >6E8E :     
    TK.CF............... >6E94 :     
    TK.D0............... >6E9A :     
    TK.D1............... >6EA0 :     
    TK.D2............... >6EA6 :     
    TK.D3............... >6EAC :     
    TK.D4............... >6EB2 :     
    TK.D5............... >6EB8 :     
    TK.D6............... >6EBE :     
    TK.D7............... >6EC4 :     
    TK.D8............... >6ECA :     
    TK.D9............... >6ED0 :     
    TK.DA............... >6ED6 :     
    TK.DB............... >6EDC :     
    TK.DC............... >6EE2 :     
    TK.DE............... >6EE8 :     
    TK.F1............... >6EEE :     
    TK.F3............... >6EF4 :     
    TK.F4............... >6EFE :     
    TK.F5............... >6F08 :     
    TK.F6............... >6F12 :     
    TK.F7............... >6F1E :     
    TK.F8............... >6F26 :     
    TK.F9............... >6F2E :     
    TK.FA............... >6F36 :     
    TK.FB............... >6F3E :     
    TK.FC............... >6F4A :     
    TK.FD............... >6F50 :     
    TK.NOOP............. >6F54 :     
    TKI.00.............. >6F58 :     
    TKI.01.............. >6F5A :     
    TKI.02.............. >6F5C :     
    TKI.02L............. >6F5E :     
    TKI.03.............. >6F60 :     
    TKI.04.............. >6F62 :     
    TKI.05.............. >6F64 :     
    TKI.05L............. >6F66 :     
    TKI.06.............. >6F68 :     
    TKI.07.............. >6F6A :     
    TKI.07L............. >6F6C :     
    TKI.08.............. >6F6E :     
    TKI.09.............. >6F70 :     
    TKI.80.............. >6F72 :     
    TKI.81.............. >6F74 :     
    TKI.82.............. >6F76 :     
    TKI.83.............. >6F78 :     
    TKI.84.............. >6F7A :     
    TKI.85.............. >6F7C :     
    TKI.86.............. >6F7E :     
    TKI.87.............. >6F80 :     
    TKI.88.............. >6F82 :     
    TKI.89.............. >6F84 :     
    TKI.8A.............. >6F86 :     
    TKI.8B.............. >6F88 :     
    TKI.8C.............. >6F8A :     
    TKI.8D.............. >6F8C :     
    TKI.8E.............. >6F8E :     
    TKI.8F.............. >6F90 :     
    TKI.90.............. >6F92 :     
    TKI.91.............. >6F94 :     
    TKI.92.............. >6F96 :     
    TKI.93.............. >6F98 :     
    TKI.94.............. >6F9A :     
    TKI.95.............. >6F9C :     
    TKI.96.............. >6F9E :     
    TKI.97.............. >6FA0 :     
    TKI.98.............. >6FA2 :     
    TKI.99.............. >6FA4 :     
    TKI.9A.............. >6FA6 :     
    TKI.9B.............. >6FA8 :     
    TKI.9C.............. >6FAA :     
    TKI.9D.............. >6FAC :     
    TKI.9E.............. >6FAE :     
    TKI.9F.............. >6FB0 :     
    TKI.A0.............. >6FB2 :     
    TKI.A1.............. >6FB4 :     
    TKI.A2.............. >6FB6 :     
    TKI.A3.............. >6FB8 :     
    TKI.A4.............. >6FBA :     
    TKI.A5.............. >6FBC :     
    TKI.A6.............. >6FBE :     
    TKI.A7.............. >6FC0 :     
    TKI.A8.............. >6FC2 :     
    TKI.A9.............. >6FC4 :     
    TKI.AA.............. >6FC6 :     
    TKI.AB.............. >6FC8 :     
    TKI.AC.............. >6FCA :     
    TKI.AD.............. >6FCC :     
    TKI.AE.............. >6FCE :     
    TKI.AF.............. >6FD0 :     
    TKI.B0.............. >6FD2 :     
    TKI.B1.............. >6FD4 :     
    TKI.B2.............. >6FD6 :     
    TKI.B3.............. >6FD8 :     
    TKI.B4.............. >6FDA :     
    TKI.B5.............. >6FDC :     
    TKI.B6.............. >6FDE :     
    TKI.B7.............. >6FE0 :     
    TKI.B8.............. >6FE2 :     
    TKI.B9.............. >6FE4 :     
    TKI.BA.............. >6FE6 :     
    TKI.BB.............. >6FE8 :     
    TKI.BC.............. >6FEA :     
    TKI.BD.............. >6FEC :     
    TKI.BE.............. >6FEE :     
    TKI.BF.............. >6FF0 :     
    TKI.C0.............. >6FF2 :     
    TKI.C1.............. >6FF4 :     
    TKI.C2.............. >6FF6 :     
    TKI.C3.............. >6FF8 :     
    TKI.C4.............. >6FFA :     
    TKI.C5.............. >6FFC :     
    TKI.C6.............. >6FFE :     
    TKI.C7.............. >7000 :     
    TKI.C8.............. >7002 :     
    TKI.C9.............. >7004 :     
    TKI.CA.............. >7006 :     
    TKI.CB.............. >7008 :     
    TKI.CC.............. >700A :     
    TKI.CD.............. >700C :     
    TKI.CE.............. >700E :     
    TKI.CF.............. >7010 :     
    TKI.D0.............. >7012 :     
    TKI.D1.............. >7014 :     
    TKI.D2.............. >7016 :     
    TKI.D3.............. >7018 :     
    TKI.D4.............. >701A :     
    TKI.D5.............. >701C :     
    TKI.D6.............. >701E :     
    TKI.D7.............. >7020 :     
    TKI.D8.............. >7022 :     
    TKI.D9.............. >7024 :     
    TKI.DA.............. >7026 :     
    TKI.DB.............. >7028 :     
    TKI.DC.............. >702A :     
    TKI.DD.............. >702C :     
    TKI.DE.............. >702E :     
    TKI.DF.............. >7030 :     
    TKI.E0.............. >7032 :     
    TKI.E1.............. >7034 :     
    TKI.E2.............. >7036 :     
    TKI.E3.............. >7038 :     
    TKI.E4.............. >703A :     
    TKI.E5.............. >703C :     
    TKI.E6.............. >703E :     
    TKI.E7.............. >7040 :     
    TKI.E8.............. >7042 :     
    TKI.E9.............. >7044 :     
    TKI.EA.............. >7046 :     
    TKI.EB.............. >7048 :     
    TKI.EC.............. >704A :     
    TKI.ED.............. >704C :     
    TKI.EE.............. >704E :     
    TKI.EF.............. >7050 :     
    TKI.F0.............. >7052 :     
    TKI.F1.............. >7054 :     
    TKI.F2.............. >7056 :     
    TKI.F3.............. >7058 :     
    TKI.F4.............. >705A :     
    TKI.F5.............. >705C :     
    TKI.F6.............. >705E :     
    TKI.F7.............. >7060 :     
    TKI.F8.............. >7062 :     
    TKI.F9.............. >7064 :     
    TKI.FA.............. >7066 :     
    TKI.FB.............. >7068 :     
    TKI.FC.............. >706A :     
    TKI.FD.............. >706C :     
    TKI.FE.............. >706E :     
    TKI.FF.............. >7070 :     
    TMDAT............... >2F0E :     
    TMGR................ >2E72 :     
    TMGR1............... >2E76 :     
    TMGR10.............. >2EF6 :     
    TMGR11.............. >2F04 :     
    TMGR12.............. >2F08 :     
    TMGR1A.............. >2E84 :     
    TMGR2............... >2E8A :     
    TMGR3............... >2E9A :     
    TMGR4............... >2EAC :     
    TMGR5............... >2EC2 :     
    TMGR6............... >2EC6 :     
    TMGR7............... >2ECA :     
    TMGR8............... >2ECC :     
    TMGR9............... >2ED4 :     
    TMP0................ >0004 :     
    TMP006.............. >23E2 :     
    TMP007.............. >24F6 :     
    TMP008.............. >24D4 :     
    TMP011.............. >2558 :     
    TMP0HB.............. >8308 :     
    TMP0LB.............. >8309 :     
    TMP1................ >0005 :     
    TMP1HB.............. >830A :     
    TMP1LB.............. >830B :     
    TMP2................ >0006 :     
    TMP2HB.............. >830C :     
    TMP2LB.............. >830D :     
    TMP3................ >0007 :     
    TMP3HB.............. >830E :     
    TMP3LB.............. >830F :     
    TMP4................ >0008 :     
    TMP4HB.............. >8310 :     
    TMP4LB.............. >8311 :     
    TRIMNUM............. >2A6C :     
    TRIMNUM_FILL........ >2A8A :     
    TRIMNUM_SCAN........ >2A78 :     
    TRIMNUM_SETLEN...... >2A84 :     
    TRMPVECTOR.......... >A034 :     
    TV.1TIMEONLY........ >00FE :     
    TV.BUSYCOLOR........ >A21C :     
    TV.CAT.FNAME........ >DF20 :     
    TV.CLIP.FNAME....... >DE50 :     
    TV.CMDB.HCOLOR...... >A220 :     
    TV.COLOR............ >A218 :     
    TV.COLORIZE.RESET... >9900 :     
    TV.COLORSCHEME...... >A212 :     
    TV.COLORSCHEME.ENTRIES >000C :     
    TV.COLORSCHEME.TABLE >38F2 :     
    TV.CURCOLOR......... >A216 :     
    TV.CURSHAPE......... >A214 :     
    TV.ERROR.MSG........ >A238 :     
    TV.ERROR.ROWS....... >A22C :     
    TV.ERROR.VISIBLE.... >A22A :     
    TV.FG99.IMG.PTR..... >A232 :     
    TV.FJ.STACKPNT...... >A228 :     
    TV.FONT.PTR......... >A222 :     
    TV.FREE............. >A2D8 :     
    TV.INIT............. >338C :     
    TV.INIT.EXIT........ >33E2 :     
    TV.LINETERM......... >A236 :     
    TV.MARKCOLOR........ >A21A :     
    TV.MC.FNAME......... >DEA0 :     
    TV.PAD.STRING....... >34BE :     
    TV.PAD.STRING.EXIT.. >352A :     
    TV.PAD.STRING.LOOP.. >3514 :     
    TV.PAD.STRING.PANIC. >3522 :     
    TV.PANE.FOCUS....... >A224 :     
    TV.PRINTER.FNAME.... >DE00 :     
    TV.QUIT............. >33EC :     
    TV.RESET............ >61A0 :     
    TV.RESET.EXIT....... >61C6 :     
    TV.RULER.VISIBLE.... >A210 :     
    TV.RULERCOLOR....... >A21E :     
    TV.SAMS.2000........ >A200 :     
    TV.SAMS.3000........ >A202 :     
    TV.SAMS.A000........ >A204 :     
    TV.SAMS.B000........ >A206 :     
    TV.SAMS.C000........ >A208 :     
    TV.SAMS.D000........ >A20A :     
    TV.SAMS.E000........ >A20C :     
    TV.SAMS.F000........ >A20E :     
    TV.SAMS.MAXPAGE..... >0100 :     
    TV.SP2.CONF......... >A22E :     
    TV.SP2.STACK........ >A230 :     
    TV.SPECMSG.PTR...... >A234 :     
    TV.STRUCT........... >A200 :     
    TV.TABS.TABLE.LR.... >3952 :     
    TV.TABS.TABLE.RL.... >395E :     
    TV.TASK.ONESHOT..... >A226 :     
    TV.UINT16.MPY....... >3488 :     
    TV.UINT16.PACK...... >33FA :     
    TV.UINT16.PACK.DONE. >3474 :     
    TV.UINT16.PACK.ERROR >346C :     
    TV.UINT16.PACK.EXIT. >3478 :     
    TV.UINT16.PACK.LOOP. >3442 :     
    TV.UINT16.UNPACK.... >3492 :     
    TV.UINT16.UNPACK.EXIT >34B8 :     
    TX4024.............. >21FC :     
    TX8024.............. >2206 :     
    TXT.ALPHA.DOWN...... >3C82 :     
    TXT.AUTOINS.OFF..... >3B2E :     
    TXT.AUTOINS.ON...... >3B1E :     
    TXT.AUTOINSERT...... >3998 :     
    TXT.BLOCK.CLIP...... >3A1E :     
    TXT.BLOCK.COPY...... >39E0 :     
    TXT.BLOCK.DEL....... >39CC :     
    TXT.BLOCK.INSIDE.... >3D78 :     
    TXT.BLOCK.MOVE...... >39F2 :     
    TXT.BLOCK.PRINT..... >3A38 :     
    TXT.BLOCK.SAVE...... >3A04 :     
    TXT.BOTTOM.......... >3986 :     
    TXT.CLEARMEM........ >3A4C :     
    TXT.CMDB.PROMPT..... >3DA6 :     
    TXT.COLORSCHEME..... >3DA8 :     
    TXT.DELIM........... >3984 :     
    TXT.DONE.APPEND..... >3A98 :     
    TXT.DONE.CLIPBOARD.. >3AEC :     
    TXT.DONE.CLIPDEV.... >3AFC :     
    TXT.DONE.COPY....... >3ABA :     
    TXT.DONE.DELETE..... >3ADA :     
    TXT.DONE.INSERT..... >3A86 :     
    TXT.DONE.LOAD....... >3A76 :     
    TXT.DONE.MC......... >3B0A :     
    TXT.DONE.PRINT...... >3ACA :     
    TXT.DONE.SAVE....... >3AAA :     
    TXT.FASTMODE........ >3B3E :     
    TXT.FILETYPE.DV80... >3BC6 :     
    TXT.FILETYPE.NONE... >3C90 :     
    TXT.INSERT.......... >3992 :     
    TXT.IO.NOFILE....... >3D32 :     
    TXT.IOERR.LOAD...... >3CEA :     
    TXT.IOERR.PRINT..... >3D16 :     
    TXT.IOERR.SAVE...... >3D00 :     
    TXT.KB.............. >3B6A :     
    TXT.KEYMARKER....... >3C88 :     
    TXT.KEYS.BASIC1..... >3C54 :     
    TXT.KEYS.BLOCK...... >3C1E :     
    TXT.KEYS.DEFAULT.... >3BD4 :     
    TXT.KEYS.DEFAULTB... >3BF4 :     
    TXT.LINES........... >3B6E :     
    TXT.LOADING......... >39A0 :     
    TXT.M1.............. >3BCC :     
    TXT.M2.............. >3BD0 :     
    TXT.MEMFULL.LOAD.... >3D4A :     
    TXT.MSG.MASTCAT..... >3C96 :     
    TXT.MSG.TIBASIC..... >3CCC :     
    TXT.NEWFILE......... >3B74 :     
    TXT.OVRWRITE........ >398C :     
    TXT.PRINTING........ >39B8 :     
    TXT.READDIR......... >3A60 :     
    TXT.SAVING.......... >39AC :     
    TXT.STAR............ >399E :     
    TXT.TIB1............ >3B80 :     
    TXT.TIB2............ >3B8E :     
    TXT.TIB3............ >3B9C :     
    TXT.TIB4............ >3BAA :     
    TXT.TIB5............ >3BB8 :     
    TXT.UNCRUNCHING..... >3B4A :     
    TXT.VERTLINE........ >3C86 :     
    TXT.WS1............. >3C8A :     
    TXT.WS2............. >3C8C :     
    TXT.WS4............. >3C90 :     
    UINT16.PACKED....... >A032 :     
    UINT16.UNPACKED..... >A02C :     
    UP.................. >26F2 :     
    VCHAR............... >2818 :     
    VCHAR1.............. >281E :     
    VCHAR2.............. >282C :     
    VCHAR3.............. >2844 :     
    VDP.FB.TOPROW.SIT... >0050 :     
    VDP.FB.TOPROW.TAT... >1850 :     
    VDP.PDT.BASE........ >1000 :     
    VDP.SIT.BASE........ >0000 :     
    VDP.SIT.SIZE........ >0960 :     
    VDP.TAT.BASE........ >1800 :     
    VDP.TAT.SIZE........ >0960 :     
    VDPA................ >8C02 :     
    VDPLA1.............. >28CE :     
    VDPLA2.............. >28D4 :     
    VDPLA3.............. >28E4 :     
    VDPLAY.............. >28B6 :     
    VDPR................ >8800 :     
    VDPR0............... >831C :     
    VDPR01.............. >000E :     
    VDPR1............... >831D :     
    VDPRW............... >000F :     
    VDPS................ >8802 :     
    VDPW................ >8C00 :     
    VDRA................ >22BA :     
    VDWA................ >22B6 :     
    VEC.1............... >7F40 :     
    VEC.10.............. >7F52 :     
    VEC.11.............. >7F54 :     
    VEC.12.............. >7F56 :     
    VEC.13.............. >7F58 :     
    VEC.14.............. >7F5A :     
    VEC.15.............. >7F5C :     
    VEC.16.............. >7F5E :     
    VEC.17.............. >7F60 :     
    VEC.18.............. >7F62 :     
    VEC.19.............. >7F64 :     
    VEC.2............... >7F42 :     
    VEC.20.............. >7F66 :     
    VEC.21.............. >7F68 :     
    VEC.22.............. >7F6A :     
    VEC.23.............. >7F6C :     
    VEC.24.............. >7F6E :     
    VEC.25.............. >7F70 :     
    VEC.26.............. >7F72 :     
    VEC.27.............. >7F74 :     
    VEC.28.............. >7F76 :     
    VEC.29.............. >7F78 :     
    VEC.3............... >7F44 :     
    VEC.30.............. >7F7A :     
    VEC.31.............. >7F7C :     
    VEC.32.............. >7F7E :     
    VEC.33.............. >7F80 :     
    VEC.34.............. >7F82 :     
    VEC.35.............. >7F84 :     
    VEC.36.............. >7F86 :     
    VEC.37.............. >7F88 :     
    VEC.38.............. >7F8A :     
    VEC.39.............. >7F8C :     
    VEC.4............... >7F46 :     
    VEC.40.............. >7F8E :     
    VEC.41.............. >7F90 :     
    VEC.42.............. >7F92 :     
    VEC.43.............. >7F94 :     
    VEC.44.............. >7F96 :     
    VEC.45.............. >7F98 :     
    VEC.46.............. >7F9A :     
    VEC.47.............. >7F9C :     
    VEC.48.............. >7F9E :     
    VEC.49.............. >7FA0 :     
    VEC.5............... >7F48 :     
    VEC.50.............. >7FA2 :     
    VEC.51.............. >7FA4 :     
    VEC.52.............. >7FA6 :     
    VEC.53.............. >7FA8 :     
    VEC.54.............. >7FAA :     
    VEC.55.............. >7FAC :     
    VEC.56.............. >7FAE :     
    VEC.57.............. >7FB0 :     
    VEC.58.............. >7FB2 :     
    VEC.59.............. >7FB4 :     
    VEC.6............... >7F4A :     
    VEC.60.............. >7FB6 :     
    VEC.61.............. >7FB8 :     
    VEC.62.............. >7FBA :     
    VEC.63.............. >7FBC :     
    VEC.64.............. >7FBE :     
    VEC.65.............. >7FC0 :     
    VEC.66.............. >7FC2 :     
    VEC.67.............. >7FC4 :     
    VEC.68.............. >7FC6 :     
    VEC.69.............. >7FC8 :     
    VEC.7............... >7F4C :     
    VEC.70.............. >7FCA :     
    VEC.71.............. >7FCC :     
    VEC.72.............. >7FCE :     
    VEC.73.............. >7FD0 :     
    VEC.74.............. >7FD2 :     
    VEC.75.............. >7FD4 :     
    VEC.76.............. >7FD6 :     
    VEC.77.............. >7FD8 :     
    VEC.78.............. >7FDA :     
    VEC.79.............. >7FDC :     
    VEC.8............... >7F4E :     
    VEC.80.............. >7FDE :     
    VEC.81.............. >7FE0 :     
    VEC.82.............. >7FE2 :     
    VEC.83.............. >7FE4 :     
    VEC.84.............. >7FE6 :     
    VEC.85.............. >7FE8 :     
    VEC.86.............. >7FEA :     
    VEC.87.............. >7FEC :     
    VEC.88.............. >7FEE :     
    VEC.89.............. >7FF0 :     
    VEC.9............... >7F50 :     
    VEC.90.............. >7FF2 :     
    VEC.91.............. >7FF4 :     
    VEC.92.............. >7FF6 :     
    VEC.93.............. >7FF8 :     
    VEC.94.............. >7FFA :     
    VEC.95.............. >7FFC :     
    VEC.96.............. >7FFE :     
    VGETB............... >22E2 :     
    VIDTA1.............. >2314 :     
    VIDTAB.............. >22F8 :     
    VPUTB............... >22C8 :     
    WAUX1............... >833C :     
    WAUX2............... >833E :     
    WAUX3............... >8340 :     
    WBASE............... >8328 :     
    WBIT0............... >2020 :     
    WBIT1............... >201E :     
    WBIT10.............. >200C :     
    WBIT11.............. >200A :     
    WBIT12.............. >2008 :     
    WBIT13.............. >2006 :     
    WBIT14.............. >2004 :     
    WBIT15.............. >2002 :     
    WBIT2............... >201C :     
    WBIT3............... >201A :     
    WBIT4............... >2018 :     
    WBIT5............... >2016 :     
    WBIT6............... >2014 :     
    WBIT7............... >2012 :     
    WBIT8............... >2010 :     
    WBIT9............... >200E :     
    WCOLMN.............. >833A :     
    WS1................. >8300 :     
    WSDLST.............. >8334 :     
    WSDTMP.............. >8336 :     
    WSPEAK.............. >8338 :     
    WTITAB.............. >832C :     
    WTITMP.............. >8330 :     
    WTIUSR.............. >832E :     
    WVRTKB.............. >8332 :     
    WYX................. >832A :     
    XCONFIG............. >0003 :     
    XCPU.SCRPAD.PGIN.... >2BE6 :     
    XCPU.SCRPAD.PGOUT... >2BB8 :     
    XFG99............... >2E34 :     
    XFILE.CLOSE......... >2DA0 :     
    XFILE.OPEN.......... >2D7E :     
    XFILM............... >223C :     
    XFILV............... >2294 :     
    XIDTAB.............. >22FA :     
    XLSLOT.............. >2F5A :     
    XPYM2M.............. >24FE :     
    XPYM2V.............. >24AA :     
    XPYV2M.............. >24DC :     
    XROM.FARJUMP........ >3050 :     
    XROM.FARJUMP.PUSH_RETURN >3060 :     
    XSAMS.LAYOUT........ >260E :     
    XSAMS.PAGE.GET...... >255C :     
    XSAMS.PAGE.SET...... >2594 :     
    XSETX............... >26FC :     
    XSTRING.GETLENC..... >2B22 :     
    XSTRING.LTRIM....... >2AB8 :     
    XUTST0.............. >2420 :     
    XUTSTR.............. >2422 :     
    XVCHA1.............. >2858 :     
    XVCHAR.............. >2848 :     
    XVGETB.............. >22E4 :     
    XVPUTB.............. >22CC :     
    YX2PI1.............. >2734 :     
    YX2PI2.............. >273A :     
    YX2PI3.............. >2744 :     
    YX2PNT.............. >23FA :     
    YX2PX............... >2706 :     
    YX2PXX.............. >270A :     
    YX2PXX_C80.......... >2746 :     
    YX2PXX_NORMAL....... >272A :     
    YX2PXX_Y_CALC....... >272E :     
    _FILE.RECORD.FOP.... >2DDC :     
    _FILE.RECORD.FOP.EXIT >2E2E :     
    _FILE.RECORD.FOP.OPTIMIZED >2E12 :     
    _FILE.RECORD.FOP.PAB >2E16 :     
    _IDX.ENTRY.DELETE.REORG >35D4 :     
    _IDX.ENTRY.DELETE.REORG.LOOP >35DC :     
    _IDX.ENTRY.INSERT.REORG >3648 :     
    _IDX.ENTRY.INSERT.REORG.CRASH >364E :     
    _IDX.ENTRY.INSERT.REORG.LOOP >3676 :     
    _IDX.SAMS.MAPCOLUMN.OFF >322A :     
    _IDX.SAMS.MAPCOLUMN.OFF.EXIT >3258 :     
    _IDX.SAMS.MAPCOLUMN.ON >31F6 :     
    _IDX.SAMS.MAPCOLUMN.ON.EXIT >3220 :     
    _IDX.SAMSPAGE.GET... >3264 :     
    _IDX.SAMSPAGE.GET.EXIT >32AA :     
    _MEM.SAMS.SET.BANKS. >60A2 :     
    _V2SAMS............. >6692 :     
    _V2SAMS.EXIT........ >66C2 :     
