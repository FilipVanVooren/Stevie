XAS99 CROSS-ASSEMBLER   VERSION 3.4.0
     **** ****     > stevie_b7.asm
0001               ***************************************************************
0002               *                          Stevie
0003               *
0004               *       A 21th century Programming Editor for the 1981
0005               *         Texas Instruments TI-99/4a Home Computer.
0006               *
0007               *              (c)2018-2022 // Filip van Vooren
0008               ***************************************************************
0009               * File: stevie_b7.asm
0010               *
0011               * Bank 7 "Jonas"
0012               * SAMS and TI Basic support routines
0013               ***************************************************************
0014                       copy  "buildinfo.asm"       ; "build/.buildinfo/buildinfo.asm"
     **** ****     > buildinfo.asm
0001               ***************************************************************
0002               * BUILD: 220722-1415110
0003               ***************************************************************
                   < stevie_b7.asm
0015                       copy  "rom.build.asm"       ; Cartridge build options
     **** ****     > rom.build.asm
0001               * FILE......: rom.build.asm
0002               * Purpose...: Cartridge build options
0003               
0004               *--------------------------------------------------------------
0005               * Skip unused spectra2 code modules for reduced code size
0006               *--------------------------------------------------------------
0007      0001     skip_rom_bankswitch       equ  1       ; Skip support for ROM bankswitching
0008      0001     skip_grom_cpu_copy        equ  1       ; Skip GROM to CPU copy functions
0009      0001     skip_grom_vram_copy       equ  1       ; Skip GROM to VDP vram copy functions
0010      0001     skip_vdp_vchar            equ  1       ; Skip vchar, xvchar
0011      0001     skip_vdp_boxes            equ  1       ; Skip filbox, putbox
0012      0001     skip_vdp_bitmap           equ  1       ; Skip bitmap functions
0013      0001     skip_vdp_viewport         equ  1       ; Skip viewport functions
0014      0001     skip_cpu_rle_compress     equ  1       ; Skip CPU RLE compression
0015      0001     skip_cpu_rle_decompress   equ  1       ; Skip CPU RLE decompression
0016      0001     skip_vdp_rle_decompress   equ  1       ; Skip VDP RLE decompression
0017      0001     skip_vdp_px2yx_calc       equ  1       ; Skip pixel to YX calculation
0018      0001     skip_speech_detection     equ  1       ; Skip speech synthesizer detection
0019      0001     skip_speech_player        equ  1       ; Skip inclusion of speech player code
0020      0001     skip_virtual_keyboard     equ  1       ; Skip virtual keyboard scan
0021      0001     skip_random_generator     equ  1       ; Skip random functions
0022      0001     skip_cpu_crc16            equ  1       ; Skip CPU memory CRC-16 calculation
0023      0001     skip_sams_layout          equ  1       ; Skip SAMS memory layout routine
0024                                                      ; \
0025                                                      ; | The SAMS support module needs to be
0026                                                      ; | embedded in the cartridge space, so
0027                                                      ; / do not load it here.
0028               
0029               *--------------------------------------------------------------
0030               * SPECTRA2 / Stevie startup options
0031               *--------------------------------------------------------------
0032      0001     startup_keep_vdpmemory    equ  1       ; Do not clear VDP vram on start
0033      6038     kickstart.resume          equ  >6038   ; Resume Stevie session
0034      6040     kickstart.code1           equ  >6040   ; Uniform aorg entry addr accross banks
0035      6046     kickstart.code2           equ  >6046   ; Uniform aorg entry addr accross banks
0036      0001     rom0_kscan_on             equ  1       ; Use KSCAN in console ROM#0
0037               
0038               
0039               
0040               *--------------------------------------------------------------
0041               * classic99 and JS99er emulators are mutually exclusive.
0042               * At the time of writing JS99er has full F18a compatibility.
0043               *
0044               * If build target is the JS99er emulator or an F18a equiped TI-99/4a
0045               * then set the 'full_f18a_support' equate to 1.
0046               *
0047               * When targetting the classic99 emulator then set the
0048               * 'full_f18a_support' equate to 0.
0049               * This will build the trimmed down version with 24x80 resolution.
0050               *--------------------------------------------------------------
0051      0000     debug                     equ  0       ; Turn on debugging mode
0052               ; full_f18a_support       equ  1       ; 30 rows mode with sprite cursor
0053               ; full_f18a_support       equ  0       ; 24 rows mode with char cursor
0054               
0055               *--------------------------------------------------------------
0056               * JS99er F18a 30x80, no FG99 advanced mode
0057               *--------------------------------------------------------------
0059      0001     device.f18a               equ  1       ; F18a GPU
0060      0000     device.9938               equ  0       ; 9938 GPU
0061      0000     device.fg99.mode.adv      equ  0       ; FG99 advanced mode off
0063               
0064               
0065               
0066               *--------------------------------------------------------------
0067               * Classic99 F18a 24x80, no FG99 advanced mode
0068               *--------------------------------------------------------------
0075               
0076               
0077               
0078               *--------------------------------------------------------------
0079               * ROM layout
0080               *--------------------------------------------------------------
0081      7F00     bankx.crash.showbank      equ  >7f00   ; Show ROM bank in CPU crash screen
0082      7FC0     bankx.vectab              equ  >7fc0   ; Start address of vector table
                   < stevie_b7.asm
0016                       copy  "rom.order.asm"       ; ROM bank order "non-inverted"
     **** ****     > rom.order.asm
0001               * FILE......: rom.order.asm
0002               * Purpose...: Equates with CPU write addresses for switching banks
0003               
0004               *--------------------------------------------------------------
0005               * ROM 8K/4K banks. Bank order (non-inverted)
0006               *--------------------------------------------------------------
0007      6000     bank0.rom                 equ  >6000   ; Jill
0008      6002     bank1.rom                 equ  >6002   ; James
0009      6004     bank2.rom                 equ  >6004   ; Jacky
0010      6006     bank3.rom                 equ  >6006   ; John
0011      6008     bank4.rom                 equ  >6008   ; Janine
0012      600A     bank5.rom                 equ  >600a   ; Jumbo
0013      600C     bank6.rom                 equ  >600c   ; Jenifer
0014      600E     bank7.rom                 equ  >600e   ; Jonas
0015               *--------------------------------------------------------------
0016               * RAM 4K banks (Only valid in advanced mode FG99)
0017               *--------------------------------------------------------------
0018      6800     bank0.ram                 equ  >6800   ; Jill
0019      6802     bank1.ram                 equ  >6802   ; James
0020      6804     bank2.ram                 equ  >6804   ; Jacky
0021      6806     bank3.ram                 equ  >6806   ; John
0022      6808     bank4.ram                 equ  >6808   ; Janine
0023      680A     bank5.ram                 equ  >680a   ; Jumbo
0024      680C     bank6.ram                 equ  >680c   ; Jenifer
0025      680E     bank7.ram                 equ  >680e   ; Jonas
                   < stevie_b7.asm
0017                       copy  "equates.asm"         ; Equates Stevie configuration
     **** ****     > equates.asm
0001               * FILE......: equates.asm
0002               * Purpose...: The main equates file for Stevie editor
0003               
0004               
0005               *===============================================================================
0006               * Memory map
0007               * ==========
0008               *
0009               * CARTRIDGE SPACE (6000-7fff)
0010               *
0011               *     Mem range   Bytes    BANK   Purpose
0012               *     =========   =====    ====   ==================================
0013               *     6000-633f               0   Cartridge header
0014               *     6040-7fff               0   SP2 library + Stevie library
0015               *                                 relocated to RAM space
0016               *     ..............................................................
0017               *     6000-633f               1   Cartridge header
0018               *     6040-7fbf               1   Stevie program code
0019               *     7fc0-7fff      64       1   Vector table (32 vectors)
0020               *     ..............................................................
0021               *     6000-633f               2   Cartridge header
0022               *     6040-7fbf               2   Stevie program code
0023               *     7fc0-7fff      64       2   Vector table (32 vectors)
0024               *     ..............................................................
0025               *     6000-633f               3   Cartridge header
0026               *     6040-7fbf               3   Stevie program code
0027               *     7fc0-7fff      64       3   Vector table (32 vectors)
0028               *     ..............................................................
0029               *     6000-633f               4   Cartridge header
0030               *     6040-7fbf               4   Stevie program code
0031               *     7fc0-7fff      64       4   Vector table (32 vectors)
0032               *     ..............................................................
0033               *     6000-633f               5   Cartridge header
0034               *     6040-7fbf               5   Stevie program code
0035               *     7fc0-7fff      64       5   Vector table (32 vectors)
0036               *     ..............................................................
0037               *     6000-633f               6   Cartridge header
0038               *     6040-7fbf               6   Stevie program code
0039               *     7fc0-7fff      64       6   Vector table (32 vectors)
0040               *     ..............................................................
0041               *     6000-633f               7   Cartridge header
0042               *     6040-7fbf               7   SP2 library in cartridge space
0043               *     7fc0-7fff      64       7   Vector table (32 vectors)
0044               *
0045               *
0046               *
0047               * VDP RAM F18a (0000-47ff)
0048               *
0049               *     Mem range   Bytes    Hex    Purpose
0050               *     =========   =====   =====   =================================
0051               *     0000-095f    2400   >0960   PNT: Pattern Name Table
0052               *     0960-09af      80   >0050   FIO: File record buffer (DIS/VAR 80)
0053               *     0fc0-0fff                   PCT: Color Table (not used in 80 cols mode)
0054               *     1000-17ff    2048   >0800   PDT: Pattern Descriptor Table
0055               *     1800-215f    2400   >0960   TAT: Tile Attribute Table
0056               *                                      (Position based colors F18a, 80 colums)
0057               *     2180                        SAT: Sprite Attribute Table
0058               *                                      (Cursor in F18a, 80 cols mode)
0059               *     2800                        SPT: Sprite Pattern Table
0060               *                                      (Cursor in F18a, 80 columns, 2K boundary)
0061               *===============================================================================
0062               
0063               
0064               *--------------------------------------------------------------
0065               * Graphics mode selection
0066               *--------------------------------------------------------------
0068               
0069      001D     pane.botrow               equ  29      ; Bottom row on screen
0070               
0076               *--------------------------------------------------------------
0077               * Stevie Dialog / Pane specific equates
0078               *--------------------------------------------------------------
0079      0000     pane.focus.fb             equ  0       ; Editor pane has focus
0080      0001     pane.focus.cmdb           equ  1       ; Command buffer pane has focus
0081               ;-----------------------------------------------------------------
0082               ;   Dialog ID's
0083               ;-----------------------------------------------------------------
0084      000A     id.dialog.load            equ  10      ; "Load file"
0085      000B     id.dialog.save            equ  11      ; "Save file"
0086      000C     id.dialog.saveblock       equ  12      ; "Save block to file"
0087      000D     id.dialog.insert          equ  13      ; "Insert file"
0088      000E     id.dialog.append          equ  14      ; "Append file"
0089      000F     id.dialog.print           equ  15      ; "Print file"
0090      0010     id.dialog.printblock      equ  16      ; "Print block"
0091      0011     id.dialog.clipdev         equ  17      ; "Configure clipboard"
0092               ;-----------------------------------------------------------------
0093               ;   Dialog ID's >= 100 indicate that command prompt should be
0094               ;   hidden and no characters added to CMDB keyboard buffer.
0095               ;-----------------------------------------------------------------
0096      0064     id.dialog.menu            equ  100     ; "Main Menu"
0097      0065     id.dialog.unsaved         equ  101     ; "Unsaved changes"
0098      0066     id.dialog.block           equ  102     ; "Block move/copy/delete/print/..."
0099      0067     id.dialog.clipboard       equ  103     ; "Copy clipboard to line ..."
0100      0068     id.dialog.help            equ  104     ; "About"
0101      0069     id.dialog.file            equ  105     ; "File"
0102      006A     id.dialog.cartridge       equ  106     ; "Cartridge"
0103      006B     id.dialog.basic           equ  107     ; "TI Basic"
0104      006C     id.dialog.config          equ  108     ; "Configure"
0105      006D     id.dialog.editor          equ  109     ; "Configure editor"
0106      006E     id.dialog.shortcuts       equ  110     ; "Shortcuts"
0107               *--------------------------------------------------------------
0108               * Suffix characters for clipboards
0109               *--------------------------------------------------------------
0110      3100     clip1                     equ  >3100   ; '1'
0111      3200     clip2                     equ  >3200   ; '2'
0112      3300     clip3                     equ  >3300   ; '3'
0113      3400     clip4                     equ  >3400   ; '4'
0114      3500     clip5                     equ  >3500   ; '5'
0115               *--------------------------------------------------------------
0116               * Keyboard flags in Stevie
0117               *--------------------------------------------------------------
0118      0001     kbf.kbclear               equ  >0001   ;  Keyboard buffer cleared / @w$0001
0119               
0120               *--------------------------------------------------------------
0121               * File work mode
0122               *--------------------------------------------------------------
0123      0001     id.file.loadfile          equ  1       ; Load file
0124      0002     id.file.insertfile        equ  2       ; Insert file
0125      0003     id.file.appendfile        equ  3       ; Append file
0126      0004     id.file.savefile          equ  4       ; Save file
0127      0005     id.file.saveblock         equ  5       ; Save block to file
0128      0006     id.file.clipblock         equ  6       ; Save block to clipboard
0129      0007     id.file.printfile         equ  7       ; Print file
0130      0008     id.file.printblock        equ  8       ; Print block
0131               *--------------------------------------------------------------
0132               * Stevie core 1 RAM                   @>a000-a0ff   (256 bytes)
0133               *--------------------------------------------------------------
0134      A000     core1.top         equ  >a000           ; Structure begin
0135      A000     magic.str.w1      equ  core1.top + 0   ; Magic string word 1
0136      A002     magic.str.w2      equ  core1.top + 2   ; Magic string word 2
0137      A004     magic.str.w3      equ  core1.top + 4   ; Magic string word 3
0138      A006     parm1             equ  core1.top + 6   ; Function parameter 1
0139      A008     parm2             equ  core1.top + 8   ; Function parameter 2
0140      A00A     parm3             equ  core1.top + 10  ; Function parameter 3
0141      A00C     parm4             equ  core1.top + 12  ; Function parameter 4
0142      A00E     parm5             equ  core1.top + 14  ; Function parameter 5
0143      A010     parm6             equ  core1.top + 16  ; Function parameter 6
0144      A012     parm7             equ  core1.top + 18  ; Function parameter 7
0145      A014     parm8             equ  core1.top + 20  ; Function parameter 8
0146      A016     outparm1          equ  core1.top + 22  ; Function output parameter 1
0147      A018     outparm2          equ  core1.top + 24  ; Function output parameter 2
0148      A01A     outparm3          equ  core1.top + 26  ; Function output parameter 3
0149      A01C     outparm4          equ  core1.top + 28  ; Function output parameter 4
0150      A01E     outparm5          equ  core1.top + 30  ; Function output parameter 5
0151      A020     outparm6          equ  core1.top + 32  ; Function output parameter 6
0152      A022     outparm7          equ  core1.top + 34  ; Function output parameter 7
0153      A024     outparm8          equ  core1.top + 36  ; Function output parameter 8
0154      A026     kbflags           equ  core1.top + 38  ; Keyboard control flags
0155      A028     keycode1          equ  core1.top + 40  ; Current key scanned
0156      A02A     keycode2          equ  core1.top + 42  ; Previous key scanned
0157      A02C     unpacked.string   equ  core1.top + 44  ; 6 char string with unpacked uin16
0158      A032     trmpvector        equ  core1.top + 50  ; Vector trampoline (if p1|tmp1 = >ffff)
0159      A034     core1.free1       equ  core1.top + 52  ; 52-85 **free**
0160      A056     ramsat            equ  core1.top + 86  ; Sprite Attr. Table in RAM (14 bytes)
0161      A064     timers            equ  core1.top + 100 ; Timers (80 bytes)
0162                                 ;--------------------------------------------
0163                                 ; TI Basic related
0164                                 ;--------------------------------------------
0165      A0B4     tib.session       equ  core1.top + 180 ; Current TI-Basic session (1-5)
0166      A0B6     tib.status1       equ  core1.top + 182 ; Status flags TI Basic session 1
0167      A0B8     tib.status2       equ  core1.top + 184 ; Status flags TI Basic session 2
0168      A0BA     tib.status3       equ  core1.top + 186 ; Status flags TI Basic session 3
0169      A0BC     tib.status4       equ  core1.top + 188 ; Status flags TI Basic session 4
0170      A0BE     tib.status5       equ  core1.top + 190 ; Status flags TI Basic session 5
0171      A0C0     tib.automode      equ  core1.top + 192 ; TI-Basic AutoMode (crunch/uncrunch)
0172      A0C2     tib.stab.ptr      equ  core1.top + 194 ; Pointer to TI-Basic SAMS page table
0173      A0C4     tib.scrpad.ptr    equ  core1.top + 196 ; Pointer to TI-Basic scratchpad in SAMS
0174      A0C6     tib.lnt.top.ptr   equ  core1.top + 198 ; Pointer to top of line number table
0175      A0C8     tib.lnt.bot.ptr   equ  core1.top + 200 ; Pointer to bottom of line number table
0176      A0CA     tib.symt.top.ptr  equ  core1.top + 202 ; Pointer to top of symbol table
0177      A0CC     tib.symt.bot.ptr  equ  core1.top + 204 ; Pointer to bottom of symbol table
0178      A0CE     tib.strs.top.ptr  equ  core1.top + 206 ; Pointer to top of string space
0179      A0D0     tib.strs.bot.ptr  equ  core1.top + 208 ; Pointer to bottom of string space
0180      A0D2     tib.lines         equ  core1.top + 210 ; Number of lines in TI Basic program
0181      A0D4     core1.free2       equ  core1.top + 212 ; **free* up to 233
0182      A0EA     tib.samstab.ptr   equ  core1.top + 234 ; Pointer to active SAMS mem layout table
0183      A0EC     tib.var1          equ  core1.top + 236 ; Temp variable 1
0184      A0EE     tib.var2          equ  core1.top + 238 ; Temp variable 2
0185      A0F0     tib.var3          equ  core1.top + 240 ; Temp variable 3
0186      A0F2     tib.var4          equ  core1.top + 242 ; Temp variable 4
0187      A0F4     tib.var5          equ  core1.top + 244 ; Temp variable 5
0188      A0F6     tib.var6          equ  core1.top + 246 ; Temp variable 6
0189      A0F8     tib.var7          equ  core1.top + 248 ; Temp variable 7
0190      A0FA     tib.var8          equ  core1.top + 250 ; Temp variable 8
0191      A0FC     tib.var9          equ  core1.top + 252 ; Temp variable 9
0192      A0FE     tib.var10         equ  core1.top + 254 ; Temp variable 10
0193      A100     core1.free        equ  core1.top + 256 ; End of structure
0194               *--------------------------------------------------------------
0195               * Stevie core 2 RAM                   @>a100-a1ff   (256 bytes)
0196               *--------------------------------------------------------------
0197      A100     core2.top         equ  >a100           ; Structure begin
0198      A100     rambuf            equ  core2.top       ; RAM workbuffer
0199      A200     core2.free        equ  core2.top + 256 ; End of structure
0200               *--------------------------------------------------------------
0201               * Stevie Editor shared structures     @>a200-a2ff   (256 bytes)
0202               *--------------------------------------------------------------
0203      A200     tv.top            equ  >a200           ; Structure begin
0204      A200     tv.sams.2000      equ  tv.top + 0      ; SAMS page in window >2000-2fff
0205      A202     tv.sams.3000      equ  tv.top + 2      ; SAMS page in window >3000-3fff
0206      A204     tv.sams.a000      equ  tv.top + 4      ; SAMS page in window >a000-afff
0207      A206     tv.sams.b000      equ  tv.top + 6      ; SAMS page in window >b000-bfff
0208      A208     tv.sams.c000      equ  tv.top + 8      ; SAMS page in window >c000-cfff
0209      A20A     tv.sams.d000      equ  tv.top + 10     ; SAMS page in window >d000-dfff
0210      A20C     tv.sams.e000      equ  tv.top + 12     ; SAMS page in window >e000-efff
0211      A20E     tv.sams.f000      equ  tv.top + 14     ; SAMS page in window >f000-ffff
0212      A210     tv.ruler.visible  equ  tv.top + 16     ; Show ruler with tab positions
0213      A212     tv.colorscheme    equ  tv.top + 18     ; Current color scheme (0-xx)
0214      A214     tv.curshape       equ  tv.top + 20     ; Cursor shape and color (sprite)
0215      A216     tv.curcolor       equ  tv.top + 22     ; Cursor color1 + color2 (color scheme)
0216      A218     tv.color          equ  tv.top + 24     ; FG/BG-color framebuffer + status lines
0217      A21A     tv.markcolor      equ  tv.top + 26     ; FG/BG-color marked lines in framebuffer
0218      A21C     tv.busycolor      equ  tv.top + 28     ; FG/BG-color bottom line when busy
0219      A21E     tv.rulercolor     equ  tv.top + 30     ; FG/BG-color ruler line
0220      A220     tv.cmdb.hcolor    equ  tv.top + 32     ; FG/BG-color command buffer header line
0221      A222     tv.pane.focus     equ  tv.top + 34     ; Identify pane that has focus
0222      A224     tv.task.oneshot   equ  tv.top + 36     ; Pointer to one-shot routine
0223      A226     tv.fj.stackpnt    equ  tv.top + 38     ; Pointer to farjump return stack
0224      A228     tv.error.visible  equ  tv.top + 40     ; Error pane visible
0225      A22A     tv.error.rows     equ  tv.top + 42     ; Number of rows in error pane
0226      A22C     tv.sp2.conf       equ  tv.top + 44     ; Backup of SP2 config register
0227      A22E     tv.sp2.stack      equ  tv.top + 46     ; Backup of SP2 stack register
0228      A230     tv.error.msg      equ  tv.top + 48     ; Error message (max. 160 characters)
0229      A2D0     tv.free           equ  tv.top + 208    ; End of structure
0230               *--------------------------------------------------------------
0231               * Frame buffer structure              @>a300-a3ff   (256 bytes)
0232               *--------------------------------------------------------------
0233      A300     fb.struct         equ  >a300           ; Structure begin
0234      A300     fb.top.ptr        equ  fb.struct       ; Pointer to frame buffer
0235      A302     fb.current        equ  fb.struct + 2   ; Pointer to current pos. in frame buffer
0236      A304     fb.topline        equ  fb.struct + 4   ; Top line in frame buffer (matching
0237                                                      ; line X in editor buffer).
0238      A306     fb.row            equ  fb.struct + 6   ; Current row in frame buffer
0239                                                      ; (offset 0 .. @fb.scrrows)
0240      A308     fb.row.length     equ  fb.struct + 8   ; Length of current row in frame buffer
0241      A30A     fb.row.dirty      equ  fb.struct + 10  ; Current row dirty flag in frame buffer
0242      A30C     fb.column         equ  fb.struct + 12  ; Current column (0-79) in frame buffer
0243      A30E     fb.colsline       equ  fb.struct + 14  ; Columns per line in frame buffer
0244      A310     fb.vwco           equ  fb.struct + 16  ; View window column offset (0-xxx)
0245      A312     fb.colorize       equ  fb.struct + 18  ; M1/M2 colorize refresh required
0246      A314     fb.curtoggle      equ  fb.struct + 20  ; Cursor shape toggle
0247      A316     fb.yxsave         equ  fb.struct + 22  ; Copy of cursor YX position
0248      A318     fb.dirty          equ  fb.struct + 24  ; Frame buffer dirty flag
0249      A31A     fb.status.dirty   equ  fb.struct + 26  ; Status line(s) dirty flag
0250      A31C     fb.scrrows        equ  fb.struct + 28  ; Rows on physical screen for framebuffer
0251      A31E     fb.scrrows.max    equ  fb.struct + 30  ; Max # of rows on physical screen for fb
0252      A320     fb.ruler.sit      equ  fb.struct + 32  ; 80 char ruler  (no length-prefix!)
0253      A370     fb.ruler.tat      equ  fb.struct + 112 ; 80 char colors (no length-prefix!)
0254      A3C0     fb.free           equ  fb.struct + 192 ; End of structure
0255               *--------------------------------------------------------------
0256               * File handle structure               @>a400-a4ff   (256 bytes)
0257               *--------------------------------------------------------------
0258      A400     fh.struct         equ  >a400           ; stevie file handling structures
0259               ;***********************************************************************
0260               ; ATTENTION
0261               ; The dsrlnk variables must form a continuous memory block and keep
0262               ; their order!
0263               ;***********************************************************************
0264      A400     dsrlnk.dsrlws     equ  fh.struct       ; Address of dsrlnk workspace 32 bytes
0265      A420     dsrlnk.namsto     equ  fh.struct + 32  ; 8-byte RAM buf for holding device name
0266      A428     dsrlnk.sav8a      equ  fh.struct + 40  ; Save parm (8 or A) after "blwp @dsrlnk"
0267      A42A     dsrlnk.savcru     equ  fh.struct + 42  ; CRU address of device in prev. DSR call
0268      A42C     dsrlnk.savent     equ  fh.struct + 44  ; DSR entry addr of prev. DSR call
0269      A42E     dsrlnk.savpab     equ  fh.struct + 46  ; Pointer to Device or Subprogram in PAB
0270      A430     dsrlnk.savver     equ  fh.struct + 48  ; Version used in prev. DSR call
0271      A432     dsrlnk.savlen     equ  fh.struct + 50  ; Length of DSR name of prev. DSR call
0272      A434     dsrlnk.flgptr     equ  fh.struct + 52  ; Pointer to VDP PAB byte 1 (flag byte)
0273      A436     fh.pab.ptr        equ  fh.struct + 54  ; Pointer to VDP PAB, for level 3 FIO
0274      A438     fh.pabstat        equ  fh.struct + 56  ; Copy of VDP PAB status byte
0275      A43A     fh.ioresult       equ  fh.struct + 58  ; DSRLNK IO-status after file operation
0276      A43C     fh.records        equ  fh.struct + 60  ; File records counter
0277      A43E     fh.reclen         equ  fh.struct + 62  ; Current record length
0278      A440     fh.kilobytes      equ  fh.struct + 64  ; Kilobytes processed (read/written)
0279      A442     fh.counter        equ  fh.struct + 66  ; Counter used in stevie file operations
0280      A444     fh.fname.ptr      equ  fh.struct + 68  ; Pointer to device and filename
0281      A446     fh.sams.page      equ  fh.struct + 70  ; Current SAMS page during file operation
0282      A448     fh.sams.hipage    equ  fh.struct + 72  ; Highest SAMS page in file operation
0283      A44A     fh.fopmode        equ  fh.struct + 74  ; FOP mode (File Operation Mode)
0284      A44C     fh.filetype       equ  fh.struct + 76  ; Value for filetype/mode (PAB byte 1)
0285      A44E     fh.offsetopcode   equ  fh.struct + 78  ; Set to >40 for skipping VDP buffer
0286      A450     fh.callback1      equ  fh.struct + 80  ; Pointer to callback function 1
0287      A452     fh.callback2      equ  fh.struct + 82  ; Pointer to callback function 2
0288      A454     fh.callback3      equ  fh.struct + 84  ; Pointer to callback function 3
0289      A456     fh.callback4      equ  fh.struct + 86  ; Pointer to callback function 4
0290      A458     fh.callback5      equ  fh.struct + 88  ; Pointer to callback function 5
0291      A45A     fh.workmode       equ  fh.struct + 90  ; Working mode (used in callbacks)
0292      A45C     fh.kilobytes.prev equ  fh.struct + 92  ; Kilobytes processed (previous)
0293      A45E     fh.line           equ  fh.struct + 94  ; Editor buffer line currently processing
0294      A460     fh.temp1          equ  fh.struct + 96  ; Temporary variable 1
0295      A462     fh.temp2          equ  fh.struct + 98  ; Temporary variable 2
0296      A464     fh.temp3          equ  fh.struct +100  ; Temporary variable 3
0297      A466     fh.membuffer      equ  fh.struct +102  ; 80 bytes file memory buffer
0298      A4B6     fh.free           equ  fh.struct +182  ; End of structure
0299      0960     fh.vrecbuf        equ  >0960           ; VDP address record buffer
0300      0A60     fh.vpab           equ  >0a60           ; VDP address PAB
0301               *--------------------------------------------------------------
0302               * Editor buffer structure             @>a500-a5ff   (256 bytes)
0303               *--------------------------------------------------------------
0304      A500     edb.struct        equ  >a500           ; Begin structure
0305      A500     edb.top.ptr       equ  edb.struct      ; Pointer to editor buffer
0306      A502     edb.index.ptr     equ  edb.struct + 2  ; Pointer to index
0307      A504     edb.lines         equ  edb.struct + 4  ; Total lines in editor buffer - 1
0308      A506     edb.dirty         equ  edb.struct + 6  ; Editor buffer dirty (Text changed!)
0309      A508     edb.next_free.ptr equ  edb.struct + 8  ; Pointer to next free line
0310      A50A     edb.insmode       equ  edb.struct + 10 ; Insert mode (>ffff = insert)
0311      A50C     edb.autoinsert    equ  edb.struct + 12 ; Auto-insert on ENTER flag (>ffff = on)
0312      A50E     edb.block.m1      equ  edb.struct + 14 ; Block start line marker (>ffff = unset)
0313      A510     edb.block.m2      equ  edb.struct + 16 ; Block end line marker   (>ffff = unset)
0314      A512     edb.block.var     equ  edb.struct + 18 ; Local var used in block operation
0315      A514     edb.filename.ptr  equ  edb.struct + 20 ; Pointer to length-prefixed string
0316                                                      ; with current filename.
0317      A516     edb.filetype.ptr  equ  edb.struct + 22 ; Pointer to length-prefixed string
0318                                                      ; with current file type.
0319      A518     edb.sams.page     equ  edb.struct + 24 ; Current SAMS page
0320      A51A     edb.sams.hipage   equ  edb.struct + 26 ; Highest SAMS page in use
0321               
0322      A51C     edb.filename      equ  edb.struct + 28 ; 80 characters inline buffer reserved
0323                                                      ; for filename, but not always used.
0324      A56C     edb.free          equ  edb.struct + 108; End of structure
0325               *--------------------------------------------------------------
0326               * Index structure                     @>a600-a6ff   (256 bytes)
0327               *--------------------------------------------------------------
0328      A600     idx.struct        equ  >a600           ; stevie index structure
0329      A600     idx.sams.page     equ  idx.struct      ; Current SAMS page
0330      A602     idx.sams.lopage   equ  idx.struct + 2  ; Lowest SAMS page
0331      A604     idx.sams.hipage   equ  idx.struct + 4  ; Highest SAMS page
0332      A606     idx.free          equ  idx.struct + 6  ; End of structure
0333               *--------------------------------------------------------------
0334               * Command buffer structure            @>a700-a7ff   (256 bytes)
0335               *--------------------------------------------------------------
0336      A700     cmdb.struct       equ  >a700           ; Command Buffer structure
0337      A700     cmdb.top.ptr      equ  cmdb.struct     ; Pointer to command buffer (history)
0338      A702     cmdb.visible      equ  cmdb.struct + 2 ; Command buffer visible? (>ffff=visible)
0339      A704     cmdb.fb.yxsave    equ  cmdb.struct + 4 ; Copy of FB WYX when entering cmdb pane
0340      A706     cmdb.scrrows      equ  cmdb.struct + 6 ; Current size of CMDB pane (in rows)
0341      A708     cmdb.default      equ  cmdb.struct + 8 ; Default size of CMDB pane (in rows)
0342      A70A     cmdb.cursor       equ  cmdb.struct + 10; Screen YX of cursor in CMDB pane
0343      A70C     cmdb.yxsave       equ  cmdb.struct + 12; Copy of WYX
0344      A70E     cmdb.yxtop        equ  cmdb.struct + 14; YX position of CMDB pane header line
0345      A710     cmdb.yxprompt     equ  cmdb.struct + 16; YX position of command buffer prompt
0346      A712     cmdb.column       equ  cmdb.struct + 18; Current column in command buffer pane
0347      A714     cmdb.length       equ  cmdb.struct + 20; Length of current row in CMDB
0348      A716     cmdb.lines        equ  cmdb.struct + 22; Total lines in CMDB
0349      A718     cmdb.dirty        equ  cmdb.struct + 24; Command buffer dirty (Text changed!)
0350      A71A     cmdb.dialog       equ  cmdb.struct + 26; Dialog identifier
0351      A71C     cmdb.dialog.var   equ  cmdb.struct + 28; Dialog private variable or pointer
0352      A71E     cmdb.panhead      equ  cmdb.struct + 30; Pointer to string pane header
0353      A720     cmdb.paninfo      equ  cmdb.struct + 32; Pointer to string pane info (1st line)
0354      A722     cmdb.panhint      equ  cmdb.struct + 34; Pointer to string pane hint (2nd line)
0355      A724     cmdb.panmarkers   equ  cmdb.struct + 36; Pointer to key marker list  (3rd line)
0356      A726     cmdb.pankeys      equ  cmdb.struct + 38; Pointer to string pane keys (stat line)
0357      A728     cmdb.action.ptr   equ  cmdb.struct + 40; Pointer to function to execute
0358      A72A     cmdb.cmdall       equ  cmdb.struct + 42; Current command including length-byte
0359      A72A     cmdb.cmdlen       equ  cmdb.struct + 42; Length of current command (MSB byte!)
0360      A72B     cmdb.cmd          equ  cmdb.struct + 43; Current command (80 bytes max.)
0361      A77C     cmdb.panhead.buf  equ  cmdb.struct +124; String buffer for pane header
0362      A7AE     cmdb.dflt.fname   equ  cmdb.struct +174; Default for filename
0363      A800     cmdb.free         equ  cmdb.struct +256; End of structure
0364               *--------------------------------------------------------------
0365               * Stevie value stack                  @>a800-a8ff   (256 bytes)
0366               *--------------------------------------------------------------
0367      A900     sp2.stktop        equ  >a900           ; \
0368                                                      ; | The stack grows from high memory
0369                                                      ; | towards low memory.
0370                                                      ; |
0371                                                      ; | Stack leaking is checked in SP2
0372                                                      ; | user hook "edkey.keyscan.hook"
0373                                                      ; /
0374               *--------------------------------------------------------------
0375               * Scratchpad memory work copy         @>ad00-aeff   (256 bytes)
0376               *--------------------------------------------------------------
0377      7E00     cpu.scrpad.src    equ  >7e00           ; \ Dump of OS monitor scratchpad
0378                                                      ; / stored in cartridge ROM bank7.asm
0379               
0380      F000     cpu.scrpad.tgt    equ  >f000           ; \ Fixed memory location used for
0381                                                      ; | scratchpad backup/restore routines.
0382                                                      ; /
0383               
0384      8300     cpu.scrpad1       equ  >8300           ; Stevie primary scratchpad
0385               
0386      AD00     cpu.scrpad2       equ  >ad00           ; Stevie secondary scratchpad, used when
0387                                                      ; calling TI Basic/External programs
0388               *--------------------------------------------------------------
0389               * Farjump return stack                @>af00-afff   (256 bytes)
0390               *--------------------------------------------------------------
0391      B000     fj.bottom         equ  >b000           ; Return stack for trampoline function
0392                                                      ; Grows downwards from high to low.
0393               *--------------------------------------------------------------
0394               * Index                               @>b000-bfff  (4096 bytes)
0395               *--------------------------------------------------------------
0396      B000     idx.top           equ  >b000           ; Top of index
0397      1000     idx.size          equ  4096            ; Index size
0398               *--------------------------------------------------------------
0399               * Editor buffer                       @>c000-cfff  (4096 bytes)
0400               *--------------------------------------------------------------
0401      C000     edb.top           equ  >c000           ; Editor buffer high memory
0402      1000     edb.size          equ  4096            ; Editor buffer size
0403               *--------------------------------------------------------------
0404               * Frame buffer & uncrunch area        @>d000-dcff  (3584 bytes)
0405               *--------------------------------------------------------------
0406      D000     fb.top            equ  >d000           ; Frame buffer (2400 char)
0407      0960     fb.size           equ  80*30           ; Frame buffer size
0408      D960     fb.uncrunch.area  equ  >d960           ; \ Uncrunched TI Basic statement
0409                                                      ; / >d960->dcff
0410               *--------------------------------------------------------------
0411               * Defaults area                       @>de00-dfff  (3584 bytes)
0412               *--------------------------------------------------------------
0413      DE00     tv.printer.fname  equ  >de00           ; Default printer   (80 char)
0414      DE50     tv.clip.fname     equ  >de50           ; Default clipboard (80 char)
0415               *--------------------------------------------------------------
0416               * Command buffer history              @>e000-efff  (4096 bytes)
0417               *--------------------------------------------------------------
0418      E000     cmdb.top          equ  >e000           ; Top of command history buffer
0419      1000     cmdb.size         equ  4096            ; Command buffer size
0420               *--------------------------------------------------------------
0421               * Heap                                @>f000-ffff  (4096 bytes)
0422               *--------------------------------------------------------------
0423      F000     heap.top          equ  >f000           ; Top of heap
0424               
0425               
0426               *--------------------------------------------------------------
0427               * Stevie specific equates
0428               *--------------------------------------------------------------
0429      0000     fh.fopmode.none           equ  0       ; No file operation in progress
0430      0001     fh.fopmode.readfile       equ  1       ; Read file from disk to memory
0431      0002     fh.fopmode.writefile      equ  2       ; Save file from memory to disk
0432      A028     rom0_kscan_out            equ  keycode1; Where to store value of key pressed
0433               
0434      0050     vdp.fb.toprow.sit         equ  >0050   ; VDP SIT address of 1st Framebuffer row
0435      1850     vdp.fb.toprow.tat         equ  >1850   ; VDP TAT address of 1st Framebuffer row
0436      1FD0     vdp.cmdb.toprow.tat       equ  >1800 + ((pane.botrow - 4) * 80)
0437                                                      ; VDP TAT address of 1st CMDB row
0438      0000     vdp.sit.base              equ  >0000   ; VDP SIT base address
0439      0960     vdp.sit.size              equ  (pane.botrow + 1) * 80
0440                                                      ; VDP SIT size 80 columns, 24/30 rows
0441      1800     vdp.tat.base              equ  >1800   ; VDP TAT base address
0442      9900     tv.colorize.reset         equ  >9900   ; Colorization off
0443      00FE     tv.1timeonly              equ  254     ; One-time only flag indicator
                   < stevie_b7.asm
0018                       copy  "equates.c99.asm"     ; Equates related to classic99 emulator
     **** ****     > equates.c99.asm
0001               * FILE......: equates.c99.asm
0002               * Purpose...: Equates related to classic99
0003               
0004               ***************************************************************
0005               *                 Extra opcodes for classic99
0006               ********|*****|*********************|**************************
0007      0110     c99_norm      equ  >0110            ; CPU normal
0008      0111     c99_ovrd      equ  >0111            ; CPU overdrive
0009      0112     c99_smax      equ  >0112            ; System Maximum
0010      0113     c99_brk       equ  >0113            ; Breakpoint
0011      0114     c99_quit      equ  >0114            ; Quit emulator
0012      0120     c99_dbg_r0    equ  >0120            ; Debug printf r0
0013      0121     c99_dbg_r1    equ  >0121            ; Debug printf r1
0014      0122     c99_dbg_r2    equ  >0122            ; Debug printf r2
0015      0123     c99_dbg_r3    equ  >0123            ; Debug printf r3
0016      0124     c99_dbg_r4    equ  >0124            ; Debug printf r4
0017      0125     c99_dbg_r5    equ  >0125            ; Debug printf r5
0018      0126     c99_dbg_r6    equ  >0126            ; Debug printf r6
0019      0127     c99_dbg_r7    equ  >0127            ; Debug printf r7
0020      0128     c99_dbg_r8    equ  >0128            ; Debug printf r8
0021      0199     c99_dbg_r9    equ  >0199            ; Debug printf r9
0022      012A     c99_dbg_ra    equ  >012a            ; Debug printf ra
0023      012B     c99_dbg_rb    equ  >012b            ; Debug printf rb
0024      012C     c99_dbg_rc    equ  >012c            ; Debug printf rc
0025      012D     c99_dbg_rd    equ  >012d            ; Debug printf rd
0026      012E     c99_dbg_re    equ  >012e            ; Debug printf re
0027      012F     c99_dbg_rf    equ  >012f            ; Debug printf rf
0028      0124     c99_dbg_tmp0  equ  c99_dbg_r4       ; Debug printf tmp0
0029      0125     c99_dbg_tmp1  equ  c99_dbg_r5       ; Debug printf tmp1
0030      0126     c99_dbg_tmp2  equ  c99_dbg_r6       ; Debug printf tmp2
0031      0127     c99_dbg_tmp3  equ  c99_dbg_r7       ; Debug printf tmp3
0032      0128     c99_dbg_tmp4  equ  c99_dbg_r8       ; Debug printf tmp4
0033      0199     c99_dbg_stck  equ  c99_dbg_r9       ; Debug printf stack
                   < stevie_b7.asm
0019                       copy  "equates.tib.asm"     ; Equates related to TI Basic session
     **** ****     > equates.tib.asm
0001               * FILE......: equates.tib.asm
0002               * Purpose...: Equates for TI Basic session
0003               
0004               *--------------------------------------------------------------
0005               * Equates mainly used while TI Basic session is running
0006               *--------------------------------------------------------------
0007      FF00     tib.aux           equ  >ff00           ; Auxiliary memory 256 bytes
0008      FF00     tib.aux.fname     equ  tib.aux         ; TI Basic program filename
0009      FFFA     tib.aux.end       equ  >fffa           ; \ End of auxiliary memory
0010                                                      ; | >fffc-ffff is reserved
0011                                                      ; / for NMI vector.
                   < stevie_b7.asm
0020                       copy  "equates.keys.asm"    ; Equates for keyboard mapping
     **** ****     > equates.keys.asm
0001               * FILE......: data.keymap.keys.asm
0002               * Purpose...: Keyboard mapping
0003               
0004               
0005               *---------------------------------------------------------------
0006               * Keyboard scancodes - Numeric keys
0007               *-------------|---------------------|---------------------------
0008      0030     key.num.0     equ >30               ; 0
0009      0031     key.num.1     equ >31               ; 1
0010      0032     key.num.2     equ >32               ; 2
0011      0033     key.num.3     equ >33               ; 3
0012      0034     key.num.4     equ >34               ; 4
0013      0035     key.num.5     equ >35               ; 5
0014      0036     key.num.6     equ >36               ; 6
0015      0037     key.num.7     equ >37               ; 7
0016      0038     key.num.8     equ >38               ; 8
0017      0039     key.num.9     equ >39               ; 9
0018               *---------------------------------------------------------------
0019               * Keyboard scancodes - Letter keys
0020               *-------------|---------------------|---------------------------
0021      0041     key.uc.a      equ >41               ; A
0022      0042     key.uc.b      equ >42               ; B
0023      0043     key.uc.c      equ >43               ; C
0024      0045     key.uc.e      equ >45               ; E
0025      0046     key.uc.f      equ >46               ; F
0026      0048     key.uc.h      equ >48               ; H
0027      0049     key.uc.i      equ >49               ; I
0028      004D     key.uc.m      equ >4d               ; M
0029      004E     key.uc.n      equ >4e               ; N
0030      0052     key.uc.r      equ >52               ; R
0031      0053     key.uc.s      equ >53               ; S
0032      004F     key.uc.o      equ >4f               ; O
0033      0050     key.uc.p      equ >50               ; P
0034      0051     key.uc.q      equ >51               ; Q
0035      00A2     key.lc.b      equ >a2               ; b
0036      00A5     key.lc.e      equ >a5               ; e
0037      00A6     key.lc.f      equ >a6               ; f
0038      00A8     key.lc.h      equ >a8               ; h
0039      006E     key.lc.n      equ >6e               ; n
0040      0073     key.lc.s      equ >73               ; s
0041      006F     key.lc.o      equ >6f               ; o
0042      0070     key.lc.p      equ >70               ; p
0043      0071     key.lc.q      equ >71               ; q
0044               *---------------------------------------------------------------
0045               * Keyboard scancodes - Function keys
0046               *-------------|---------------------|---------------------------
0047      00BC     key.fctn.0    equ >bc               ; fctn + 0
0048      0003     key.fctn.1    equ >03               ; fctn + 1
0049      0004     key.fctn.2    equ >04               ; fctn + 2
0050      0007     key.fctn.3    equ >07               ; fctn + 3
0051      0002     key.fctn.4    equ >02               ; fctn + 4
0052      000E     key.fctn.5    equ >0e               ; fctn + 5
0053      000C     key.fctn.6    equ >0c               ; fctn + 6
0054      0001     key.fctn.7    equ >01               ; fctn + 7
0055      0006     key.fctn.8    equ >06               ; fctn + 8
0056      000F     key.fctn.9    equ >0f               ; fctn + 9
0057      0000     key.fctn.a    equ >00               ; fctn + a
0058      00BE     key.fctn.b    equ >be               ; fctn + b
0059      0000     key.fctn.c    equ >00               ; fctn + c
0060      0009     key.fctn.d    equ >09               ; fctn + d
0061      000B     key.fctn.e    equ >0b               ; fctn + e
0062      0000     key.fctn.f    equ >00               ; fctn + f
0063      0000     key.fctn.g    equ >00               ; fctn + g
0064      00BF     key.fctn.h    equ >bf               ; fctn + h
0065      0000     key.fctn.i    equ >00               ; fctn + i
0066      00C0     key.fctn.j    equ >c0               ; fctn + j
0067      00C1     key.fctn.k    equ >c1               ; fctn + k
0068      00C2     key.fctn.l    equ >c2               ; fctn + l
0069      00C3     key.fctn.m    equ >c3               ; fctn + m
0070      00C4     key.fctn.n    equ >c4               ; fctn + n
0071      0000     key.fctn.o    equ >00               ; fctn + o
0072      0000     key.fctn.p    equ >00               ; fctn + p
0073      00C5     key.fctn.q    equ >c5               ; fctn + q
0074      0000     key.fctn.r    equ >00               ; fctn + r
0075      0008     key.fctn.s    equ >08               ; fctn + s
0076      0000     key.fctn.t    equ >00               ; fctn + t
0077      0000     key.fctn.u    equ >00               ; fctn + u
0078      007F     key.fctn.v    equ >7f               ; fctn + v
0079      007E     key.fctn.w    equ >7e               ; fctn + w
0080      000A     key.fctn.x    equ >0a               ; fctn + x
0081      00C6     key.fctn.y    equ >c6               ; fctn + y
0082      0000     key.fctn.z    equ >00               ; fctn + z
0083               *---------------------------------------------------------------
0084               * Keyboard scancodes - Function keys extra
0085               *---------------------------------------------------------------
0086      00B9     key.fctn.dot    equ >b9             ; fctn + .
0087      00B8     key.fctn.comma  equ >b8             ; fctn + ,
0088      0005     key.fctn.plus   equ >05             ; fctn + +
0089               *---------------------------------------------------------------
0090               * Keyboard scancodes - control keys
0091               *-------------|---------------------|---------------------------
0092      00B0     key.ctrl.0    equ >b0               ; ctrl + 0
0093      00B1     key.ctrl.1    equ >b1               ; ctrl + 1
0094      00B2     key.ctrl.2    equ >b2               ; ctrl + 2
0095      00B3     key.ctrl.3    equ >b3               ; ctrl + 3
0096      00B4     key.ctrl.4    equ >b4               ; ctrl + 4
0097      00B5     key.ctrl.5    equ >b5               ; ctrl + 5
0098      00B6     key.ctrl.6    equ >b6               ; ctrl + 6
0099      00B7     key.ctrl.7    equ >b7               ; ctrl + 7
0100      009E     key.ctrl.8    equ >9e               ; ctrl + 8
0101      009F     key.ctrl.9    equ >9f               ; ctrl + 9
0102      0081     key.ctrl.a    equ >81               ; ctrl + a
0103      0082     key.ctrl.b    equ >82               ; ctrl + b
0104      0083     key.ctrl.c    equ >83               ; ctrl + c
0105      0084     key.ctrl.d    equ >84               ; ctrl + d
0106      0085     key.ctrl.e    equ >85               ; ctrl + e
0107      0086     key.ctrl.f    equ >86               ; ctrl + f
0108      0087     key.ctrl.g    equ >87               ; ctrl + g
0109      0088     key.ctrl.h    equ >88               ; ctrl + h
0110      0089     key.ctrl.i    equ >89               ; ctrl + i
0111      008A     key.ctrl.j    equ >8a               ; ctrl + j
0112      008B     key.ctrl.k    equ >8b               ; ctrl + k
0113      008C     key.ctrl.l    equ >8c               ; ctrl + l
0114      008D     key.ctrl.m    equ >8d               ; ctrl + m
0115      008E     key.ctrl.n    equ >8e               ; ctrl + n
0116      008F     key.ctrl.o    equ >8f               ; ctrl + o
0117      0090     key.ctrl.p    equ >90               ; ctrl + p
0118      0091     key.ctrl.q    equ >91               ; ctrl + q
0119      0092     key.ctrl.r    equ >92               ; ctrl + r
0120      0093     key.ctrl.s    equ >93               ; ctrl + s
0121      0094     key.ctrl.t    equ >94               ; ctrl + t
0122      0095     key.ctrl.u    equ >95               ; ctrl + u
0123      0096     key.ctrl.v    equ >96               ; ctrl + v
0124      0097     key.ctrl.w    equ >97               ; ctrl + w
0125      0098     key.ctrl.x    equ >98               ; ctrl + x
0126      0099     key.ctrl.y    equ >99               ; ctrl + y
0127      009A     key.ctrl.z    equ >9a               ; ctrl + z
0128               *---------------------------------------------------------------
0129               * Keyboard scancodes - control keys extra
0130               *---------------------------------------------------------------
0131      009B     key.ctrl.dot    equ >9b             ; ctrl + .
0132      0080     key.ctrl.comma  equ >80             ; ctrl + ,
0133      009D     key.ctrl.plus   equ >9d             ; ctrl + +
0134      00BB     key.ctrl.slash  equ >bb             ; ctrl + /
0135      00F0     key.ctrl.space  equ >f0             ; ctrl + SPACE
0136               *---------------------------------------------------------------
0137               * Special keys
0138               *---------------------------------------------------------------
0139      000D     key.enter     equ >0d               ; enter
0140      0020     key.space     equ >20               ; space
                   < stevie_b7.asm
0021               
0022               ***************************************************************
0023               * BANK 7
0024               ********|*****|*********************|**************************
0025      600E     bankid  equ   bank7.rom             ; Set bank identifier to current bank
0026                       aorg  >6000
0027                       save  >6000,>8000           ; Save bank
0028                       copy  "rom.header.asm"      ; Include cartridge header
     **** ****     > rom.header.asm
0001               * FILE......: rom.header.asm
0002               * Purpose...: Cartridge header
0003               
0004               *--------------------------------------------------------------
0005               * Cartridge header
0006               ********|*****|*********************|**************************
0007 6000 AA               byte  >aa                   ; 0  Standard header                   >6000
0008 6001   01             byte  >01                   ; 1  Version number
0009 6002 02               byte  >02                   ; 2  Number of programs (optional)     >6002
0010 6003   00             byte  0                     ; 3  Reserved ('R' = adv. mode FG99)
0011               
0012 6004 0000             data  >0000                 ; 4  \ Pointer to power-up list        >6004
0013                                                   ; 5  /
0014               
0015 6006 600C             data  rom.program1          ; 6  \ Pointer to program list         >6006
0016                                                   ; 7  /
0017               
0018 6008 0000             data  >0000                 ; 8  \ Pointer to DSR list             >6008
0019                                                   ; 9  /
0020               
0021 600A 0000             data  >0000                 ; 10 \ Pointer to subprogram list      >600a
0022                                                   ; 11 /
0023               
0024                       ;-----------------------------------------------------------------------
0025                       ; Program list entry
0026                       ;-----------------------------------------------------------------------
0027               rom.program1:
0028 600C 601E             data  rom.program2          ; 12 \ Next program list entry         >600c
0029                                                   ; 13 / (no more items following)
0030               
0031 600E 6040             data  kickstart.code1       ; 14 \ Program address                 >600e
0032                                                   ; 15 /
0033               
0034 6010 0C53             stri 'STEVIE TOOLS'
     6012 5445     
     6014 5649     
     6016 4520     
     6018 544F     
     601A 4F4C     
     601C 53       
0035               
0036                       ;-----------------------------------------------------------------------
0037                       ; Program list entry
0038                       ;-----------------------------------------------------------------------
0039               rom.program2:
0040 601E 0000             data  >0000                 ; 12 \ Next program list entry         >600c
0041                                                   ; 13 / (no more items following)
0042               
0043 6020 6038             data  kickstart.resume      ; 14 \ Program address                 >600e
0044                                                   ; 15 /
0045               
0047 6022 0E53                 stri 'STEVIE 1.3I-30'
     6024 5445     
     6026 5649     
     6028 4520     
     602A 312E     
     602C 3349     
     602E 2D33     
     6030 30       
                   < stevie_b7.asm
0029               
0030               ***************************************************************
0031               * Step 1: Switch to bank 0 (uniform code accross all banks)
0032               ********|*****|*********************|**************************
0033                       aorg  >6038
0034 6038 04E0  34         clr   @bank7.rom            ; Switch to bank 7 "Jonas"
     603A 600E     
0035 603C 0460  28         b     @tib.run.return.mon   ; Resume Stevie session
     603E 6496     
0036               
0037                       aorg  kickstart.code1       ; >6040
0038 6040 04E0  34         clr   @bank0.rom            ; Switch to bank 0 "Jill"
     6042 6000     
0039               ***************************************************************
0040               * Step 2: Satisfy assembler, must know relocated code
0041               ********|*****|*********************|**************************
0042                       aorg  >2000                 ; Relocate to >2000
0043                       copy  "runlib.asm"
     **** ****     > runlib.asm
0001               *******************************************************************************
0002               *              ___  ____  ____  ___  ____  ____    __    ___
0003               *             / __)(  _ \( ___)/ __)(_  _)(  _ \  /__\  (__ \  v.2021
0004               *             \__ \ )___/ )__)( (__   )(   )   / /(__)\  / _/
0005               *             (___/(__)  (____)\___) (__) (_)\_)(__)(__)(____)
0006               *
0007               *                TMS9900 Monitor with Arcade Game support
0008               *                                  for
0009               *              the Texas Instruments TI-99/4A Home Computer
0010               *
0011               *                      2010-2022 by Filip Van Vooren
0012               *
0013               *              https://github.com/FilipVanVooren/spectra2.git
0014               *******************************************************************************
0015               * This file: runlib.a99
0016               *******************************************************************************
0017               * Use following equates to skip/exclude support modules and to control startup
0018               * behaviour.
0019               *
0020               * == Memory
0021               * skip_rom_bankswitch       equ  1  ; Skip support for ROM bankswitching
0022               * skip_vram_cpu_copy        equ  1  ; Skip VRAM to CPU copy functions
0023               * skip_cpu_vram_copy        equ  1  ; Skip CPU  to VRAM copy functions
0024               * skip_cpu_cpu_copy         equ  1  ; Skip CPU  to CPU copy functions
0025               * skip_grom_cpu_copy        equ  1  ; Skip GROM to CPU copy functions
0026               * skip_grom_vram_copy       equ  1  ; Skip GROM to VRAM copy functions
0027               * skip_sams                 equ  1  ; Skip support for SAMS memory expansion
0028               * skip_sams_layout          equ  1  ; Skip SAMS memory layout routine
0029               *
0030               * == VDP
0031               * skip_textmode             equ  1  ; Skip 40x24 textmode support
0032               * skip_vdp_f18a             equ  1  ; Skip f18a support
0033               * skip_vdp_hchar            equ  1  ; Skip hchar, xchar
0034               * skip_vdp_vchar            equ  1  ; Skip vchar, xvchar
0035               * skip_vdp_boxes            equ  1  ; Skip filbox, putbox
0036               * skip_vdp_hexsupport       equ  1  ; Skip mkhex, puthex
0037               * skip_vdp_bitmap           equ  1  ; Skip bitmap functions
0038               * skip_vdp_intscr           equ  1  ; Skip interrupt+screen on/off
0039               * skip_vdp_viewport         equ  1  ; Skip viewport functions
0040               * skip_vdp_yx2px_calc       equ  1  ; Skip YX to pixel calculation
0041               * skip_vdp_px2yx_calc       equ  1  ; Skip pixel to YX calculation
0042               * skip_vdp_sprites          equ  1  ; Skip sprites support
0043               * skip_vdp_cursor           equ  1  ; Skip cursor support
0044               *
0045               * == Sound & speech
0046               * skip_snd_player           equ  1  ; Skip inclusionm of sound player code
0047               * skip_speech_detection     equ  1  ; Skip speech synthesizer detection
0048               * skip_speech_player        equ  1  ; Skip inclusion of speech player code
0049               *
0050               * == Keyboard
0051               * skip_virtual_keyboard     equ  1  ; Skip virtual keyboard scann
0052               * skip_real_keyboard        equ  1  ; Skip real keyboard scan
0053               * use_rom0_kscan            equ  1  ; Use KSCAN in console ROM#0
0054               *
0055               * == Utilities
0056               * skip_random_generator     equ  1  ; Skip random generator functions
0057               * skip_cpu_rle_compress     equ  1  ; Skip CPU RLE compression
0058               * skip_cpu_rle_decompress   equ  1  ; Skip CPU RLE decompression
0059               * skip_vdp_rle_decompress   equ  1  ; Skip VDP RLE decompression
0060               * skip_cpu_hexsupport       equ  1  ; Skip mkhex, puthex
0061               * skip_cpu_numsupport       equ  1  ; Skip mknum, putnum, trimnum
0062               * skip_cpu_crc16            equ  1  ; Skip CPU memory CRC-16 calculation
0063               * skip_cpu_strings          equ  1  ; Skip string support utilities
0064               
0065               * == Kernel/Multitasking
0066               * skip_timer_alloc          equ  1  ; Skip support for timers allocation
0067               * skip_mem_paging           equ  1  ; Skip support for memory paging
0068               * skip_fio                  equ  1  ; Skip support for file I/O, dsrlnk
0069               *
0070               * == Startup behaviour
0071               * startup_backup_scrpad     equ  1  ; Backup scratchpad @>8300->83ff
0072               *                                   ; to pre-defined backup address
0073               * startup_keep_vdpmemory    equ  1  ; Do not clear VDP vram upon startup
0074               *******************************************************************************
0075               
0076               *//////////////////////////////////////////////////////////////
0077               *                       RUNLIB SETUP
0078               *//////////////////////////////////////////////////////////////
0079               
0080                       copy  "memsetup.equ"             ; runlib scratchpad memory setup
     **** ****     > memsetup.equ
0001               * FILE......: memsetup.equ
0002               * Purpose...: Equates for spectra2 memory layout
0003               
0004               ***************************************************************
0005               * >8300 - >8341     Scratchpad memory layout (66 bytes)
0006               ********|*****|*********************|**************************
0007      8300     ws1     equ   >8300                 ; 32 - Primary workspace
0008      8320     mcloop  equ   >8320                 ; 08 - Machine code for loop & speech
0009      8328     wbase   equ   >8328                 ; 02 - PNT base address
0010      832A     wyx     equ   >832a                 ; 02 - Cursor YX position
0011      832C     wtitab  equ   >832c                 ; 02 - Timers: Address of timer table
0012      832E     wtiusr  equ   >832e                 ; 02 - Timers: Address of user hook
0013      8330     wtitmp  equ   >8330                 ; 02 - Timers: Internal use
0014      8332     wvrtkb  equ   >8332                 ; 02 - Virtual keyboard flags
0015      8334     wsdlst  equ   >8334                 ; 02 - Sound player: Tune address
0016      8336     wsdtmp  equ   >8336                 ; 02 - Sound player: Temporary use
0017      8338     wspeak  equ   >8338                 ; 02 - Speech player: Address of LPC data
0018      833A     wcolmn  equ   >833a                 ; 02 - Screen size, columns per row
0019      833C     waux1   equ   >833c                 ; 02 - Temporary storage 1
0020      833E     waux2   equ   >833e                 ; 02 - Temporary storage 2
0021      8340     waux3   equ   >8340                 ; 02 - Temporary storage 3
0022               ***************************************************************
0023      832A     by      equ   wyx                   ;      Cursor Y position
0024      832B     bx      equ   wyx+1                 ;      Cursor X position
0025      8322     mcsprd  equ   mcloop+2              ;      Speech read routine
0026               ***************************************************************
                   < runlib.asm
0081                       copy  "registers.equ"            ; runlib registers
     **** ****     > registers.equ
0001               * FILE......: registers.equ
0002               * Purpose...: Equates for registers
0003               
0004               ***************************************************************
0005               * Register usage
0006               * R0      **free not used**
0007               * R1      **free not used**
0008               * R2      Config register
0009               * R3      Extended config register
0010               * R4      Temporary register/variable tmp0
0011               * R5      Temporary register/variable tmp1
0012               * R6      Temporary register/variable tmp2
0013               * R7      Temporary register/variable tmp3
0014               * R8      Temporary register/variable tmp4
0015               * R9      Stack pointer
0016               * R10     Highest slot in use + Timer counter
0017               * R11     Subroutine return address
0018               * R12     CRU
0019               * R13     Copy of VDP status byte and counter for sound player
0020               * R14     Copy of VDP register #0 and VDP register #1 bytes
0021               * R15     VDP read/write address
0022               *--------------------------------------------------------------
0023               * Special purpose registers
0024               * R0      shift count
0025               * R12     CRU
0026               * R13     WS     - when using LWPI, BLWP, RTWP
0027               * R14     PC     - when using LWPI, BLWP, RTWP
0028               * R15     STATUS - when using LWPI, BLWP, RTWP
0029               ***************************************************************
0030               * Define registers
0031               ********|*****|*********************|**************************
0032      0000     r0      equ   0
0033      0001     r1      equ   1
0034      0002     r2      equ   2
0035      0003     r3      equ   3
0036      0004     r4      equ   4
0037      0005     r5      equ   5
0038      0006     r6      equ   6
0039      0007     r7      equ   7
0040      0008     r8      equ   8
0041      0009     r9      equ   9
0042      000A     r10     equ   10
0043      000B     r11     equ   11
0044      000C     r12     equ   12
0045      000D     r13     equ   13
0046      000E     r14     equ   14
0047      000F     r15     equ   15
0048               ***************************************************************
0049               * Define register equates
0050               ********|*****|*********************|**************************
0051      0002     config  equ   r2                    ; Config register
0052      0003     xconfig equ   r3                    ; Extended config register
0053      0004     tmp0    equ   r4                    ; Temp register 0
0054      0005     tmp1    equ   r5                    ; Temp register 1
0055      0006     tmp2    equ   r6                    ; Temp register 2
0056      0007     tmp3    equ   r7                    ; Temp register 3
0057      0008     tmp4    equ   r8                    ; Temp register 4
0058      0009     stack   equ   r9                    ; Stack pointer
0059      000E     vdpr01  equ   r14                   ; Copy of VDP#0 and VDP#1 bytes
0060      000F     vdprw   equ   r15                   ; Contains VDP read/write address
0061               ***************************************************************
0062               * Define MSB/LSB equates for registers
0063               ********|*****|*********************|**************************
0064      8300     r0hb    equ   ws1                   ; HI byte R0
0065      8301     r0lb    equ   ws1+1                 ; LO byte R0
0066      8302     r1hb    equ   ws1+2                 ; HI byte R1
0067      8303     r1lb    equ   ws1+3                 ; LO byte R1
0068      8304     r2hb    equ   ws1+4                 ; HI byte R2
0069      8305     r2lb    equ   ws1+5                 ; LO byte R2
0070      8306     r3hb    equ   ws1+6                 ; HI byte R3
0071      8307     r3lb    equ   ws1+7                 ; LO byte R3
0072      8308     r4hb    equ   ws1+8                 ; HI byte R4
0073      8309     r4lb    equ   ws1+9                 ; LO byte R4
0074      830A     r5hb    equ   ws1+10                ; HI byte R5
0075      830B     r5lb    equ   ws1+11                ; LO byte R5
0076      830C     r6hb    equ   ws1+12                ; HI byte R6
0077      830D     r6lb    equ   ws1+13                ; LO byte R6
0078      830E     r7hb    equ   ws1+14                ; HI byte R7
0079      830F     r7lb    equ   ws1+15                ; LO byte R7
0080      8310     r8hb    equ   ws1+16                ; HI byte R8
0081      8311     r8lb    equ   ws1+17                ; LO byte R8
0082      8312     r9hb    equ   ws1+18                ; HI byte R9
0083      8313     r9lb    equ   ws1+19                ; LO byte R9
0084      8314     r10hb   equ   ws1+20                ; HI byte R10
0085      8315     r10lb   equ   ws1+21                ; LO byte R10
0086      8316     r11hb   equ   ws1+22                ; HI byte R11
0087      8317     r11lb   equ   ws1+23                ; LO byte R11
0088      8318     r12hb   equ   ws1+24                ; HI byte R12
0089      8319     r12lb   equ   ws1+25                ; LO byte R12
0090      831A     r13hb   equ   ws1+26                ; HI byte R13
0091      831B     r13lb   equ   ws1+27                ; LO byte R13
0092      831C     r14hb   equ   ws1+28                ; HI byte R14
0093      831D     r14lb   equ   ws1+29                ; LO byte R14
0094      831E     r15hb   equ   ws1+30                ; HI byte R15
0095      831F     r15lb   equ   ws1+31                ; LO byte R15
0096               ********|*****|*********************|**************************
0097      8308     tmp0hb  equ   ws1+8                 ; HI byte R4
0098      8309     tmp0lb  equ   ws1+9                 ; LO byte R4
0099      830A     tmp1hb  equ   ws1+10                ; HI byte R5
0100      830B     tmp1lb  equ   ws1+11                ; LO byte R5
0101      830C     tmp2hb  equ   ws1+12                ; HI byte R6
0102      830D     tmp2lb  equ   ws1+13                ; LO byte R6
0103      830E     tmp3hb  equ   ws1+14                ; HI byte R7
0104      830F     tmp3lb  equ   ws1+15                ; LO byte R7
0105      8310     tmp4hb  equ   ws1+16                ; HI byte R8
0106      8311     tmp4lb  equ   ws1+17                ; LO byte R8
0107               ********|*****|*********************|**************************
0108      8314     btihi   equ   ws1+20                ; Highest slot in use (HI byte R10)
0109      831A     bvdpst  equ   ws1+26                ; Copy of VDP status register (HI byte R13)
0110      831C     vdpr0   equ   ws1+28                ; High byte of R14. Is VDP#0 byte
0111      831D     vdpr1   equ   ws1+29                ; Low byte  of R14. Is VDP#1 byte
0112               ***************************************************************
                   < runlib.asm
0082                       copy  "portaddr.equ"             ; runlib hardware port addresses
     **** ****     > portaddr.equ
0001               * FILE......: portaddr.equ
0002               * Purpose...: Equates for hardware port addresses and vectors
0003               
0004               ***************************************************************
0005               * Equates for VDP, GROM, SOUND, SPEECH ports
0006               ********|*****|*********************|**************************
0007      8400     sound   equ   >8400                 ; Sound generator address
0008      8800     vdpr    equ   >8800                 ; VDP read data window address
0009      8C00     vdpw    equ   >8c00                 ; VDP write data window address
0010      8802     vdps    equ   >8802                 ; VDP status register
0011      8C02     vdpa    equ   >8c02                 ; VDP address register
0012      9C02     grmwa   equ   >9c02                 ; GROM set write address
0013      9802     grmra   equ   >9802                 ; GROM set read address
0014      9800     grmrd   equ   >9800                 ; GROM read byte
0015      9C00     grmwd   equ   >9c00                 ; GROM write byte
0016      9000     spchrd  equ   >9000                 ; Address of speech synth Read Data Register
0017      9400     spchwt  equ   >9400                 ; Address of speech synth Write Data Register
0018               
0019      000E     kscan   equ   >000e                 ; Address of KSCAN routine in console ROM 0
                   < runlib.asm
0083                       copy  "param.equ"                ; runlib parameters
     **** ****     > param.equ
0001               * FILE......: param.equ
0002               * Purpose...: Equates used for subroutine parameters
0003               
0004               ***************************************************************
0005               * Subroutine parameter equates
0006               ***************************************************************
0007      FFFF     eol     equ   >ffff                 ; End-Of-List
0008      FFFF     nofont  equ   >ffff                 ; Skip loading font in RUNLIB
0009      0000     norep   equ   0                     ; PUTBOX > Value for P3. Don't repeat box
0010      3030     num1    equ   >3030                 ; MKNUM  > ASCII 0-9, leading 0's
0011      3020     num2    equ   >3020                 ; MKNUM  > ASCII 0-9, leading spaces
0012      0007     sdopt1  equ   7                     ; SDPLAY > 111 (Player on, repeat, tune in CPU memory)
0013      0005     sdopt2  equ   5                     ; SDPLAY > 101 (Player on, no repeat, tune in CPU memory)
0014      0006     sdopt3  equ   6                     ; SDPLAY > 110 (Player on, repeat, tune in VRAM)
0015      0004     sdopt4  equ   4                     ; SDPLAY > 100 (Player on, no repeat, tune in VRAM)
0016      0000     fnopt1  equ   >0000                 ; LDFNT  > Load TI title screen font
0017      0006     fnopt2  equ   >0006                 ; LDFNT  > Load upper case font
0018      000C     fnopt3  equ   >000c                 ; LDFNT  > Load upper/lower case font
0019      0012     fnopt4  equ   >0012                 ; LDFNT  > Load lower case font
0020      8000     fnopt5  equ   >8000                 ; LDFNT  > Load TI title screen font  & bold
0021      8006     fnopt6  equ   >8006                 ; LDFNT  > Load upper case font       & bold
0022      800C     fnopt7  equ   >800c                 ; LDFNT  > Load upper/lower case font & bold
0023      8012     fnopt8  equ   >8012                 ; LDFNT  > Load lower case font       & bold
0024               *--------------------------------------------------------------
0025               *   Speech player
0026               *--------------------------------------------------------------
0027      0060     talkon  equ   >60                   ; 'start talking' command code for speech synth
0028      00FF     talkof  equ   >ff                   ; 'stop talking' command code for speech synth
0029      6000     spkon   equ   >6000                 ; 'start talking' command code for speech synth
0030      FF00     spkoff  equ   >ff00                 ; 'stop talking' command code for speech synth
                   < runlib.asm
0084                       copy  "classic99.equ"            ; classic99 emulator opcodes
     **** ****     > classic99.equ
0001               * FILE......: classic99.equ
0002               * Purpose...: Extra opcodes for the classic99 emulator
0003               
0004               ***************************************************************
0005               *              Extra opcodes for classic99
0006               ********|*****|*********************|**************************
0007      0110     c99_norm      equ  >0110            ; CPU normal
0008      0111     c99_ovrd      equ  >0111            ; CPU overdrive
0009      0112     c99_smax      equ  >0112            ; System Maximum
0010      0113     c99_brk       equ  >0113            ; Breakpoint
0011      0114     c99_quit      equ  >0114            ; Quit emulator
0012               *--------------------------------------------------------------
0013               * Attention:
0014               * Debug opcodes are part of a 3 words instruction!
0015               * See classic99 user manual for details on proper usage.
0016               *--------------------------------------------------------------
0017      0120     c99_dbgr0     equ  >0120            ; debug printf R0
0018      0121     c99_dbgr1     equ  >0121            ; debug printf R1
0019      0122     c99_dbgr2     equ  >0122            ; debug printf R2
0020      0123     c99_dbgr3     equ  >0123            ; debug printf R3
0021      0124     c99_dbgr4     equ  >0124            ; debug printf R4
0022      0125     c99_dbgr5     equ  >0125            ; debug printf R5
0023      0126     c99_dbgr6     equ  >0126            ; debug printf R6
0024      0127     c99_dbgr7     equ  >0127            ; debug printf R7
0025      0128     c99_dbgr8     equ  >0128            ; debug printf R8
0026      0129     c99_dbgr9     equ  >0129            ; debug printf R9
0027      012A     c99_dbgr10    equ  >012a            ; debug printf R10
0028      012B     c99_dbgr11    equ  >012b            ; debug printf R11
0029      012C     c99_dbgr12    equ  >012c            ; debug printf R12
0030      012D     c99_dbgr13    equ  >012d            ; debug printf R13
0031      012E     c99_dbgr14    equ  >012e            ; debug printf R14
0032      012F     c99_dbgr15    equ  >012f            ; debug printf R15
                   < runlib.asm
0085               
0089               
0090                       copy  "cpu_constants.asm"        ; Define constants for word/MSB/LSB
     **** ****     > cpu_constants.asm
0001               * FILE......: cpu_constants.asm
0002               * Purpose...: Constants used by Spectra2 and for own use
0003               
0004               ***************************************************************
0005               *                      Some constants
0006               ********|*****|*********************|**************************
0007               
0008               *--------------------------------------------------------------
0009               * Word values
0010               *--------------------------------------------------------------
0011               ;                                   ;       0123456789ABCDEF
0012 2000 0000     w$0000  data  >0000                 ; >0000 0000000000000000
0013 2002 0001     w$0001  data  >0001                 ; >0001 0000000000000001
0014 2004 0002     w$0002  data  >0002                 ; >0002 0000000000000010
0015 2006 0004     w$0004  data  >0004                 ; >0004 0000000000000100
0016 2008 0008     w$0008  data  >0008                 ; >0008 0000000000001000
0017 200A 0010     w$0010  data  >0010                 ; >0010 0000000000010000
0018 200C 0020     w$0020  data  >0020                 ; >0020 0000000000100000
0019 200E 0040     w$0040  data  >0040                 ; >0040 0000000001000000
0020 2010 0080     w$0080  data  >0080                 ; >0080 0000000010000000
0021 2012 0100     w$0100  data  >0100                 ; >0100 0000000100000000
0022 2014 0200     w$0200  data  >0200                 ; >0200 0000001000000000
0023 2016 0400     w$0400  data  >0400                 ; >0400 0000010000000000
0024 2018 0800     w$0800  data  >0800                 ; >0800 0000100000000000
0025 201A 1000     w$1000  data  >1000                 ; >1000 0001000000000000
0026 201C 2000     w$2000  data  >2000                 ; >2000 0010000000000000
0027 201E 4000     w$4000  data  >4000                 ; >4000 0100000000000000
0028 2020 8000     w$8000  data  >8000                 ; >8000 1000000000000000
0029 2022 FFFF     w$ffff  data  >ffff                 ; >ffff 1111111111111111
0030 2024 D000     w$d000  data  >d000                 ; >d000
0031               *--------------------------------------------------------------
0032               * Byte values - High byte (=MSB) for byte operations
0033               *--------------------------------------------------------------
0034      2000     hb$00   equ   w$0000                ; >0000
0035      2012     hb$01   equ   w$0100                ; >0100
0036      2014     hb$02   equ   w$0200                ; >0200
0037      2016     hb$04   equ   w$0400                ; >0400
0038      2018     hb$08   equ   w$0800                ; >0800
0039      201A     hb$10   equ   w$1000                ; >1000
0040      201C     hb$20   equ   w$2000                ; >2000
0041      201E     hb$40   equ   w$4000                ; >4000
0042      2020     hb$80   equ   w$8000                ; >8000
0043      2024     hb$d0   equ   w$d000                ; >d000
0044               *--------------------------------------------------------------
0045               * Byte values - Low byte (=LSB) for byte operations
0046               *--------------------------------------------------------------
0047      2000     lb$00   equ   w$0000                ; >0000
0048      2002     lb$01   equ   w$0001                ; >0001
0049      2004     lb$02   equ   w$0002                ; >0002
0050      2006     lb$04   equ   w$0004                ; >0004
0051      2008     lb$08   equ   w$0008                ; >0008
0052      200A     lb$10   equ   w$0010                ; >0010
0053      200C     lb$20   equ   w$0020                ; >0020
0054      200E     lb$40   equ   w$0040                ; >0040
0055      2010     lb$80   equ   w$0080                ; >0080
0056               *--------------------------------------------------------------
0057               * Bit values
0058               *--------------------------------------------------------------
0059               ;                                   ;       0123456789ABCDEF
0060      2002     wbit15  equ   w$0001                ; >0001 0000000000000001
0061      2004     wbit14  equ   w$0002                ; >0002 0000000000000010
0062      2006     wbit13  equ   w$0004                ; >0004 0000000000000100
0063      2008     wbit12  equ   w$0008                ; >0008 0000000000001000
0064      200A     wbit11  equ   w$0010                ; >0010 0000000000010000
0065      200C     wbit10  equ   w$0020                ; >0020 0000000000100000
0066      200E     wbit9   equ   w$0040                ; >0040 0000000001000000
0067      2010     wbit8   equ   w$0080                ; >0080 0000000010000000
0068      2012     wbit7   equ   w$0100                ; >0100 0000000100000000
0069      2014     wbit6   equ   w$0200                ; >0200 0000001000000000
0070      2016     wbit5   equ   w$0400                ; >0400 0000010000000000
0071      2018     wbit4   equ   w$0800                ; >0800 0000100000000000
0072      201A     wbit3   equ   w$1000                ; >1000 0001000000000000
0073      201C     wbit2   equ   w$2000                ; >2000 0010000000000000
0074      201E     wbit1   equ   w$4000                ; >4000 0100000000000000
0075      2020     wbit0   equ   w$8000                ; >8000 1000000000000000
                   < runlib.asm
0091                       copy  "config.equ"               ; Equates for bits in config register
     **** ****     > config.equ
0001               * FILE......: config.equ
0002               * Purpose...: Equates for bits in config register
0003               
0004               ***************************************************************
0005               * The config register equates
0006               *--------------------------------------------------------------
0007               * Configuration flags
0008               * ===================
0009               *
0010               * ; 15  Sound player: tune source       1=ROM/RAM      0=VDP MEMORY
0011               * ; 14  Sound player: repeat tune       1=yes          0=no
0012               * ; 13  Sound player: enabled           1=yes          0=no (or pause)
0013               * ; 12  VDP9918 sprite collision?       1=yes          0=no
0014               * ; 11  Keyboard: ANY key pressed       1=yes          0=no
0015               * ; 10  Keyboard: Alpha lock key down   1=yes          0=no
0016               * ; 09  Timer: Kernel thread enabled    1=yes          0=no
0017               * ; 08  Timer: Block kernel thread      1=yes          0=no
0018               * ; 07  Timer: User hook enabled        1=yes          0=no
0019               * ; 06  Timer: Block user hook          1=yes          0=no
0020               * ; 05  Speech synthesizer present      1=yes          0=no
0021               * ; 04  Speech player: busy             1=yes          0=no
0022               * ; 03  Speech player: enabled          1=yes          0=no
0023               * ; 02  VDP9918 PAL version             1=yes(50)      0=no(60)
0024               * ; 01  F18A present                    1=on           0=off
0025               * ; 00  Subroutine state flag           1=on           0=off
0026               ********|*****|*********************|**************************
0027      201C     palon   equ   wbit2                 ; bit 2=1   (VDP9918 PAL version)
0028      2012     enusr   equ   wbit7                 ; bit 7=1   (Enable user hook)
0029      200E     enknl   equ   wbit9                 ; bit 9=1   (Enable kernel thread)
0030      200A     anykey  equ   wbit11                ; BIT 11 in the CONFIG register
0031               ***************************************************************
                   < runlib.asm
0092                       copy  "cpu_crash.asm"            ; CPU crash handler
     **** ****     > cpu_crash.asm
0001               * FILE......: cpu_crash.asm
0002               * Purpose...: Custom crash handler module
0003               
0004               
0005               ***************************************************************
0006               * cpu.crash - CPU program crashed handler
0007               ***************************************************************
0008               *  bl   @cpu.crash
0009               *--------------------------------------------------------------
0010               * Crash and halt system. Upon crash entry register contents are
0011               * copied to the memory region >ffe0 - >fffe and displayed after
0012               * resetting the spectra2 runtime library, video modes, etc.
0013               *
0014               * Diagnostics
0015               * >ffce  caller address
0016               *
0017               * Register contents
0018               * >ffdc  wp
0019               * >ffde  st
0020               * >ffe0  r0
0021               * >ffe2  r1
0022               * >ffe4  r2  (config)
0023               * >ffe6  r3
0024               * >ffe8  r4  (tmp0)
0025               * >ffea  r5  (tmp1)
0026               * >ffec  r6  (tmp2)
0027               * >ffee  r7  (tmp3)
0028               * >fff0  r8  (tmp4)
0029               * >fff2  r9  (stack)
0030               * >fff4  r10
0031               * >fff6  r11
0032               * >fff8  r12
0033               * >fffa  r13
0034               * >fffc  r14
0035               * >fffe  r15
0036               ********|*****|*********************|**************************
0037               cpu.crash:
0038 2026 022B  22         ai    r11,-4                ; Remove opcode offset
     2028 FFFC     
0039               *--------------------------------------------------------------
0040               *    Save registers to high memory
0041               *--------------------------------------------------------------
0042 202A C800  38         mov   r0,@>ffe0
     202C FFE0     
0043 202E C801  38         mov   r1,@>ffe2
     2030 FFE2     
0044 2032 C802  38         mov   r2,@>ffe4
     2034 FFE4     
0045 2036 C803  38         mov   r3,@>ffe6
     2038 FFE6     
0046 203A C804  38         mov   r4,@>ffe8
     203C FFE8     
0047 203E C805  38         mov   r5,@>ffea
     2040 FFEA     
0048 2042 C806  38         mov   r6,@>ffec
     2044 FFEC     
0049 2046 C807  38         mov   r7,@>ffee
     2048 FFEE     
0050 204A C808  38         mov   r8,@>fff0
     204C FFF0     
0051 204E C809  38         mov   r9,@>fff2
     2050 FFF2     
0052 2052 C80A  38         mov   r10,@>fff4
     2054 FFF4     
0053 2056 C80B  38         mov   r11,@>fff6
     2058 FFF6     
0054 205A C80C  38         mov   r12,@>fff8
     205C FFF8     
0055 205E C80D  38         mov   r13,@>fffa
     2060 FFFA     
0056 2062 C80E  38         mov   r14,@>fffc
     2064 FFFC     
0057 2066 C80F  38         mov   r15,@>ffff
     2068 FFFF     
0058 206A 02A0  12         stwp  r0
0059 206C C800  38         mov   r0,@>ffdc
     206E FFDC     
0060 2070 02C0  12         stst  r0
0061 2072 C800  38         mov   r0,@>ffde
     2074 FFDE     
0062               *--------------------------------------------------------------
0063               *    Reset system
0064               *--------------------------------------------------------------
0065               cpu.crash.reset:
0066 2076 02E0  18         lwpi  ws1                   ; Activate workspace 1
     2078 8300     
0067 207A 04E0  26         clr   @>8302                ; Reset exit flag (R1 in workspace WS1!)
     207C 8302     
0068 207E 0200  20         li    r0,>4a4a              ; Note that a crash occured (Flag = >4a4a)
     2080 4A4A     
0069 2082 0460  28         b     @runli1               ; Initialize system again (VDP, Memory, etc.)
     2084 2EDE     
0070               *--------------------------------------------------------------
0071               *    Show diagnostics after system reset
0072               *--------------------------------------------------------------
0073               cpu.crash.main:
0074                       ;------------------------------------------------------
0075                       ; Load "32x24" video mode & font
0076                       ;------------------------------------------------------
0077 2086 06A0  32         bl    @vidtab               ; Load video mode table into VDP
     2088 2306     
0078 208A 21FF                   data graph1           ; \ i  p0 = pointer to video mode table
0079                                                   ; /
0080               
0081 208C 06A0  32         bl    @ldfnt
     208E 236E     
0082 2090 0900                   data >0900,fnopt3     ; Load font (upper & lower case)
     2092 000C     
0083               
0084 2094 06A0  32         bl    @filv
     2096 229C     
0085 2098 0000                   data >0000,32,32*24   ; Clear screen
     209A 0020     
     209C 0300     
0086               
0087 209E 06A0  32         bl    @filv
     20A0 229C     
0088 20A2 0380                   data >0380,>f0,32*24  ; Load color table
     20A4 00F0     
     20A6 0300     
0089                       ;------------------------------------------------------
0090                       ; Show crash address
0091                       ;------------------------------------------------------
0092 20A8 06A0  32         bl    @putat                ; Show crash message
     20AA 2450     
0093 20AC 0000                   data >0000,cpu.crash.msg.crashed
     20AE 2192     
0094               
0095 20B0 06A0  32         bl    @puthex               ; Put hex value on screen
     20B2 29AA     
0096 20B4 0015                   byte 0,21             ; \ i  p0 = YX position
0097 20B6 FFF6                   data >fff6            ; | i  p1 = Pointer to 16 bit word
0098 20B8 A100                   data rambuf           ; | i  p2 = Pointer to ram buffer
0099 20BA 4130                   byte 65,48            ; | i  p3 = MSB offset for ASCII digit a-f
0100                                                   ; /         LSB offset for ASCII digit 0-9
0101                       ;------------------------------------------------------
0102                       ; Show caller address
0103                       ;------------------------------------------------------
0104 20BC 06A0  32         bl    @putat                ; Show caller message
     20BE 2450     
0105 20C0 0100                   data >0100,cpu.crash.msg.caller
     20C2 21A8     
0106               
0107 20C4 06A0  32         bl    @puthex               ; Put hex value on screen
     20C6 29AA     
0108 20C8 0115                   byte 1,21             ; \ i  p0 = YX position
0109 20CA FFCE                   data >ffce            ; | i  p1 = Pointer to 16 bit word
0110 20CC A100                   data rambuf           ; | i  p2 = Pointer to ram buffer
0111 20CE 4130                   byte 65,48            ; | i  p3 = MSB offset for ASCII digit a-f
0112                                                   ; /         LSB offset for ASCII digit 0-9
0113                       ;------------------------------------------------------
0114                       ; Display labels
0115                       ;------------------------------------------------------
0116 20D0 06A0  32         bl    @putat
     20D2 2450     
0117 20D4 0300                   byte 3,0
0118 20D6 21C4                   data cpu.crash.msg.wp
0119 20D8 06A0  32         bl    @putat
     20DA 2450     
0120 20DC 0400                   byte 4,0
0121 20DE 21C9                   data cpu.crash.msg.st
0122 20E0 06A0  32         bl    @putat
     20E2 2450     
0123 20E4 1600                   byte 22,0
0124 20E6 21CE                   data cpu.crash.msg.source
0125 20E8 06A0  32         bl    @putat
     20EA 2450     
0126 20EC 1700                   byte 23,0
0127 20EE 21E6                   data cpu.crash.msg.id
0128                       ;------------------------------------------------------
0129                       ; Show crash registers WP, ST, R0 - R15
0130                       ;------------------------------------------------------
0131 20F0 06A0  32         bl    @at                   ; Put cursor at YX
     20F2 26D4     
0132 20F4 0304                   byte 3,4              ; \ i p0 = YX position
0133                                                   ; /
0134               
0135 20F6 0204  20         li    tmp0,>ffdc            ; Crash registers >ffdc - >ffff
     20F8 FFDC     
0136 20FA 04C6  14         clr   tmp2                  ; Loop counter
0137               
0138               cpu.crash.showreg:
0139 20FC C034  30         mov   *tmp0+,r0             ; Move crash register content to r0
0140               
0141 20FE 0649  14         dect  stack
0142 2100 C644  30         mov   tmp0,*stack           ; Push tmp0
0143 2102 0649  14         dect  stack
0144 2104 C645  30         mov   tmp1,*stack           ; Push tmp1
0145 2106 0649  14         dect  stack
0146 2108 C646  30         mov   tmp2,*stack           ; Push tmp2
0147                       ;------------------------------------------------------
0148                       ; Display crash register number
0149                       ;------------------------------------------------------
0150               cpu.crash.showreg.label:
0151 210A C046  18         mov   tmp2,r1               ; Save register number
0152 210C 0286  22         ci    tmp2,1                ; Skip labels WP/ST?
     210E 0001     
0153 2110 1220  14         jle   cpu.crash.showreg.content
0154                                                   ; Yes, skip
0155               
0156 2112 0641  14         dect  r1                    ; Adjust because of "dummy" WP/ST registers
0157 2114 06A0  32         bl    @mknum
     2116 29B4     
0158 2118 8302                   data r1hb             ; \ i  p0 = Pointer to 16 bit unsigned word
0159 211A A100                   data rambuf           ; | i  p1 = Pointer to ram buffer
0160 211C 3020                   byte 48,32            ; | i  p2 = MSB offset for ASCII digit a-f
0161                                                   ; /         LSB offset for ASCII digit 0-9
0162               
0163 211E 06A0  32         bl    @setx                 ; Set cursor X position
     2120 26EA     
0164 2122 0000                   data 0                ; \ i  p0 =  Cursor Y position
0165                                                   ; /
0166               
0167 2124 0204  20         li    tmp0,>0400            ; Set string length-prefix byte
     2126 0400     
0168 2128 D804  38         movb  tmp0,@rambuf          ;
     212A A100     
0169               
0170 212C 06A0  32         bl    @putstr               ; Put length-byte prefixed string at current YX
     212E 242C     
0171 2130 A100                   data rambuf           ; \ i  p0 = Pointer to ram buffer
0172                                                   ; /
0173               
0174 2132 06A0  32         bl    @setx                 ; Set cursor X position
     2134 26EA     
0175 2136 0002                   data 2                ; \ i  p0 =  Cursor Y position
0176                                                   ; /
0177               
0178 2138 0281  22         ci    r1,10
     213A 000A     
0179 213C 1102  14         jlt   !
0180 213E 0620  26         dec   @wyx                  ; x=x-1
     2140 832A     
0181               
0182 2142 06A0  32 !       bl    @putstr
     2144 242C     
0183 2146 21BE                   data cpu.crash.msg.r
0184               
0185 2148 06A0  32         bl    @mknum
     214A 29B4     
0186 214C 8302                   data r1hb             ; \ i  p0 = Pointer to 16 bit unsigned word
0187 214E A100                   data rambuf           ; | i  p1 = Pointer to ram buffer
0188 2150 3020                   byte 48,32            ; | i  p2 = MSB offset for ASCII digit a-f
0189                                                   ; /         LSB offset for ASCII digit 0-9
0190                       ;------------------------------------------------------
0191                       ; Display crash register content
0192                       ;------------------------------------------------------
0193               cpu.crash.showreg.content:
0194 2152 06A0  32         bl    @mkhex                ; Convert hex word to string
     2154 2926     
0195 2156 8300                   data r0hb             ; \ i  p0 = Pointer to 16 bit word
0196 2158 A100                   data rambuf           ; | i  p1 = Pointer to ram buffer
0197 215A 4130                   byte 65,48            ; | i  p2 = MSB offset for ASCII digit a-f
0198                                                   ; /         LSB offset for ASCII digit 0-9
0199               
0200 215C 06A0  32         bl    @setx                 ; Set cursor X position
     215E 26EA     
0201 2160 0004                   data 4                ; \ i  p0 =  Cursor Y position
0202                                                   ; /
0203               
0204 2162 06A0  32         bl    @putstr               ; Put '  >'
     2164 242C     
0205 2166 21C0                   data cpu.crash.msg.marker
0206               
0207 2168 06A0  32         bl    @setx                 ; Set cursor X position
     216A 26EA     
0208 216C 0007                   data 7                ; \ i  p0 =  Cursor Y position
0209                                                   ; /
0210               
0211 216E 0204  20         li    tmp0,>0400            ; Set string length-prefix byte
     2170 0400     
0212 2172 D804  38         movb  tmp0,@rambuf          ;
     2174 A100     
0213               
0214 2176 06A0  32         bl    @putstr               ; Put length-byte prefixed string at current YX
     2178 242C     
0215 217A A100                   data rambuf           ; \ i  p0 = Pointer to ram buffer
0216                                                   ; /
0217               
0218 217C C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0219 217E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0220 2180 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0221               
0222 2182 06A0  32         bl    @down                 ; y=y+1
     2184 26DA     
0223               
0224 2186 0586  14         inc   tmp2
0225 2188 0286  22         ci    tmp2,17
     218A 0011     
0226 218C 12B7  14         jle   cpu.crash.showreg     ; Show next register
0227                       ;------------------------------------------------------
0228                       ; Kernel takes over
0229                       ;------------------------------------------------------
0230 218E 0460  28         b     @cpu.crash.showbank   ; Expected to be included in
     2190 7F00     
0231               
0232               
0233 2192 1553     cpu.crash.msg.crashed      stri 'System crashed near >'
     2194 7973     
     2196 7465     
     2198 6D20     
     219A 6372     
     219C 6173     
     219E 6865     
     21A0 6420     
     21A2 6E65     
     21A4 6172     
     21A6 203E     
0234 21A8 1543     cpu.crash.msg.caller       stri 'Caller address near >'
     21AA 616C     
     21AC 6C65     
     21AE 7220     
     21B0 6164     
     21B2 6472     
     21B4 6573     
     21B6 7320     
     21B8 6E65     
     21BA 6172     
     21BC 203E     
0235 21BE 0152     cpu.crash.msg.r            stri 'R'
0236 21C0 0320     cpu.crash.msg.marker       stri '  >'
     21C2 203E     
0237 21C4 042A     cpu.crash.msg.wp           stri '**WP'
     21C6 2A57     
     21C8 50       
0238 21C9   04     cpu.crash.msg.st           stri '**ST'
     21CA 2A2A     
     21CC 5354     
0239 21CE 1753     cpu.crash.msg.source       stri 'Source    %%build_src%%'
     21D0 6F75     
     21D2 7263     
     21D4 6520     
     21D6 2020     
     21D8 2025     
     21DA 2562     
     21DC 7569     
     21DE 6C64     
     21E0 5F73     
     21E2 7263     
     21E4 2525     
0240 21E6 1842     cpu.crash.msg.id           stri 'Build-ID  %%build_date%%'
     21E8 7569     
     21EA 6C64     
     21EC 2D49     
     21EE 4420     
     21F0 2025     
     21F2 2562     
     21F4 7569     
     21F6 6C64     
     21F8 5F64     
     21FA 6174     
     21FC 6525     
     21FE 25       
                   < runlib.asm
0093                       copy  "vdp_tables.asm"           ; Data used by runtime library
     **** ****     > vdp_tables.asm
0001               * FILE......: vdp_tables.a99
0002               * Purpose...: Video mode tables
0003               
0004               ***************************************************************
0005               * Graphics mode 1 (32 columns/24 rows)
0006               *--------------------------------------------------------------
0007 21FF   00     graph1  byte  >00,>e2,>00,>0e,>01,>06,>02,SPFBCK,0,32
     2200 E200     
     2202 0E01     
     2204 0602     
     2206 0400     
     2208 20       
0008               *
0009               * ; VDP#0 Control bits
0010               * ;      bit 6=0: M3 | Graphics 1 mode
0011               * ;      bit 7=0: Disable external VDP input
0012               * ; VDP#1 Control bits
0013               * ;      bit 0=1: 16K selection
0014               * ;      bit 1=1: Enable display
0015               * ;      bit 2=1: Enable VDP interrupt
0016               * ;      bit 3=0: M1 \ Graphics 1 mode
0017               * ;      bit 4=0: M2 /
0018               * ;      bit 5=0: reserved
0019               * ;      bit 6=1: 16x16 sprites
0020               * ;      bit 7=0: Sprite magnification (1x)
0021               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0022               * ; VDP#3 PCT (Pattern color table)      at >0380  (>0E * >040)
0023               * ; VDP#4 PDT (Pattern descriptor table) at >0800  (>01 * >800)
0024               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0025               * ; VDP#6 SPT (Sprite pattern table)     at >1000  (>02 * >800)
0026               * ; VDP#7 Set screen background color
0027               
0028               
0029               ***************************************************************
0030               * Textmode (40 columns/24 rows)
0031               *--------------------------------------------------------------
0032 2209   00     tx4024  byte  >00,>f2,>00,>0e,>01,>06,>00,SPFCLR,0,40
     220A F200     
     220C 0E01     
     220E 0600     
     2210 F400     
     2212 28       
0033               *
0034               * ; VDP#0 Control bits
0035               * ;      bit 6=0: M3 | Graphics 1 mode
0036               * ;      bit 7=0: Disable external VDP input
0037               * ; VDP#1 Control bits
0038               * ;      bit 0=1: 16K selection
0039               * ;      bit 1=1: Enable display
0040               * ;      bit 2=1: Enable VDP interrupt
0041               * ;      bit 3=1: M1 \ TEXT MODE
0042               * ;      bit 4=0: M2 /
0043               * ;      bit 5=0: reserved
0044               * ;      bit 6=1: 16x16 sprites
0045               * ;      bit 7=0: Sprite magnification (1x)
0046               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0047               * ; VDP#3 PCT (Pattern color table)      at >0380  (>0E * >040)
0048               * ; VDP#4 PDT (Pattern descriptor table) at >0800  (>01 * >800)
0049               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0050               * ; VDP#6 SPT (Sprite pattern table)     at >0000  (>00 * >800)
0051               * ; VDP#7 Set foreground/background color
0052               ***************************************************************
0053               
0054               
0055               ***************************************************************
0056               * Textmode (80 columns, 24 rows) - F18A
0057               *--------------------------------------------------------------
0058 2213   04     tx8024  byte  >04,>f0,>00,>3f,>02,>40,>03,SPFCLR,0,80
     2214 F000     
     2216 3F02     
     2218 4003     
     221A F400     
     221C 50       
0059               *
0060               * ; VDP#0 Control bits
0061               * ;      bit 6=0: M3 | Graphics 1 mode
0062               * ;      bit 7=0: Disable external VDP input
0063               * ; VDP#1 Control bits
0064               * ;      bit 0=1: 16K selection
0065               * ;      bit 1=1: Enable display
0066               * ;      bit 2=1: Enable VDP interrupt
0067               * ;      bit 3=1: M1 \ TEXT MODE
0068               * ;      bit 4=0: M2 /
0069               * ;      bit 5=0: reserved
0070               * ;      bit 6=0: 8x8 sprites
0071               * ;      bit 7=0: Sprite magnification (1x)
0072               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0073               * ; VDP#3 PCT (Pattern color table)      at >0FC0  (>3F * >040)
0074               * ; VDP#4 PDT (Pattern descriptor table) at >1000  (>02 * >800)
0075               * ; VDP#5 SAT (sprite attribute list)    at >2000  (>40 * >080)
0076               * ; VDP#6 SPT (Sprite pattern table)     at >1800  (>03 * >800)
0077               * ; VDP#7 Set foreground/background color
0078               ***************************************************************
                   < runlib.asm
0094                       copy  "basic_cpu_vdp.asm"        ; Basic CPU & VDP functions
     **** ****     > basic_cpu_vdp.asm
0001               * FILE......: basic_cpu_vdp.asm
0002               * Purpose...: Basic CPU & VDP functions used by other modules
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *       Support Machine Code for copy & fill functions
0006               *//////////////////////////////////////////////////////////////
0007               
0008               *--------------------------------------------------------------
0009               * ; Machine code for tight loop.
0010               * ; The MOV operation at MCLOOP must be injected by the calling routine.
0011               *--------------------------------------------------------------
0012               *       DATA  >????                 ; \ mcloop  mov   ...
0013 221E 0606     mccode  data  >0606                 ; |         dec   r6 (tmp2)
0014 2220 16FD             data  >16fd                 ; |         jne   mcloop
0015 2222 045B             data  >045b                 ; /         b     *r11
0016               *--------------------------------------------------------------
0017               * ; Machine code for reading from the speech synthesizer
0018               * ; The SRC instruction takes 12 uS for execution in scratchpad RAM.
0019               * ; Is required for the 12 uS delay. It destroys R5.
0020               *--------------------------------------------------------------
0021 2224 D114     spcode  data  >d114                 ; \         movb  *r4,r4 (tmp0)
0022 2226 0BC5             data  >0bc5                 ; /         src   r5,12  (tmp1)
0023                       even
0024               
0025               
0026               ***************************************************************
0027               * loadmc - Load machine code into scratchpad  >8322 - >8328
0028               ***************************************************************
0029               *  bl  @loadmc
0030               *--------------------------------------------------------------
0031               *  REMARKS
0032               *  Machine instruction in location @>8320 will be set by
0033               *  SP2 copy/fill routine that is called later on.
0034               ********|*****|*********************|**************************
0035               loadmc:
0036 2228 0201  20         li    r1,mccode             ; Machinecode to patch
     222A 221E     
0037 222C 0202  20         li    r2,mcloop+2           ; Scratch-pad reserved for machine code
     222E 8322     
0038 2230 CCB1  46         mov   *r1+,*r2+             ; Copy 1st instruction
0039 2232 CCB1  46         mov   *r1+,*r2+             ; Copy 2nd instruction
0040 2234 CCB1  46         mov   *r1+,*r2+             ; Copy 3rd instruction
0041 2236 045B  20         b     *r11                  ; Return to caller
0042               
0043               
0044               *//////////////////////////////////////////////////////////////
0045               *                    STACK SUPPORT FUNCTIONS
0046               *//////////////////////////////////////////////////////////////
0047               
0048               ***************************************************************
0049               * POPR. - Pop registers & return to caller
0050               ***************************************************************
0051               *  B  @POPRG.
0052               *--------------------------------------------------------------
0053               *  REMARKS
0054               *  R11 must be at stack bottom
0055               ********|*****|*********************|**************************
0056 2238 C0F9  30 popr3   mov   *stack+,r3
0057 223A C0B9  30 popr2   mov   *stack+,r2
0058 223C C079  30 popr1   mov   *stack+,r1
0059 223E C039  30 popr0   mov   *stack+,r0
0060 2240 C2F9  30 poprt   mov   *stack+,r11
0061 2242 045B  20         b     *r11
0062               
0063               
0064               
0065               *//////////////////////////////////////////////////////////////
0066               *                   MEMORY FILL FUNCTIONS
0067               *//////////////////////////////////////////////////////////////
0068               
0069               ***************************************************************
0070               * FILM - Fill CPU memory with byte
0071               ***************************************************************
0072               *  bl   @film
0073               *  data P0,P1,P2
0074               *--------------------------------------------------------------
0075               *  P0 = Memory start address
0076               *  P1 = Byte to fill
0077               *  P2 = Number of bytes to fill
0078               *--------------------------------------------------------------
0079               *  bl   @xfilm
0080               *
0081               *  TMP0 = Memory start address
0082               *  TMP1 = Byte to fill
0083               *  TMP2 = Number of bytes to fill
0084               ********|*****|*********************|**************************
0085 2244 C13B  30 film    mov   *r11+,tmp0            ; Memory start
0086 2246 C17B  30         mov   *r11+,tmp1            ; Byte to fill
0087 2248 C1BB  30         mov   *r11+,tmp2            ; Repeat count
0088               *--------------------------------------------------------------
0089               * Assert
0090               *--------------------------------------------------------------
0091 224A C1C6  18 xfilm   mov   tmp2,tmp3             ; Bytes to fill = 0 ?
0092 224C 1604  14         jne   filchk                ; No, continue checking
0093               
0094 224E C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2250 FFCE     
0095 2252 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2254 2026     
0096               *--------------------------------------------------------------
0097               *       Check: 1 byte fill
0098               *--------------------------------------------------------------
0099 2256 D820  42 filchk  movb  @tmp1lb,@tmp1hb       ; Duplicate value
     2258 830B     
     225A 830A     
0100               
0101 225C 0286  22         ci    tmp2,1                ; Bytes to fill = 1 ?
     225E 0001     
0102 2260 1602  14         jne   filchk2
0103 2262 DD05  32         movb  tmp1,*tmp0+
0104 2264 045B  20         b     *r11                  ; Exit
0105               *--------------------------------------------------------------
0106               *       Check: 2 byte fill
0107               *--------------------------------------------------------------
0108 2266 0286  22 filchk2 ci    tmp2,2                ; Byte to fill = 2 ?
     2268 0002     
0109 226A 1603  14         jne   filchk3
0110 226C DD05  32         movb  tmp1,*tmp0+           ; Deal with possible uneven start address
0111 226E DD05  32         movb  tmp1,*tmp0+
0112 2270 045B  20         b     *r11                  ; Exit
0113               *--------------------------------------------------------------
0114               *       Check: Handle uneven start address
0115               *--------------------------------------------------------------
0116 2272 C1C4  18 filchk3 mov   tmp0,tmp3
0117 2274 0247  22         andi  tmp3,1                ; TMP3=1 -> ODD else EVEN
     2276 0001     
0118 2278 1305  14         jeq   fil16b
0119 227A DD05  32         movb  tmp1,*tmp0+           ; Copy 1st byte
0120 227C 0606  14         dec   tmp2
0121 227E 0286  22         ci    tmp2,2                ; Do we only have 1 word left?
     2280 0002     
0122 2282 13F1  14         jeq   filchk2               ; Yes, copy word and exit
0123               *--------------------------------------------------------------
0124               *       Fill memory with 16 bit words
0125               *--------------------------------------------------------------
0126 2284 C1C6  18 fil16b  mov   tmp2,tmp3
0127 2286 0247  22         andi  tmp3,1                ; TMP3=1 -> ODD else EVEN
     2288 0001     
0128 228A 1301  14         jeq   dofill
0129 228C 0606  14         dec   tmp2                  ; Make TMP2 even
0130 228E CD05  34 dofill  mov   tmp1,*tmp0+
0131 2290 0646  14         dect  tmp2
0132 2292 16FD  14         jne   dofill
0133               *--------------------------------------------------------------
0134               * Fill last byte if ODD
0135               *--------------------------------------------------------------
0136 2294 C1C7  18         mov   tmp3,tmp3
0137 2296 1301  14         jeq   fil.exit
0138 2298 DD05  32         movb  tmp1,*tmp0+
0139               fil.exit:
0140 229A 045B  20         b     *r11
0141               
0142               
0143               ***************************************************************
0144               * FILV - Fill VRAM with byte
0145               ***************************************************************
0146               *  BL   @FILV
0147               *  DATA P0,P1,P2
0148               *--------------------------------------------------------------
0149               *  P0 = VDP start address
0150               *  P1 = Byte to fill
0151               *  P2 = Number of bytes to fill
0152               *--------------------------------------------------------------
0153               *  BL   @XFILV
0154               *
0155               *  TMP0 = VDP start address
0156               *  TMP1 = Byte to fill
0157               *  TMP2 = Number of bytes to fill
0158               ********|*****|*********************|**************************
0159 229C C13B  30 filv    mov   *r11+,tmp0            ; Memory start
0160 229E C17B  30         mov   *r11+,tmp1            ; Byte to fill
0161 22A0 C1BB  30         mov   *r11+,tmp2            ; Repeat count
0162               *--------------------------------------------------------------
0163               *    Setup VDP write address
0164               *--------------------------------------------------------------
0165 22A2 0264  22 xfilv   ori   tmp0,>4000
     22A4 4000     
0166 22A6 06C4  14         swpb  tmp0
0167 22A8 D804  30         movb  tmp0,@vdpa
     22AA 8C02     
0168 22AC 06C4  14         swpb  tmp0
0169 22AE D804  30         movb  tmp0,@vdpa
     22B0 8C02     
0170               *--------------------------------------------------------------
0171               *    Fill bytes in VDP memory
0172               *--------------------------------------------------------------
0173 22B2 020F  20         li    r15,vdpw              ; Set VDP write address
     22B4 8C00     
0174 22B6 06C5  14         swpb  tmp1
0175 22B8 C820  46         mov   @filzz,@mcloop        ; Setup move command
     22BA 22C2     
     22BC 8320     
0176 22BE 0460  24         b     @mcloop               ; Write data to VDP
     22C0 8320     
0177               *--------------------------------------------------------------
0181 22C2 D7C5     filzz   data  >d7c5                 ; MOVB TMP1,*R15
0183               
0184               
0185               
0186               *//////////////////////////////////////////////////////////////
0187               *                  VDP LOW LEVEL FUNCTIONS
0188               *//////////////////////////////////////////////////////////////
0189               
0190               ***************************************************************
0191               * VDWA / VDRA - Setup VDP write or read address
0192               ***************************************************************
0193               *  BL   @VDWA
0194               *
0195               *  TMP0 = VDP destination address for write
0196               *--------------------------------------------------------------
0197               *  BL   @VDRA
0198               *
0199               *  TMP0 = VDP source address for read
0200               ********|*****|*********************|**************************
0201 22C4 0264  22 vdwa    ori   tmp0,>4000            ; Prepare VDP address for write
     22C6 4000     
0202 22C8 06C4  14 vdra    swpb  tmp0
0203 22CA D804  30         movb  tmp0,@vdpa
     22CC 8C02     
0204 22CE 06C4  14         swpb  tmp0
0205 22D0 D804  30         movb  tmp0,@vdpa            ; Set VDP address
     22D2 8C02     
0206 22D4 045B  20         b     *r11                  ; Exit
0207               
0208               ***************************************************************
0209               * VPUTB - VDP put single byte
0210               ***************************************************************
0211               *  BL @VPUTB
0212               *  DATA P0,P1
0213               *--------------------------------------------------------------
0214               *  P0 = VDP target address
0215               *  P1 = Byte to write
0216               ********|*****|*********************|**************************
0217 22D6 C13B  30 vputb   mov   *r11+,tmp0            ; Get VDP target address
0218 22D8 C17B  30         mov   *r11+,tmp1            ; Get byte to write
0219               *--------------------------------------------------------------
0220               * Set VDP write address
0221               *--------------------------------------------------------------
0222 22DA 0264  22 xvputb  ori   tmp0,>4000            ; Prepare VDP address for write
     22DC 4000     
0223 22DE 06C4  14         swpb  tmp0                  ; \
0224 22E0 D804  30         movb  tmp0,@vdpa            ; | Set VDP write address
     22E2 8C02     
0225 22E4 06C4  14         swpb  tmp0                  ; | inlined @vdwa call
0226 22E6 D804  30         movb  tmp0,@vdpa            ; /
     22E8 8C02     
0227               *--------------------------------------------------------------
0228               * Write byte
0229               *--------------------------------------------------------------
0230 22EA 06C5  14         swpb  tmp1                  ; LSB to MSB
0231 22EC D7C5  30         movb  tmp1,*r15             ; Write byte
0232 22EE 045B  20         b     *r11                  ; Exit
0233               
0234               
0235               ***************************************************************
0236               * VGETB - VDP get single byte
0237               ***************************************************************
0238               *  bl   @vgetb
0239               *  data p0
0240               *--------------------------------------------------------------
0241               *  P0 = VDP source address
0242               *--------------------------------------------------------------
0243               *  bl   @xvgetb
0244               *
0245               *  tmp0 = VDP source address
0246               *--------------------------------------------------------------
0247               *  Output:
0248               *  tmp0 MSB = >00
0249               *  tmp0 LSB = VDP byte read
0250               ********|*****|*********************|**************************
0251 22F0 C13B  30 vgetb   mov   *r11+,tmp0            ; Get VDP source address
0252               *--------------------------------------------------------------
0253               * Set VDP read address
0254               *--------------------------------------------------------------
0255 22F2 06C4  14 xvgetb  swpb  tmp0                  ; \
0256 22F4 D804  30         movb  tmp0,@vdpa            ; | Set VDP read address
     22F6 8C02     
0257 22F8 06C4  14         swpb  tmp0                  ; | inlined @vdra call
0258 22FA D804  30         movb  tmp0,@vdpa            ; /
     22FC 8C02     
0259               *--------------------------------------------------------------
0260               * Read byte
0261               *--------------------------------------------------------------
0262 22FE D120  30         movb  @vdpr,tmp0            ; Read byte
     2300 8800     
0263 2302 0984  32         srl   tmp0,8                ; Right align
0264 2304 045B  20         b     *r11                  ; Exit
0265               
0266               
0267               ***************************************************************
0268               * VIDTAB - Dump videomode table
0269               ***************************************************************
0270               *  BL   @VIDTAB
0271               *  DATA P0
0272               *--------------------------------------------------------------
0273               *  P0 = Address of video mode table
0274               *--------------------------------------------------------------
0275               *  BL   @XIDTAB
0276               *
0277               *  TMP0 = Address of video mode table
0278               *--------------------------------------------------------------
0279               *  Remarks
0280               *  TMP1 = MSB is the VDP target register
0281               *         LSB is the value to write
0282               ********|*****|*********************|**************************
0283 2306 C13B  30 vidtab  mov   *r11+,tmp0            ; Get video mode table
0284 2308 C394  26 xidtab  mov   *tmp0,r14             ; Store copy of VDP#0 and #1 in RAM
0285               *--------------------------------------------------------------
0286               * Calculate PNT base address
0287               *--------------------------------------------------------------
0288 230A C144  18         mov   tmp0,tmp1
0289 230C 05C5  14         inct  tmp1
0290 230E D155  26         movb  *tmp1,tmp1            ; Get value for VDP#2
0291 2310 0245  22         andi  tmp1,>ff00            ; Only keep MSB
     2312 FF00     
0292 2314 0A25  20         sla   tmp1,2                ; TMP1 *= 400
0293 2316 C805  30         mov   tmp1,@wbase           ; Store calculated base
     2318 8328     
0294               *--------------------------------------------------------------
0295               * Dump VDP shadow registers
0296               *--------------------------------------------------------------
0297 231A 0205  20         li    tmp1,>8000            ; Start with VDP register 0
     231C 8000     
0298 231E 0206  20         li    tmp2,8
     2320 0008     
0299 2322 D834  40 vidta1  movb  *tmp0+,@tmp1lb        ; Write value to VDP register
     2324 830B     
0300 2326 06C5  14         swpb  tmp1
0301 2328 D805  30         movb  tmp1,@vdpa
     232A 8C02     
0302 232C 06C5  14         swpb  tmp1
0303 232E D805  30         movb  tmp1,@vdpa
     2330 8C02     
0304 2332 0225  22         ai    tmp1,>0100
     2334 0100     
0305 2336 0606  14         dec   tmp2
0306 2338 16F4  14         jne   vidta1                ; Next register
0307 233A C814  38         mov   *tmp0,@wcolmn         ; Store # of columns per row
     233C 833A     
0308 233E 045B  20         b     *r11
0309               
0310               
0311               ***************************************************************
0312               * PUTVR  - Put single VDP register
0313               ***************************************************************
0314               *  BL   @PUTVR
0315               *  DATA P0
0316               *--------------------------------------------------------------
0317               *  P0 = MSB is the VDP target register
0318               *       LSB is the value to write
0319               *--------------------------------------------------------------
0320               *  BL   @PUTVRX
0321               *
0322               *  TMP0 = MSB is the VDP target register
0323               *         LSB is the value to write
0324               ********|*****|*********************|**************************
0325 2340 C13B  30 putvr   mov   *r11+,tmp0
0326 2342 0264  22 putvrx  ori   tmp0,>8000
     2344 8000     
0327 2346 06C4  14         swpb  tmp0
0328 2348 D804  30         movb  tmp0,@vdpa
     234A 8C02     
0329 234C 06C4  14         swpb  tmp0
0330 234E D804  30         movb  tmp0,@vdpa
     2350 8C02     
0331 2352 045B  20         b     *r11
0332               
0333               
0334               ***************************************************************
0335               * PUTV01  - Put VDP registers #0 and #1
0336               ***************************************************************
0337               *  BL   @PUTV01
0338               ********|*****|*********************|**************************
0339 2354 C20B  18 putv01  mov   r11,tmp4              ; Save R11
0340 2356 C10E  18         mov   r14,tmp0
0341 2358 0984  32         srl   tmp0,8
0342 235A 06A0  32         bl    @putvrx               ; Write VR#0
     235C 2342     
0343 235E 0204  20         li    tmp0,>0100
     2360 0100     
0344 2362 D820  42         movb  @r14lb,@tmp0lb
     2364 831D     
     2366 8309     
0345 2368 06A0  32         bl    @putvrx               ; Write VR#1
     236A 2342     
0346 236C 0458  20         b     *tmp4                 ; Exit
0347               
0348               
0349               ***************************************************************
0350               * LDFNT - Load TI-99/4A font from GROM into VDP
0351               ***************************************************************
0352               *  BL   @LDFNT
0353               *  DATA P0,P1
0354               *--------------------------------------------------------------
0355               *  P0 = VDP Target address
0356               *  P1 = Font options
0357               *--------------------------------------------------------------
0358               * Uses registers tmp0-tmp4
0359               ********|*****|*********************|**************************
0360 236E C20B  18 ldfnt   mov   r11,tmp4              ; Save R11
0361 2370 05CB  14         inct  r11                   ; Get 2nd parameter (font options)
0362 2372 C11B  26         mov   *r11,tmp0             ; Get P0
0363 2374 0242  22         andi  config,>7fff          ; CONFIG register bit 0=0
     2376 7FFF     
0364 2378 2120  32         coc   @wbit0,tmp0
     237A 2020     
0365 237C 1604  14         jne   ldfnt1
0366 237E 0262  22         ori   config,>8000          ; CONFIG register bit 0=1
     2380 8000     
0367 2382 0244  22         andi  tmp0,>7fff            ; Parameter value bit 0=0
     2384 7FFF     
0368               *--------------------------------------------------------------
0369               * Read font table address from GROM into tmp1
0370               *--------------------------------------------------------------
0371 2386 C124  34 ldfnt1  mov   @tmp006(tmp0),tmp0    ; Load GROM index address into tmp0
     2388 23F0     
0372 238A D804  38         movb  tmp0,@grmwa           ; Setup GROM source byte 1 for reading
     238C 9C02     
0373 238E 06C4  14         swpb  tmp0
0374 2390 D804  38         movb  tmp0,@grmwa           ; Setup GROM source byte 2 for reading
     2392 9C02     
0375 2394 D160  34         movb  @grmrd,tmp1           ; Read font table address byte 1
     2396 9800     
0376 2398 06C5  14         swpb  tmp1
0377 239A D160  34         movb  @grmrd,tmp1           ; Read font table address byte 2
     239C 9800     
0378 239E 06C5  14         swpb  tmp1
0379               *--------------------------------------------------------------
0380               * Setup GROM source address from tmp1
0381               *--------------------------------------------------------------
0382 23A0 D805  38         movb  tmp1,@grmwa
     23A2 9C02     
0383 23A4 06C5  14         swpb  tmp1
0384 23A6 D805  38         movb  tmp1,@grmwa           ; Setup GROM address for reading
     23A8 9C02     
0385               *--------------------------------------------------------------
0386               * Setup VDP target address
0387               *--------------------------------------------------------------
0388 23AA C118  26         mov   *tmp4,tmp0            ; Get P1 (VDP destination)
0389 23AC 06A0  32         bl    @vdwa                 ; Setup VDP destination address
     23AE 22C4     
0390 23B0 05C8  14         inct  tmp4                  ; R11=R11+2
0391 23B2 C158  26         mov   *tmp4,tmp1            ; Get font options into TMP1
0392 23B4 0245  22         andi  tmp1,>7fff            ; Parameter value bit 0=0
     23B6 7FFF     
0393 23B8 C1A5  34         mov   @tmp006+2(tmp1),tmp2  ; Get number of patterns to copy
     23BA 23F2     
0394 23BC C165  34         mov   @tmp006+4(tmp1),tmp1  ; 7 or 8 byte pattern ?
     23BE 23F4     
0395               *--------------------------------------------------------------
0396               * Copy from GROM to VRAM
0397               *--------------------------------------------------------------
0398 23C0 0B15  18 ldfnt2  src   tmp1,1                ; Carry set ?
0399 23C2 1812  14         joc   ldfnt4                ; Yes, go insert a >00
0400 23C4 D120  34         movb  @grmrd,tmp0
     23C6 9800     
0401               *--------------------------------------------------------------
0402               *   Make font fat
0403               *--------------------------------------------------------------
0404 23C8 20A0  32         coc   @wbit0,config         ; Fat flag set ?
     23CA 2020     
0405 23CC 1603  14         jne   ldfnt3                ; No, so skip
0406 23CE D1C4  18         movb  tmp0,tmp3
0407 23D0 0917  18         srl   tmp3,1
0408 23D2 E107  18         soc   tmp3,tmp0
0409               *--------------------------------------------------------------
0410               *   Dump byte to VDP and do housekeeping
0411               *--------------------------------------------------------------
0412 23D4 D804  30 ldfnt3  movb  tmp0,@vdpw            ; Dump byte to VRAM
     23D6 8C00     
0413 23D8 0606  14         dec   tmp2
0414 23DA 16F2  14         jne   ldfnt2
0415 23DC 05C8  14         inct  tmp4                  ; R11=R11+2
0416 23DE 020F  20         li    r15,vdpw              ; Set VDP write address
     23E0 8C00     
0417 23E2 0242  22         andi  config,>7fff          ; CONFIG register bit 0=0
     23E4 7FFF     
0418 23E6 0458  20         b     *tmp4                 ; Exit
0419 23E8 D820  46 ldfnt4  movb  @hb$00,@vdpw          ; Insert byte >00 into VRAM
     23EA 2000     
     23EC 8C00     
0420 23EE 10E8  14         jmp   ldfnt2
0421               *--------------------------------------------------------------
0422               * Fonts pointer table
0423               *--------------------------------------------------------------
0424 23F0 004C     tmp006  data  >004c,64*8,>0000      ; Pointer to TI title screen font
     23F2 0200     
     23F4 0000     
0425 23F6 004E             data  >004e,64*7,>0101      ; Pointer to upper case font
     23F8 01C0     
     23FA 0101     
0426 23FC 004E             data  >004e,96*7,>0101      ; Pointer to upper & lower case font
     23FE 02A0     
     2400 0101     
0427 2402 0050             data  >0050,32*7,>0101      ; Pointer to lower case font
     2404 00E0     
     2406 0101     
0428               
0429               
0430               
0431               ***************************************************************
0432               * YX2PNT - Get VDP PNT address for current YX cursor position
0433               ***************************************************************
0434               *  BL   @YX2PNT
0435               *--------------------------------------------------------------
0436               *  INPUT
0437               *  @WYX = Cursor YX position
0438               *--------------------------------------------------------------
0439               *  OUTPUT
0440               *  TMP0 = VDP address for entry in Pattern Name Table
0441               *--------------------------------------------------------------
0442               *  Register usage
0443               *  TMP0, R14, R15
0444               ********|*****|*********************|**************************
0445 2408 C10E  18 yx2pnt  mov   r14,tmp0              ; Save VDP#0 & VDP#1
0446 240A C3A0  30         mov   @wyx,r14              ; Get YX
     240C 832A     
0447 240E 098E  32         srl   r14,8                 ; Right justify (remove X)
0448 2410 3BA0  70         mpy   @wcolmn,r14           ; pos = Y * (columns per row)
     2412 833A     
0449               *--------------------------------------------------------------
0450               * Do rest of calculation with R15 (16 bit part is there)
0451               * Re-use R14
0452               *--------------------------------------------------------------
0453 2414 C3A0  30         mov   @wyx,r14              ; Get YX
     2416 832A     
0454 2418 024E  22         andi  r14,>00ff             ; Remove Y
     241A 00FF     
0455 241C A3CE  18         a     r14,r15               ; pos = pos + X
0456 241E A3E0  30         a     @wbase,r15            ; pos = pos + (PNT base address)
     2420 8328     
0457               *--------------------------------------------------------------
0458               * Clean up before exit
0459               *--------------------------------------------------------------
0460 2422 C384  18         mov   tmp0,r14              ; Restore VDP#0 & VDP#1
0461 2424 C10F  18         mov   r15,tmp0              ; Return pos in TMP0
0462 2426 020F  20         li    r15,vdpw              ; VDP write address
     2428 8C00     
0463 242A 045B  20         b     *r11
0464               
0465               
0466               
0467               ***************************************************************
0468               * Put length-byte prefixed string at current YX
0469               ***************************************************************
0470               *  BL   @PUTSTR
0471               *  DATA P0
0472               *
0473               *  P0 = Pointer to string
0474               *--------------------------------------------------------------
0475               *  REMARKS
0476               *  First byte of string must contain length
0477               *--------------------------------------------------------------
0478               *  Register usage
0479               *  tmp1, tmp2, tmp3
0480               ********|*****|*********************|**************************
0481 242C C17B  30 putstr  mov   *r11+,tmp1
0482 242E D1B5  28 xutst0  movb  *tmp1+,tmp2           ; Get length byte
0483 2430 C1CB  18 xutstr  mov   r11,tmp3
0484 2432 06A0  32         bl    @yx2pnt               ; Get VDP destination address
     2434 2408     
0485 2436 C2C7  18         mov   tmp3,r11
0486 2438 0986  32         srl   tmp2,8                ; Right justify length byte
0487               *--------------------------------------------------------------
0488               * Put string
0489               *--------------------------------------------------------------
0490 243A C186  18         mov   tmp2,tmp2             ; Length = 0 ?
0491 243C 1305  14         jeq   !                     ; Yes, crash and burn
0492               
0493 243E 0286  22         ci    tmp2,255              ; Length > 255 ?
     2440 00FF     
0494 2442 1502  14         jgt   !                     ; Yes, crash and burn
0495               
0496 2444 0460  28         b     @xpym2v               ; Display string
     2446 249A     
0497               *--------------------------------------------------------------
0498               * Crash handler
0499               *--------------------------------------------------------------
0500 2448 C80B  38 !       mov   r11,@>ffce            ; \ Save caller address
     244A FFCE     
0501 244C 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     244E 2026     
0502               
0503               
0504               
0505               ***************************************************************
0506               * Put length-byte prefixed string at YX
0507               ***************************************************************
0508               *  BL   @PUTAT
0509               *  DATA P0,P1
0510               *
0511               *  P0 = YX position
0512               *  P1 = Pointer to string
0513               *--------------------------------------------------------------
0514               *  REMARKS
0515               *  First byte of string must contain length
0516               ********|*****|*********************|**************************
0517 2450 C83B  42 putat   mov   *r11+,@wyx            ; Set YX position
     2452 832A     
0518 2454 0460  28         b     @putstr
     2456 242C     
0519               
0520               
0521               ***************************************************************
0522               * putlst
0523               * Loop over string list and display
0524               ***************************************************************
0525               * bl  @putlst
0526               *--------------------------------------------------------------
0527               * INPUT
0528               * @wyx = Cursor position
0529               * tmp1 = Pointer to first length-prefixed string in list
0530               * tmp2 = Number of strings to display
0531               *--------------------------------------------------------------
0532               * OUTPUT
0533               * none
0534               *--------------------------------------------------------------
0535               * Register usage
0536               * tmp0, tmp1, tmp2, tmp3
0537               ********|*****|*********************|**************************
0538               putlst:
0539 2458 0649  14         dect  stack
0540 245A C64B  30         mov   r11,*stack            ; Save return address
0541 245C 0649  14         dect  stack
0542 245E C644  30         mov   tmp0,*stack           ; Push tmp0
0543                       ;------------------------------------------------------
0544                       ; Dump strings to VDP
0545                       ;------------------------------------------------------
0546               putlst.loop:
0547 2460 D1D5  26         movb  *tmp1,tmp3            ; Get string length byte
0548 2462 0987  32         srl   tmp3,8                ; Right align
0549               
0550 2464 0649  14         dect  stack
0551 2466 C645  30         mov   tmp1,*stack           ; Push tmp1
0552 2468 0649  14         dect  stack
0553 246A C646  30         mov   tmp2,*stack           ; Push tmp2
0554 246C 0649  14         dect  stack
0555 246E C647  30         mov   tmp3,*stack           ; Push tmp3
0556               
0557 2470 06A0  32         bl    @xutst0               ; Display string
     2472 242E     
0558                                                   ; \ i  tmp1 = Pointer to string
0559                                                   ; / i  @wyx = Cursor position at
0560               
0561 2474 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0562 2476 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0563 2478 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0564               
0565 247A 06A0  32         bl    @down                 ; Move cursor down
     247C 26DA     
0566               
0567 247E A147  18         a     tmp3,tmp1             ; Add string length to pointer
0568 2480 0585  14         inc   tmp1                  ; Consider length byte
0569 2482 2560  32         czc   @w$0001,tmp1          ; Is address even ?
     2484 2002     
0570 2486 1301  14         jeq   !                     ; Yes, skip adjustment
0571 2488 0585  14         inc   tmp1                  ; Make address even
0572 248A 0606  14 !       dec   tmp2
0573 248C 15E9  14         jgt   putlst.loop
0574                       ;------------------------------------------------------
0575                       ; Exit
0576                       ;------------------------------------------------------
0577               putlst.exit:
0578 248E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0579 2490 C2F9  30         mov   *stack+,r11           ; Pop r11
0580 2492 045B  20         b     *r11                  ; Return
                   < runlib.asm
0095               
0097                       copy  "copy_cpu_vram.asm"        ; CPU to VRAM copy functions
     **** ****     > copy_cpu_vram.asm
0001               * FILE......: copy_cpu_vram.asm
0002               * Purpose...: CPU memory to VRAM copy support module
0003               
0004               ***************************************************************
0005               * CPYM2V - Copy CPU memory to VRAM
0006               ***************************************************************
0007               *  BL   @CPYM2V
0008               *  DATA P0,P1,P2
0009               *--------------------------------------------------------------
0010               *  P0 = VDP start address
0011               *  P1 = RAM/ROM start address
0012               *  P2 = Number of bytes to copy
0013               *--------------------------------------------------------------
0014               *  BL @XPYM2V
0015               *
0016               *  TMP0 = VDP start address
0017               *  TMP1 = RAM/ROM start address
0018               *  TMP2 = Number of bytes to copy
0019               ********|*****|*********************|**************************
0020 2494 C13B  30 cpym2v  mov   *r11+,tmp0            ; VDP Start address
0021 2496 C17B  30         mov   *r11+,tmp1            ; RAM/ROM start address
0022 2498 C1BB  30         mov   *r11+,tmp2            ; Bytes to copy
0023               *--------------------------------------------------------------
0024               *    Assert
0025               *--------------------------------------------------------------
0026 249A C186  18 xpym2v  mov   tmp2,tmp2             ; Bytes to copy = 0 ?
0027 249C 1604  14         jne   !                     ; No, continue
0028               
0029 249E C80B  38         mov   r11,@>ffce            ; \ Save caller address
     24A0 FFCE     
0030 24A2 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     24A4 2026     
0031               *--------------------------------------------------------------
0032               *    Setup VDP write address
0033               *--------------------------------------------------------------
0034 24A6 0264  22 !       ori   tmp0,>4000
     24A8 4000     
0035 24AA 06C4  14         swpb  tmp0
0036 24AC D804  30         movb  tmp0,@vdpa
     24AE 8C02     
0037 24B0 06C4  14         swpb  tmp0
0038 24B2 D804  30         movb  tmp0,@vdpa
     24B4 8C02     
0039               *--------------------------------------------------------------
0040               *    Copy bytes from CPU memory to VRAM
0041               *--------------------------------------------------------------
0042 24B6 020F  20         li    r15,vdpw              ; Set VDP write address
     24B8 8C00     
0043 24BA C820  46         mov   @tmp008,@mcloop       ; Setup copy command
     24BC 24C4     
     24BE 8320     
0044 24C0 0460  24         b     @mcloop               ; Write data to VDP and return
     24C2 8320     
0045               *--------------------------------------------------------------
0046               * Data
0047               *--------------------------------------------------------------
0048 24C4 D7F5     tmp008  data  >d7f5                 ; MOVB *TMP1+,*R15
                   < runlib.asm
0099               
0101                       copy  "copy_vram_cpu.asm"        ; VRAM to CPU copy functions
     **** ****     > copy_vram_cpu.asm
0001               * FILE......: copy_vram_cpu.asm
0002               * Purpose...: VRAM to CPU memory copy support module
0003               
0004               ***************************************************************
0005               * CPYV2M - Copy VRAM to CPU memory
0006               ***************************************************************
0007               *  BL   @CPYV2M
0008               *  DATA P0,P1,P2
0009               *--------------------------------------------------------------
0010               *  P0 = VDP source address
0011               *  P1 = RAM target address
0012               *  P2 = Number of bytes to copy
0013               *--------------------------------------------------------------
0014               *  BL @XPYV2M
0015               *
0016               *  TMP0 = VDP source address
0017               *  TMP1 = RAM target address
0018               *  TMP2 = Number of bytes to copy
0019               ********|*****|*********************|**************************
0020 24C6 C13B  30 cpyv2m  mov   *r11+,tmp0            ; VDP source address
0021 24C8 C17B  30         mov   *r11+,tmp1            ; Target address in RAM
0022 24CA C1BB  30         mov   *r11+,tmp2            ; Bytes to copy
0023               *--------------------------------------------------------------
0024               *    Setup VDP read address
0025               *--------------------------------------------------------------
0026 24CC 06C4  14 xpyv2m  swpb  tmp0
0027 24CE D804  30         movb  tmp0,@vdpa
     24D0 8C02     
0028 24D2 06C4  14         swpb  tmp0
0029 24D4 D804  30         movb  tmp0,@vdpa
     24D6 8C02     
0030               *--------------------------------------------------------------
0031               *    Copy bytes from VDP memory to RAM
0032               *--------------------------------------------------------------
0033 24D8 020F  20         li    r15,vdpr              ; Set VDP read address
     24DA 8800     
0034 24DC C820  46         mov   @tmp007,@mcloop       ; Setup copy command
     24DE 24E6     
     24E0 8320     
0035 24E2 0460  24         b     @mcloop               ; Read data from VDP
     24E4 8320     
0036 24E6 DD5F     tmp007  data  >dd5f                 ; MOVB *R15,*TMP+
                   < runlib.asm
0103               
0105                       copy  "copy_cpu_cpu.asm"         ; CPU to CPU copy functions
     **** ****     > copy_cpu_cpu.asm
0001               * FILE......: copy_cpu_cpu.asm
0002               * Purpose...: CPU to CPU memory copy support module
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                       CPU COPY FUNCTIONS
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * CPYM2M - Copy CPU memory to CPU memory
0010               ***************************************************************
0011               *  BL   @CPYM2M
0012               *  DATA P0,P1,P2
0013               *--------------------------------------------------------------
0014               *  P0 = Memory source address
0015               *  P1 = Memory target address
0016               *  P2 = Number of bytes to copy
0017               *--------------------------------------------------------------
0018               *  BL @XPYM2M
0019               *
0020               *  TMP0 = Memory source address
0021               *  TMP1 = Memory target address
0022               *  TMP2 = Number of bytes to copy
0023               ********|*****|*********************|**************************
0024 24E8 C13B  30 cpym2m  mov   *r11+,tmp0            ; Memory source address
0025 24EA C17B  30         mov   *r11+,tmp1            ; Memory target address
0026 24EC C1BB  30         mov   *r11+,tmp2            ; Number of bytes to copy
0027               *--------------------------------------------------------------
0028               * Do some checks first
0029               *--------------------------------------------------------------
0030 24EE C186  18 xpym2m  mov   tmp2,tmp2             ; Bytes to copy = 0 ?
0031 24F0 1604  14         jne   cpychk                ; No, continue checking
0032               
0033 24F2 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     24F4 FFCE     
0034 24F6 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     24F8 2026     
0035               *--------------------------------------------------------------
0036               *    Check: 1 byte copy
0037               *--------------------------------------------------------------
0038 24FA 0286  22 cpychk  ci    tmp2,1                ; Bytes to copy = 1 ?
     24FC 0001     
0039 24FE 1603  14         jne   cpym0                 ; No, continue checking
0040 2500 DD74  42         movb  *tmp0+,*tmp1+         ; Copy byte
0041 2502 04C6  14         clr   tmp2                  ; Reset counter
0042 2504 045B  20         b     *r11                  ; Return to caller
0043               *--------------------------------------------------------------
0044               *    Check: Uneven address handling
0045               *--------------------------------------------------------------
0046 2506 0242  22 cpym0   andi  config,>7fff          ; Clear CONFIG bit 0
     2508 7FFF     
0047 250A C1C4  18         mov   tmp0,tmp3
0048 250C 0247  22         andi  tmp3,1
     250E 0001     
0049 2510 1618  14         jne   cpyodd                ; Odd source address handling
0050 2512 C1C5  18 cpym1   mov   tmp1,tmp3
0051 2514 0247  22         andi  tmp3,1
     2516 0001     
0052 2518 1614  14         jne   cpyodd                ; Odd target address handling
0053               *--------------------------------------------------------------
0054               * 8 bit copy
0055               *--------------------------------------------------------------
0056 251A 20A0  32 cpym2   coc   @wbit0,config         ; CONFIG bit 0 set ?
     251C 2020     
0057 251E 1605  14         jne   cpym3
0058 2520 C820  46         mov   @tmp011,@mcloop       ; Setup byte copy command
     2522 2548     
     2524 8320     
0059 2526 0460  24         b     @mcloop               ; Copy memory and exit
     2528 8320     
0060               *--------------------------------------------------------------
0061               * 16 bit copy
0062               *--------------------------------------------------------------
0063 252A C1C6  18 cpym3   mov   tmp2,tmp3
0064 252C 0247  22         andi  tmp3,1                ; TMP3=1 -> ODD else EVEN
     252E 0001     
0065 2530 1301  14         jeq   cpym4
0066 2532 0606  14         dec   tmp2                  ; Make TMP2 even
0067 2534 CD74  46 cpym4   mov   *tmp0+,*tmp1+
0068 2536 0646  14         dect  tmp2
0069 2538 16FD  14         jne   cpym4
0070               *--------------------------------------------------------------
0071               * Copy last byte if ODD
0072               *--------------------------------------------------------------
0073 253A C1C7  18         mov   tmp3,tmp3
0074 253C 1301  14         jeq   cpymz
0075 253E D554  38         movb  *tmp0,*tmp1
0076 2540 045B  20 cpymz   b     *r11                  ; Return to caller
0077               *--------------------------------------------------------------
0078               * Handle odd source/target address
0079               *--------------------------------------------------------------
0080 2542 0262  22 cpyodd  ori   config,>8000          ; Set CONFIG bit 0
     2544 8000     
0081 2546 10E9  14         jmp   cpym2
0082 2548 DD74     tmp011  data  >dd74                 ; MOVB *TMP0+,*TMP1+
                   < runlib.asm
0107               
0111               
0115               
0117                       copy  "cpu_sams.asm"             ; Support for SAMS memory card
     **** ****     > cpu_sams.asm
0001               * FILE......: cpu_sams.asm
0002               * Purpose...: Low level support for SAMS memory expansion card
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                SAMS Memory Expansion support
0006               *//////////////////////////////////////////////////////////////
0007               
0008               *--------------------------------------------------------------
0009               * ACCESS and MAPPING
0010               * (by the late Bruce Harisson):
0011               *
0012               * To use other than the default setup, you have to do two
0013               * things:
0014               *
0015               * 1. You have to "turn on" the card's memory in the
0016               *    >4000 block and write to the mapping registers there.
0017               *    (bl  @sams.page.set)
0018               *
0019               * 2. You have to "turn on" the mapper function to make what
0020               *    you've written into the >4000 block take effect.
0021               *    (bl  @sams.mapping.on)
0022               *--------------------------------------------------------------
0023               *  SAMS                          Default SAMS page
0024               *  Register     Memory bank      (system startup)
0025               *  =======      ===========      ================
0026               *  >4004        >2000-2fff          >002
0027               *  >4006        >3000-4fff          >003
0028               *  >4014        >a000-afff          >00a
0029               *  >4016        >b000-bfff          >00b
0030               *  >4018        >c000-cfff          >00c
0031               *  >401a        >d000-dfff          >00d
0032               *  >401c        >e000-efff          >00e
0033               *  >401e        >f000-ffff          >00f
0034               *  Others       Inactive
0035               *--------------------------------------------------------------
0036               
0037               
0038               
0039               
0040               ***************************************************************
0041               * sams.page.get - Get SAMS page number for memory address
0042               ***************************************************************
0043               * bl   @sams.page.get
0044               *      data P0
0045               *--------------------------------------------------------------
0046               * P0 = Memory address (e.g. address >a100 will map to SAMS
0047               *      register >4014 (bank >a000 - >afff)
0048               *--------------------------------------------------------------
0049               * bl   @xsams.page.get
0050               *
0051               * tmp0 = Memory address (e.g. address >a100 will map to SAMS
0052               *        register >4014 (bank >a000 - >afff)
0053               *--------------------------------------------------------------
0054               * OUTPUT
0055               * waux1 = SAMS page number
0056               * waux2 = Address of affected SAMS register
0057               *--------------------------------------------------------------
0058               * Register usage
0059               * r0, tmp0, r12
0060               ********|*****|*********************|**************************
0061               sams.page.get:
0062 254A C13B  30         mov   *r11+,tmp0            ; Memory address
0063               xsams.page.get:
0064 254C 0649  14         dect  stack
0065 254E C64B  30         mov   r11,*stack            ; Push return address
0066 2550 0649  14         dect  stack
0067 2552 C640  30         mov   r0,*stack             ; Push r0
0068 2554 0649  14         dect  stack
0069 2556 C64C  30         mov   r12,*stack            ; Push r12
0070               *--------------------------------------------------------------
0071               * Determine memory bank
0072               *--------------------------------------------------------------
0073 2558 09C4  40         srl   tmp0,12               ; Reduce address to 4K chunks
0074 255A 0A14  18         sla   tmp0,1                ; Registers are 2 bytes appart
0075               
0076 255C 0224  22         ai    tmp0,>4000            ; Add base address of "DSR" space
     255E 4000     
0077 2560 C804  30         mov   tmp0,@waux2           ; Save address of SAMS register
     2562 833E     
0078               *--------------------------------------------------------------
0079               * Get SAMS page number
0080               *--------------------------------------------------------------
0081 2564 020C  20         li    r12,>1e00             ; SAMS CRU address
     2566 1E00     
0082 2568 04C0  14         clr   r0
0083 256A 1D00  16         sbo   0                     ; Enable access to SAMS registers
0084 256C D014  26         movb  *tmp0,r0              ; Get SAMS page number
0085 256E D100  18         movb  r0,tmp0
0086 2570 0984  32         srl   tmp0,8                ; Right align
0087 2572 C804  30         mov   tmp0,@waux1           ; Save SAMS page number
     2574 833C     
0088 2576 1E00  16         sbz   0                     ; Disable access to SAMS registers
0089               *--------------------------------------------------------------
0090               * Exit
0091               *--------------------------------------------------------------
0092               sams.page.get.exit:
0093 2578 C339  30         mov   *stack+,r12           ; Pop r12
0094 257A C039  30         mov   *stack+,r0            ; Pop r0
0095 257C C2F9  30         mov   *stack+,r11           ; Pop return address
0096 257E 045B  20         b     *r11                  ; Return to caller
0097               
0098               
0099               
0100               
0101               ***************************************************************
0102               * sams.page.set - Set SAMS memory page
0103               ***************************************************************
0104               * bl   sams.page.set
0105               *      data P0,P1
0106               *--------------------------------------------------------------
0107               * P0 = SAMS page number
0108               * P1 = Memory address (e.g. address >a100 will map to SAMS
0109               *      register >4014 (bank >a000 - >afff)
0110               *--------------------------------------------------------------
0111               * bl   @xsams.page.set
0112               *
0113               * tmp0 = SAMS page number
0114               * tmp1 = Memory address (e.g. address >a100 will map to SAMS
0115               *        register >4014 (bank >a000 - >afff)
0116               *--------------------------------------------------------------
0117               * Register usage
0118               * r0, tmp0, tmp1, r12
0119               *--------------------------------------------------------------
0120               * SAMS page number should be in range 0-255 (>00 to >ff)
0121               *
0122               *  Page         Memory
0123               *  ====         ======
0124               *  >00             32K
0125               *  >1f            128K
0126               *  >3f            256K
0127               *  >7f            512K
0128               *  >ff           1024K
0129               ********|*****|*********************|**************************
0130               sams.page.set:
0131 2580 C13B  30         mov   *r11+,tmp0            ; Get SAMS page
0132 2582 C17B  30         mov   *r11+,tmp1            ; Get memory address
0133               xsams.page.set:
0134 2584 0649  14         dect  stack
0135 2586 C64B  30         mov   r11,*stack            ; Push return address
0136 2588 0649  14         dect  stack
0137 258A C640  30         mov   r0,*stack             ; Push r0
0138 258C 0649  14         dect  stack
0139 258E C64C  30         mov   r12,*stack            ; Push r12
0140 2590 0649  14         dect  stack
0141 2592 C644  30         mov   tmp0,*stack           ; Push tmp0
0142 2594 0649  14         dect  stack
0143 2596 C645  30         mov   tmp1,*stack           ; Push tmp1
0144               *--------------------------------------------------------------
0145               * Determine memory bank
0146               *--------------------------------------------------------------
0147 2598 09C5  40         srl   tmp1,12               ; Reduce address to 4K chunks
0148 259A 0A15  18         sla   tmp1,1                ; Registers are 2 bytes appart
0149               *--------------------------------------------------------------
0150               * Assert on SAMS page number
0151               *--------------------------------------------------------------
0152 259C 0284  22         ci    tmp0,255              ; Crash if page > 255
     259E 00FF     
0153 25A0 150D  14         jgt   !
0154               *--------------------------------------------------------------
0155               * Assert on SAMS register
0156               *--------------------------------------------------------------
0157 25A2 0285  22         ci    tmp1,>1e              ; r@401e   >f000 - >ffff
     25A4 001E     
0158 25A6 150A  14         jgt   !
0159 25A8 0285  22         ci    tmp1,>04              ; r@4004   >2000 - >2fff
     25AA 0004     
0160 25AC 1107  14         jlt   !
0161 25AE 0285  22         ci    tmp1,>12              ; r@4014   >a000 - >ffff
     25B0 0012     
0162 25B2 1508  14         jgt   sams.page.set.switch_page
0163 25B4 0285  22         ci    tmp1,>06              ; r@4006   >3000 - >3fff
     25B6 0006     
0164 25B8 1501  14         jgt   !
0165 25BA 1004  14         jmp   sams.page.set.switch_page
0166                       ;------------------------------------------------------
0167                       ; Crash the system
0168                       ;------------------------------------------------------
0169 25BC C80B  38 !       mov   r11,@>ffce            ; \ Save caller address
     25BE FFCE     
0170 25C0 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     25C2 2026     
0171               *--------------------------------------------------------------
0172               * Switch memory bank to specified SAMS page
0173               *--------------------------------------------------------------
0174               sams.page.set.switch_page
0175 25C4 020C  20         li    r12,>1e00             ; SAMS CRU address
     25C6 1E00     
0176 25C8 C004  18         mov   tmp0,r0               ; Must be in r0 for CRU use
0177 25CA 06C0  14         swpb  r0                    ; LSB to MSB
0178 25CC 1D00  16         sbo   0                     ; Enable access to SAMS registers
0179 25CE D940  38         movb  r0,@>4000(tmp1)       ; Set SAMS bank number
     25D0 4000     
0180 25D2 1E00  16         sbz   0                     ; Disable access to SAMS registers
0181               *--------------------------------------------------------------
0182               * Exit
0183               *--------------------------------------------------------------
0184               sams.page.set.exit:
0185 25D4 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0186 25D6 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0187 25D8 C339  30         mov   *stack+,r12           ; Pop r12
0188 25DA C039  30         mov   *stack+,r0            ; Pop r0
0189 25DC C2F9  30         mov   *stack+,r11           ; Pop return address
0190 25DE 045B  20         b     *r11                  ; Return to caller
0191               
0192               
0193               
0194               
0195               ***************************************************************
0196               * sams.mapping.on - Enable SAMS mapping mode
0197               ***************************************************************
0198               *  bl   @sams.mapping.on
0199               *--------------------------------------------------------------
0200               *  Register usage
0201               *  r12
0202               ********|*****|*********************|**************************
0203               sams.mapping.on:
0204 25E0 0649  14         dect  stack
0205 25E2 C64C  30         mov   r12,*stack            ; Push r12
0206 25E4 020C  20         li    r12,>1e00             ; SAMS CRU address
     25E6 1E00     
0207 25E8 1D01  16         sbo   1                     ; Enable SAMS mapper
0208               *--------------------------------------------------------------
0209               * Exit
0210               *--------------------------------------------------------------
0211               sams.mapping.on.exit:
0212 25EA C339  30         mov   *stack+,r12           ; Pop r12
0213 25EC 045B  20         b     *r11                  ; Return to caller
0214               
0215               
0216               
0217               
0218               ***************************************************************
0219               * sams.mapping.off - Disable SAMS mapping mode
0220               ***************************************************************
0221               * bl  @sams.mapping.off
0222               *--------------------------------------------------------------
0223               * OUTPUT
0224               * none
0225               *--------------------------------------------------------------
0226               * Register usage
0227               * r12
0228               ********|*****|*********************|**************************
0229               sams.mapping.off:
0230 25EE 0649  14         dect  stack
0231 25F0 C64C  30         mov   r12,*stack            ; Push r12
0232 25F2 020C  20         li    r12,>1e00             ; SAMS CRU address
     25F4 1E00     
0233 25F6 1E01  16         sbz   1                     ; Disable SAMS mapper
0234               *--------------------------------------------------------------
0235               * Exit
0236               *--------------------------------------------------------------
0237               sams.mapping.off.exit:
0238 25F8 C339  30         mov   *stack+,r12           ; Pop r12
0239 25FA 045B  20         b     *r11                  ; Return to caller
0240               
0241               
0242               
0243               
0244               
0245               ***************************************************************
0246               * sams.layout
0247               * Setup SAMS memory banks
0248               ***************************************************************
0249               * bl  @sams.layout
0250               *     data P0
0251               *--------------------------------------------------------------
0252               * INPUT
0253               * P0 = Pointer to SAMS page layout table
0254               *--------------------------------------------------------------
0255               * bl  @xsams.layout
0256               *
0257               * tmp0 = Pointer to SAMS page layout table
0258               *--------------------------------------------------------------
0259               * OUTPUT
0260               * none
0261               *--------------------------------------------------------------
0262               * Register usage
0263               * tmp0, r12
0264               ********|*****|*********************|**************************
0265               
0266               
0267               sams.layout:
0268 25FC C13B  30         mov   *r11+,tmp0            ; Get P0
0269               xsams.layout:
0270 25FE 0649  14         dect  stack
0271 2600 C64B  30         mov   r11,*stack            ; Save return address
0272 2602 0649  14         dect  stack
0273 2604 C644  30         mov   tmp0,*stack           ; Save tmp0
0274 2606 0649  14         dect  stack
0275 2608 C64C  30         mov   r12,*stack            ; Save r12
0276                       ;------------------------------------------------------
0277                       ; Set SAMS registers
0278                       ;------------------------------------------------------
0279 260A 020C  20         li    r12,>1e00             ; SAMS CRU address
     260C 1E00     
0280 260E 1D00  16         sbo   0                     ; Enable access to SAMS registers
0281               
0282 2610 C834  50         mov  *tmp0+,@>4004          ; Set page for >2000 - >2fff
     2612 4004     
0283 2614 C834  50         mov  *tmp0+,@>4006          ; Set page for >3000 - >3fff
     2616 4006     
0284 2618 C834  50         mov  *tmp0+,@>4014          ; Set page for >a000 - >afff
     261A 4014     
0285 261C C834  50         mov  *tmp0+,@>4016          ; Set page for >b000 - >bfff
     261E 4016     
0286 2620 C834  50         mov  *tmp0+,@>4018          ; Set page for >c000 - >cfff
     2622 4018     
0287 2624 C834  50         mov  *tmp0+,@>401a          ; Set page for >d000 - >dfff
     2626 401A     
0288 2628 C834  50         mov  *tmp0+,@>401c          ; Set page for >e000 - >efff
     262A 401C     
0289 262C C834  50         mov  *tmp0+,@>401e          ; Set page for >f000 - >ffff
     262E 401E     
0290               
0291 2630 1E00  16         sbz   0                     ; Disable access to SAMS registers
0292 2632 1D01  16         sbo   1                     ; Enable SAMS mapper
0293                       ;------------------------------------------------------
0294                       ; Exit
0295                       ;------------------------------------------------------
0296               sams.layout.exit:
0297 2634 C339  30         mov   *stack+,r12           ; Pop r12
0298 2636 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0299 2638 C2F9  30         mov   *stack+,r11           ; Pop r11
0300 263A 045B  20         b     *r11                  ; Return to caller
0301               ***************************************************************
0302               * SAMS standard page layout table
0303               *--------------------------------------------------------------
0304               sams.layout.standard:
0305 263C 0200             data  >0200                 ; >2000-2fff, SAMS page >02
0306 263E 0300             data  >0300                 ; >3000-3fff, SAMS page >03
0307 2640 0A00             data  >0a00                 ; >a000-afff, SAMS page >0a
0308 2642 0B00             data  >0b00                 ; >b000-bfff, SAMS page >0b
0309 2644 0C00             data  >0c00                 ; >c000-cfff, SAMS page >0c
0310 2646 0D00             data  >0d00                 ; >d000-dfff, SAMS page >0d
0311 2648 0E00             data  >0e00                 ; >e000-efff, SAMS page >0e
0312 264A 0F00             data  >0f00                 ; >f000-ffff, SAMS page >0f
0313               
0314               
0315               ***************************************************************
0316               * sams.layout.copy
0317               * Copy SAMS memory layout
0318               ***************************************************************
0319               * bl  @sams.layout.copy
0320               *     data P0
0321               *--------------------------------------------------------------
0322               * P0 = Pointer to 8 words RAM buffer for results
0323               *--------------------------------------------------------------
0324               * OUTPUT
0325               * RAM buffer will have the SAMS page number for each range
0326               * 2000-2fff, 3000-3fff, a000-afff, b000-bfff, ...
0327               *--------------------------------------------------------------
0328               * Register usage
0329               * tmp0, tmp1, tmp2, tmp3
0330               ***************************************************************
0331               sams.layout.copy:
0332 264C C1FB  30         mov   *r11+,tmp3            ; Get P0
0333               
0334 264E 0649  14         dect  stack
0335 2650 C64B  30         mov   r11,*stack            ; Push return address
0336 2652 0649  14         dect  stack
0337 2654 C644  30         mov   tmp0,*stack           ; Push tmp0
0338 2656 0649  14         dect  stack
0339 2658 C645  30         mov   tmp1,*stack           ; Push tmp1
0340 265A 0649  14         dect  stack
0341 265C C646  30         mov   tmp2,*stack           ; Push tmp2
0342 265E 0649  14         dect  stack
0343 2660 C647  30         mov   tmp3,*stack           ; Push tmp3
0344                       ;------------------------------------------------------
0345                       ; Copy SAMS layout
0346                       ;------------------------------------------------------
0347 2662 0205  20         li    tmp1,sams.layout.copy.data
     2664 2684     
0348 2666 0206  20         li    tmp2,8                ; Set loop counter
     2668 0008     
0349                       ;------------------------------------------------------
0350                       ; Set SAMS memory pages
0351                       ;------------------------------------------------------
0352               sams.layout.copy.loop:
0353 266A C135  30         mov   *tmp1+,tmp0           ; Get memory address
0354 266C 06A0  32         bl    @xsams.page.get       ; \ Get SAMS page
     266E 254C     
0355                                                   ; | i  tmp0   = Memory address
0356                                                   ; / o  @waux1 = SAMS page
0357               
0358 2670 CDE0  46         mov   @waux1,*tmp3+         ; Copy SAMS page number
     2672 833C     
0359               
0360 2674 0606  14         dec   tmp2                  ; Next iteration
0361 2676 16F9  14         jne   sams.layout.copy.loop ; Loop until done
0362                       ;------------------------------------------------------
0363                       ; Exit
0364                       ;------------------------------------------------------
0365               sams.layout.copy.exit:
0366 2678 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0367 267A C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0368 267C C179  30         mov   *stack+,tmp1          ; Pop tmp1
0369 267E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0370 2680 C2F9  30         mov   *stack+,r11           ; Pop r11
0371 2682 045B  20         b     *r11                  ; Return to caller
0372               ***************************************************************
0373               * SAMS memory range table
0374               *--------------------------------------------------------------
0375               sams.layout.copy.data:
0376 2684 2000             data  >2000                 ; >2000-2fff
0377 2686 3000             data  >3000                 ; >3000-3fff
0378 2688 A000             data  >a000                 ; >a000-afff
0379 268A B000             data  >b000                 ; >b000-bfff
0380 268C C000             data  >c000                 ; >c000-cfff
0381 268E D000             data  >d000                 ; >d000-dfff
0382 2690 E000             data  >e000                 ; >e000-efff
0383 2692 F000             data  >f000                 ; >f000-ffff
                   < runlib.asm
0119               
0123               
0125                       copy  "vdp_intscr.asm"           ; VDP interrupt & screen on/off
     **** ****     > vdp_intscr.asm
0001               * FILE......: vdp_intscr.asm
0002               * Purpose...: VDP interrupt & screen on/off
0003               
0004               ***************************************************************
0005               * SCROFF - Disable screen display
0006               ***************************************************************
0007               *  BL @SCROFF
0008               ********|*****|*********************|**************************
0009 2694 024E  22 scroff  andi  r14,>ffbf             ; VDP#R1 bit 1=0 (Disable screen display)
     2696 FFBF     
0010 2698 0460  28         b     @putv01
     269A 2354     
0011               
0012               ***************************************************************
0013               * SCRON - Disable screen display
0014               ***************************************************************
0015               *  BL @SCRON
0016               ********|*****|*********************|**************************
0017 269C 026E  22 scron   ori   r14,>0040             ; VDP#R1 bit 1=1 (Enable screen display)
     269E 0040     
0018 26A0 0460  28         b     @putv01
     26A2 2354     
0019               
0020               ***************************************************************
0021               * INTOFF - Disable VDP interrupt
0022               ***************************************************************
0023               *  BL @INTOFF
0024               ********|*****|*********************|**************************
0025 26A4 024E  22 intoff  andi  r14,>ffdf             ; VDP#R1 bit 2=0 (Disable VDP interrupt)
     26A6 FFDF     
0026 26A8 0460  28         b     @putv01
     26AA 2354     
0027               
0028               ***************************************************************
0029               * INTON - Enable VDP interrupt
0030               ***************************************************************
0031               *  BL @INTON
0032               ********|*****|*********************|**************************
0033 26AC 026E  22 inton   ori   r14,>0020             ; VDP#R1 bit 2=1 (Enable VDP interrupt)
     26AE 0020     
0034 26B0 0460  28         b     @putv01
     26B2 2354     
                   < runlib.asm
0127               
0129                       copy  "vdp_sprites.asm"          ; VDP sprites
     **** ****     > vdp_sprites.asm
0001               ***************************************************************
0002               * FILE......: vdp_sprites.asm
0003               * Purpose...: Sprites support
0004               
0005               ***************************************************************
0006               * SMAG1X - Set sprite magnification 1x
0007               ***************************************************************
0008               *  BL @SMAG1X
0009               ********|*****|*********************|**************************
0010 26B4 024E  22 smag1x  andi  r14,>fffe             ; VDP#R1 bit 7=0 (Sprite magnification 1x)
     26B6 FFFE     
0011 26B8 0460  28         b     @putv01
     26BA 2354     
0012               
0013               ***************************************************************
0014               * SMAG2X - Set sprite magnification 2x
0015               ***************************************************************
0016               *  BL @SMAG2X
0017               ********|*****|*********************|**************************
0018 26BC 026E  22 smag2x  ori   r14,>0001             ; VDP#R1 bit 7=1 (Sprite magnification 2x)
     26BE 0001     
0019 26C0 0460  28         b     @putv01
     26C2 2354     
0020               
0021               ***************************************************************
0022               * S8X8 - Set sprite size 8x8 bits
0023               ***************************************************************
0024               *  BL @S8X8
0025               ********|*****|*********************|**************************
0026 26C4 024E  22 s8x8    andi  r14,>fffd             ; VDP#R1 bit 6=0 (Sprite size 8x8)
     26C6 FFFD     
0027 26C8 0460  28         b     @putv01
     26CA 2354     
0028               
0029               ***************************************************************
0030               * S16X16 - Set sprite size 16x16 bits
0031               ***************************************************************
0032               *  BL @S16X16
0033               ********|*****|*********************|**************************
0034 26CC 026E  22 s16x16  ori   r14,>0002             ; VDP#R1 bit 6=1 (Sprite size 16x16)
     26CE 0002     
0035 26D0 0460  28         b     @putv01
     26D2 2354     
                   < runlib.asm
0131               
0133                       copy  "vdp_cursor.asm"           ; VDP cursor handling
     **** ****     > vdp_cursor.asm
0001               * FILE......: vdp_cursor.asm
0002               * Purpose...: VDP cursor handling
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *               VDP cursor movement functions
0006               *//////////////////////////////////////////////////////////////
0007               
0008               
0009               ***************************************************************
0010               * AT - Set cursor YX position
0011               ***************************************************************
0012               *  bl   @yx
0013               *  data p0
0014               *--------------------------------------------------------------
0015               *  INPUT
0016               *  P0 = New Cursor YX position
0017               ********|*****|*********************|**************************
0018 26D4 C83B  42 at      mov   *r11+,@wyx
     26D6 832A     
0019 26D8 045B  20         b     *r11
0020               
0021               
0022               ***************************************************************
0023               * down - Increase cursor Y position
0024               ***************************************************************
0025               *  bl   @down
0026               ********|*****|*********************|**************************
0027 26DA B820  46 down    ab    @hb$01,@wyx
     26DC 2012     
     26DE 832A     
0028 26E0 045B  20         b     *r11
0029               
0030               
0031               ***************************************************************
0032               * up - Decrease cursor Y position
0033               ***************************************************************
0034               *  bl   @up
0035               ********|*****|*********************|**************************
0036 26E2 7820  46 up      sb    @hb$01,@wyx
     26E4 2012     
     26E6 832A     
0037 26E8 045B  20         b     *r11
0038               
0039               
0040               ***************************************************************
0041               * setx - Set cursor X position
0042               ***************************************************************
0043               *  bl   @setx
0044               *  data p0
0045               *--------------------------------------------------------------
0046               *  Register usage
0047               *  TMP0
0048               ********|*****|*********************|**************************
0049 26EA C13B  30 setx    mov   *r11+,tmp0            ; Set cursor X position
0050 26EC D120  30 xsetx   movb  @wyx,tmp0             ; Overwrite Y position
     26EE 832A     
0051 26F0 C804  30         mov   tmp0,@wyx             ; Save as new YX position
     26F2 832A     
0052 26F4 045B  20         b     *r11
                   < runlib.asm
0135               
0137                       copy  "vdp_yx2px_calc.asm"       ; VDP calculate pixel pos for YX coord
     **** ****     > vdp_yx2px_calc.asm
0001               * FILE......: vdp_yx2px_calc.asm
0002               * Purpose...: Calculate pixel position for YX coordinate
0003               
0004               ***************************************************************
0005               * YX2PX - Get pixel position for cursor YX position
0006               ***************************************************************
0007               *  BL   @YX2PX
0008               *
0009               *  (CONFIG:0 = 1) = Skip sprite adjustment
0010               *--------------------------------------------------------------
0011               *  INPUT
0012               *  @WYX   = Cursor YX position
0013               *--------------------------------------------------------------
0014               *  OUTPUT
0015               *  TMP0HB = Y pixel position
0016               *  TMP0LB = X pixel position
0017               *--------------------------------------------------------------
0018               *  Remarks
0019               *  This subroutine does not support multicolor mode
0020               ********|*****|*********************|**************************
0021 26F6 C120  30 yx2px   mov   @wyx,tmp0
     26F8 832A     
0022 26FA C18B  18 yx2pxx  mov   r11,tmp2              ; Save return address
0023 26FC 06C4  14         swpb  tmp0                  ; Y<->X
0024 26FE 04C5  14         clr   tmp1                  ; Clear before copy
0025 2700 D144  18         movb  tmp0,tmp1             ; Copy X to TMP1
0026               *--------------------------------------------------------------
0027               * X pixel - Special F18a 80 colums treatment
0028               *--------------------------------------------------------------
0029 2702 20A0  32         coc   @wbit1,config         ; f18a present ?
     2704 201E     
0030 2706 1609  14         jne   yx2pxx_normal         ; No, skip 80 cols handling
0031 2708 8820  46         c     @wcolmn,@yx2pxx_c80   ; 80 columns mode enabled ?
     270A 833A     
     270C 2736     
0032 270E 1605  14         jne   yx2pxx_normal         ; No, skip 80 cols handling
0033               
0034 2710 0A15  18         sla   tmp1,1                ; X = X * 2
0035 2712 B144  18         ab    tmp0,tmp1             ; X = X + (original X)
0036 2714 0225  22         ai    tmp1,>0500            ; X = X + 5 (F18a mystery offset)
     2716 0500     
0037 2718 1002  14         jmp   yx2pxx_y_calc
0038               *--------------------------------------------------------------
0039               * X pixel - Normal VDP treatment
0040               *--------------------------------------------------------------
0041               yx2pxx_normal:
0042 271A D144  18         movb  tmp0,tmp1             ; Copy X to TMP1
0043               *--------------------------------------------------------------
0044 271C 0A35  22         sla   tmp1,3                ; X=X*8
0045               *--------------------------------------------------------------
0046               * Calculate Y pixel position
0047               *--------------------------------------------------------------
0048               yx2pxx_y_calc:
0049 271E 0A34  22         sla   tmp0,3                ; Y=Y*8
0050 2720 D105  18         movb  tmp1,tmp0
0051 2722 06C4  14         swpb  tmp0                  ; X<->Y
0052 2724 20A0  32 yx2pi1  coc   @wbit0,config         ; Skip sprite adjustment ?
     2726 2020     
0053 2728 1305  14         jeq   yx2pi3                ; Yes, exit
0054               *--------------------------------------------------------------
0055               * Adjust for Y sprite location
0056               * See VDP Programmers Guide, Section 9.2.1
0057               *--------------------------------------------------------------
0058 272A 7120  34 yx2pi2  sb    @hb$01,tmp0           ; Adjust Y. Top of screen is at >FF
     272C 2012     
0059 272E 9120  34         cb    @hb$d0,tmp0           ; Y position = >D0 ?
     2730 2024     
0060 2732 13FB  14         jeq   yx2pi2                ; Yes, but that's not allowed, adjust
0061 2734 0456  20 yx2pi3  b     *tmp2                 ; Exit
0062               *--------------------------------------------------------------
0063               * Local constants
0064               *--------------------------------------------------------------
0065               yx2pxx_c80:
0066 2736 0050            data   80
0067               
0068               
                   < runlib.asm
0139               
0143               
0147               
0149                       copy  "vdp_f18a.asm"             ; VDP F18a low-level functions
     **** ****     > vdp_f18a.asm
0001               * FILE......: vdp_f18a.asm
0002               * Purpose...: VDP F18A Support module
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                 VDP F18A LOW-LEVEL FUNCTIONS
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * f18unl - Unlock F18A VDP
0010               ***************************************************************
0011               *  bl   @f18unl
0012               ********|*****|*********************|**************************
0013 2738 C20B  18 f18unl  mov   r11,tmp4              ; Save R11
0014 273A 06A0  32         bl    @putvr                ; Write once
     273C 2340     
0015 273E 391C             data  >391c                 ; VR1/57, value 00011100
0016 2740 06A0  32         bl    @putvr                ; Write twice
     2742 2340     
0017 2744 391C             data  >391c                 ; VR1/57, value 00011100
0018 2746 06A0  32         bl    @putvr
     2748 2340     
0019 274A 01E0             data  >01e0                 ; VR1, value 11100000, a sane setting
0020 274C 0458  20         b     *tmp4                 ; Exit
0021               
0022               
0023               ***************************************************************
0024               * f18lck - Lock F18A VDP
0025               ***************************************************************
0026               *  bl   @f18lck
0027               ********|*****|*********************|**************************
0028 274E C20B  18 f18lck  mov   r11,tmp4              ; Save R11
0029 2750 06A0  32         bl    @putvr                ; VR1/57, value 00000000
     2752 2340     
0030 2754 3900             data  >3900
0031 2756 0458  20         b     *tmp4                 ; Exit
0032               
0033               
0034               ***************************************************************
0035               * f18idl - Put GPU in F18A VDP in idle mode (stop GPU program)
0036               ***************************************************************
0037               *  bl   @f18idl
0038               *--------------------------------------------------------------
0039               *  REMARKS
0040               *  Expects that the f18a is unlocked when calling this function.
0041               ********|*****|*********************|**************************
0042 2758 C20B  18 f18idl  mov   r11,tmp4              ; Save R11
0043 275A 06A0  32         bl    @putvr                ; VR56 >38, value 00000000
     275C 2340     
0044 275E 3800             data  >3800                 ; Reset and load PC (GPU idle!)
0045 2760 0458  20         b     *tmp4                 ; Exit
0046               
0047               
0048               
0049               ***************************************************************
0050               * f18chk - Check if F18A VDP present
0051               ***************************************************************
0052               *  bl   @f18chk
0053               *--------------------------------------------------------------
0054               *  REMARKS
0055               *  Expects that the f18a is unlocked when calling this function.
0056               *  Runs GPU code at VDP >3f00
0057               ********|*****|*********************|**************************
0058 2762 C20B  18 f18chk  mov   r11,tmp4              ; Save R11
0059 2764 06A0  32         bl    @cpym2v
     2766 2494     
0060 2768 3F00             data  >3f00,f18chk_gpu,8    ; Copy F18A GPU code to VRAM
     276A 27AC     
     276C 0008     
0061 276E 06A0  32         bl    @putvr
     2770 2340     
0062 2772 363F             data  >363f                 ; Load MSB of GPU PC (>3f) into VR54 (>36)
0063 2774 06A0  32         bl    @putvr
     2776 2340     
0064 2778 3700             data  >3700                 ; Load LSB of GPU PC (>00) into VR55 (>37)
0065                                                   ; GPU code should run now
0066               
0067 277A 06A0  32         bl    @putvr                ; VR56 >38, value 00000000
     277C 2340     
0068 277E 3800             data  >3800                 ; Reset and load PC (GPU idle!)
0069               ***************************************************************
0070               * VDP @>3f00 == 0 ? F18A present : F18a not present
0071               ***************************************************************
0072 2780 0204  20         li    tmp0,>3f00
     2782 3F00     
0073 2784 06A0  32         bl    @vdra                 ; Set VDP read address to >3f00
     2786 22C8     
0074 2788 D120  30         movb  @vdpr,tmp0            ; Read MSB byte
     278A 8800     
0075 278C 0984  32         srl   tmp0,8
0076 278E D120  30         movb  @vdpr,tmp0            ; Read LSB byte
     2790 8800     
0077 2792 C104  18         mov   tmp0,tmp0             ; For comparing with 0
0078 2794 1303  14         jeq   f18chk_yes
0079               f18chk_no:
0080 2796 0242  22         andi  config,>bfff          ; CONFIG Register bit 1=0
     2798 BFFF     
0081 279A 1002  14         jmp   f18chk_exit
0082               f18chk_yes:
0083 279C 0262  22         ori   config,>4000          ; CONFIG Register bit 1=1
     279E 4000     
0084               
0085               f18chk_exit:
0086 27A0 06A0  32         bl    @filv                 ; Clear VDP mem >3f00->3f05
     27A2 229C     
0087 27A4 3F00             data  >3f00,>00,6
     27A6 0000     
     27A8 0006     
0088 27AA 0458  20         b     *tmp4                 ; Exit
0089               ***************************************************************
0090               * GPU code
0091               ********|*****|*********************|**************************
0092               f18chk_gpu
0093 27AC 04E0             data  >04e0                 ; 3f00 \ 04e0  clr @>3f00
0094 27AE 3F00             data  >3f00                 ; 3f02 / 3f00
0095 27B0 0340             data  >0340                 ; 3f04   0340  idle
0096 27B2 10FF             data  >10ff                 ; 3f06   10ff  \ jmp $
0097                                                   ;              | Make classic99 debugger
0098                                                   ;              | happy if break on illegal
0099                                                   ;              / opcode is on.
0100               
0101               ***************************************************************
0102               * f18rst - Reset f18a into standard settings
0103               ***************************************************************
0104               *  bl   @f18rst
0105               *--------------------------------------------------------------
0106               *  REMARKS
0107               *  This is used to leave the F18A mode and revert all settings
0108               *  that could lead to corruption when doing BLWP @0
0109               *
0110               *  Is expected to run while the f18a is unlocked.
0111               *
0112               *  There are some F18a settings that stay on when doing blwp @0
0113               *  and the TI title screen cannot recover from that.
0114               *
0115               *  It is your responsibility to set video mode tables should
0116               *  you want to continue instead of doing blwp @0 after your
0117               *  program cleanup
0118               ********|*****|*********************|**************************
0119 27B4 C20B  18 f18rst  mov   r11,tmp4              ; Save R11
0120                       ;------------------------------------------------------
0121                       ; Reset all F18a VDP registers to power-on defaults
0122                       ;------------------------------------------------------
0123 27B6 06A0  32         bl    @putvr
     27B8 2340     
0124 27BA 3280             data  >3280                 ; F18a VR50 (>32), MSB 8=1
0125               
0126 27BC 06A0  32         bl    @putvr                ; VR1/57, value 00000000
     27BE 2340     
0127 27C0 3900             data  >3900                 ; Lock the F18a
0128 27C2 0458  20         b     *tmp4                 ; Exit
0129               
0130               
0131               
0132               ***************************************************************
0133               * f18fwv - Get F18A Firmware Version
0134               ***************************************************************
0135               *  bl   @f18fwv
0136               *--------------------------------------------------------------
0137               *  REMARKS
0138               *  Successfully tested with F18A v1.8, note that this does not
0139               *  work with F18 v1.3 but you shouldn't be using such old F18A
0140               *  firmware to begin with.
0141               *--------------------------------------------------------------
0142               *  TMP0 High nibble = major version
0143               *  TMP0 Low nibble  = minor version
0144               *
0145               *  Example: >0018     F18a Firmware v1.8
0146               ********|*****|*********************|**************************
0147 27C4 C20B  18 f18fwv  mov   r11,tmp4              ; Save R11
0148 27C6 20A0  32         coc   @wbit1,config         ; CONFIG bit 1 set ?
     27C8 201E     
0149 27CA 1609  14         jne   f18fw1
0150               ***************************************************************
0151               * Read F18A major/minor version
0152               ***************************************************************
0153 27CC C120  30         mov   @vdps,tmp0            ; Clear VDP status register
     27CE 8802     
0154 27D0 06A0  32         bl    @putvr                ; Write to VR#15 for setting F18A status
     27D2 2340     
0155 27D4 0F0E             data  >0f0e                 ; register to read (0e=VR#14)
0156 27D6 04C4  14         clr   tmp0
0157 27D8 D120  30         movb  @vdps,tmp0
     27DA 8802     
0158 27DC 0984  32         srl   tmp0,8
0159 27DE 0458  20 f18fw1  b     *tmp4                 ; Exit
                   < runlib.asm
0151               
0153                       copy  "vdp_hchar.asm"            ; VDP hchar functions
     **** ****     > vdp_hchar.asm
0001               * FILE......: vdp_hchar.a99
0002               * Purpose...: VDP hchar module
0003               
0004               ***************************************************************
0005               * Repeat characters horizontally at YX
0006               ***************************************************************
0007               *  BL    @HCHAR
0008               *  DATA  P0,P1
0009               *  ...
0010               *  DATA  EOL                        ; End-of-list
0011               *--------------------------------------------------------------
0012               *  P0HB = Y position
0013               *  P0LB = X position
0014               *  P1HB = Byte to write
0015               *  P1LB = Number of times to repeat
0016               ********|*****|*********************|**************************
0017 27E0 C83B  42 hchar   mov   *r11+,@wyx            ; Set YX position
     27E2 832A     
0018 27E4 D17B  28         movb  *r11+,tmp1
0019 27E6 0985  32 hcharx  srl   tmp1,8                ; Byte to write
0020 27E8 D1BB  28         movb  *r11+,tmp2
0021 27EA 0986  32         srl   tmp2,8                ; Repeat count
0022 27EC C1CB  18         mov   r11,tmp3
0023 27EE 06A0  32         bl    @yx2pnt               ; Get VDP address into TMP0
     27F0 2408     
0024               *--------------------------------------------------------------
0025               *    Draw line
0026               *--------------------------------------------------------------
0027 27F2 020B  20         li    r11,hchar1
     27F4 27FA     
0028 27F6 0460  28         b     @xfilv                ; Draw
     27F8 22A2     
0029               *--------------------------------------------------------------
0030               *    Do housekeeping
0031               *--------------------------------------------------------------
0032 27FA 8817  42 hchar1  c     *tmp3,@w$ffff         ; End-Of-List marker found ?
     27FC 2022     
0033 27FE 1302  14         jeq   hchar2                ; Yes, exit
0034 2800 C2C7  18         mov   tmp3,r11
0035 2802 10EE  14         jmp   hchar                 ; Next one
0036 2804 05C7  14 hchar2  inct  tmp3
0037 2806 0457  20         b     *tmp3                 ; Exit
                   < runlib.asm
0155               
0159               
0163               
0167               
0169                       copy  "snd_player.asm"           ; Sound player
     **** ****     > snd_player.asm
0001               * FILE......: snd_player.asm
0002               * Purpose...: Sound player support code
0003               
0004               
0005               ***************************************************************
0006               * MUTE - Mute all sound generators
0007               ***************************************************************
0008               *  BL  @MUTE
0009               *  Mute sound generators and clear sound pointer
0010               *
0011               *  BL  @MUTE2
0012               *  Mute sound generators without clearing sound pointer
0013               ********|*****|*********************|**************************
0014 2808 04E0  26 mute    clr   @wsdlst               ; Clear sound pointer
     280A 8334     
0015 280C 40A0  34 mute2   szc   @wbit13,config        ; Turn off/pause sound player
     280E 2006     
0016 2810 0204  20         li    tmp0,muttab
     2812 2822     
0017 2814 0205  20         li    tmp1,sound            ; Sound generator port >8400
     2816 8400     
0018 2818 D574  40         movb  *tmp0+,*tmp1          ; Generator 0
0019 281A D574  40         movb  *tmp0+,*tmp1          ; Generator 1
0020 281C D574  40         movb  *tmp0+,*tmp1          ; Generator 2
0021 281E D554  38         movb  *tmp0,*tmp1           ; Generator 3
0022 2820 045B  20         b     *r11
0023 2822 9FBF     muttab  byte  >9f,>bf,>df,>ff       ; Table for muting all generators
     2824 DFFF     
0024               
0025               
0026               ***************************************************************
0027               * SDPREP - Prepare for playing sound
0028               ***************************************************************
0029               *  BL   @SDPREP
0030               *  DATA P0,P1
0031               *
0032               *  P0 = Address where tune is stored
0033               *  P1 = Option flags for sound player
0034               *--------------------------------------------------------------
0035               *  REMARKS
0036               *  Use the below equates for P1:
0037               *
0038               *  SDOPT1 => Tune is in CPU memory + loop
0039               *  SDOPT2 => Tune is in CPU memory
0040               *  SDOPT3 => Tune is in VRAM + loop
0041               *  SDOPT4 => Tune is in VRAM
0042               ********|*****|*********************|**************************
0043 2826 C81B  38 sdprep  mov   *r11,@wsdlst          ; Set tune address
     2828 8334     
0044 282A C83B  42         mov   *r11+,@wsdtmp         ; Set tune address in temp
     282C 8336     
0045 282E 0242  22         andi  config,>fff8          ; Clear bits 13-14-15
     2830 FFF8     
0046 2832 E0BB  30         soc   *r11+,config          ; Set options
0047 2834 D820  46         movb  @hb$01,@r13lb         ; Set initial duration
     2836 2012     
     2838 831B     
0048 283A 045B  20         b     *r11
0049               
0050               ***************************************************************
0051               * SDPLAY - Sound player for tune in VRAM or CPU memory
0052               ***************************************************************
0053               *  BL  @SDPLAY
0054               *--------------------------------------------------------------
0055               *  REMARKS
0056               *  Set config register bit13=0 to pause player.
0057               *  Set config register bit14=1 to repeat (or play next tune).
0058               ********|*****|*********************|**************************
0059 283C 20A0  32 sdplay  coc   @wbit13,config        ; Play tune ?
     283E 2006     
0060 2840 1301  14         jeq   sdpla1                ; Yes, play
0061 2842 045B  20         b     *r11
0062               *--------------------------------------------------------------
0063               * Initialisation
0064               *--------------------------------------------------------------
0065 2844 060D  14 sdpla1  dec   r13                   ; duration = duration - 1
0066 2846 9820  46         cb    @r13lb,@hb$00         ; R13LB == 0 ?
     2848 831B     
     284A 2000     
0067 284C 1301  14         jeq   sdpla3                ; Play next note
0068 284E 045B  20 sdpla2  b     *r11                  ; Note still busy, exit
0069 2850 20A0  32 sdpla3  coc   @wbit15,config        ; Play tune from CPU memory ?
     2852 2002     
0070 2854 131A  14         jeq   mmplay
0071               *--------------------------------------------------------------
0072               * Play tune from VDP memory
0073               *--------------------------------------------------------------
0074 2856 C120  30 vdplay  mov   @wsdtmp,tmp0          ; Get tune address
     2858 8336     
0075 285A 06C4  14         swpb  tmp0
0076 285C D804  30         movb  tmp0,@vdpa
     285E 8C02     
0077 2860 06C4  14         swpb  tmp0
0078 2862 D804  30         movb  tmp0,@vdpa
     2864 8C02     
0079 2866 04C4  14         clr   tmp0
0080 2868 D120  30         movb  @vdpr,tmp0            ; length = 0 (end of tune) ?
     286A 8800     
0081 286C 131E  14         jeq   sdexit                ; Yes. exit
0082 286E 0984  32 vdpla1  srl   tmp0,8                ; Right justify length byte
0083 2870 A804  30         a     tmp0,@wsdtmp          ; Adjust for next table entry
     2872 8336     
0084 2874 D820  42 vdpla2  movb  @vdpr,@>8400          ; Feed byte to sound generator
     2876 8800     
     2878 8400     
0085 287A 0604  14         dec   tmp0
0086 287C 16FB  14         jne   vdpla2
0087 287E D820  42         movb  @vdpr,@r13lb          ; Set duration counter
     2880 8800     
     2882 831B     
0088 2884 05E0  26 vdpla3  inct  @wsdtmp               ; Adjust for next table entry, honour byte (1) + (n+1)
     2886 8336     
0089 2888 045B  20         b     *r11
0090               *--------------------------------------------------------------
0091               * Play tune from CPU memory
0092               *--------------------------------------------------------------
0093 288A C120  30 mmplay  mov   @wsdtmp,tmp0
     288C 8336     
0094 288E D174  28         movb  *tmp0+,tmp1           ; length = 0 (end of tune) ?
0095 2890 130C  14         jeq   sdexit                ; Yes, exit
0096 2892 0985  32 mmpla1  srl   tmp1,8                ; Right justify length byte
0097 2894 A805  30         a     tmp1,@wsdtmp          ; Adjust for next table entry
     2896 8336     
0098 2898 D834  40 mmpla2  movb  *tmp0+,@>8400         ; Feed byte to sound generator
     289A 8400     
0099 289C 0605  14         dec   tmp1
0100 289E 16FC  14         jne   mmpla2
0101 28A0 D814  38         movb  *tmp0,@r13lb          ; Set duration counter
     28A2 831B     
0102 28A4 05E0  26         inct  @wsdtmp               ; Adjust for next table entry, honour byte (1) + (n+1)
     28A6 8336     
0103 28A8 045B  20         b     *r11
0104               *--------------------------------------------------------------
0105               * Exit. Check if tune must be looped
0106               *--------------------------------------------------------------
0107 28AA 20A0  32 sdexit  coc   @wbit14,config        ; Loop flag set ?
     28AC 2004     
0108 28AE 1607  14         jne   sdexi2                ; No, exit
0109 28B0 C820  42         mov   @wsdlst,@wsdtmp
     28B2 8334     
     28B4 8336     
0110 28B6 D820  46         movb  @hb$01,@r13lb          ; Set initial duration
     28B8 2012     
     28BA 831B     
0111 28BC 045B  20 sdexi1  b     *r11                  ; Exit
0112 28BE 0242  22 sdexi2  andi  config,>fff8          ; Reset music player
     28C0 FFF8     
0113 28C2 045B  20         b     *r11                  ; Exit
0114               
                   < runlib.asm
0171               
0175               
0179               
0183               
0186                       copy  "keyb_rkscan.asm"          ; Use ROM#0 OS monitor KSCAN
     **** ****     > keyb_rkscan.asm
0001               * FILE......: keyb_rkscan.asm
0002               * Purpose...: Full (real) keyboard support module
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                     KEYBOARD FUNCTIONS
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * RKSCAN - Scan keyboard using ROM#0 OS monitor KSCAN
0010               ***************************************************************
0011               *  BL @RKSCAN
0012               *--------------------------------------------------------------
0013               * Register usage
0014               * none
0015               *--------------------------------------------------------------
0016               * Scratchpad usage by console KSCAN:
0017               *
0018               * >8373  I/O:    LSB of GPL subroutine stack pointer 80 = (>8380)
0019               * >8374  Input:  keyboard scan mode (default=0)
0020               * >8375  Output: ASCII code detected by keyboard scan
0021               * >8376  Output: Joystick Y-status by keyboard scan
0022               * >8377  Output: Joystick X-status by keyboard scan
0023               * >837c  Output: GPL status byte (>20 if key pressed)
0024               * >838a  I/O:    GPL substack
0025               * >838c  I/O:    GPL substack
0026               * >83c6  I/O:    ISRWS R3 Keyboard state and debounce info
0027               * >83c8  I/O:    ISRWS R4 Keyboard state and debounce info
0028               * >83ca  I/O:    ISRWS R5 Keyboard state and debounce info
0029               * >83d4  I/O:    ISRWS R10 Contents of VDP register 01
0030               * >83d6  I/O:    ISRWS R11 Screen timeout counter, blanks when 0000
0031               * >83d8  I/O:    ISRWS R12 (Backup return address old R11 in GPLWS)
0032               * >83f8  output: GPLWS R12 (CRU base address for key scan)
0033               * >83fa  output: GPLWS R13 (GROM/GRAM read data port 9800)
0034               * >83fe  I/O:    GPLWS R15 (VDP write address port 8c02)
0035               ********|*****|*********************|**************************
0036               rkscan:
0037 28C4 0649  14         dect  stack
0038 28C6 C64B  30         mov   r11,*stack            ; Push return address
0039 28C8 0649  14         dect  stack
0040 28CA C644  30         mov   tmp0,*stack           ; Push tmp0
0041                       ;------------------------------------------------------
0042                       ; (1) Check for alpha lock
0043                       ;------------------------------------------------------
0044 28CC 40A0  34         szc   @wbit10,config        ; Reset CONFIG register bit 10=0
     28CE 200C     
0045                                                   ; (alpha lock off)
0046               
0047                       ; See CRU interface and keyboard sections for details
0048                       ; http://www.nouspikel.com/ti99/titechpages.htm
0049               
0050 28D0 04CC  14         clr   r12                   ; Set base address (to bit 0) so
0051                                                   ; following offsets correspond
0052               
0053 28D2 1E15  16         sbz   21                    ; \ Set bit 21 (PIN 5 attached to alpha
0054                                                   ; / lock column) to 0.
0055               
0056 28D4 0BEC  44         src   r12,14                ; Burn some time (r12=0 no problem shifting)
0057               
0058 28D6 1F07  16         tb    7                     ; \ Copy CRU bit 7 into EQ bit
0059                                                   ; | That is CRU INT7*/P15 pin (keyboard row
0060                                                   ; | with keys FCTN, 2,3,4,5,1,
0061                                                   ; / [joy1-up,joy2-up, Alpha Lock])
0062               
0063 28D8 1302  14         jeq   !                     ; No, alpha lock is off
0064               
0065 28DA E0A0  34         soc   @wbit10,config        ; \ Yes, alpha lock is on.
     28DC 200C     
0066                                                   ; / Set CONFIG register bit 10=1
0067               
0068 28DE 1D15  16 !       sbo   21                    ; \ Reset bit 21 (Pin 5 attached to alpha
0069                                                   ; / lock column) to 1.
0070                       ;------------------------------------------------------
0071                       ; (2) Prepare for OS monitor kscan
0072                       ;------------------------------------------------------
0073 28E0 C820  46         mov   @scrpad.83c6,@>83c6   ; Required for lowercase support
     28E2 2920     
     28E4 83C6     
0074 28E6 C820  46         mov   @scrpad.83fa,@>83fa   ; Load GPLWS R13
     28E8 2922     
     28EA 83FA     
0075 28EC C820  46         mov   @scrpad.83fe,@>83fe   ; Load GPLWS R15
     28EE 2924     
     28F0 83FE     
0076               
0077 28F2 04C4  14         clr   tmp0                  ; \ Keyboard mode in MSB
0078                                                   ; / 00=Scan all of keyboard
0079               
0080 28F4 D804  30         movb  tmp0,@>8374           ; Set keyboard mode at @>8374
     28F6 8374     
0081                                                   ; (scan entire keyboard)
0082               
0083 28F8 02E0  18         lwpi  >83e0                 ; Activate GPL workspace
     28FA 83E0     
0084               
0085 28FC 06A0  28         bl    @kscan                ; Call KSCAN
     28FE 000E     
0086 2900 02E0  18         lwpi  ws1                   ; Activate user workspace
     2902 8300     
0087                       ;------------------------------------------------------
0088                       ; (3) Check if key pressed
0089                       ;------------------------------------------------------
0090 2904 D120  30         movb  @>837c,tmp0           ; Get flag
     2906 837C     
0091 2908 0A34  22         sla   tmp0,3                ; Flag value is >20
0092 290A 1707  14         jnc   rkscan.exit           ; No key pressed, exit early
0093                       ;------------------------------------------------------
0094                       ; (4) Key detected, store in memory
0095                       ;------------------------------------------------------
0096 290C D120  30         movb  @>8375,tmp0           ; \ Key pressed is at @>8375
     290E 8375     
0097 2910 0984  32         srl   tmp0,8                ; / Move to LSB
0099 2912 C804  38         mov   tmp0,@rom0_kscan_out  ; Store ASCII value in user location
     2914 A028     
0103 2916 E0A0  34         soc   @wbit11,config        ; Set ANYKEY flag in CONFIG register
     2918 200A     
0104                       ;------------------------------------------------------
0105                       ; Exit
0106                       ;------------------------------------------------------
0107               rkscan.exit:
0108 291A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0109 291C C2F9  30         mov   *stack+,r11           ; Pop r11
0110 291E 045B  20         b     *r11                  ; Return to caller
0111               
0112               
0113 2920 0200     scrpad.83c6   data >0200            ; Required for KSCAN to support lowercase
0114 2922 9800     scrpad.83fa   data >9800
0115               
0116               ; Dummy value for GPLWS R15 (instead of VDP write address port 8c02)
0117               ; We do not want console KSCAN to fiddle with VDP registers while Stevie
0118               ; is running
0119               
0120 2924 83A0     scrpad.83fe   data >83a0            ; 8c02
                   < runlib.asm
0191               
0193                       copy  "cpu_hexsupport.asm"       ; CPU hex numbers support
     **** ****     > cpu_hexsupport.asm
0001               * FILE......: cpu_hexsupport.asm
0002               * Purpose...: CPU create, display hex numbers module
0003               
0004               ***************************************************************
0005               * mkhex - Convert hex word to string
0006               ***************************************************************
0007               *  bl   @mkhex
0008               *       data P0,P1,P2
0009               *--------------------------------------------------------------
0010               *  P0 = Pointer to 16 bit word
0011               *  P1 = Pointer to string buffer
0012               *  P2 = Offset for ASCII digit
0013               *       MSB determines offset for chars A-F
0014               *       LSB determines offset for chars 0-9
0015               *  (CONFIG#0 = 1) = Display number at cursor YX
0016               *--------------------------------------------------------------
0017               *  Memory usage:
0018               *  tmp0, tmp1, tmp2, tmp3, tmp4
0019               *  waux1, waux2, waux3
0020               *--------------------------------------------------------------
0021               *  Memory variables waux1-waux3 are used as temporary variables
0022               ********|*****|*********************|**************************
0023 2926 C13B  30 mkhex   mov   *r11+,tmp0            ; P0: Address of word
0024 2928 C83B  42         mov   *r11+,@waux3          ; P1: Pointer to string buffer
     292A 8340     
0025 292C 04E0  26         clr   @waux1
     292E 833C     
0026 2930 04E0  26         clr   @waux2
     2932 833E     
0027 2934 0207  20         li    tmp3,waux1            ; We store results in WAUX1 and WAUX2
     2936 833C     
0028 2938 C114  26         mov   *tmp0,tmp0            ; Get word
0029               *--------------------------------------------------------------
0030               *    Convert nibbles to bytes (is in wrong order)
0031               *--------------------------------------------------------------
0032 293A 0205  20         li    tmp1,4                ; 4 nibbles
     293C 0004     
0033 293E C184  18 mkhex1  mov   tmp0,tmp2             ; Make work copy
0034 2940 0246  22         andi  tmp2,>000f            ; Only keep LSN
     2942 000F     
0035                       ;------------------------------------------------------
0036                       ; Determine offset for ASCII char
0037                       ;------------------------------------------------------
0038 2944 0286  22         ci    tmp2,>000a
     2946 000A     
0039 2948 1105  14         jlt   mkhex1.digit09
0040                       ;------------------------------------------------------
0041                       ; Add ASCII offset for digits A-F
0042                       ;------------------------------------------------------
0043               mkhex1.digitaf:
0044 294A C21B  26         mov   *r11,tmp4
0045 294C 0988  32         srl   tmp4,8                ; Right justify
0046 294E 0228  22         ai    tmp4,-10              ; Adjust offset for 'A-F'
     2950 FFF6     
0047 2952 1003  14         jmp   mkhex2
0048               
0049               mkhex1.digit09:
0050                       ;------------------------------------------------------
0051                       ; Add ASCII offset for digits 0-9
0052                       ;------------------------------------------------------
0053 2954 C21B  26         mov   *r11,tmp4
0054 2956 0248  22         andi  tmp4,>00ff            ; Only keep LSB
     2958 00FF     
0055               
0056 295A A188  18 mkhex2  a     tmp4,tmp2             ; Add ASCII-offset
0057 295C 06C6  14         swpb  tmp2
0058 295E DDC6  32         movb  tmp2,*tmp3+           ; Save byte
0059 2960 0944  24         srl   tmp0,4                ; Next nibble
0060 2962 0605  14         dec   tmp1
0061 2964 16EC  14         jne   mkhex1                ; Repeat until all nibbles processed
0062 2966 0242  22         andi  config,>bfff          ; Reset bit 1 in config register
     2968 BFFF     
0063               *--------------------------------------------------------------
0064               *    Build first 2 bytes in correct order
0065               *--------------------------------------------------------------
0066 296A C160  30         mov   @waux3,tmp1           ; Get pointer
     296C 8340     
0067 296E 04D5  26         clr   *tmp1                 ; Set length byte to 0
0068 2970 0585  14         inc   tmp1                  ; Next byte, not word!
0069 2972 C120  30         mov   @waux2,tmp0
     2974 833E     
0070 2976 06C4  14         swpb  tmp0
0071 2978 DD44  32         movb  tmp0,*tmp1+
0072 297A 06C4  14         swpb  tmp0
0073 297C DD44  32         movb  tmp0,*tmp1+
0074               *--------------------------------------------------------------
0075               *    Set length byte
0076               *--------------------------------------------------------------
0077 297E C120  30         mov   @waux3,tmp0           ; Get start of string buffer
     2980 8340     
0078 2982 D520  46         movb  @hb$04,*tmp0          ; Set lengh byte to 4
     2984 2016     
0079 2986 05CB  14         inct  r11                   ; Skip Parameter P2
0080               *--------------------------------------------------------------
0081               *    Build last 2 bytes in correct order
0082               *--------------------------------------------------------------
0083 2988 C120  30         mov   @waux1,tmp0
     298A 833C     
0084 298C 06C4  14         swpb  tmp0
0085 298E DD44  32         movb  tmp0,*tmp1+
0086 2990 06C4  14         swpb  tmp0
0087 2992 DD44  32         movb  tmp0,*tmp1+
0088               *--------------------------------------------------------------
0089               *    Display hex number ?
0090               *--------------------------------------------------------------
0091 2994 20A0  32         coc   @wbit0,config         ; Check if 'display' bit is set
     2996 2020     
0092 2998 1301  14         jeq   mkhex3                ; Yes, so show at current YX position
0093 299A 045B  20         b     *r11                  ; Exit
0094               *--------------------------------------------------------------
0095               *  Display hex number on screen at current YX position
0096               *--------------------------------------------------------------
0097 299C 0242  22 mkhex3  andi  config,>7fff          ; Reset bit 0
     299E 7FFF     
0098 29A0 C160  30         mov   @waux3,tmp1           ; Get Pointer to string
     29A2 8340     
0099 29A4 0460  28         b     @xutst0               ; Display string
     29A6 242E     
0100 29A8 0610     prefix  data  >0610                 ; Length byte + blank
0101               
0102               
0103               
0104               ***************************************************************
0105               * puthex - Put 16 bit word on screen
0106               ***************************************************************
0107               *  bl   @mkhex
0108               *       data P0,P1,P2,P3
0109               *--------------------------------------------------------------
0110               *  P0 = YX position
0111               *  P1 = Pointer to 16 bit word
0112               *  P2 = Pointer to string buffer
0113               *  P3 = Offset for ASCII digit
0114               *       MSB determines offset for chars A-F
0115               *       LSB determines offset for chars 0-9
0116               *--------------------------------------------------------------
0117               *  Memory usage:
0118               *  tmp0, tmp1, tmp2, tmp3
0119               *  waux1, waux2, waux3
0120               ********|*****|*********************|**************************
0121 29AA C83B  42 puthex  mov   *r11+,@wyx            ; Set cursor
     29AC 832A     
0122 29AE 0262  22         ori   config,>8000          ; CONFIG register bit 0=1
     29B0 8000     
0123 29B2 10B9  14         jmp   mkhex                 ; Convert number and display
0124               
                   < runlib.asm
0195               
0197                       copy  "cpu_numsupport.asm"       ; CPU unsigned numbers support
     **** ****     > cpu_numsupport.asm
0001               * FILE......: cpu_numsupport.asm
0002               * Purpose...: CPU create, display numbers module
0003               
0004               ***************************************************************
0005               * MKNUM - Convert unsigned number to string
0006               ***************************************************************
0007               *  BL   @MKNUM
0008               *  DATA P0,P1,P2
0009               *
0010               *  P0   = Pointer to 16 bit unsigned number
0011               *  P1   = Pointer to 5 byte string buffer
0012               *  P2HB = Offset for ASCII digit
0013               *  P2LB = Character for replacing leading 0's
0014               *
0015               *  (CONFIG:0 = 1) = Display number at cursor YX
0016               *-------------------------------------------------------------
0017               *  Destroys registers tmp0-tmp4
0018               ********|*****|*********************|**************************
0019 29B4 0207  20 mknum   li    tmp3,5                ; Digit counter
     29B6 0005     
0020 29B8 C17B  30         mov   *r11+,tmp1            ; \ Get 16 bit unsigned number
0021 29BA C155  26         mov   *tmp1,tmp1            ; /
0022 29BC C23B  30         mov   *r11+,tmp4            ; Pointer to string buffer
0023 29BE 0228  22         ai    tmp4,4                ; Get end of buffer
     29C0 0004     
0024 29C2 0206  20         li    tmp2,10               ; Divide by 10 to isolate last digit
     29C4 000A     
0025               *--------------------------------------------------------------
0026               *  Do string conversion
0027               *--------------------------------------------------------------
0028 29C6 04C4  14 mknum1  clr   tmp0                  ; Clear the high word of the dividend
0029 29C8 3D06 128         div   tmp2,tmp0             ; (TMP0:TMP1) / 10 (TMP2)
0030 29CA 06C5  14         swpb  tmp1                  ; Move to high-byte for writing to buffer
0031 29CC B15B  26         ab    *r11,tmp1             ; Add offset for ASCII digit
0032 29CE D605  30         movb  tmp1,*tmp4            ; Write remainder to string buffer
0033 29D0 C144  18         mov   tmp0,tmp1             ; Move integer result into R4 for next digit
0034 29D2 0608  14         dec   tmp4                  ; Adjust string pointer for next digit
0035 29D4 0607  14         dec   tmp3                  ; Decrease counter
0036 29D6 16F7  14         jne   mknum1                ; Do next digit
0037               *--------------------------------------------------------------
0038               *  Replace leading 0's with fill character
0039               *--------------------------------------------------------------
0040 29D8 0207  20         li    tmp3,4                ; Check first 4 digits
     29DA 0004     
0041 29DC 0588  14         inc   tmp4                  ; Too far, back to buffer start
0042 29DE C11B  26         mov   *r11,tmp0
0043 29E0 0A84  32         sla   tmp0,8                ; Only keep fill character in HB
0044 29E2 96D8  34 mknum2  cb    *tmp4,*r11            ; Digit = 0 ?
0045 29E4 1305  14         jeq   mknum4                ; Yes, replace with fill character
0046 29E6 05CB  14 mknum3  inct  r11
0047 29E8 20A0  32         coc   @wbit0,config         ; Check if 'display' bit is set
     29EA 2020     
0048 29EC 1305  14         jeq   mknum5                ; Yes, so show at current YX position
0049 29EE 045B  20         b     *r11                  ; Exit
0050 29F0 DE04  32 mknum4  movb  tmp0,*tmp4+           ; Replace leading 0 with fill character
0051 29F2 0607  14         dec   tmp3                  ; 4th digit processed ?
0052 29F4 13F8  14         jeq   mknum3                ; Yes, exit
0053 29F6 10F5  14         jmp   mknum2                ; No, next one
0054               *--------------------------------------------------------------
0055               *  Display integer on screen at current YX position
0056               *--------------------------------------------------------------
0057 29F8 0242  22 mknum5  andi  config,>7fff          ; Reset bit 0
     29FA 7FFF     
0058 29FC C10B  18         mov   r11,tmp0
0059 29FE 0224  22         ai    tmp0,-4
     2A00 FFFC     
0060 2A02 C154  26         mov   *tmp0,tmp1            ; Get buffer address
0061 2A04 0206  20         li    tmp2,>0500            ; String length = 5
     2A06 0500     
0062 2A08 0460  28         b     @xutstr               ; Display string
     2A0A 2430     
0063               
0064               
0065               
0066               
0067               ***************************************************************
0068               * trimnum - Trim unsigned number string
0069               ***************************************************************
0070               *  bl   @trimnum
0071               *  data p0,p1,p2
0072               *--------------------------------------------------------------
0073               *  p0   = Pointer to 5 byte string buffer (no length byte!)
0074               *  p1   = Pointer to output variable
0075               *  p2   = Padding character to match against
0076               *--------------------------------------------------------------
0077               *  Copy unsigned number string into a length-padded, left
0078               *  justified string for display with putstr, putat, ...
0079               *
0080               *  The new string starts at index 5 in buffer, overwriting
0081               *  anything that is located there !
0082               *
0083               *               01234|56789A
0084               *  Before...:   XXXXX          length
0085               *  After....:   XXXXY|zY       z=1
0086               *               XXXYY|zYY      z=2
0087               *               XXYYY|zYYY     z=3
0088               *               XYYYY|zYYYY    z=4
0089               *               YYYYY|zYYYYY   z=5
0090               *--------------------------------------------------------------
0091               *  Destroys registers tmp0-tmp3
0092               ********|*****|*********************|**************************
0093               trimnum:
0094 2A0C C13B  30         mov   *r11+,tmp0            ; Get pointer to input string
0095 2A0E C17B  30         mov   *r11+,tmp1            ; Get pointer to output string
0096 2A10 C1BB  30         mov   *r11+,tmp2            ; Get padding character
0097 2A12 06C6  14         swpb  tmp2                  ; LO <-> HI
0098 2A14 0207  20         li    tmp3,5                ; Set counter
     2A16 0005     
0099                       ;------------------------------------------------------
0100                       ; Scan for padding character from left to right
0101                       ;------------------------------------------------------:
0102               trimnum_scan:
0103 2A18 9194  26         cb    *tmp0,tmp2            ; Matches padding character ?
0104 2A1A 1604  14         jne   trimnum_setlen        ; No, exit loop
0105 2A1C 0584  14         inc   tmp0                  ; Next character
0106 2A1E 0607  14         dec   tmp3                  ; Last digit reached ?
0107 2A20 1301  14         jeq   trimnum_setlen        ; yes, exit loop
0108 2A22 10FA  14         jmp   trimnum_scan
0109                       ;------------------------------------------------------
0110                       ; Scan completed, set length byte new string
0111                       ;------------------------------------------------------
0112               trimnum_setlen:
0113 2A24 06C7  14         swpb  tmp3                  ; LO <-> HI
0114 2A26 DD47  32         movb  tmp3,*tmp1+           ; Update string-length in work buffer
0115 2A28 06C7  14         swpb  tmp3                  ; LO <-> HI
0116                       ;------------------------------------------------------
0117                       ; Start filling new string
0118                       ;------------------------------------------------------
0119               trimnum_fill:
0120 2A2A DD74  42         movb  *tmp0+,*tmp1+         ; Copy character
0121 2A2C 0607  14         dec   tmp3                  ; Last character ?
0122 2A2E 16FD  14         jne   trimnum_fill          ; Not yet, repeat
0123 2A30 045B  20         b     *r11                  ; Return
0124               
0125               
0126               
0127               
0128               ***************************************************************
0129               * PUTNUM - Put unsigned number on screen
0130               ***************************************************************
0131               *  BL   @PUTNUM
0132               *  DATA P0,P1,P2,P3
0133               *--------------------------------------------------------------
0134               *  P0   = YX position
0135               *  P1   = Pointer to 16 bit unsigned number
0136               *  P2   = Pointer to 5 byte string buffer
0137               *  P3HB = Offset for ASCII digit
0138               *  P3LB = Character for replacing leading 0's
0139               ********|*****|*********************|**************************
0140 2A32 C83B  42 putnum  mov   *r11+,@wyx            ; Set cursor
     2A34 832A     
0141 2A36 0262  22         ori   config,>8000          ; CONFIG register bit 0=1
     2A38 8000     
0142 2A3A 10BC  14         jmp   mknum                 ; Convert number and display
                   < runlib.asm
0199               
0203               
0207               
0211               
0215               
0217                       copy  "cpu_strings.asm"          ; String utilities support
     **** ****     > cpu_strings.asm
0001               * FILE......: cpu_strings.asm
0002               * Purpose...: CPU string manipulation library
0003               
0004               
0005               ***************************************************************
0006               * string.ltrim - Left justify string
0007               ***************************************************************
0008               *  bl   @string.ltrim
0009               *       data p0,p1,p2
0010               *--------------------------------------------------------------
0011               *  P0 = Pointer to length-prefix string
0012               *  P1 = Pointer to RAM work buffer
0013               *  P2 = Fill character
0014               *--------------------------------------------------------------
0015               *  BL   @xstring.ltrim
0016               *
0017               *  TMP0 = Pointer to length-prefix string
0018               *  TMP1 = Pointer to RAM work buffer
0019               *  TMP2 = Fill character
0020               ********|*****|*********************|**************************
0021               string.ltrim:
0022 2A3C 0649  14         dect  stack
0023 2A3E C64B  30         mov   r11,*stack            ; Save return address
0024 2A40 0649  14         dect  stack
0025 2A42 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 2A44 0649  14         dect  stack
0027 2A46 C645  30         mov   tmp1,*stack           ; Push tmp1
0028 2A48 0649  14         dect  stack
0029 2A4A C646  30         mov   tmp2,*stack           ; Push tmp2
0030 2A4C 0649  14         dect  stack
0031 2A4E C647  30         mov   tmp3,*stack           ; Push tmp3
0032                       ;-----------------------------------------------------------------------
0033                       ; Get parameter values
0034                       ;-----------------------------------------------------------------------
0035 2A50 C13B  30         mov   *r11+,tmp0            ; Pointer to length-prefixed string
0036 2A52 C17B  30         mov   *r11+,tmp1            ; RAM work buffer
0037 2A54 C1BB  30         mov   *r11+,tmp2            ; Fill character
0038 2A56 100A  14         jmp   !
0039                       ;-----------------------------------------------------------------------
0040                       ; Register version
0041                       ;-----------------------------------------------------------------------
0042               xstring.ltrim:
0043 2A58 0649  14         dect  stack
0044 2A5A C64B  30         mov   r11,*stack            ; Save return address
0045 2A5C 0649  14         dect  stack
0046 2A5E C644  30         mov   tmp0,*stack           ; Push tmp0
0047 2A60 0649  14         dect  stack
0048 2A62 C645  30         mov   tmp1,*stack           ; Push tmp1
0049 2A64 0649  14         dect  stack
0050 2A66 C646  30         mov   tmp2,*stack           ; Push tmp2
0051 2A68 0649  14         dect  stack
0052 2A6A C647  30         mov   tmp3,*stack           ; Push tmp3
0053                       ;-----------------------------------------------------------------------
0054                       ; Start
0055                       ;-----------------------------------------------------------------------
0056 2A6C C1D4  26 !       mov   *tmp0,tmp3
0057 2A6E 06C7  14         swpb  tmp3                  ; LO <-> HI
0058 2A70 0247  22         andi  tmp3,>00ff            ; Discard HI byte tmp2 (only keep length)
     2A72 00FF     
0059 2A74 0A86  32         sla   tmp2,8                ; LO -> HI fill character
0060                       ;-----------------------------------------------------------------------
0061                       ; Scan string from left to right and compare with fill character
0062                       ;-----------------------------------------------------------------------
0063               string.ltrim.scan:
0064 2A76 9194  26         cb    *tmp0,tmp2            ; Do we have a fill character?
0065 2A78 1604  14         jne   string.ltrim.move     ; No, now move string left
0066 2A7A 0584  14         inc   tmp0                  ; Next byte
0067 2A7C 0607  14         dec   tmp3                  ; Shorten string length
0068 2A7E 1301  14         jeq   string.ltrim.move     ; Exit if all characters processed
0069 2A80 10FA  14         jmp   string.ltrim.scan     ; Scan next characer
0070                       ;-----------------------------------------------------------------------
0071                       ; Copy part of string to RAM work buffer (This is the left-justify)
0072                       ;-----------------------------------------------------------------------
0073               string.ltrim.move:
0074 2A82 9194  26         cb    *tmp0,tmp2            ; Do we have a fill character?
0075 2A84 C1C7  18         mov   tmp3,tmp3             ; String length = 0 ?
0076 2A86 1306  14         jeq   string.ltrim.panic    ; File length assert
0077 2A88 C187  18         mov   tmp3,tmp2
0078 2A8A 06C7  14         swpb  tmp3                  ; HI <-> LO
0079 2A8C DD47  32         movb  tmp3,*tmp1+           ; Set new string length byte in RAM workbuf
0080               
0081 2A8E 06A0  32         bl    @xpym2m               ; tmp0 = Memory source address
     2A90 24EE     
0082                                                   ; tmp1 = Memory target address
0083                                                   ; tmp2 = Number of bytes to copy
0084 2A92 1004  14         jmp   string.ltrim.exit
0085                       ;-----------------------------------------------------------------------
0086                       ; CPU crash
0087                       ;-----------------------------------------------------------------------
0088               string.ltrim.panic:
0089 2A94 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2A96 FFCE     
0090 2A98 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2A9A 2026     
0091                       ;----------------------------------------------------------------------
0092                       ; Exit
0093                       ;----------------------------------------------------------------------
0094               string.ltrim.exit:
0095 2A9C C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0096 2A9E C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0097 2AA0 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0098 2AA2 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0099 2AA4 C2F9  30         mov   *stack+,r11           ; Pop r11
0100 2AA6 045B  20         b     *r11                  ; Return to caller
0101               
0102               
0103               
0104               
0105               ***************************************************************
0106               * string.getlenc - Get length of C-style string
0107               ***************************************************************
0108               *  bl   @string.getlenc
0109               *       data p0,p1
0110               *--------------------------------------------------------------
0111               *  P0 = Pointer to C-style string
0112               *  P1 = String termination character
0113               *--------------------------------------------------------------
0114               *  bl   @xstring.getlenc
0115               *
0116               *  TMP0 = Pointer to C-style string
0117               *  TMP1 = Termination character
0118               *--------------------------------------------------------------
0119               *  OUTPUT:
0120               *  @waux1 = Length of string
0121               ********|*****|*********************|**************************
0122               string.getlenc:
0123 2AA8 0649  14         dect  stack
0124 2AAA C64B  30         mov   r11,*stack            ; Save return address
0125 2AAC 05D9  26         inct  *stack                ; Skip "data P0"
0126 2AAE 05D9  26         inct  *stack                ; Skip "data P1"
0127 2AB0 0649  14         dect  stack
0128 2AB2 C644  30         mov   tmp0,*stack           ; Push tmp0
0129 2AB4 0649  14         dect  stack
0130 2AB6 C645  30         mov   tmp1,*stack           ; Push tmp1
0131 2AB8 0649  14         dect  stack
0132 2ABA C646  30         mov   tmp2,*stack           ; Push tmp2
0133                       ;-----------------------------------------------------------------------
0134                       ; Get parameter values
0135                       ;-----------------------------------------------------------------------
0136 2ABC C13B  30         mov   *r11+,tmp0            ; Pointer to C-style string
0137 2ABE C17B  30         mov   *r11+,tmp1            ; String termination character
0138 2AC0 1008  14         jmp   !
0139                       ;-----------------------------------------------------------------------
0140                       ; Register version
0141                       ;-----------------------------------------------------------------------
0142               xstring.getlenc:
0143 2AC2 0649  14         dect  stack
0144 2AC4 C64B  30         mov   r11,*stack            ; Save return address
0145 2AC6 0649  14         dect  stack
0146 2AC8 C644  30         mov   tmp0,*stack           ; Push tmp0
0147 2ACA 0649  14         dect  stack
0148 2ACC C645  30         mov   tmp1,*stack           ; Push tmp1
0149 2ACE 0649  14         dect  stack
0150 2AD0 C646  30         mov   tmp2,*stack           ; Push tmp2
0151                       ;-----------------------------------------------------------------------
0152                       ; Start
0153                       ;-----------------------------------------------------------------------
0154 2AD2 0A85  32 !       sla   tmp1,8                ; LSB to MSB
0155 2AD4 04C6  14         clr   tmp2                  ; Loop counter
0156                       ;-----------------------------------------------------------------------
0157                       ; Scan string for termination character
0158                       ;-----------------------------------------------------------------------
0159               string.getlenc.loop:
0160 2AD6 0586  14         inc   tmp2
0161 2AD8 9174  28         cb    *tmp0+,tmp1           ; Compare character
0162 2ADA 1304  14         jeq   string.getlenc.putlength
0163                       ;-----------------------------------------------------------------------
0164                       ; Assert on string length
0165                       ;-----------------------------------------------------------------------
0166 2ADC 0286  22         ci    tmp2,255
     2ADE 00FF     
0167 2AE0 1505  14         jgt   string.getlenc.panic
0168 2AE2 10F9  14         jmp   string.getlenc.loop
0169                       ;-----------------------------------------------------------------------
0170                       ; Return length
0171                       ;-----------------------------------------------------------------------
0172               string.getlenc.putlength:
0173 2AE4 0606  14         dec   tmp2                  ; One time adjustment
0174 2AE6 C806  30         mov   tmp2,@waux1           ; Store length
     2AE8 833C     
0175 2AEA 1004  14         jmp   string.getlenc.exit   ; Exit
0176                       ;-----------------------------------------------------------------------
0177                       ; CPU crash
0178                       ;-----------------------------------------------------------------------
0179               string.getlenc.panic:
0180 2AEC C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2AEE FFCE     
0181 2AF0 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2AF2 2026     
0182                       ;----------------------------------------------------------------------
0183                       ; Exit
0184                       ;----------------------------------------------------------------------
0185               string.getlenc.exit:
0186 2AF4 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0187 2AF6 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0188 2AF8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0189 2AFA C2F9  30         mov   *stack+,r11           ; Pop r11
0190 2AFC 045B  20         b     *r11                  ; Return to caller
                   < runlib.asm
0219               
0223               
0225                       copy  "cpu_scrpad_backrest.asm"  ; Scratchpad backup/restore
     **** ****     > cpu_scrpad_backrest.asm
0001               * FILE......: cpu_scrpad_backrest.asm
0002               * Purpose...: Scratchpad memory backup/restore functions
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                Scratchpad memory backup/restore
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * cpu.scrpad.backup - Backup 256 bytes of scratchpad >8300 to
0010               *                     predefined memory target @cpu.scrpad.tgt
0011               ***************************************************************
0012               *  bl   @cpu.scrpad.backup
0013               *--------------------------------------------------------------
0014               *  Register usage
0015               *  r0-r2, but values restored before exit
0016               *--------------------------------------------------------------
0017               *  Backup 256 bytes of scratchpad memory >8300 to destination
0018               *  @cpu.scrpad.tgt (+ >ff)
0019               *
0020               *  Expects current workspace to be in scratchpad memory.
0021               ********|*****|*********************|**************************
0022               cpu.scrpad.backup:
0023 2AFE C800  38         mov   r0,@cpu.scrpad.tgt    ; Save @>8300 (r0)
     2B00 F000     
0024 2B02 C801  38         mov   r1,@cpu.scrpad.tgt+2  ; Save @>8302 (r1)
     2B04 F002     
0025 2B06 C802  38         mov   r2,@cpu.scrpad.tgt+4  ; Save @>8304 (r2)
     2B08 F004     
0026                       ;------------------------------------------------------
0027                       ; Prepare for copy loop
0028                       ;------------------------------------------------------
0029 2B0A 0200  20         li    r0,>8306              ; Scratchpad source address
     2B0C 8306     
0030 2B0E 0201  20         li    r1,cpu.scrpad.tgt+6   ; RAM target address
     2B10 F006     
0031 2B12 0202  20         li    r2,62                 ; Loop counter
     2B14 003E     
0032                       ;------------------------------------------------------
0033                       ; Copy memory range >8306 - >83ff
0034                       ;------------------------------------------------------
0035               cpu.scrpad.backup.copy:
0036 2B16 CC70  46         mov   *r0+,*r1+
0037 2B18 CC70  46         mov   *r0+,*r1+
0038 2B1A 0642  14         dect  r2
0039 2B1C 16FC  14         jne   cpu.scrpad.backup.copy
0040 2B1E C820  50         mov   @>83fe,@cpu.scrpad.tgt + >fe
     2B20 83FE     
     2B22 F0FE     
0041                                                   ; Copy last word
0042                       ;------------------------------------------------------
0043                       ; Restore register r0 - r2
0044                       ;------------------------------------------------------
0045 2B24 C020  34         mov   @cpu.scrpad.tgt,r0    ; Restore r0
     2B26 F000     
0046 2B28 C060  34         mov   @cpu.scrpad.tgt+2,r1  ; Restore r1
     2B2A F002     
0047 2B2C C0A0  34         mov   @cpu.scrpad.tgt+4,r2  ; Restore r2
     2B2E F004     
0048                       ;------------------------------------------------------
0049                       ; Exit
0050                       ;------------------------------------------------------
0051               cpu.scrpad.backup.exit:
0052 2B30 045B  20         b     *r11                  ; Return to caller
0053               
0054               
0055               ***************************************************************
0056               * cpu.scrpad.restore - Restore 256 bytes of scratchpad from
0057               *                      predefined target @cpu.scrpad.tgt
0058               *                      to destination >8300
0059               ***************************************************************
0060               *  bl   @cpu.scrpad.restore
0061               *--------------------------------------------------------------
0062               *  Register usage
0063               *  r0-r1
0064               *--------------------------------------------------------------
0065               *  Restore scratchpad from memory area @cpu.scrpad.tgt (+ >ff).
0066               *  Current workspace may not be in scratchpad >8300 when called.
0067               *
0068               *  Destroys r0,r1
0069               ********|*****|*********************|**************************
0070               cpu.scrpad.restore:
0071                       ;------------------------------------------------------
0072                       ; Prepare for copy loop, WS
0073                       ;------------------------------------------------------
0074 2B32 0200  20         li    r0,cpu.scrpad.tgt
     2B34 F000     
0075 2B36 0201  20         li    r1,>8300
     2B38 8300     
0076                       ;------------------------------------------------------
0077                       ; Copy 256 bytes from @cpu.scrpad.tgt to >8300
0078                       ;------------------------------------------------------
0079               cpu.scrpad.restore.copy:
0080 2B3A CC70  46         mov   *r0+,*r1+
0081 2B3C CC70  46         mov   *r0+,*r1+
0082 2B3E 0281  22         ci    r1,>8400
     2B40 8400     
0083 2B42 11FB  14         jlt   cpu.scrpad.restore.copy
0084                       ;------------------------------------------------------
0085                       ; Exit
0086                       ;------------------------------------------------------
0087               cpu.scrpad.restore.exit:
0088 2B44 045B  20         b     *r11                  ; Return to caller
                   < runlib.asm
0226                       copy  "cpu_scrpad_paging.asm"    ; Scratchpad memory paging
     **** ****     > cpu_scrpad_paging.asm
0001               * FILE......: cpu_scrpad_paging.asm
0002               * Purpose...: CPU memory paging functions
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                     CPU memory paging
0006               *//////////////////////////////////////////////////////////////
0007               
0008               
0009               ***************************************************************
0010               * cpu.scrpad.pgout - Page out 256 bytes of scratchpad at >8300
0011               *                    to CPU memory destination P0 (tmp1)
0012               *                    and replace with 256 bytes of memory from
0013               *                    predefined destination @cpu.scrpad.target
0014               ***************************************************************
0015               *  bl   @cpu.scrpad.pgout
0016               *       DATA p0
0017               *
0018               *  P0 = CPU memory destination
0019               *--------------------------------------------------------------
0020               *  bl   @xcpu.scrpad.pgout
0021               *  tmp1 = CPU memory destination
0022               *--------------------------------------------------------------
0023               *  Register usage
0024               *  tmp3      = Copy of CPU memory destination
0025               *  tmp0-tmp2 = Used as temporary registers
0026               *  @waux1    = Copy of r5 (tmp1)
0027               *--------------------------------------------------------------
0028               *  Remarks
0029               *  Copies 256 bytes from scratchpad to CPU memory destination
0030               *  specified in P0 (tmp1).
0031               *
0032               *  Then switches to the newly copied workspace in P0 (tmp1).
0033               *
0034               *  Finally it copies 256 bytes from @cpu.scrpad.tgt
0035               *  to scratchpad >8300 and activates workspace at >8300
0036               ********|*****|*********************|**************************
0037               cpu.scrpad.pgout:
0038 2B46 C15B  26         mov   *r11,tmp1             ; tmp1 = Memory target address
0039                       ;------------------------------------------------------
0040                       ; Copy registers r0-r7
0041                       ;------------------------------------------------------
0042 2B48 CD40  34         mov   r0,*tmp1+             ; Backup r0
0043 2B4A CD41  34         mov   r1,*tmp1+             ; Backup r1
0044 2B4C CD42  34         mov   r2,*tmp1+             ; Backup r2
0045 2B4E CD43  34         mov   r3,*tmp1+             ; Backup r3
0046 2B50 CD44  34         mov   r4,*tmp1+             ; Backup r4
0047 2B52 CD45  34         mov   r5,*tmp1+             ; Backup r5 (is tmp1, so is bogus)
0048 2B54 CD46  34         mov   r6,*tmp1+             ; Backup r6
0049 2B56 CD47  34         mov   r7,*tmp1+             ; Backup r7
0050                       ;------------------------------------------------------
0051                       ; Copy scratchpad memory to destination
0052                       ;------------------------------------------------------
0053               xcpu.scrpad.pgout:
0054 2B58 0204  20         li    tmp0,>8310            ; tmp0 = Memory source address
     2B5A 8310     
0055                                                   ;        as of register r8
0056 2B5C 0206  20         li    tmp2,15               ; tmp2 = 15 iterations
     2B5E 000F     
0057                       ;------------------------------------------------------
0058                       ; Copy memory
0059                       ;------------------------------------------------------
0060 2B60 CD74  46 !       mov   *tmp0+,*tmp1+         ; Copy word 1
0061 2B62 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 2
0062 2B64 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 3
0063 2B66 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 4
0064 2B68 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 5
0065 2B6A CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 6
0066 2B6C CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 7
0067 2B6E CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 8
0068 2B70 0606  14         dec   tmp2
0069 2B72 16F6  14         jne   -!                    ; Loop until done
0070                       ;------------------------------------------------------
0071                       ; Switch to newly copied workspace
0072                       ;------------------------------------------------------
0073 2B74 C37B  30         mov   *r11+,r13             ; R13=WP   (pop tmp1 from stack)
0074 2B76 020E  20         li    r14,cpu.scrpad.pgout.after.rtwp
     2B78 2B7E     
0075                                                   ; R14=PC
0076 2B7A 04CF  14         clr   r15                   ; R15=STATUS
0077                       ;------------------------------------------------------
0078                       ; If we get here, WS was copied to specified
0079                       ; destination.  Also contents of r13,r14,r15
0080                       ; are about to be overwritten by rtwp instruction.
0081                       ;------------------------------------------------------
0082 2B7C 0380  18         rtwp                        ; Activate copied workspace
0083                                                   ; in non-scratchpad memory!
0084               
0085               cpu.scrpad.pgout.after.rtwp:
0086 2B7E 0460  28         b     @cpu.scrpad.restore   ; Restore scratchpad memory
     2B80 2B32     
0087                                                   ; from @cpu.scrpad.tgt to @>8300
0088                                                   ; and switch workspace to >8300.
0089                       ;------------------------------------------------------
0090                       ; Exit
0091                       ;------------------------------------------------------
0092               cpu.scrpad.pgout.exit:
0093 2B82 045B  20         b     *r11                  ; Return to caller
0094               
0095               
0096               ***************************************************************
0097               * cpu.scrpad.pgin - Page in 256 bytes of scratchpad memory
0098               *                   at >8300 from CPU memory specified in
0099               *                   p0 (tmp0)
0100               ***************************************************************
0101               *  bl   @cpu.scrpad.pgin
0102               *       DATA p0
0103               *
0104               *  P0 = CPU memory source
0105               *--------------------------------------------------------------
0106               *  bl   @memx.scrpad.pgin
0107               *  TMP0 = CPU memory source
0108               *--------------------------------------------------------------
0109               *  Register usage
0110               *  tmp0-tmp2 = Used as temporary registers
0111               *--------------------------------------------------------------
0112               *  Remarks
0113               *  Copies 256 bytes from CPU memory source to scratchpad >8300
0114               *  and activates workspace in scratchpad >8300
0115               *
0116               *  It's expected that the workspace is outside scratchpad >8300
0117               *  when calling this function.
0118               ********|*****|*********************|**************************
0119               cpu.scrpad.pgin:
0120 2B84 C13B  30         mov   *r11+,tmp0            ; tmp0 = Memory source address
0121                       ;------------------------------------------------------
0122                       ; Copy scratchpad memory to destination
0123                       ;------------------------------------------------------
0124               xcpu.scrpad.pgin:
0125 2B86 0205  20         li    tmp1,>8300            ; tmp1 = Memory destination address
     2B88 8300     
0126 2B8A 0206  20         li    tmp2,16               ; tmp2 = 256/16
     2B8C 0010     
0127                       ;------------------------------------------------------
0128                       ; Copy memory
0129                       ;------------------------------------------------------
0130 2B8E CD74  46 !       mov   *tmp0+,*tmp1+         ; Copy word 1
0131 2B90 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 2
0132 2B92 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 3
0133 2B94 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 4
0134 2B96 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 5
0135 2B98 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 6
0136 2B9A CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 7
0137 2B9C CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 8
0138 2B9E 0606  14         dec   tmp2
0139 2BA0 16F6  14         jne   -!                    ; Loop until done
0140                       ;------------------------------------------------------
0141                       ; Switch workspace to scratchpad memory
0142                       ;------------------------------------------------------
0143 2BA2 02E0  18         lwpi  >8300                 ; Activate copied workspace
     2BA4 8300     
0144                       ;------------------------------------------------------
0145                       ; Exit
0146                       ;------------------------------------------------------
0147               cpu.scrpad.pgin.exit:
0148 2BA6 045B  20         b     *r11                  ; Return to caller
                   < runlib.asm
0228               
0230                       copy  "fio.equ"                  ; File I/O equates
     **** ****     > fio.equ
0001               * FILE......: fio.equ
0002               * Purpose...: Equates for file I/O operations
0003               
0004               ***************************************************************
0005               * File IO operations - Byte 0 in PAB
0006               ************************************@**************************
0007      0000     io.op.open       equ >00            ; OPEN
0008      0001     io.op.close      equ >01            ; CLOSE
0009      0002     io.op.read       equ >02            ; READ
0010      0003     io.op.write      equ >03            ; WRITE
0011      0004     io.op.rewind     equ >04            ; RESTORE/REWIND
0012      0005     io.op.load       equ >05            ; LOAD
0013      0006     io.op.save       equ >06            ; SAVE
0014      0007     io.op.delfile    equ >07            ; DELETE FILE
0015      0008     io.op.scratch    equ >08            ; SCRATCH
0016      0009     io.op.status     equ >09            ; STATUS
0017               ***************************************************************
0018               * File & data type - Byte 1 in PAB (Bit 0-4)
0019               ***************************************************************
0020               * Bit position: 4  3  21  0
0021               *               |  |  ||   \
0022               *               |  |  ||    File type
0023               *               |  |  ||    0 = INTERNAL
0024               *               |  |  ||    1 = FIXED
0025               *               |  |  \\
0026               *               |  |   File operation
0027               *               |  |   00 - UPDATE
0028               *               |  |   01 - OUTPUT
0029               *               |  |   10 - INPUT
0030               *               |  |   11 - APPEND
0031               *               |  |
0032               *               |  \
0033               *               |   Data type
0034               *               |   0 = DISPLAY
0035               *               |   1 = INTERNAL
0036               *               |
0037               *               \
0038               *                Record type
0039               *                0 = FIXED
0040               *                1 = VARIABLE
0041               ***************************************************************
0042               ; Bit position           43210
0043               ************************************|**************************
0044      0000     io.seq.upd.dis.fix  equ :00000      ; 00
0045      0001     io.rel.upd.dis.fix  equ :00001      ; 01
0046      0003     io.rel.out.dis.fix  equ :00011      ; 02
0047      0002     io.seq.out.dis.fix  equ :00010      ; 03
0048      0004     io.seq.inp.dis.fix  equ :00100      ; 04
0049      0005     io.rel.inp.dis.fix  equ :00101      ; 05
0050      0006     io.seq.app.dis.fix  equ :00110      ; 06
0051      0007     io.rel.app.dis.fix  equ :00111      ; 07
0052      0008     io.seq.upd.int.fix  equ :01000      ; 08
0053      0009     io.rel.upd.int.fix  equ :01001      ; 09
0054      000A     io.seq.out.int.fix  equ :01010      ; 0A
0055      000B     io.rel.out.int.fix  equ :01011      ; 0B
0056      000C     io.seq.inp.int.fix  equ :01100      ; 0C
0057      000D     io.rel.inp.int.fix  equ :01101      ; 0D
0058      000E     io.seq.app.int.fix  equ :01110      ; 0E
0059      000F     io.rel.app.int.fix  equ :01111      ; 0F
0060      0010     io.seq.upd.dis.var  equ :10000      ; 10
0061      0011     io.rel.upd.dis.var  equ :10001      ; 11
0062      0012     io.seq.out.dis.var  equ :10010      ; 12
0063      0013     io.rel.out.dis.var  equ :10011      ; 13
0064      0014     io.seq.inp.dis.var  equ :10100      ; 14
0065      0015     io.rel.inp.dis.var  equ :10101      ; 15
0066      0016     io.seq.app.dis.var  equ :10110      ; 16
0067      0017     io.rel.app.dis.var  equ :10111      ; 17
0068      0018     io.seq.upd.int.var  equ :11000      ; 18
0069      0019     io.rel.upd.int.var  equ :11001      ; 19
0070      001A     io.seq.out.int.var  equ :11010      ; 1A
0071      001B     io.rel.out.int.var  equ :11011      ; 1B
0072      001C     io.seq.inp.int.var  equ :11100      ; 1C
0073      001D     io.rel.inp.int.var  equ :11101      ; 1D
0074      001E     io.seq.app.int.var  equ :11110      ; 1E
0075      001F     io.rel.app.int.var  equ :11111      ; 1F
0076               ***************************************************************
0077               * File error codes - Byte 1 in PAB (Bits 5-7)
0078               ************************************|**************************
0079      0000     io.err.no_error_occured             equ 0
0080                       ; Error code 0 with condition bit reset, indicates that
0081                       ; no error has occured
0082               
0083      0000     io.err.bad_device_name              equ 0
0084                       ; Device indicated not in system
0085                       ; Error code 0 with condition bit set, indicates a
0086                       ; device not present in system
0087               
0088      0001     io.err.device_write_prottected      equ 1
0089                       ; Device is write protected
0090               
0091      0002     io.err.bad_open_attribute           equ 2
0092                       ; One or more of the OPEN attributes are illegal or do
0093                       ; not match the file's actual characteristics.
0094                       ; This could be:
0095                       ;   * File type
0096                       ;   * Record length
0097                       ;   * I/O mode
0098                       ;   * File organization
0099               
0100      0003     io.err.illegal_operation            equ 3
0101                       ; Either an issued I/O command was not supported, or a
0102                       ; conflict with the OPEN mode has occured
0103               
0104      0004     io.err.out_of_table_buffer_space    equ 4
0105                       ; The amount of space left on the device is insufficient
0106                       ; for the requested operation
0107               
0108      0005     io.err.eof                          equ 5
0109                       ; Attempt to read past end of file.
0110                       ; This error may also be given for non-existing records
0111                       ; in a relative record file
0112               
0113      0006     io.err.device_error                 equ 6
0114                       ; Covers all hard device errors, such as parity and
0115                       ; bad medium errors
0116               
0117      0007     io.err.file_error                   equ 7
0118                       ; Covers all file-related error like: program/data
0119                       ; file mismatch, non-existing file opened for input mode, etc.
                   < runlib.asm
0231                       copy  "fio_dsrlnk.asm"           ; DSRLNK for peripheral communication
     **** ****     > fio_dsrlnk.asm
0001               * FILE......: fio_dsrlnk.asm
0002               * Purpose...: Custom DSRLNK implementation
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                          DSRLNK
0006               *//////////////////////////////////////////////////////////////
0007               
0008               
0009               ***************************************************************
0010               * dsrlnk - DSRLNK for file I/O in DSR space >1000 - >1F00
0011               ***************************************************************
0012               *  blwp @dsrlnk
0013               *  data p0
0014               *--------------------------------------------------------------
0015               *  Input:
0016               *  P0     = 8 or 10 (a)
0017               *  @>8356 = Pointer to VDP PAB file descriptor length (PAB+9)
0018               *--------------------------------------------------------------
0019               *  Output:
0020               *  r0 LSB = Bits 13-15 from VDP PAB byte 1, right aligned
0021               *--------------------------------------------------------------
0022               *  Remarks:
0023               *
0024               *  You need to specify following equates in main program
0025               *
0026               *  dsrlnk.dsrlws      equ >????     ; Address of dsrlnk workspace
0027               *  dsrlnk.namsto      equ >????     ; 8-byte RAM buffer for storing device name
0028               *
0029               *  Scratchpad memory usage
0030               *  >8322            Parameter (>08) or (>0A) passed to dsrlnk
0031               *  >8356            Pointer to PAB
0032               *  >83D0            CRU address of current device
0033               *  >83D2            DSR entry address
0034               *  >83e0 - >83ff    GPL / DSRLNK workspace
0035               *
0036               *  Credits
0037               *  Originally appeared in Miller Graphics The Smart Programmer.
0038               *  This version based on version of Paolo Bagnaresi.
0039               *
0040               *  The following memory address can be used to directly jump
0041               *  into the DSR in consequtive calls without having to
0042               *  scan the PEB cards again:
0043               *
0044               *  dsrlnk.namsto  -  8-byte RAM buf for holding device name
0045               *  dsrlnk.savcru  -  CRU address of device in prev. DSR call
0046               *  dsrlnk.savent  -  DSR entry addr of prev. DSR call
0047               *  dsrlnk.savpab  -  Pointer to Device or Subprogram in PAB
0048               *  dsrlnk.savver  -  Version used in prev. DSR call
0049               *  dsrlnk.savlen  -  Length of DSR name of prev. DSR call (in MSB)
0050               *  dsrlnk.flgptr  -  Pointer to VDP PAB byte 1 (flag byte)
0051               
0052               *--------------------------------------------------------------
0053      A40A     dsrlnk.dstype equ   dsrlnk.dsrlws + 10
0054                                                   ; dstype is address of R5 of DSRLNK ws.
0055               ********|*****|*********************|**************************
0056 2BA8 A400     dsrlnk  data  dsrlnk.dsrlws         ; dsrlnk workspace
0057 2BAA 2BAC             data  dsrlnk.init           ; Entry point
0058                       ;------------------------------------------------------
0059                       ; DSRLNK entry point
0060                       ;------------------------------------------------------
0061               dsrlnk.init:
0062 2BAC C17E  30         mov   *r14+,r5              ; Get pgm type for link
0063 2BAE C805  38         mov   r5,@dsrlnk.sav8a      ; Save data following blwp @dsrlnk (8 or >a)
     2BB0 A428     
0064 2BB2 53E0  34         szcb  @hb$20,r15            ; Reset equal bit in status register
     2BB4 201C     
0065 2BB6 C020  30         mov   @>8356,r0             ; Get pointer to PAB+9 in VDP
     2BB8 8356     
0066 2BBA C240  18         mov   r0,r9                 ; Save pointer
0067                       ;------------------------------------------------------
0068                       ; Fetch file descriptor length from PAB
0069                       ;------------------------------------------------------
0070 2BBC 0229  22         ai    r9,>fff8              ; Adjust r9 to addr PAB byte 1
     2BBE FFF8     
0071                                                   ; FLAG byte->(pabaddr+9)-8
0072 2BC0 C809  38         mov   r9,@dsrlnk.flgptr     ; Save pointer to PAB byte 1
     2BC2 A434     
0073                       ;---------------------------; Inline VSBR start
0074 2BC4 06C0  14         swpb  r0                    ;
0075 2BC6 D800  30         movb  r0,@vdpa              ; Send low byte
     2BC8 8C02     
0076 2BCA 06C0  14         swpb  r0                    ;
0077 2BCC D800  30         movb  r0,@vdpa              ; Send high byte
     2BCE 8C02     
0078 2BD0 D0E0  30         movb  @vdpr,r3              ; Read byte from VDP RAM
     2BD2 8800     
0079                       ;---------------------------; Inline VSBR end
0080 2BD4 0983  32         srl   r3,8                  ; Move to low byte
0081               
0082                       ;------------------------------------------------------
0083                       ; Fetch file descriptor device name from PAB
0084                       ;------------------------------------------------------
0085 2BD6 0704  14         seto  r4                    ; Init counter
0086 2BD8 0202  20         li    r2,dsrlnk.namsto      ; Point to 8-byte CPU buffer
     2BDA A420     
0087 2BDC 0580  14 !       inc   r0                    ; Point to next char of name
0088 2BDE 0584  14         inc   r4                    ; Increment char counter
0089 2BE0 0284  22         ci    r4,>0007              ; Check if length more than 7 chars
     2BE2 0007     
0090 2BE4 1573  14         jgt   dsrlnk.error.devicename_invalid
0091                                                   ; Yes, error
0092 2BE6 80C4  18         c     r4,r3                 ; End of name?
0093 2BE8 130C  14         jeq   dsrlnk.device_name.get_length
0094                                                   ; Yes
0095               
0096                       ;---------------------------; Inline VSBR start
0097 2BEA 06C0  14         swpb  r0                    ;
0098 2BEC D800  30         movb  r0,@vdpa              ; Send low byte
     2BEE 8C02     
0099 2BF0 06C0  14         swpb  r0                    ;
0100 2BF2 D800  30         movb  r0,@vdpa              ; Send high byte
     2BF4 8C02     
0101 2BF6 D060  30         movb  @vdpr,r1              ; Read byte from VDP RAM
     2BF8 8800     
0102                       ;---------------------------; Inline VSBR end
0103               
0104                       ;------------------------------------------------------
0105                       ; Look for end of device name, for example "DSK1."
0106                       ;------------------------------------------------------
0107 2BFA DC81  32         movb  r1,*r2+               ; Move into buffer
0108 2BFC 9801  34         cb    r1,@dsrlnk.period     ; Is character a '.'
     2BFE 2D18     
0109 2C00 16ED  14         jne   -!                    ; No, loop next char
0110                       ;------------------------------------------------------
0111                       ; Determine device name length
0112                       ;------------------------------------------------------
0113               dsrlnk.device_name.get_length:
0114 2C02 C104  18         mov   r4,r4                 ; Check if length = 0
0115 2C04 1363  14         jeq   dsrlnk.error.devicename_invalid
0116                                                   ; Yes, error
0117 2C06 04E0  26         clr   @>83d0
     2C08 83D0     
0118 2C0A C804  30         mov   r4,@>8354             ; Save name length for search (length
     2C0C 8354     
0119                                                   ; goes to >8355 but overwrites >8354!)
0120 2C0E C804  38         mov   r4,@dsrlnk.savlen     ; Save name length for nextr dsrlnk call
     2C10 A432     
0121               
0122 2C12 0584  14         inc   r4                    ; Adjust for dot
0123 2C14 A804  30         a     r4,@>8356             ; Point to position after name
     2C16 8356     
0124 2C18 C820  50         mov   @>8356,@dsrlnk.savpab ; Save pointer for next dsrlnk call
     2C1A 8356     
     2C1C A42E     
0125                       ;------------------------------------------------------
0126                       ; Prepare for DSR scan >1000 - >1f00
0127                       ;------------------------------------------------------
0128               dsrlnk.dsrscan.start:
0129 2C1E 02E0  18         lwpi  >83e0                 ; Use GPL WS
     2C20 83E0     
0130 2C22 04C1  14         clr   r1                    ; Version found of dsr
0131 2C24 020C  20         li    r12,>0f00             ; Init cru address
     2C26 0F00     
0132                       ;------------------------------------------------------
0133                       ; Turn off ROM on current card
0134                       ;------------------------------------------------------
0135               dsrlnk.dsrscan.cardoff:
0136 2C28 C30C  18         mov   r12,r12               ; Anything to turn off?
0137 2C2A 1301  14         jeq   dsrlnk.dsrscan.cardloop
0138                                                   ; No, loop over cards
0139 2C2C 1E00  16         sbz   0                     ; Yes, turn off
0140                       ;------------------------------------------------------
0141                       ; Loop over cards and look if DSR present
0142                       ;------------------------------------------------------
0143               dsrlnk.dsrscan.cardloop:
0144 2C2E 022C  22         ai    r12,>0100             ; Next ROM to turn on
     2C30 0100     
0145 2C32 04E0  26         clr   @>83d0                ; Clear in case we are done
     2C34 83D0     
0146 2C36 028C  22         ci    r12,>2000             ; Card scan complete? (>1000 to >1F00)
     2C38 2000     
0147 2C3A 1346  14         jeq   dsrlnk.error.nodsr_found
0148                                                   ; Yes, no matching DSR found
0149 2C3C C80C  30         mov   r12,@>83d0            ; Save address of next cru
     2C3E 83D0     
0150                       ;------------------------------------------------------
0151                       ; Look at card ROM (@>4000 eq 'AA' ?)
0152                       ;------------------------------------------------------
0153 2C40 1D00  16         sbo   0                     ; Turn on ROM
0154 2C42 0202  20         li    r2,>4000              ; Start at beginning of ROM
     2C44 4000     
0155 2C46 9812  42         cb    *r2,@dsrlnk.$aa00     ; Check for a valid DSR header
     2C48 2D14     
0156 2C4A 16EE  14         jne   dsrlnk.dsrscan.cardoff
0157                                                   ; No ROM found on card
0158                       ;------------------------------------------------------
0159                       ; Valid DSR ROM found. Now loop over chain/subprograms
0160                       ;------------------------------------------------------
0161                       ; dstype is the address of R5 of the DSRLNK workspace,
0162                       ; which is where 8 for a DSR or 10 (>A) for a subprogram
0163                       ; is stored before the DSR ROM is searched.
0164                       ;------------------------------------------------------
0165 2C4C A0A0  34         a     @dsrlnk.dstype,r2     ; Goto first pointer (byte 8 or 10)
     2C4E A40A     
0166 2C50 1003  14         jmp   dsrlnk.dsrscan.getentry
0167                       ;------------------------------------------------------
0168                       ; Next DSR entry
0169                       ;------------------------------------------------------
0170               dsrlnk.dsrscan.nextentry:
0171 2C52 C0A0  30         mov   @>83d2,r2             ; Offset 0 > Fetch link to next DSR or
     2C54 83D2     
0172                                                   ; subprogram
0173               
0174 2C56 1D00  16         sbo   0                     ; Turn ROM back on
0175                       ;------------------------------------------------------
0176                       ; Get DSR entry
0177                       ;------------------------------------------------------
0178               dsrlnk.dsrscan.getentry:
0179 2C58 C092  26         mov   *r2,r2                ; Is address a zero? (end of chain?)
0180 2C5A 13E6  14         jeq   dsrlnk.dsrscan.cardoff
0181                                                   ; Yes, no more DSRs or programs to check
0182 2C5C C802  30         mov   r2,@>83d2             ; Offset 0 > Store link to next DSR or
     2C5E 83D2     
0183                                                   ; subprogram
0184               
0185 2C60 05C2  14         inct  r2                    ; Offset 2 > Has call address of current
0186                                                   ; DSR/subprogram code
0187               
0188 2C62 C272  30         mov   *r2+,r9               ; Store call address in r9. Move r2 to
0189                                                   ; offset 4 (DSR/subprogram name)
0190                       ;------------------------------------------------------
0191                       ; Check file descriptor in DSR
0192                       ;------------------------------------------------------
0193 2C64 04C5  14         clr   r5                    ; Remove any old stuff
0194 2C66 D160  30         movb  @>8355,r5             ; Get length as counter
     2C68 8355     
0195 2C6A 1309  14         jeq   dsrlnk.dsrscan.call_dsr
0196                                                   ; If zero, do not further check, call DSR
0197                                                   ; program
0198               
0199 2C6C 9C85  28         cb    r5,*r2+               ; See if length matches
0200 2C6E 16F1  14         jne   dsrlnk.dsrscan.nextentry
0201                                                   ; No, length does not match.
0202                                                   ; Go process next DSR entry
0203               
0204 2C70 0985  32         srl   r5,8                  ; Yes, move to low byte
0205 2C72 0206  20         li    r6,dsrlnk.namsto      ; Point to 8-byte CPU buffer
     2C74 A420     
0206 2C76 9CB6  38 !       cb    *r6+,*r2+             ; Compare byte in CPU buffer with byte in
0207                                                   ; DSR ROM
0208 2C78 16EC  14         jne   dsrlnk.dsrscan.nextentry
0209                                                   ; Try next DSR entry if no match
0210 2C7A 0605  14         dec   r5                    ; Update loop counter
0211 2C7C 16FC  14         jne   -!                    ; Loop until full length checked
0212                       ;------------------------------------------------------
0213                       ; Call DSR program in card/device
0214                       ;------------------------------------------------------
0215               dsrlnk.dsrscan.call_dsr:
0216 2C7E 0581  14         inc   r1                    ; Next version found
0217 2C80 C80C  38         mov   r12,@dsrlnk.savcru    ; Save CRU address
     2C82 A42A     
0218 2C84 C809  38         mov   r9,@dsrlnk.savent     ; Save DSR entry address
     2C86 A42C     
0219 2C88 C801  38         mov   r1,@dsrlnk.savver     ; Save DSR Version number
     2C8A A430     
0220               
0221 2C8C 020D  20         li    r13,>9800             ; Set GROM base to >9800 to prevent
     2C8E 9800     
0222                                                   ; lockup of TI Disk Controller DSR.
0223               
0224 2C90 020F  20         li    r15,>8C02             ; Set VDP port address, needed to prevent
     2C92 8C02     
0225                                                   ; lockup of TI Disk Controller DSR.
0226               
0227 2C94 0699  24         bl    *r9                   ; Execute DSR
0228                       ;
0229                       ; Depending on IO result the DSR in card ROM does RET
0230                       ; or (INCT R11 + RET), meaning either (1) or (2) get executed.
0231                       ;
0232 2C96 10DD  14         jmp   dsrlnk.dsrscan.nextentry
0233                                                   ; (1) error return
0234 2C98 1E00  16         sbz   0                     ; (2) turn off card/device if good return
0235 2C9A 02E0  18         lwpi  dsrlnk.dsrlws         ; (2) restore workspace
     2C9C A400     
0236 2C9E C009  30         mov   r9,r0                 ; Point to flag byte (PAB+1) in VDP PAB
0237                       ;------------------------------------------------------
0238                       ; Returned from DSR
0239                       ;------------------------------------------------------
0240               dsrlnk.dsrscan.return_dsr:
0241 2CA0 C060  42         mov   @dsrlnk.sav8a,r1      ; get back data following blwp @dsrlnk
     2CA2 A428     
0242                                                   ; (8 or >a)
0243 2CA4 0281  26         ci    r1,8                  ; was it 8?
     2CA6 0008     
0244 2CA8 1303  14         jeq   dsrlnk.dsrscan.dsr.8  ; yes, jump: normal dsrlnk
0245 2CAA D060  38         movb  @>8350,r1             ; no, we have a data >a.
     2CAC 8350     
0246                                                   ; Get error byte from @>8350
0247 2CAE 1008  14         jmp   dsrlnk.dsrscan.dsr.a  ; go and return error byte to the caller
0248               
0249                       ;------------------------------------------------------
0250                       ; Read VDP PAB byte 1 after DSR call completed (status)
0251                       ;------------------------------------------------------
0252               dsrlnk.dsrscan.dsr.8:
0253                       ;---------------------------; Inline VSBR start
0254 2CB0 06C0  22         swpb  r0                    ;
0255 2CB2 D800  34         movb  r0,@vdpa              ; send low byte
     2CB4 8C02     
0256 2CB6 06C0  22         swpb  r0                    ;
0257 2CB8 D800  34         movb  r0,@vdpa              ; send high byte
     2CBA 8C02     
0258 2CBC D060  38         movb  @vdpr,r1              ; read byte from VDP ram
     2CBE 8800     
0259                       ;---------------------------; Inline VSBR end
0260               
0261                       ;------------------------------------------------------
0262                       ; Return DSR error to caller
0263                       ;------------------------------------------------------
0264               dsrlnk.dsrscan.dsr.a:
0265 2CC0 09D1  50         srl   r1,13                 ; just keep error bits
0266 2CC2 1605  14         jne   dsrlnk.error.io_error
0267                                                   ; handle IO error
0268 2CC4 0380  30         rtwp                        ; Return from DSR workspace to caller
0269                                                   ; workspace
0270               
0271                       ;------------------------------------------------------
0272                       ; IO-error handler
0273                       ;------------------------------------------------------
0274               dsrlnk.error.nodsr_found_off:
0275 2CC6 1E00  20         sbz   >00                   ; Turn card off, nomatter what
0276               dsrlnk.error.nodsr_found:
0277 2CC8 02E0  18         lwpi  dsrlnk.dsrlws         ; No DSR found, restore workspace
     2CCA A400     
0278               dsrlnk.error.devicename_invalid:
0279 2CCC 04C1  22         clr   r1                    ; clear flag for error 0 = bad device name
0280               dsrlnk.error.io_error:
0281 2CCE 06C1  22         swpb  r1                    ; put error in hi byte
0282 2CD0 D741  38         movb  r1,*r13               ; store error flags in callers r0
0283 2CD2 F3E0  42         socb  @hb$20,r15            ; \ Set equal bit in copy of status register
     2CD4 201C     
0284                                                   ; / to indicate error
0285 2CD6 0380  30         rtwp                        ; Return from DSR workspace to caller
0286                                                   ; workspace
0287               
0288               
0289               ***************************************************************
0290               * dsrln.reuse - Reuse previous DSRLNK call for improved speed
0291               ***************************************************************
0292               *  blwp @dsrlnk.reuse
0293               *--------------------------------------------------------------
0294               *  Input:
0295               *  @>8356         = Pointer to VDP PAB file descriptor length byte (PAB+9)
0296               *  @dsrlnk.savcru = CRU address of device in previous DSR call
0297               *  @dsrlnk.savent = DSR entry address of previous DSR call
0298               *  @dsrlnk.savver = Version used in previous DSR call
0299               *  @dsrlnk.pabptr = Pointer to PAB in VDP memory, set in previous DSR call
0300               *--------------------------------------------------------------
0301               *  Output:
0302               *  r0 LSB = Bits 13-15 from VDP PAB byte 1, right aligned
0303               *--------------------------------------------------------------
0304               *  Remarks:
0305               *   Call the same DSR entry again without having to scan through
0306               *   all devices again.
0307               *
0308               *   Expects dsrlnk.savver, @dsrlnk.savent, @dsrlnk.savcru to be
0309               *   set by previous DSRLNK call.
0310               ********|*****|*********************|**************************
0311               dsrlnk.reuse:
0312 2CD8 A400             data  dsrlnk.dsrlws         ; dsrlnk workspace
0313 2CDA 2CDC             data  dsrlnk.reuse.init     ; entry point
0314                       ;------------------------------------------------------
0315                       ; DSRLNK entry point
0316                       ;------------------------------------------------------
0317               dsrlnk.reuse.init:
0318 2CDC 02E0  18         lwpi  >83e0                 ; Use GPL WS
     2CDE 83E0     
0319               
0320 2CE0 53E0  34         szcb  @hb$20,r15            ; reset equal bit in status register
     2CE2 201C     
0321                       ;------------------------------------------------------
0322                       ; Restore dsrlnk variables of previous DSR call
0323                       ;------------------------------------------------------
0324 2CE4 020B  20         li    r11,dsrlnk.savcru     ; Get pointer to last used CRU
     2CE6 A42A     
0325 2CE8 C33B  30         mov   *r11+,r12             ; Get CRU address         < @dsrlnk.savcru
0326 2CEA C27B  30         mov   *r11+,r9              ; Get DSR entry address   < @dsrlnk.savent
0327 2CEC C83B  42         mov   *r11+,@>8356          ; \ Get pointer to Device name or
     2CEE 8356     
0328                                                   ; / or subprogram in PAB  < @dsrlnk.savpab
0329 2CF0 C07B  30         mov   *r11+,R1              ; Get DSR Version number  < @dsrlnk.savver
0330 2CF2 C81B  38         mov   *r11,@>8354           ; Get device name length  < @dsrlnk.savlen
     2CF4 8354     
0331                       ;------------------------------------------------------
0332                       ; Call DSR program in card/device
0333                       ;------------------------------------------------------
0334 2CF6 020F  20         li    r15,>8C02             ; Set VDP port address, needed to prevent
     2CF8 8C02     
0335                                                   ; lockup of TI Disk Controller DSR.
0336               
0337 2CFA 1D00  16         sbo   >00                   ; Open card/device ROM
0338               
0339 2CFC 9820  50         cb    @>4000,@dsrlnk.$aa00  ; Valid identifier found?
     2CFE 4000     
     2D00 2D14     
0340 2D02 16E2  14         jne   dsrlnk.error.nodsr_found
0341                                                   ; No, error code 0 = Bad Device name
0342                                                   ; The above jump may happen only in case of
0343                                                   ; either card hardware malfunction or if
0344                                                   ; there are 2 cards opened at the same time.
0345               
0346 2D04 0699  24         bl    *r9                   ; Execute DSR
0347                       ;
0348                       ; Depending on IO result the DSR in card ROM does RET
0349                       ; or (INCT R11 + RET), meaning either (1) or (2) get executed.
0350                       ;
0351 2D06 10DF  14         jmp   dsrlnk.error.nodsr_found_off
0352                                                   ; (1) error return
0353 2D08 1E00  16         sbz   >00                   ; (2) turn off card ROM if good return
0354                       ;------------------------------------------------------
0355                       ; Now check if any DSR error occured
0356                       ;------------------------------------------------------
0357 2D0A 02E0  18         lwpi  dsrlnk.dsrlws         ; Restore workspace
     2D0C A400     
0358 2D0E C020  42         mov   @dsrlnk.flgptr,r0     ; Get pointer to VDP PAB byte 1
     2D10 A434     
0359               
0360 2D12 10C6  14         jmp   dsrlnk.dsrscan.return_dsr
0361                                                   ; Rest is the same as with normal DSRLNK
0362               
0363               
0364               ********************************************************************************
0365               
0366 2D14 AA00     dsrlnk.$aa00      data   >aa00      ; Used for identifying DSR header
0367 2D16 0008     dsrlnk.$0008      data   >0008      ; 8 is the data that usually follows
0368                                                   ; a @blwp @dsrlnk
0369 2D18 2E       dsrlnk.period     text  '.'         ; For finding end of device name
0370               
0371                       even
                   < runlib.asm
0232                       copy  "fio_level3.asm"           ; File I/O level 3 support
     **** ****     > fio_level3.asm
0001               * FILE......: fio_level3.asm
0002               * Purpose...: File I/O level 3 support
0003               
0004               
0005               ***************************************************************
0006               * PAB  - Peripheral Access Block
0007               ********|*****|*********************|**************************
0008               ; my_pab:
0009               ;       byte  io.op.open            ;  0    - OPEN
0010               ;       byte  io.seq.inp.dis.var    ;  1    - INPUT, VARIABLE, DISPLAY
0011               ;                                   ;         Bit 13-15 used by DSR for returning
0012               ;                                   ;         file error details to DSRLNK
0013               ;       data  vrecbuf               ;  2-3  - Record buffer in VDP memory
0014               ;       byte  80                    ;  4    - Record length (80 characters maximum)
0015               ;       byte  0                     ;  5    - Character count (bytes read)
0016               ;       data  >0000                 ;  6-7  - Seek record (only for fixed records)
0017               ;       byte  >00                   ;  8    - Screen offset (cassette DSR only)
0018               ; -------------------------------------------------------------
0019               ;       byte  11                    ;  9    - File descriptor length
0020               ;       text 'DSK1.MYFILE'          ; 10-.. - File descriptor name (Device + '.' + File name)
0021               ;       even
0022               ***************************************************************
0023               
0024               
0025               ***************************************************************
0026               * file.open - Open File for procesing
0027               ***************************************************************
0028               *  bl   @file.open
0029               *       data P0,P1
0030               *--------------------------------------------------------------
0031               *  P0 = Address of PAB in VDP RAM
0032               *  P1 = LSB contains File type/mode
0033               *--------------------------------------------------------------
0034               *  bl   @xfile.open
0035               *
0036               *  R0 = Address of PAB in VDP RAM
0037               *  R1 = LSB contains File type/mode
0038               *--------------------------------------------------------------
0039               *  Output:
0040               *  tmp0     = Copy of VDP PAB byte 1 after operation
0041               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0042               *  tmp2 LSB = Copy of status register after operation
0043               ********|*****|*********************|**************************
0044               file.open:
0045 2D1A C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0046 2D1C C07B  46         mov   *r11+,r1              ; Get file type/mode
0047               *--------------------------------------------------------------
0048               * Initialisation
0049               *--------------------------------------------------------------
0050               xfile.open:
0051 2D1E 0649  22         dect  stack
0052 2D20 C64B  38         mov   r11,*stack            ; Save return address
0053                       ;------------------------------------------------------
0054                       ; Initialisation
0055                       ;------------------------------------------------------
0056 2D22 0204  24         li    tmp0,dsrlnk.savcru
     2D24 A42A     
0057 2D26 04F4  38         clr   *tmp0+                ; Clear @dsrlnk.savcru
0058 2D28 04F4  38         clr   *tmp0+                ; Clear @dsrlnk.savent
0059 2D2A 04F4  38         clr   *tmp0+                ; Clear @dsrlnk.savver
0060 2D2C 04D4  30         clr   *tmp0                 ; Clear @dsrlnk.pabflg
0061                       ;------------------------------------------------------
0062                       ; Set pointer to VDP disk buffer header
0063                       ;------------------------------------------------------
0064 2D2E 0205  24         li    tmp1,>37D7            ; \ VDP Disk buffer header
     2D30 37D7     
0065 2D32 C805  34         mov   tmp1,@>8370           ; | Pointer at Fixed scratchpad
     2D34 8370     
0066                                                   ; / location
0067 2D36 C801  42         mov   r1,@fh.filetype       ; Set file type/mode
     2D38 A44C     
0068 2D3A 04C5  22         clr   tmp1                  ; io.op.open
0069 2D3C 101F  14         jmp   _file.record.fop      ; Do file operation
0070               
0071               
0072               
0073               ***************************************************************
0074               * file.close - Close currently open file
0075               ***************************************************************
0076               *  bl   @file.close
0077               *       data P0
0078               *--------------------------------------------------------------
0079               *  P0 = Address of PAB in VDP RAM
0080               *--------------------------------------------------------------
0081               *  bl   @xfile.close
0082               *
0083               *  R0 = Address of PAB in VDP RAM
0084               *--------------------------------------------------------------
0085               *  Output:
0086               *  tmp0 LSB = Copy of VDP PAB byte 1 after operation
0087               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0088               *  tmp2 LSB = Copy of status register after operation
0089               ********|*****|*********************|**************************
0090               file.close:
0091 2D3E C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0092               *--------------------------------------------------------------
0093               * Initialisation
0094               *--------------------------------------------------------------
0095               xfile.close:
0096 2D40 0649  22         dect  stack
0097 2D42 C64B  38         mov   r11,*stack            ; Save return address
0098 2D44 0205  24         li    tmp1,io.op.close      ; io.op.close
     2D46 0001     
0099 2D48 1019  14         jmp   _file.record.fop      ; Do file operation
0100               
0101               
0102               ***************************************************************
0103               * file.record.read - Read record from file
0104               ***************************************************************
0105               *  bl   @file.record.read
0106               *       data P0
0107               *--------------------------------------------------------------
0108               *  P0 = Address of PAB in VDP RAM (without +9 offset!)
0109               *--------------------------------------------------------------
0110               *  bl   @xfile.record.read
0111               *
0112               *  R0 = Address of PAB in VDP RAM
0113               *--------------------------------------------------------------
0114               *  Output:
0115               *  tmp0     = Copy of VDP PAB byte 1 after operation
0116               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0117               *  tmp2 LSB = Copy of status register after operation
0118               ********|*****|*********************|**************************
0119               file.record.read:
0120 2D4A C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0121               *--------------------------------------------------------------
0122               * Initialisation
0123               *--------------------------------------------------------------
0124 2D4C 0649  22         dect  stack
0125 2D4E C64B  38         mov   r11,*stack            ; Save return address
0126               
0127 2D50 0205  24         li    tmp1,io.op.read       ; io.op.read
     2D52 0002     
0128 2D54 1013  14         jmp   _file.record.fop      ; Do file operation
0129               
0130               
0131               
0132               ***************************************************************
0133               * file.record.write - Write record to file
0134               ***************************************************************
0135               *  bl   @file.record.write
0136               *       data P0
0137               *--------------------------------------------------------------
0138               *  P0 = Address of PAB in VDP RAM (without +9 offset!)
0139               *--------------------------------------------------------------
0140               *  bl   @xfile.record.write
0141               *
0142               *  R0 = Address of PAB in VDP RAM
0143               *--------------------------------------------------------------
0144               *  Output:
0145               *  tmp0     = Copy of VDP PAB byte 1 after operation
0146               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0147               *  tmp2 LSB = Copy of status register after operation
0148               ********|*****|*********************|**************************
0149               file.record.write:
0150 2D56 C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0151               *--------------------------------------------------------------
0152               * Initialisation
0153               *--------------------------------------------------------------
0154 2D58 0649  22         dect  stack
0155 2D5A C64B  38         mov   r11,*stack            ; Save return address
0156               
0157 2D5C C100  30         mov   r0,tmp0               ; VDP write address (PAB byte 0)
0158 2D5E 0224  30         ai    tmp0,5                ; Position to PAB byte 5
     2D60 0005     
0159               
0160 2D62 C160  42         mov   @fh.reclen,tmp1       ; Get record length
     2D64 A43E     
0161               
0162 2D66 06A0  36         bl    @xvputb               ; Write character count to PAB
     2D68 22DA     
0163                                                   ; \ i  tmp0 = VDP target address
0164                                                   ; / i  tmp1 = Byte to write
0165               
0166 2D6A 0205  24         li    tmp1,io.op.write      ; io.op.write
     2D6C 0003     
0167 2D6E 1006  14         jmp   _file.record.fop      ; Do file operation
0168               
0169               
0170               
0171               file.record.seek:
0172 2D70 1000  14         nop
0173               
0174               
0175               file.image.load:
0176 2D72 1000  14         nop
0177               
0178               
0179               file.image.save:
0180 2D74 1000  14         nop
0181               
0182               
0183               file.delete:
0184 2D76 1000  14         nop
0185               
0186               
0187               file.rename:
0188 2D78 1000  14         nop
0189               
0190               
0191               file.status:
0192 2D7A 1000  14         nop
0193               
0194               
0195               
0196               ***************************************************************
0197               * _file.record.fop - File operation
0198               ***************************************************************
0199               * Called internally via JMP/B by file operations
0200               *--------------------------------------------------------------
0201               *  Input:
0202               *  r0   = Address of PAB in VDP RAM
0203               *  r1   = File type/mode
0204               *  tmp1 = File operation opcode
0205               *
0206               *  @fh.offsetopcode = >00  Data buffer in VDP RAM
0207               *  @fh.offsetopcode = >40  Data buffer in CPU RAM
0208               *--------------------------------------------------------------
0209               *  Output:
0210               *  tmp0     = Copy of VDP PAB byte 1 after operation
0211               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0212               *  tmp2 LSB = Copy of status register after operation
0213               *--------------------------------------------------------------
0214               *  Register usage:
0215               *  r0, r1, tmp0, tmp1, tmp2
0216               *--------------------------------------------------------------
0217               *  Remarks
0218               *  Private, only to be called from inside fio_level3 module
0219               *  via jump or branch instruction.
0220               *
0221               *  Uses @waux1 for backup/restore of memory word @>8322
0222               ********|*****|*********************|**************************
0223               _file.record.fop:
0224                       ;------------------------------------------------------
0225                       ; Write to PAB required?
0226                       ;------------------------------------------------------
0227 2D7C C800  42         mov   r0,@fh.pab.ptr        ; Backup of pointer to current VDP PAB
     2D7E A436     
0228                       ;------------------------------------------------------
0229                       ; Set file opcode in VDP PAB
0230                       ;------------------------------------------------------
0231 2D80 C100  30         mov   r0,tmp0               ; VDP write address (PAB byte 0)
0232               
0233 2D82 A160  42         a     @fh.offsetopcode,tmp1 ; Inject offset for file I/O opcode
     2D84 A44E     
0234                                                   ; >00 = Data buffer in VDP RAM
0235                                                   ; >40 = Data buffer in CPU RAM
0236               
0237 2D86 06A0  36         bl    @xvputb               ; Write file I/O opcode to VDP
     2D88 22DA     
0238                                                   ; \ i  tmp0 = VDP target address
0239                                                   ; / i  tmp1 = Byte to write
0240                       ;------------------------------------------------------
0241                       ; Set file type/mode in VDP PAB
0242                       ;------------------------------------------------------
0243 2D8A C100  30         mov   r0,tmp0               ; VDP write address (PAB byte 0)
0244 2D8C 0584  22         inc   tmp0                  ; Next byte in PAB
0245 2D8E C160  42         mov   @fh.filetype,tmp1     ; Get file type/mode
     2D90 A44C     
0246               
0247 2D92 06A0  36         bl    @xvputb               ; Write file type/mode to VDP
     2D94 22DA     
0248                                                   ; \ i  tmp0 = VDP target address
0249                                                   ; / i  tmp1 = Byte to write
0250                       ;------------------------------------------------------
0251                       ; Prepare for DSRLNK
0252                       ;------------------------------------------------------
0253 2D96 0220  30 !       ai    r0,9                  ; Move to file descriptor length
     2D98 0009     
0254 2D9A C800  34         mov   r0,@>8356             ; Pass file descriptor to DSRLNK
     2D9C 8356     
0255               *--------------------------------------------------------------
0256               * Call DSRLINK for doing file operation
0257               *--------------------------------------------------------------
0258 2D9E C820  42         mov   @>8322,@waux1         ; Save word at @>8322
     2DA0 8322     
     2DA2 833C     
0259               
0260 2DA4 C120  42         mov   @dsrlnk.savcru,tmp0   ; Call optimized or standard version?
     2DA6 A42A     
0261 2DA8 1504  14         jgt   _file.record.fop.optimized
0262                                                   ; Optimized version
0263               
0264                       ;------------------------------------------------------
0265                       ; First IO call. Call standard DSRLNK
0266                       ;------------------------------------------------------
0267 2DAA 0420  62         blwp  @dsrlnk               ; Call DSRLNK
     2DAC 2BA8     
0268 2DAE 0008                   data >8               ; \ i  p0 = >8 (DSR)
0269                                                   ; / o  r0 = Copy of VDP PAB byte 1
0270 2DB0 1002  14         jmp  _file.record.fop.pab   ; Return PAB to caller
0271               
0272                       ;------------------------------------------------------
0273                       ; Recurring IO call. Call optimized DSRLNK
0274                       ;------------------------------------------------------
0275               _file.record.fop.optimized:
0276 2DB2 0420  62         blwp  @dsrlnk.reuse         ; Call DSRLNK
     2DB4 2CD8     
0277               
0278               *--------------------------------------------------------------
0279               * Return PAB details to caller
0280               *--------------------------------------------------------------
0281               _file.record.fop.pab:
0282 2DB6 02C6  12         stst  tmp2                  ; Store status register contents in tmp2
0283                                                   ; Upon DSRLNK return status register EQ bit
0284                                                   ; 1 = No file error
0285                                                   ; 0 = File error occured
0286               
0287 2DB8 C820  42         mov   @waux1,@>8322         ; Restore word at @>8322
     2DBA 833C     
     2DBC 8322     
0288               *--------------------------------------------------------------
0289               * Get PAB byte 5 from VDP ram into tmp1 (character count)
0290               *--------------------------------------------------------------
0291 2DBE C120  42         mov   @fh.pab.ptr,tmp0      ; Get VDP address of current PAB
     2DC0 A436     
0292 2DC2 0224  30         ai    tmp0,5                ; Get address of VDP PAB byte 5
     2DC4 0005     
0293 2DC6 06A0  36         bl    @xvgetb               ; VDP read PAB status byte into tmp0
     2DC8 22F2     
0294 2DCA C144  30         mov   tmp0,tmp1             ; Move to destination
0295               *--------------------------------------------------------------
0296               * Get PAB byte 1 from VDP ram into tmp0 (status)
0297               *--------------------------------------------------------------
0298 2DCC C100  30         mov   r0,tmp0               ; VDP PAB byte 1 (status)
0299                                                   ; as returned by DSRLNK
0300               *--------------------------------------------------------------
0301               * Exit
0302               *--------------------------------------------------------------
0303               ; If an error occured during the IO operation, then the
0304               ; equal bit in the saved status register (=tmp2) is set to 1.
0305               ;
0306               ; Upon return from this IO call you should basically test with:
0307               ;       coc   @wbit2,tmp2           ; Equal bit set?
0308               ;       jeq   my_file_io_handler    ; Yes, IO error occured
0309               ;
0310               ; Then look for further details in the copy of VDP PAB byte 1
0311               ; in register tmp0, bits 13-15
0312               ;
0313               ;       srl   tmp0,8                ; Right align (only for DSR type >8
0314               ;                                   ; calls, skip for type >A subprograms!)
0315               ;       ci    tmp0,io.err.<code>    ; Check for error pattern
0316               ;       jeq   my_error_handler
0317               *--------------------------------------------------------------
0318               _file.record.fop.exit:
0319 2DCE C2F9  46         mov   *stack+,r11           ; Pop R11
0320 2DD0 045B  24         b     *r11                  ; Return to caller
                   < runlib.asm
0234               
0235               *//////////////////////////////////////////////////////////////
0236               *                            TIMERS
0237               *//////////////////////////////////////////////////////////////
0238               
0239                       copy  "timers_tmgr.asm"          ; Timers / Thread scheduler
     **** ****     > timers_tmgr.asm
0001               * FILE......: timers_tmgr.asm
0002               * Purpose...: Timers / Thread scheduler
0003               
0004               ***************************************************************
0005               * TMGR - X - Start Timers/Thread scheduler
0006               ***************************************************************
0007               *  B @TMGR
0008               *--------------------------------------------------------------
0009               *  REMARKS
0010               *  Timer/Thread scheduler. Normally called from MAIN.
0011               *  This is basically the kernel keeping everything together.
0012               *  Do not forget to set BTIHI to highest slot in use.
0013               *
0014               *  Register usage in TMGR8 - TMGR11
0015               *  TMP0  = Pointer to timer table
0016               *  R10LB = Use as slot counter
0017               *  TMP2  = 2nd word of slot data
0018               *  TMP3  = Address of routine to call
0019               ********|*****|*********************|**************************
0020 2DD2 0300  22 tmgr    limi  0                     ; No interrupt processing
     2DD4 0000     
0021               *--------------------------------------------------------------
0022               * Read VDP status register
0023               *--------------------------------------------------------------
0024 2DD6 D360  38 tmgr1   movb  @vdps,r13             ; Save copy of VDP status register in R13
     2DD8 8802     
0025               *--------------------------------------------------------------
0026               * Latch sprite collision flag
0027               *--------------------------------------------------------------
0028 2DDA 2360  32         coc   @wbit2,r13            ; C flag on ?
     2DDC 201C     
0029 2DDE 1602  14         jne   tmgr1a                ; No, so move on
0030 2DE0 E0A0  42         soc   @wbit12,config        ; Latch bit 12 in config register
     2DE2 2008     
0031               *--------------------------------------------------------------
0032               * Interrupt flag
0033               *--------------------------------------------------------------
0034 2DE4 2360  32 tmgr1a  coc   @wbit0,r13            ; Interupt flag set ?
     2DE6 2020     
0035 2DE8 1311  14         jeq   tmgr4                 ; Yes, process slots 0..n
0036               *--------------------------------------------------------------
0037               * Run speech player
0038               *--------------------------------------------------------------
0044               *--------------------------------------------------------------
0045               * Run kernel thread
0046               *--------------------------------------------------------------
0047 2DEA 20A0  32 tmgr2   coc   @wbit8,config         ; Kernel thread blocked ?
     2DEC 2010     
0048 2DEE 1305  14         jeq   tmgr3                 ; Yes, skip to user hook
0049 2DF0 20A0  32         coc   @wbit9,config         ; Kernel thread enabled ?
     2DF2 200E     
0050 2DF4 1602  14         jne   tmgr3                 ; No, skip to user hook
0051 2DF6 0460  28         b     @kthread              ; Run kernel thread
     2DF8 2E70     
0052               *--------------------------------------------------------------
0053               * Run user hook
0054               *--------------------------------------------------------------
0055 2DFA 20A0  32 tmgr3   coc   @wbit6,config         ; User hook blocked ?
     2DFC 2014     
0056 2DFE 13EB  14         jeq   tmgr1
0057 2E00 20A0  32         coc   @wbit7,config         ; User hook enabled ?
     2E02 2012     
0058 2E04 16E8  14         jne   tmgr1
0059 2E06 C120  38         mov   @wtiusr,tmp0
     2E08 832E     
0060 2E0A 0454  24         b     *tmp0                 ; Run user hook
0061               *--------------------------------------------------------------
0062               * Do internal housekeeping
0063               *--------------------------------------------------------------
0064 2E0C 40A0  42 tmgr4   szc   @tmdat,config         ; Unblock kernel thread and user hook
     2E0E 2E6E     
0065 2E10 C10A  30         mov   r10,tmp0
0066 2E12 0244  30         andi  tmp0,>00ff            ; Clear HI byte
     2E14 00FF     
0067 2E16 20A0  32         coc   @wbit2,config         ; PAL flag set ?
     2E18 201C     
0068 2E1A 1303  14         jeq   tmgr5
0069 2E1C 0284  26         ci    tmp0,60               ; 1 second reached ?
     2E1E 003C     
0070 2E20 1002  14         jmp   tmgr6
0071 2E22 0284  26 tmgr5   ci    tmp0,50
     2E24 0032     
0072 2E26 1101  14 tmgr6   jlt   tmgr7                 ; No, continue
0073 2E28 1001  14         jmp   tmgr8
0074 2E2A 058A  22 tmgr7   inc   r10                   ; Increase tick counter
0075               *--------------------------------------------------------------
0076               * Loop over slots
0077               *--------------------------------------------------------------
0078 2E2C C120  38 tmgr8   mov   @wtitab,tmp0          ; Pointer to timer table
     2E2E 832C     
0079 2E30 024A  30         andi  r10,>ff00             ; Use R10LB as slot counter. Reset.
     2E32 FF00     
0080 2E34 C1D4  38 tmgr9   mov   *tmp0,tmp3            ; Is slot empty ?
0081 2E36 1316  14         jeq   tmgr11                ; Yes, get next slot
0082               *--------------------------------------------------------------
0083               *  Check if slot should be executed
0084               *--------------------------------------------------------------
0085 2E38 05C4  22         inct  tmp0                  ; Second word of slot data
0086 2E3A 0594  30         inc   *tmp0                 ; Update tick count in slot
0087 2E3C C194  38         mov   *tmp0,tmp2            ; Get second word of slot data
0088 2E3E 9820  42         cb    @tmp2hb,@tmp2lb       ; Slot target count = Slot internal counter ?
     2E40 830C     
     2E42 830D     
0089 2E44 1608  14         jne   tmgr10                ; No, get next slot
0090 2E46 0246  30         andi  tmp2,>ff00            ; Clear internal counter
     2E48 FF00     
0091 2E4A C506  38         mov   tmp2,*tmp0            ; Update timer table
0092               *--------------------------------------------------------------
0093               *  Run slot, we only need TMP0 to survive
0094               *--------------------------------------------------------------
0095 2E4C C804  34         mov   tmp0,@wtitmp          ; Save TMP0
     2E4E 8330     
0096 2E50 0697  32         bl    *tmp3                 ; Call routine in slot
0097 2E52 C120  38 slotok  mov   @wtitmp,tmp0          ; Restore TMP0
     2E54 8330     
0098               *--------------------------------------------------------------
0099               *  Prepare for next slot
0100               *--------------------------------------------------------------
0101 2E56 058A  22 tmgr10  inc   r10                   ; Next slot
0102 2E58 9820  42         cb    @r10lb,@btihi         ; Last slot done ?
     2E5A 8315     
     2E5C 8314     
0103 2E5E 1504  14         jgt   tmgr12                ; yes, Wait for next VDP interrupt
0104 2E60 05C4  22         inct  tmp0                  ; Offset for next slot
0105 2E62 10E8  14         jmp   tmgr9                 ; Process next slot
0106 2E64 05C4  22 tmgr11  inct  tmp0                  ; Skip 2nd word of slot data
0107 2E66 10F7  14         jmp   tmgr10                ; Process next slot
0108 2E68 024A  30 tmgr12  andi  r10,>ff00             ; Use R10LB as tick counter. Reset.
     2E6A FF00     
0109 2E6C 10B4  14         jmp   tmgr1
0110 2E6E 0280     tmdat   data  >0280                 ; Bit 8 (kernel thread) and bit 6 (user hook)
0111               
                   < runlib.asm
0240                       copy  "timers_kthread.asm"       ; Timers / Kernel thread
     **** ****     > timers_kthread.asm
0001               * FILE......: timers_kthread.asm
0002               * Purpose...: Timers / The kernel thread
0003               
0004               
0005               ***************************************************************
0006               * KTHREAD - The kernel thread
0007               *--------------------------------------------------------------
0008               *  REMARKS
0009               *  You should not call the kernel thread manually.
0010               *  Instead control it via the CONFIG register.
0011               *
0012               *  The kernel thread is responsible for running the sound
0013               *  player and doing keyboard scan.
0014               ********|*****|*********************|**************************
0015 2E70 E0A0  42 kthread soc   @wbit8,config         ; Block kernel thread
     2E72 2010     
0016               *--------------------------------------------------------------
0017               * Run sound player
0018               *--------------------------------------------------------------
0022 2E74 20A0  32         coc   @wbit13,config        ; Sound player on ?
     2E76 2006     
0023 2E78 1602  14         jne   kthread_kb
0024 2E7A 06A0  36         bl    @sdpla1               ; Run sound player
     2E7C 2844     
0026               *--------------------------------------------------------------
0027               * Scan virtual keyboard
0028               *--------------------------------------------------------------
0029               kthread_kb
0031               *       <<skipped>>
0035               *--------------------------------------------------------------
0036               * Scan real keyboard
0037               *--------------------------------------------------------------
0042 2E7E 06A0  36         bl    @rkscan               ; Scan full keyboard with ROM#0 KSCAN
     2E80 28C4     
0047               *--------------------------------------------------------------
0048               kthread_exit
0049 2E82 0460  28         b     @tmgr3                ; Exit
     2E84 2DFA     
                   < runlib.asm
0241                       copy  "timers_hooks.asm"         ; Timers / User hooks
     **** ****     > timers_hooks.asm
0001               * FILE......: timers_kthread.asm
0002               * Purpose...: Timers / User hooks
0003               
0004               
0005               ***************************************************************
0006               * MKHOOK - Allocate user hook
0007               ***************************************************************
0008               *  BL    @MKHOOK
0009               *  DATA  P0
0010               *--------------------------------------------------------------
0011               *  P0 = Address of user hook
0012               *--------------------------------------------------------------
0013               *  REMARKS
0014               *  The user hook gets executed after the kernel thread.
0015               *  The user hook must always exit with "B @HOOKOK"
0016               ********|*****|*********************|**************************
0017 2E86 C83B  50 mkhook  mov   *r11+,@wtiusr         ; Set user hook address
     2E88 832E     
0018 2E8A E0A0  42         soc   @wbit7,config         ; Enable user hook
     2E8C 2012     
0019 2E8E 045B  24 mkhoo1  b     *r11                  ; Return
0020      2DD6     hookok  equ   tmgr1                 ; Exit point for user hook
0021               
0022               
0023               ***************************************************************
0024               * CLHOOK - Clear user hook
0025               ***************************************************************
0026               *  BL    @CLHOOK
0027               ********|*****|*********************|**************************
0028 2E90 04E0  26 clhook  clr   @wtiusr               ; Unset user hook address
     2E92 832E     
0029 2E94 0242  30         andi  config,>feff          ; Disable user hook (bit 7=0)
     2E96 FEFF     
0030 2E98 045B  24         b     *r11                  ; Return
                   < runlib.asm
0242               
0244                       copy  "timers_alloc.asm"         ; Timers / Slot calculation
     **** ****     > timers_alloc.asm
0001               * FILE......: timer_alloc.asm
0002               * Purpose...: Timers / Timer allocation
0003               
0004               
0005               ***************************************************************
0006               * MKSLOT - Allocate timer slot(s)
0007               ***************************************************************
0008               *  BL    @MKSLOT
0009               *  BYTE  P0HB,P0LB
0010               *  DATA  P1
0011               *  ....
0012               *  DATA  EOL                        ; End-of-list
0013               *--------------------------------------------------------------
0014               *  P0 = Slot number, target count
0015               *  P1 = Subroutine to call via BL @xxxx if slot is fired
0016               ********|*****|*********************|**************************
0017 2E9A C13B  46 mkslot  mov   *r11+,tmp0
0018 2E9C C17B  46         mov   *r11+,tmp1
0019               *--------------------------------------------------------------
0020               *  Calculate address of slot
0021               *--------------------------------------------------------------
0022 2E9E C184  30         mov   tmp0,tmp2
0023 2EA0 0966  36         srl   tmp2,6                ; Right align & TMP2 = TMP2 * 4
0024 2EA2 A1A0  38         a     @wtitab,tmp2          ; Add table base
     2EA4 832C     
0025               *--------------------------------------------------------------
0026               *  Add slot to table
0027               *--------------------------------------------------------------
0028 2EA6 CD85  46         mov   tmp1,*tmp2+           ; Store address of subroutine
0029 2EA8 0A84  40         sla   tmp0,8                ; Get rid of slot number
0030 2EAA C584  38         mov   tmp0,*tmp2            ; Store target count and reset tick count
0031               *--------------------------------------------------------------
0032               *  Check for end of list
0033               *--------------------------------------------------------------
0034 2EAC 881B  46         c     *r11,@w$ffff          ; End of list ?
     2EAE 2022     
0035 2EB0 1301  14         jeq   mkslo1                ; Yes, exit
0036 2EB2 10F3  14         jmp   mkslot                ; Process next entry
0037               *--------------------------------------------------------------
0038               *  Exit
0039               *--------------------------------------------------------------
0040 2EB4 05CB  22 mkslo1  inct  r11
0041 2EB6 045B  24         b     *r11                  ; Exit
0042               
0043               
0044               ***************************************************************
0045               * CLSLOT - Clear single timer slot
0046               ***************************************************************
0047               *  BL    @CLSLOT
0048               *  DATA  P0
0049               *--------------------------------------------------------------
0050               *  P0 = Slot number
0051               ********|*****|*********************|**************************
0052 2EB8 C13B  46 clslot  mov   *r11+,tmp0
0053 2EBA 0A24  28 xlslot  sla   tmp0,2                ; TMP0 = TMP0*4
0054 2EBC A120  38         a     @wtitab,tmp0          ; Add table base
     2EBE 832C     
0055 2EC0 04F4  38         clr   *tmp0+                ; Clear 1st word of slot
0056 2EC2 04D4  30         clr   *tmp0                 ; Clear 2nd word of slot
0057 2EC4 045B  24         b     *r11                  ; Exit
0058               
0059               
0060               ***************************************************************
0061               * RSSLOT - Reset single timer slot loop counter
0062               ***************************************************************
0063               *  BL    @RSSLOT
0064               *  DATA  P0
0065               *--------------------------------------------------------------
0066               *  P0 = Slot number
0067               ********|*****|*********************|**************************
0068 2EC6 C13B  46 rsslot  mov   *r11+,tmp0
0069 2EC8 0A24  28         sla   tmp0,2                ; TMP0 = TMP0*4
0070 2ECA A120  38         a     @wtitab,tmp0          ; Add table base
     2ECC 832C     
0071 2ECE 05C4  22         inct  tmp0                  ; Skip 1st word of slot
0072 2ED0 C154  38         mov   *tmp0,tmp1
0073 2ED2 0245  30         andi  tmp1,>ff00            ; Clear LSB (loop counter)
     2ED4 FF00     
0074 2ED6 C505  38         mov   tmp1,*tmp0
0075 2ED8 045B  24         b     *r11                  ; Exit
                   < runlib.asm
0246               
0247               
0248               
0249               *//////////////////////////////////////////////////////////////
0250               *                    RUNLIB INITIALISATION
0251               *//////////////////////////////////////////////////////////////
0252               
0253               ***************************************************************
0254               *  RUNLIB - Runtime library initalisation
0255               ***************************************************************
0256               *  B  @RUNLIB
0257               *--------------------------------------------------------------
0258               *  REMARKS
0259               *  if R0 in WS1 equals >4a4a we were called from the system
0260               *  crash handler so we return there after initialisation.
0261               
0262               *  If R1 in WS1 equals >FFFF we return to the TI title screen
0263               *  after clearing scratchpad memory. This has higher priority
0264               *  as crash handler flag R0.
0265               ********|*****|*********************|**************************
0272 2EDA 04E0  26 runlib  clr   @>8302                ; Reset exit flag (R1 in workspace WS1!)
     2EDC 8302     
0274               *--------------------------------------------------------------
0275               * Alternative entry point
0276               *--------------------------------------------------------------
0277 2EDE 0300  22 runli1  limi  0                     ; Turn off interrupts
     2EE0 0000     
0278 2EE2 02E0  18         lwpi  ws1                   ; Activate workspace 1
     2EE4 8300     
0279 2EE6 C0E0  30         mov   @>83c0,r3             ; Get random seed from OS monitor
     2EE8 83C0     
0280               *--------------------------------------------------------------
0281               * Clear scratch-pad memory from R4 upwards
0282               *--------------------------------------------------------------
0283 2EEA 0202  20 runli2  li    r2,>8308
     2EEC 8308     
0284 2EEE 04F2  30 runli3  clr   *r2+                  ; Clear scratchpad >8306->83FF
0285 2EF0 0282  22         ci    r2,>8400
     2EF2 8400     
0286 2EF4 16FC  14         jne   runli3
0287               *--------------------------------------------------------------
0288               * Exit to TI-99/4A title screen ?
0289               *--------------------------------------------------------------
0290 2EF6 0281  22 runli3a ci    r1,>ffff              ; Exit flag set ?
     2EF8 FFFF     
0291 2EFA 1602  14         jne   runli4                ; No, continue
0292 2EFC 0420  42         blwp  @0                    ; Yes, bye bye
     2EFE 0000     
0293               *--------------------------------------------------------------
0294               * Determine if VDP is PAL or NTSC
0295               *--------------------------------------------------------------
0296 2F00 C803  30 runli4  mov   r3,@waux1             ; Store random seed
     2F02 833C     
0297 2F04 04C1  14         clr   r1                    ; Reset counter
0298 2F06 0202  20         li    r2,10                 ; We test 10 times
     2F08 000A     
0299 2F0A C0E0  30 runli5  mov   @vdps,r3
     2F0C 8802     
0300 2F0E 20E0  32         coc   @wbit0,r3             ; Interupt flag set ?
     2F10 2020     
0301 2F12 1302  14         jeq   runli6
0302 2F14 0581  14         inc   r1                    ; Increase counter
0303 2F16 10F9  14         jmp   runli5
0304 2F18 0602  14 runli6  dec   r2                    ; Next test
0305 2F1A 16F7  14         jne   runli5
0306 2F1C 0281  22         ci    r1,>1250              ; Max for NTSC reached ?
     2F1E 1250     
0307 2F20 1202  14         jle   runli7                ; No, so it must be NTSC
0308 2F22 0262  22         ori   config,palon          ; Yes, it must be PAL, set flag
     2F24 201C     
0309               *--------------------------------------------------------------
0310               * Copy machine code to scratchpad (prepare tight loop)
0311               *--------------------------------------------------------------
0312 2F26 06A0  32 runli7  bl    @loadmc
     2F28 2228     
0313               *--------------------------------------------------------------
0314               * Initialize registers, memory, ...
0315               *--------------------------------------------------------------
0316 2F2A 04C1  14 runli9  clr   r1
0317 2F2C 04C2  14         clr   r2
0318 2F2E 04C3  14         clr   r3
0319 2F30 0209  20         li    stack,sp2.stktop      ; Set top of stack (grows downwards!)
     2F32 A900     
0320 2F34 020F  20         li    r15,vdpw              ; Set VDP write address
     2F36 8C00     
0322 2F38 06A0  32         bl    @mute                 ; Mute sound generators
     2F3A 2808     
0324               *--------------------------------------------------------------
0325               * Setup video memory
0326               *--------------------------------------------------------------
0328 2F3C 0280  22         ci    r0,>4a4a              ; Crash flag set?
     2F3E 4A4A     
0329 2F40 1605  14         jne   runlia
0330 2F42 06A0  32         bl    @filv                 ; Clear 12K VDP memory instead
     2F44 229C     
0331 2F46 0000             data  >0000,>00,>3000       ; of 16K, so that PABs survive
     2F48 0000     
     2F4A 3000     
0336 2F4C 06A0  32 runlia  bl    @filv
     2F4E 229C     
0337 2F50 0FC0             data  pctadr,spfclr,16      ; Load color table
     2F52 00F4     
     2F54 0010     
0338               *--------------------------------------------------------------
0339               * Check if there is a F18A present
0340               *--------------------------------------------------------------
0344 2F56 06A0  32         bl    @f18unl               ; Unlock the F18A
     2F58 2738     
0345 2F5A 06A0  32         bl    @f18chk               ; Check if F18A is there \
     2F5C 2762     
0346 2F5E 06A0  32         bl    @f18chk               ; Check if F18A is there | js99er bug?
     2F60 2762     
0347 2F62 06A0  32         bl    @f18chk               ; Check if F18A is there /
     2F64 2762     
0348 2F66 06A0  32         bl    @f18lck               ; Lock the F18A again
     2F68 274E     
0349               
0350 2F6A 06A0  32         bl    @putvr                ; Reset all F18a extended registers
     2F6C 2340     
0351 2F6E 3201                   data >3201            ; F18a VR50 (>32), bit 1
0353               *--------------------------------------------------------------
0354               * Check if there is a speech synthesizer attached
0355               *--------------------------------------------------------------
0357               *       <<skipped>>
0361               *--------------------------------------------------------------
0362               * Load video mode table & font
0363               *--------------------------------------------------------------
0364 2F70 06A0  32 runlic  bl    @vidtab               ; Load video mode table into VDP
     2F72 2306     
0365 2F74 3668             data  spvmod                ; Equate selected video mode table
0366 2F76 0204  20         li    tmp0,spfont           ; Get font option
     2F78 000C     
0367 2F7A 0544  14         inv   tmp0                  ; NOFONT (>FFFF) specified ?
0368 2F7C 1304  14         jeq   runlid                ; Yes, skip it
0369 2F7E 06A0  32         bl    @ldfnt
     2F80 236E     
0370 2F82 1100             data  fntadr,spfont         ; Load specified font
     2F84 000C     
0371               *--------------------------------------------------------------
0372               * Did a system crash occur before runlib was called?
0373               *--------------------------------------------------------------
0374 2F86 0280  22 runlid  ci    r0,>4a4a              ; Crash flag set?
     2F88 4A4A     
0375 2F8A 1602  14         jne   runlie                ; No, continue
0376 2F8C 0460  28         b     @cpu.crash.main       ; Yes, back to crash handler
     2F8E 2086     
0377               *--------------------------------------------------------------
0378               * Branch to main program
0379               *--------------------------------------------------------------
0380 2F90 0262  22 runlie  ori   config,>0040          ; Enable kernel thread (bit 9 on)
     2F92 0040     
0381 2F94 0460  28         b     @main                 ; Give control to main program
     2F96 6046     
                   < stevie_b7.asm
0044                       copy  "ram.resident.asm"
     **** ****     > ram.resident.asm
0001               * FILE......: ram.resident.asm
0002               * Purpose...: Resident modules in LOW MEMEXP callable from all ROM banks.
0003               
0004                       ;------------------------------------------------------
0005                       ; Low-level modules
0006                       ;------------------------------------------------------
0007                       copy  "rom.farjump.asm"        ; ROM bankswitch trampoline
     **** ****     > rom.farjump.asm
0001               * FILE......: rom.farjump.asm
0002               * Purpose...: Trampoline to routine in other ROM bank
0003               
0004               ***************************************************************
0005               * rom.farjump - Jump to routine in specified bank
0006               ***************************************************************
0007               *  bl   @rom.farjump
0008               *       data p0,p1
0009               *--------------------------------------------------------------
0010               *  p0 = Write address of target ROM bank
0011               *  p1 = Vector address with target address to jump to
0012               *  p2 = Write address of source ROM bank
0013               *--------------------------------------------------------------
0014               *  bl @xrom.farjump
0015               *
0016               *  tmp0 = Write address of target ROM bank
0017               *  tmp1 = Vector address with target address to jump to
0018               *  tmp2 = Write address of source ROM bank
0019               ********|*****|*********************|**************************
0020               rom.farjump:
0021 2F98 C13B  30         mov   *r11+,tmp0            ; P0
0022 2F9A C17B  30         mov   *r11+,tmp1            ; P1
0023 2F9C C1BB  30         mov   *r11+,tmp2            ; P2
0024                       ;------------------------------------------------------
0025                       ; Push registers to value stack (but not r11!)
0026                       ;------------------------------------------------------
0027               xrom.farjump:
0028 2F9E 0649  14         dect  stack
0029 2FA0 C644  30         mov   tmp0,*stack           ; Push tmp0
0030 2FA2 0649  14         dect  stack
0031 2FA4 C645  30         mov   tmp1,*stack           ; Push tmp1
0032 2FA6 0649  14         dect  stack
0033 2FA8 C646  30         mov   tmp2,*stack           ; Push tmp2
0034 2FAA 0649  14         dect  stack
0035 2FAC C647  30         mov   tmp3,*stack           ; Push tmp3
0036                       ;------------------------------------------------------
0037                       ; Push to farjump return stack
0038                       ;------------------------------------------------------
0039 2FAE 0284  22         ci    tmp0,>6000            ; Invalid bank write address?
     2FB0 6000     
0040 2FB2 1116  14         jlt   rom.farjump.bankswitch.failed1
0041                                                   ; Crash if bogus value in bank write address
0042               
0043 2FB4 C1E0  34         mov   @tv.fj.stackpnt,tmp3  ; Get farjump stack pointer
     2FB6 A226     
0044 2FB8 0647  14         dect  tmp3
0045 2FBA C5CB  30         mov   r11,*tmp3             ; Push return address to farjump stack
0046 2FBC 0647  14         dect  tmp3
0047 2FBE C5C6  30         mov   tmp2,*tmp3            ; Push source ROM bank to farjump stack
0048 2FC0 C807  38         mov   tmp3,@tv.fj.stackpnt  ; Set farjump stack pointer
     2FC2 A226     
0049               
0053               
0054                       ;------------------------------------------------------
0055                       ; Bankswitch to target 8K ROM bank
0056                       ;------------------------------------------------------
0057               rom.farjump.bankswitch.target.rom8k:
0058 2FC4 04D4  26         clr   *tmp0                 ; Switch to target ROM bank 8K >6000
0059 2FC6 1004  14         jmp   rom.farjump.bankswitch.tgt.done
0060                       ;------------------------------------------------------
0061                       ; Bankswitch to target 4K ROM / 4K RAM banks (FG99 advanced mode)
0062                       ;------------------------------------------------------
0063               rom.farjump.bankswitch.tgt.advfg99:
0064 2FC8 04D4  26         clr   *tmp0                 ; Switch to target ROM bank 4K >6000
0065 2FCA 0224  22         ai    tmp0,>0800
     2FCC 0800     
0066 2FCE 04D4  26         clr   *tmp0                 ; Switch to target RAM bank 4K >7000
0067                       ;------------------------------------------------------
0068                       ; Bankswitch to target bank(s) completed
0069                       ;------------------------------------------------------
0070               rom.farjump.bankswitch.tgt.done:
0071                       ;------------------------------------------------------
0072                       ; Deref vector from @trmpvector if >ffff
0073                       ;------------------------------------------------------
0074 2FD0 0285  22         ci    tmp1,>ffff
     2FD2 FFFF     
0075 2FD4 1602  14         jne   !
0076 2FD6 C160  34         mov   @trmpvector,tmp1
     2FD8 A032     
0077                       ;------------------------------------------------------
0078                       ; Deref value in vector
0079                       ;------------------------------------------------------
0080 2FDA C115  26 !       mov   *tmp1,tmp0            ; Deref value in vector address
0081 2FDC 1301  14         jeq   rom.farjump.bankswitch.failed1
0082                                                   ; Crash if null-pointer in vector
0083               
0084 2FDE 1004  14         jmp   rom.farjump.bankswitch.call
0085                                                   ; Call function in target bank
0086                       ;------------------------------------------------------
0087                       ; Assert 1 failed before bank-switch
0088                       ;------------------------------------------------------
0089               rom.farjump.bankswitch.failed1:
0090 2FE0 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2FE2 FFCE     
0091 2FE4 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2FE6 2026     
0092                       ;------------------------------------------------------
0093                       ; Call function in target bank
0094                       ;------------------------------------------------------
0095               rom.farjump.bankswitch.call:
0096 2FE8 0694  24         bl    *tmp0                 ; Call function
0097                       ;------------------------------------------------------
0098                       ; Bankswitch back to source bank
0099                       ;------------------------------------------------------
0100               rom.farjump.return:
0101 2FEA C120  34         mov   @tv.fj.stackpnt,tmp0  ; Get farjump stack pointer
     2FEC A226     
0102 2FEE C154  26         mov   *tmp0,tmp1            ; Get bank write address of caller
0103 2FF0 1312  14         jeq   rom.farjump.bankswitch.failed2
0104                                                   ; Crash if null-pointer in address
0105               
0106 2FF2 04F4  30         clr   *tmp0+                ; Remove bank write address from
0107                                                   ; farjump stack
0108               
0109 2FF4 C2D4  26         mov   *tmp0,r11             ; Get return addr of caller for return
0110               
0111 2FF6 04F4  30         clr   *tmp0+                ; Remove return address of caller from
0112                                                   ; farjump stack
0113               
0114 2FF8 028B  22         ci    r11,>6000
     2FFA 6000     
0115 2FFC 110C  14         jlt   rom.farjump.bankswitch.failed2
0116 2FFE 028B  22         ci    r11,>7fff
     3000 7FFF     
0117 3002 1509  14         jgt   rom.farjump.bankswitch.failed2
0118               
0119 3004 C804  38         mov   tmp0,@tv.fj.stackpnt  ; Update farjump return stack pointer
     3006 A226     
0120               
0124               
0125                       ;------------------------------------------------------
0126                       ; Bankswitch to source 8K ROM bank
0127                       ;------------------------------------------------------
0128               rom.farjump.bankswitch.src.rom8k:
0129 3008 04D5  26         clr   *tmp1                 ; Switch to source ROM bank 8K >6000
0130 300A 1009  14         jmp   rom.farjump.exit
0131                       ;------------------------------------------------------
0132                       ; Bankswitch to source 4K ROM / 4K RAM banks (FG99 advanced mode)
0133                       ;------------------------------------------------------
0134               rom.farjump.bankswitch.src.advfg99:
0135 300C 04D5  26         clr   *tmp1                 ; Switch to source ROM bank 4K >6000
0136 300E 0225  22         ai    tmp1,>0800
     3010 0800     
0137 3012 04D5  26         clr   *tmp1                 ; Switch to source RAM bank 4K >7000
0138 3014 1004  14         jmp   rom.farjump.exit
0139                       ;------------------------------------------------------
0140                       ; Assert 2 failed after bank-switch
0141                       ;------------------------------------------------------
0142               rom.farjump.bankswitch.failed2:
0143 3016 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     3018 FFCE     
0144 301A 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     301C 2026     
0145                       ;-------------------------------------------------------
0146                       ; Exit
0147                       ;-------------------------------------------------------
0148               rom.farjump.exit:
0149 301E C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0150 3020 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0151 3022 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0152 3024 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0153 3026 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0008                       copy  "fb.asm"                 ; Framebuffer
     **** ****     > fb.asm
0001               * FILE......: fb.asm
0002               * Purpose...: Stevie Editor - Framebuffer module
0003               
0004               ***************************************************************
0005               * fb.init
0006               * Initialize framebuffer
0007               ***************************************************************
0008               *  bl   @fb.init
0009               *--------------------------------------------------------------
0010               *  INPUT
0011               *  none
0012               *--------------------------------------------------------------
0013               *  OUTPUT
0014               *  none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               ********|*****|*********************|**************************
0019               fb.init:
0020 3028 0649  14         dect  stack
0021 302A C64B  30         mov   r11,*stack            ; Save return address
0022 302C 0649  14         dect  stack
0023 302E C644  30         mov   tmp0,*stack           ; Push tmp0
0024 3030 0649  14         dect  stack
0025 3032 C645  30         mov   tmp1,*stack           ; Push tmp1
0026                       ;------------------------------------------------------
0027                       ; Initialize
0028                       ;------------------------------------------------------
0029 3034 0204  20         li    tmp0,fb.top
     3036 D000     
0030 3038 C804  38         mov   tmp0,@fb.top.ptr      ; Set pointer to framebuffer
     303A A300     
0031 303C 04E0  34         clr   @fb.topline           ; Top line in framebuffer
     303E A304     
0032 3040 04E0  34         clr   @fb.row               ; Current row=0
     3042 A306     
0033 3044 04E0  34         clr   @fb.column            ; Current column=0
     3046 A30C     
0034               
0035 3048 0204  20         li    tmp0,colrow
     304A 0050     
0036 304C C804  38         mov   tmp0,@fb.colsline     ; Columns per row=80
     304E A30E     
0037 3050 04E0  34         clr   @fb.vwco              ; Set view window column offset
     3052 A310     
0038                       ;------------------------------------------------------
0039                       ; Determine size of rows on screen
0040                       ;------------------------------------------------------
0041 3054 C160  34         mov   @tv.ruler.visible,tmp1
     3056 A210     
0042 3058 1303  14         jeq   !                     ; Skip if ruler is hidden
0043 305A 0204  20         li    tmp0,pane.botrow-2
     305C 001B     
0044 305E 1002  14         jmp   fb.init.cont
0045 3060 0204  20 !       li    tmp0,pane.botrow-1
     3062 001C     
0046                       ;------------------------------------------------------
0047                       ; Continue initialisation
0048                       ;------------------------------------------------------
0049               fb.init.cont:
0050 3064 C804  38         mov   tmp0,@fb.scrrows      ; Physical rows on screen for fb
     3066 A31C     
0051 3068 C804  38         mov   tmp0,@fb.scrrows.max  ; Maximum number of physical rows for fb
     306A A31E     
0052               
0053 306C 04E0  34         clr   @tv.pane.focus        ; Frame buffer has focus!
     306E A222     
0054 3070 04E0  34         clr   @fb.colorize          ; Don't colorize M1/M2 lines
     3072 A312     
0055 3074 0720  34         seto  @fb.dirty             ; Set dirty flag (trigger screen update)
     3076 A318     
0056 3078 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     307A A31A     
0057                       ;------------------------------------------------------
0058                       ; Clear frame buffer
0059                       ;------------------------------------------------------
0060 307C 06A0  32         bl    @film
     307E 2244     
0061 3080 D000             data  fb.top,>00,fb.size    ; Clear it all the way
     3082 0000     
     3084 0960     
0062                       ;------------------------------------------------------
0063                       ; Exit
0064                       ;------------------------------------------------------
0065               fb.init.exit:
0066 3086 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0067 3088 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0068 308A C2F9  30         mov   *stack+,r11           ; Pop r11
0069 308C 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0009                       copy  "fb.utils.asm"           ; Framebuffer utilities
     **** ****     > fb.utils.asm
0001               * FILE......: fb.utils.asm
0002               * Purpose...: Stevie Editor - Framebuffer utilities
0003               
0004               ***************************************************************
0005               * fb.row2line
0006               * Calculate line in editor buffer
0007               ***************************************************************
0008               * bl @fb.row2line
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @fb.topline = Top line in frame buffer
0012               * @parm1      = Row in frame buffer (offset 0..@fb.scrrows)
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * @outparm1 = Matching line in editor buffer
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0
0019               *--------------------------------------------------------------
0020               * Formula
0021               * outparm1 = @fb.topline + @parm1
0022               ********|*****|*********************|**************************
0023               fb.row2line:
0024 308E 0649  14         dect  stack
0025 3090 C64B  30         mov   r11,*stack            ; Save return address
0026 3092 0649  14         dect  stack
0027 3094 C644  30         mov   tmp0,*stack           ; Push tmp0
0028                       ;------------------------------------------------------
0029                       ; Calculate line in editor buffer
0030                       ;------------------------------------------------------
0031 3096 C120  34         mov   @parm1,tmp0
     3098 A006     
0032 309A A120  34         a     @fb.topline,tmp0
     309C A304     
0033 309E C804  38         mov   tmp0,@outparm1
     30A0 A016     
0034                       ;------------------------------------------------------
0035                       ; Exit
0036                       ;------------------------------------------------------
0037               fb.row2line.exit:
0038 30A2 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0039 30A4 C2F9  30         mov   *stack+,r11           ; Pop r11
0040 30A6 045B  20         b     *r11                  ; Return to caller
0041               
0042               
0043               
0044               
0045               ***************************************************************
0046               * fb.calc_pointer
0047               * Calculate pointer address in frame buffer
0048               ***************************************************************
0049               * bl @fb.calc_pointer
0050               *--------------------------------------------------------------
0051               * INPUT
0052               * @fb.top       = Address of top row in frame buffer
0053               * @fb.topline   = Top line in frame buffer
0054               * @fb.row       = Current row in frame buffer (offset 0..@fb.scrrows)
0055               * @fb.column    = Current column in frame buffer
0056               * @fb.colsline  = Columns per line in frame buffer
0057               *--------------------------------------------------------------
0058               * OUTPUT
0059               * @fb.current   = Updated pointer
0060               *--------------------------------------------------------------
0061               * Register usage
0062               * tmp0,tmp1
0063               *--------------------------------------------------------------
0064               * Formula
0065               * pointer = row * colsline + column + deref(@fb.top.ptr)
0066               ********|*****|*********************|**************************
0067               fb.calc_pointer:
0068 30A8 0649  14         dect  stack
0069 30AA C64B  30         mov   r11,*stack            ; Save return address
0070 30AC 0649  14         dect  stack
0071 30AE C644  30         mov   tmp0,*stack           ; Push tmp0
0072 30B0 0649  14         dect  stack
0073 30B2 C645  30         mov   tmp1,*stack           ; Push tmp1
0074                       ;------------------------------------------------------
0075                       ; Calculate pointer
0076                       ;------------------------------------------------------
0077 30B4 C120  34         mov   @fb.row,tmp0
     30B6 A306     
0078 30B8 3920  74         mpy   @fb.colsline,tmp0     ; tmp1 = row  * colsline
     30BA A30E     
0079 30BC A160  34         a     @fb.column,tmp1       ; tmp1 = tmp1 + column
     30BE A30C     
0080 30C0 A160  34         a     @fb.top.ptr,tmp1      ; tmp1 = tmp1 + base
     30C2 A300     
0081 30C4 C805  38         mov   tmp1,@fb.current
     30C6 A302     
0082                       ;------------------------------------------------------
0083                       ; Exit
0084                       ;------------------------------------------------------
0085               fb.calc_pointer.exit:
0086 30C8 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0087 30CA C139  30         mov   *stack+,tmp0          ; Pop tmp0
0088 30CC C2F9  30         mov   *stack+,r11           ; Pop r11
0089 30CE 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0010                       copy  "idx.asm"                ; Index management
     **** ****     > idx.asm
0001               * FILE......: idx.asm
0002               * Purpose...: Index management
0003               
0004               ***************************************************************
0005               *  Size of index page is 4K and allows indexing of 2048 lines
0006               *  per page.
0007               *
0008               *  Each index slot (word) has the format:
0009               *    +-----+-----+
0010               *    | MSB | LSB |
0011               *    +-----|-----+   LSB = Pointer offset 00-ff.
0012               *
0013               *  MSB = SAMS Page 40-ff
0014               *        Allows addressing of up to 256 4K SAMS pages (1024 KB)
0015               *
0016               *  LSB = Pointer offset in range 00-ff
0017               *
0018               *        To calculate pointer to line in Editor buffer:
0019               *        Pointer address = edb.top + (LSB * 16)
0020               *
0021               *        Note that the editor buffer itself resides in own 4K memory range
0022               *        starting at edb.top
0023               *
0024               *        All support routines must assure that length-prefixed string in
0025               *        Editor buffer always start on a 16 byte boundary for being
0026               *        accessible via index.
0027               *
0028               *
0029               * The index starts at SAMS page >20 and can allocate up to page >3f
0030               * for a total of 32 pages (128 K). With that up to 65536 lines of text
0031               * can be addressed.
0032               ***************************************************************
0033               
0034               
0035               ***************************************************************
0036               * idx.init
0037               * Initialize index
0038               ***************************************************************
0039               * bl @idx.init
0040               *--------------------------------------------------------------
0041               * INPUT
0042               * none
0043               *--------------------------------------------------------------
0044               * OUTPUT
0045               * none
0046               *--------------------------------------------------------------
0047               * Register usage
0048               * tmp0
0049               ********|*****|*********************|**************************
0050               idx.init:
0051 30D0 0649  14         dect  stack
0052 30D2 C64B  30         mov   r11,*stack            ; Save return address
0053 30D4 0649  14         dect  stack
0054 30D6 C644  30         mov   tmp0,*stack           ; Push tmp0
0055                       ;------------------------------------------------------
0056                       ; Initialize
0057                       ;------------------------------------------------------
0058 30D8 0204  20         li    tmp0,idx.top
     30DA B000     
0059 30DC C804  38         mov   tmp0,@edb.index.ptr   ; Set pointer to index in editor structure
     30DE A502     
0060               
0061 30E0 C120  34         mov   @tv.sams.b000,tmp0
     30E2 A206     
0062 30E4 C804  38         mov   tmp0,@idx.sams.page   ; Set current SAMS page
     30E6 A600     
0063 30E8 C804  38         mov   tmp0,@idx.sams.lopage ; Set 1st SAMS page
     30EA A602     
0064                       ;------------------------------------------------------
0065                       ; Clear all index pages
0066                       ;------------------------------------------------------
0067 30EC 0224  22         ai    tmp0,4                ; \ Let's clear all index pages
     30EE 0004     
0068 30F0 C804  38         mov   tmp0,@idx.sams.hipage ; /
     30F2 A604     
0069               
0070 30F4 06A0  32         bl    @_idx.sams.mapcolumn.on
     30F6 3112     
0071                                                   ; Index in continuous memory region
0072               
0073 30F8 06A0  32         bl    @film
     30FA 2244     
0074 30FC B000                   data idx.top,>00,idx.size * 5
     30FE 0000     
     3100 5000     
0075                                                   ; Clear index
0076               
0077 3102 06A0  32         bl    @_idx.sams.mapcolumn.off
     3104 3146     
0078                                                   ; Restore memory window layout
0079               
0080 3106 C820  54         mov   @idx.sams.lopage,@idx.sams.hipage
     3108 A602     
     310A A604     
0081                                                   ; Reset last SAMS page
0082                       ;------------------------------------------------------
0083                       ; Exit
0084                       ;------------------------------------------------------
0085               idx.init.exit:
0086 310C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0087 310E C2F9  30         mov   *stack+,r11           ; Pop r11
0088 3110 045B  20         b     *r11                  ; Return to caller
0089               
0090               
0091               ***************************************************************
0092               * bl @_idx.sams.mapcolumn.on
0093               *--------------------------------------------------------------
0094               * Register usage
0095               * tmp0, tmp1, tmp2
0096               *--------------------------------------------------------------
0097               *  Remarks
0098               *  Private, only to be called from inside idx module
0099               ********|*****|*********************|**************************
0100               _idx.sams.mapcolumn.on:
0101 3112 0649  14         dect  stack
0102 3114 C64B  30         mov   r11,*stack            ; Push return address
0103 3116 0649  14         dect  stack
0104 3118 C644  30         mov   tmp0,*stack           ; Push tmp0
0105 311A 0649  14         dect  stack
0106 311C C645  30         mov   tmp1,*stack           ; Push tmp1
0107 311E 0649  14         dect  stack
0108 3120 C646  30         mov   tmp2,*stack           ; Push tmp2
0109               *--------------------------------------------------------------
0110               * Map index pages into memory window  (b000-ffff)
0111               *--------------------------------------------------------------
0112 3122 C120  34         mov   @idx.sams.lopage,tmp0 ; Get lowest index page
     3124 A602     
0113 3126 0205  20         li    tmp1,idx.top
     3128 B000     
0114 312A 0206  20         li    tmp2,5                ; Set loop counter. all pages of index
     312C 0005     
0115                       ;-------------------------------------------------------
0116                       ; Loop over banks
0117                       ;-------------------------------------------------------
0118 312E 06A0  32 !       bl    @xsams.page.set       ; Set SAMS page
     3130 2584     
0119                                                   ; \ i  tmp0  = SAMS page number
0120                                                   ; / i  tmp1  = Memory address
0121               
0122 3132 0584  14         inc   tmp0                  ; Next SAMS index page
0123 3134 0225  22         ai    tmp1,>1000            ; Next memory region
     3136 1000     
0124 3138 0606  14         dec   tmp2                  ; Update loop counter
0125 313A 15F9  14         jgt   -!                    ; Next iteration
0126               *--------------------------------------------------------------
0127               * Exit
0128               *--------------------------------------------------------------
0129               _idx.sams.mapcolumn.on.exit:
0130 313C C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0131 313E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0132 3140 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0133 3142 C2F9  30         mov   *stack+,r11           ; Pop return address
0134 3144 045B  20         b     *r11                  ; Return to caller
0135               
0136               
0137               ***************************************************************
0138               * _idx.sams.mapcolumn.off
0139               * Restore normal SAMS layout again (single index page)
0140               ***************************************************************
0141               * bl @_idx.sams.mapcolumn.off
0142               *--------------------------------------------------------------
0143               * Register usage
0144               * tmp0, tmp1, tmp2, tmp3
0145               *--------------------------------------------------------------
0146               *  Remarks
0147               *  Private, only to be called from inside idx module
0148               ********|*****|*********************|**************************
0149               _idx.sams.mapcolumn.off:
0150 3146 0649  14         dect  stack
0151 3148 C64B  30         mov   r11,*stack            ; Push return address
0152 314A 0649  14         dect  stack
0153 314C C644  30         mov   tmp0,*stack           ; Push tmp0
0154 314E 0649  14         dect  stack
0155 3150 C645  30         mov   tmp1,*stack           ; Push tmp1
0156 3152 0649  14         dect  stack
0157 3154 C646  30         mov   tmp2,*stack           ; Push tmp2
0158 3156 0649  14         dect  stack
0159 3158 C647  30         mov   tmp3,*stack           ; Push tmp3
0160               *--------------------------------------------------------------
0161               * Map index pages into memory window  (b000-????)
0162               *--------------------------------------------------------------
0163 315A 0205  20         li    tmp1,idx.top
     315C B000     
0164 315E 0206  20         li    tmp2,5                ; Always 5 pages
     3160 0005     
0165 3162 0207  20         li    tmp3,tv.sams.b000     ; Pointer to fist SAMS page
     3164 A206     
0166                       ;-------------------------------------------------------
0167                       ; Loop over table in memory (@tv.sams.b000:@tv.sams.f000)
0168                       ;-------------------------------------------------------
0169 3166 C137  30 !       mov   *tmp3+,tmp0           ; Get SAMS page
0170               
0171 3168 06A0  32         bl    @xsams.page.set       ; Set SAMS page
     316A 2584     
0172                                                   ; \ i  tmp0  = SAMS page number
0173                                                   ; / i  tmp1  = Memory address
0174               
0175 316C 0225  22         ai    tmp1,>1000            ; Next memory region
     316E 1000     
0176 3170 0606  14         dec   tmp2                  ; Update loop counter
0177 3172 15F9  14         jgt   -!                    ; Next iteration
0178               *--------------------------------------------------------------
0179               * Exit
0180               *--------------------------------------------------------------
0181               _idx.sams.mapcolumn.off.exit:
0182 3174 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0183 3176 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0184 3178 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0185 317A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0186 317C C2F9  30         mov   *stack+,r11           ; Pop return address
0187 317E 045B  20         b     *r11                  ; Return to caller
0188               
0189               
0190               
0191               ***************************************************************
0192               * _idx.samspage.get
0193               * Get SAMS page for index
0194               ***************************************************************
0195               * bl @_idx.samspage.get
0196               *--------------------------------------------------------------
0197               * INPUT
0198               * tmp0 = Line number
0199               *--------------------------------------------------------------
0200               * OUTPUT
0201               * @outparm1 = Offset for index entry in index SAMS page
0202               *--------------------------------------------------------------
0203               * Register usage
0204               * tmp0, tmp1, tmp2
0205               *--------------------------------------------------------------
0206               *  Remarks
0207               *  Private, only to be called from inside idx module.
0208               *  Activates SAMS page containing required index slot entry.
0209               ********|*****|*********************|**************************
0210               _idx.samspage.get:
0211 3180 0649  14         dect  stack
0212 3182 C64B  30         mov   r11,*stack            ; Save return address
0213 3184 0649  14         dect  stack
0214 3186 C644  30         mov   tmp0,*stack           ; Push tmp0
0215 3188 0649  14         dect  stack
0216 318A C645  30         mov   tmp1,*stack           ; Push tmp1
0217 318C 0649  14         dect  stack
0218 318E C646  30         mov   tmp2,*stack           ; Push tmp2
0219                       ;------------------------------------------------------
0220                       ; Determine SAMS index page
0221                       ;------------------------------------------------------
0222 3190 C184  18         mov   tmp0,tmp2             ; Line number
0223 3192 04C5  14         clr   tmp1                  ; MSW (tmp1) = 0 / LSW (tmp2) = Line number
0224 3194 0204  20         li    tmp0,2048             ; Index entries in 4K SAMS page
     3196 0800     
0225               
0226 3198 3D44 128         div   tmp0,tmp1             ; \ Divide 32 bit value by 2048
0227                                                   ; | tmp1 = quotient  (SAMS page offset)
0228                                                   ; / tmp2 = remainder
0229               
0230 319A 0A16  18         sla   tmp2,1                ; line number * 2
0231 319C C806  38         mov   tmp2,@outparm1        ; Offset index entry
     319E A016     
0232               
0233 31A0 A160  34         a     @idx.sams.lopage,tmp1 ; Add SAMS page base
     31A2 A602     
0234 31A4 8805  34         c     tmp1,@idx.sams.page   ; Page already active?
     31A6 A600     
0235               
0236 31A8 130E  14         jeq   _idx.samspage.get.exit
0237                                                   ; Yes, so exit
0238                       ;------------------------------------------------------
0239                       ; Activate SAMS index page
0240                       ;------------------------------------------------------
0241 31AA C805  38         mov   tmp1,@idx.sams.page   ; Set current SAMS page
     31AC A600     
0242 31AE C805  38         mov   tmp1,@tv.sams.b000    ; Also keep SAMS window synced in Stevie
     31B0 A206     
0243 31B2 C105  18         mov   tmp1,tmp0             ; Destination SAMS page
0244               
0245 31B4 0205  20         li    tmp1,>b000            ; Memory window for index page
     31B6 B000     
0246               
0247 31B8 06A0  32         bl    @xsams.page.set       ; Switch to SAMS page
     31BA 2584     
0248                                                   ; \ i  tmp0 = SAMS page
0249                                                   ; / i  tmp1 = Memory address
0250                       ;------------------------------------------------------
0251                       ; Check if new highest SAMS index page
0252                       ;------------------------------------------------------
0253 31BC 8804  34         c     tmp0,@idx.sams.hipage ; New highest page?
     31BE A604     
0254 31C0 1202  14         jle   _idx.samspage.get.exit
0255                                                   ; No, exit
0256 31C2 C804  38         mov   tmp0,@idx.sams.hipage ; Yes, set highest SAMS index page
     31C4 A604     
0257                       ;------------------------------------------------------
0258                       ; Exit
0259                       ;------------------------------------------------------
0260               _idx.samspage.get.exit:
0261 31C6 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0262 31C8 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0263 31CA C139  30         mov   *stack+,tmp0          ; Pop tmp0
0264 31CC C2F9  30         mov   *stack+,r11           ; Pop r11
0265 31CE 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0011                       copy  "edb.asm"                ; Editor Buffer
     **** ****     > edb.asm
0001               * FILE......: edb.asm
0002               * Purpose...: Stevie Editor - Editor Buffer module
0003               
0004               ***************************************************************
0005               * edb.init
0006               * Initialize Editor buffer
0007               ***************************************************************
0008               * bl @edb.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ***************************************************************
0021               edb.init:
0022 31D0 0649  14         dect  stack
0023 31D2 C64B  30         mov   r11,*stack            ; Save return address
0024 31D4 0649  14         dect  stack
0025 31D6 C644  30         mov   tmp0,*stack           ; Push tmp0
0026                       ;------------------------------------------------------
0027                       ; Initialize
0028                       ;------------------------------------------------------
0029 31D8 0204  20         li    tmp0,edb.top          ; \
     31DA C000     
0030 31DC C804  38         mov   tmp0,@edb.top.ptr     ; / Set pointer to top of editor buffer
     31DE A500     
0031 31E0 C804  38         mov   tmp0,@edb.next_free.ptr
     31E2 A508     
0032                                                   ; Set pointer to next free line
0033               
0034 31E4 0720  34         seto  @edb.insmode          ; Turn on insert mode for this editor buffer
     31E6 A50A     
0035               
0036 31E8 0204  20         li    tmp0,1
     31EA 0001     
0037 31EC C804  38         mov   tmp0,@edb.lines       ; Lines=1
     31EE A504     
0038               
0039 31F0 0720  34         seto  @edb.block.m1         ; Reset block start line
     31F2 A50E     
0040 31F4 0720  34         seto  @edb.block.m2         ; Reset block end line
     31F6 A510     
0041               
0042 31F8 0204  20         li    tmp0,txt.newfile      ; "New file"
     31FA 38B0     
0043 31FC C804  38         mov   tmp0,@edb.filename.ptr
     31FE A514     
0044               
0045 3200 04E0  34         clr   @fh.kilobytes         ; \ Clear kilobytes processed
     3202 A440     
0046 3204 04E0  34         clr   @fh.kilobytes.prev    ; /
     3206 A45C     
0047               
0048 3208 0204  20         li    tmp0,txt.filetype.none
     320A 3A01     
0049 320C C804  38         mov   tmp0,@edb.filetype.ptr
     320E A516     
0050               
0051 3210 0720  34         seto  @edb.autoinsert       ; Auto-Insert on ENTER on by default
     3212 A50C     
0052               
0053               edb.init.exit:
0054                       ;------------------------------------------------------
0055                       ; Exit
0056                       ;------------------------------------------------------
0057 3214 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0058 3216 C2F9  30         mov   *stack+,r11           ; Pop r11
0059 3218 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0012                       copy  "cmdb.asm"               ; Command buffer
     **** ****     > cmdb.asm
0001               * FILE......: cmdb.asm
0002               * Purpose...: Stevie Editor - Command Buffer module
0003               
0004               ***************************************************************
0005               * cmdb.init
0006               * Initialize Command Buffer
0007               ***************************************************************
0008               * bl @cmdb.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               cmdb.init:
0022 321A 0649  14         dect  stack
0023 321C C64B  30         mov   r11,*stack            ; Save return address
0024 321E 0649  14         dect  stack
0025 3220 C644  30         mov   tmp0,*stack           ; Push tmp0
0026                       ;------------------------------------------------------
0027                       ; Initialize
0028                       ;------------------------------------------------------
0029 3222 0204  20         li    tmp0,cmdb.top         ; \ Set pointer to command buffer
     3224 E000     
0030 3226 C804  38         mov   tmp0,@cmdb.top.ptr    ; /
     3228 A700     
0031               
0032 322A 04E0  34         clr   @cmdb.visible         ; Hide command buffer
     322C A702     
0033 322E 0204  20         li    tmp0,4
     3230 0004     
0034 3232 C804  38         mov   tmp0,@cmdb.scrrows    ; Set current command buffer size
     3234 A706     
0035 3236 C804  38         mov   tmp0,@cmdb.default    ; Set default command buffer size
     3238 A708     
0036               
0037 323A 04E0  34         clr   @cmdb.lines           ; Number of lines in cmdb buffer
     323C A716     
0038 323E 04E0  34         clr   @cmdb.dirty           ; Command buffer is clean
     3240 A718     
0039 3242 04E0  34         clr   @cmdb.action.ptr      ; Reset action to execute pointer
     3244 A728     
0040                       ;------------------------------------------------------
0041                       ; Clear command buffer
0042                       ;------------------------------------------------------
0043 3246 06A0  32         bl    @film
     3248 2244     
0044 324A E000             data  cmdb.top,>00,cmdb.size
     324C 0000     
     324E 1000     
0045                                                   ; Clear it all the way
0046               cmdb.init.exit:
0047                       ;------------------------------------------------------
0048                       ; Exit
0049                       ;------------------------------------------------------
0050 3250 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0051 3252 C2F9  30         mov   *stack+,r11           ; Pop r11
0052 3254 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0013                       copy  "errpane.asm"            ; Error pane
     **** ****     > errpane.asm
0001               * FILE......: errpane.asm
0002               * Purpose...: Error pane utilities
0003               
0004               ***************************************************************
0005               * errpane.init
0006               * Initialize error pane
0007               ***************************************************************
0008               * bl @errpane.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0,tmp1,tmp2
0018               *--------------------------------------------------------------
0019               * Notes
0020               ***************************************************************
0021               errpane.init:
0022 3256 0649  14         dect  stack
0023 3258 C64B  30         mov   r11,*stack            ; Save return address
0024 325A 0649  14         dect  stack
0025 325C C644  30         mov   tmp0,*stack           ; Push tmp0
0026 325E 0649  14         dect  stack
0027 3260 C645  30         mov   tmp1,*stack           ; Push tmp1
0028 3262 0649  14         dect  stack
0029 3264 C646  30         mov   tmp2,*stack           ; Push tmp2
0030                       ;------------------------------------------------------
0031                       ; Initialize
0032                       ;------------------------------------------------------
0033 3266 04E0  34         clr   @tv.error.visible     ; Set to hidden
     3268 A228     
0034 326A 0204  20         li    tmp0,3
     326C 0003     
0035 326E C804  38         mov   tmp0,@tv.error.rows   ; Number of rows in error pane
     3270 A22A     
0036               
0037 3272 06A0  32         bl    @film
     3274 2244     
0038 3276 A230                   data tv.error.msg,0,160
     3278 0000     
     327A 00A0     
0039                       ;-------------------------------------------------------
0040                       ; Exit
0041                       ;-------------------------------------------------------
0042               errpane.exit:
0043 327C C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0044 327E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0045 3280 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0046 3282 C2F9  30         mov   *stack+,r11           ; Pop R11
0047 3284 045B  20         b     *r11                  ; Return to caller
0048               
                   < ram.resident.asm
0014                       copy  "tv.asm"                 ; Main editor configuration
     **** ****     > tv.asm
0001               * FILE......: tv.asm
0002               * Purpose...: Initialize editor
0003               
0004               ***************************************************************
0005               * tv.init
0006               * Initialize editor settings
0007               ***************************************************************
0008               * bl @tv.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ***************************************************************
0021               tv.init:
0022 3286 0649  14         dect  stack
0023 3288 C64B  30         mov   r11,*stack            ; Save return address
0024 328A 0649  14         dect  stack
0025 328C C644  30         mov   tmp0,*stack           ; Push tmp0
0026 328E 0649  14         dect  stack
0027 3290 C645  30         mov   tmp1,*stack           ; Push tmp1
0028 3292 0649  14         dect  stack
0029 3294 C646  30         mov   tmp2,*stack           ; Push tmp2
0030                       ;------------------------------------------------------
0031                       ; Initialize
0032                       ;------------------------------------------------------
0033 3296 0204  20         li    tmp0,1                ; \ Set default color scheme
     3298 0001     
0034 329A C804  38         mov   tmp0,@tv.colorscheme  ; /
     329C A212     
0035               
0036 329E 04E0  34         clr   @tv.task.oneshot      ; Reset pointer to oneshot task
     32A0 A224     
0037 32A2 E0A0  34         soc   @wbit10,config        ; Assume ALPHA LOCK is down
     32A4 200C     
0038               
0039 32A6 0204  20         li    tmp0,fj.bottom
     32A8 B000     
0040 32AA C804  38         mov   tmp0,@tv.fj.stackpnt  ; Set pointer to farjump return stack
     32AC A226     
0041                       ;------------------------------------------------------
0042                       ; Set defaults
0043                       ;------------------------------------------------------
0044 32AE 06A0  32         bl    @cpym2m
     32B0 24E8     
0045 32B2 3AD6                   data def.printer.fname,tv.printer.fname,7
     32B4 DE00     
     32B6 0007     
0046               
0047 32B8 06A0  32         bl    @cpym2m
     32BA 24E8     
0048 32BC 3ADD                   data def.clip.fname,tv.clip.fname,10
     32BE DE50     
     32C0 000A     
0049                       ;-------------------------------------------------------
0050                       ; Exit
0051                       ;-------------------------------------------------------
0052               tv.init.exit:
0053 32C2 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0054 32C4 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0055 32C6 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0056 32C8 C2F9  30         mov   *stack+,r11           ; Pop R11
0057 32CA 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0015                       copy  "tv.quit.asm"            ; Exit Stevie and return to monitor
     **** ****     > tv.quit.asm
0001               * FILE......: tv.quit.asm
0002               * Purpose...: Quit Stevie and return to monitor
0003               
0004               ***************************************************************
0005               * tv.quit
0006               * Quit stevie and return to monitor
0007               ***************************************************************
0008               * b    @tv.quit
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               ***************************************************************
0019               tv.quit:
0020                       ;-------------------------------------------------------
0021                       ; Reset/lock F18a
0022                       ;-------------------------------------------------------
0023 32CC 06A0  32         bl    @f18rst               ; Reset and lock the F18A
     32CE 27B4     
0024                       ;-------------------------------------------------------
0025                       ; Load legacy SAMS page layout and exit to monitor
0026                       ;-------------------------------------------------------
0027 32D0 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     32D2 2F98     
0028 32D4 600E                   data bank7.rom        ; | i  p0 = bank address
0029 32D6 7FC0                   data bankx.vectab     ; | i  p1 = Vector with target address
0030 32D8 600E                   data bankid           ; / i  p2 = Source ROM bank for return
0031               
0032                       ; We never return here. We call @mem.sams.set.legacy (vector1) and
0033                       ; in there activate bank 0 in cartridge space and return to monitor.
0034                       ;
0035                       ; Reason for doing so is that @tv.quit is located in
0036                       ; low memory expansion. So switching SAMS banks or turning off the SAMS
0037                       ; mapper results in invalid OPCODE's because the program just isn't
0038                       ; there in low memory expansion anymore.
                   < ram.resident.asm
0016                       copy  "tv.reset.asm"           ; Reset editor (clear buffers)
     **** ****     > tv.reset.asm
0001               * FILE......: tv.reset.asm
0002               * Purpose...: Reset editor (clear buffers)
0003               
0004               
0005               ***************************************************************
0006               * tv.reset
0007               * Reset editor (clear buffers)
0008               ***************************************************************
0009               * bl @tv.reset
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * none
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * r11
0019               *--------------------------------------------------------------
0020               * Notes
0021               ********|*****|*********************|**************************
0022               tv.reset:
0023 32DA 0649  14         dect  stack
0024 32DC C64B  30         mov   r11,*stack            ; Save return address
0025                       ;------------------------------------------------------
0026                       ; Reset editor
0027                       ;------------------------------------------------------
0028 32DE 06A0  32         bl    @cmdb.init            ; Initialize command buffer
     32E0 321A     
0029 32E2 06A0  32         bl    @edb.init             ; Initialize editor buffer
     32E4 31D0     
0030 32E6 06A0  32         bl    @idx.init             ; Initialize index
     32E8 30D0     
0031 32EA 06A0  32         bl    @fb.init              ; Initialize framebuffer
     32EC 3028     
0032 32EE 06A0  32         bl    @errpane.init         ; Initialize error pane
     32F0 3256     
0033                       ;------------------------------------------------------
0034                       ; Remove markers and shortcuts
0035                       ;------------------------------------------------------
0036 32F2 06A0  32         bl    @hchar
     32F4 27E0     
0037 32F6 0034                   byte 0,52,32,18       ; Remove markers
     32F8 2012     
0038 32FA 1D00                   byte pane.botrow,0,32,51
     32FC 2033     
0039 32FE FFFF                   data eol              ; Remove block shortcuts
0040                       ;-------------------------------------------------------
0041                       ; Exit
0042                       ;-------------------------------------------------------
0043               tv.reset.exit:
0044 3300 C2F9  30         mov   *stack+,r11           ; Pop R11
0045 3302 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0017                       copy  "tv.unpack.uint16.asm"   ; Unpack 16bit unsigned integer to string
     **** ****     > tv.unpack.uint16.asm
0001               * FILE......: tv.unpack.uint16.asm
0002               * Purpose...: Unpack 16bit unsigned integer to string
0003               
0004               ***************************************************************
0005               * tv.unpack.uint16
0006               * Unpack 16bit unsigned integer to string
0007               ***************************************************************
0008               * bl @tv.unpack.uint16
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = 16bit unsigned integer
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @unpacked.string = Length-prefixed string with unpacked uint16
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               ***************************************************************
0019               tv.unpack.uint16:
0020 3304 0649  14         dect  stack
0021 3306 C64B  30         mov   r11,*stack            ; Save return address
0022 3308 0649  14         dect  stack
0023 330A C644  30         mov   tmp0,*stack           ; Push tmp0
0024                       ;------------------------------------------------------
0025                       ; Initialize
0026                       ;------------------------------------------------------
0027 330C 06A0  32         bl    @mknum                ; Convert unsigned number to string
     330E 29B4     
0028 3310 A006                   data parm1            ; \ i p0  = Pointer to 16bit unsigned number
0029 3312 A100                   data rambuf           ; | i p1  = Pointer to 5 byte string buffer
0030 3314 30                     byte 48               ; | i p2H = Offset for ASCII digit 0
0031 3315   20                   byte 32               ; / i p2L = Char for replacing leading 0's
0032               
0033 3316 0204  20         li    tmp0,unpacked.string
     3318 A02C     
0034 331A 04F4  30         clr   *tmp0+                ; Clear string 01
0035 331C 04F4  30         clr   *tmp0+                ; Clear string 23
0036 331E 04F4  30         clr   *tmp0+                ; Clear string 34
0037               
0038 3320 06A0  32         bl    @trimnum              ; Trim unsigned number string
     3322 2A0C     
0039 3324 A100                   data rambuf           ; \ i p0  = Pointer to 5 byte string buffer
0040 3326 A02C                   data unpacked.string  ; | i p1  = Pointer to output buffer
0041 3328 0020                   data 32               ; / i p2  = Padding char to match against
0042                       ;-------------------------------------------------------
0043                       ; Exit
0044                       ;-------------------------------------------------------
0045               tv.unpack.uint16.exit:
0046 332A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0047 332C C2F9  30         mov   *stack+,r11           ; Pop r11
0048 332E 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0018                       copy  "tv.pad.string.asm"      ; Pad string to specified length
     **** ****     > tv.pad.string.asm
0001               * FILE......: tv.pad.string.asm
0002               * Purpose...: pad string to specified length
0003               
0004               
0005               ***************************************************************
0006               * tv.pad.string
0007               * pad string to specified length
0008               ***************************************************************
0009               * bl @tv.pad.string
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @parm1 = Pointer to length-prefixed string
0013               * @parm2 = Requested length
0014               * @parm3 = Fill character
0015               * @parm4 = Pointer to string buffer
0016               *--------------------------------------------------------------
0017               * OUTPUT
0018               * @outparm1 = Pointer to padded string
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * none
0022               ***************************************************************
0023               tv.pad.string:
0024 3330 0649  14         dect  stack
0025 3332 C64B  30         mov   r11,*stack            ; Push return address
0026 3334 0649  14         dect  stack
0027 3336 C644  30         mov   tmp0,*stack           ; Push tmp0
0028 3338 0649  14         dect  stack
0029 333A C645  30         mov   tmp1,*stack           ; Push tmp1
0030 333C 0649  14         dect  stack
0031 333E C646  30         mov   tmp2,*stack           ; Push tmp2
0032 3340 0649  14         dect  stack
0033 3342 C647  30         mov   tmp3,*stack           ; Push tmp3
0034                       ;------------------------------------------------------
0035                       ; Asserts
0036                       ;------------------------------------------------------
0037 3344 C120  34         mov   @parm1,tmp0           ; \ Get string prefix (length-byte)
     3346 A006     
0038 3348 D194  26         movb  *tmp0,tmp2            ; /
0039 334A 0986  32         srl   tmp2,8                ; Right align
0040 334C C1C6  18         mov   tmp2,tmp3             ; Make copy of length-byte for later use
0041               
0042 334E 8806  34         c     tmp2,@parm2           ; String length > requested length?
     3350 A008     
0043 3352 1520  14         jgt   tv.pad.string.panic   ; Yes, crash
0044                       ;------------------------------------------------------
0045                       ; Copy string to buffer
0046                       ;------------------------------------------------------
0047 3354 C120  34         mov   @parm1,tmp0           ; Get source address
     3356 A006     
0048 3358 C160  34         mov   @parm4,tmp1           ; Get destination address
     335A A00C     
0049 335C 0586  14         inc   tmp2                  ; Also include length-byte in copy
0050               
0051 335E 0649  14         dect  stack
0052 3360 C647  30         mov   tmp3,*stack           ; Push tmp3 (get overwritten by xpym2m)
0053               
0054 3362 06A0  32         bl    @xpym2m               ; Copy length-prefix string to buffer
     3364 24EE     
0055                                                   ; \ i  tmp0 = Source CPU memory address
0056                                                   ; | i  tmp1 = Target CPU memory address
0057                                                   ; / i  tmp2 = Number of bytes to copy
0058               
0059 3366 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0060                       ;------------------------------------------------------
0061                       ; Set length of new string
0062                       ;------------------------------------------------------
0063 3368 C120  34         mov   @parm2,tmp0           ; Get requested length
     336A A008     
0064 336C 0A84  32         sla   tmp0,8                ; Left align
0065 336E C160  34         mov   @parm4,tmp1           ; Get pointer to buffer
     3370 A00C     
0066 3372 D544  30         movb  tmp0,*tmp1            ; Set new length of string
0067 3374 A147  18         a     tmp3,tmp1             ; \ Skip to end of string
0068 3376 0585  14         inc   tmp1                  ; /
0069                       ;------------------------------------------------------
0070                       ; Prepare for padding string
0071                       ;------------------------------------------------------
0072 3378 C1A0  34         mov   @parm2,tmp2           ; \ Get number of bytes to fill
     337A A008     
0073 337C 6187  18         s     tmp3,tmp2             ; |
0074 337E 0586  14         inc   tmp2                  ; /
0075               
0076 3380 C120  34         mov   @parm3,tmp0           ; Get byte to padd
     3382 A00A     
0077 3384 0A84  32         sla   tmp0,8                ; Left align
0078                       ;------------------------------------------------------
0079                       ; Right-pad string to destination length
0080                       ;------------------------------------------------------
0081               tv.pad.string.loop:
0082 3386 DD44  32         movb  tmp0,*tmp1+           ; Pad character
0083 3388 0606  14         dec   tmp2                  ; Update loop counter
0084 338A 15FD  14         jgt   tv.pad.string.loop    ; Next character
0085               
0086 338C C820  54         mov   @parm4,@outparm1      ; Set pointer to padded string
     338E A00C     
     3390 A016     
0087 3392 1004  14         jmp   tv.pad.string.exit    ; Exit
0088                       ;-----------------------------------------------------------------------
0089                       ; CPU crash
0090                       ;-----------------------------------------------------------------------
0091               tv.pad.string.panic:
0092 3394 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     3396 FFCE     
0093 3398 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     339A 2026     
0094                       ;------------------------------------------------------
0095                       ; Exit
0096                       ;------------------------------------------------------
0097               tv.pad.string.exit:
0098 339C C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0099 339E C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0100 33A0 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0101 33A2 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0102 33A4 C2F9  30         mov   *stack+,r11           ; Pop r11
0103 33A6 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0019                       ;-----------------------------------------------------------------------
0020                       ; Logic for Index management
0021                       ;-----------------------------------------------------------------------
0022                       copy  "idx.update.asm"         ; Index management - Update entry
     **** ****     > idx.update.asm
0001               * FILE......: idx.update.asm
0002               * Purpose...: Update index entry
0003               
0004               ***************************************************************
0005               * idx.entry.update
0006               * Update index entry - Each entry corresponds to a line
0007               ***************************************************************
0008               * bl @idx.entry.update
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1    = Line number in editor buffer
0012               * @parm2    = Pointer to line in editor buffer
0013               * @parm3    = SAMS page
0014               *--------------------------------------------------------------
0015               * OUTPUT
0016               * @outparm1 = Pointer to updated index entry
0017               *--------------------------------------------------------------
0018               * Register usage
0019               * tmp0,tmp1,tmp2
0020               ********|*****|*********************|**************************
0021               idx.entry.update:
0022 33A8 0649  14         dect  stack
0023 33AA C64B  30         mov   r11,*stack            ; Save return address
0024 33AC 0649  14         dect  stack
0025 33AE C644  30         mov   tmp0,*stack           ; Push tmp0
0026 33B0 0649  14         dect  stack
0027 33B2 C645  30         mov   tmp1,*stack           ; Push tmp1
0028                       ;------------------------------------------------------
0029                       ; Get parameters
0030                       ;------------------------------------------------------
0031 33B4 C120  34         mov   @parm1,tmp0           ; Get line number
     33B6 A006     
0032 33B8 C160  34         mov   @parm2,tmp1           ; Get pointer
     33BA A008     
0033 33BC 1312  14         jeq   idx.entry.update.clear
0034                                                   ; Special handling for "null"-pointer
0035                       ;------------------------------------------------------
0036                       ; Calculate LSB value index slot (pointer offset)
0037                       ;------------------------------------------------------
0038 33BE 0245  22         andi  tmp1,>0fff            ; Remove high-nibble from pointer
     33C0 0FFF     
0039 33C2 0945  24         srl   tmp1,4                ; Get offset (divide by 16)
0040                       ;------------------------------------------------------
0041                       ; Calculate MSB value index slot (SAMS page editor buffer)
0042                       ;------------------------------------------------------
0043 33C4 06E0  34         swpb  @parm3
     33C6 A00A     
0044 33C8 D160  34         movb  @parm3,tmp1           ; Put SAMS page in MSB
     33CA A00A     
0045 33CC 06E0  34         swpb  @parm3                ; \ Restore original order again,
     33CE A00A     
0046                                                   ; / important for messing up caller parm3!
0047                       ;------------------------------------------------------
0048                       ; Update index slot
0049                       ;------------------------------------------------------
0050               idx.entry.update.save:
0051 33D0 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     33D2 3180     
0052                                                   ; \ i  tmp0     = Line number
0053                                                   ; / o  outparm1 = Slot offset in SAMS page
0054               
0055 33D4 C120  34         mov   @outparm1,tmp0        ; \ Update index slot
     33D6 A016     
0056 33D8 C905  38         mov   tmp1,@idx.top(tmp0)   ; /
     33DA B000     
0057 33DC C804  38         mov   tmp0,@outparm1        ; Pointer to updated index entry
     33DE A016     
0058 33E0 1008  14         jmp   idx.entry.update.exit
0059                       ;------------------------------------------------------
0060                       ; Special handling for "null"-pointer
0061                       ;------------------------------------------------------
0062               idx.entry.update.clear:
0063 33E2 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     33E4 3180     
0064                                                   ; \ i  tmp0     = Line number
0065                                                   ; / o  outparm1 = Slot offset in SAMS page
0066               
0067 33E6 C120  34         mov   @outparm1,tmp0        ; \ Clear index slot
     33E8 A016     
0068 33EA 04E4  34         clr   @idx.top(tmp0)        ; /
     33EC B000     
0069 33EE C804  38         mov   tmp0,@outparm1        ; Pointer to updated index entry
     33F0 A016     
0070                       ;------------------------------------------------------
0071                       ; Exit
0072                       ;------------------------------------------------------
0073               idx.entry.update.exit:
0074 33F2 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0075 33F4 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0076 33F6 C2F9  30         mov   *stack+,r11           ; Pop r11
0077 33F8 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0023                       copy  "idx.pointer.asm"        ; Index management - Get pointer to line
     **** ****     > idx.pointer.asm
0001               * FILE......: idx.pointer.asm
0002               * Purpose...: Get pointer to line in editor buffer
0003               
0004               ***************************************************************
0005               * idx.pointer.get
0006               * Get pointer to editor buffer line content
0007               ***************************************************************
0008               * bl @idx.pointer.get
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Line number in editor buffer
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @outparm1 = Pointer to editor buffer line content
0015               * @outparm2 = SAMS page
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0,tmp1,tmp2
0019               ********|*****|*********************|**************************
0020               idx.pointer.get:
0021 33FA 0649  14         dect  stack
0022 33FC C64B  30         mov   r11,*stack            ; Save return address
0023 33FE 0649  14         dect  stack
0024 3400 C644  30         mov   tmp0,*stack           ; Push tmp0
0025 3402 0649  14         dect  stack
0026 3404 C645  30         mov   tmp1,*stack           ; Push tmp1
0027 3406 0649  14         dect  stack
0028 3408 C646  30         mov   tmp2,*stack           ; Push tmp2
0029                       ;------------------------------------------------------
0030                       ; Get slot entry
0031                       ;------------------------------------------------------
0032 340A C120  34         mov   @parm1,tmp0           ; Line number in editor buffer
     340C A006     
0033               
0034 340E 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page with index slot
     3410 3180     
0035                                                   ; \ i  tmp0     = Line number
0036                                                   ; / o  outparm1 = Slot offset in SAMS page
0037               
0038 3412 C120  34         mov   @outparm1,tmp0        ; \ Get slot entry
     3414 A016     
0039 3416 C164  34         mov   @idx.top(tmp0),tmp1   ; /
     3418 B000     
0040               
0041 341A 130C  14         jeq   idx.pointer.get.parm.null
0042                                                   ; Skip if index slot empty
0043                       ;------------------------------------------------------
0044                       ; Calculate MSB (SAMS page)
0045                       ;------------------------------------------------------
0046 341C C185  18         mov   tmp1,tmp2             ; \
0047 341E 0986  32         srl   tmp2,8                ; / Right align SAMS page
0048                       ;------------------------------------------------------
0049                       ; Calculate LSB (pointer address)
0050                       ;------------------------------------------------------
0051 3420 0245  22         andi  tmp1,>00ff            ; Get rid of MSB (SAMS page)
     3422 00FF     
0052 3424 0A45  24         sla   tmp1,4                ; Multiply with 16
0053 3426 0225  22         ai    tmp1,edb.top          ; Add editor buffer base address
     3428 C000     
0054                       ;------------------------------------------------------
0055                       ; Return parameters
0056                       ;------------------------------------------------------
0057               idx.pointer.get.parm:
0058 342A C805  38         mov   tmp1,@outparm1        ; Index slot -> Pointer
     342C A016     
0059 342E C806  38         mov   tmp2,@outparm2        ; Index slot -> SAMS page
     3430 A018     
0060 3432 1004  14         jmp   idx.pointer.get.exit
0061                       ;------------------------------------------------------
0062                       ; Special handling for "null"-pointer
0063                       ;------------------------------------------------------
0064               idx.pointer.get.parm.null:
0065 3434 04E0  34         clr   @outparm1
     3436 A016     
0066 3438 04E0  34         clr   @outparm2
     343A A018     
0067                       ;------------------------------------------------------
0068                       ; Exit
0069                       ;------------------------------------------------------
0070               idx.pointer.get.exit:
0071 343C C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0072 343E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0073 3440 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0074 3442 C2F9  30         mov   *stack+,r11           ; Pop r11
0075 3444 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0024                       copy  "idx.delete.asm"         ; Index management - delete slot
     **** ****     > idx.delete.asm
0001               * FILE......: idx_delete.asm
0002               * Purpose...: Delete index entry
0003               
0004               ***************************************************************
0005               * _idx.entry.delete.reorg
0006               * Reorganize index slot entries
0007               ***************************************************************
0008               * bl @_idx.entry.delete.reorg
0009               *--------------------------------------------------------------
0010               *  Remarks
0011               *  Private, only to be called from idx_entry_delete
0012               ********|*****|*********************|**************************
0013               _idx.entry.delete.reorg:
0014                       ;------------------------------------------------------
0015                       ; Reorganize index entries
0016                       ;------------------------------------------------------
0017 3446 0224  22         ai    tmp0,idx.top          ; Add index base to offset
     3448 B000     
0018 344A C144  18         mov   tmp0,tmp1             ; a = current slot
0019 344C 05C5  14         inct  tmp1                  ; b = current slot + 2
0020                       ;------------------------------------------------------
0021                       ; Loop forward until end of index
0022                       ;------------------------------------------------------
0023               _idx.entry.delete.reorg.loop:
0024 344E CD35  46         mov   *tmp1+,*tmp0+         ; Copy b -> a
0025 3450 0606  14         dec   tmp2                  ; tmp2--
0026 3452 16FD  14         jne   _idx.entry.delete.reorg.loop
0027                                                   ; Loop unless completed
0028 3454 045B  20         b     *r11                  ; Return to caller
0029               
0030               
0031               
0032               ***************************************************************
0033               * idx.entry.delete
0034               * Delete index entry - Close gap created by delete
0035               ***************************************************************
0036               * bl @idx.entry.delete
0037               *--------------------------------------------------------------
0038               * INPUT
0039               * @parm1    = Line number in editor buffer to delete
0040               * @parm2    = Line number of last line to check for reorg
0041               *--------------------------------------------------------------
0042               * Register usage
0043               * tmp0,tmp1,tmp2,tmp3
0044               ********|*****|*********************|**************************
0045               idx.entry.delete:
0046 3456 0649  14         dect  stack
0047 3458 C64B  30         mov   r11,*stack            ; Save return address
0048 345A 0649  14         dect  stack
0049 345C C644  30         mov   tmp0,*stack           ; Push tmp0
0050 345E 0649  14         dect  stack
0051 3460 C645  30         mov   tmp1,*stack           ; Push tmp1
0052 3462 0649  14         dect  stack
0053 3464 C646  30         mov   tmp2,*stack           ; Push tmp2
0054 3466 0649  14         dect  stack
0055 3468 C647  30         mov   tmp3,*stack           ; Push tmp3
0056                       ;------------------------------------------------------
0057                       ; Get index slot
0058                       ;------------------------------------------------------
0059 346A C120  34         mov   @parm1,tmp0           ; Line number in editor buffer
     346C A006     
0060               
0061 346E 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     3470 3180     
0062                                                   ; \ i  tmp0     = Line number
0063                                                   ; / o  outparm1 = Slot offset in SAMS page
0064               
0065 3472 C120  34         mov   @outparm1,tmp0        ; Index offset
     3474 A016     
0066                       ;------------------------------------------------------
0067                       ; Prepare for index reorg
0068                       ;------------------------------------------------------
0069 3476 C1A0  34         mov   @parm2,tmp2           ; Get last line to check
     3478 A008     
0070 347A 1303  14         jeq   idx.entry.delete.lastline
0071                                                   ; Exit early if last line = 0
0072               
0073 347C 61A0  34         s     @parm1,tmp2           ; Calculate loop
     347E A006     
0074 3480 1504  14         jgt   idx.entry.delete.reorg
0075                                                   ; Reorganize if loop counter > 0
0076                       ;------------------------------------------------------
0077                       ; Special treatment for last line
0078                       ;------------------------------------------------------
0079               idx.entry.delete.lastline:
0080 3482 0224  22         ai    tmp0,idx.top          ; Add index base to offset
     3484 B000     
0081 3486 04D4  26         clr   *tmp0                 ; Clear index entry
0082 3488 1012  14         jmp   idx.entry.delete.exit ; Exit early
0083                       ;------------------------------------------------------
0084                       ; Reorganize index entries
0085                       ;------------------------------------------------------
0086               idx.entry.delete.reorg:
0087 348A C1E0  34         mov   @parm2,tmp3           ; Get last line to reorganize
     348C A008     
0088 348E 0287  22         ci    tmp3,2048
     3490 0800     
0089 3492 120A  14         jle   idx.entry.delete.reorg.simple
0090                                                   ; Do simple reorg only if single
0091                                                   ; SAMS index page, otherwise complex reorg.
0092                       ;------------------------------------------------------
0093                       ; Complex index reorganization (multiple SAMS pages)
0094                       ;------------------------------------------------------
0095               idx.entry.delete.reorg.complex:
0096 3494 06A0  32         bl    @_idx.sams.mapcolumn.on
     3496 3112     
0097                                                   ; Index in continuous memory region
0098               
0099                       ;-------------------------------------------------------
0100                       ; Recalculate index offset in continuous memory region
0101                       ;-------------------------------------------------------
0102 3498 C120  34         mov   @parm1,tmp0           ; Restore line number
     349A A006     
0103 349C 0A14  18         sla   tmp0,1                ; Calculate offset
0104               
0105 349E 06A0  32         bl    @_idx.entry.delete.reorg
     34A0 3446     
0106                                                   ; Reorganize index
0107                                                   ; \ i  tmp0 = Index offset
0108                                                   ; / i  tmp2 = Loop count
0109               
0110 34A2 06A0  32         bl    @_idx.sams.mapcolumn.off
     34A4 3146     
0111                                                   ; Restore memory window layout
0112               
0113 34A6 1002  14         jmp   !
0114                       ;------------------------------------------------------
0115                       ; Simple index reorganization
0116                       ;------------------------------------------------------
0117               idx.entry.delete.reorg.simple:
0118 34A8 06A0  32         bl    @_idx.entry.delete.reorg
     34AA 3446     
0119                       ;------------------------------------------------------
0120                       ; Clear index entry (base + offset already set)
0121                       ;------------------------------------------------------
0122 34AC 04D4  26 !       clr   *tmp0                 ; Clear index entry
0123                       ;------------------------------------------------------
0124                       ; Exit
0125                       ;------------------------------------------------------
0126               idx.entry.delete.exit:
0127 34AE C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0128 34B0 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0129 34B2 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0130 34B4 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0131 34B6 C2F9  30         mov   *stack+,r11           ; Pop r11
0132 34B8 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0025                       copy  "idx.insert.asm"         ; Index management - insert slot
     **** ****     > idx.insert.asm
0001               * FILE......: idx.insert.asm
0002               * Purpose...: Insert index entry
0003               
0004               ***************************************************************
0005               * _idx.entry.insert.reorg
0006               * Reorganize index slot entries
0007               ***************************************************************
0008               * bl @_idx.entry.insert.reorg
0009               *--------------------------------------------------------------
0010               *  Remarks
0011               *  Private, only to be called from idx_entry_insert
0012               ********|*****|*********************|**************************
0013               _idx.entry.insert.reorg:
0014                       ;------------------------------------------------------
0015                       ; Assert 1
0016                       ;------------------------------------------------------
0017 34BA 0286  22         ci    tmp2,2048*5           ; Crash if loop counter value is unrealistic
     34BC 2800     
0018                                                   ; Max. 5 SAMS pages, each with 2048 index
0019                                                   ; entries.
0020               
0021 34BE 1204  14         jle   !                     ; Continue if ok
0022                       ;------------------------------------------------------
0023                       ; Crash and burn
0024                       ;------------------------------------------------------
0025               _idx.entry.insert.reorg.crash:
0026 34C0 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     34C2 FFCE     
0027 34C4 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     34C6 2026     
0028                       ;------------------------------------------------------
0029                       ; Reorganize index entries
0030                       ;------------------------------------------------------
0031 34C8 0224  22 !       ai    tmp0,idx.top          ; Add index base to offset
     34CA B000     
0032 34CC C144  18         mov   tmp0,tmp1             ; a = current slot
0033 34CE 05C5  14         inct  tmp1                  ; b = current slot + 2
0034 34D0 0586  14         inc   tmp2                  ; One time adjustment for current line
0035                       ;------------------------------------------------------
0036                       ; Assert 2
0037                       ;------------------------------------------------------
0038 34D2 C1C6  18         mov   tmp2,tmp3             ; Number of slots to reorganize
0039 34D4 0A17  18         sla   tmp3,1                ; adjust to slot size
0040 34D6 0507  14         neg   tmp3                  ; tmp3 = -tmp3
0041 34D8 A1C4  18         a     tmp0,tmp3             ; tmp3 = tmp3 + tmp0
0042 34DA 0287  22         ci    tmp3,idx.top - 4      ; Address before top of index ?
     34DC AFFC     
0043 34DE 1504  14         jgt   _idx.entry.insert.reorg.loop
0044                                                   ; No, jump to loop start
0045                       ;------------------------------------------------------
0046                       ; Crash and burn
0047                       ;------------------------------------------------------
0048 34E0 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     34E2 FFCE     
0049 34E4 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     34E6 2026     
0050                       ;------------------------------------------------------
0051                       ; Loop backwards from end of index up to insert point
0052                       ;------------------------------------------------------
0053               _idx.entry.insert.reorg.loop:
0054 34E8 C554  38         mov   *tmp0,*tmp1           ; Copy a -> b
0055 34EA 0644  14         dect  tmp0                  ; Move pointer up
0056 34EC 0645  14         dect  tmp1                  ; Move pointer up
0057 34EE 0606  14         dec   tmp2                  ; Next index entry
0058 34F0 15FB  14         jgt   _idx.entry.insert.reorg.loop
0059                                                   ; Repeat until done
0060                       ;------------------------------------------------------
0061                       ; Clear index entry at insert point
0062                       ;------------------------------------------------------
0063 34F2 05C4  14         inct  tmp0                  ; \ Clear index entry for line
0064 34F4 04D4  26         clr   *tmp0                 ; / following insert point
0065               
0066 34F6 045B  20         b     *r11                  ; Return to caller
0067               
0068               
0069               
0070               
0071               ***************************************************************
0072               * idx.entry.insert
0073               * Insert index entry
0074               ***************************************************************
0075               * bl @idx.entry.insert
0076               *--------------------------------------------------------------
0077               * INPUT
0078               * @parm1    = Line number in editor buffer to insert
0079               * @parm2    = Line number of last line to check for reorg
0080               *--------------------------------------------------------------
0081               * OUTPUT
0082               * NONE
0083               *--------------------------------------------------------------
0084               * Register usage
0085               * tmp0,tmp2
0086               ********|*****|*********************|**************************
0087               idx.entry.insert:
0088 34F8 0649  14         dect  stack
0089 34FA C64B  30         mov   r11,*stack            ; Save return address
0090 34FC 0649  14         dect  stack
0091 34FE C644  30         mov   tmp0,*stack           ; Push tmp0
0092 3500 0649  14         dect  stack
0093 3502 C645  30         mov   tmp1,*stack           ; Push tmp1
0094 3504 0649  14         dect  stack
0095 3506 C646  30         mov   tmp2,*stack           ; Push tmp2
0096 3508 0649  14         dect  stack
0097 350A C647  30         mov   tmp3,*stack           ; Push tmp3
0098                       ;------------------------------------------------------
0099                       ; Prepare for index reorg
0100                       ;------------------------------------------------------
0101 350C C1A0  34         mov   @parm2,tmp2           ; Get last line to check
     350E A008     
0102 3510 61A0  34         s     @parm1,tmp2           ; Calculate loop
     3512 A006     
0103 3514 130F  14         jeq   idx.entry.insert.reorg.simple
0104                                                   ; Special treatment if last line
0105                       ;------------------------------------------------------
0106                       ; Reorganize index entries
0107                       ;------------------------------------------------------
0108               idx.entry.insert.reorg:
0109 3516 C1E0  34         mov   @parm2,tmp3
     3518 A008     
0110 351A 0287  22         ci    tmp3,2048
     351C 0800     
0111 351E 110A  14         jlt   idx.entry.insert.reorg.simple
0112                                                   ; Do simple reorg only if single
0113                                                   ; SAMS index page, otherwise complex reorg.
0114                       ;------------------------------------------------------
0115                       ; Complex index reorganization (multiple SAMS pages)
0116                       ;------------------------------------------------------
0117               idx.entry.insert.reorg.complex:
0118 3520 06A0  32         bl    @_idx.sams.mapcolumn.on
     3522 3112     
0119                                                   ; Index in continuous memory region
0120                                                   ; b000 - ffff (5 SAMS pages)
0121               
0122 3524 C120  34         mov   @parm2,tmp0           ; Last line number in editor buffer
     3526 A008     
0123 3528 0A14  18         sla   tmp0,1                ; tmp0 * 2
0124               
0125 352A 06A0  32         bl    @_idx.entry.insert.reorg
     352C 34BA     
0126                                                   ; Reorganize index
0127                                                   ; \ i  tmp0 = Last line in index
0128                                                   ; / i  tmp2 = Num. of index entries to move
0129               
0130 352E 06A0  32         bl    @_idx.sams.mapcolumn.off
     3530 3146     
0131                                                   ; Restore memory window layout
0132               
0133 3532 1008  14         jmp   idx.entry.insert.exit
0134                       ;------------------------------------------------------
0135                       ; Simple index reorganization
0136                       ;------------------------------------------------------
0137               idx.entry.insert.reorg.simple:
0138 3534 C120  34         mov   @parm2,tmp0           ; Last line number in editor buffer
     3536 A008     
0139               
0140 3538 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     353A 3180     
0141                                                   ; \ i  tmp0     = Line number
0142                                                   ; / o  outparm1 = Slot offset in SAMS page
0143               
0144 353C C120  34         mov   @outparm1,tmp0        ; Index offset
     353E A016     
0145               
0146 3540 06A0  32         bl    @_idx.entry.insert.reorg
     3542 34BA     
0147                                                   ; Reorganize index
0148                                                   ; \ i  tmp0 = Last line in index
0149                                                   ; / i  tmp2 = Num. of index entries to move
0150               
0151                       ;------------------------------------------------------
0152                       ; Exit
0153                       ;------------------------------------------------------
0154               idx.entry.insert.exit:
0155 3544 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0156 3546 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0157 3548 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0158 354A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0159 354C C2F9  30         mov   *stack+,r11           ; Pop r11
0160 354E 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0026                       ;-----------------------------------------------------------------------
0027                       ; Logic for editor buffer
0028                       ;-----------------------------------------------------------------------
0029                       copy  "edb.line.mappage.asm"   ; Activate edbuf SAMS page for line
     **** ****     > edb.line.mappage.asm
0001               * FILE......: edb.line.mappage.asm
0002               * Purpose...: Editor buffer SAMS setup
0003               
0004               
0005               ***************************************************************
0006               * edb.line.mappage
0007               * Activate editor buffer SAMS page for line
0008               ***************************************************************
0009               * bl  @edb.line.mappage
0010               *
0011               * tmp0 = Line number in editor buffer
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * outparm1 = Pointer to line in editor buffer
0015               * outparm2 = SAMS page
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0, tmp1
0019               ***************************************************************
0020               edb.line.mappage:
0021 3550 0649  14         dect  stack
0022 3552 C64B  30         mov   r11,*stack            ; Push return address
0023 3554 0649  14         dect  stack
0024 3556 C644  30         mov   tmp0,*stack           ; Push tmp0
0025 3558 0649  14         dect  stack
0026 355A C645  30         mov   tmp1,*stack           ; Push tmp1
0027                       ;------------------------------------------------------
0028                       ; Assert
0029                       ;------------------------------------------------------
0030 355C 8804  34         c     tmp0,@edb.lines       ; Non-existing line?
     355E A504     
0031 3560 1204  14         jle   edb.line.mappage.lookup
0032                                                   ; All checks passed, continue
0033                                                   ;--------------------------
0034                                                   ; Assert failed
0035                                                   ;--------------------------
0036 3562 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     3564 FFCE     
0037 3566 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     3568 2026     
0038                       ;------------------------------------------------------
0039                       ; Lookup SAMS page for line in parm1
0040                       ;------------------------------------------------------
0041               edb.line.mappage.lookup:
0042 356A C804  38         mov   tmp0,@parm1           ; Set line number in editor buffer
     356C A006     
0043               
0044 356E 06A0  32         bl    @idx.pointer.get      ; Get pointer to line
     3570 33FA     
0045                                                   ; \ i  parm1    = Line number
0046                                                   ; | o  outparm1 = Pointer to line
0047                                                   ; / o  outparm2 = SAMS page
0048               
0049 3572 C120  34         mov   @outparm2,tmp0        ; SAMS page
     3574 A018     
0050 3576 C160  34         mov   @outparm1,tmp1        ; Pointer to line
     3578 A016     
0051 357A 130B  14         jeq   edb.line.mappage.exit ; Nothing to page-in if NULL pointer
0052                                                   ; (=empty line)
0053                       ;------------------------------------------------------
0054                       ; Determine if requested SAMS page is already active
0055                       ;------------------------------------------------------
0056 357C 8120  34         c     @tv.sams.c000,tmp0    ; Compare with active page editor buffer
     357E A208     
0057 3580 1308  14         jeq   edb.line.mappage.exit ; Request page already active, so exit
0058                       ;------------------------------------------------------
0059                       ; Activate requested SAMS page
0060                       ;-----------------------------------------------------
0061 3582 06A0  32         bl    @xsams.page.set       ; Switch SAMS memory page
     3584 2584     
0062                                                   ; \ i  tmp0 = SAMS page
0063                                                   ; / i  tmp1 = Memory address
0064               
0065 3586 C820  54         mov   @outparm2,@tv.sams.c000
     3588 A018     
     358A A208     
0066                                                   ; Set page in shadow registers
0067               
0068 358C C820  54         mov   @outparm2,@edb.sams.page
     358E A018     
     3590 A518     
0069                                                   ; Set current SAMS page
0070                       ;------------------------------------------------------
0071                       ; Exit
0072                       ;------------------------------------------------------
0073               edb.line.mappage.exit:
0074 3592 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0075 3594 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0076 3596 C2F9  30         mov   *stack+,r11           ; Pop r11
0077 3598 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0030                       copy  "edb.line.getlen.asm"    ; Get line length
     **** ****     > edb.line.getlen.asm
0001               * FILE......: edb.line.getlen.asm
0002               * Purpose...: Get length of specified line in editor buffer
0003               
0004               ***************************************************************
0005               * edb.line.getlength
0006               * Get length of specified line
0007               ***************************************************************
0008               *  bl   @edb.line.getlength
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Line number (base 0)
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @outparm1 = Length of line
0015               * @outparm2 = SAMS page
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0,tmp1
0019               ********|*****|*********************|**************************
0020               edb.line.getlength:
0021 359A 0649  14         dect  stack
0022 359C C64B  30         mov   r11,*stack            ; Push return address
0023 359E 0649  14         dect  stack
0024 35A0 C644  30         mov   tmp0,*stack           ; Push tmp0
0025 35A2 0649  14         dect  stack
0026 35A4 C645  30         mov   tmp1,*stack           ; Push tmp1
0027                       ;------------------------------------------------------
0028                       ; Initialisation
0029                       ;------------------------------------------------------
0030 35A6 04E0  34         clr   @outparm1             ; Reset length
     35A8 A016     
0031 35AA 04E0  34         clr   @outparm2             ; Reset SAMS bank
     35AC A018     
0032                       ;------------------------------------------------------
0033                       ; Exit if requested line beyond editor buffer
0034                       ;------------------------------------------------------
0035 35AE C120  34         mov   @parm1,tmp0           ; \
     35B0 A006     
0036 35B2 0584  14         inc   tmp0                  ; /  base 1
0037               
0038 35B4 8804  34         c     tmp0,@edb.lines       ; Requested line at BOT?
     35B6 A504     
0039 35B8 1101  14         jlt   !                     ; No, continue processing
0040 35BA 100B  14         jmp   edb.line.getlength.null
0041                                                   ; Set length 0 and exit early
0042                       ;------------------------------------------------------
0043                       ; Map SAMS page
0044                       ;------------------------------------------------------
0045 35BC C120  34 !       mov   @parm1,tmp0           ; Get line
     35BE A006     
0046               
0047 35C0 06A0  32         bl    @edb.line.mappage     ; Activate editor buffer SAMS page for line
     35C2 3550     
0048                                                   ; \ i  tmp0     = Line number
0049                                                   ; | o  outparm1 = Pointer to line
0050                                                   ; / o  outparm2 = SAMS page
0051               
0052 35C4 C120  34         mov   @outparm1,tmp0        ; Store pointer in tmp0
     35C6 A016     
0053 35C8 1304  14         jeq   edb.line.getlength.null
0054                                                   ; Set length to 0 if null-pointer
0055                       ;------------------------------------------------------
0056                       ; Process line prefix and exit
0057                       ;------------------------------------------------------
0058 35CA C154  26         mov   *tmp0,tmp1            ; Get length into tmp1
0059 35CC C805  38         mov   tmp1,@outparm1        ; Save length
     35CE A016     
0060 35D0 1002  14         jmp   edb.line.getlength.exit
0061                       ;------------------------------------------------------
0062                       ; Set length to 0 if null-pointer
0063                       ;------------------------------------------------------
0064               edb.line.getlength.null:
0065 35D2 04E0  34         clr   @outparm1             ; Set length to 0, was a null-pointer
     35D4 A016     
0066                       ;------------------------------------------------------
0067                       ; Exit
0068                       ;------------------------------------------------------
0069               edb.line.getlength.exit:
0070 35D6 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0071 35D8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0072 35DA C2F9  30         mov   *stack+,r11           ; Pop r11
0073 35DC 045B  20         b     *r11                  ; Return to caller
0074               
0075               
0076               
0077               ***************************************************************
0078               * edb.line.getlength2
0079               * Get length of current row (as seen from editor buffer side)
0080               ***************************************************************
0081               *  bl   @edb.line.getlength2
0082               *--------------------------------------------------------------
0083               * INPUT
0084               * @fb.row = Row in frame buffer
0085               *--------------------------------------------------------------
0086               * OUTPUT
0087               * @fb.row.length = Length of row
0088               *--------------------------------------------------------------
0089               * Register usage
0090               * tmp0
0091               ********|*****|*********************|**************************
0092               edb.line.getlength2:
0093 35DE 0649  14         dect  stack
0094 35E0 C64B  30         mov   r11,*stack            ; Save return address
0095 35E2 0649  14         dect  stack
0096 35E4 C644  30         mov   tmp0,*stack           ; Push tmp0
0097                       ;------------------------------------------------------
0098                       ; Calculate line in editor buffer
0099                       ;------------------------------------------------------
0100 35E6 C120  34         mov   @fb.topline,tmp0      ; Get top line in frame buffer
     35E8 A304     
0101 35EA A120  34         a     @fb.row,tmp0          ; Get current row in frame buffer
     35EC A306     
0102                       ;------------------------------------------------------
0103                       ; Get length
0104                       ;------------------------------------------------------
0105 35EE C804  38         mov   tmp0,@parm1
     35F0 A006     
0106 35F2 06A0  32         bl    @edb.line.getlength
     35F4 359A     
0107 35F6 C820  54         mov   @outparm1,@fb.row.length
     35F8 A016     
     35FA A308     
0108                                                   ; Save row length
0109                       ;------------------------------------------------------
0110                       ; Exit
0111                       ;------------------------------------------------------
0112               edb.line.getlength2.exit:
0113 35FC C139  30         mov   *stack+,tmp0          ; Pop tmp0
0114 35FE C2F9  30         mov   *stack+,r11           ; Pop R11
0115 3600 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0031                       copy  "edb.hipage.alloc.asm"   ; Check/increase highest SAMS page
     **** ****     > edb.hipage.alloc.asm
0001               * FILE......: edb.hipage.alloc.asm
0002               * Purpose...: Editor buffer utilities
0003               
0004               
0005               ***************************************************************
0006               * edb.hipage.alloc
0007               * Check and increase highest SAMS page of editor buffer
0008               ***************************************************************
0009               *  bl   @edb.hipage.alloc
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @edb.next_free.ptr = Pointer to next free line
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0,tmp1
0018               ********|*****|*********************|**************************
0019               edb.hipage.alloc:
0020 3602 0649  14         dect  stack
0021 3604 C64B  30         mov   r11,*stack            ; Save return address
0022 3606 0649  14         dect  stack
0023 3608 C644  30         mov   tmp0,*stack           ; Push tmp0
0024 360A 0649  14         dect  stack
0025 360C C645  30         mov   tmp1,*stack           ; Push tmp1
0026                       ;------------------------------------------------------
0027                       ; 1a. Check if highest SAMS page needs to be increased
0028                       ;------------------------------------------------------
0029               edb.hipage.alloc.check_setpage:
0030 360E C120  34         mov   @edb.next_free.ptr,tmp0
     3610 A508     
0031                                                   ;--------------------------
0032                                                   ; Check for page overflow
0033                                                   ;--------------------------
0034 3612 0244  22         andi  tmp0,>0fff            ; Get rid of highest nibble
     3614 0FFF     
0035 3616 0224  22         ai    tmp0,82               ; Assume line of 80 chars (+2 bytes prefix)
     3618 0052     
0036 361A 0284  22         ci    tmp0,>1000 - 16       ; 4K boundary reached?
     361C 0FF0     
0037 361E 1105  14         jlt   edb.hipage.alloc.setpage
0038                                                   ; Not yet, don't increase SAMS page
0039                       ;------------------------------------------------------
0040                       ; 1b. Increase highest SAMS page (copy-on-write!)
0041                       ;------------------------------------------------------
0042 3620 05A0  34         inc   @edb.sams.hipage      ; Set highest SAMS page
     3622 A51A     
0043 3624 C820  54         mov   @edb.top.ptr,@edb.next_free.ptr
     3626 A500     
     3628 A508     
0044                                                   ; Start at top of SAMS page again
0045                       ;------------------------------------------------------
0046                       ; 1c. Switch to SAMS page and exit
0047                       ;------------------------------------------------------
0048               edb.hipage.alloc.setpage:
0049 362A C120  34         mov   @edb.sams.hipage,tmp0
     362C A51A     
0050 362E C160  34         mov   @edb.top.ptr,tmp1
     3630 A500     
0051 3632 06A0  32         bl    @xsams.page.set       ; Set SAMS page
     3634 2584     
0052                                                   ; \ i  tmp0 = SAMS page number
0053                                                   ; / i  tmp1 = Memory address
0054               
0055 3636 1004  14         jmp   edb.hipage.alloc.exit
0056                       ;------------------------------------------------------
0057                       ; Check failed, crash CPU!
0058                       ;------------------------------------------------------
0059               edb.hipage.alloc.crash:
0060 3638 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     363A FFCE     
0061 363C 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     363E 2026     
0062                       ;------------------------------------------------------
0063                       ; Exit
0064                       ;------------------------------------------------------
0065               edb.hipage.alloc.exit:
0066 3640 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0067 3642 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0068 3644 C2F9  30         mov   *stack+,r11           ; Pop R11
0069 3646 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0032                       ;-----------------------------------------------------------------------
0033                       ; Utility functions
0034                       ;-----------------------------------------------------------------------
0035                       copy  "pane.topline.clearmsg.asm"
     **** ****     > pane.topline.clearmsg.asm
0001               * FILE......: pane.topline.clearmsg.asm
0002               * Purpose...: One-shot task for clearing overlay message in top line
0003               
0004               
0005               ***************************************************************
0006               * pane.topline.oneshot.clearmsg
0007               * Remove overlay message in top line
0008               ***************************************************************
0009               * Runs as one-shot task in slot 3
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * none
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * none
0019               ********|*****|*********************|**************************
0020               pane.topline.oneshot.clearmsg:
0021 3648 0649  14         dect  stack
0022 364A C64B  30         mov   r11,*stack            ; Push return address
0023 364C 0649  14         dect  stack
0024 364E C660  42         mov   @wyx,*stack           ; Push cursor position
     3650 832A     
0025                       ;-------------------------------------------------------
0026                       ; Clear message
0027                       ;-------------------------------------------------------
0028 3652 06A0  32         bl    @hchar
     3654 27E0     
0029 3656 0034                   byte 0,52,32,18
     3658 2012     
0030 365A FFFF                   data EOL              ; Clear message
0031               
0032 365C 04E0  34         clr   @tv.task.oneshot      ; Reset oneshot task
     365E A224     
0033                       ;-------------------------------------------------------
0034                       ; Exit
0035                       ;-------------------------------------------------------
0036               pane.topline.oneshot.clearmsg.exit:
0037 3660 C839  42         mov   *stack+,@wyx          ; Pop cursor position
     3662 832A     
0038 3664 C2F9  30         mov   *stack+,r11           ; Pop R11
0039 3666 045B  20         b     *r11                  ; Return to task
                   < ram.resident.asm
0036                                                      ; Remove overlay messsage in top line
0037                       ;------------------------------------------------------
0038                       ; Program data
0039                       ;------------------------------------------------------
0040                       copy  "data.constants.asm"     ; Constants
     **** ****     > data.constants.asm
0001               * FILE......: data.constants.asm
0002               * Purpose...: Stevie Editor - data segment (constants)
0003               
0004               ***************************************************************
0005               *                      Constants
0006               ********|*****|*********************|**************************
0007               
0008               
0009               ***************************************************************
0010               * Textmode (80 columns, 30 rows) - F18A
0011               *--------------------------------------------------------------
0012               *
0013               * ; VDP#0 Control bits
0014               * ;      bit 6=0: M3 | Graphics 1 mode
0015               * ;      bit 7=0: Disable external VDP input
0016               * ; VDP#1 Control bits
0017               * ;      bit 0=1: 16K selection
0018               * ;      bit 1=1: Enable display
0019               * ;      bit 2=1: Enable VDP interrupt
0020               * ;      bit 3=1: M1 \ TEXT MODE
0021               * ;      bit 4=0: M2 /
0022               * ;      bit 5=0: reserved
0023               * ;      bit 6=0: 8x8 sprites
0024               * ;      bit 7=0: Sprite magnification (1x)
0025               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >960)
0026               * ; VDP#3 PCT (Pattern color table)      at >0FC0  (>3F * >040)
0027               * ; VDP#4 PDT (Pattern descriptor table) at >1000  (>02 * >800)
0028               * ; VDP#5 SAT (sprite attribute list)    at >2180  (>43 * >080)
0029               * ; VDP#6 SPT (Sprite pattern table)     at >2800  (>05 * >800)
0030               * ; VDP#7 Set foreground/background color
0031               ***************************************************************
0032               stevie.80x30:
0033 3668 04F0             byte  >04,>f0,>00,>3f,>02,>43,>05,SPFCLR,0,80
     366A 003F     
     366C 0243     
     366E 05F4     
     3670 0050     
0034               
0035               
0036               ***************************************************************
0037               * TI Basic mode (32 columns/24 rows)
0038               *--------------------------------------------------------------
0039               tibasic.32x24:
0040 3672 00E2             byte  >00,>e2,>00,>0c,>00,>06,>00,>07,0,32
     3674 000C     
     3676 0006     
     3678 0007     
     367A 0020     
0041               *
0042               * ; VDP#0 Control bits
0043               * ;      bit 6=0: M3 | Graphics 1 mode
0044               * ;      bit 7=0: Disable external VDP input
0045               * ; VDP#1 Control bits
0046               * ;      bit 0=1: 16K selection
0047               * ;      bit 1=1: Enable display
0048               * ;      bit 2=1: Enable VDP interrupt
0049               * ;      bit 3=0: M1 \ Graphics 1 mode
0050               * ;      bit 4=0: M2 /
0051               * ;      bit 5=0: reserved
0052               * ;      bit 6=1: 16x16 sprites
0053               * ;      bit 7=0: Sprite magnification (1x)
0054               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0055               * ; VDP#3 PCT (Pattern color table)      at >0300  (>0C * >040)
0056               * ; VDP#4 PDT (Pattern descriptor table) at >0000  (>00 * >800)
0057               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0058               * ; VDP#6 SPT (Sprite pattern table)     at >0000  (>00 * >800)
0059               * ; VDP#7 Set screen background color
0060               
0061               
0062               
0063               ***************************************************************
0064               * TI Basic mode (32 columns/30 rows) - F18A
0065               *--------------------------------------------------------------
0066               tibasic.32x30:
0067 367C 00E2             byte  >00,>e2,>00,>0c,>00,>06,>00,>07,0,32
     367E 000C     
     3680 0006     
     3682 0007     
     3684 0020     
0068               *
0069               * ; VDP#0 Control bits
0070               * ;      bit 6=0: M3 | Graphics 1 mode
0071               * ;      bit 7=0: Disable external VDP input
0072               * ; VDP#1 Control bits
0073               * ;      bit 0=1: 16K selection
0074               * ;      bit 1=1: Enable display
0075               * ;      bit 2=1: Enable VDP interrupt
0076               * ;      bit 3=0: M1 \ Graphics 1 mode
0077               * ;      bit 4=0: M2 /
0078               * ;      bit 5=0: reserved
0079               * ;      bit 6=1: 16x16 sprites
0080               * ;      bit 7=0: Sprite magnification (1x)
0081               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0082               * ; VDP#3 PCT (Pattern color table)      at >0300  (>0C * >040)
0083               * ; VDP#4 PDT (Pattern descriptor table) at >0000  (>00 * >800)
0084               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0085               * ; VDP#6 SPT (Sprite pattern table)     at >0000  (>00 * >800)
0086               * ; VDP#7 Set screen background color
0087               * ;
0088               * ; The table by itself is not sufficient for turning on 30 rows
0089               * ; mode. You also need to unlock the F18a and set VR49 (>31) to
0090               * ; value >40.
0091               
0092               
0093               ***************************************************************
0094               * Sprite Attribute Table
0095               *--------------------------------------------------------------
0096               romsat:
0097                                                   ; YX, initial shape and color
0098 3686 0000             data  >0000,>0001           ; Cursor
     3688 0001     
0099 368A 0000             data  >0000,>0101           ; Current line indicator     <
     368C 0101     
0100 368E 0820             data  >0820,>0201           ; Current column indicator   v
     3690 0201     
0101               nosprite:
0102 3692 D000             data  >d000                 ; End-of-Sprites list
0103               
0104               
0105               
0106               
0107               ***************************************************************
0108               * Stevie color schemes table
0109               *--------------------------------------------------------------
0110               * Word 1
0111               * A  MSB  high-nibble    Foreground color text line in frame buffer
0112               * B  MSB  low-nibble     Background color text line in frame buffer
0113               * C  LSB  high-nibble    Foreground color top/bottom line
0114               * D  LSB  low-nibble     Background color top/bottom line
0115               *
0116               * Word 2
0117               * E  MSB  high-nibble    Foreground color cmdb pane
0118               * F  MSB  low-nibble     Background color cmdb pane
0119               * G  LSB  high-nibble    Cursor foreground color cmdb pane
0120               * H  LSB  low-nibble     Cursor foreground color frame buffer
0121               *
0122               * Word 3
0123               * I  MSB  high-nibble    Foreground color busy top/bottom line
0124               * J  MSB  low-nibble     Background color busy top/bottom line
0125               * K  LSB  high-nibble    Foreground color marked line in frame buffer
0126               * L  LSB  low-nibble     Background color marked line in frame buffer
0127               *
0128               * Word 4
0129               * M  MSB  high-nibble    Foreground color command buffer header line
0130               * N  MSB  low-nibble     Background color command buffer header line
0131               * O  LSB  high-nibble    Foreground color line+column indicator frame buffer
0132               * P  LSB  low-nibble     Foreground color ruler frame buffer
0133               *
0134               * Colors
0135               * 0  Transparant
0136               * 1  black
0137               * 2  Green
0138               * 3  Light Green
0139               * 4  Blue
0140               * 5  Light Blue
0141               * 6  Dark Red
0142               * 7  Cyan
0143               * 8  Red
0144               * 9  Light Red
0145               * A  Yellow
0146               * B  Light Yellow
0147               * C  Dark Green
0148               * D  Magenta
0149               * E  Grey
0150               * F  White
0151               *--------------------------------------------------------------
0152      000A     tv.colorscheme.entries   equ 10 ; Entries in table
0153               
0154               tv.colorscheme.table:
0155                       ;                             ; #
0156                       ;      ABCD  EFGH  IJKL  MNOP ; -
0157 3694 F417             data  >f417,>f171,>1b1f,>71b1 ; 1  White on blue with cyan touch
     3696 F171     
     3698 1B1F     
     369A 71B1     
0158 369C A11A             data  >a11a,>f0ff,>1f1a,>f1ff ; 2  Dark yellow on black
     369E F0FF     
     36A0 1F1A     
     36A2 F1FF     
0159 36A4 2112             data  >2112,>f0ff,>1f12,>f1f6 ; 3  Dark green on black
     36A6 F0FF     
     36A8 1F12     
     36AA F1F6     
0160 36AC F41F             data  >f41f,>1e11,>1a17,>1e11 ; 4  White on blue
     36AE 1E11     
     36B0 1A17     
     36B2 1E11     
0161 36B4 E11E             data  >e11e,>e1ff,>1f1e,>e1ff ; 5  Grey on black
     36B6 E1FF     
     36B8 1F1E     
     36BA E1FF     
0162 36BC 1771             data  >1771,>1016,>1b71,>1711 ; 6  Black on cyan
     36BE 1016     
     36C0 1B71     
     36C2 1711     
0163 36C4 1FF1             data  >1ff1,>1011,>f1f1,>1f11 ; 7  Black on white
     36C6 1011     
     36C8 F1F1     
     36CA 1F11     
0164 36CC 1AF1             data  >1af1,>a1ff,>1f1f,>f11f ; 8  Black on dark yellow
     36CE A1FF     
     36D0 1F1F     
     36D2 F11F     
0165 36D4 21F0             data  >21f0,>12ff,>1b12,>12ff ; 9  Dark green on black
     36D6 12FF     
     36D8 1B12     
     36DA 12FF     
0166 36DC F5F1             data  >f5f1,>e1ff,>1b1f,>f131 ; 10 White on light blue
     36DE E1FF     
     36E0 1B1F     
     36E2 F131     
0167                       even
0168               
0169               tv.tabs.table:
0170 36E4 0007             byte  0,7,12,25             ; \   Default tab positions as used
     36E6 0C19     
0171 36E8 1E2D             byte  30,45,59,79           ; |   in Editor/Assembler module.
     36EA 3B4F     
0172 36EC FF00             byte  >ff,0,0,0             ; |
     36EE 0000     
0173 36F0 0000             byte  0,0,0,0               ; |   Up to 20 positions supported.
     36F2 0000     
0174 36F4 0000             byte  0,0,0,0               ; /   >ff means end-of-list.
     36F6 0000     
0175                       even
0176               
0177               
0178               
0179               ***************************************************************
0180               * Constants for numbers 0-10
0181               ********|*****|*********************|**************************
0182      2000     const.0       equ   w$0000          ; 0
0183      2002     const.1       equ   w$0001          ; 1
0184      2004     const.2       equ   w$0002          ; 2
0185 36F8 0003     const.3       data  3               ; 3
0186      2006     const.4       equ   w$0004          ; 4
0187 36FA 0005     const.5       data  5               ; 5
0188 36FC 0006     const.6       data  6               ; 6
0189 36FE 0007     const.7       data  7               ; 7
0190      2008     const.8       equ   w$0008          ; 8
0191 3700 0009     const.9       data  9               ; 9
0192 3702 000A     const.10      data  10              ; 10
                   < ram.resident.asm
0041                       copy  "data.strings.asm"       ; Strings
     **** ****     > data.strings.asm
0001               * FILE......: data.strings.asm
0002               * Purpose...: Stevie Editor - data segment (strings)
0003               
0004               ***************************************************************
0005               *                       Strings
0006               ***************************************************************
0007               
0008 3704 012C     txt.delim          stri ','
0009 3706 0520     txt.bottom         stri '  BOT'
     3708 2042     
     370A 4F54     
0010 370C 044F     txt.ovrwrite       stri 'OVR '
     370E 5652     
     3710 20       
0011 3711   04     txt.insert         stri 'INS '
     3712 494E     
     3714 5320     
0012 3716 0449     txt.autoinsert     stri 'INS+'
     3718 4E53     
     371A 2B       
0013 371B   01     txt.star           stri '*'
     371C 2A       
0014 371D   0A     txt.loading        stri 'Loading...'
     371E 4C6F     
     3720 6164     
     3722 696E     
     3724 672E     
     3726 2E2E     
0015 3728 0A53     txt.saving         stri 'Saving....'
     372A 6176     
     372C 696E     
     372E 672E     
     3730 2E2E     
     3732 2E       
0016 3733   12     txt.printing       stri 'Printing file.....'
     3734 5072     
     3736 696E     
     3738 7469     
     373A 6E67     
     373C 2066     
     373E 696C     
     3740 652E     
     3742 2E2E     
     3744 2E2E     
0017 3746 1244     txt.block.del      stri 'Deleting block....'
     3748 656C     
     374A 6574     
     374C 696E     
     374E 6720     
     3750 626C     
     3752 6F63     
     3754 6B2E     
     3756 2E2E     
     3758 2E       
0018 3759   11     txt.block.copy     stri 'Copying block....'
     375A 436F     
     375C 7079     
     375E 696E     
     3760 6720     
     3762 626C     
     3764 6F63     
     3766 6B2E     
     3768 2E2E     
     376A 2E       
0019 376B   10     txt.block.move     stri 'Moving block....'
     376C 4D6F     
     376E 7669     
     3770 6E67     
     3772 2062     
     3774 6C6F     
     3776 636B     
     3778 2E2E     
     377A 2E2E     
0020 377C 1853     txt.block.save     stri 'Saving block to file....'
     377E 6176     
     3780 696E     
     3782 6720     
     3784 626C     
     3786 6F63     
     3788 6B20     
     378A 746F     
     378C 2066     
     378E 696C     
     3790 652E     
     3792 2E2E     
     3794 2E       
0021 3795   18     txt.block.clip     stri 'Copying to clipboard....'
     3796 436F     
     3798 7079     
     379A 696E     
     379C 6720     
     379E 746F     
     37A0 2063     
     37A2 6C69     
     37A4 7062     
     37A6 6F61     
     37A8 7264     
     37AA 2E2E     
     37AC 2E2E     
0022 37AE 1250     txt.block.print    stri 'Printing block....'
     37B0 7269     
     37B2 6E74     
     37B4 696E     
     37B6 6720     
     37B8 626C     
     37BA 6F63     
     37BC 6B2E     
     37BE 2E2E     
     37C0 2E       
0023 37C1   13     txt.clearmem       stri 'Clearing memory....'
     37C2 436C     
     37C4 6561     
     37C6 7269     
     37C8 6E67     
     37CA 206D     
     37CC 656D     
     37CE 6F72     
     37D0 792E     
     37D2 2E2E     
     37D4 2E       
0024 37D5   0E     txt.done.load      stri 'Load completed'
     37D6 4C6F     
     37D8 6164     
     37DA 2063     
     37DC 6F6D     
     37DE 706C     
     37E0 6574     
     37E2 6564     
0025 37E4 1049     txt.done.insert    stri 'Insert completed'
     37E6 6E73     
     37E8 6572     
     37EA 7420     
     37EC 636F     
     37EE 6D70     
     37F0 6C65     
     37F2 7465     
     37F4 64       
0026 37F5   10     txt.done.append    stri 'Append completed'
     37F6 4170     
     37F8 7065     
     37FA 6E64     
     37FC 2063     
     37FE 6F6D     
     3800 706C     
     3802 6574     
     3804 6564     
0027 3806 0E53     txt.done.save      stri 'Save completed'
     3808 6176     
     380A 6520     
     380C 636F     
     380E 6D70     
     3810 6C65     
     3812 7465     
     3814 64       
0028 3815   0E     txt.done.copy      stri 'Copy completed'
     3816 436F     
     3818 7079     
     381A 2063     
     381C 6F6D     
     381E 706C     
     3820 6574     
     3822 6564     
0029 3824 0F50     txt.done.print     stri 'Print completed'
     3826 7269     
     3828 6E74     
     382A 2063     
     382C 6F6D     
     382E 706C     
     3830 6574     
     3832 6564     
0030 3834 1044     txt.done.delete    stri 'Delete completed'
     3836 656C     
     3838 6574     
     383A 6520     
     383C 636F     
     383E 6D70     
     3840 6C65     
     3842 7465     
     3844 64       
0031 3845   0F     txt.done.clipboard stri 'Clipboard saved'
     3846 436C     
     3848 6970     
     384A 626F     
     384C 6172     
     384E 6420     
     3850 7361     
     3852 7665     
     3854 64       
0032 3855   0D     txt.done.clipdev   stri 'Clipboard set'
     3856 436C     
     3858 6970     
     385A 626F     
     385C 6172     
     385E 6420     
     3860 7365     
     3862 74       
0033 3863   0E     txt.autoins.on     stri 'Autoinsert: on'
     3864 4175     
     3866 746F     
     3868 696E     
     386A 7365     
     386C 7274     
     386E 3A20     
     3870 6F6E     
0034 3872 0F41     txt.autoins.off    stri 'Autoinsert: off'
     3874 7574     
     3876 6F69     
     3878 6E73     
     387A 6572     
     387C 743A     
     387E 206F     
     3880 6666     
0035 3882 0846     txt.fastmode       stri 'Fastmode'
     3884 6173     
     3886 746D     
     3888 6F64     
     388A 65       
0036 388B   1B     txt.uncrunching    stri 'Expanding TI Basic line....'
     388C 4578     
     388E 7061     
     3890 6E64     
     3892 696E     
     3894 6720     
     3896 5449     
     3898 2042     
     389A 6173     
     389C 6963     
     389E 206C     
     38A0 696E     
     38A2 652E     
     38A4 2E2E     
     38A6 2E       
0037 38A7   02     txt.kb             stri 'kb'
     38A8 6B62     
0038 38AA 054C     txt.lines          stri 'Lines'
     38AC 696E     
     38AE 6573     
0039 38B0 0A5B     txt.newfile        stri '[New file]'
     38B2 4E65     
     38B4 7720     
     38B6 6669     
     38B8 6C65     
     38BA 5D       
0040 38BB   0D     txt.tib1           stri '[TI Basic #1]'
     38BC 5B54     
     38BE 4920     
     38C0 4261     
     38C2 7369     
     38C4 6320     
     38C6 2331     
     38C8 5D       
0041 38C9   0D     txt.tib2           stri '[TI Basic #2]'
     38CA 5B54     
     38CC 4920     
     38CE 4261     
     38D0 7369     
     38D2 6320     
     38D4 2332     
     38D6 5D       
0042 38D7   0D     txt.tib3           stri '[TI Basic #3]'
     38D8 5B54     
     38DA 4920     
     38DC 4261     
     38DE 7369     
     38E0 6320     
     38E2 2333     
     38E4 5D       
0043 38E5   0D     txt.tib4           stri '[TI Basic #4]'
     38E6 5B54     
     38E8 4920     
     38EA 4261     
     38EC 7369     
     38EE 6320     
     38F0 2334     
     38F2 5D       
0044 38F3   0D     txt.tib5           stri '[TI Basic #5]'
     38F4 5B54     
     38F6 4920     
     38F8 4261     
     38FA 7369     
     38FC 6320     
     38FE 2335     
     3900 5D       
0045 3901   04     txt.filetype.dv80  stri 'DV80'
     3902 4456     
     3904 3830     
0046 3906 034D     txt.m1             stri 'M1='
     3908 313D     
0047 390A 034D     txt.m2             stri 'M2='
     390C 323D     
0048 390E 1046     txt.keys.default   stri 'F9-Menu  ^H-Help'
     3910 392D     
     3912 4D65     
     3914 6E75     
     3916 2020     
     3918 5E48     
     391A 2D48     
     391C 656C     
     391E 70       
0049 391F   1B     txt.keys.defaultb  stri 'F9-Menu  ^H-Help  F0-Basic#'
     3920 4639     
     3922 2D4D     
     3924 656E     
     3926 7520     
     3928 205E     
     392A 482D     
     392C 4865     
     392E 6C70     
     3930 2020     
     3932 4630     
     3934 2D42     
     3936 6173     
     3938 6963     
     393A 23       
0050 393B   36     txt.keys.block     stri 'F9-Back  ^Copy  ^Move  ^Del  ^Save  ^Print  ^[1-5]Clip'
     393C 4639     
     393E 2D42     
     3940 6163     
     3942 6B20     
     3944 205E     
     3946 436F     
     3948 7079     
     394A 2020     
     394C 5E4D     
     394E 6F76     
     3950 6520     
     3952 205E     
     3954 4465     
     3956 6C20     
     3958 205E     
     395A 5361     
     395C 7665     
     395E 2020     
     3960 5E50     
     3962 7269     
     3964 6E74     
     3966 2020     
     3968 5E5B     
     396A 312D     
     396C 355D     
     396E 436C     
     3970 6970     
0051 3972 2C46     txt.keys.basic1    stri 'F9-Back  F5-AutoMode  SPACE-Uncrunch program'
     3974 392D     
     3976 4261     
     3978 636B     
     397A 2020     
     397C 4635     
     397E 2D41     
     3980 7574     
     3982 6F4D     
     3984 6F64     
     3986 6520     
     3988 2053     
     398A 5041     
     398C 4345     
     398E 2D55     
     3990 6E63     
     3992 7275     
     3994 6E63     
     3996 6820     
     3998 7072     
     399A 6F67     
     399C 7261     
     399E 6D       
0052 399F   2E     txt.ruler          text    '.........'
     39A0 2E2E     
     39A2 2E2E     
     39A4 2E2E     
     39A6 2E2E     
0053 39A8 12                          byte    18
0054 39A9   2E                        text    '.........'
     39AA 2E2E     
     39AC 2E2E     
     39AE 2E2E     
     39B0 2E2E     
0055 39B2 13                          byte    19
0056 39B3   2E                        text    '.........'
     39B4 2E2E     
     39B6 2E2E     
     39B8 2E2E     
     39BA 2E2E     
0057 39BC 14                          byte    20
0058 39BD   2E                        text    '.........'
     39BE 2E2E     
     39C0 2E2E     
     39C2 2E2E     
     39C4 2E2E     
0059 39C6 15                          byte    21
0060 39C7   2E                        text    '.........'
     39C8 2E2E     
     39CA 2E2E     
     39CC 2E2E     
     39CE 2E2E     
0061 39D0 16                          byte    22
0062 39D1   2E                        text    '.........'
     39D2 2E2E     
     39D4 2E2E     
     39D6 2E2E     
     39D8 2E2E     
0063 39DA 17                          byte    23
0064 39DB   2E                        text    '.........'
     39DC 2E2E     
     39DE 2E2E     
     39E0 2E2E     
     39E2 2E2E     
0065 39E4 18                          byte    24
0066 39E5   2E                        text    '.........'
     39E6 2E2E     
     39E8 2E2E     
     39EA 2E2E     
     39EC 2E2E     
0067 39EE 19                          byte    25
0068                                  even
0069 39F0 020E     txt.alpha.down     data >020e,>0f00
     39F2 0F00     
0070 39F4 0110     txt.vertline       data >0110
0071 39F6 011C     txt.keymarker      byte 1,28
0072               
0073 39F8 0120     txt.ws1            stri ' '
0074 39FA 0220     txt.ws2            stri '  '
     39FC 20       
0075 39FD   03     txt.ws3            stri '   '
     39FE 2020     
     3A00 20       
0076 3A01   04     txt.ws4            stri '    '
     3A02 2020     
     3A04 2020     
0077 3A06 0520     txt.ws5            stri '     '
     3A08 2020     
     3A0A 2020     
0078      3A01     txt.filetype.none  equ txt.ws4
0079               
0080               
0081               ;--------------------------------------------------------------
0082               ; Strings for error line pane
0083               ;--------------------------------------------------------------
0084 3A0C 1546     txt.ioerr.load     stri 'Failed loading file: '
     3A0E 6169     
     3A10 6C65     
     3A12 6420     
     3A14 6C6F     
     3A16 6164     
     3A18 696E     
     3A1A 6720     
     3A1C 6669     
     3A1E 6C65     
     3A20 3A20     
0085 3A22 1446     txt.ioerr.save     stri 'Failed saving file: '
     3A24 6169     
     3A26 6C65     
     3A28 6420     
     3A2A 7361     
     3A2C 7669     
     3A2E 6E67     
     3A30 2066     
     3A32 696C     
     3A34 653A     
     3A36 20       
0086 3A37   1B     txt.ioerr.print    stri 'Failed printing to device: '
     3A38 4661     
     3A3A 696C     
     3A3C 6564     
     3A3E 2070     
     3A40 7269     
     3A42 6E74     
     3A44 696E     
     3A46 6720     
     3A48 746F     
     3A4A 2064     
     3A4C 6576     
     3A4E 6963     
     3A50 653A     
     3A52 20       
0087 3A53   16     txt.io.nofile      stri 'No filename specified.'
     3A54 4E6F     
     3A56 2066     
     3A58 696C     
     3A5A 656E     
     3A5C 616D     
     3A5E 6520     
     3A60 7370     
     3A62 6563     
     3A64 6966     
     3A66 6965     
     3A68 642E     
0088 3A6A 2D49     txt.memfull.load   stri 'Index full. File too large for editor buffer.'
     3A6C 6E64     
     3A6E 6578     
     3A70 2066     
     3A72 756C     
     3A74 6C2E     
     3A76 2046     
     3A78 696C     
     3A7A 6520     
     3A7C 746F     
     3A7E 6F20     
     3A80 6C61     
     3A82 7267     
     3A84 6520     
     3A86 666F     
     3A88 7220     
     3A8A 6564     
     3A8C 6974     
     3A8E 6F72     
     3A90 2062     
     3A92 7566     
     3A94 6665     
     3A96 722E     
0089 3A98 2D43     txt.block.inside   stri 'Copy/Move target must be outside M1-M2 range.'
     3A9A 6F70     
     3A9C 792F     
     3A9E 4D6F     
     3AA0 7665     
     3AA2 2074     
     3AA4 6172     
     3AA6 6765     
     3AA8 7420     
     3AAA 6D75     
     3AAC 7374     
     3AAE 2062     
     3AB0 6520     
     3AB2 6F75     
     3AB4 7473     
     3AB6 6964     
     3AB8 6520     
     3ABA 4D31     
     3ABC 2D4D     
     3ABE 3220     
     3AC0 7261     
     3AC2 6E67     
     3AC4 652E     
0090               
0091               ;--------------------------------------------------------------
0092               ; Strings for command buffer
0093               ;--------------------------------------------------------------
0094 3AC6 013E     txt.cmdb.prompt    stri '>'
0095 3AC8 0D43     txt.colorscheme    stri 'Color scheme:'
     3ACA 6F6C     
     3ACC 6F72     
     3ACE 2073     
     3AD0 6368     
     3AD2 656D     
     3AD4 653A     
                   < ram.resident.asm
0042                       copy  "data.defaults.asm"      ; Default values (devices, ...)
     **** ****     > data.defaults.asm
0001               * FILE......: data.defaults.asm
0002               * Purpose...: Default values for Stevie
0003               
0004               ***************************************************************
0005               *                     Default values
0006               ********|*****|*********************|**************************
0007 3AD6 0650     def.printer.fname   stri 'PI.PIO'
     3AD8 492E     
     3ADA 5049     
     3ADC 4F       
0008 3ADD   09     def.clip.fname      stri 'DSK1.CLIP'
     3ADE 4453     
     3AE0 4B31     
     3AE2 2E43     
     3AE4 4C49     
     3AE6 50       
0009 3AE7   09     def.clip.fname.b    stri 'DSK2.CLIP'
     3AE8 4453     
     3AEA 4B32     
     3AEC 2E43     
     3AEE 4C49     
     3AF0 50       
0010 3AF1   09     def.clip.fname.c    stri 'TIPI.CLIP'
     3AF2 5449     
     3AF4 5049     
     3AF6 2E43     
     3AF8 4C49     
     3AFA 50       
0011 3AFB   2F     def.devices         stri ',DSK,HDX,IDE,PI.,PIO,TIPI.,RD,SCS,SDD,WDS,RS232'
     3AFC 2C44     
     3AFE 534B     
     3B00 2C48     
     3B02 4458     
     3B04 2C49     
     3B06 4445     
     3B08 2C50     
     3B0A 492E     
     3B0C 2C50     
     3B0E 494F     
     3B10 2C54     
     3B12 4950     
     3B14 492E     
     3B16 2C52     
     3B18 442C     
     3B1A 5343     
     3B1C 532C     
     3B1E 5344     
     3B20 442C     
     3B22 5744     
     3B24 532C     
     3B26 5253     
     3B28 3233     
     3B2A 32       
                   < ram.resident.asm
                   < stevie_b7.asm
0045                       ;------------------------------------------------------
0046                       ; Activate bank 1 and branch to  >6036
0047                       ;------------------------------------------------------
0048 3B2C 04E0  34         clr   @bank1.rom            ; Activate bank 1 "James" ROM
     3B2E 6002     
0049               
0053               
0054 3B30 0460  28         b     @kickstart.code2      ; Jump to entry routine
     3B32 6046     
0055               ***************************************************************
0056               * Step 3: Include main editor modules
0057               ********|*****|*********************|**************************
0058               main:
0059                       aorg  kickstart.code2       ; >6046
0060 6046 06A0  32         bl    @cpu.crash            ; Should never get here
     6048 2026     
0061                       ;-----------------------------------------------------------------------
0062                       ; SAMS support routines and utilities
0063                       ;-----------------------------------------------------------------------
0064                       copy  "magic.asm"                  ; Magic string handling
     **** ****     > magic.asm
0001               * FILE......: magic.asm
0002               * Purpose...: Handle magic strings
0003               
0004               ***************************************************************
0005               * magic.set
0006               * Set magic string in core memory
0007               ***************************************************************
0008               * bl @magic.set
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               *--------------------------------------------------------------
0019               * Set the bytes 'DEAD994ABEEF' in core memory.
0020               * If the sequence is set then Stevie knows its safe to resume
0021               * without initializing.
0022               ********|*****|*********************|**************************
0023               magic.set:
0024 604A 0649  14         dect  stack
0025 604C C64B  30         mov   r11,*stack            ; Save return address
0026                       ;------------------------------------------------------
0027                       ; Set magic string
0028                       ;------------------------------------------------------
0029 604E C820  54         mov   @magic.string+0,@magic.str.w1
     6050 609C     
     6052 A000     
0030 6054 C820  54         mov   @magic.string+2,@magic.str.w2
     6056 609E     
     6058 A002     
0031 605A C820  54         mov   @magic.string+4,@magic.str.w3
     605C 60A0     
     605E A004     
0032                       ;------------------------------------------------------
0033                       ; Exit
0034                       ;------------------------------------------------------
0035               magic.set.exit:
0036 6060 C2F9  30         mov   *stack+,r11           ; Pop r11
0037 6062 045B  20         b     *r11                  ; Return to caller
0038               
0039               
0040               
0041               ***************************************************************
0042               * magic.clear
0043               * Clear magic string in core memory
0044               ***************************************************************
0045               * bl @magic.set
0046               *--------------------------------------------------------------
0047               * INPUT
0048               * none
0049               *--------------------------------------------------------------
0050               * OUTPUT
0051               * none
0052               *--------------------------------------------------------------
0053               * Register usage
0054               * none
0055               *--------------------------------------------------------------
0056               * Clear the bytes 'DEAD994ABEEF' in core memory.
0057               * Indicate it's unsafe to resume Stevie and initialization
0058               * is necessary.
0059               ********|*****|*********************|**************************
0060               magic.clear:
0061 6064 0649  14         dect  stack
0062 6066 C64B  30         mov   r11,*stack            ; Save return address
0063                       ;------------------------------------------------------
0064                       ; Clear magic string
0065                       ;------------------------------------------------------
0066 6068 04E0  34         clr   @magic.str.w1
     606A A000     
0067 606C 04E0  34         clr   @magic.str.w2
     606E A002     
0068 6070 04E0  34         clr   @magic.str.w3
     6072 A004     
0069                       ;------------------------------------------------------
0070                       ; Exit
0071                       ;------------------------------------------------------
0072               magic.clear.exit:
0073 6074 C2F9  30         mov   *stack+,r11           ; Pop r11
0074 6076 045B  20         b     *r11                  ; Return to caller
0075               
0076               
0077               
0078               ***************************************************************
0079               * magic.check
0080               * Check if magic string is set
0081               ***************************************************************
0082               * bl @magic.set
0083               *--------------------------------------------------------------
0084               * INPUT
0085               * none
0086               *--------------------------------------------------------------
0087               * OUTPUT
0088               * r0 = >ffff Magic string set
0089               * r0 = >0000 Magic string not set
0090               *--------------------------------------------------------------
0091               * Register usage
0092               * r0
0093               *--------------------------------------------------------------
0094               * Clear the bytes 'DEAD994ABEEF' in core memory.
0095               * Indicate it's unsafe to resume Stevie and initialization
0096               * is necessary.
0097               ********|*****|*********************|**************************
0098               magic.check:
0099 6078 0649  14         dect  stack
0100 607A C64B  30         mov   r11,*stack            ; Save return address
0101                       ;------------------------------------------------------
0102                       ; Check magic string
0103                       ;------------------------------------------------------
0104 607C 04C0  14         clr   r0                    ; Reset flag
0105               
0106 607E 8820  50         c     @magic.str.w1,@magic.string
     6080 A000     
     6082 609C     
0107 6084 1609  14         jne   magic.check.exit
0108 6086 8820  50         c     @magic.str.w2,@magic.string+2
     6088 A002     
     608A 609E     
0109 608C 1605  14         jne   magic.check.exit
0110 608E 8820  50         c     @magic.str.w3,@magic.string+4
     6090 A004     
     6092 60A0     
0111 6094 1601  14         jne   magic.check.exit
0112               
0113 6096 0700  14         seto  r0                    ; Yes, magic string is set
0114                       ;------------------------------------------------------
0115                       ; Exit
0116                       ;------------------------------------------------------
0117               magic.check.exit:
0118 6098 C2F9  30         mov   *stack+,r11           ; Pop r11
0119 609A 045B  20         b     *r11                  ; Return to caller
0120               
0121               
0122               
0123 609C DEAD     magic.string  byte >de,>ad,>99,>4a,>be,>ef
     609E 994A     
     60A0 BEEF     
0124                                                   ; DEAD 994A BEEF
                   < stevie_b7.asm
0065                       copy  "mem.sams.layout.asm"        ; Setup SAMS banks from cart space
     **** ****     > mem.sams.layout.asm
0001               
0002               ***************************************************************
0003               * _mem.sams.set.banks
0004               * Setup SAMS memory banks
0005               ***************************************************************
0006               * INPUT
0007               * r0
0008               *--------------------------------------------------------------
0009               * OUTPUT
0010               * none
0011               *--------------------------------------------------------------
0012               * Register usage
0013               * r0, r12
0014               *--------------------------------------------------------------
0015               * Remarks
0016               * Setup SAMS standard layout without using any library calls
0017               * or stack. Must run without dependencies.
0018               * This is the same order as when using SAMS transparent mode.
0019               ********|*****|*********************|**************************
0020               _mem.sams.set.banks:
0021                       ;-------------------------------------------------------
0022                       ; Setup SAMS banks using inline code
0023                       ;-------------------------------------------------------
0024 60A2 020C  20         li    r12,>1e00             ; SAMS CRU address
     60A4 1E00     
0025 60A6 1D00  16         sbo   0                     ; Enable access to SAMS registers
0026               
0027 60A8 C830  50         mov   *r0+,@>4004           ; Set page for >2000 - >2fff
     60AA 4004     
0028 60AC C830  50         mov   *r0+,@>4006           ; Set page for >3000 - >3fff
     60AE 4006     
0029 60B0 C830  50         mov   *r0+,@>4014           ; Set page for >a000 - >afff
     60B2 4014     
0030 60B4 C830  50         mov   *r0+,@>4016           ; Set page for >b000 - >bfff
     60B6 4016     
0031 60B8 C830  50         mov   *r0+,@>4018           ; Set page for >c000 - >cfff
     60BA 4018     
0032 60BC C830  50         mov   *r0+,@>401a           ; Set page for >d000 - >dfff
     60BE 401A     
0033 60C0 C830  50         mov   *r0+,@>401c           ; Set page for >e000 - >efff
     60C2 401C     
0034 60C4 C830  50         mov   *r0+,@>401e           ; Set page for >f000 - >ffff
     60C6 401E     
0035               
0036 60C8 1E00  16         sbz   0                     ; Disable access to SAMS registers
0037                       ;------------------------------------------------------
0038                       ; Exit
0039                       ;------------------------------------------------------
0040               mem.sams.set.banks.exit:
0041 60CA 045B  20         b     *r11                  ; Return
0042               
0043               
0044               
0045               
0046               ***************************************************************
0047               * mem.sams.set.legacy
0048               * Setup SAMS memory banks to legacy layout and exit to monitor
0049               ***************************************************************
0050               * INPUT
0051               * none
0052               *--------------------------------------------------------------
0053               * OUTPUT
0054               * none
0055               *--------------------------------------------------------------
0056               * Register usage
0057               * r12
0058               *--------------------------------------------------------------
0059               * Remarks
0060               * Setup SAMS standard layout without using any library calls
0061               * or stack. Must run without dependencies.
0062               * This is the same order as when using SAMS transparent mode.
0063               *
0064               * We never do a normal return from this routine, instead we
0065               * activate bank 0 in the cartridge space and return to monitor.
0066               ********|*****|*********************|**************************
0067               mem.sams.set.legacy:
0068 60CC 020C  20         li    r12,>1e00             ; SAMS CRU address
     60CE 1E00     
0069 60D0 1E01  16         sbz   1                     ; Disable SAMS mapper
0070                                                   ; \ We keep the mapper off while
0071                                                   ; | running TI Basic or other external
0072                                                   ; / programs.
0073                       ;-------------------------------------------------------
0074                       ; Setup SAMS banks using inline code
0075                       ;-------------------------------------------------------
0076 60D2 0200  20         li    r0,mem.sams.layout.legacy
     60D4 6C34     
0077 60D6 06A0  32         bl    @_mem.sams.set.banks  ; Set SAMS banks
     60D8 60A2     
0078                       ;-------------------------------------------------------
0079                       ; Poke exit routine into scratchpad memory
0080                       ;-------------------------------------------------------
0081 60DA C820  46         mov   @mem.sams.set.legacy.code,@>8300
     60DC 60FC     
     60DE 8300     
0082 60E0 C820  46         mov   @mem.sams.set.legacy.code+2,@>8302
     60E2 60FE     
     60E4 8302     
0083 60E6 C820  46         mov   @mem.sams.set.legacy.code+4,@>8304
     60E8 6100     
     60EA 8304     
0084 60EC C820  46         mov   @mem.sams.set.legacy.code+6,@>8306
     60EE 6102     
     60F0 8306     
0085 60F2 C820  46         mov   @mem.sams.set.legacy.code+8,@>8308
     60F4 6104     
     60F6 8308     
0086 60F8 0460  24         b     @>8300                ; Run code. Bye bye.
     60FA 8300     
0087                       ;-------------------------------------------------------
0088                       ; Assembly language code for returning to monitor
0089                       ;-------------------------------------------------------
0090               mem.sams.set.legacy.code:
0091 60FC 04E0             data  >04e0,bank0.rom       ; Activate bank 0
     60FE 6000     
0092 6100 0420             data  >0420,>0000           ; blwp @0
     6102 0000     
0093               
0094               
0095               
0096               ***************************************************************
0097               * mem.sams.set.boot
0098               * Setup SAMS memory banks for stevie startup
0099               ***************************************************************
0100               * INPUT
0101               * none
0102               *--------------------------------------------------------------
0103               * OUTPUT
0104               * none
0105               *--------------------------------------------------------------
0106               * Register usage
0107               * r0, r12
0108               *--------------------------------------------------------------
0109               * Remarks
0110               * Setup SAMS layout for stevie without using any library calls
0111               * or stack. Must run without dependencies.
0112               ********|*****|*********************|**************************
0113               mem.sams.set.boot:
0114                       ;-------------------------------------------------------
0115                       ; Setup SAMS banks using inline code
0116                       ;-------------------------------------------------------
0117 6104 0200  20         li    r0,mem.sams.layout.boot
     6106 6C14     
0118 6108 10CC  14         jmp   _mem.sams.set.banks   ; Set SAMS banks
0119               
0120               
0121               
0122               ***************************************************************
0123               * mem.sams.set.external
0124               * Setup SAMS memory banks for calling external program
0125               ***************************************************************
0126               * INPUT
0127               * none
0128               *--------------------------------------------------------------
0129               * OUTPUT
0130               * none
0131               *--------------------------------------------------------------
0132               * Register usage
0133               * r0, r12
0134               *--------------------------------------------------------------
0135               * Remarks
0136               * Main purpose is for doing a VDP dump of the Stevie screen
0137               * before an external program is called.
0138               *
0139               * It's expected that for the external program itself a separate
0140               * SAMS layout is used, for example TI basic session 1, ...
0141               ********|*****|*********************|**************************
0142               mem.sams.set.external:
0143                       ;-------------------------------------------------------
0144                       ; Setup SAMS banks using inline code
0145                       ;-------------------------------------------------------
0146 610A 0200  20         li    r0,mem.sams.layout.external
     610C 6C24     
0147 610E 10C9  14         jmp   _mem.sams.set.banks   ; Set SAMS banks
0148               
0149               
0150               
0151               
0152               ***************************************************************
0153               * mem.sams.set.basic1
0154               * Setup SAMS memory banks for TI Basic session 1
0155               ***************************************************************
0156               * INPUT
0157               * none
0158               *--------------------------------------------------------------
0159               * OUTPUT
0160               * none
0161               *--------------------------------------------------------------
0162               * Register usage
0163               * tmp0, r12
0164               *--------------------------------------------------------------
0165               * Remarks
0166               * Purpose is to handle backup/restore all the VDP memory
0167               * used by this TI Basic session.
0168               ********|*****|*********************|**************************
0169               mem.sams.set.basic1:
0170                       ;-------------------------------------------------------
0171                       ; Setup SAMS banks using inline code
0172                       ;-------------------------------------------------------
0173 6110 0200  20         li    r0,mem.sams.layout.basic1
     6112 6C44     
0174 6114 C800  38         mov   r0,@tib.samstab.ptr
     6116 A0EA     
0175 6118 10C4  14         jmp   _mem.sams.set.banks   ; Set SAMS banks
0176               
0177               
0178               
0179               ***************************************************************
0180               * mem.sams.set.basic2
0181               * Setup SAMS memory banks for TI Basic session 2
0182               ***************************************************************
0183               * INPUT
0184               * none
0185               *--------------------------------------------------------------
0186               * OUTPUT
0187               * none
0188               *--------------------------------------------------------------
0189               * Register usage
0190               * tmp0, r12
0191               *--------------------------------------------------------------
0192               * Remarks
0193               * Purpose is to handle backup/restore all the VDP memory
0194               * used by this TI Basic session.
0195               ********|*****|*********************|**************************
0196               mem.sams.set.basic2:
0197                       ;-------------------------------------------------------
0198                       ; Setup SAMS banks using inline code
0199                       ;-------------------------------------------------------
0200 611A 0200  20         li    r0,mem.sams.layout.basic2
     611C 6C54     
0201 611E C800  38         mov   r0,@tib.samstab.ptr
     6120 A0EA     
0202 6122 10BF  14         jmp   _mem.sams.set.banks   ; Set SAMS banks
0203               
0204               
0205               
0206               ***************************************************************
0207               * mem.sams.set.basic3
0208               * Setup SAMS memory banks for TI Basic session 3
0209               ***************************************************************
0210               * INPUT
0211               * none
0212               *--------------------------------------------------------------
0213               * OUTPUT
0214               * none
0215               *--------------------------------------------------------------
0216               * Register usage
0217               * tmp0, r12
0218               *--------------------------------------------------------------
0219               * Remarks
0220               * Purpose is to handle backup/restore all the VDP memory
0221               * used by this TI Basic session.
0222               ********|*****|*********************|**************************
0223               mem.sams.set.basic3:
0224                       ;-------------------------------------------------------
0225                       ; Setup SAMS banks using inline code
0226                       ;-------------------------------------------------------
0227 6124 0200  20         li    r0,mem.sams.layout.basic3
     6126 6C64     
0228 6128 C800  38         mov   r0,@tib.samstab.ptr
     612A A0EA     
0229 612C 10BA  14         jmp   _mem.sams.set.banks   ; Set SAMS banks
0230               
0231               
0232               ***************************************************************
0233               * mem.sams.set.basic4
0234               * Setup SAMS memory banks for TI Basic session 4
0235               ***************************************************************
0236               * INPUT
0237               * none
0238               *--------------------------------------------------------------
0239               * OUTPUT
0240               * none
0241               *--------------------------------------------------------------
0242               * Register usage
0243               * tmp0, r12
0244               *--------------------------------------------------------------
0245               * Remarks
0246               * Purpose is to handle backup/restore all the VDP memory
0247               * used by this TI Basic session.
0248               ********|*****|*********************|**************************
0249               mem.sams.set.basic4:
0250                       ;-------------------------------------------------------
0251                       ; Setup SAMS banks using inline code
0252                       ;-------------------------------------------------------
0253 612E 0200  20         li    r0,mem.sams.layout.basic4
     6130 6C74     
0254 6132 C800  38         mov   r0,@tib.samstab.ptr
     6134 A0EA     
0255 6136 10B5  14         jmp   _mem.sams.set.banks   ; Set SAMS banks
0256               
0257               
0258               ***************************************************************
0259               * mem.sams.set.basic5
0260               * Setup SAMS memory banks for TI Basic session 5
0261               ***************************************************************
0262               * INPUT
0263               * none
0264               *--------------------------------------------------------------
0265               * OUTPUT
0266               * none
0267               *--------------------------------------------------------------
0268               * Register usage
0269               * tmp0, r12
0270               *--------------------------------------------------------------
0271               * Remarks
0272               * Purpose is to handle backup/restore all the VDP memory
0273               * used by this TI Basic session.
0274               ********|*****|*********************|**************************
0275               mem.sams.set.basic5:
0276                       ;-------------------------------------------------------
0277                       ; Setup SAMS banks using inline code
0278                       ;-------------------------------------------------------
0279 6138 0200  20         li    r0,mem.sams.layout.basic5
     613A 6C84     
0280 613C C800  38         mov   r0,@tib.samstab.ptr
     613E A0EA     
0281 6140 10B0  14         jmp   _mem.sams.set.banks   ; Set SAMS banks
0282               
0283               
0284               ***************************************************************
0285               * mem.sams.set.stevie
0286               * Setup SAMS memory banks for stevie
0287               ***************************************************************
0288               * INPUT
0289               * none
0290               *--------------------------------------------------------------
0291               * OUTPUT
0292               * none
0293               *--------------------------------------------------------------
0294               * Register usage
0295               * r0, r12
0296               *--------------------------------------------------------------
0297               * Remarks
0298               * Setup SAMS layout for stevie without using any library calls
0299               * or stack. Must run without dependencies.
0300               *
0301               * Expects @tv.sams.xxxx variables to be set in advance with
0302               * routine "sams.layout.copy".
0303               *
0304               * Also the SAMS bank with the @tv.sams.xxxx variable must already
0305               * be active and may not switch to another bank.
0306               *
0307               * Is used for settings SAMS banks as they were before an
0308               * external program environment was called (e.g. TI Basic).
0309               ********|*****|*********************|**************************
0310               mem.sams.set.stevie:
0311                       ;-------------------------------------------------------
0312                       ; Setup SAMS banks using inline code
0313                       ;-------------------------------------------------------
0314 6142 020C  20         li    r12,>1e00             ; SAMS CRU address
     6144 1E00     
0315 6146 1D00  16         sbo   0                     ; Enable access to SAMS registers
0316               
0317 6148 1D01  16         sbo   1                     ; Enable SAMS mapper
0318                                                   ; \ Mapper must be on while setting SAMS
0319                                                   ; | registers with values in @tv.sams.xxxx
0320                                                   ; | Obviously, this requires the SAMS banks
0321                                                   ; | with the @tv.sams.xxxx variables not
0322                                                   ; / to change.
0323               
0324 614A C020  34         mov   @tv.sams.2000,r0      ; \
     614C A200     
0325 614E 06C0  14         swpb  r0                    ; | Set page for >2000 - >2fff
0326 6150 C800  38         mov   r0,@>4004             ; /
     6152 4004     
0327               
0328 6154 C020  34         mov   @tv.sams.3000,r0      ; \
     6156 A202     
0329 6158 06C0  14         swpb  r0                    ; | Set page for >3000 - >3fff
0330 615A C800  38         mov   r0,@>4006             ; /
     615C 4006     
0331               
0332 615E C020  34         mov   @tv.sams.a000,r0      ; \
     6160 A204     
0333 6162 06C0  14         swpb  r0                    ; | Set page for >a000 - >afff
0334 6164 C800  38         mov   r0,@>4014             ; /
     6166 4014     
0335               
0336 6168 C020  34         mov   @tv.sams.b000,r0      ; \
     616A A206     
0337 616C 06C0  14         swpb  r0                    ; | Set page for >b000 - >bfff
0338 616E C800  38         mov   r0,@>4016             ; /
     6170 4016     
0339               
0340 6172 C020  34         mov   @tv.sams.c000,r0      ; \
     6174 A208     
0341 6176 06C0  14         swpb  r0                    ; | Set page for >c000 - >cfff
0342 6178 C800  38         mov   r0,@>4018             ; /
     617A 4018     
0343               
0344 617C C020  34         mov   @tv.sams.d000,r0      ; \
     617E A20A     
0345 6180 06C0  14         swpb  r0                    ; | Set page for >d000 - >dfff
0346 6182 C800  38         mov   r0,@>401a             ; /
     6184 401A     
0347               
0348 6186 C020  34         mov   @tv.sams.e000,r0      ; \
     6188 A20C     
0349 618A 06C0  14         swpb  r0                    ; | Set page for >e000 - >efff
0350 618C C800  38         mov   r0,@>401c             ; /
     618E 401C     
0351               
0352 6190 C020  34         mov   @tv.sams.f000,r0      ; \
     6192 A20E     
0353 6194 06C0  14         swpb  r0                    ; | Set page for >f000 - >ffff
0354 6196 C800  38         mov   r0,@>401e             ; /
     6198 401E     
0355               
0356 619A 1E00  16         sbz   0                     ; Disable access to SAMS registers
0357 619C 1D01  16         sbo   1                     ; Enable SAMS mapper
0358                       ;------------------------------------------------------
0359                       ; Exit
0360                       ;------------------------------------------------------
0361               mem.sams.set.stevie.exit:
0362 619E 045B  20         b     *r11                  ; Return
                   < stevie_b7.asm
0066                       ;-----------------------------------------------------------------------
0067                       ; TI Basic sessions
0068                       ;-----------------------------------------------------------------------
0069                       copy  "tib.session.run.asm"        ; Run TI Basic session
     **** ****     > tib.session.run.asm
0001               * FILE......: tib.session.run.asm
0002               * Purpose...: Run TI Basic session
0003               
0004               
0005               ***************************************************************
0006               * tib.run
0007               * Run TI Basic session
0008               ***************************************************************
0009               * bl   @tib.run
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @tib.session = TI Basic session to start/resume
0013               *
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * r1 in GPL WS, tmp0, tmp1, tmp2, r12
0019               *--------------------------------------------------------------
0020               * Remarks
0021               * tib.run >> b @0070 (GPL interpreter/TI Basic)
0022               *         >> isr
0023               *         >> tibasic.return
0024               *
0025               * Memory
0026               * >83b4       ISR counter for triggering periodic actions
0027               * >83b6       TI Basic Session ID
0028               * >f000-ffff  Mailbox Stevie integration
0029               ********|*****|*********************|**************************
0030               tib.run:
0031 61A0 0649  14         dect  stack
0032 61A2 C64B  30         mov   r11,*stack            ; Save return address
0033 61A4 0649  14         dect  stack
0034 61A6 C644  30         mov   tmp0,*stack           ; Push tmp0
0035 61A8 0649  14         dect  stack
0036 61AA C645  30         mov   tmp1,*stack           ; Push tmp1
0037 61AC 0649  14         dect  stack
0038 61AE C646  30         mov   tmp2,*stack           ; Push tmp2
0039 61B0 0649  14         dect  stack
0040 61B2 C64C  30         mov   r12,*stack            ; Push r12
0041                       ;-------------------------------------------------------
0042                       ; Setup SAMS memory
0043                       ;-------------------------------------------------------
0044 61B4 C802  38         mov   config,@tv.sp2.conf   ; Backup the SP2 config register
     61B6 A22C     
0045               
0046 61B8 06A0  32         bl    @sams.layout.copy     ; Backup Stevie SAMS page layout
     61BA 264C     
0047 61BC A200                   data tv.sams.2000     ; \ @i = target address of 8 words table
0048                                                   ; /      that contains SAMS layout
0049               
0050 61BE 06A0  32         bl    @scroff               ; Turn off screen
     61C0 2694     
0051               
0052 61C2 06A0  32         bl    @mem.sams.set.external
     61C4 610A     
0053                                                   ; Load SAMS page layout (from cart space)
0054                                                   ; before running external program.
0055               
0056 61C6 06A0  32         bl    @cpyv2m
     61C8 24C6     
0057 61CA 0000                   data >0000,>b000,16384
     61CC B000     
     61CE 4000     
0058                                                   ; Copy Stevie 16K VDP memory to RAM buffer
0059                                                   ; >b000->efff
0060                       ;-------------------------------------------------------
0061                       ; Put VDP in TI Basic compatible mode (32x24)
0062                       ;-------------------------------------------------------
0063 61D0 06A0  32         bl    @f18rst               ; Reset and lock the F18A
     61D2 27B4     
0064               
0065 61D4 06A0  32         bl    @vidtab               ; Load video mode table into VDP
     61D6 2306     
0066 61D8 3672                   data tibasic.32x24    ; Equate selected video mode table
0067                       ;-------------------------------------------------------
0068                       ; Keep TI Basic session ID for later use
0069                       ;-------------------------------------------------------
0070 61DA C120  34         mov   @tib.session,tmp0     ; \
     61DC A0B4     
0071                                                   ; | Store TI Basic session ID in tmp0.
0072                                                   ; | Througout the subroutine tmp0 will
0073                                                   ; | keep this value, even when SAMS
0074                                                   ; | banks are switched.
0075                                                   ; |
0076 61DE C804  30         mov   tmp0,@>83fe           ; | Also store a copy in the Stevie
     61E0 83FE     
0077                                                   ; | scratchpad >83fe for later use in
0078                                                   ; / TI Basic scratchpad.
0079                       ;-------------------------------------------------------
0080                       ; Switch for TI Basic session
0081                       ;-------------------------------------------------------
0082 61E2 0284  22         ci    tmp0,1
     61E4 0001     
0083 61E6 1310  14         jeq   tib.run.init.basic1
0084 61E8 0284  22         ci    tmp0,2
     61EA 0002     
0085 61EC 131E  14         jeq   tib.run.init.basic2
0086 61EE 0284  22         ci    tmp0,3
     61F0 0003     
0087 61F2 132C  14         jeq   tib.run.init.basic3
0088 61F4 0284  22         ci    tmp0,4
     61F6 0004     
0089 61F8 1338  14         jeq   tib.run.init.basic4
0090 61FA 0284  22         ci    tmp0,5
     61FC 0005     
0091 61FE 1344  14         jeq   tib.run.init.basic5
0092                       ;-------------------------------------------------------
0093                       ; Assert, should never get here
0094                       ;-------------------------------------------------------
0095 6200 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     6202 FFCE     
0096 6204 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     6206 2026     
0097                       ;-------------------------------------------------------
0098                       ; New TI Basic session 1
0099                       ;-------------------------------------------------------
0100               tib.run.init.basic1:
0101 6208 C160  34         mov   @tib.status1,tmp1     ; Resume TI Basic session?
     620A A0B6     
0102 620C 1302  14         jeq   !                     ; No, new session
0103 620E 0460  28         b     @tib.run.resume.basic1
     6210 6324     
0104               
0105 6212 0265  22 !       ori   tmp1,1                ; \
     6214 0001     
0106 6216 C805  38         mov   tmp1,@tib.status1     ; / Set resume flag for next run
     6218 A0B6     
0107               
0108 621A 06A0  32         bl    @mem.sams.set.basic1  ; \ Load SAMS page layout (from cart space)
     621C 6110     
0109                                                   ; / for TI Basic session 1
0110               
0111 621E 06A0  32         bl    @cpym2v
     6220 2494     
0112 6222 06F8                   data >06f8,tibasic.patterns,8
     6224 63B4     
     6226 0008     
0113                                                   ; Copy pattern TI-Basic session ID 1
0114               
0115 6228 103E  14         jmp   tib.run.init.rest     ; Continue initialisation
0116                       ;-------------------------------------------------------
0117                       ; New TI Basic session 2
0118                       ;-------------------------------------------------------
0119               tib.run.init.basic2:
0120 622A C160  34         mov   @tib.status2,tmp1     ; Resume TI Basic session?
     622C A0B8     
0121 622E 1302  14         jeq   !                     ; No, new session
0122 6230 0460  28         b     @tib.run.resume.basic2
     6232 6334     
0123               
0124 6234 0265  22 !       ori   tmp1,1                ; \
     6236 0001     
0125 6238 C805  38         mov   tmp1,@tib.status2     ; / Set resume flag for next run
     623A A0B8     
0126               
0127 623C 06A0  32         bl    @mem.sams.set.basic2  ; \ Load SAMS page layout (from cart space)
     623E 611A     
0128                                                   ; / for TI Basic session 2
0129               
0130 6240 06A0  32         bl    @cpym2v
     6242 2494     
0131 6244 06F8                   data >06f8,tibasic.patterns+8,8
     6246 63BC     
     6248 0008     
0132                                                   ; Copy pattern TI-Basic session ID 2
0133               
0134 624A 102D  14         jmp   tib.run.init.rest     ; Continue initialisation
0135                       ;-------------------------------------------------------
0136                       ; New TI Basic session 3
0137                       ;-------------------------------------------------------
0138               tib.run.init.basic3:
0139 624C C160  34         mov   @tib.status3,tmp1     ; Resume TI Basic session?
     624E A0BA     
0140 6250 1579  14         jgt   tib.run.resume.basic3 ; yes, do resume
0141               
0142 6252 0265  22         ori   tmp1,1                ; \
     6254 0001     
0143 6256 C805  38         mov   tmp1,@tib.status3     ; / Set resume flag for next run
     6258 A0BA     
0144               
0145 625A 06A0  32         bl    @mem.sams.set.basic3  ; \ Load SAMS page layout (from cart space)
     625C 6124     
0146                                                   ; / for TI Basic session 3
0147               
0148 625E 06A0  32         bl    @cpym2v
     6260 2494     
0149 6262 06F8                   data >06f8,tibasic.patterns+16,8
     6264 63C4     
     6266 0008     
0150                                                   ; Copy pattern TI-Basic session ID 3
0151               
0152 6268 101E  14         jmp   tib.run.init.rest     ; Continue initialisation
0153                       ;-------------------------------------------------------
0154                       ; New TI Basic session 4
0155                       ;-------------------------------------------------------
0156               tib.run.init.basic4:
0157 626A C160  34         mov   @tib.status4,tmp1     ; Resume TI Basic session?
     626C A0BC     
0158 626E 1572  14         jgt   tib.run.resume.basic4 ; yes, do resume
0159               
0160 6270 0265  22         ori   tmp1,1                ; \
     6272 0001     
0161 6274 C805  38         mov   tmp1,@tib.status4     ; / Set resume flag for next run
     6276 A0BC     
0162               
0163 6278 06A0  32         bl    @mem.sams.set.basic4  ; \ Load SAMS page layout (from cart space)
     627A 612E     
0164                                                   ; / for TI Basic session 4
0165               
0166 627C 06A0  32         bl    @cpym2v
     627E 2494     
0167 6280 06F8                   data >06f8,tibasic.patterns+24,8
     6282 63CC     
     6284 0008     
0168                                                   ; Copy pattern TI-Basic session ID 4
0169               
0170 6286 100F  14         jmp   tib.run.init.rest     ; Continue initialisation
0171                       ;-------------------------------------------------------
0172                       ; New TI Basic session 5
0173                       ;-------------------------------------------------------
0174               tib.run.init.basic5:
0175 6288 C160  34         mov   @tib.status5,tmp1     ; Resume TI Basic session?
     628A A0BE     
0176 628C 156B  14         jgt   tib.run.resume.basic5 ; yes, do resume
0177               
0178 628E 0265  22         ori   tmp1,1                ; \
     6290 0001     
0179 6292 C805  38         mov   tmp1,@tib.status5     ; / Set resume flag for next run
     6294 A0BE     
0180               
0181 6296 06A0  32         bl    @mem.sams.set.basic5  ; \ Load SAMS page layout (from cart space)
     6298 6138     
0182                                                   ; / for TI Basic session 5
0183               
0184 629A 06A0  32         bl    @cpym2v
     629C 2494     
0185 629E 06F8                   data >06f8,tibasic.patterns+32,8
     62A0 63D4     
     62A2 0008     
0186                                                   ; Copy pattern TI-Basic session ID 5
0187               
0188 62A4 1000  14         jmp   tib.run.init.rest     ; Continue initialisation
0189                       ;-------------------------------------------------------
0190                       ; New TI Basic session (part 2)
0191                       ;-------------------------------------------------------
0192               tib.run.init.rest:
0193 62A6 06A0  32         bl    @ldfnt
     62A8 236E     
0194 62AA 0900                   data >0900,fnopt3     ; Load font (upper & lower case)
     62AC 000C     
0195               
0196 62AE 06A0  32         bl    @filv
     62B0 229C     
0197 62B2 0300                   data >0300,>D0,2      ; No sprites
     62B4 00D0     
     62B6 0002     
0198               
0199 62B8 06A0  32         bl    @cpu.scrpad.backup    ; (1) Backup stevie primary scratchpad to
     62BA 2AFE     
0200                                                   ;     fixed memory address @cpu.scrpad.tgt
0201               
0202 62BC 06A0  32         bl    @cpym2m
     62BE 24E8     
0203 62C0 F000                   data >f000,cpu.scrpad2,256
     62C2 AD00     
     62C4 0100     
0204                                                   ; (2) Stevie scratchpad dump cannot stay
0205                                                   ;     there, move to final destination.
0206               
0207 62C6 06A0  32         bl    @cpym2m
     62C8 24E8     
0208 62CA 7E00                   data cpu.scrpad.src,cpu.scrpad.tgt,256
     62CC F000     
     62CE 0100     
0209                                                   ; (3) Copy OS monitor scratchpad dump from
0210                                                   ;     cartridge rom to @cpu.scrpad.tgt
0211               
0212 62D0 02E0  18         lwpi  cpu.scrpad2           ; Flip workspace before starting restore
     62D2 AD00     
0213 62D4 06A0  36         bl    @cpu.scrpad.restore   ; Restore scratchpad from @cpu.scrpad.tgt
     62D6 2B32     
0214 62D8 02E0  18         lwpi  cpu.scrpad1           ; Flip workspace to scratchpad again
     62DA 8300     
0215               
0216                       ; ATTENTION
0217                       ; From here on no more access to any of the SP2 or stevie routines.
0218                       ; We're on unknown territory.
0219               
0220 62DC C820  46         mov   @cpu.scrpad2+254,@>83b6
     62DE ADFE     
     62E0 83B6     
0221                                                   ; \ Store TI Basic session ID in TI Basic
0222                                                   ; | scratchpad address >83b6.
0223                                                   ; | Note that >83fe in Stevie scratchpad has
0224                                                   ; / a copy of the TI basic session ID.
0225                       ;-------------------------------------------------------
0226                       ; Poke some values
0227                       ;-------------------------------------------------------
0228 62E2 C820  46         mov   @tibasic.scrpad.83d4,@>83d4
     62E4 63AC     
     62E6 83D4     
0229 62E8 C820  46         mov   @tibasic.scrpad.83fa,@>83fa
     62EA 63AE     
     62EC 83FA     
0230 62EE C820  46         mov   @tibasic.scrpad.83fc,@>83fc
     62F0 63B0     
     62F2 83FC     
0231 62F4 C820  46         mov   @tibasic.scrpad.83fe,@>83fe
     62F6 63B2     
     62F8 83FE     
0232                       ;-------------------------------------------------------
0233                       ; Register ISR hook in scratch pad
0234                       ;-------------------------------------------------------
0235 62FA 02E0  18         lwpi  cpu.scrpad1           ; Scratchpad in >8300 again
     62FC 8300     
0236 62FE 0201  20         li    r1,isr                ; \
     6300 63DC     
0237 6302 C801  30         mov   r1,@>83c4             ; | >83c4 = Pointer to start address of ISR
     6304 83C4     
0238                                                   ; /
0239               
0240 6306 020C  20         li    r12,>1e00             ; \ Disable SAMS mapper (transparent mode)
     6308 1E00     
0241 630A 1E01  16         sbz   1                     ; /
0242                       ;-------------------------------------------------------
0243                       ; Run TI Basic session in GPL Interpreter
0244                       ;-------------------------------------------------------
0245 630C 02E0  18         lwpi  >83e0
     630E 83E0     
0246 6310 0201  20         li    r1,>216f              ; Entrypoint for GPL TI Basic interpreter
     6312 216F     
0247 6314 D801  38         movb  r1,@grmwa             ; \
     6316 9C02     
0248 6318 06C1  14         swpb  r1                    ; | Set GPL address
0249 631A D801  38         movb  r1,@grmwa             ; /
     631C 9C02     
0250 631E 1000  14         nop
0251 6320 0460  24         b     @>0070                ; Start GPL interpreter
     6322 0070     
0252                       ;-------------------------------------------------------
0253                       ; Resume TI-Basic session 1
0254                       ;-------------------------------------------------------
0255               tib.run.resume.basic1:
0256 6324 06A0  32         bl    @mem.sams.set.basic1  ; \ Load SAMS page layout (from cart space)
     6326 6110     
0257                                                   ; / for TI Basic session 1
0258               
0259 6328 06A0  32         bl    @cpym2m               ; \ Copy TI Basic scratchpad to fixed memory
     632A 24E8     
0260 632C F100                   data >f100,>f000,256  ; / address @cpu.scrpad.target
     632E F000     
     6330 0100     
0261               
0262 6332 101F  14         jmp   tib.run.resume.part2  ; Continue resume
0263                       ;-------------------------------------------------------
0264                       ; Resume TI-Basic session 2
0265                       ;-------------------------------------------------------
0266               tib.run.resume.basic2:
0267 6334 06A0  32         bl    @mem.sams.set.basic2  ; \ Load SAMS page layout (from cart space)
     6336 611A     
0268                                                   ; / for TI Basic session 2
0269               
0270 6338 06A0  32         bl    @cpym2m               ; \ Copy TI Basic scratchpad to fixed memory
     633A 24E8     
0271 633C F200                   data >f200,>f000,256  ; / address @cpu.scrpad.target
     633E F000     
     6340 0100     
0272               
0273 6342 1017  14         jmp   tib.run.resume.part2  ; Continue resume
0274                       ;-------------------------------------------------------
0275                       ; Resume TI-Basic session 3
0276                       ;-------------------------------------------------------
0277               tib.run.resume.basic3:
0278 6344 06A0  32         bl    @mem.sams.set.basic3  ; \ Load SAMS page layout (from cart space)
     6346 6124     
0279                                                   ; / for TI Basic session 3
0280               
0281 6348 06A0  32         bl    @cpym2m               ; \ Copy TI Basic scratchpad to fixed memory
     634A 24E8     
0282 634C F300                   data >f300,>f000,256  ; / address @cpu.scrpad.target
     634E F000     
     6350 0100     
0283               
0284 6352 100F  14         jmp   tib.run.resume.part2  ; Continue resume
0285                       ;-------------------------------------------------------
0286                       ; Resume TI-Basic session 4
0287                       ;-------------------------------------------------------
0288               tib.run.resume.basic4:
0289 6354 06A0  32         bl    @mem.sams.set.basic4  ; \ Load SAMS page layout (from cart space)
     6356 612E     
0290                                                   ; / for TI Basic session 4
0291               
0292 6358 06A0  32         bl    @cpym2m               ; \ Copy TI Basic scratchpad to fixed memory
     635A 24E8     
0293 635C F400                   data >f400,>f000,256  ; / address @cpu.scrpad.target
     635E F000     
     6360 0100     
0294               
0295 6362 1007  14         jmp   tib.run.resume.part2  ; Continue resume
0296                       ;-------------------------------------------------------
0297                       ; Resume TI-Basic session 5
0298                       ;-------------------------------------------------------
0299               tib.run.resume.basic5:
0300 6364 06A0  32         bl    @mem.sams.set.basic5  ; \ Load SAMS page layout (from cart space)
     6366 6138     
0301                                                   ; / for TI Basic session 5
0302               
0303 6368 06A0  32         bl    @cpym2m               ; \ Copy TI Basic scratchpad to fixed memory
     636A 24E8     
0304 636C F500                   data >f500,>f000,256  ; / address @cpu.scrpad.target
     636E F000     
     6370 0100     
0305                       ;-------------------------------------------------------
0306                       ; Resume TI-Basic session (part 2)
0307                       ;-------------------------------------------------------
0308               tib.run.resume.part2:
0309 6372 C1E0  30         mov   @>83fc,r7             ; Get 'Hide SID' flag
     6374 83FC     
0310 6376 1304  14         jeq   tib.run.resume.vdp    ; Flag is reset, skip clearing SID
0311               
0312 6378 0207  20         li    r7,>8080              ; Whitespace (with TI-Basic offset >60)
     637A 8080     
0313 637C C807  38         mov   r7,@>b01e             ; Clear SID in VDP screen backup
     637E B01E     
0314                       ;-------------------------------------------------------
0315                       ; Restore VDP memory
0316                       ;-------------------------------------------------------
0317               tib.run.resume.vdp:
0318 6380 06A0  32         bl    @cpym2v
     6382 2494     
0319 6384 0000                   data >0000,>b000,16384
     6386 B000     
     6388 4000     
0320                                                   ; Restore TI Basic 16K VDP memory from
0321                                                   ; RAM buffer >b000->efff
0322               
0323                       ;-------------------------------------------------------
0324                       ; Restore scratchpad memory
0325                       ;-------------------------------------------------------
0326               tib.run.resume.scrpad:
0327 638A 02E0  18         lwpi  cpu.scrpad2           ; Flip workspace before starting restore
     638C AD00     
0328 638E 06A0  36         bl    @cpu.scrpad.restore   ; Restore scratchpad from @cpu.scrpad.tgt
     6390 2B32     
0329 6392 02E0  18         lwpi  cpu.scrpad1           ; Flip workspace to scratchpad again
     6394 8300     
0330               
0331 6396 C820  46         mov   @cpu.scrpad2+252,@>83b4
     6398 ADFC     
     639A 83B4     
0332                                                   ; \ Store 'Hide SID' flag in TI Basic
0333                                                   ; | scratchpad address >83b4.
0334                                                   ; | Note that >83fc in Stevie scratchpad
0335                                                   ; / has copy of the flag.
0336               
0337                       ;-------------------------------------------------------
0338                       ; Load legacy SAMS bank layout
0339                       ;-------------------------------------------------------
0340               tibasic.resume.load:
0341 639C 02E0  18         lwpi  cpu.scrpad1           ; Workspace must be in scratchpad again!
     639E 8300     
0342 63A0 04CB  14         clr   r11
0343               
0344 63A2 020C  20         li    r12,>1e00             ; \ Disable SAMS mapper (transparent mode)
     63A4 1E00     
0345 63A6 1E01  16         sbz   1                     ; / >02 >03 >0a >0b >0c >0d >0e >0f
0346               
0347                       ; ATTENTION
0348                       ; From here on no more access to any of the SP2 or stevie routines.
0349                       ; We're on unknown territory.
0350               
0351                       ;-------------------------------------------------------
0352                       ; Resume TI Basic interpreter
0353                       ;-------------------------------------------------------
0354 63A8 0460  24         b     @>0ab8                ; Return from interrupt routine.
     63AA 0AB8     
0355                                                   ; See TI Intern page 32 (german)
0356                       ;-------------------------------------------------------
0357                       ; Required values for TI Basic scratchpad
0358                       ;-------------------------------------------------------
0359               tibasic.scrpad.83d4:
0360 63AC E000             data  >e000
0361               tibasic.scrpad.83fa:
0362 63AE 9800             data  >9800
0363               tibasic.scrpad.83fc:
0364 63B0 0108             data  >0108
0365               tibasic.scrpad.83fe:
0366 63B2 8C02             data  >8c02
0367               
0368               
0369               
0370               
0371               ***************************************************************
0372               * Patterns for session indicator digits 1-5
0373               ********|*****|*********************|**************************
0374               tibasic.patterns:
0375 63B4 007E             byte  >00,>7E,>E7,>C7,>E7,>E7,>C3,>7E ; 1
     63B6 E7C7     
     63B8 E7E7     
     63BA C37E     
0376 63BC 007E             byte  >00,>7E,>C3,>F3,>C3,>CF,>C3,>7E ; 2
     63BE C3F3     
     63C0 C3CF     
     63C2 C37E     
0377 63C4 007E             byte  >00,>7E,>C3,>F3,>C3,>F3,>C3,>7E ; 3
     63C6 C3F3     
     63C8 C3F3     
     63CA C37E     
0378 63CC 007E             byte  >00,>7E,>D3,>D3,>C3,>F3,>F3,>7E ; 4
     63CE D3D3     
     63D0 C3F3     
     63D2 F37E     
0379 63D4 007E             byte  >00,>7E,>C3,>CF,>C3,>F3,>C3,>7E ; 5
     63D6 C3CF     
     63D8 C3F3     
     63DA C37E     
                   < stevie_b7.asm
0070                       copy  "tib.session.isr.asm"        ; TI Basic integration hook
     **** ****     > tib.session.isr.asm
0001               * FILE......: tib.session.isr.asm
0002               * Purpose...: TI Basic integration hook
0003               
0004               
0005               ***************************************************************
0006               * isr
0007               * TI Basic integration hook
0008               ***************************************************************
0009               * Called from console rom at >0ab6
0010               * See TI Intern page 32 (german) for details
0011               *--------------------------------------------------------------
0012               * OUTPUT
0013               * none
0014               *--------------------------------------------------------------
0015               * Register usage
0016               * r7, 12
0017               ********|*****|*********************|**************************
0018               isr:
0019 63DC 0300  22         limi  0                     ; \ Turn off interrupts
     63DE 0000     
0020                                                   ; / Prevent ISR reentry
0021               
0022 63E0 C807  38         mov   r7,@rambuf            ; Backup R7
     63E2 A100     
0023 63E4 C80C  38         mov   r12,@rambuf+2         ; Backup R12
     63E6 A102     
0024                       ;--------------------------------------------------------------
0025                       ; Exit ISR if TI-Basic is busy running a program
0026                       ;--------------------------------------------------------------
0027 63E8 C1E0  30         mov   @>8344,r7             ; Busy running program?
     63EA 8344     
0028 63EC 0287  22         ci    r7,>0100
     63EE 0100     
0029 63F0 1601  14         jne   isr.showid            ; No, TI-Basic is in command line mode.
0030                       ;--------------------------------------------------------------
0031                       ; TI-Basic program running
0032                       ;--------------------------------------------------------------
0033 63F2 1022  14         jmp   isr.exit              ; Exit
0034                       ;--------------------------------------------------------------
0035                       ; Show TI-Basic session ID and scan crunch buffer
0036                       ;--------------------------------------------------------------
0037               isr.showid:
0038 63F4 C1E0  30         mov   @>83b4,r7             ; Get counter
     63F6 83B4     
0039 63F8 0287  22         ci    r7,>003c              ; Counter limit reached ?
     63FA 003C     
0040 63FC 1112  14         jlt   isr.counter           ; Not yet, skip showing Session ID
0041 63FE 04E0  26         clr   @>83b4                ; Reset counter
     6400 83B4     
0042                       ;--------------------------------------------------------------
0043                       ; Setup VDP write address for column 30
0044                       ;--------------------------------------------------------------
0045 6402 0207  20         li    r7,>401e              ; \
     6404 401E     
0046 6406 06C7  14         swpb  r7                    ; | >1c is the VDP column position
0047 6408 D807  30         movb  r7,@vdpa              ; | where bytes should be written
     640A 8C02     
0048 640C 06C7  14         swpb  r7                    ; |
0049 640E D807  30         movb  r7,@vdpa              ; /
     6410 8C02     
0050                       ;-------------------------------------------------------
0051                       ; Write session ID
0052                       ;-------------------------------------------------------
0053 6412 0207  20         li    r7,>83df              ; Char '#' and char >df
     6414 83DF     
0054 6416 D807  30         movb  r7,@vdpw              ; Write byte
     6418 8C00     
0055 641A 06C7  14         swpb  r7
0056 641C D807  30         movb  r7,@vdpw              ; Write byte
     641E 8C00     
0057 6420 1010  14         jmp   isr.scan.crunchbuf    ; Go scan crunch buffer
0058                       ;-------------------------------------------------------
0059                       ; Increase counter
0060                       ;-------------------------------------------------------
0061               isr.counter:
0062 6422 05A0  26         inc   @>83b4                ; Increase counter
     6424 83B4     
0063                       ;-------------------------------------------------------
0064                       ; Hotkey pressed?
0065                       ;-------------------------------------------------------
0066               isr.hotkey:
0067 6426 C1E0  30         mov   @>8374,r7             ; \ Get keyboard scancode from @>8375
     6428 8374     
0068 642A 0247  22         andi  r7,>00ff              ; / LSB only
     642C 00FF     
0069 642E 0287  22         ci    r7,>0f                ; Hotkey fctn + '9' pressed?
     6430 000F     
0070 6432 1602  14         jne   isr.exit              ; No, normal exit
0071 6434 0460  28         b     @tib.run.return       ; Yes, return to Stevie
     6436 6502     
0072                       ;-------------------------------------------------------
0073                       ; Return from ISR
0074                       ;-------------------------------------------------------
0075               isr.exit:
0076 6438 C320  34         mov   @rambuf+2,r12         ; Restore R12
     643A A102     
0077 643C C1E0  34         mov   @rambuf,r7            ; Restore R7
     643E A100     
0078 6440 045B  20         b     *r11                  ; Return from ISR
0079               
0080               
0081               
0082               ***************************************************************
0083               * isr.scan.crunbuf
0084               * Scan the VDP crunch buffer for file commands NEW/OLD/SAVE
0085               ***************************************************************
0086               * Called from isr
0087               *--------------------------------------------------------------
0088               * OUTPUT
0089               * none
0090               *--------------------------------------------------------------
0091               * Register usage
0092               * r7, r10
0093               *
0094               * Memory usage
0095               * >ffd0 - >ffff  TI Basic program filename
0096               ********|*****|*********************|**************************
0097               isr.scan.crunchbuf:
0098                       ;-------------------------------------------------------
0099                       ; Read token at VDP >0320
0100                       ;-------------------------------------------------------
0101 6442 0207  20         li    r7,>0320              ; \
     6444 0320     
0102 6446 06C7  14         swpb  r7                    ; |  Setup VDP read address
0103 6448 D807  30         movb  r7,@vdpa              ; |
     644A 8C02     
0104 644C 06C7  14         swpb  r7                    ; |
0105 644E D807  30         movb  r7,@vdpa              ; /
     6450 8C02     
0106               
0107 6452 D1E0  30         movb  @vdpr,r7              ; Read MSB
     6454 8800     
0108 6456 06C7  14         swpb  r7
0109 6458 D1E0  30         movb  @vdpr,r7              ; Read LSB
     645A 8800     
0110 645C 06C7  14         swpb  r7                    ; Restore order
0111                       ;-------------------------------------------------------
0112                       ; Scan for OLD
0113                       ;-------------------------------------------------------
0114               isr.scan.old:
0115 645E 9807  34         cb    r7,@data.tk.old       ; OLD?
     6460 6493     
0116 6462 1601  14         jne   isr.scan.save         ; No, check if other token
0117 6464 100E  14         jmp   isr.scan.copy         ; Copy parameter to high-memory
0118                       ;-------------------------------------------------------
0119                       ; Scan for SAVE
0120                       ;-------------------------------------------------------
0121               isr.scan.save:
0122 6466 9807  34         cb    r7,@data.tk.save      ; SAVE?
     6468 6494     
0123 646A 1601  14         jne   isr.scan.new          ; No, check if other token
0124 646C 100A  14         jmp   isr.scan.copy         ; Copy parameter to high-memory
0125                       ;-------------------------------------------------------
0126                       ; Scan for NEW
0127                       ;-------------------------------------------------------
0128               isr.scan.new:
0129 646E 9807  34         cb    r7,@data.tk.new       ; NEW?
     6470 6492     
0130 6472 160E  14         jne   isr.scan.exit         ; Exit crunch buffer scan
0131                       ;-------------------------------------------------------
0132                       ; Clear TI Basic auxiliary memory buffer
0133                       ;-------------------------------------------------------
0134 6474 0207  20         li    r7,tib.aux
     6476 FF00     
0135 6478 04F7  30 !       clr   *r7+                  ; \
0136 647A 0287  22         ci    r7,tib.aux.end        ; | Clear memory
     647C FFFA     
0137 647E 12FC  14         jle   -!                    ; /
0138 6480 1007  14         jmp   isr.scan.exit         ; Exit
0139                       ;-------------------------------------------------------
0140                       ; Copy TI Basic program filename to high memory
0141                       ;-------------------------------------------------------
0142               isr.scan.copy:
0143 6482 04C7  14         clr   r7                    ;
0144 6484 020A  20         li    r10,tib.aux.fname     ; Target address in high memory
     6486 FF00     
0145               isr.scan.copy.loop:
0146 6488 D1E0  30         movb  @vdpr,r7              ; Read LSB
     648A 8800     
0147 648C DE87  32         movb  r7,*r10+              ; Copy byte to RAM
0148 648E 16FC  14         jne   isr.scan.copy.loop    ; Copy until termination token found
0149                       ;-------------------------------------------------------
0150                       ; TI Basic program filename copied
0151                       ;-------------------------------------------------------
0152               isr.scan.exit:
0153 6490 10CA  14         jmp   isr.hotkey            ; Continue processing isr
0154               
0155               
0156               
0157               ***************************************************************
0158               * Tokens TI Basic commands
0159               ********|*****|*********************|**************************
0160 6492 01       data.tk.new   byte >01              ; NEW
0161 6493   06     data.tk.old   byte >06              ; OLD
0162 6494 08       data.tk.save  byte >08              ; SAVE
                   < stevie_b7.asm
0071                       copy  "tib.session.return.asm"     ; Return to Stevie
     **** ****     > tib.session.return.asm
0001               * FILE......: tib.session.return.asm
0002               * Purpose...: Return from TI Basic session to Stevie
0003               
0004               
0005               ***************************************************************
0006               * tib.run.return.mon
0007               * Return from OS Monitor to Stevie
0008               ***************************************************************
0009               * bl   @tib.run.return.mon
0010               *--------------------------------------------------------------
0011               * OUTPUT
0012               * none
0013               *--------------------------------------------------------------
0014               * Register usage
0015               * r1 in GPL WS, tmp0, tmp1
0016               *--------------------------------------------------------------
0017               * REMARKS
0018               * Only called from program selection screen after exit out of
0019               * TI Basic with FCTN-QUIT, BYE or by running an assembly
0020               * program that did "BLWP @0".
0021               ********|*****|*********************|**************************
0022               tib.run.return.mon:
0023 6496 020C  20         li    r12,>1e00             ; \ Enable SAMS mapper again
     6498 1E00     
0024 649A 1D01  16         sbo   1                     ; | We stil have the SAMS banks layout
0025                                                   ; / mem.sams.layout.external
0026                       ;------------------------------------------------------
0027                       ; Check magic string (inline version, no SP2 present!)
0028                       ;------------------------------------------------------
0029 649C 8820  50         c     @magic.str.w1,@magic.string
     649E A000     
     64A0 609C     
0030 64A2 1611  14         jne   !
0031 64A4 8820  50         c     @magic.str.w2,@magic.string+2
     64A6 A002     
     64A8 609E     
0032 64AA 160D  14         jne   !
0033 64AC 8820  50         c     @magic.str.w3,@magic.string+4
     64AE A004     
     64B0 60A0     
0034 64B2 1609  14         jne   !
0035                       ;-------------------------------------------------------
0036                       ; Initialize
0037                       ;-------------------------------------------------------
0038 64B4 C120  34         mov   @tib.session,tmp0
     64B6 A0B4     
0039 64B8 0284  22         ci    tmp0,1
     64BA 0001     
0040 64BC 1104  14         jlt   !
0041 64BE 0284  22         ci    tmp0,5
     64C0 0005     
0042 64C2 1501  14         jgt   !
0043 64C4 1002  14         jmp   tib.run.return.mon.cont
0044                       ;-------------------------------------------------------
0045                       ; Initialize Stevie
0046                       ;-------------------------------------------------------
0047 64C6 0460  28 !       b     @kickstart.code1      ; Initialize Stevie
     64C8 6040     
0048                       ;-------------------------------------------------------
0049                       ; Resume Stevie
0050                       ;-------------------------------------------------------
0051               tib.run.return.mon.cont:
0052 64CA 02E0  18         lwpi  cpu.scrpad2           ; Activate workspace at >ad00 that was
     64CC AD00     
0053                                                   ; paged out in tibasic.init
0054               
0055 64CE 06A0  36         bl    @cpu.scrpad.pgin      ; \ Page-in scratchpad memory previously
     64D0 2B84     
0056 64D2 AD00                   data cpu.scrpad2      ; | stored at >ad00 and set wp at >8300
0057                                                   ; / Destroys registers tmp0-tmp2
0058               
0059 64D4 D820  46         movb  @w$ffff,@>8375        ; Reset keycode
     64D6 2022     
     64D8 8375     
0060               
0061 64DA C0A0  42         mov   @tv.sp2.conf,config   ; Restore the SP2 config register
     64DC A22C     
0062               
0063 64DE 06A0  36         bl    @mute                 ; Mute sound generators
     64E0 2808     
0064 64E2 06A0  36         bl    @scroff               ; Turn screen off
     64E4 2694     
0065               
0066                       ; Prevent resuming the TI Basic session that lead us here.
0067                       ; Easiest thing to do is to reinitalize the session upon next start.
0068               
0069                       ;-------------------------------------------------------
0070                       ; Assert TI basic sesion ID
0071                       ;-------------------------------------------------------
0072 64E6 C120  42         mov   @tib.session,tmp0     ; Get session ID
     64E8 A0B4     
0073 64EA 1307  14         jeq   !
0074 64EC 0284  26         ci    tmp0,5
     64EE 0005     
0075 64F0 1504  14         jgt   !
0076                       ;-------------------------------------------------------
0077                       ; Reset session resume flag (tibasicX.status)
0078                       ;-------------------------------------------------------
0079 64F2 0A14  26         sla   tmp0,1                ; Word align
0080 64F4 04E4  38         clr   @tib.session(tmp0)
     64F6 A0B4     
0081 64F8 107A  14         jmp   tib.run.return.stevie
0082                       ;-------------------------------------------------------
0083                       ; Assert failed
0084                       ;-------------------------------------------------------
0085 64FA C80B  42 !       mov   r11,@>ffce            ; \ Save caller address
     64FC FFCE     
0086 64FE 06A0  36         bl    @cpu.crash            ; / Crash and halt system
     6500 2026     
0087               
0088               
0089               
0090               ***************************************************************
0091               * tib.run.return
0092               * Return from TI Basic to Stevie
0093               ***************************************************************
0094               * bl   @tib.run.return
0095               *--------------------------------------------------------------
0096               * OUTPUT
0097               * none
0098               *--------------------------------------------------------------
0099               * Register usage
0100               * r1 in GPL WS, tmp0, tmp1
0101               *--------------------------------------------------------------
0102               * REMARKS
0103               * Called from ISR code
0104               ********|*****|*********************|**************************
0105               tib.run.return:
0106 6502 020C  24         li    r12,>1e00             ; \ Enable SAMS mapper again with
     6504 1E00     
0107 6506 1D01  20         sbo   1                     ; | sams layout table
0108                                                   ; / mem.sams.layout.basic[1-5]
0109               
0110 6508 02E0  18         lwpi  cpu.scrpad2           ; Activate Stevie workspace that got
     650A AD00     
0111                                                   ; paged-out in tibasic.init
0112               
0113 650C D820  46         movb  @w$ffff,@>8375        ; Reset keycode
     650E 2022     
     6510 8375     
0114               
0115               
0116 6512 1D00  20         sbo   0                     ; Enable writing to SAMS registers
0117 6514 C820  54         mov   @tib.run.return.data.samspage,@>401c
     6516 664A     
     6518 401C     
0118                                                   ; \ Temporarily map SAMS page >0f to
0119                                                   ; | memory window >0e00 - >0eff
0120                                                   ; |
0121                                                   ; | Needed for copying BASIC program
0122                                                   ; | filename at >ef00 to destination >f?00
0123                                                   ; | in SAMS page >ff
0124                                                   ; /
0125 651A 1E00  20         sbz   0                     ; Disable writing to SAMS registers
0126               
0127                       ;-------------------------------------------------------
0128                       ; Backup scratchpad of TI-Basic session 1
0129                       ;-------------------------------------------------------
0130               tib.run.return.1:
0131 651C 8820  50         c     @tib.session,@const.1
     651E A0B4     
     6520 2002     
0132 6522 160B  14         jne   tib.run.return.2      ; Not the current session, check next one.
0133               
0134 6524 06A0  36         bl    @cpym2m
     6526 24E8     
0135 6528 8300                   data >8300,>f100,256  ; Backup TI Basic scratchpad to >f100
     652A F100     
     652C 0100     
0136               
0137 652E 06A0  36         bl    @cpym2m
     6530 24E8     
0138 6532 EF00                   data >ef00,>f600,256  ; Backup auxiliary memory to >f600
     6534 F600     
     6536 0100     
0139               
0140 6538 1040  14         jmp   tib.return.page_in    ; Skip to page-in
0141                       ;-------------------------------------------------------
0142                       ; Backup scratchpad of TI-Basic session 2
0143                       ;-------------------------------------------------------
0144               tib.run.return.2:
0145 653A 8820  50         c     @tib.session,@const.2
     653C A0B4     
     653E 2004     
0146 6540 160B  14         jne   tib.run.return.3      ; Not the current session, check next one.
0147               
0148 6542 06A0  36         bl    @cpym2m
     6544 24E8     
0149 6546 8300                   data >8300,>f200,256  ; Backup TI Basic scratchpad to >f200
     6548 F200     
     654A 0100     
0150               
0151 654C 06A0  36         bl    @cpym2m
     654E 24E8     
0152 6550 EF00                   data >ef00,>f700,256  ; Backup auxiliary memory to >f700
     6552 F700     
     6554 0100     
0153               
0154 6556 1031  14         jmp   tib.return.page_in    ; Skip to page-in
0155                       ;-------------------------------------------------------
0156                       ; Backup scratchpad of TI-Basic session 3
0157                       ;-------------------------------------------------------
0158               tib.run.return.3:
0159 6558 8820  50         c     @tib.session,@const.3
     655A A0B4     
     655C 36F8     
0160 655E 160B  14         jne   tib.run.return.4      ; Not the current session, check next one.
0161               
0162 6560 06A0  36         bl    @cpym2m
     6562 24E8     
0163 6564 8300                   data >8300,>f300,256  ; Backup TI Basic scratchpad to >f300
     6566 F300     
     6568 0100     
0164               
0165 656A 06A0  36         bl    @cpym2m
     656C 24E8     
0166 656E EF00                   data >ef00,>f800,256  ; Backup auxiliary memory to >f800
     6570 F800     
     6572 0100     
0167               
0168 6574 1022  14         jmp   tib.return.page_in    ; Skip to page-in
0169                       ;-------------------------------------------------------
0170                       ; Backup scratchpad of TI-Basic session 4
0171                       ;-------------------------------------------------------
0172               tib.run.return.4:
0173 6576 8820  50         c     @tib.session,@const.4
     6578 A0B4     
     657A 2006     
0174 657C 160B  14         jne   tib.run.return.5      ; Not the current session, check next one.
0175               
0176 657E 06A0  36         bl    @cpym2m
     6580 24E8     
0177 6582 8300                   data >8300,>f400,256  ; Backup TI Basic scratchpad to >f400
     6584 F400     
     6586 0100     
0178               
0179 6588 06A0  36         bl    @cpym2m
     658A 24E8     
0180 658C EF00                   data >ef00,>f900,256  ; Backup auxiliary memory to >f900
     658E F900     
     6590 0100     
0181               
0182 6592 1013  14         jmp   tib.return.page_in    ; Skip to page-in
0183                       ;-------------------------------------------------------
0184                       ; Backup scratchpad of TI-Basic session 5
0185                       ;-------------------------------------------------------
0186               tib.run.return.5:
0187 6594 8820  50         c     @tib.session,@const.5
     6596 A0B4     
     6598 36FA     
0188 659A 160B  14         jne   tib.run.return.failed ; Not the current session, abort here
0189               
0190 659C 06A0  36         bl    @cpym2m
     659E 24E8     
0191 65A0 8300                   data >8300,>f500,256  ; Backup TI Basic scratchpad to >f500
     65A2 F500     
     65A4 0100     
0192               
0193 65A6 06A0  36         bl    @cpym2m
     65A8 24E8     
0194 65AA EF00                   data >ef00,>fa00,256  ; Backup auxiliary memory to >fa00
     65AC FA00     
     65AE 0100     
0195               
0196 65B0 1004  14         jmp   tib.return.page_in    ; Skip to page-in
0197                       ;-------------------------------------------------------
0198                       ; Asserts failed
0199                       ;-------------------------------------------------------
0200               tib.run.return.failed:
0201 65B2 C80B  42         mov   r11,@>ffce            ; \ Save caller address
     65B4 FFCE     
0202 65B6 06A0  36         bl    @cpu.crash            ; / Crash and halt system
     65B8 2026     
0203                       ;-------------------------------------------------------
0204                       ; Page-in scratchpad memory
0205                       ;-------------------------------------------------------
0206               tib.return.page_in:
0207 65BA 1D00  20         sbo   0                     ; Enable writing to SAMS registers
0208               
0209 65BC C120  42         mov   @tib.samstab.ptr,tmp0 ; \ Get pointer to basic session SAMS table.
     65BE A0EA     
0210 65C0 0224  30         ai    tmp0,12               ; / Get 7th entry in table
     65C2 000C     
0211               
0212 65C4 C814  50         mov   *tmp0,@>401c          ; \ Restore SAMS page in
     65C6 401C     
0213                                                   ; | memory window >0e00 - >0eff
0214                                                   ; | Was temporarily paged-out
0215                                                   ; | in tib.return.run
0216                                                   ; / Required before doing VDP memory dump
0217               
0218 65C8 1E00  20         sbz   0                     ; Disable writing to SAMS registers
0219               
0220 65CA 06A0  36         bl    @cpym2m
     65CC 24E8     
0221 65CE AD00                   data cpu.scrpad2,cpu.scrpad1,256
     65D0 8300     
     65D2 0100     
0222                                                   ; Restore scratchpad contents
0223               
0224 65D4 02E0  18         lwpi  cpu.scrpad1           ; Activate primary scratchpad
     65D6 8300     
0225               
0226 65D8 C0A0  34         mov   @tv.sp2.conf,config   ; Restore the SP2 config register
     65DA A22C     
0227               
0228 65DC 06A0  32         bl    @mute                 ; Mute sound generators
     65DE 2808     
0229                       ;-------------------------------------------------------
0230                       ; Cleanup after return from TI Basic
0231                       ;-------------------------------------------------------
0232               tib.run.return.vdpdump:
0233 65E0 06A0  32         bl    @scroff               ; Turn screen off
     65E2 2694     
0234 65E4 06A0  32         bl    @cpyv2m
     65E6 24C6     
0235 65E8 0000                   data >0000,>b000,16384
     65EA B000     
     65EC 4000     
0236                                                   ; Dump TI Basic 16K VDP memory to ram buffer
0237                                                   ; >b000->efff
0238                       ;-------------------------------------------------------
0239                       ; Restore VDP screen with Stevie content
0240                       ;-------------------------------------------------------
0241               tib.run.return.stevie:
0242 65EE 06A0  32         bl    @mem.sams.set.external
     65F0 610A     
0243                                                   ; Load SAMS page layout when returning from
0244                                                   ; external program.
0245               
0246 65F2 06A0  32         bl    @cpym2v
     65F4 2494     
0247 65F6 0000                   data >0000,>b000,16384
     65F8 B000     
     65FA 4000     
0248                                                   ; Restore Stevie 16K to VDP from RAM buffer
0249                                                   ; >b000->efff
0250                       ;-------------------------------------------------------
0251                       ; Restore SAMS memory layout for editor buffer and index
0252                       ;-------------------------------------------------------
0253 65FC 06A0  32         bl    @mem.sams.set.stevie  ; Setup SAMS memory banks for stevie
     65FE 6142     
0254                                                   ; \ For this to work the bank having the
0255                                                   ; | @tv.sams.xxxx variables must already
0256                                                   ; | be active and may not switch to
0257                                                   ; / another bank.
0258                       ;-------------------------------------------------------
0259                       ; Setup F18a 80x30 mode again
0260                       ;-------------------------------------------------------
0261 6600 06A0  32         bl    @f18unl               ; Unlock the F18a
     6602 2738     
0263               
0264 6604 06A0  32         bl    @putvr                ; Turn on 30 rows mode.
     6606 2340     
0265 6608 3140                   data >3140            ; F18a VR49 (>31), bit 40
0266               
0268               
0269 660A 06A0  32         bl    @vidtab               ; Load video mode table into VDP
     660C 2306     
0270 660E 3668                   data stevie.80x30     ; Equate selected video mode table
0271               
0272 6610 06A0  32         bl    @putvr                ; Turn on position based attributes
     6612 2340     
0273 6614 3202                   data >3202            ; F18a VR50 (>32), bit 2
0274               
0275 6616 06A0  32         bl    @putvr                ; Set VDP TAT base address for position
     6618 2340     
0276 661A 0360                   data >0360            ; based attributes (>40 * >60 = >1800)
0277               
0278 661C 04E0  34         clr   @parm1                ; Screen off while reloading color scheme
     661E A006     
0279 6620 04E0  34         clr   @parm2                ; Don't skip colorizing marked lines
     6622 A008     
0280 6624 04E0  34         clr   @parm3                ; Colorize all panes
     6626 A00A     
0281               
0282               
0283 6628 06A0  32         bl    @tibasic.buildstr     ; Build session identifier string
     662A 6BF0     
0284               
0285 662C 06A0  32         bl    @pane.action.colorscheme.load
     662E 6BBA     
0286                                                   ; Reload color scheme
0287                                                   ; \ i  @parm1 = Skip screen off if >FFFF
0288                                                   ; | i  @parm2 = Skip colorizing marked lines
0289                                                   ; |             if >FFFF
0290                                                   ; | i  @parm3 = Only colorize CMDB pane
0291                                                   ; /             if >FFFF
0292               
0293 6630 C120  34         mov   @tib.automode,tmp0    ; AutoMode is on?
     6632 A0C0     
0294 6634 1604  14         jne   tib.run.return.exit   ; Yes, skip keylist
0295                       ;------------------------------------------------------
0296                       ; Set shortcut list in bottom status line
0297                       ;------------------------------------------------------
0298 6636 0204  20         li    tmp0,txt.keys.basic1
     6638 3972     
0299 663A C804  38         mov   tmp0,@cmdb.pankeys    ; Save Keylist in status line
     663C A726     
0300                       ;------------------------------------------------------
0301                       ; Exit
0302                       ;------------------------------------------------------
0303               tib.run.return.exit:
0304 663E C339  30         mov   *stack+,r12           ; Pop r12
0305 6640 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0306 6642 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0307 6644 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0308 6646 C2F9  30         mov   *stack+,r11           ; Pop r11
0309 6648 045B  20         b     *r11                  ; Return
0310               
0311               tib.run.return.data.samspage
0312 664A 0F00             data  >0f00                 ; SAMS page >0f
                   < stevie_b7.asm
0072                       ;-----------------------------------------------------------------------
0073                       ; TI Basic program uncruncher
0074                       ;-----------------------------------------------------------------------
0075                       copy  "tib.uncrunch.helper.asm"    ; Helper functions for uncrunching
     **** ****     > tib.uncrunch.helper.asm
0001               * FILE......: tib.uncrunch.helper asm
0002               * Purpose...: Helper functions used for uncrunching
0003               
0004               
0005               ***************************************************************
0006               * _v2sams
0007               * Convert VDP address to SAMS page equivalent and get SAMS page
0008               ***************************************************************
0009               * bl   _v2sams
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * tmp0 = VRAM address in range >0000 - >3fff
0013               *
0014               * OUTPUT
0015               * @tib.var3 = SAMS page ID mapped to VRAM address
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0, tmp1
0019               *--------------------------------------------------------------
0020               * Remarks
0021               * Converts the VDP address to index into SAMS page layout table
0022               * mem.sams.layout.basic(X) and get SAMS page.
0023               *
0024               * Index offset in SAMS page layout table:
0025               * VRAM 0000-0fff = 6   \
0026               * VRAM 1000-1fff = 8   |  Offset of slots with SAMS pages having
0027               * VRAM 2000-2fff = 10  |  the 16K VDP dump of TI basic session.
0028               * VRAM 3000-3fff = 12  /
0029               ********|*****|*********************|**************************
0030               _v2sams:
0031 664C 0649  14         dect  stack
0032 664E C64B  30         mov   r11,*stack            ; Save return address
0033 6650 0649  14         dect  stack
0034 6652 C644  30         mov   tmp0,*stack           ; Push tmp0
0035 6654 0649  14         dect  stack
0036 6656 C645  30         mov   tmp1,*stack           ; Push tmp1
0037                       ;------------------------------------------------------
0038                       ; Calculate index in SAMS page table
0039                       ;------------------------------------------------------
0040 6658 0244  22         andi  tmp0,>f000            ; Only keep high-nibble of MSB
     665A F000     
0041               
0042 665C 09B4  38         srl   tmp0,11               ; Move high-nibble to LSB and multiply by 2
0043 665E A120  34         a     @tib.stab.ptr,tmp0    ; Add pointer base address
     6660 A0C2     
0044               
0045                       ;
0046                       ; In the SAMS page layout table of the TI Basic session, the 16K VDP
0047                       ; memory dump page starts at the 4th word. So need to add fixed offset.
0048                       ;
0049 6662 0224  22         ai    tmp0,6                ; Add fixed offset
     6664 0006     
0050 6666 C114  26         mov   *tmp0,tmp0            ; Get SAMS page number
0051                       ;------------------------------------------------------
0052                       ; Check if SAMS page needs to be switched
0053                       ;------------------------------------------------------
0054 6668 8804  34         c     tmp0,@tib.var3        ; SAMS page has changed?
     666A A0F0     
0055 666C 1307  14         jeq   _v2sams.exit          ; No, exit early
0056               
0057 666E C804  38         mov   tmp0,@tib.var3        ; Set new SAMS page
     6670 A0F0     
0058 6672 0984  32         srl   tmp0,8                ; MSB to LSB
0059 6674 0205  20         li    tmp1,>f000            ; Memory address to map to
     6676 F000     
0060               
0061 6678 06A0  32         bl    @xsams.page.set       ; Set SAMS page
     667A 2584     
0062                                                   ; \ i  tmp0  = SAMS page number
0063                                                   ; / i  tmp1  = Memory map address
0064                       ;------------------------------------------------------
0065                       ; Exit
0066                       ;------------------------------------------------------
0067               _v2sams.exit:
0068 667C C179  30         mov   *stack+,tmp1          ; Pop tmp1
0069 667E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0070 6680 C2F9  30         mov   *stack+,r11           ; Pop r11
0071 6682 045B  20         b     *r11                  ; Return
                   < stevie_b7.asm
0076                       copy  "tib.uncrunch.asm"           ; Uncrunch TI Basic program
     **** ****     > tib.uncrunch.asm
0001               * FILE......: tib.uncrunch.prep.asm
0002               * Purpose...: Uncrunch TI Basic program to editor buffer
0003               
0004               
0005               ***************************************************************
0006               * tib.uncrunch
0007               * Uncrunch TI Basic program to editor buffer
0008               ***************************************************************
0009               * bl   @tib.uncrunch
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @parm1 = TI Basic session to uncrunch (1-5)
0013               *
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0, tmp1, tmp2, tmp3, tmp4
0019               ********|*****|*********************|**************************
0020               tib.uncrunch:
0021 6684 0649  14         dect  stack
0022 6686 C64B  30         mov   r11,*stack            ; Save return address
0023 6688 0649  14         dect  stack
0024 668A C644  30         mov   tmp0,*stack           ; Push tmp0
0025 668C 0649  14         dect  stack
0026 668E C645  30         mov   tmp1,*stack           ; Push tmp1
0027                       ;------------------------------------------------------
0028                       ; Set indicator
0029                       ;------------------------------------------------------
0030 6690 0649  14         dect  stack
0031 6692 C660  46         mov   @parm1,*stack         ; Push @parm1
     6694 A006     
0032               
0033 6696 06A0  32         bl    @fm.newfile           ; \ Clear editor buffer
     6698 6BDE     
0034                                                   ; / (destroys parm1)
0035                       ;------------------------------------------------------
0036                       ; Determine filename
0037                       ;------------------------------------------------------
0038 669A C119  26         mov   *stack,tmp0           ; Get TI Basic session
0039 669C 0A14  18         sla   tmp0,1                ; Align to word boundary
0040 669E C824  54         mov   @data.filename.ptr(tmp0),@edb.filename.ptr
     66A0 6700     
     66A2 A514     
0041               
0042 66A4 C820  54         mov   @tv.busycolor,@parm1  ; Get busy color
     66A6 A21C     
     66A8 A006     
0043 66AA 06A0  32         bl    @pane.action.colorscheme.statlines
     66AC 6BCC     
0044                                                   ; Set color combination for status line
0045                                                   ; \ i  @parm1 = Color combination
0046                                                   ; /
0047               
0048 66AE C839  50         mov   *stack+,@parm1        ; Pop @parm1
     66B0 A006     
0049               
0050 66B2 06A0  32         bl    @hchar
     66B4 27E0     
0051 66B6 1D00                   byte pane.botrow,0,32,55
     66B8 2037     
0052 66BA FFFF                   data eol              ; Remove shortcuts
0053               
0054 66BC 06A0  32         bl    @putat
     66BE 2450     
0055 66C0 1D00                   byte pane.botrow,0
0056 66C2 388B                   data txt.uncrunching  ; Show expansion message
0057                       ;------------------------------------------------------
0058                       ; Prepare for uncrunching
0059                       ;------------------------------------------------------
0060 66C4 06A0  32         bl    @tib.uncrunch.prepare ; Prepare for uncrunching TI Basic program
     66C6 670C     
0061                                                   ; \ i  @parm1 = TI Basic session to uncrunch
0062                                                   ; /
0063                       ;------------------------------------------------------
0064                       ; Uncrunch TI Basic program
0065                       ;------------------------------------------------------
0066 66C8 06A0  32         bl    @tib.uncrunch.prg     ; Uncrunch TI Basic program
     66CA 67DA     
0067                       ;------------------------------------------------------
0068                       ; Prepare for exit
0069                       ;------------------------------------------------------
0070 66CC C120  34         mov   @tv.sams.f000,tmp0    ; Get SAMS page number
     66CE A20E     
0071 66D0 0205  20         li    tmp1,>f000            ; Map SAMS page to >f000-ffff
     66D2 F000     
0072               
0073 66D4 06A0  32         bl    @xsams.page.set       ; Set SAMS page
     66D6 2584     
0074                                                   ; \ i  tmp0  = SAMS page number
0075                                                   ; / i  tmp1  = Memory map address
0076                       ;------------------------------------------------------
0077                       ; Close dialog and refresh frame buffer
0078                       ;------------------------------------------------------
0079 66D8 06A0  32         bl    @cmdb.dialog.close    ; Close dialog
     66DA 6B96     
0080               
0081 66DC 04E0  34         clr   @parm1                ; Goto line 1
     66DE A006     
0082               
0083 66E0 06A0  32         bl    @fb.refresh           ; \ Refresh frame buffer
     66E2 6BA8     
0084                                                   ; | i  @parm1 = Line to start with
0085                                                   ; /             (becomes @fb.topline)
0086               
0087 66E4 04E0  34         clr   @fb.row               ; Frame buffer line 0
     66E6 A306     
0088 66E8 04E0  34         clr   @fb.column            ; Frame buffer column 0
     66EA A30C     
0089 66EC 04E0  26         clr   @wyx                  ; Position VDP cursor
     66EE 832A     
0090 66F0 06A0  32         bl    @fb.calc_pointer      ; Calculate position in frame buffer
     66F2 30A8     
0091               
0092 66F4 06A0  32         bl    @edb.line.getlength2  ; \ Get length current line
     66F6 35DE     
0093                                                   ; | i  @fb.row        = Row in frame buffer
0094                                                   ; / o  @fb.row.length = Length of row
0095                       ;------------------------------------------------------
0096                       ; Exit
0097                       ;------------------------------------------------------
0098               tib.uncrunch.exit:
0099 66F8 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0100 66FA C139  30         mov   *stack+,tmp0          ; Pop tmp0
0101 66FC C2F9  30         mov   *stack+,r11           ; Pop r11
0102 66FE 045B  20         b     *r11                  ; Return
0103               
0104               
0105               data.filename.ptr:
0106 6700 38B0             data  txt.newfile,txt.tib1,txt.tib2,txt.tib3,txt.tib4,txt.tib5
     6702 38BB     
     6704 38C9     
     6706 38D7     
     6708 38E5     
     670A 38F3     
                   < stevie_b7.asm
0077                       copy  "tib.uncrunch.prep.asm"      ; Prepare for uncrunching
     **** ****     > tib.uncrunch.prep.asm
0001               * FILE......: tib.uncrunch.prep.asm
0002               * Purpose...: Uncrunch TI Basic program to editor buffer
0003               
0004               
0005               ***************************************************************
0006               * tib.uncrunch.prepare
0007               * Prepare for uncrunching TI-Basic program
0008               ***************************************************************
0009               * bl   @tib.uncrunch.prepare
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @parm1 = TI Basic session to uncrunch (1-5)
0013               *
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0
0019               *--------------------------------------------------------------
0020               * Remarks
0021               *
0022               * Pointers:
0023               * @tib.scrpad.ptr = Scratchpad address in SAMS page >ff
0024               * @tib.stab.ptr   = SAMS page layout table of TI Basic session
0025               *
0026               * Pointers to tables in VRAM:
0027               * @tib.lnt.top.ptr  = Top of line number table
0028               * @tib.lnt.bot.ptr  = Bottom of line number table
0029               * @tib.symt.top.ptr = Top of symbol table
0030               * @tib.symt.bot.ptr = Bottom of symbol table
0031               * @tib.strs.top.ptr = Top of string space
0032               * @tib.strs.bot.ptr = Bottom of string space
0033               *
0034               * Variables
0035               * @tib.var1  = TI Basic session
0036               * @tib.var2  = Address of SAMS page layout table entry mapped to VRAM address
0037               * @tib.var3  = SAMS page ID mapped to VRAM address
0038               * @tib.lines = Number of lines in TI Basic program
0039               ********|*****|*********************|**************************
0040               tib.uncrunch.prepare:
0041 670C 0649  14         dect  stack
0042 670E C64B  30         mov   r11,*stack            ; Save return address
0043 6710 0649  14         dect  stack
0044 6712 C644  30         mov   tmp0,*stack           ; Push tmp0
0045 6714 0649  14         dect  stack
0046 6716 C645  30         mov   tmp1,*stack           ; Push tmp1
0047 6718 0649  14         dect  stack
0048 671A C646  30         mov   tmp2,*stack           ; Push tmp2
0049                       ;------------------------------------------------------
0050                       ; Initialisation
0051                       ;------------------------------------------------------
0052 671C 04E0  34         clr   @tib.var1             ;
     671E A0EC     
0053 6720 04E0  34         clr   @tib.var2             ; Clear temporary variables
     6722 A0EE     
0054 6724 04E0  34         clr   @tib.var3             ;
     6726 A0F0     
0055 6728 04E0  34         clr   @tib.var4             ;
     672A A0F2     
0056 672C 04E0  34         clr   @tib.var5             ;
     672E A0F4     
0057                       ;------------------------------------------------------
0058                       ; (1) Assert on TI basic session
0059                       ;------------------------------------------------------
0060 6730 C120  34         mov   @parm1,tmp0           ; Get session to uncrunch
     6732 A006     
0061 6734 C804  38         mov   tmp0,@tib.var1        ; Make copy
     6736 A0EC     
0062               
0063 6738 0284  22         ci    tmp0,1                ; \
     673A 0001     
0064 673C 1103  14         jlt   !                     ; | Skip to (2) if valid
0065 673E 0284  22         ci    tmp0,5                ; | session ID.
     6740 0005     
0066 6742 1204  14         jle   tib.uncrunch.prepare.2; /
0067                       ;------------------------------------------------------
0068                       ; Assert failed
0069                       ;------------------------------------------------------
0070 6744 C80B  38 !       mov   r11,@>ffce            ; \ Save caller address
     6746 FFCE     
0071 6748 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     674A 2026     
0072                       ;------------------------------------------------------
0073                       ; (2) Get scratchpad of TI Basic session
0074                       ;------------------------------------------------------
0075               tib.uncrunch.prepare.2:
0076 674C 06A0  32         bl    @sams.page.set        ; Set SAMS page
     674E 2580     
0077 6750 00FF                   data >00ff,>f000      ; \ i  p1  = SAMS page number
     6752 F000     
0078                                                   ; / i  p2  = Memory map address
0079               
0080                       ; TI Basic session 1 scratchpad >f100
0081                       ; TI Basic session 2 scratchpad >f200
0082                       ; TI Basic session 3 scratchpad >f300
0083                       ; TI Basic session 4 scratchpad >f400
0084                       ; TI Basic session 5 scratchpad >f500
0085               
0086 6754 C120  34         mov   @tib.var1,tmp0        ; Get TI Basic session
     6756 A0EC     
0087 6758 0A84  32         sla   tmp0,8                ; Get scratchpad offset (>100->500)
0088 675A 0224  22         ai    tmp0,>f000            ; Add base address
     675C F000     
0089 675E C804  38         mov   tmp0,@tib.scrpad.ptr  ; Store pointer to scratchpad in SAMS
     6760 A0C4     
0090                       ;------------------------------------------------------
0091                       ; (3) Get relevant pointers stored in scratchpad
0092                       ;------------------------------------------------------
0093 6762 C824  54         mov   @>18(tmp0),@tib.strs.top.ptr
     6764 0018     
     6766 A0CE     
0094                                                   ; @>8318 Pointer to top of string space
0095                                                   ; in VRAM
0096               
0097 6768 C824  54         mov   @>1a(tmp0),@tib.strs.bot.ptr
     676A 001A     
     676C A0D0     
0098                                                   ; @>831a Pointer to bottom of string space
0099                                                   ; in VRAM
0100               
0101 676E C824  54         mov   @>30(tmp0),@tib.lnt.bot.ptr
     6770 0030     
     6772 A0C8     
0102                                                   ; @>8330 Pointer to bottom of line number
0103                                                   ; table in VRAM
0104               
0105 6774 C824  54         mov   @>32(tmp0),@tib.lnt.top.ptr
     6776 0032     
     6778 A0C6     
0106                                                   ; @>8332 Pointer to top of line number
0107                                                   ; table in VRAM
0108               
0109 677A C820  54         mov   @tib.lnt.bot.ptr,@tib.symt.top.ptr
     677C A0C8     
     677E A0CA     
0110 6780 0660  34         dect  @tib.symt.top.ptr     ; Pointer to top of symbol table in VRAM.
     6782 A0CA     
0111                                                   ; Table top is just below the bottom of
0112                                                   ; the line number table.
0113               
0114 6784 C824  54         mov   @>3e(tmp0),@tib.symt.bot.ptr
     6786 003E     
     6788 A0CC     
0115                                                   ; @>833e Pointer to bottom of symbol table
0116                                                   ; in VRAM
0117                       ;------------------------------------------------------
0118                       ; (4) Calculate number of lines in TI Basic program
0119                       ;------------------------------------------------------
0120 678A C120  34         mov   @tib.lnt.top.ptr,tmp0 ; \ Size of line number table entry: 4 bytes
     678C A0C6     
0121 678E 6120  34         s     @tib.lnt.bot.ptr,tmp0 ; /
     6790 A0C8     
0122 6792 1305  14         jeq   tib.uncrunch.prepare.np
0123               
0124 6794 0584  14         inc   tmp0                  ; One time offset
0125 6796 0924  20         srl   tmp0,2                ; tmp0=tmp0/4
0126 6798 C804  38         mov   tmp0,@tib.lines       ; Save lines
     679A A0D2     
0127 679C 1002  14         jmp   tib.uncrunch.prepare.5
0128                       ;------------------------------------------------------
0129                       ; No program present
0130                       ;------------------------------------------------------
0131               tib.uncrunch.prepare.np:
0132 679E 04E0  34         clr   @tib.lines            ; No program
     67A0 A0D2     
0133                       ;------------------------------------------------------
0134                       ; (5) Get pointer to SAMS page table
0135                       ;------------------------------------------------------
0136               tib.uncrunch.prepare.5:
0137                       ; The data tables of the 5 TI basic sessions form a
0138                       ; uniform region, we calculate the index of the 1st word in the
0139                       ; specified session.
0140 67A2 C120  34         mov   @tib.var1,tmp0        ; Get TI Basic session
     67A4 A0EC     
0141               
0142 67A6 0A44  24         sla   tmp0,4                ; \ Get index of first word in SAMS page
0143                                                   ; | layout (of following TI Basic session)
0144                                                   ; /
0145               
0146 67A8 0224  22         ai    tmp0,mem.sams.layout.basic - 16
     67AA 6C34     
0147                                                   ; Add base address for specified session
0148               
0149 67AC C804  38         mov   tmp0,@tib.stab.ptr    ; Save pointer
     67AE A0C2     
0150               
0151                       ;------------------------------------------------------
0152                       ; (6) Get filename of TI basic program
0153                       ;------------------------------------------------------
0154 67B0 C120  34         mov   @tib.scrpad.ptr,tmp0  ; Get pointer to scratchpad in SAMS
     67B2 A0C4     
0155 67B4 0224  22         ai    tmp0,>0500            ; Add offset for reaching auxiliary memory
     67B6 0500     
0156                                                   ; \ Session 1: >f100 + >0500 = >f600
0157                                                   ; | ...
0158                                                   ; / Session 5: >f500 + >0500 = >fa00
0159               
0160 67B8 C154  26         mov   *tmp0,tmp1            ; Check if filename set
0161 67BA 130A  14         jeq   tib.uncrunch.prepare.exit
0162                                                   ; No, skip setting filename
0163                       ;------------------------------------------------------
0164                       ; Set filename of editor buffer
0165                       ;------------------------------------------------------
0166 67BC 0205  20         li    tmp1,edb.filename     ; Destination for copy
     67BE A51C     
0167 67C0 0206  20         li    tmp2,80               ; Number of bytes to copy
     67C2 0050     
0168               
0169 67C4 06A0  32         bl    @xpym2m               ; \ Copy TI Basic filename
     67C6 24EE     
0170                                                   ; | i  tmp0 = Source address
0171                                                   ; | i  tmp1 = Target address
0172                                                   ; / i  tmp2 = Number of bytes to copy
0173               
0174 67C8 0204  20         li    tmp0,edb.filename     ; Set pointer to filename
     67CA A51C     
0175 67CC C804  38         mov   tmp0,@edb.filename.ptr
     67CE A514     
0176                       ;------------------------------------------------------
0177                       ; Exit
0178                       ;------------------------------------------------------
0179               tib.uncrunch.prepare.exit:
0180 67D0 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0181 67D2 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0182 67D4 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0183 67D6 C2F9  30         mov   *stack+,r11           ; Pop r11
0184 67D8 045B  20         b     *r11                  ; Return
                   < stevie_b7.asm
0078                       copy  "tib.uncrunch.prg.asm"       ; Uncrunch tokenized program code
     **** ****     > tib.uncrunch.prg.asm
0001               * FILE......: tib.uncrunch.prg.asm
0002               * Purpose...: Uncrunch tokenized program code
0003               
0004               ***************************************************************
0005               * tib.uncrunch.prg
0006               * Uncrunch tokenized program code
0007               ***************************************************************
0008               * bl   @tibasic.uncrunch.prg
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = TI Basic session to uncrunch (1-5)
0012               *
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0, tmp1, tmp2, tmp3, tmp4
0018               *--------------------------------------------------------------
0019               * Remarks
0020               *
0021               * Pointers:
0022               * @tib.scrpad.ptr = Scratchpad address in SAMS page >ff
0023               * @tib.stab.ptr   = SAMS page layout table of TI Basic session
0024               *
0025               * Pointers to tables in VRAM:
0026               * @tib.lnt.top.ptr  = Top of line number table
0027               * @tib.lnt.bot.ptr  = Bottom of line number table
0028               * @tib.symt.top.ptr = Top of symbol table
0029               * @tib.symt.bot.ptr = Bottom of symbol table
0030               * @tib.strs.top.ptr = Top of string space
0031               * @tib.strs.bot.ptr = Bottom of string space
0032               *
0033               * Variables
0034               * @tib.var1  = TI Basic Session
0035               * @tib.var2  = Saved VRAM address
0036               * @tib.var3  = SAMS page ID mapped to VRAM address
0037               * @tib.var4  = Line number in program
0038               * @tib.var5  = Pointer to statement (VRAM)
0039               * @tib.var6  = Current position (addr) in uncrunch area
0040               * @tib.var7  = **free**
0041               * @tib.var8  = Basic statement length in bytes
0042               * @tib.var9  = Target line number in editor buffer
0043               * @tib.lines = Number of lines in TI Basic program
0044               *
0045               * Register usage
0046               * tmp0  = (Mapped) address of line number or statement in VDP
0047               * tmp1  = Token to process
0048               * tmp2  = Statement length
0049               * tmp3  = Lines to process counter
0050               *
0051               * tmp0,tmp1,tmp2 also used as work registers at times
0052               ********|*****|*********************|**************************
0053               tib.uncrunch.prg:
0054 67DA 0649  14         dect  stack
0055 67DC C64B  30         mov   r11,*stack            ; Save return address
0056 67DE 0649  14         dect  stack
0057 67E0 C644  30         mov   tmp0,*stack           ; Push tmp0
0058 67E2 0649  14         dect  stack
0059 67E4 C645  30         mov   tmp1,*stack           ; Push tmp1
0060 67E6 0649  14         dect  stack
0061 67E8 C646  30         mov   tmp2,*stack           ; Push tmp2
0062 67EA 0649  14         dect  stack
0063 67EC C647  30         mov   tmp3,*stack           ; Push tmp3
0064                       ;------------------------------------------------------
0065                       ; Exit early if no TI Basic program
0066                       ;------------------------------------------------------
0067 67EE 8820  50         c     @tib.lnt.top.ptr,@tib.lnt.bot.ptr
     67F0 A0C6     
     67F2 A0C8     
0068                                                   ; Line number table is empty?
0069 67F4 1602  14         jne   !                     ; No, keep on processing
0070 67F6 0460  28         b     @tib.uncrunch.prg.exit
     67F8 691E     
0071                       ;------------------------------------------------------
0072                       ; Initialisation
0073                       ;------------------------------------------------------
0074 67FA C120  34 !       mov   @tib.lnt.top.ptr,tmp0 ; Get top of line number table
     67FC A0C6     
0075 67FE 0224  22         ai    tmp0,-3               ; One time adjustment
     6800 FFFD     
0076 6802 C804  38         mov   tmp0,@tib.var2        ; Save VRAM address
     6804 A0EE     
0077               
0078 6806 04E0  34         clr   @tib.var9             ; 1st line in editor buffer
     6808 A0FC     
0079 680A C1E0  34         mov   @tib.lines,tmp3       ; Set lines to process counter
     680C A0D2     
0080                       ;------------------------------------------------------
0081                       ; Loop over program listing
0082                       ;------------------------------------------------------
0083               tib.uncrunch.prg.lnt.loop:
0084 680E C120  34         mov   @tib.var2,tmp0        ; Get VRAM address
     6810 A0EE     
0085               
0086                       ; data  c99_dbg_tmp0          ; \ Print vram address in tmp0 on classic99
0087                       ; data  >1001                 ; | debugger console.
0088                       ; data  data.printf.vram.lnt  ; /
0089               
0090 6812 06A0  32         bl    @_v2sams              ; Get SAMS page mapped to VRAM address
     6814 664C     
0091                                                   ; \ i  tmp0 = VRAM address
0092                                                   ; |
0093                                                   ; | o  @tib.var3 = SAMS page ID mapped to
0094                                                   ; |    VRAM address.
0095                                                   ; /
0096                       ;------------------------------------------------------
0097                       ; 1. Get line number
0098                       ;------------------------------------------------------
0099 6816 0264  22         ori   tmp0,>f000            ; \ Use mapped address in >f000->ffff window
     6818 F000     
0100                                                   ; | instead of VRAM address.
0101                                                   ; |
0102                                                   ; / Example: >f7b3 maps to >37b3.
0103               
0104 681A D834  48         movb  *tmp0+,@tib.var4      ; Line number MSB
     681C A0F2     
0105 681E D834  48         movb  *tmp0+,@tib.var4+1    ; Line number LSB
     6820 A0F3     
0106               
0107                       ;------------------------------------------------------
0108                       ; 1a. Get Pointer to statement (VRAM)
0109                       ;------------------------------------------------------
0110 6822 D834  48         movb  *tmp0+,@tib.var5      ; Pointer to statement MSB
     6824 A0F4     
0111 6826 D834  48         movb  *tmp0+,@tib.var5+1    ; Pointer to statement LSB
     6828 A0F5     
0112               
0113 682A A820  54         a     @w$0004,@tib.var2     ; Sync VRAM address with mapped address in
     682C 2006     
     682E A0EE     
0114                                                   ; tmp0 for steps 1 and 1a.
0115                       ;------------------------------------------------------
0116                       ; 2. Put line number in uncrunch area
0117                       ;------------------------------------------------------
0118 6830 0649  14         dect  stack
0119 6832 C644  30         mov   tmp0,*stack           ; Push tmp0
0120 6834 0649  14         dect  stack
0121 6836 C645  30         mov   tmp1,*stack           ; Push tmp1
0122 6838 0649  14         dect  stack
0123 683A C646  30         mov   tmp2,*stack           ; Push tmp2
0124 683C 0649  14         dect  stack
0125 683E C647  30         mov   tmp3,*stack           ; Push tmp3
0126               
0127 6840 06A0  32         bl    @mknum                ; Convert unsigned number to string
     6842 29B4     
0128 6844 A0F2                   data tib.var4         ; \ i  p1    = Source
0129 6846 A100                   data rambuf           ; | i  p2    = Destination
0130 6848 30                     byte 48               ; | i  p3MSB = ASCII offset
0131 6849   20                   byte 32               ; / i  p3LSB = Padding character
0132               
0133 684A 04E0  34         clr   @fb.uncrunch.area     ; \
     684C D960     
0134 684E 04E0  34         clr   @fb.uncrunch.area+2   ; | Clear length-byte and line number space
     6850 D962     
0135 6852 04E0  34         clr   @fb.uncrunch.area+4   ; /
     6854 D964     
0136               
0137 6856 06A0  32         bl    @at
     6858 26D4     
0138 685A 1D1C                   byte pane.botrow,28   ; Position cursor
0139               
0140 685C 06A0  32         bl    @trimnum              ; Trim line number and move to uncrunch area
     685E 2A0C     
0141 6860 A100                   data rambuf           ; \ i  p1 = Source
0142 6862 D960                   data fb.uncrunch.area ; | i  p2 = Destination
0143 6864 0020                   data 32               ; / i  p3 = Padding character to scan
0144               
0145 6866 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0146 6868 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0147 686A C179  30         mov   *stack+,tmp1          ; Pop tmp1
0148 686C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0149                       ;------------------------------------------------------
0150                       ; 2a. Put space character following line number
0151                       ;------------------------------------------------------
0152               
0153                       ; Temporary re-use of tmp0 as work register for operations.
0154               
0155 686E D120  34         movb  @fb.uncrunch.area,tmp0
     6870 D960     
0156                                                   ; Get length of trimmed number into MSB
0157 6872 0984  32         srl   tmp0,8                ; Move to LSB
0158 6874 0224  22         ai    tmp0,fb.uncrunch.area+1
     6876 D961     
0159                                                   ; Add base address and length byte
0160               
0161 6878 0205  20         li    tmp1,>2000            ; \ Put white space character (ASCII 32)
     687A 2000     
0162 687C DD05  32         movb  tmp1,*tmp0+           ; / following line number.
0163 687E C804  38         mov   tmp0,@tib.var6        ; Save position in uncrunch area
     6880 A0F6     
0164               
0165 6882 B820  54         ab    @w$0100,@fb.uncrunch.area
     6884 2012     
     6886 D960     
0166                                                   ; Increase length-byte in uncrunch area
0167                       ;------------------------------------------------------
0168                       ; 3. Prepare for uncrunching program statement
0169                       ;------------------------------------------------------
0170 6888 C120  34         mov   @tib.var5,tmp0        ; Get pointer to statement
     688A A0F4     
0171 688C 0604  14         dec   tmp0                  ; Goto statement length prefix
0172               
0173 688E 0124             data  c99_dbg_tmp0          ; \ Print vram address in tmp0 on classic99
0174 6890 1001             data  >1001                 ; | debugger console.
0175 6892 693A             data  data.printf.vram.stmt ; /
0176               
0177 6894 06A0  32         bl    @_v2sams              ; Get SAMS page mapped to VRAM address
     6896 664C     
0178                                                   ; \ i  tmp0 = VRAM address
0179                                                   ; |
0180                                                   ; | o  @tib.var3 = SAMS page ID mapped to
0181                                                   ; |    VRAM address.
0182                                                   ; /
0183               
0184 6898 0264  22         ori   tmp0,>f000            ; \ Use mapped address in >f000->ffff window
     689A F000     
0185                                                   ; | instead of VRAM address.
0186                                                   ; |
0187                                                   ; / Example: >f7b3 maps to >37b3.
0188               
0189               
0190 689C C160  34         mov   @tib.var4,tmp1
     689E A0F2     
0191 68A0 0125             data  c99_dbg_tmp1          ; \ Print line number in tmp1 on classic99
0192 68A2 1001             data  >1001                 ; | debugger console.
0193 68A4 694A             data  data.printf.vram.lnum ; /
0194               
0195               
0196 68A6 D174  28         movb  *tmp0+,tmp1           ; \ Get statement length in bytes
0197 68A8 0985  32         srl   tmp1,8                ; / MSB to LSB
0198               
0199 68AA C805  38         mov   tmp1,@tib.var8        ; Save statement length
     68AC A0FA     
0200 68AE C185  18         mov   tmp1,tmp2             ; Set statement length in work register
0201                       ;------------------------------------------------------
0202                       ; 4. Uncrunch program statement to uncrunch area
0203                       ;------------------------------------------------------
0204               tib.uncrunch.prg.statement.loop:
0205 68B0 D154  26         movb  *tmp0,tmp1            ; Get token into MSB
0206 68B2 0985  32         srl   tmp1,8                ; Move token to LSB
0207 68B4 1320  14         jeq   tib.uncrnch.prg.copy.statement
0208                                                   ; Skip to (5) if termination token >00
0209               
0210 68B6 0285  22         ci    tmp1,>80              ; Is a valid token?
     68B8 0080     
0211 68BA 110D  14         jlt   tib.uncrunch.prg.statement.loop.nontoken
0212                                                   ; Skip decode for non-token
0213               
0214 68BC C804  38         mov   tmp0,@parm2           ; Mapped position in crunched statement
     68BE A008     
0215 68C0 C805  38         mov   tmp1,@parm1           ; Token to process
     68C2 A006     
0216               
0217 68C4 06A0  32         bl    @tib.uncrunch.token   ; Decode statement token to uncrunch area
     68C6 695A     
0218                                                   ; \ i  @parm1 = Token to process
0219                                                   ; |
0220                                                   ; | i  @parm2 = Mapped position (addr) in
0221                                                   ; |    crunched statement.
0222                                                   ; |
0223                                                   ; | o  @outparm1 = New position (addr) in
0224                                                   ; |    crunched statement.
0225                                                   ; |
0226                                                   ; | o  @outparm2 = Bytes processed in
0227                                                   ; |    crunched statement.
0228                                                   ; |
0229                                                   ; | o  @tib.var6 = Position (addr) in
0230                                                   ; /    uncrunch area.
0231               
0232 68C8 C120  34         mov   @outparm1,tmp0        ; Forward in crunched statement
     68CA A016     
0233               
0234 68CC 61A0  34         s     @outparm2,tmp2        ; Update statement length
     68CE A018     
0235 68D0 15EF  14         jgt   tib.uncrunch.prg.statement.loop
0236                                                   ; Process next token(s) unless done
0237               
0238 68D2 1311  14         jeq   tib.uncrnch.prg.copy.statement
0239                                                   ; Continue with (5)
0240               
0241 68D4 110C  14         jlt   tib.uncrnch.prg.statement.loop.panic
0242                                                   ; Assert
0243                       ;------------------------------------------------------
0244                       ; 4a. Non-token without decode
0245                       ;------------------------------------------------------
0246               tib.uncrunch.prg.statement.loop.nontoken:
0247 68D6 C160  34         mov   @tib.var6,tmp1        ; Get position (addr) in uncrunch area
     68D8 A0F6     
0248 68DA DD74  42         movb  *tmp0+,*tmp1+         ; Copy non-token to uncrunch area
0249               
0250 68DC C805  38         mov   tmp1,@tib.var6        ; Save position in uncrunch area
     68DE A0F6     
0251 68E0 B820  54         ab    @w$0100,@fb.uncrunch.area
     68E2 2012     
     68E4 D960     
0252                                                   ; Increase length-byte in uncrunch area
0253               
0254 68E6 0606  14         dec   tmp2                  ; update statement length
0255 68E8 1102  14         jlt   tib.uncrnch.prg.statement.loop.panic
0256                                                   ; Assert
0257               
0258 68EA 15E2  14         jgt   tib.uncrunch.prg.statement.loop
0259                                                   ; Process next token(s) unless done
0260 68EC 1304  14         jeq   tib.uncrnch.prg.copy.statement
0261                       ;------------------------------------------------------
0262                       ; CPU crash
0263                       ;------------------------------------------------------
0264               tib.uncrnch.prg.statement.loop.panic:
0265 68EE C80B  38         mov   r11,@>ffce            ; \ Save caller address
     68F0 FFCE     
0266 68F2 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     68F4 2026     
0267                       ;------------------------------------------------------
0268                       ; 5. Copy uncrunched statement to editor buffer
0269                       ;------------------------------------------------------
0270               tib.uncrnch.prg.copy.statement:
0271 68F6 C820  54         mov   @tib.var9,@parm1      ; Get editor buffer line number to store
     68F8 A0FC     
     68FA A006     
0272                                                   ; statement in.
0273               
0274 68FC 06A0  32         bl    @tib.uncrunch.line.pack
     68FE 6AFC     
0275                                                   ; Pack uncrunched line to editor buffer
0276                                                   ; \ i  @fb.uncrunch.area = Pointer to
0277                                                   ; |    buffer having uncrushed statement
0278                                                   ; |
0279                                                   ; | i  @parm1 = Line number in editor buffer
0280                                                   ; /
0281               
0282 6900 05A0  34         inc   @tib.var9             ; Next line
     6902 A0FC     
0283 6904 05A0  34         inc   @edb.lines            ; Update Line counter
     6906 A504     
0284                       ;------------------------------------------------------
0285                       ; 6. Next entry in line number table
0286                       ;------------------------------------------------------
0287 6908 0607  14         dec   tmp3                  ; Last line processed?
0288 690A 1305  14         jeq   tib.uncrunch.prg.done ; yes, prepare for exit
0289               
0290 690C 6820  54         s     @w$0008,@tib.var2     ; Next entry in VRAM line number table
     690E 2008     
     6910 A0EE     
0291 6912 0460  28         b     @tib.uncrunch.prg.lnt.loop
     6914 680E     
0292                       ;------------------------------------------------------
0293                       ; 7. Finished processing program
0294                       ;------------------------------------------------------
0295               tib.uncrunch.prg.done:
0296 6916 0720  34         seto  @fb.dirty             ; Refresh screen buffer
     6918 A318     
0297 691A 0720  34         seto  @edb.dirty            ; Update screen with editor buffer when done
     691C A506     
0298                       ;------------------------------------------------------
0299                       ; Exit
0300                       ;------------------------------------------------------
0301               tib.uncrunch.prg.exit:
0302 691E C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0303 6920 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0304 6922 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0305 6924 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0306 6926 C2F9  30         mov   *stack+,r11           ; Pop r11
0307 6928 045B  20         b     *r11                  ; Return
0308               
0309               
0310               data.printf.vram.lnt:
0311 692A 5652            text   'VRAM LNT >%04X'
     692C 414D     
     692E 204C     
     6930 4E54     
     6932 203E     
     6934 2530     
     6936 3458     
0312 6938 00              byte   0
0313                      even
0314               
0315               data.printf.vram.stmt:
0316 693A 5652            text   'VRAM STM >%04X'
     693C 414D     
     693E 2053     
     6940 544D     
     6942 203E     
     6944 2530     
     6946 3458     
0317 6948 00              byte   0
0318                      even
0319               
0320               data.printf.vram.lnum:
0321 694A 4261            text   'Basic line: %u'
     694C 7369     
     694E 6320     
     6950 6C69     
     6952 6E65     
     6954 3A20     
     6956 2575     
0322 6958 00              byte   0
                   < stevie_b7.asm
0079                       copy  "tib.uncrunch.token.asm"     ; Decode statement token
     **** ****     > tib.uncrunch.token.asm
0001               * FILE......: tib.uncrunch.token.asm
0002               * Purpose...: Decode token to uncrunch area
0003               
0004               
0005               ***************************************************************
0006               * tib.uncrunch.token
0007               * Decode token to uncrunch area
0008               ***************************************************************
0009               * bl   @tib.uncrunch.token
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @parm1 = Token to process
0013               * @parm2 = Mapped position (addr) in crunched statement
0014               *
0015               * OUTPUT
0016               * @outparm1  = New position (addr) in crunched statement
0017               * @outparm2  = Input bytes processed in crunched statement
0018               * @tib.var6  = Current position (addr) in uncrunch area
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * tmp0, tmp1, tmp2, tmp3, tmp4
0022               *--------------------------------------------------------------
0023               * Remarks
0024               * For TI Basic statement decode see:
0025               * https://www.unige.ch/medecine/nouspikel/ti99/basic.htm#statements
0026               *
0027               * Using @outparm2 for storing the number of input bytes
0028               * processed in crunched statement
0029               *
0030               * Using @tib.var10 for storing the number of decoded output bytes
0031               * generated in uncrunch area.
0032               *
0033               * Variables
0034               * @tib.var6  = Current position (addr) in uncrunch area
0035               * @tib.var9  = Temporary use
0036               * @tib.var10 = Temporary use
0037               ********|*****|*********************|**************************
0038               tib.uncrunch.token:
0039 695A 0649  14         dect  stack
0040 695C C64B  30         mov   r11,*stack            ; Save return address
0041 695E 0649  14         dect  stack
0042 6960 C644  30         mov   tmp0,*stack           ; Push tmp0
0043 6962 0649  14         dect  stack
0044 6964 C645  30         mov   tmp1,*stack           ; Push tmp1
0045 6966 0649  14         dect  stack
0046 6968 C646  30         mov   tmp2,*stack           ; Push tmp2
0047 696A 0649  14         dect  stack
0048 696C C647  30         mov   tmp3,*stack           ; Push tmp3
0049 696E 0649  14         dect  stack
0050 6970 C648  30         mov   tmp4,*stack           ; Push tmp4
0051 6972 0649  14         dect  stack
0052 6974 C660  46         mov   @tib.var9,*stack      ; Push @tib.var.9
     6976 A0FC     
0053 6978 0649  14         dect  stack
0054 697A C660  46         mov   @tib.var10,*stack     ; Push @tib.var.10
     697C A0FE     
0055                       ;------------------------------------------------------
0056                       ; Initialisation
0057                       ;------------------------------------------------------
0058 697E C120  34         mov   @parm1,tmp0           ; Get token
     6980 A006     
0059 6982 C820  54         mov   @parm2,@outparm1      ; Position (addr) in crunched statement
     6984 A008     
     6986 A016     
0060               
0061 6988 04E0  34         clr   @outparm2             ; Set input bytes processed
     698A A018     
0062 698C 04E0  34         clr   @tib.var10            ; Set output bytes generated (uncrunch area)
     698E A0FE     
0063                       ;------------------------------------------------------
0064                       ; 1. Decide how to process token
0065                       ;------------------------------------------------------
0066 6990 0284  22         ci    tmp0,>c7              ; Quoted string?
     6992 00C7     
0067 6994 132A  14         jeq   tib.uncrunch.token.quoted
0068               
0069 6996 0284  22         ci    tmp0,>c8              ; Unquoted string?
     6998 00C8     
0070 699A 134D  14         jeq   tib.uncrunch.token.unquoted
0071               
0072 699C 0284  22         ci    tmp0,>c9              ; line number?
     699E 00C9     
0073 69A0 136A  14         jeq   tib.uncrunch.token.linenum
0074                       ;------------------------------------------------------
0075                       ; 2. Decode token range >80 - >ff in lookup table
0076                       ;------------------------------------------------------
0077               tib.uncrunch.token.lookup:
0078 69A2 0224  22         ai    tmp0,->0080           ; Token range >80 - >ff
     69A4 FF80     
0079 69A6 0A14  18         sla   tmp0,1                ; Make it a word offset
0080 69A8 C124  34         mov   @tib.tokenindex(tmp0),tmp0
     69AA 6F28     
0081                                                   ; Get pointer to token definition
0082 69AC 0584  14         inc   tmp0                  ; Skip token identifier
0083               
0084 69AE D1B4  28         movb  *tmp0+,tmp2           ; Get length of decoded keyword
0085 69B0 0986  32         srl   tmp2,8                ; MSB to LSB
0086               
0087 69B2 C160  34         mov   @tib.var6,tmp1        ; Get current pos (addr) in uncrunch area
     69B4 A0F6     
0088 69B6 A806  38         a     tmp2,@tib.var6        ; Set current pos (addr) in uncrunch area
     69B8 A0F6     
0089               
0090 69BA 05A0  34         inc   @outparm2             ; Set input bytes processed
     69BC A018     
0091 69BE C806  38         mov   tmp2,@tib.var10       ; Set output bytes generated (uncrunch area)
     69C0 A0FE     
0092               
0093 69C2 06A0  32         bl    @xpym2m               ; Copy keyword to uncrunch area
     69C4 24EE     
0094                                                   ; \ i  tmp0 = Source address
0095                                                   ; | i  tmp1 = Destination address
0096                                                   ; / i  tmp2 = Number of bytes to copy
0097               
0098 69C6 C120  34         mov   @parm1,tmp0           ; Get token again
     69C8 A006     
0099 69CA 0284  22         ci    tmp0,>b2              ; Token range with keyword needing blank?
     69CC 00B2     
0100 69CE 1509  14         jgt   !                     ; No, as of >b3 skip to (2b)
0101                       ;------------------------------------------------------
0102                       ; 2a. Write trailing blank after decoded keyword
0103                       ;------------------------------------------------------
0104 69D0 0204  20         li    tmp0,>2000            ; Blank in MSB
     69D2 2000     
0105 69D4 C160  34         mov   @tib.var6,tmp1        ; Get current pos (addr) in uncrunch area
     69D6 A0F6     
0106 69D8 D554  38         movb  *tmp0,*tmp1           ; Write trailing blank
0107 69DA 05A0  34         inc   @tib.var6             ; Set current pos (addr) in uncrunch area
     69DC A0F6     
0108 69DE 05A0  34         inc   @tib.var10            ; Set output bytes generated (uncrunch area)
     69E0 A0FE     
0109                       ;------------------------------------------------------
0110                       ; 2b. Update variables related to crunched statement
0111                       ;------------------------------------------------------
0112 69E2 05A0  34 !       inc   @outparm1             ; New pos (addr) in crunched statement
     69E4 A016     
0113 69E6 0460  28         b     @tib.uncrunch.token.setlen
     69E8 6ADC     
0114                       ;------------------------------------------------------
0115                       ; 3. Special handling >c7: Decode quoted string
0116                       ;------------------------------------------------------
0117               tib.uncrunch.token.quoted:
0118 69EA 0204  20         li    tmp0,>2200            ; ASCII " in LSB
     69EC 2200     
0119 69EE C160  34         mov   @tib.var6,tmp1        ; Get current pos (addr) in uncrunch area
     69F0 A0F6     
0120 69F2 DD44  32         movb  tmp0,*tmp1+           ; Write 1st double quote
0121               
0122 69F4 C120  34         mov   @parm2,tmp0           ; Get position (addr) in crunched statement
     69F6 A008     
0123 69F8 0584  14         inc   tmp0                  ; Skip token
0124 69FA D1B4  28         movb  *tmp0+,tmp2           ; Get length byte following >C7 token
0125 69FC 0986  32         srl   tmp2,8                ; MSB to LSB
0126 69FE 130B  14         jeq   tib.uncrunch.token.quoted.quote2
0127                                                   ; Skip to (3c) if empty string
0128                       ;------------------------------------------------------
0129                       ; 3b. Copy string to uncrunch area
0130                       ;------------------------------------------------------
0131 6A00 0649  14         dect  stack
0132 6A02 C644  30         mov   tmp0,*stack           ; Push tmp0
0133 6A04 0649  14         dect  stack
0134 6A06 C645  30         mov   tmp1,*stack           ; Push tmp1
0135 6A08 0649  14         dect  stack
0136 6A0A C646  30         mov   tmp2,*stack           ; Push tmp2
0137               
0138 6A0C 06A0  32         bl    @xpym2m               ; Copy string from crunched statement to
     6A0E 24EE     
0139                                                   ; uncrunch area.
0140                                                   ; \ i  tmp0 = Source address
0141                                                   ; | i  tmp1 = Destination address
0142                                                   ; / i  tmp2 = Number of bytes to copy
0143               
0144 6A10 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0145 6A12 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0146 6A14 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0147                       ;------------------------------------------------------
0148                       ; 3c. Write trailing double quote
0149                       ;------------------------------------------------------
0150               tib.uncrunch.token.quoted.quote2:
0151 6A16 0204  20         li    tmp0,>2200            ; " in MSB
     6A18 2200     
0152 6A1A A146  18         a     tmp2,tmp1             ; Forward in uncrunch area
0153 6A1C DD44  32         movb  tmp0,*tmp1+           ; Write 2nd double quote
0154 6A1E C805  38         mov   tmp1,@tib.var6        ; Set current pos (addr) in uncrunch area
     6A20 A0F6     
0155                       ;------------------------------------------------------
0156                       ; 3d. Update variables related to crunched statement
0157                       ;------------------------------------------------------
0158 6A22 C106  18         mov   tmp2,tmp0             ; \ Get num of bytes copied to uncrunch area
0159 6A24 05C4  14         inct  tmp0                  ; / Count token byte and length byte
0160 6A26 C804  38         mov   tmp0,@outparm2        ; Set input bytes processed
     6A28 A018     
0161               
0162 6A2A C804  38         mov   tmp0,@tib.var10       ; Set output bytes generated (uncrunch area)
     6A2C A0FE     
0163                                                   ; Same number as input bytes processed,
0164                                                   ; because quotes match token & length byte.
0165               
0166 6A2E A820  54         a     @outparm2,@outparm1   ; New position (addr) in crunched statement
     6A30 A018     
     6A32 A016     
0167               
0168 6A34 1053  14         jmp   tib.uncrunch.token.setlen
0169                       ;------------------------------------------------------
0170                       ; 4. Special handling >c8: Decode unquoted string
0171                       ;------------------------------------------------------
0172               tib.uncrunch.token.unquoted:
0173 6A36 C160  34         mov   @tib.var6,tmp1        ; Get current pos (addr) in uncrunch area
     6A38 A0F6     
0174 6A3A C120  34         mov   @parm2,tmp0           ; Get position (addr) in crunched statement
     6A3C A008     
0175 6A3E 0584  14         inc   tmp0                  ; Skip token
0176 6A40 D1B4  28         movb  *tmp0+,tmp2           ; Get length byte following >C8 token
0177 6A42 0986  32         srl   tmp2,8                ; MSB to LSB
0178               
0179 6A44 0649  14         dect  stack
0180 6A46 C644  30         mov   tmp0,*stack           ; Push tmp0
0181 6A48 0649  14         dect  stack
0182 6A4A C645  30         mov   tmp1,*stack           ; Push tmp1
0183 6A4C 0649  14         dect  stack
0184 6A4E C646  30         mov   tmp2,*stack           ; Push tmp2
0185               
0186 6A50 06A0  32         bl    @xpym2m               ; Copy string from crunched statement to
     6A52 24EE     
0187                                                   ; uncrunch area.
0188                                                   ; \ i  tmp0 = Source address
0189                                                   ; | i  tmp1 = Destination address
0190                                                   ; / i  tmp2 = Number of bytes to copy
0191               
0192 6A54 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0193 6A56 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0194 6A58 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0195               
0196 6A5A A146  18         a     tmp2,tmp1             ; Forward in uncrunch area
0197 6A5C C805  38         mov   tmp1,@tib.var6        ; Set current pos (addr) in uncrunch area
     6A5E A0F6     
0198                       ;------------------------------------------------------
0199                       ; 4a. Update variables related to crunched statement
0200                       ;------------------------------------------------------
0201 6A60 C106  18         mov   tmp2,tmp0             ; \ Amount of bytes copied to uncrunch area
0202 6A62 05C4  14         inct  tmp0                  ; / Count token byte and length byte
0203 6A64 C804  38         mov   tmp0,@outparm2        ; Set input bytes processed
     6A66 A018     
0204               
0205 6A68 0644  14         dect  tmp0                  ; Don't count token byte and length byte
0206 6A6A C804  38         mov   tmp0,@tib.var10       ; Set output bytes generated (uncrunch area)
     6A6C A0FE     
0207               
0208 6A6E A820  54         a     @outparm2,@outparm1   ; New position (addr) in crunched statement
     6A70 A018     
     6A72 A016     
0209               
0210 6A74 1033  14         jmp   tib.uncrunch.token.setlen
0211                       ;------------------------------------------------------
0212                       ; 5. Special handling >c9: Decode line number
0213                       ;------------------------------------------------------
0214               tib.uncrunch.token.linenum:
0215 6A76 C120  34         mov   @parm2,tmp0           ; Get position (addr) in crunched statement
     6A78 A008     
0216 6A7A 0584  14         inc   tmp0                  ; Skip token
0217 6A7C C160  34         mov   @tib.var6,tmp1        ; Get current pos (addr) in uncrunch area
     6A7E A0F6     
0218               
0219 6A80 D174  28         movb  *tmp0+,tmp1           ; Get MSB of line number into MSB
0220 6A82 0985  32         srl   tmp1,8                ; MSB to LSB
0221 6A84 D174  28         movb  *tmp0+,tmp1           ; Get LSB of line number into MSB
0222 6A86 06C5  14         swpb  tmp1                  ; Put it in the right order
0223 6A88 C805  38         mov   tmp1,@tib.var9        ; Put line number word in temporary variable
     6A8A A0FC     
0224                       ;------------------------------------------------------
0225                       ; 5a. Convert line number (word) to string
0226                       ;------------------------------------------------------
0227               
0228                       ; mknum destroys tmp0-tmp4
0229                       ; That's why we push/pop up to tmp4 although tmp3-tmp4 not used here.
0230               
0231 6A8C 06A0  32         bl    @mknum                ; Convert unsigned number to string
     6A8E 29B4     
0232 6A90 A0FC                   data  tib.var9        ; \ i  p1    = Source
0233 6A92 A100                   data  rambuf          ; | i  p2    = Destination
0234 6A94 30                     byte  48              ; | i  p3MSB = ASCII offset
0235 6A95   20                   byte  32              ; / i  p3LSB = Padding character
0236               
0237 6A96 06A0  32         bl    @trimnum              ; Trim number, remove leading spaces
     6A98 2A0C     
0238 6A9A A100                   data  rambuf          ; \ i  p1 = Source
0239 6A9C A105                   data  rambuf+5        ; | i  p2 = Destination
0240 6A9E 0020                   data  32              ; / i  p3 = Padding character to look for
0241                       ;------------------------------------------------------
0242                       ; 5b. Copy decoded line number to uncrunch area
0243                       ;------------------------------------------------------
0244 6AA0 0204  20         li    tmp0,rambuf+6         ; Start of line number string
     6AA2 A106     
0245 6AA4 C160  34         mov   @tib.var6,tmp1        ; Get current pos (addr) in uncrunch area
     6AA6 A0F6     
0246               
0247 6AA8 D1A0  34         movb  @rambuf+5,tmp2        ; Get string length
     6AAA A105     
0248 6AAC 0986  32         srl   tmp2,8                ; MSB to LSB
0249               
0250 6AAE C806  38         mov   tmp2,@tib.var10       ; Set output bytes generated
     6AB0 A0FE     
0251 6AB2 A820  54         a     @tib.var10,@tib.var6  ; Set current pos (addr) in uncrunch area
     6AB4 A0FE     
     6AB6 A0F6     
0252               
0253 6AB8 0649  14         dect  stack
0254 6ABA C644  30         mov   tmp0,*stack           ; Push tmp0
0255 6ABC 0649  14         dect  stack
0256 6ABE C645  30         mov   tmp1,*stack           ; Push tmp1
0257 6AC0 0649  14         dect  stack
0258 6AC2 C646  30         mov   tmp2,*stack           ; Push tmp2
0259               
0260 6AC4 06A0  32         bl    @xpym2m               ; Copy string from crunched statement to
     6AC6 24EE     
0261                                                   ; uncrunch area.
0262                                                   ; \ i  tmp0 = Source address
0263                                                   ; | i  tmp1 = Destination address
0264                                                   ; / i  tmp2 = Number of bytes to copy
0265               
0266 6AC8 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0267 6ACA C179  30         mov   *stack+,tmp1          ; Pop tmp1
0268 6ACC C139  30         mov   *stack+,tmp0          ; Pop tmp0
0269                       ;------------------------------------------------------
0270                       ; 5c. Update variables related to crunched statement
0271                       ;------------------------------------------------------
0272 6ACE 0204  20         li    tmp0,3                ; Token + line number word
     6AD0 0003     
0273 6AD2 A804  38         a     tmp0,@outparm1        ; New pos (addr) in crunched statement
     6AD4 A016     
0274 6AD6 C804  38         mov   tmp0,@outparm2        ; Set input bytes processed
     6AD8 A018     
0275 6ADA 1000  14         jmp   tib.uncrunch.token.setlen
0276                       ;------------------------------------------------------
0277                       ; 6. Update uncrunched statement length byte
0278                       ;------------------------------------------------------
0279               tib.uncrunch.token.setlen:
0280 6ADC C120  34         mov   @tib.var10,tmp0       ; Get output bytes generated
     6ADE A0FE     
0281 6AE0 0A84  32         sla   tmp0,8                ; LSB to MSB
0282 6AE2 B804  38         ab    tmp0,@fb.uncrunch.area
     6AE4 D960     
0283                                                   ; Update string length-prefix byte
0284                       ;------------------------------------------------------
0285                       ; Exit
0286                       ;------------------------------------------------------
0287               tib.uncrunch.token.exit:
0288 6AE6 C839  50         mov   *stack+,@tib.var10    ; Pop @tib.var10
     6AE8 A0FE     
0289 6AEA C839  50         mov   *stack+,@tib.var9     ; Pop @tib.var9
     6AEC A0FC     
0290 6AEE C239  30         mov   *stack+,tmp4          ; Pop tmp4
0291 6AF0 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0292 6AF2 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0293 6AF4 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0294 6AF6 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0295 6AF8 C2F9  30         mov   *stack+,r11           ; Pop r11
0296 6AFA 045B  20         b     *r11                  ; Return
                   < stevie_b7.asm
0080                       copy  "tib.uncrunch.line.pack.asm" ; Pack line to editor buffer
     **** ****     > tib.uncrunch.line.pack.asm
0001               * FILE......: tib.uncrunch.line.pack
0002               * Purpose...: Pack uncrunched line to editor buffer
0003               
0004               ***************************************************************
0005               * tib.uncrunch.line.pack
0006               * Pack uncrunched statement line to editor buffer
0007               ***************************************************************
0008               *  bl   @tib.uncrunch.line.pack
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @fb.uncrunch  = Pointer to uncrunch area
0012               * @parm1        = Line in editor buffer
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0,tmp1,tmp2,tmp3,tmp4
0018               *--------------------------------------------------------------
0019               * Remarks
0020               * none
0021               ********|*****|*********************|**************************
0022               tib.uncrunch.line.pack:
0023 6AFC 0649  14         dect  stack
0024 6AFE C64B  30         mov   r11,*stack            ; Save return address
0025 6B00 0649  14         dect  stack
0026 6B02 C644  30         mov   tmp0,*stack           ; Push tmp0
0027 6B04 0649  14         dect  stack
0028 6B06 C645  30         mov   tmp1,*stack           ; Push tmp1
0029 6B08 0649  14         dect  stack
0030 6B0A C646  30         mov   tmp2,*stack           ; Push tmp2
0031 6B0C 0649  14         dect  stack
0032 6B0E C647  30         mov   tmp3,*stack           ; Push tmp3
0033 6B10 0649  14         dect  stack
0034 6B12 C648  30         mov   tmp4,*stack           ; Push tmp4
0035                       ;------------------------------------------------------
0036                       ; 1. Prepare scan
0037                       ;------------------------------------------------------
0038 6B14 0205  20         li    tmp1,fb.uncrunch.area ; Get pointer to uncrunch area
     6B16 D960     
0039 6B18 C1E0  34         mov   @parm1,tmp3           ; Editor buffer line
     6B1A A006     
0040               
0041 6B1C D235  28         movb  *tmp1+,tmp4           ; Get length byte
0042 6B1E 0988  32         srl   tmp4,8                ; MSB to LSB
0043               
0044 6B20 06A0  32         bl    @edb.hipage.alloc     ; Check and increase highest SAMS page
     6B22 3602     
0045                                                   ; \ i  @edb.next_free.ptr = Pointer to next
0046                                                   ; /    free line
0047                       ;------------------------------------------------------
0048                       ; 2. Update index
0049                       ;------------------------------------------------------
0050 6B24 C807  38         mov   tmp3,@parm1           ; Set editor buffer line
     6B26 A006     
0051 6B28 C820  54         mov   @edb.next_free.ptr,@parm2
     6B2A A508     
     6B2C A008     
0052                                                   ; Pointer to new line
0053 6B2E C820  54         mov   @edb.sams.hipage,@parm3
     6B30 A51A     
     6B32 A00A     
0054                                                   ; SAMS page to use
0055               
0056 6B34 06A0  32         bl    @idx.entry.update     ; Update index
     6B36 33A8     
0057                                                   ; \ i  @parm1 = Line number in editor buffer
0058                                                   ; | i  @parm2 = pointer to line in
0059                                                   ; |             editor buffer
0060                                                   ; / i  @parm3 = SAMS page
0061                       ;------------------------------------------------------
0062                       ; 3. Set line prefix in editor buffer
0063                       ;------------------------------------------------------
0064 6B38 0204  20         li    tmp0,fb.uncrunch.area+1
     6B3A D961     
0065                                                   ; Source for memory copy
0066 6B3C C160  34         mov   @edb.next_free.ptr,tmp1
     6B3E A508     
0067                                                   ; Address of line in editor buffer
0068               
0069 6B40 05E0  34         inct  @edb.next_free.ptr    ; Adjust pointer
     6B42 A508     
0070               
0071 6B44 C188  18         mov   tmp4,tmp2             ; Get line length
0072 6B46 CD46  34         mov   tmp2,*tmp1+           ; Set saved line length as line prefix
0073                       ;------------------------------------------------------
0074                       ; 4. Copy line from uncrunch area to editor buffer
0075                       ;------------------------------------------------------
0076               tib.uncrunch.line.pack.copyline:
0077 6B48 0286  22         ci    tmp2,2
     6B4A 0002     
0078 6B4C 1603  14         jne   tib.uncrunch.line.pack.copyline.checkbyte
0079 6B4E DD74  42         movb  *tmp0+,*tmp1+         ; \ Copy single word on possible
0080 6B50 DD74  42         movb  *tmp0+,*tmp1+         ; / uneven address
0081 6B52 1007  14         jmp   tib.uncrunch.line.pack.copyline.align16
0082               
0083               tib.uncrunch.line.pack.copyline.checkbyte:
0084 6B54 0286  22         ci    tmp2,1
     6B56 0001     
0085 6B58 1602  14         jne   tib.uncrunch.line.pack.copyline.block
0086 6B5A D554  38         movb  *tmp0,*tmp1           ; Copy single byte
0087 6B5C 1002  14         jmp   tib.uncrunch.line.pack.copyline.align16
0088               
0089               tib.uncrunch.line.pack.copyline.block:
0090 6B5E 06A0  32         bl    @xpym2m               ; Copy memory block
     6B60 24EE     
0091                                                   ; \ i  tmp0 = source
0092                                                   ; | i  tmp1 = destination, see (1)
0093                                                   ; / i  tmp2 = bytes to copy
0094                       ;------------------------------------------------------
0095                       ; 5. Align pointer to multiple of 16 memory address
0096                       ;------------------------------------------------------
0097               tib.uncrunch.line.pack.copyline.align16:
0098 6B62 A808  38         a     tmp4,@edb.next_free.ptr  ; Add length of line
     6B64 A508     
0099               
0100 6B66 C120  34         mov   @edb.next_free.ptr,tmp0  ; \ Round up to next multiple of 16.
     6B68 A508     
0101 6B6A 0504  14         neg   tmp0                     ; | tmp0 = tmp0 + (-tmp0 & 15)
0102 6B6C 0244  22         andi  tmp0,15                  ; | Hacker's Delight 2nd Edition
     6B6E 000F     
0103 6B70 A804  38         a     tmp0,@edb.next_free.ptr  ; / Chapter 2
     6B72 A508     
0104                       ;------------------------------------------------------
0105                       ; 6. Restore SAMS page and prepare for exit
0106                       ;------------------------------------------------------
0107               tib.uncrunch.line.pack.prepexit:
0108 6B74 8820  50         c     @edb.sams.hipage,@edb.sams.page
     6B76 A51A     
     6B78 A518     
0109 6B7A 1306  14         jeq   tib.uncrunch.line.pack.exit
0110                                                      ; Exit early if SAMS page already mapped
0111               
0112 6B7C C120  34         mov   @edb.sams.page,tmp0
     6B7E A518     
0113 6B80 C160  34         mov   @edb.top.ptr,tmp1
     6B82 A500     
0114 6B84 06A0  32         bl    @xsams.page.set       ; Set SAMS page
     6B86 2584     
0115                                                   ; \ i  tmp0 = SAMS page number
0116                                                   ; / i  tmp1 = Memory address
0117                       ;------------------------------------------------------
0118                       ; Exit
0119                       ;------------------------------------------------------
0120               tib.uncrunch.line.pack.exit:
0121 6B88 C239  30         mov   *stack+,tmp4          ; Pop tmp4
0122 6B8A C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0123 6B8C C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0124 6B8E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0125 6B90 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0126 6B92 C2F9  30         mov   *stack+,r11           ; Pop R11
0127 6B94 045B  20         b     *r11                  ; Return to caller
                   < stevie_b7.asm
0081                       ;-----------------------------------------------------------------------
0082                       ; Stubs
0083                       ;-----------------------------------------------------------------------
0084                       copy  "rom.stubs.bank7.asm"        ; Bank specific stubs
     **** ****     > rom.stubs.bank7.asm
0001               * FILE......: rom.stubs.bank7.asm
0002               * Purpose...: Bank 7 stubs for functions in other banks
0003               
0004               
0005               
0006               ***************************************************************
0007               * Stub for "cmdb.dialog.close"
0008               * bank1 vec.18
0009               ********|*****|*********************|**************************
0010               cmdb.dialog.close:
0011 6B96 0649  14         dect  stack
0012 6B98 C64B  30         mov   r11,*stack            ; Save return address
0013                       ;------------------------------------------------------
0014                       ; Call function in bank 1
0015                       ;------------------------------------------------------
0016 6B9A 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     6B9C 2F98     
0017 6B9E 6002                   data bank1.rom        ; | i  p0 = bank address
0018 6BA0 7FE2                   data vec.18           ; | i  p1 = Vector with target address
0019 6BA2 600E                   data bankid           ; / i  p2 = Source ROM bank for return
0020                       ;------------------------------------------------------
0021                       ; Exit
0022                       ;------------------------------------------------------
0023 6BA4 C2F9  30         mov   *stack+,r11           ; Pop r11
0024 6BA6 045B  20         b     *r11                  ; Return to caller
0025               
0026               
0027               ***************************************************************
0028               * Stub for "fb.refresh"
0029               * bank1 vec.20
0030               ********|*****|*********************|**************************
0031               fb.refresh:
0032 6BA8 0649  14         dect  stack
0033 6BAA C64B  30         mov   r11,*stack            ; Save return address
0034                       ;------------------------------------------------------
0035                       ; Call function in bank 1
0036                       ;------------------------------------------------------
0037 6BAC 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     6BAE 2F98     
0038 6BB0 6002                   data bank1.rom        ; | i  p0 = bank address
0039 6BB2 7FE6                   data vec.20           ; | i  p1 = Vector with target address
0040 6BB4 600E                   data bankid           ; / i  p2 = Source ROM bank for return
0041                       ;------------------------------------------------------
0042                       ; Exit
0043                       ;------------------------------------------------------
0044 6BB6 C2F9  30         mov   *stack+,r11           ; Pop r11
0045 6BB8 045B  20         b     *r11                  ; Return to caller
0046               
0047               
0048               ***************************************************************
0049               * Stub for "pane.action.colorscheme.load"
0050               * bank1 vec.31
0051               ********|*****|*********************|**************************
0052               pane.action.colorscheme.load:
0053 6BBA 0649  14         dect  stack
0054 6BBC C64B  30         mov   r11,*stack            ; Save return address
0055                       ;------------------------------------------------------
0056                       ; Call function in bank 1
0057                       ;------------------------------------------------------
0058 6BBE 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     6BC0 2F98     
0059 6BC2 6002                   data bank1.rom        ; | i  p0 = bank address
0060 6BC4 7FFC                   data vec.31           ; | i  p1 = Vector with target address
0061 6BC6 600E                   data bankid           ; / i  p2 = Source ROM bank for return
0062                       ;------------------------------------------------------
0063                       ; Exit
0064                       ;------------------------------------------------------
0065 6BC8 C2F9  30         mov   *stack+,r11           ; Pop r11
0066 6BCA 045B  20         b     *r11                  ; Return to caller
0067               
0068               
0069               ***************************************************************
0070               * Stub for "pane.action.colorscheme.statline"
0071               * bank1 vec.32
0072               ********|*****|*********************|**************************
0073               pane.action.colorscheme.statlines:
0074 6BCC 0649  14         dect  stack
0075 6BCE C64B  30         mov   r11,*stack            ; Save return address
0076                       ;------------------------------------------------------
0077                       ; Call function in bank 1
0078                       ;------------------------------------------------------
0079 6BD0 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     6BD2 2F98     
0080 6BD4 6002                   data bank1.rom        ; | i  p0 = bank address
0081 6BD6 7FFE                   data vec.32           ; | i  p1 = Vector with target address
0082 6BD8 600E                   data bankid           ; / i  p2 = Source ROM bank for return
0083                       ;------------------------------------------------------
0084                       ; Exit
0085                       ;------------------------------------------------------
0086 6BDA C2F9  30         mov   *stack+,r11           ; Pop r11
0087 6BDC 045B  20         b     *r11                  ; Return to caller
0088               
0089               ***************************************************************
0090               * Stub for "fm.newfile"
0091               * bank2 vec.5
0092               ********|*****|*********************|**************************
0093               fm.newfile:
0094 6BDE 0649  14         dect  stack
0095 6BE0 C64B  30         mov   r11,*stack            ; Save return address
0096                       ;------------------------------------------------------
0097                       ; Call function in bank 2
0098                       ;------------------------------------------------------
0099 6BE2 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     6BE4 2F98     
0100 6BE6 6004                   data bank2.rom        ; | i  p0 = bank address
0101 6BE8 7FC8                   data vec.5            ; | i  p1 = Vector with target address
0102 6BEA 600E                   data bankid           ; / i  p2 = Source ROM bank for return
0103                       ;------------------------------------------------------
0104                       ; Exit
0105                       ;------------------------------------------------------
0106 6BEC C2F9  30         mov   *stack+,r11           ; Pop r11
0107 6BEE 045B  20         b     *r11                  ; Return to caller
0108               
0109               
0110               ***************************************************************
0111               * Stub for "tibasic.buildstr"
0112               * bank3 vec.23
0113               ********|*****|*********************|**************************
0114               tibasic.buildstr:
0115 6BF0 0649  14         dect  stack
0116 6BF2 C64B  30         mov   r11,*stack            ; Save return address
0117                       ;------------------------------------------------------
0118                       ; Call function in bank 3
0119                       ;------------------------------------------------------
0120 6BF4 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     6BF6 2F98     
0121 6BF8 6006                   data bank3.rom        ; | i  p0 = bank address
0122 6BFA 7FEC                   data vec.23           ; | i  p1 = Vector with target address
0123 6BFC 600E                   data bankid           ; / i  p2 = Source ROM bank for return
0124                       ;------------------------------------------------------
0125                       ; Exit
0126                       ;------------------------------------------------------
0127 6BFE C2F9  30         mov   *stack+,r11           ; Pop r11
0128 6C00 045B  20         b     *r11                  ; Return to caller
                   < stevie_b7.asm
0085                       copy  "rom.stubs.bankx.asm"        ; Stubs to include in all banks > 0
     **** ****     > rom.stubs.bankx.asm
0001               * FILE......: rom.stubs.bankx.asm
0002               * Purpose...: Stubs to include in all banks > 0
0003               
0004               
0006               ***************************************************************
0007               * Stub for "mem.sams.setup.stevie"
0008               * bank1 vec.1
0009               ********|*****|*********************|**************************
0010               mem.sams.setup.stevie:
0011 6C02 0649  14         dect  stack
0012 6C04 C64B  30         mov   r11,*stack            ; Save return address
0013                       ;------------------------------------------------------
0014                       ; Call function in bank 1
0015                       ;------------------------------------------------------
0016 6C06 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     6C08 2F98     
0017 6C0A 6002                   data bank1.rom        ; | i  p0 = bank address
0018 6C0C 7FC0                   data vec.1            ; | i  p1 = Vector with target address
0019 6C0E 600E                   data bankid           ; / i  p2 = Source ROM bank for return
0020                       ;------------------------------------------------------
0021                       ; Exit
0022                       ;------------------------------------------------------
0023 6C10 C2F9  30         mov   *stack+,r11           ; Pop r11
0024 6C12 045B  20         b     *r11                  ; Return to caller
0026               
0027               
0049               
0050               
0072               
0073               
0095               
0096               
0118               
0119               
0141               
0142               
                   < stevie_b7.asm
0086                       ;-----------------------------------------------------------------------
0087                       ; Program data
0088                       ;-----------------------------------------------------------------------
0089                       copy  "data.sams.layout.asm"       ; SAMS bank layout for multi-purpose
     **** ****     > data.sams.layout.asm
0001               * FILE......: data.sams.layout.asm
0002               * Purpose...: SAMS bank layout for Stevie
0003               
0004               
0005               ; Following 32K memory regions are locked with
0006               ; fixed SAMS pages while running Stevie:
0007               ;
0008               ;  ---------------------------------------
0009               ;  >2000-2fff  SAMS page >00      locked
0010               ;  >3000-3fff  SAMS page >01      locked
0011               ;  >a000-afff  SAMS page >04      locked
0012               ;  ---------------------------------------
0013               ;  >b000-bfff  SAMS page >20-3f   variable
0014               ;  >c000-cfff  SAMS page >40-ff   variable
0015               ;  ---------------------------------------
0016               ;  >d000-dfff  SAMS page >05      locked+
0017               ;  >e000-efff  SAMS page >06      locked+
0018               ;  >f000-ffff  SAMS page >07      locked+
0019               ;  ---------------------------------------
0020               ;
0021               ;  1. During index search/reorganization the index temporarily
0022               ;     extends into memory range d000-ffff swapping the
0023               ;     otherwise locked+ pages as required.
0024               ;
0025               ;  2. Only when en external program is running (e.g. TI Basic)
0026               ;     or when terminating Stevie, the legacy page layout table
0027               ;     gets reactivated.
0028               
0029               
0030               
0031               ***************************************************************
0032               * SAMS page layout table
0033               * Stevie boot order
0034               *--------------------------------------------------------------
0035               mem.sams.layout.boot:
0036 6C14 0000             data  >0000                 ; >2000-2fff, SAMS page >00
0037 6C16 0100             data  >0100                 ; >3000-3fff, SAMS page >01
0038 6C18 0400             data  >0400                 ; >a000-afff, SAMS page >04
0039 6C1A 2000             data  >2000                 ; >b000-bfff, SAMS page >20
0040                                                   ; \
0041                                                   ; | Index can allocate
0042                                                   ; | pages >20 to >3f.
0043                                                   ; /
0044 6C1C 4000             data  >4000                 ; >c000-cfff, SAMS page >40
0045                                                   ; \
0046                                                   ; | Editor buffer can allocate
0047                                                   ; | pages >40 to >ff.
0048                                                   ; /
0049 6C1E 0500             data  >0500                 ; >d000-dfff, SAMS page >05
0050 6C20 0600             data  >0600                 ; >e000-efff, SAMS page >06
0051 6C22 0700             data  >0700                 ; >f000-ffff, SAMS page >07
0052               
0053               
0054               ***************************************************************
0055               * SAMS page layout table
0056               * Before running external progam
0057               *--------------------------------------------------------------
0058               mem.sams.layout.external:
0059 6C24 0000             data  >0000                 ; >2000-2fff, SAMS page >00
0060 6C26 0100             data  >0100                 ; >3000-3fff, SAMS page >01
0061 6C28 0400             data  >0400                 ; >a000-afff, SAMS page >04
0062               
0063 6C2A 1000             data  >1000                 ; >b000-efff, SAMS page >10
0064 6C2C 1100             data  >1100                 ; \
0065 6C2E 1200             data  >1200                 ; | Stevie session
0066 6C30 1300             data  >1300                 ; | VDP content
0067                                                   ; /
0068 6C32 0700             data  >0700                 ; >f000-ffff, SAMS page >07
0069               
0070               
0071               ***************************************************************
0072               * SAMS legacy page layout table
0073               * While running external program
0074               *--------------------------------------------------------------
0075               mem.sams.layout.legacy:
0076 6C34 0200             data  >0200                 ; >2000-2fff, SAMS page >02
0077 6C36 0300             data  >0300                 ; >3000-3fff, SAMS page >03
0078 6C38 0A00             data  >0a00                 ; >a000-afff, SAMS page >0a
0079 6C3A 0B00             data  >0b00                 ; >b000-bfff, SAMS page >0b
0080 6C3C 0C00             data  >0c00                 ; >c000-cfff, SAMS page >0c
0081 6C3E 0D00             data  >0d00                 ; >d000-dfff, SAMS page >0d
0082 6C40 0E00             data  >0e00                 ; >e000-efff, SAMS page >0e
0083 6C42 0F00             data  >0f00                 ; >f000-ffff, SAMS page >0f
0084               
0085               
0086               
0087               ***************************************************************
0088               * SAMS page layout table
0089               * Backup TI Basic session 1 VRAM, scratchpad + auxiliary
0090               *--------------------------------------------------------------
0091               mem.sams.layout.basic1:
0092 6C44 0000             data  >0000                 ; . >2000-2fff
0093 6C46 0100             data  >0100                 ; . >3000-3fff
0094 6C48 0400             data  >0400                 ; . >a000-afff
0095 6C4A FB00             data  >fb00                 ; \ >b000-efff
0096 6C4C FC00             data  >fc00                 ; |
0097 6C4E FD00             data  >fd00                 ; | 16K VDP dump
0098 6C50 FE00             data  >fe00                 ; /
0099 6C52 FF00             data  >ff00                 ; . >f000-ffff
0100               
0101               
0102               ***************************************************************
0103               * SAMS page layout table
0104               * Backup TI Basic session 2 VRAM, scratchpad + auxiliary
0105               *--------------------------------------------------------------
0106               mem.sams.layout.basic2:
0107 6C54 0000             data  >0000                 ; . >2000-2fff
0108 6C56 0100             data  >0100                 ; . >3000-3fff
0109 6C58 0400             data  >0400                 ; . >a000-afff
0110 6C5A F700             data  >f700                 ; \ >b000-efff
0111 6C5C F800             data  >f800                 ; |
0112 6C5E F900             data  >f900                 ; | 16K VDP dump
0113 6C60 FA00             data  >fa00                 ; /
0114 6C62 FF00             data  >ff00                 ; . >f000-ffff
0115               
0116               
0117               ***************************************************************
0118               * SAMS page layout table
0119               * Backup TI Basic session 3 VRAM, scratchpad + auxiliary
0120               *--------------------------------------------------------------
0121               mem.sams.layout.basic3:
0122 6C64 0000             data  >0000                 ; . >2000-2fff
0123 6C66 0100             data  >0100                 ; . >3000-3fff
0124 6C68 0400             data  >0400                 ; . >a000-afff
0125 6C6A F300             data  >f300                 ; \ >b000-efff
0126 6C6C F400             data  >f400                 ; |
0127 6C6E F500             data  >f500                 ; | 16K VDP dump
0128 6C70 F600             data  >f600                 ; /
0129 6C72 FF00             data  >ff00                 ; . >f000-ffff
0130               
0131               
0132               ***************************************************************
0133               * SAMS page layout table
0134               * Backup TI Basic session 4 VRAM, scratchpad + auxiliary
0135               *--------------------------------------------------------------
0136               mem.sams.layout.basic4:
0137 6C74 0000             data  >0000                 ; . >2000-2fff
0138 6C76 0100             data  >0100                 ; . >3000-3fff
0139 6C78 0400             data  >0400                 ; . >a000-afff
0140 6C7A EF00             data  >ef00                 ; \ >b000-efff
0141 6C7C F000             data  >f000                 ; |
0142 6C7E F100             data  >f100                 ; | 16K VDP dump
0143 6C80 F200             data  >f200                 ; /
0144 6C82 FF00             data  >ff00                 ; . >f000-ffff
0145               
0146               
0147               ***************************************************************
0148               * SAMS page layout table
0149               * Backup TI Basic session 5 VRAM, scratchpad + auxiliary
0150               *--------------------------------------------------------------
0151               mem.sams.layout.basic5:
0152 6C84 0000             data  >0000                 ; . >2000-2fff
0153 6C86 0100             data  >0100                 ; . >3000-3fff
0154 6C88 0400             data  >0400                 ; . >a000-afff
0155 6C8A EB00             data  >eb00                 ; \ >b000-efff
0156 6C8C EC00             data  >ec00                 ; |
0157 6C8E ED00             data  >ed00                 ; | 16K VDP dump
0158 6C90 EE00             data  >ee00                 ; /
0159 6C92 FF00             data  >ff00                 ; . >f000-ffff
0160               
0161               
0162      6C44     mem.sams.layout.basic  equ mem.sams.layout.basic1
                   < stevie_b7.asm
0090                       copy  "data.tib.tokens.asm"        ; TI Basic tokens
     **** ****     > data.tib.tokens.asm
0001               * FILE......: data.tib.tokens.asm
0002               * Purpose...: TI Basic tokens
0003               
0004               
0005               ***************************************************************
0006               *                      TI Basic tokens
0007               ***************************************************************
0008               
0009               ;-----------------------------------------------------------------------
0010               ; Command tokens
0011               ;-----------------------------------------------------------------------
0012 6C94 0003     tk.00   byte   >00,3,'R','U','N'
     6C96 5255     
     6C98 4E       
0013                       even
0014 6C9A 0103     tk.01   byte   >01,3,'N','E','W'
     6C9C 4E45     
     6C9E 57       
0015                       even
0016 6CA0 0203     tk.02   byte   >02,3,'C','O','N'
     6CA2 434F     
     6CA4 4E       
0017                       even
0018 6CA6 0208     tk.02l  byte   >02,8,'C','O','N','T','I','N','U','E'
     6CA8 434F     
     6CAA 4E54     
     6CAC 494E     
     6CAE 5545     
0019                       even
0020 6CB0 0304     tk.03   byte   >03,4,'L','I','S','T'
     6CB2 4C49     
     6CB4 5354     
0021                       even
0022 6CB6 0403     tk.04   byte   >04,3,'B','Y','E'
     6CB8 4259     
     6CBA 45       
0023                       even
0024 6CBC 0503     tk.05   byte   >05,3,'N','U','M'
     6CBE 4E55     
     6CC0 4D       
0025                       even
0026 6CC2 0506     tk.05l  byte   >05,6,'N','U','M','B','E','R'
     6CC4 4E55     
     6CC6 4D42     
     6CC8 4552     
0027                       even
0028 6CCA 0603     tk.06   byte   >06,3,'O','L','D'
     6CCC 4F4C     
     6CCE 44       
0029                       even
0030 6CD0 0703     tk.07   byte   >07,3,'R','E','S'
     6CD2 5245     
     6CD4 53       
0031                       even
0032 6CD6 070A     tk.07l  byte   >07,10,'R','E','S','E','Q','U','E','N','C','E'
     6CD8 5245     
     6CDA 5345     
     6CDC 5155     
     6CDE 454E     
     6CE0 4345     
0033                       even
0034 6CE2 0804     tk.08   byte   >08,4,'S','A','V','E'
     6CE4 5341     
     6CE6 5645     
0035                       even
0036 6CE8 0904     tk.09   byte   >09,4,'E','D','I','T'
     6CEA 4544     
     6CEC 4954     
0037                       even
0038               ;-----------------------------------------------------------------------
0039               ; Program tokens
0040               ;-----------------------------------------------------------------------
0041 6CEE 8105     tk.81   byte   >81,5,' ','E','L','S','E'
     6CF0 2045     
     6CF2 4C53     
     6CF4 45       
0042                       even
0043 6CF6 8402     tk.84   byte   >84,2,'I','F'
     6CF8 4946     
0044                       even
0045 6CFA 8502     tk.85   byte   >85,2,'G','O'
     6CFC 474F     
0046                       even
0047 6CFE 8604     tk.86   byte   >86,4,'G','O','T','O'
     6D00 474F     
     6D02 544F     
0048                       even
0049 6D04 8705     tk.87   byte   >87,5,'G','O','S','U','B'
     6D06 474F     
     6D08 5355     
     6D0A 42       
0050                       even
0051 6D0C 8806     tk.88   byte   >88,6,'R','E','T','U','R','N'
     6D0E 5245     
     6D10 5455     
     6D12 524E     
0052                       even
0053 6D14 8903     tk.89   byte   >89,3,'D','E','F'
     6D16 4445     
     6D18 46       
0054                       even
0055 6D1A 8A03     tk.8a   byte   >8A,3,'D','I','M'
     6D1C 4449     
     6D1E 4D       
0056                       even
0057 6D20 8B03     tk.8b   byte   >8B,3,'E','N','D'
     6D22 454E     
     6D24 44       
0058                       even
0059 6D26 8C03     tk.8c   byte   >8C,3,'F','O','R'
     6D28 464F     
     6D2A 52       
0060                       even
0061 6D2C 8D03     tk.8d   byte   >8D,3,'L','E','T'
     6D2E 4C45     
     6D30 54       
0062                       even
0063 6D32 8E05     tk.8e   byte   >8E,5,'B','R','E','A','K'
     6D34 4252     
     6D36 4541     
     6D38 4B       
0064                       even
0065 6D3A 8F07     tk.8f   byte   >8F,7,'U','N','B','R','E','A','K'
     6D3C 554E     
     6D3E 4252     
     6D40 4541     
     6D42 4B       
0066                       even
0067 6D44 9005     tk.90   byte   >90,5,'T','R','A','C','E'
     6D46 5452     
     6D48 4143     
     6D4A 45       
0068                       even
0069 6D4C 9107     tk.91   byte   >91,7,'U','N','T','R','A','C','E'
     6D4E 554E     
     6D50 5452     
     6D52 4143     
     6D54 45       
0070                       even
0071 6D56 9205     tk.92   byte   >92,5,'I','N','P','U','T'
     6D58 494E     
     6D5A 5055     
     6D5C 54       
0072                       even
0073 6D5E 9304     tk.93   byte   >93,4,'D','A','T','A'
     6D60 4441     
     6D62 5441     
0074                       even
0075 6D64 9407     tk.94   byte   >94,7,'R','E','S','T','O','R','E'
     6D66 5245     
     6D68 5354     
     6D6A 4F52     
     6D6C 45       
0076                       even
0077 6D6E 9509     tk.95   byte   >95,9,'R','A','N','D','O','M','I','Z','E'
     6D70 5241     
     6D72 4E44     
     6D74 4F4D     
     6D76 495A     
     6D78 45       
0078                       even
0079 6D7A 9604     tk.96   byte   >96,4,'N','E','X','T'
     6D7C 4E45     
     6D7E 5854     
0080                       even
0081 6D80 9704     tk.97   byte   >97,4,'R','E','A','D'
     6D82 5245     
     6D84 4144     
0082                       even
0083 6D86 9804     tk.98   byte   >98,4,'S','T','O','P'
     6D88 5354     
     6D8A 4F50     
0084                       even
0085 6D8C 9906     tk.99   byte   >99,6,'D','E','L','E','T','E'
     6D8E 4445     
     6D90 4C45     
     6D92 5445     
0086                       even
0087 6D94 9A03     tk.9a   byte   >9A,3,'R','E','M'
     6D96 5245     
     6D98 4D       
0088                       even
0089 6D9A 9B02     tk.9b   byte   >9B,2,'O','N'
     6D9C 4F4E     
0090                       even
0091 6D9E 9C05     tk.9c   byte   >9C,5,'P','R','I','N','T'
     6DA0 5052     
     6DA2 494E     
     6DA4 54       
0092                       even
0093 6DA6 9D04     tk.9d   byte   >9D,4,'C','A','L','L'
     6DA8 4341     
     6DAA 4C4C     
0094                       even
0095 6DAC 9E06     tk.9e   byte   >9E,6,'O','P','T','I','O','N'
     6DAE 4F50     
     6DB0 5449     
     6DB2 4F4E     
0096                       even
0097 6DB4 9F04     tk.9f   byte   >9F,4,'O','P','E','N'
     6DB6 4F50     
     6DB8 454E     
0098                       even
0099 6DBA A005     tk.a0   byte   >A0,5,'C','L','O','S','E'
     6DBC 434C     
     6DBE 4F53     
     6DC0 45       
0100                       even
0101 6DC2 A103     tk.a1   byte   >A1,3,'S','U','B'
     6DC4 5355     
     6DC6 42       
0102                       even
0103 6DC8 A207     tk.a2   byte   >A2,7,'D','I','S','P','L','A','Y'
     6DCA 4449     
     6DCC 5350     
     6DCE 4C41     
     6DD0 59       
0104                       even
0105 6DD2 B005     tk.b0   byte   >B0,5,' ','T','H','E','N'
     6DD4 2054     
     6DD6 4845     
     6DD8 4E       
0106                       even
0107 6DDA B103     tk.b1   byte   >B1,3,' ','T','O'
     6DDC 2054     
     6DDE 4F       
0108                       even
0109 6DE0 B205     tk.b2   byte   >B2,5,' ','S','T','E','P'
     6DE2 2053     
     6DE4 5445     
     6DE6 50       
0110                       even
0111 6DE8 B301     tk.b3   byte   >B3,1,','
     6DEA 2C       
0112                       even
0113 6DEC B401     tk.b4   byte   >B4,1,';'
     6DEE 3B       
0114                       even
0115 6DF0 B501     tk.b5   byte   >B5,1,':'
     6DF2 3A       
0116                       even
0117 6DF4 B601     tk.b6   byte   >B6,1,')'
     6DF6 29       
0118                       even
0119 6DF8 B701     tk.b7   byte   >B7,1,'('
     6DFA 28       
0120                       even
0121 6DFC B801     tk.b8   byte   >B8,1,'&'
     6DFE 26       
0122                       even
0123 6E00 BE01     tk.be   byte   >BE,1,'='
     6E02 3D       
0124                       even
0125 6E04 BF01     tk.bf   byte   >BF,1,'<'
     6E06 3C       
0126                       even
0127 6E08 C001     tk.c0   byte   >C0,1,'>'
     6E0A 3E       
0128                       even
0129 6E0C C101     tk.c1   byte   >C1,1,'+'
     6E0E 2B       
0130                       even
0131 6E10 C201     tk.c2   byte   >C2,1,'-'
     6E12 2D       
0132                       even
0133 6E14 C301     tk.c3   byte   >C3,1,'*'
     6E16 2A       
0134                       even
0135 6E18 C401     tk.c4   byte   >C4,1,'/'
     6E1A 2F       
0136                       even
0137 6E1C C501     tk.c5   byte   >C5,1,'^'
     6E1E 5E       
0138                       even
0139 6E20 C701     tk.c7   byte   >C7,1,34                ; Quote character
     6E22 22       
0140                       even
0141 6E24 C801     tk.c8   byte   >C8,1,' '
     6E26 20       
0142                       even
0143 6E28 C901     tk.c9   byte   >C9,1,' '
     6E2A 20       
0144                       even
0145 6E2C CA03     tk.ca   byte   >CA,3,'E','O','F'
     6E2E 454F     
     6E30 46       
0146                       even
0147 6E32 CB03     tk.cb   byte   >CB,3,'A','B','S'
     6E34 4142     
     6E36 53       
0148                       even
0149 6E38 CC03     tk.cc   byte   >CC,3,'A','T','N'
     6E3A 4154     
     6E3C 4E       
0150                       even
0151 6E3E CD03     tk.cd   byte   >CD,3,'C','O','S'
     6E40 434F     
     6E42 53       
0152                       even
0153 6E44 CE03     tk.ce   byte   >CE,3,'E','X','P'
     6E46 4558     
     6E48 50       
0154                       even
0155 6E4A CF03     tk.cf   byte   >CF,3,'I','N','T'
     6E4C 494E     
     6E4E 54       
0156                       even
0157 6E50 D003     tk.d0   byte   >D0,3,'L','O','G'
     6E52 4C4F     
     6E54 47       
0158                       even
0159 6E56 D103     tk.d1   byte   >D1,3,'S','G','N'
     6E58 5347     
     6E5A 4E       
0160                       even
0161 6E5C D203     tk.d2   byte   >D2,3,'S','I','N'
     6E5E 5349     
     6E60 4E       
0162                       even
0163 6E62 D303     tk.d3   byte   >D3,3,'S','Q','R'
     6E64 5351     
     6E66 52       
0164                       even
0165 6E68 D403     tk.d4   byte   >D4,3,'T','A','N'
     6E6A 5441     
     6E6C 4E       
0166                       even
0167 6E6E D503     tk.d5   byte   >D5,3,'L','E','N'
     6E70 4C45     
     6E72 4E       
0168                       even
0169 6E74 D604     tk.d6   byte   >D6,4,'C','H','R','$'
     6E76 4348     
     6E78 5224     
0170                       even
0171 6E7A D703     tk.d7   byte   >D7,3,'R','N','D'
     6E7C 524E     
     6E7E 44       
0172                       even
0173 6E80 D804     tk.d8   byte   >D8,4,'S','E','G','$'
     6E82 5345     
     6E84 4724     
0174                       even
0175 6E86 D903     tk.d9   byte   >D9,3,'P','O','S'
     6E88 504F     
     6E8A 53       
0176                       even
0177 6E8C DA03     tk.da   byte   >DA,3,'V','A','L'
     6E8E 5641     
     6E90 4C       
0178                       even
0179 6E92 DB04     tk.db   byte   >DB,4,'S','T','R','$'
     6E94 5354     
     6E96 5224     
0180                       even
0181 6E98 DC03     tk.dc   byte   >DC,3,'A','S','C'
     6E9A 4153     
     6E9C 43       
0182                       even
0183 6E9E DE03     tk.de   byte   >DE,3,'R','E','C'
     6EA0 5245     
     6EA2 43       
0184                       even
0185 6EA4 F104     tk.f1   byte   >F1,4,'B','A','S','E'
     6EA6 4241     
     6EA8 5345     
0186                       even
0187 6EAA F308     tk.f3   byte   >F3,8,'V','A','R','I','A','B','L','E'
     6EAC 5641     
     6EAE 5249     
     6EB0 4142     
     6EB2 4C45     
0188                       even
0189 6EB4 F408     tk.f4   byte   >F4,8,'R','E','L','A','T','I','V','E'
     6EB6 5245     
     6EB8 4C41     
     6EBA 5449     
     6EBC 5645     
0190                       even
0191 6EBE F508     tk.f5   byte   >F5,8,'I','N','T','E','R','N','A','L'
     6EC0 494E     
     6EC2 5445     
     6EC4 524E     
     6EC6 414C     
0192                       even
0193 6EC8 F60A     tk.f6   byte   >F6,10,'S','E','Q','U','E','N','T','I','A','L'
     6ECA 5345     
     6ECC 5155     
     6ECE 454E     
     6ED0 5449     
     6ED2 414C     
0194                       even
0195 6ED4 F706     tk.f7   byte   >F7,6,'O','U','T','P','U','T'
     6ED6 4F55     
     6ED8 5450     
     6EDA 5554     
0196                       even
0197 6EDC F806     tk.f8   byte   >F8,6,'U','P','D','A','T','E'
     6EDE 5550     
     6EE0 4441     
     6EE2 5445     
0198                       even
0199 6EE4 F906     tk.f9   byte   >F9,6,'A','P','P','E','N','D'
     6EE6 4150     
     6EE8 5045     
     6EEA 4E44     
0200                       even
0201 6EEC FA06     tk.fa   byte   >FA,6,'F','I','X','E','D',' '
     6EEE 4649     
     6EF0 5845     
     6EF2 4420     
0202                       even
0203 6EF4 FB09     tk.fb   byte   >FB,9,'P','E','R','M','A','N','E','N','T'
     6EF6 5045     
     6EF8 524D     
     6EFA 414E     
     6EFC 454E     
     6EFE 54       
0204                       even
0205 6F00 FC03     tk.fc   byte   >FC,3,'T','A','B'
     6F02 5441     
     6F04 42       
0206                       even
0207 6F06 FD01     tk.fd   byte   >FD,1,'#'
     6F08 23       
0208                       even
0209 6F0A FF01     tk.noop byte   >FF,1,'?'
     6F0C 3F       
0210                       even
0211               ;-----------------------------------------------------------------------
0212               ; Token index command mode
0213               ;-----------------------------------------------------------------------
0214 6F0E 6C94     tki.00  data   tk.00               ; RUN
0215 6F10 6C9A     tki.01  data   tk.01               ; NEW
0216 6F12 6CA0     tki.02  data   tk.02               ; CON
0217 6F14 6CA6     tki.02l data   tk.02l              ; CONTINUE
0218 6F16 6CB0     tki.03  data   tk.03               ; LIST
0219 6F18 6CB6     tki.04  data   tk.04               ; BYE
0220 6F1A 6CBC     tki.05  data   tk.05               ; NUM
0221 6F1C 6CC2     tki.05l data   tk.05l              ; NUMBER
0222 6F1E 6CCA     tki.06  data   tk.06               ; OLD
0223 6F20 6CD0     tki.07  data   tk.07               ; RES
0224 6F22 6CD6     tki.07l data   tk.07l              ; RESEQUENCE
0225 6F24 6CE2     tki.08  data   tk.08               ; SAVE
0226 6F26 6CE8     tki.09  data   tk.09               ; EDIT
0227               ;-----------------------------------------------------------------------
0228               ; Token index program statement
0229               ;-----------------------------------------------------------------------
0230 6F28 6F0A     tki.80  data   tk.noop             ;
0231 6F2A 6CEE     tki.81  data   tk.81               ; ELSE
0232 6F2C 6F0A     tki.82  data   tk.noop             ;
0233 6F2E 6F0A     tki.83  data   tk.noop             ;
0234 6F30 6CF6     tki.84  data   tk.84               ; IF
0235 6F32 6CFA     tki.85  data   tk.85               ; GO
0236 6F34 6CFE     tki.86  data   tk.86               ; GOTO
0237 6F36 6D04     tki.87  data   tk.87               ; GOSUB
0238 6F38 6D0C     tki.88  data   tk.88               ; RETURN
0239 6F3A 6D14     tki.89  data   tk.89               ; DEF
0240 6F3C 6D1A     tki.8a  data   tk.8a               ; DIM
0241 6F3E 6D20     tki.8b  data   tk.8b               ; END
0242 6F40 6D26     tki.8c  data   tk.8c               ; FOR
0243 6F42 6D2C     tki.8d  data   tk.8d               ; LET
0244 6F44 6D32     tki.8e  data   tk.8e               ; BREAK
0245 6F46 6D3A     tki.8f  data   tk.8f               ; UNBREAK
0246 6F48 6D44     tki.90  data   tk.90               ; TRACE
0247 6F4A 6D4C     tki.91  data   tk.91               ; UNTRACE
0248 6F4C 6D56     tki.92  data   tk.92               ; INPUT
0249 6F4E 6D5E     tki.93  data   tk.93               ; DATA
0250 6F50 6D64     tki.94  data   tk.94               ; RESTORE
0251 6F52 6D6E     tki.95  data   tk.95               ; RANDOMIZE
0252 6F54 6D7A     tki.96  data   tk.96               ; NEXT
0253 6F56 6D80     tki.97  data   tk.97               ; READ
0254 6F58 6D86     tki.98  data   tk.98               ; STOP
0255 6F5A 6D8C     tki.99  data   tk.99               ; DELETE
0256 6F5C 6D94     tki.9a  data   tk.9a               ; REM
0257 6F5E 6D9A     tki.9b  data   tk.9b               ; ON
0258 6F60 6D9E     tki.9c  data   tk.9c               ; PRINT
0259 6F62 6DA6     tki.9d  data   tk.9d               ; CALL
0260 6F64 6DAC     tki.9e  data   tk.9e               ; OPTION
0261 6F66 6DB4     tki.9f  data   tk.9f               ; OPEN
0262 6F68 6DBA     tki.a0  data   tk.a0               ; CLOSE
0263 6F6A 6DC2     tki.a1  data   tk.a1               ; SUB
0264 6F6C 6DC8     tki.a2  data   tk.a2               ; DISPLAY
0265 6F6E 6F0A     tki.a3  data   tk.noop             ;
0266 6F70 6F0A     tki.a4  data   tk.noop             ;
0267 6F72 6F0A     tki.a5  data   tk.noop             ;
0268 6F74 6F0A     tki.a6  data   tk.noop             ;
0269 6F76 6F0A     tki.a7  data   tk.noop             ;
0270 6F78 6F0A     tki.a8  data   tk.noop             ;
0271 6F7A 6F0A     tki.a9  data   tk.noop             ;
0272 6F7C 6F0A     tki.aa  data   tk.noop             ;
0273 6F7E 6F0A     tki.ab  data   tk.noop             ;
0274 6F80 6F0A     tki.ac  data   tk.noop             ;
0275 6F82 6F0A     tki.ad  data   tk.noop             ;
0276 6F84 6F0A     tki.ae  data   tk.noop             ;
0277 6F86 6F0A     tki.af  data   tk.noop             ;
0278 6F88 6DD2     tki.b0  data   tk.b0               ; THEN
0279 6F8A 6DDA     tki.b1  data   tk.b1               ; TO
0280 6F8C 6DE0     tki.b2  data   tk.b2               ; STEP
0281 6F8E 6DE8     tki.b3  data   tk.b3               ; ,
0282 6F90 6DEC     tki.b4  data   tk.b4               ; ;
0283 6F92 6DF0     tki.b5  data   tk.b5               ; :
0284 6F94 6DF4     tki.b6  data   tk.b6               ; )
0285 6F96 6DF8     tki.b7  data   tk.b7               ; (
0286 6F98 6DFC     tki.b8  data   tk.b8               ; &
0287 6F9A 6F0A     tki.b9  data   tk.noop             ;
0288 6F9C 6F0A     tki.ba  data   tk.noop             ;
0289 6F9E 6F0A     tki.bb  data   tk.noop             ;
0290 6FA0 6F0A     tki.bc  data   tk.noop             ;
0291 6FA2 6F0A     tki.bd  data   tk.noop             ;
0292 6FA4 6E00     tki.be  data   tk.be               ; =
0293 6FA6 6E04     tki.bf  data   tk.bf               ; <
0294 6FA8 6E08     tki.c0  data   tk.c0               ; >
0295 6FAA 6E0C     tki.c1  data   tk.c1               ; +
0296 6FAC 6E10     tki.c2  data   tk.c2               ; -
0297 6FAE 6E14     tki.c3  data   tk.c3               ; *
0298 6FB0 6E18     tki.c4  data   tk.c4               ; /
0299 6FB2 6E1C     tki.c5  data   tk.c5               ; ^
0300 6FB4 6F0A     tki.c6  data   tk.noop             ;
0301 6FB6 6E20     tki.c7  data   tk.c7               ; Quoted string
0302 6FB8 6E24     tki.c8  data   tk.c8               ; Unquoted string
0303 6FBA 6E28     tki.c9  data   tk.c9               ; Line number
0304 6FBC 6E2C     tki.ca  data   tk.ca               ; EOF
0305 6FBE 6E32     tki.cb  data   tk.cb               ; ABS
0306 6FC0 6E38     tki.cc  data   tk.cc               ; ATN
0307 6FC2 6E3E     tki.cd  data   tk.cd               ; COS
0308 6FC4 6E44     tki.ce  data   tk.ce               ; EXP
0309 6FC6 6E4A     tki.cf  data   tk.cf               ; INT
0310 6FC8 6E50     tki.d0  data   tk.d0               ; LOG
0311 6FCA 6E56     tki.d1  data   tk.d1               ; SGN
0312 6FCC 6E5C     tki.d2  data   tk.d2               ; SIN
0313 6FCE 6E62     tki.d3  data   tk.d3               ; SQR
0314 6FD0 6E68     tki.d4  data   tk.d4               ; TAN
0315 6FD2 6E6E     tki.d5  data   tk.d5               ; LEN
0316 6FD4 6E74     tki.d6  data   tk.d6               ; CHAR$
0317 6FD6 6E7A     tki.d7  data   tk.d7               ; RND
0318 6FD8 6E80     tki.d8  data   tk.d8               ; SEG$
0319 6FDA 6E86     tki.d9  data   tk.d9               ; POS
0320 6FDC 6E8C     tki.da  data   tk.da               ; VAL
0321 6FDE 6E92     tki.db  data   tk.db               ; STR$
0322 6FE0 6E98     tki.dc  data   tk.dc               ; ASC
0323 6FE2 6F0A     tki.dd  data   tk.noop             ;
0324 6FE4 6E9E     tki.de  data   tk.de               ; REC
0325 6FE6 6F0A     tki.df  data   tk.noop             ;
0326 6FE8 6F0A     tki.e0  data   tk.noop             ;
0327 6FEA 6F0A     tki.e1  data   tk.noop             ;
0328 6FEC 6F0A     tki.e2  data   tk.noop             ;
0329 6FEE 6F0A     tki.e3  data   tk.noop             ;
0330 6FF0 6F0A     tki.e4  data   tk.noop             ;
0331 6FF2 6F0A     tki.e5  data   tk.noop             ;
0332 6FF4 6F0A     tki.e6  data   tk.noop             ;
0333 6FF6 6F0A     tki.e7  data   tk.noop             ;
0334 6FF8 6F0A     tki.e8  data   tk.noop             ;
0335 6FFA 6F0A     tki.e9  data   tk.noop             ;
0336 6FFC 6F0A     tki.ea  data   tk.noop             ;
0337 6FFE 6F0A     tki.eb  data   tk.noop             ;
0338 7000 6F0A     tki.ec  data   tk.noop             ;
0339 7002 6F0A     tki.ed  data   tk.noop             ;
0340 7004 6F0A     tki.ee  data   tk.noop             ;
0341 7006 6F0A     tki.ef  data   tk.noop             ;
0342 7008 6F0A     tki.f0  data   tk.noop             ;
0343 700A 6EA4     tki.f1  data   tk.f1               ; BASE
0344 700C 6F0A     tki.f2  data   tk.noop             ;
0345 700E 6EAA     tki.f3  data   tk.f3               ; VARIABLE
0346 7010 6EB4     tki.f4  data   tk.f4               ; RELATIVE
0347 7012 6EBE     tki.f5  data   tk.f5               ; INTERNAL
0348 7014 6EC8     tki.f6  data   tk.f6               ; SEQUENTIAL
0349 7016 6ED4     tki.f7  data   tk.f7               ; OUTPUT
0350 7018 6EDC     tki.f8  data   tk.f8               ; UPDATE
0351 701A 6EE4     tki.f9  data   tk.f9               ; APPEND
0352 701C 6EEC     tki.fa  data   tk.fa               ; FIXED
0353 701E 6EF4     tki.fb  data   tk.fb               ; PERMANENT
0354 7020 6F00     tki.fc  data   tk.fc               ; TAB
0355 7022 6F06     tki.fd  data   tk.fd               ; #
0356 7024 6F0A     tki.fe  data   tk.noop             ;
0357 7026 6F0A     tki.ff  data   tk.noop             ; <NOOP>
0358               
0359      6F28     tib.tokenindex equ tki.80
                   < stevie_b7.asm
0091                       ;-----------------------------------------------------------------------
0092                       ; Scratchpad memory dump
0093                       ;-----------------------------------------------------------------------
0094                       aorg >7e00
0095                       copy  "data.scrpad.asm"            ; Required for TI Basic
     **** ****     > data.scrpad.asm
0001               * FILE......: data.scrpad.asm
0002               * Purpose...: Stevie Editor - data segment (scratchpad dump)
0003               
0004               ***************************************************************
0005               *    TI MONITOR scratchpad dump on cartridge menu screen
0006               ***************************************************************
0007               
0008               scrpad.monitor:
0009                       ;-------------------------------------------------------
0010                       ; Scratchpad TI monitor on cartridge selection screen
0011                       ;-------------------------------------------------------
0012 7E00 0000             byte  >00,>00,>21,>4D,>00,>00,>00,>00    ; >8300 - >8307
     7E02 214D     
     7E04 0000     
     7E06 0000     
0013 7E08 0000             byte  >00,>00,>00,>00,>00,>00,>00,>00    ; >8308 - >830f
     7E0A 0000     
     7E0C 0000     
     7E0E 0000     
0014 7E10 0000             byte  >00,>00,>00,>00,>00,>00,>00,>00    ; >8310 - >8317
     7E12 0000     
     7E14 0000     
     7E16 0000     
0015 7E18 0000             byte  >00,>00,>00,>00,>00,>00,>00,>00    ; >8318 - >831f
     7E1A 0000     
     7E1C 0000     
     7E1E 0000     
0016 7E20 0000             byte  >00,>00,>00,>00,>00,>00,>00,>00    ; >8320 - >8327
     7E22 0000     
     7E24 0000     
     7E26 0000     
0017 7E28 0000             byte  >00,>00,>00,>00,>00,>00,>00,>00    ; >8328 - >832f
     7E2A 0000     
     7E2C 0000     
     7E2E 0000     
0018 7E30 0000             byte  >00,>00,>00,>00,>00,>00,>00,>00    ; >8330 - >8337
     7E32 0000     
     7E34 0000     
     7E36 0000     
0019 7E38 0000             byte  >00,>00,>00,>00,>00,>00,>00,>00    ; >8338 - >833f
     7E3A 0000     
     7E3C 0000     
     7E3E 0000     
0020 7E40 0000             byte  >00,>00,>60,>13,>00,>00,>00,>00    ; >8340 - >8347
     7E42 6013     
     7E44 0000     
     7E46 0000     
0021 7E48 0000             byte  >00,>00,>00,>00,>00,>00,>00,>00    ; >8348 - >834f
     7E4A 0000     
     7E4C 0000     
     7E4E 0000     
0022 7E50 0000             byte  >00,>00,>01,>24,>00,>00,>00,>00    ; >8350 - >8357
     7E52 0124     
     7E54 0000     
     7E56 0000     
0023 7E58 311E             byte  >31,>1E,>00,>00,>00,>00,>00,>08    ; >8358 - >835f
     7E5A 0000     
     7E5C 0000     
     7E5E 0008     
0024 7E60 0000             byte  >00,>00,>00,>00,>00,>00,>00,>00    ; >8360 - >8367
     7E62 0000     
     7E64 0000     
     7E66 0000     
0025 7E68 0000             byte  >00,>00,>21,>52,>01,>06,>00,>00    ; >8368 - >836f
     7E6A 2152     
     7E6C 0106     
     7E6E 0000     
0026 7E70 37D7             byte  >37,>D7,>FE,>7E,>00,>FF,>00,>00    ; >8370 - >8377
     7E72 FE7E     
     7E74 00FF     
     7E76 0000     
0027 7E78 52D2             byte  >52,>D2,>00,>E4,>00,>00,>05,>09    ; >8378 - >837f
     7E7A 00E4     
     7E7C 0000     
     7E7E 0509     
0028 7E80 02FA             byte  >02,>FA,>03,>85,>00,>00,>00,>00    ; >8380 - >8387
     7E82 0385     
     7E84 0000     
     7E86 0000     
0029 7E88 0000             byte  >00,>00,>00,>00,>00,>00,>00,>00    ; >8388 - >838f
     7E8A 0000     
     7E8C 0000     
     7E8E 0000     
0030 7E90 0000             byte  >00,>00,>00,>00,>00,>00,>00,>00    ; >8390 - >8397
     7E92 0000     
     7E94 0000     
     7E96 0000     
0031 7E98 0000             byte  >00,>00,>00,>00,>00,>00,>00,>00    ; >8398 - >839f
     7E9A 0000     
     7E9C 0000     
     7E9E 0000     
0032 7EA0 0000             byte  >00,>00,>00,>00,>00,>00,>00,>00    ; >83A0 - >83a7
     7EA2 0000     
     7EA4 0000     
     7EA6 0000     
0033 7EA8 0000             byte  >00,>00,>00,>00,>00,>00,>00,>00    ; >83A8 - >83af
     7EAA 0000     
     7EAC 0000     
     7EAE 0000     
0034 7EB0 0000             byte  >00,>00,>00,>00,>00,>00,>00,>00    ; >83B0 - >83b7
     7EB2 0000     
     7EB4 0000     
     7EB6 0000     
0035 7EB8 0000             byte  >00,>00,>00,>00,>00,>00,>00,>00    ; >83B8 - >83bf
     7EBA 0000     
     7EBC 0000     
     7EBE 0000     
0036 7EC0 5209             byte  >52,>09,>00,>00,>00,>00,>00,>00    ; >83C0 - >83c7
     7EC2 0000     
     7EC4 0000     
     7EC6 0000     
0037 7EC8 FFFF             byte  >FF,>FF,>FF,>00,>04,>84,>00,>00    ; >83C8 - >83cf
     7ECA FF00     
     7ECC 0484     
     7ECE 0000     
0038 7ED0 9804             byte  >98,>04,>E0,>00,>E0,>d5,>0A,>A6    ; >83D0 - >83d7
     7ED2 E000     
     7ED4 E0D5     
     7ED6 0AA6     
0039 7ED8 0070             byte  >00,>70,>83,>E0,>00,>74,>D0,>02    ; >83D8 - >83df
     7EDA 83E0     
     7EDC 0074     
     7EDE D002     
0040 7EE0 FFFF             byte  >FF,>FF,>FF,>FF,>00,>00,>04,>84    ; >83E0 - >83e7
     7EE2 FFFF     
     7EE4 0000     
     7EE6 0484     
0041 7EE8 0080             byte  >00,>80,>00,>00,>00,>00,>00,>00    ; >83E8 - >83ef
     7EEA 0000     
     7EEC 0000     
     7EEE 0000     
0042 7EF0 0000             byte  >00,>00,>00,>06,>05,>20,>04,>80    ; >83F0 - >83f7
     7EF2 0006     
     7EF4 0520     
     7EF6 0480     
0043 7EF8 0006             byte  >00,>06,>98,>00,>01,>08,>8C,>02    ; >83F8 - >83ff
     7EFA 9800     
     7EFC 0108     
     7EFE 8C02     
                   < stevie_b7.asm
0096                       ;-----------------------------------------------------------------------
0097                       ; Bank full check
0098                       ;-----------------------------------------------------------------------
0102                       ;-----------------------------------------------------------------------
0103                       ; Show ROM bank in CPU crash screen
0104                       ;-----------------------------------------------------------------------
0105                       copy  "rom.crash.asm"
     **** ****     > rom.crash.asm
0001               * FILE......: rom.crash.asm
0002               * Purpose...: Show ROM bank number on CPU crash
0003               
0004               ***************************************************************
0005               * Show ROM bank number on CPU crash
0006               ********|*****|*********************|**************************
0007               cpu.crash.showbank:
0008                       aorg  bankx.crash.showbank
0009 7F00 06A0  32         bl    @putat
     7F02 2450     
0010 7F04 0314                   byte 3,20
0011 7F06 7F0A                   data cpu.crash.showbank.bankstr
0012 7F08 10FF  14         jmp   $
                   < stevie_b7.asm
0106                       ;-----------------------------------------------------------------------
0107                       ; Vector table
0108                       ;-----------------------------------------------------------------------
0109                       copy  "rom.vectors.bank7.asm"    ; Vector table bank 7
     **** ****     > rom.vectors.bank7.asm
0001               * FILE......: rom.vectors.bank7.asm
0002               * Purpose...: Bank 7 vectors for trampoline function
0003               
0004               *--------------------------------------------------------------
0005               * ROM identification string for CPU crash
0006               *--------------------------------------------------------------
0007               cpu.crash.showbank.bankstr:
0008 7F0A 0552             stri 'ROM#7'
     7F0C 4F4D     
     7F0E 2337     
0009               
0010               *--------------------------------------------------------------
0011               * Vector table for trampoline functions
0012               *--------------------------------------------------------------
0013                       aorg  bankx.vectab
0014               
0015 7FC0 60CC     vec.1   data  mem.sams.set.legacy   ;
0016 7FC2 6104     vec.2   data  mem.sams.set.boot     ;
0017 7FC4 6142     vec.3   data  mem.sams.set.stevie   ;
0018 7FC6 610A     vec.4   data  mem.sams.set.external ;
0019 7FC8 6110     vec.5   data  mem.sams.set.basic1   ;
0020 7FCA 611A     vec.6   data  mem.sams.set.basic2   ;
0021 7FCC 6124     vec.7   data  mem.sams.set.basic3   ;
0022 7FCE 612E     vec.8   data  mem.sams.set.basic4   ;
0023 7FD0 6138     vec.9   data  mem.sams.set.basic5   ;
0024 7FD2 61A0     vec.10  data  tib.run               ;
0025 7FD4 6684     vec.11  data  tib.uncrunch          ;
0026 7FD6 2026     vec.12  data  cpu.crash             ;
0027 7FD8 2026     vec.13  data  cpu.crash             ;
0028 7FDA 2026     vec.14  data  cpu.crash             ;
0029 7FDC 2026     vec.15  data  cpu.crash             ;
0030 7FDE 2026     vec.16  data  cpu.crash             ;
0031 7FE0 2026     vec.17  data  cpu.crash             ;
0032 7FE2 2026     vec.18  data  cpu.crash             ;
0033 7FE4 2026     vec.19  data  cpu.crash             ;
0034 7FE6 604A     vec.20  data  magic.set             ;
0035 7FE8 6064     vec.21  data  magic.clear           ;
0036 7FEA 6078     vec.22  data  magic.check           ;
0037 7FEC 2026     vec.23  data  cpu.crash             ;
0038 7FEE 2026     vec.24  data  cpu.crash             ;
0039 7FF0 2026     vec.25  data  cpu.crash             ;
0040 7FF2 2026     vec.26  data  cpu.crash             ;
0041 7FF4 2026     vec.27  data  cpu.crash             ;
0042 7FF6 2026     vec.28  data  cpu.crash             ;
0043 7FF8 2026     vec.29  data  cpu.crash             ;
0044 7FFA 2026     vec.30  data  cpu.crash             ;
0045 7FFC 2026     vec.31  data  cpu.crash             ;
0046 7FFE 2026     vec.32  data  cpu.crash             ;
                   < stevie_b7.asm
0110               
0111               *--------------------------------------------------------------
0112               * Video mode configuration
0113               *--------------------------------------------------------------
0114      00F4     spfclr  equ   >f4                   ; Foreground/Background color for font.
0115      0004     spfbck  equ   >04                   ; Screen background color.
0116      3668     spvmod  equ   stevie.80x30          ; Video mode.   See VIDTAB for details.
0117      000C     spfont  equ   fnopt3                ; Font to load. See LDFONT for details.
0118      0050     colrow  equ   80                    ; Columns per row
0119      0FC0     pctadr  equ   >0fc0                 ; VDP color table base
0120      1100     fntadr  equ   >1100                 ; VDP font start address (in PDT range)
0121      2180     sprsat  equ   >2180                 ; VDP sprite attribute table
0122      2800     sprpdt  equ   >2800                 ; VDP sprite pattern table

    ANYKEY.............. >200A :     
    AT.................. >26D4 :     
    BANK0.RAM........... >6800 :     
    BANK0.ROM........... >6000 :     
    BANK1.RAM........... >6802 :     
    BANK1.ROM........... >6002 :     
    BANK2.RAM........... >6804 :     
    BANK2.ROM........... >6004 :     
    BANK3.RAM........... >6806 :     
    BANK3.ROM........... >6006 :     
    BANK4.RAM........... >6808 :     
    BANK4.ROM........... >6008 :     
    BANK5.RAM........... >680A :     
    BANK5.ROM........... >600A :     
    BANK6.RAM........... >680C :     
    BANK6.ROM........... >600C :     
    BANK7.RAM........... >680E :     
    BANK7.ROM........... >600E :     
    BANKID.............. >600E :     
    BANKX.CRASH.SHOWBANK >7F00 :     
    BANKX.VECTAB........ >7FC0 :     
    BTIHI............... >8314 :     
    BVDPST.............. >831A :     
    BX.................. >832B :     
    BY.................. >832A :     
    C99_BRK............. >0113 :     
    C99_DBGR0........... >0120 :     
    C99_DBGR1........... >0121 :     
    C99_DBGR10.......... >012A :     
    C99_DBGR11.......... >012B :     
    C99_DBGR12.......... >012C :     
    C99_DBGR13.......... >012D :     
    C99_DBGR14.......... >012E :     
    C99_DBGR15.......... >012F :     
    C99_DBGR2........... >0122 :     
    C99_DBGR3........... >0123 :     
    C99_DBGR4........... >0124 :     
    C99_DBGR5........... >0125 :     
    C99_DBGR6........... >0126 :     
    C99_DBGR7........... >0127 :     
    C99_DBGR8........... >0128 :     
    C99_DBGR9........... >0129 :     
    C99_DBG_R0.......... >0120 :     
    C99_DBG_R1.......... >0121 :     
    C99_DBG_R2.......... >0122 :     
    C99_DBG_R3.......... >0123 :     
    C99_DBG_R4.......... >0124 :     
    C99_DBG_R5.......... >0125 :     
    C99_DBG_R6.......... >0126 :     
    C99_DBG_R7.......... >0127 :     
    C99_DBG_R8.......... >0128 :     
    C99_DBG_R9.......... >0199 :     
    C99_DBG_RA.......... >012A :     
    C99_DBG_RB.......... >012B :     
    C99_DBG_RC.......... >012C :     
    C99_DBG_RD.......... >012D :     
    C99_DBG_RE.......... >012E :     
    C99_DBG_RF.......... >012F :     
    C99_DBG_STCK........ >0199 :     
    C99_DBG_TMP0........ >0124 :     
    C99_DBG_TMP1........ >0125 :     
    C99_DBG_TMP2........ >0126 :     
    C99_DBG_TMP3........ >0127 :     
    C99_DBG_TMP4........ >0128 :     
    C99_NORM............ >0110 :     
    C99_OVRD............ >0111 :     
    C99_QUIT............ >0114 :     
    C99_SMAX............ >0112 :     
    CLHOOK.............. >2E90 :     
    CLIP1............... >3100 :     
    CLIP2............... >3200 :     
    CLIP3............... >3300 :     
    CLIP4............... >3400 :     
    CLIP5............... >3500 :     
    CLSLOT.............. >2EB8 :     
    CMDB.ACTION.PTR..... >A728 :     
    CMDB.CMD............ >A72B :     
    CMDB.CMDALL......... >A72A :     
    CMDB.CMDLEN......... >A72A :     
    CMDB.COLUMN......... >A712 :     
    CMDB.CURSOR......... >A70A :     
    CMDB.DEFAULT........ >A708 :     
    CMDB.DFLT.FNAME..... >A7AE :     
    CMDB.DIALOG......... >A71A :     
    CMDB.DIALOG.CLOSE... >6B96 :     
    CMDB.DIALOG.VAR..... >A71C :     
    CMDB.DIRTY.......... >A718 :     
    CMDB.FB.YXSAVE...... >A704 :     
    CMDB.FREE........... >A800 :     
    CMDB.INIT........... >321A :     
    CMDB.INIT.EXIT...... >3250 :     
    CMDB.LENGTH......... >A714 :     
    CMDB.LINES.......... >A716 :     
    CMDB.PANHEAD........ >A71E :     
    CMDB.PANHEAD.BUF.... >A77C :     
    CMDB.PANHINT........ >A722 :     
    CMDB.PANINFO........ >A720 :     
    CMDB.PANKEYS........ >A726 :     
    CMDB.PANMARKERS..... >A724 :     
    CMDB.SCRROWS........ >A706 :     
    CMDB.SIZE........... >1000 :     
    CMDB.STRUCT......... >A700 :     
    CMDB.TOP............ >E000 :     
    CMDB.TOP.PTR........ >A700 :     
    CMDB.VISIBLE........ >A702 :     
    CMDB.YXPROMPT....... >A710 :     
    CMDB.YXSAVE......... >A70C :     
    CMDB.YXTOP.......... >A70E :     
    COLROW.............. >0050 :     
    CONFIG.............. >0002 :     
    CONST.0............. >2000 :     
    CONST.1............. >2002 :     
    CONST.10............ >3702 :     
    CONST.2............. >2004 :     
    CONST.3............. >36F8 :     
    CONST.4............. >2006 :     
    CONST.5............. >36FA :     
    CONST.6............. >36FC :     
    CONST.7............. >36FE :     
    CONST.8............. >2008 :     
    CONST.9............. >3700 :     
    CORE1.FREE.......... >A100 :     
    CORE1.FREE1......... >A034 :     
    CORE1.FREE2......... >A0D4 :     
    CORE1.TOP........... >A000 :     
    CORE2.FREE.......... >A200 :     
    CORE2.TOP........... >A100 :     
    CPU.CRASH........... >2026 :     
    CPU.CRASH.MAIN...... >2086 :     
    CPU.CRASH.MSG.CALLER >21A8 :     
    CPU.CRASH.MSG.CRASHED >2192 :     
    CPU.CRASH.MSG.ID.... >21E6 :     
    CPU.CRASH.MSG.MARKER >21C0 :     
    CPU.CRASH.MSG.R..... >21BE :     
    CPU.CRASH.MSG.SOURCE >21CE :     
    CPU.CRASH.MSG.ST.... >21C9 :     
    CPU.CRASH.MSG.WP.... >21C4 :     
    CPU.CRASH.RESET..... >2076 :     
    CPU.CRASH.SHOWBANK.. >7F00 :     
    CPU.CRASH.SHOWBANK.BANKSTR >7F0A :     
    CPU.CRASH.SHOWREG... >20FC :     
    CPU.CRASH.SHOWREG.CONTENT >2152 :     
    CPU.CRASH.SHOWREG.LABEL >210A :     
    CPU.SCRPAD.BACKUP... >2AFE :     
    CPU.SCRPAD.BACKUP.COPY >2B16 :     
    CPU.SCRPAD.BACKUP.EXIT >2B30 :     
    CPU.SCRPAD.PGIN..... >2B84 :     
    CPU.SCRPAD.PGIN.EXIT >2BA6 :     
    CPU.SCRPAD.PGOUT.... >2B46 :     
    CPU.SCRPAD.PGOUT.AFTER.RTWP >2B7E :     
    CPU.SCRPAD.PGOUT.EXIT >2B82 :     
    CPU.SCRPAD.RESTORE.. >2B32 :     
    CPU.SCRPAD.RESTORE.COPY >2B3A :     
    CPU.SCRPAD.RESTORE.EXIT >2B44 :     
    CPU.SCRPAD.SRC...... >7E00 :     
    CPU.SCRPAD.TGT...... >F000 :     
    CPU.SCRPAD1......... >8300 :     
    CPU.SCRPAD2......... >AD00 :     
    CPYCHK.............. >24FA :     
    CPYM0............... >2506 :     
    CPYM1............... >2512 :     
    CPYM2............... >251A :     
    CPYM2M.............. >24E8 :     
    CPYM2V.............. >2494 :     
    CPYM3............... >252A :     
    CPYM4............... >2534 :     
    CPYMZ............... >2540 :     
    CPYODD.............. >2542 :     
    CPYV2M.............. >24C6 :     
    DATA.FILENAME.PTR... >6700 :     
    DATA.PRINTF.VRAM.LNT >692A :     
    DATA.PRINTF.VRAM.LNUM >694A :     
    DATA.PRINTF.VRAM.STMT >693A :     
    DATA.TK.NEW......... >6492 :     
    DATA.TK.OLD......... >6493 :     
    DATA.TK.SAVE........ >6494 :     
    DEBUG............... >0000 :     
    DEF.CLIP.FNAME...... >3ADD :     
    DEF.CLIP.FNAME.B.... >3AE7 :     
    DEF.CLIP.FNAME.C.... >3AF1 :     
    DEF.DEVICES......... >3AFB :     
    DEF.PRINTER.FNAME... >3AD6 :     
    DEVICE.9938......... >0000 :     
    DEVICE.F18A......... >0001 :     
    DEVICE.FG99.MODE.ADV >0000 :     
    DOFILL.............. >228E :     
    DOWN................ >26DA :     
    DSRLNK.............. >2BA8 :     
    DSRLNK.DEVICE_NAME.GET_LENGTH >2C02 :     
    DSRLNK.DSRLWS....... >A400 :     
    DSRLNK.DSRSCAN.CALL_DSR >2C7E :     
    DSRLNK.DSRSCAN.CARDLOOP >2C2E :     
    DSRLNK.DSRSCAN.CARDOFF >2C28 :     
    DSRLNK.DSRSCAN.DSR.8 >2CB0 :     
    DSRLNK.DSRSCAN.DSR.A >2CC0 :     
    DSRLNK.DSRSCAN.GETENTRY >2C58 :     
    DSRLNK.DSRSCAN.NEXTENTRY >2C52 :     
    DSRLNK.DSRSCAN.RETURN_DSR >2CA0 :     
    DSRLNK.DSRSCAN.START >2C1E :     
    DSRLNK.DSTYPE....... >A40A :     
    DSRLNK.ERROR.DEVICENAME_INVALID >2CCC :     
    DSRLNK.ERROR.IO_ERROR >2CCE :     
    DSRLNK.ERROR.NODSR_FOUND >2CC8 :     
    DSRLNK.ERROR.NODSR_FOUND_OFF >2CC6 :     
    DSRLNK.FLGPTR....... >A434 :     
    DSRLNK.INIT......... >2BAC :     
    DSRLNK.NAMSTO....... >A420 :     
    DSRLNK.PERIOD....... >2D18 :     
    DSRLNK.REUSE........ >2CD8 :     
    DSRLNK.REUSE.INIT... >2CDC :     
    DSRLNK.SAV8A........ >A428 :     
    DSRLNK.SAVCRU....... >A42A :     
    DSRLNK.SAVENT....... >A42C :     
    DSRLNK.SAVLEN....... >A432 :     
    DSRLNK.SAVPAB....... >A42E :     
    DSRLNK.SAVVER....... >A430 :     
    EDB.AUTOINSERT...... >A50C :     
    EDB.BLOCK.M1........ >A50E :     
    EDB.BLOCK.M2........ >A510 :     
    EDB.BLOCK.VAR....... >A512 :     
    EDB.DIRTY........... >A506 :     
    EDB.FILENAME........ >A51C :     
    EDB.FILENAME.PTR.... >A514 :     
    EDB.FILETYPE.PTR.... >A516 :     
    EDB.FREE............ >A56C :     
    EDB.HIPAGE.ALLOC.... >3602 :     
    EDB.HIPAGE.ALLOC.CHECK_SETPAGE >360E :     
    EDB.HIPAGE.ALLOC.CRASH >3638 :     
    EDB.HIPAGE.ALLOC.EXIT >3640 :     
    EDB.HIPAGE.ALLOC.SETPAGE >362A :     
    EDB.INDEX.PTR....... >A502 :     
    EDB.INIT............ >31D0 :     
    EDB.INIT.EXIT....... >3214 :     
    EDB.INSMODE......... >A50A :     
    EDB.LINE.GETLENGTH.. >359A :     
    EDB.LINE.GETLENGTH.EXIT >35D6 :     
    EDB.LINE.GETLENGTH.NULL >35D2 :     
    EDB.LINE.GETLENGTH2. >35DE :     
    EDB.LINE.GETLENGTH2.EXIT >35FC :     
    EDB.LINE.MAPPAGE.... >3550 :     
    EDB.LINE.MAPPAGE.EXIT >3592 :     
    EDB.LINE.MAPPAGE.LOOKUP >356A :     
    EDB.LINES........... >A504 :     
    EDB.NEXT_FREE.PTR... >A508 :     
    EDB.SAMS.HIPAGE..... >A51A :     
    EDB.SAMS.PAGE....... >A518 :     
    EDB.SIZE............ >1000 :     
    EDB.STRUCT.......... >A500 :     
    EDB.TOP............. >C000 :     
    EDB.TOP.PTR......... >A500 :     
    ENKNL............... >200E :     
    ENUSR............... >2012 :     
    EOL................. >FFFF :     
    ERRPANE.EXIT........ >327C :     
    ERRPANE.INIT........ >3256 :     
    F18CHK.............. >2762 :     
    F18CHK_EXIT......... >27A0 :     
    F18CHK_GPU.......... >27AC :     
    F18CHK_NO........... >2796 :     
    F18CHK_YES.......... >279C :     
    F18FW1.............. >27DE :     
    F18FWV.............. >27C4 :     
    F18IDL.............. >2758 :     
    F18LCK.............. >274E :     
    F18RST.............. >27B4 :     
    F18UNL.............. >2738 :     
    FB.CALC_POINTER..... >30A8 :     
    FB.CALC_POINTER.EXIT >30C8 :     
    FB.COLORIZE......... >A312 :     
    FB.COLSLINE......... >A30E :     
    FB.COLUMN........... >A30C :     
    FB.CURRENT.......... >A302 :     
    FB.CURTOGGLE........ >A314 :     
    FB.DIRTY............ >A318 :     
    FB.FREE............. >A3C0 :     
    FB.INIT............. >3028 :     
    FB.INIT.CONT........ >3064 :     
    FB.INIT.EXIT........ >3086 :     
    FB.REFRESH.......... >6BA8 :     
    FB.ROW.............. >A306 :     
    FB.ROW.DIRTY........ >A30A :     
    FB.ROW.LENGTH....... >A308 :     
    FB.ROW2LINE......... >308E :     
    FB.ROW2LINE.EXIT.... >30A2 :     
    FB.RULER.SIT........ >A320 :     
    FB.RULER.TAT........ >A370 :     
    FB.SCRROWS.......... >A31C :     
    FB.SCRROWS.MAX...... >A31E :     
    FB.SIZE............. >0960 :     
    FB.STATUS.DIRTY..... >A31A :     
    FB.STRUCT........... >A300 :     
    FB.TOP.............. >D000 :     
    FB.TOP.PTR.......... >A300 :     
    FB.TOPLINE.......... >A304 :     
    FB.UNCRUNCH.AREA.... >D960 :     
    FB.VWCO............. >A310 :     
    FB.YXSAVE........... >A316 :     
    FH.CALLBACK1........ >A450 :     
    FH.CALLBACK2........ >A452 :     
    FH.CALLBACK3........ >A454 :     
    FH.CALLBACK4........ >A456 :     
    FH.CALLBACK5........ >A458 :     
    FH.COUNTER.......... >A442 :     
    FH.FILETYPE......... >A44C :     
    FH.FNAME.PTR........ >A444 :     
    FH.FOPMODE.......... >A44A :     
    FH.FOPMODE.NONE..... >0000 :     
    FH.FOPMODE.READFILE. >0001 :     
    FH.FOPMODE.WRITEFILE >0002 :     
    FH.FREE............. >A4B6 :     
    FH.IORESULT......... >A43A :     
    FH.KILOBYTES........ >A440 :     
    FH.KILOBYTES.PREV... >A45C :     
    FH.LINE............. >A45E :     
    FH.MEMBUFFER........ >A466 :     
    FH.OFFSETOPCODE..... >A44E :     
    FH.PAB.PTR.......... >A436 :     
    FH.PABSTAT.......... >A438 :     
    FH.RECLEN........... >A43E :     
    FH.RECORDS.......... >A43C :     
    FH.SAMS.HIPAGE...... >A448 :     
    FH.SAMS.PAGE........ >A446 :     
    FH.STRUCT........... >A400 :     
    FH.TEMP1............ >A460 :     
    FH.TEMP2............ >A462 :     
    FH.TEMP3............ >A464 :     
    FH.VPAB............. >0A60 :     
    FH.VRECBUF.......... >0960 :     
    FH.WORKMODE......... >A45A :     
    FIL.EXIT............ >229A :     
    FIL16B.............. >2284 :     
    FILCHK.............. >2256 :     
    FILCHK2............. >2266 :     
    FILCHK3............. >2272 :     
    FILE.CLOSE.......... >2D3E :     
    FILE.DELETE......... >2D76 :     
    FILE.IMAGE.LOAD..... >2D72 :     
    FILE.IMAGE.SAVE..... >2D74 :     
    FILE.OPEN........... >2D1A :     
    FILE.RECORD.READ.... >2D4A :     
    FILE.RECORD.SEEK.... >2D70 :     
    FILE.RECORD.WRITE... >2D56 :     
    FILE.RENAME......... >2D78 :     
    FILE.STATUS......... >2D7A :     
    FILM................ >2244 :     
    FILV................ >229C :     
    FILZZ............... >22C2 :     
    FJ.BOTTOM........... >B000 :     
    FM.NEWFILE.......... >6BDE :     
    FNOPT1.............. >0000 :     
    FNOPT2.............. >0006 :     
    FNOPT3.............. >000C :     
    FNOPT4.............. >0012 :     
    FNOPT5.............. >8000 :     
    FNOPT6.............. >8006 :     
    FNOPT7.............. >800C :     
    FNOPT8.............. >8012 :     
    FNTADR.............. >1100 :     
    GRAPH1.............. >21FF :     
    GRMRA............... >9802 :     
    GRMRD............... >9800 :     
    GRMWA............... >9C02 :     
    GRMWD............... >9C00 :     
    HCHAR............... >27E0 :     
    HCHAR1.............. >27FA :     
    HCHAR2.............. >2804 :     
    HCHARX.............. >27E6 :     
    HEAP.TOP............ >F000 :     
    HOOKOK.............. >2DD6 :     
    ID.DIALOG.APPEND.... >000E :     
    ID.DIALOG.BASIC..... >006B :     
    ID.DIALOG.BLOCK..... >0066 :     
    ID.DIALOG.CARTRIDGE. >006A :     
    ID.DIALOG.CLIPBOARD. >0067 :     
    ID.DIALOG.CLIPDEV... >0011 :     
    ID.DIALOG.CONFIG.... >006C :     
    ID.DIALOG.EDITOR.... >006D :     
    ID.DIALOG.FILE...... >0069 :     
    ID.DIALOG.HELP...... >0068 :     
    ID.DIALOG.INSERT.... >000D :     
    ID.DIALOG.LOAD...... >000A :     
    ID.DIALOG.MENU...... >0064 :     
    ID.DIALOG.PRINT..... >000F :     
    ID.DIALOG.PRINTBLOCK >0010 :     
    ID.DIALOG.SAVE...... >000B :     
    ID.DIALOG.SAVEBLOCK. >000C :     
    ID.DIALOG.SHORTCUTS. >006E :     
    ID.DIALOG.UNSAVED... >0065 :     
    ID.FILE.APPENDFILE.. >0003 :     
    ID.FILE.CLIPBLOCK... >0006 :     
    ID.FILE.INSERTFILE.. >0002 :     
    ID.FILE.LOADFILE.... >0001 :     
    ID.FILE.PRINTBLOCK.. >0008 :     
    ID.FILE.PRINTFILE... >0007 :     
    ID.FILE.SAVEBLOCK... >0005 :     
    ID.FILE.SAVEFILE.... >0004 :     
    IDX.ENTRY.DELETE.... >3456 :     
    IDX.ENTRY.DELETE.EXIT >34AE :     
    IDX.ENTRY.DELETE.LASTLINE >3482 :     
    IDX.ENTRY.DELETE.REORG >348A :     
    IDX.ENTRY.DELETE.REORG.COMPLEX >3494 :     
    IDX.ENTRY.DELETE.REORG.SIMPLE >34A8 :     
    IDX.ENTRY.INSERT.... >34F8 :     
    IDX.ENTRY.INSERT.EXIT >3544 :     
    IDX.ENTRY.INSERT.REORG >3516 :     
    IDX.ENTRY.INSERT.REORG.COMPLEX >3520 :     
    IDX.ENTRY.INSERT.REORG.SIMPLE >3534 :     
    IDX.ENTRY.UPDATE.... >33A8 :     
    IDX.ENTRY.UPDATE.CLEAR >33E2 :     
    IDX.ENTRY.UPDATE.EXIT >33F2 :     
    IDX.ENTRY.UPDATE.SAVE >33D0 :     
    IDX.FREE............ >A606 :     
    IDX.INIT............ >30D0 :     
    IDX.INIT.EXIT....... >310C :     
    IDX.POINTER.GET..... >33FA :     
    IDX.POINTER.GET.EXIT >343C :     
    IDX.POINTER.GET.PARM >342A :     
    IDX.POINTER.GET.PARM.NULL >3434 :     
    IDX.SAMS.HIPAGE..... >A604 :     
    IDX.SAMS.LOPAGE..... >A602 :     
    IDX.SAMS.PAGE....... >A600 :     
    IDX.SIZE............ >1000 :     
    IDX.STRUCT.......... >A600 :     
    IDX.TOP............. >B000 :     
    INTOFF.............. >26A4 :     
    INTON............... >26AC :     
    IO.ERR.BAD_DEVICE_NAME >0000 :     
    IO.ERR.BAD_OPEN_ATTRIBUTE >0002 :     
    IO.ERR.DEVICE_ERROR. >0006 :     
    IO.ERR.DEVICE_WRITE_PROTTECTED >0001 :     
    IO.ERR.EOF.......... >0005 :     
    IO.ERR.FILE_ERROR... >0007 :     
    IO.ERR.ILLEGAL_OPERATION >0003 :     
    IO.ERR.NO_ERROR_OCCURED >0000 :     
    IO.ERR.OUT_OF_TABLE_BUFFER_SPACE >0004 :     
    IO.OP.CLOSE......... >0001 :     
    IO.OP.DELFILE....... >0007 :     
    IO.OP.LOAD.......... >0005 :     
    IO.OP.OPEN.......... >0000 :     
    IO.OP.READ.......... >0002 :     
    IO.OP.REWIND........ >0004 :     
    IO.OP.SAVE.......... >0006 :     
    IO.OP.SCRATCH....... >0008 :     
    IO.OP.STATUS........ >0009 :     
    IO.OP.WRITE......... >0003 :     
    IO.REL.APP.DIS.FIX.. >0007 :     
    IO.REL.APP.DIS.VAR.. >0017 :     
    IO.REL.APP.INT.FIX.. >000F :     
    IO.REL.APP.INT.VAR.. >001F :     
    IO.REL.INP.DIS.FIX.. >0005 :     
    IO.REL.INP.DIS.VAR.. >0015 :     
    IO.REL.INP.INT.FIX.. >000D :     
    IO.REL.INP.INT.VAR.. >001D :     
    IO.REL.OUT.DIS.FIX.. >0003 :     
    IO.REL.OUT.DIS.VAR.. >0013 :     
    IO.REL.OUT.INT.FIX.. >000B :     
    IO.REL.OUT.INT.VAR.. >001B :     
    IO.REL.UPD.DIS.FIX.. >0001 :     
    IO.REL.UPD.DIS.VAR.. >0011 :     
    IO.REL.UPD.INT.FIX.. >0009 :     
    IO.REL.UPD.INT.VAR.. >0019 :     
    IO.SEQ.APP.DIS.FIX.. >0006 :     
    IO.SEQ.APP.DIS.VAR.. >0016 :     
    IO.SEQ.APP.INT.FIX.. >000E :     
    IO.SEQ.APP.INT.VAR.. >001E :     
    IO.SEQ.INP.DIS.FIX.. >0004 :     
    IO.SEQ.INP.DIS.VAR.. >0014 :     
    IO.SEQ.INP.INT.FIX.. >000C :     
    IO.SEQ.INP.INT.VAR.. >001C :     
    IO.SEQ.OUT.DIS.FIX.. >0002 :     
    IO.SEQ.OUT.DIS.VAR.. >0012 :     
    IO.SEQ.OUT.INT.FIX.. >000A :     
    IO.SEQ.OUT.INT.VAR.. >001A :     
    IO.SEQ.UPD.DIS.FIX.. >0000 :     
    IO.SEQ.UPD.DIS.VAR.. >0010 :     
    IO.SEQ.UPD.INT.FIX.. >0008 :     
    IO.SEQ.UPD.INT.VAR.. >0018 :     
    ISR................. >63DC :     
    ISR.COUNTER......... >6422 :     
    ISR.EXIT............ >6438 :     
    ISR.HOTKEY.......... >6426 :     
    ISR.SCAN.COPY....... >6482 :     
    ISR.SCAN.COPY.LOOP.. >6488 :     
    ISR.SCAN.CRUNCHBUF.. >6442 :     
    ISR.SCAN.EXIT....... >6490 :     
    ISR.SCAN.NEW........ >646E :     
    ISR.SCAN.OLD........ >645E :     
    ISR.SCAN.SAVE....... >6466 :     
    ISR.SHOWID.......... >63F4 :     
    KBF.KBCLEAR......... >0001 :     
    KBFLAGS............. >A026 :     
    KEY.CTRL.0.......... >00B0 :     
    KEY.CTRL.1.......... >00B1 :     
    KEY.CTRL.2.......... >00B2 :     
    KEY.CTRL.3.......... >00B3 :     
    KEY.CTRL.4.......... >00B4 :     
    KEY.CTRL.5.......... >00B5 :     
    KEY.CTRL.6.......... >00B6 :     
    KEY.CTRL.7.......... >00B7 :     
    KEY.CTRL.8.......... >009E :     
    KEY.CTRL.9.......... >009F :     
    KEY.CTRL.A.......... >0081 :     
    KEY.CTRL.B.......... >0082 :     
    KEY.CTRL.C.......... >0083 :     
    KEY.CTRL.COMMA...... >0080 :     
    KEY.CTRL.D.......... >0084 :     
    KEY.CTRL.DOT........ >009B :     
    KEY.CTRL.E.......... >0085 :     
    KEY.CTRL.F.......... >0086 :     
    KEY.CTRL.G.......... >0087 :     
    KEY.CTRL.H.......... >0088 :     
    KEY.CTRL.I.......... >0089 :     
    KEY.CTRL.J.......... >008A :     
    KEY.CTRL.K.......... >008B :     
    KEY.CTRL.L.......... >008C :     
    KEY.CTRL.M.......... >008D :     
    KEY.CTRL.N.......... >008E :     
    KEY.CTRL.O.......... >008F :     
    KEY.CTRL.P.......... >0090 :     
    KEY.CTRL.PLUS....... >009D :     
    KEY.CTRL.Q.......... >0091 :     
    KEY.CTRL.R.......... >0092 :     
    KEY.CTRL.S.......... >0093 :     
    KEY.CTRL.SLASH...... >00BB :     
    KEY.CTRL.SPACE...... >00F0 :     
    KEY.CTRL.T.......... >0094 :     
    KEY.CTRL.U.......... >0095 :     
    KEY.CTRL.V.......... >0096 :     
    KEY.CTRL.W.......... >0097 :     
    KEY.CTRL.X.......... >0098 :     
    KEY.CTRL.Y.......... >0099 :     
    KEY.CTRL.Z.......... >009A :     
    KEY.ENTER........... >000D :     
    KEY.FCTN.0.......... >00BC :     
    KEY.FCTN.1.......... >0003 :     
    KEY.FCTN.2.......... >0004 :     
    KEY.FCTN.3.......... >0007 :     
    KEY.FCTN.4.......... >0002 :     
    KEY.FCTN.5.......... >000E :     
    KEY.FCTN.6.......... >000C :     
    KEY.FCTN.7.......... >0001 :     
    KEY.FCTN.8.......... >0006 :     
    KEY.FCTN.9.......... >000F :     
    KEY.FCTN.A.......... >0000 :     
    KEY.FCTN.B.......... >00BE :     
    KEY.FCTN.C.......... >0000 :     
    KEY.FCTN.COMMA...... >00B8 :     
    KEY.FCTN.D.......... >0009 :     
    KEY.FCTN.DOT........ >00B9 :     
    KEY.FCTN.E.......... >000B :     
    KEY.FCTN.F.......... >0000 :     
    KEY.FCTN.G.......... >0000 :     
    KEY.FCTN.H.......... >00BF :     
    KEY.FCTN.I.......... >0000 :     
    KEY.FCTN.J.......... >00C0 :     
    KEY.FCTN.K.......... >00C1 :     
    KEY.FCTN.L.......... >00C2 :     
    KEY.FCTN.M.......... >00C3 :     
    KEY.FCTN.N.......... >00C4 :     
    KEY.FCTN.O.......... >0000 :     
    KEY.FCTN.P.......... >0000 :     
    KEY.FCTN.PLUS....... >0005 :     
    KEY.FCTN.Q.......... >00C5 :     
    KEY.FCTN.R.......... >0000 :     
    KEY.FCTN.S.......... >0008 :     
    KEY.FCTN.T.......... >0000 :     
    KEY.FCTN.U.......... >0000 :     
    KEY.FCTN.V.......... >007F :     
    KEY.FCTN.W.......... >007E :     
    KEY.FCTN.X.......... >000A :     
    KEY.FCTN.Y.......... >00C6 :     
    KEY.FCTN.Z.......... >0000 :     
    KEY.LC.B............ >00A2 :     
    KEY.LC.E............ >00A5 :     
    KEY.LC.F............ >00A6 :     
    KEY.LC.H............ >00A8 :     
    KEY.LC.N............ >006E :     
    KEY.LC.O............ >006F :     
    KEY.LC.P............ >0070 :     
    KEY.LC.Q............ >0071 :     
    KEY.LC.S............ >0073 :     
    KEY.NUM.0........... >0030 :     
    KEY.NUM.1........... >0031 :     
    KEY.NUM.2........... >0032 :     
    KEY.NUM.3........... >0033 :     
    KEY.NUM.4........... >0034 :     
    KEY.NUM.5........... >0035 :     
    KEY.NUM.6........... >0036 :     
    KEY.NUM.7........... >0037 :     
    KEY.NUM.8........... >0038 :     
    KEY.NUM.9........... >0039 :     
    KEY.SPACE........... >0020 :     
    KEY.UC.A............ >0041 :     
    KEY.UC.B............ >0042 :     
    KEY.UC.C............ >0043 :     
    KEY.UC.E............ >0045 :     
    KEY.UC.F............ >0046 :     
    KEY.UC.H............ >0048 :     
    KEY.UC.I............ >0049 :     
    KEY.UC.M............ >004D :     
    KEY.UC.N............ >004E :     
    KEY.UC.O............ >004F :     
    KEY.UC.P............ >0050 :     
    KEY.UC.Q............ >0051 :     
    KEY.UC.R............ >0052 :     
    KEY.UC.S............ >0053 :     
    KEYCODE1............ >A028 :     
    KEYCODE2............ >A02A :     
    KICKSTART.CODE1..... >6040 :     
    KICKSTART.CODE2..... >6046 :     
    KICKSTART.RESUME.... >6038 :     
    KSCAN............... >000E :     
    KTHREAD............. >2E70 :     
    KTHREAD_EXIT........ >2E82 :     
    KTHREAD_KB.......... >2E7E :     
    LDFNT............... >236E :     
    LDFNT1.............. >2386 :     
    LDFNT2.............. >23C0 :     
    LDFNT3.............. >23D4 :     
    LDFNT4.............. >23E8 :     
    LOADMC.............. >2228 :     
    MAGIC.CHECK......... >6078 :     
    MAGIC.CHECK.EXIT.... >6098 :     
    MAGIC.CLEAR......... >6064 :     
    MAGIC.CLEAR.EXIT.... >6074 :     
    MAGIC.SET........... >604A :     
    MAGIC.SET.EXIT...... >6060 :     
    MAGIC.STR.W1........ >A000 :     
    MAGIC.STR.W2........ >A002 :     
    MAGIC.STR.W3........ >A004 :     
    MAGIC.STRING........ >609C :     
    MAIN................ >6046 :     
    MCCODE.............. >221E :     
    MCLOOP.............. >8320 :     
    MCSPRD.............. >8322 :     
    MEM.SAMS.LAYOUT.BASIC >6C44 :     
    MEM.SAMS.LAYOUT.BASIC1 >6C44 :     
    MEM.SAMS.LAYOUT.BASIC2 >6C54 :     
    MEM.SAMS.LAYOUT.BASIC3 >6C64 :     
    MEM.SAMS.LAYOUT.BASIC4 >6C74 :     
    MEM.SAMS.LAYOUT.BASIC5 >6C84 :     
    MEM.SAMS.LAYOUT.BOOT >6C14 :     
    MEM.SAMS.LAYOUT.EXTERNAL >6C24 :     
    MEM.SAMS.LAYOUT.LEGACY >6C34 :     
    MEM.SAMS.SET.BANKS.EXIT >60CA :     
    MEM.SAMS.SET.BASIC1. >6110 :     
    MEM.SAMS.SET.BASIC2. >611A :     
    MEM.SAMS.SET.BASIC3. >6124 :     
    MEM.SAMS.SET.BASIC4. >612E :     
    MEM.SAMS.SET.BASIC5. >6138 :     
    MEM.SAMS.SET.BOOT... >6104 :     
    MEM.SAMS.SET.EXTERNAL >610A :     
    MEM.SAMS.SET.LEGACY. >60CC :     
    MEM.SAMS.SET.LEGACY.CODE >60FC :     
    MEM.SAMS.SET.STEVIE. >6142 :     
    MEM.SAMS.SET.STEVIE.EXIT >619E :     
    MEM.SAMS.SETUP.STEVIE >6C02 :     
    MKHEX............... >2926 :     
    MKHEX1.............. >293E :     
    MKHEX1.DIGIT09...... >2954 :     
    MKHEX1.DIGITAF...... >294A :     
    MKHEX2.............. >295A :     
    MKHEX3.............. >299C :     
    MKHOO1.............. >2E8E :     
    MKHOOK.............. >2E86 :     
    MKNUM............... >29B4 :     
    MKNUM1.............. >29C6 :     
    MKNUM2.............. >29E2 :     
    MKNUM3.............. >29E6 :     
    MKNUM4.............. >29F0 :     
    MKNUM5.............. >29F8 :     
    MKSLO1.............. >2EB4 :     
    MKSLOT.............. >2E9A :     
    MMPLA1.............. >2892 :     
    MMPLA2.............. >2898 :     
    MMPLAY.............. >288A :     
    MUTE................ >2808 :     
    MUTE2............... >280C :     
    MUTTAB.............. >2822 :     
    NOFONT.............. >FFFF :     
    NOREP............... >0000 :     
    NOSPRITE............ >3692 :     
    NUM1................ >3030 :     
    NUM2................ >3020 :     
    OUTPARM1............ >A016 :     
    OUTPARM2............ >A018 :     
    OUTPARM3............ >A01A :     
    OUTPARM4............ >A01C :     
    OUTPARM5............ >A01E :     
    OUTPARM6............ >A020 :     
    OUTPARM7............ >A022 :     
    OUTPARM8............ >A024 :     
    PALON............... >201C :     
    PANE.ACTION.COLORSCHEME.LOAD >6BBA :     
    PANE.ACTION.COLORSCHEME.STATLINES >6BCC :     
    PANE.BOTROW......... >001D :     
    PANE.FOCUS.CMDB..... >0001 :     
    PANE.FOCUS.FB....... >0000 :     
    PANE.TOPLINE.ONESHOT.CLEARMSG >3648 :     
    PANE.TOPLINE.ONESHOT.CLEARMSG.EXIT >3660 :     
    PARM1............... >A006 :     
    PARM2............... >A008 :     
    PARM3............... >A00A :     
    PARM4............... >A00C :     
    PARM5............... >A00E :     
    PARM6............... >A010 :     
    PARM7............... >A012 :     
    PARM8............... >A014 :     
    PCTADR.............. >0FC0 :     
    POPR0............... >223E :     
    POPR1............... >223C :     
    POPR2............... >223A :     
    POPR3............... >2238 :     
    POPRT............... >2240 :     
    PREFIX.............. >29A8 :     
    PUTAT............... >2450 :     
    PUTHEX.............. >29AA :     
    PUTLST.............. >2458 :     
    PUTLST.EXIT......... >248E :     
    PUTLST.LOOP......... >2460 :     
    PUTNUM.............. >2A32 :     
    PUTSTR.............. >242C :     
    PUTV01.............. >2354 :     
    PUTVR............... >2340 :     
    PUTVRX.............. >2342 :     
    R0.................. >0000 :     
    R0HB................ >8300 :     
    R0LB................ >8301 :     
    R1.................. >0001 :     
    R10................. >000A :     
    R10HB............... >8314 :     
    R10LB............... >8315 :     
    R11................. >000B :     
    R11HB............... >8316 :     
    R11LB............... >8317 :     
    R12................. >000C :     
    R12HB............... >8318 :     
    R12LB............... >8319 :     
    R13................. >000D :     
    R13HB............... >831A :     
    R13LB............... >831B :     
    R14................. >000E :     
    R14HB............... >831C :     
    R14LB............... >831D :     
    R15................. >000F :     
    R15HB............... >831E :     
    R15LB............... >831F :     
    R1HB................ >8302 :     
    R1LB................ >8303 :     
    R2.................. >0002 :     
    R2HB................ >8304 :     
    R2LB................ >8305 :     
    R3.................. >0003 :     
    R3HB................ >8306 :     
    R3LB................ >8307 :     
    R4.................. >0004 :     
    R4HB................ >8308 :     
    R4LB................ >8309 :     
    R5.................. >0005 :     
    R5HB................ >830A :     
    R5LB................ >830B :     
    R6.................. >0006 :     
    R6HB................ >830C :     
    R6LB................ >830D :     
    R7.................. >0007 :     
    R7HB................ >830E :     
    R7LB................ >830F :     
    R8.................. >0008 :     
    R8HB................ >8310 :     
    R8LB................ >8311 :     
    R9.................. >0009 :     
    R9HB................ >8312 :     
    R9LB................ >8313 :     
    RAMBUF.............. >A100 :     
    RAMSAT.............. >A056 :     
    RKSCAN.............. >28C4 :     
    RKSCAN.EXIT......... >291A :     
    ROM.FARJUMP......... >2F98 :     
    ROM.FARJUMP.BANKSWITCH.CALL >2FE8 :     
    ROM.FARJUMP.BANKSWITCH.FAILED1 >2FE0 :     
    ROM.FARJUMP.BANKSWITCH.FAILED2 >3016 :     
    ROM.FARJUMP.BANKSWITCH.SRC.ADVFG99 >300C :     
    ROM.FARJUMP.BANKSWITCH.SRC.ROM8K >3008 :     
    ROM.FARJUMP.BANKSWITCH.TARGET.ROM8K >2FC4 :     
    ROM.FARJUMP.BANKSWITCH.TGT.ADVFG99 >2FC8 :     
    ROM.FARJUMP.BANKSWITCH.TGT.DONE >2FD0 :     
    ROM.FARJUMP.EXIT.... >301E :     
    ROM.FARJUMP.RETURN.. >2FEA :     
    ROM.PROGRAM1........ >600C :     
    ROM.PROGRAM2........ >601E :     
    ROM0_KSCAN_ON....... >0001 :     
    ROM0_KSCAN_OUT...... >A028 :     
    ROMSAT.............. >3686 :     
    RSSLOT.............. >2EC6 :     
    RUNLI1.............. >2EDE :     
    RUNLI2.............. >2EEA :     
    RUNLI3.............. >2EEE :     
    RUNLI3A............. >2EF6 :     
    RUNLI4.............. >2F00 :     
    RUNLI5.............. >2F0A :     
    RUNLI6.............. >2F18 :     
    RUNLI7.............. >2F26 :     
    RUNLI9.............. >2F2A :     
    RUNLIA.............. >2F4C :     
    RUNLIB.............. >2EDA :     
    RUNLIC.............. >2F70 :     
    RUNLID.............. >2F86 :     
    RUNLIE.............. >2F90 :     
    S16X16.............. >26CC :     
    S8X8................ >26C4 :     
    SAMS.LAYOUT......... >25FC :     
    SAMS.LAYOUT.COPY.... >264C :     
    SAMS.LAYOUT.COPY.DATA >2684 :     
    SAMS.LAYOUT.COPY.EXIT >2678 :     
    SAMS.LAYOUT.COPY.LOOP >266A :     
    SAMS.LAYOUT.EXIT.... >2634 :     
    SAMS.LAYOUT.STANDARD >263C :     
    SAMS.MAPPING.OFF.... >25EE :     
    SAMS.MAPPING.OFF.EXIT >25F8 :     
    SAMS.MAPPING.ON..... >25E0 :     
    SAMS.MAPPING.ON.EXIT >25EA :     
    SAMS.PAGE.GET....... >254A :     
    SAMS.PAGE.GET.EXIT.. >2578 :     
    SAMS.PAGE.SET....... >2580 :     
    SAMS.PAGE.SET.EXIT.. >25D4 :     
    SAMS.PAGE.SET.SWITCH_PAGE >25C4 :     
    SCROFF.............. >2694 :     
    SCRON............... >269C :     
    SCRPAD.83C6......... >2920 :     
    SCRPAD.83FA......... >2922 :     
    SCRPAD.83FE......... >2924 :     
    SCRPAD.MONITOR...... >7E00 :     
    SDEXI1.............. >28BC :     
    SDEXI2.............. >28BE :     
    SDEXIT.............. >28AA :     
    SDOPT1.............. >0007 :     
    SDOPT2.............. >0005 :     
    SDOPT3.............. >0006 :     
    SDOPT4.............. >0004 :     
    SDPLA1.............. >2844 :     
    SDPLA2.............. >284E :     
    SDPLA3.............. >2850 :     
    SDPLAY.............. >283C :     
    SDPREP.............. >2826 :     
    SETX................ >26EA :     
    SKIP_CPU_CRC16...... >0001 :     
    SKIP_CPU_RLE_COMPRESS >0001 :     
    SKIP_CPU_RLE_DECOMPRESS >0001 :     
    SKIP_GROM_CPU_COPY.. >0001 :     
    SKIP_GROM_VRAM_COPY. >0001 :     
    SKIP_RANDOM_GENERATOR >0001 :     
    SKIP_ROM_BANKSWITCH. >0001 :     
    SKIP_SAMS_LAYOUT.... >0001 :     
    SKIP_SPEECH_DETECTION >0001 :     
    SKIP_SPEECH_PLAYER.. >0001 :     
    SKIP_VDP_BITMAP..... >0001 :     
    SKIP_VDP_BOXES...... >0001 :     
    SKIP_VDP_PX2YX_CALC. >0001 :     
    SKIP_VDP_RLE_DECOMPRESS >0001 :     
    SKIP_VDP_VCHAR...... >0001 :     
    SKIP_VDP_VIEWPORT... >0001 :     
    SKIP_VIRTUAL_KEYBOARD >0001 :     
    SLOTOK.............. >2E52 :     
    SMAG1X.............. >26B4 :     
    SMAG2X.............. >26BC :     
    SOUND............... >8400 :     
    SP2.STKTOP.......... >A900 :     
    SPCHRD.............. >9000 :     
    SPCHWT.............. >9400 :     
    SPCODE.............. >2224 :     
    SPFBCK.............. >0004 :     
    SPFCLR.............. >00F4 :     
    SPFONT.............. >000C :     
    SPKOFF.............. >FF00 :     
    SPKON............... >6000 :     
    SPRPDT.............. >2800 :     
    SPRSAT.............. >2180 :     
    SPVMOD.............. >3668 :     
    STACK............... >0009 :     
    STARTUP_KEEP_VDPMEMORY >0001 :     
    STEVIE.80X30........ >3668 :     
    STRING.GETLENC...... >2AA8 :     
    STRING.GETLENC.EXIT. >2AF4 :     
    STRING.GETLENC.LOOP. >2AD6 :     
    STRING.GETLENC.PANIC >2AEC :     
    STRING.GETLENC.PUTLENGTH >2AE4 :     
    STRING.LTRIM........ >2A3C :     
    STRING.LTRIM.EXIT... >2A9C :     
    STRING.LTRIM.MOVE... >2A82 :     
    STRING.LTRIM.PANIC.. >2A94 :     
    STRING.LTRIM.SCAN... >2A76 :     
    TALKOF.............. >00FF :     
    TALKON.............. >0060 :     
    TIB.AUTOMODE........ >A0C0 :     
    TIB.AUX............. >FF00 :     
    TIB.AUX.END......... >FFFA :     
    TIB.AUX.FNAME....... >FF00 :     
    TIB.LINES........... >A0D2 :     
    TIB.LNT.BOT.PTR..... >A0C8 :     
    TIB.LNT.TOP.PTR..... >A0C6 :     
    TIB.RETURN.PAGE_IN.. >65BA :     
    TIB.RUN............. >61A0 :     
    TIB.RUN.INIT.BASIC1. >6208 :     
    TIB.RUN.INIT.BASIC2. >622A :     
    TIB.RUN.INIT.BASIC3. >624C :     
    TIB.RUN.INIT.BASIC4. >626A :     
    TIB.RUN.INIT.BASIC5. >6288 :     
    TIB.RUN.INIT.REST... >62A6 :     
    TIB.RUN.RESUME.BASIC1 >6324 :     
    TIB.RUN.RESUME.BASIC2 >6334 :     
    TIB.RUN.RESUME.BASIC3 >6344 :     
    TIB.RUN.RESUME.BASIC4 >6354 :     
    TIB.RUN.RESUME.BASIC5 >6364 :     
    TIB.RUN.RESUME.PART2 >6372 :     
    TIB.RUN.RESUME.SCRPAD >638A :     
    TIB.RUN.RESUME.VDP.. >6380 :     
    TIB.RUN.RETURN...... >6502 :     
    TIB.RUN.RETURN.1.... >651C :     
    TIB.RUN.RETURN.2.... >653A :     
    TIB.RUN.RETURN.3.... >6558 :     
    TIB.RUN.RETURN.4.... >6576 :     
    TIB.RUN.RETURN.5.... >6594 :     
    TIB.RUN.RETURN.DATA.SAMSPAGE >664A :     
    TIB.RUN.RETURN.EXIT. >663E :     
    TIB.RUN.RETURN.FAILED >65B2 :     
    TIB.RUN.RETURN.MON.. >6496 :     
    TIB.RUN.RETURN.MON.CONT >64CA :     
    TIB.RUN.RETURN.STEVIE >65EE :     
    TIB.RUN.RETURN.VDPDUMP >65E0 :     
    TIB.SAMSTAB.PTR..... >A0EA :     
    TIB.SCRPAD.PTR...... >A0C4 :     
    TIB.SESSION......... >A0B4 :     
    TIB.STAB.PTR........ >A0C2 :     
    TIB.STATUS1......... >A0B6 :     
    TIB.STATUS2......... >A0B8 :     
    TIB.STATUS3......... >A0BA :     
    TIB.STATUS4......... >A0BC :     
    TIB.STATUS5......... >A0BE :     
    TIB.STRS.BOT.PTR.... >A0D0 :     
    TIB.STRS.TOP.PTR.... >A0CE :     
    TIB.SYMT.BOT.PTR.... >A0CC :     
    TIB.SYMT.TOP.PTR.... >A0CA :     
    TIB.TOKENINDEX...... >6F28 :     
    TIB.UNCRNCH.PRG.COPY.STATEMENT >68F6 :     
    TIB.UNCRNCH.PRG.STATEMENT.LOOP.PANIC >68EE :     
    TIB.UNCRUNCH........ >6684 :     
    TIB.UNCRUNCH.EXIT... >66F8 :     
    TIB.UNCRUNCH.LINE.PACK >6AFC :     
    TIB.UNCRUNCH.LINE.PACK.COPYLINE >6B48 :     
    TIB.UNCRUNCH.LINE.PACK.COPYLINE.ALIGN16 >6B62 :     
    TIB.UNCRUNCH.LINE.PACK.COPYLINE.BLOCK >6B5E :     
    TIB.UNCRUNCH.LINE.PACK.COPYLINE.CHECKBYTE >6B54 :     
    TIB.UNCRUNCH.LINE.PACK.EXIT >6B88 :     
    TIB.UNCRUNCH.LINE.PACK.PREPEXIT >6B74 :     
    TIB.UNCRUNCH.PREPARE >670C :     
    TIB.UNCRUNCH.PREPARE.2 >674C :     
    TIB.UNCRUNCH.PREPARE.5 >67A2 :     
    TIB.UNCRUNCH.PREPARE.EXIT >67D0 :     
    TIB.UNCRUNCH.PREPARE.NP >679E :     
    TIB.UNCRUNCH.PRG.... >67DA :     
    TIB.UNCRUNCH.PRG.DONE >6916 :     
    TIB.UNCRUNCH.PRG.EXIT >691E :     
    TIB.UNCRUNCH.PRG.LNT.LOOP >680E :     
    TIB.UNCRUNCH.PRG.STATEMENT.LOOP >68B0 :     
    TIB.UNCRUNCH.PRG.STATEMENT.LOOP.NONTOKEN >68D6 :     
    TIB.UNCRUNCH.TOKEN.. >695A :     
    TIB.UNCRUNCH.TOKEN.EXIT >6AE6 :     
    TIB.UNCRUNCH.TOKEN.LINENUM >6A76 :     
    TIB.UNCRUNCH.TOKEN.LOOKUP >69A2 :     
    TIB.UNCRUNCH.TOKEN.QUOTED >69EA :     
    TIB.UNCRUNCH.TOKEN.QUOTED.QUOTE2 >6A16 :     
    TIB.UNCRUNCH.TOKEN.SETLEN >6ADC :     
    TIB.UNCRUNCH.TOKEN.UNQUOTED >6A36 :     
    TIB.VAR1............ >A0EC :     
    TIB.VAR10........... >A0FE :     
    TIB.VAR2............ >A0EE :     
    TIB.VAR3............ >A0F0 :     
    TIB.VAR4............ >A0F2 :     
    TIB.VAR5............ >A0F4 :     
    TIB.VAR6............ >A0F6 :     
    TIB.VAR7............ >A0F8 :     
    TIB.VAR8............ >A0FA :     
    TIB.VAR9............ >A0FC :     
    TIBASIC.32X24....... >3672 :     
    TIBASIC.32X30....... >367C :     
    TIBASIC.BUILDSTR.... >6BF0 :     
    TIBASIC.PATTERNS.... >63B4 :     
    TIBASIC.RESUME.LOAD. >639C :     
    TIBASIC.SCRPAD.83D4. >63AC :     
    TIBASIC.SCRPAD.83FA. >63AE :     
    TIBASIC.SCRPAD.83FC. >63B0 :     
    TIBASIC.SCRPAD.83FE. >63B2 :     
    TIMERS.............. >A064 :     
    TK.00............... >6C94 :     
    TK.01............... >6C9A :     
    TK.02............... >6CA0 :     
    TK.02L.............. >6CA6 :     
    TK.03............... >6CB0 :     
    TK.04............... >6CB6 :     
    TK.05............... >6CBC :     
    TK.05L.............. >6CC2 :     
    TK.06............... >6CCA :     
    TK.07............... >6CD0 :     
    TK.07L.............. >6CD6 :     
    TK.08............... >6CE2 :     
    TK.09............... >6CE8 :     
    TK.81............... >6CEE :     
    TK.84............... >6CF6 :     
    TK.85............... >6CFA :     
    TK.86............... >6CFE :     
    TK.87............... >6D04 :     
    TK.88............... >6D0C :     
    TK.89............... >6D14 :     
    TK.8A............... >6D1A :     
    TK.8B............... >6D20 :     
    TK.8C............... >6D26 :     
    TK.8D............... >6D2C :     
    TK.8E............... >6D32 :     
    TK.8F............... >6D3A :     
    TK.90............... >6D44 :     
    TK.91............... >6D4C :     
    TK.92............... >6D56 :     
    TK.93............... >6D5E :     
    TK.94............... >6D64 :     
    TK.95............... >6D6E :     
    TK.96............... >6D7A :     
    TK.97............... >6D80 :     
    TK.98............... >6D86 :     
    TK.99............... >6D8C :     
    TK.9A............... >6D94 :     
    TK.9B............... >6D9A :     
    TK.9C............... >6D9E :     
    TK.9D............... >6DA6 :     
    TK.9E............... >6DAC :     
    TK.9F............... >6DB4 :     
    TK.A0............... >6DBA :     
    TK.A1............... >6DC2 :     
    TK.A2............... >6DC8 :     
    TK.B0............... >6DD2 :     
    TK.B1............... >6DDA :     
    TK.B2............... >6DE0 :     
    TK.B3............... >6DE8 :     
    TK.B4............... >6DEC :     
    TK.B5............... >6DF0 :     
    TK.B6............... >6DF4 :     
    TK.B7............... >6DF8 :     
    TK.B8............... >6DFC :     
    TK.BE............... >6E00 :     
    TK.BF............... >6E04 :     
    TK.C0............... >6E08 :     
    TK.C1............... >6E0C :     
    TK.C2............... >6E10 :     
    TK.C3............... >6E14 :     
    TK.C4............... >6E18 :     
    TK.C5............... >6E1C :     
    TK.C7............... >6E20 :     
    TK.C8............... >6E24 :     
    TK.C9............... >6E28 :     
    TK.CA............... >6E2C :     
    TK.CB............... >6E32 :     
    TK.CC............... >6E38 :     
    TK.CD............... >6E3E :     
    TK.CE............... >6E44 :     
    TK.CF............... >6E4A :     
    TK.D0............... >6E50 :     
    TK.D1............... >6E56 :     
    TK.D2............... >6E5C :     
    TK.D3............... >6E62 :     
    TK.D4............... >6E68 :     
    TK.D5............... >6E6E :     
    TK.D6............... >6E74 :     
    TK.D7............... >6E7A :     
    TK.D8............... >6E80 :     
    TK.D9............... >6E86 :     
    TK.DA............... >6E8C :     
    TK.DB............... >6E92 :     
    TK.DC............... >6E98 :     
    TK.DE............... >6E9E :     
    TK.F1............... >6EA4 :     
    TK.F3............... >6EAA :     
    TK.F4............... >6EB4 :     
    TK.F5............... >6EBE :     
    TK.F6............... >6EC8 :     
    TK.F7............... >6ED4 :     
    TK.F8............... >6EDC :     
    TK.F9............... >6EE4 :     
    TK.FA............... >6EEC :     
    TK.FB............... >6EF4 :     
    TK.FC............... >6F00 :     
    TK.FD............... >6F06 :     
    TK.NOOP............. >6F0A :     
    TKI.00.............. >6F0E :     
    TKI.01.............. >6F10 :     
    TKI.02.............. >6F12 :     
    TKI.02L............. >6F14 :     
    TKI.03.............. >6F16 :     
    TKI.04.............. >6F18 :     
    TKI.05.............. >6F1A :     
    TKI.05L............. >6F1C :     
    TKI.06.............. >6F1E :     
    TKI.07.............. >6F20 :     
    TKI.07L............. >6F22 :     
    TKI.08.............. >6F24 :     
    TKI.09.............. >6F26 :     
    TKI.80.............. >6F28 :     
    TKI.81.............. >6F2A :     
    TKI.82.............. >6F2C :     
    TKI.83.............. >6F2E :     
    TKI.84.............. >6F30 :     
    TKI.85.............. >6F32 :     
    TKI.86.............. >6F34 :     
    TKI.87.............. >6F36 :     
    TKI.88.............. >6F38 :     
    TKI.89.............. >6F3A :     
    TKI.8A.............. >6F3C :     
    TKI.8B.............. >6F3E :     
    TKI.8C.............. >6F40 :     
    TKI.8D.............. >6F42 :     
    TKI.8E.............. >6F44 :     
    TKI.8F.............. >6F46 :     
    TKI.90.............. >6F48 :     
    TKI.91.............. >6F4A :     
    TKI.92.............. >6F4C :     
    TKI.93.............. >6F4E :     
    TKI.94.............. >6F50 :     
    TKI.95.............. >6F52 :     
    TKI.96.............. >6F54 :     
    TKI.97.............. >6F56 :     
    TKI.98.............. >6F58 :     
    TKI.99.............. >6F5A :     
    TKI.9A.............. >6F5C :     
    TKI.9B.............. >6F5E :     
    TKI.9C.............. >6F60 :     
    TKI.9D.............. >6F62 :     
    TKI.9E.............. >6F64 :     
    TKI.9F.............. >6F66 :     
    TKI.A0.............. >6F68 :     
    TKI.A1.............. >6F6A :     
    TKI.A2.............. >6F6C :     
    TKI.A3.............. >6F6E :     
    TKI.A4.............. >6F70 :     
    TKI.A5.............. >6F72 :     
    TKI.A6.............. >6F74 :     
    TKI.A7.............. >6F76 :     
    TKI.A8.............. >6F78 :     
    TKI.A9.............. >6F7A :     
    TKI.AA.............. >6F7C :     
    TKI.AB.............. >6F7E :     
    TKI.AC.............. >6F80 :     
    TKI.AD.............. >6F82 :     
    TKI.AE.............. >6F84 :     
    TKI.AF.............. >6F86 :     
    TKI.B0.............. >6F88 :     
    TKI.B1.............. >6F8A :     
    TKI.B2.............. >6F8C :     
    TKI.B3.............. >6F8E :     
    TKI.B4.............. >6F90 :     
    TKI.B5.............. >6F92 :     
    TKI.B6.............. >6F94 :     
    TKI.B7.............. >6F96 :     
    TKI.B8.............. >6F98 :     
    TKI.B9.............. >6F9A :     
    TKI.BA.............. >6F9C :     
    TKI.BB.............. >6F9E :     
    TKI.BC.............. >6FA0 :     
    TKI.BD.............. >6FA2 :     
    TKI.BE.............. >6FA4 :     
    TKI.BF.............. >6FA6 :     
    TKI.C0.............. >6FA8 :     
    TKI.C1.............. >6FAA :     
    TKI.C2.............. >6FAC :     
    TKI.C3.............. >6FAE :     
    TKI.C4.............. >6FB0 :     
    TKI.C5.............. >6FB2 :     
    TKI.C6.............. >6FB4 :     
    TKI.C7.............. >6FB6 :     
    TKI.C8.............. >6FB8 :     
    TKI.C9.............. >6FBA :     
    TKI.CA.............. >6FBC :     
    TKI.CB.............. >6FBE :     
    TKI.CC.............. >6FC0 :     
    TKI.CD.............. >6FC2 :     
    TKI.CE.............. >6FC4 :     
    TKI.CF.............. >6FC6 :     
    TKI.D0.............. >6FC8 :     
    TKI.D1.............. >6FCA :     
    TKI.D2.............. >6FCC :     
    TKI.D3.............. >6FCE :     
    TKI.D4.............. >6FD0 :     
    TKI.D5.............. >6FD2 :     
    TKI.D6.............. >6FD4 :     
    TKI.D7.............. >6FD6 :     
    TKI.D8.............. >6FD8 :     
    TKI.D9.............. >6FDA :     
    TKI.DA.............. >6FDC :     
    TKI.DB.............. >6FDE :     
    TKI.DC.............. >6FE0 :     
    TKI.DD.............. >6FE2 :     
    TKI.DE.............. >6FE4 :     
    TKI.DF.............. >6FE6 :     
    TKI.E0.............. >6FE8 :     
    TKI.E1.............. >6FEA :     
    TKI.E2.............. >6FEC :     
    TKI.E3.............. >6FEE :     
    TKI.E4.............. >6FF0 :     
    TKI.E5.............. >6FF2 :     
    TKI.E6.............. >6FF4 :     
    TKI.E7.............. >6FF6 :     
    TKI.E8.............. >6FF8 :     
    TKI.E9.............. >6FFA :     
    TKI.EA.............. >6FFC :     
    TKI.EB.............. >6FFE :     
    TKI.EC.............. >7000 :     
    TKI.ED.............. >7002 :     
    TKI.EE.............. >7004 :     
    TKI.EF.............. >7006 :     
    TKI.F0.............. >7008 :     
    TKI.F1.............. >700A :     
    TKI.F2.............. >700C :     
    TKI.F3.............. >700E :     
    TKI.F4.............. >7010 :     
    TKI.F5.............. >7012 :     
    TKI.F6.............. >7014 :     
    TKI.F7.............. >7016 :     
    TKI.F8.............. >7018 :     
    TKI.F9.............. >701A :     
    TKI.FA.............. >701C :     
    TKI.FB.............. >701E :     
    TKI.FC.............. >7020 :     
    TKI.FD.............. >7022 :     
    TKI.FE.............. >7024 :     
    TKI.FF.............. >7026 :     
    TMDAT............... >2E6E :     
    TMGR................ >2DD2 :     
    TMGR1............... >2DD6 :     
    TMGR10.............. >2E56 :     
    TMGR11.............. >2E64 :     
    TMGR12.............. >2E68 :     
    TMGR1A.............. >2DE4 :     
    TMGR2............... >2DEA :     
    TMGR3............... >2DFA :     
    TMGR4............... >2E0C :     
    TMGR5............... >2E22 :     
    TMGR6............... >2E26 :     
    TMGR7............... >2E2A :     
    TMGR8............... >2E2C :     
    TMGR9............... >2E34 :     
    TMP0................ >0004 :     
    TMP006.............. >23F0 :     
    TMP007.............. >24E6 :     
    TMP008.............. >24C4 :     
    TMP011.............. >2548 :     
    TMP0HB.............. >8308 :     
    TMP0LB.............. >8309 :     
    TMP1................ >0005 :     
    TMP1HB.............. >830A :     
    TMP1LB.............. >830B :     
    TMP2................ >0006 :     
    TMP2HB.............. >830C :     
    TMP2LB.............. >830D :     
    TMP3................ >0007 :     
    TMP3HB.............. >830E :     
    TMP3LB.............. >830F :     
    TMP4................ >0008 :     
    TMP4HB.............. >8310 :     
    TMP4LB.............. >8311 :     
    TRIMNUM............. >2A0C :     
    TRIMNUM_FILL........ >2A2A :     
    TRIMNUM_SCAN........ >2A18 :     
    TRIMNUM_SETLEN...... >2A24 :     
    TRMPVECTOR.......... >A032 :     
    TV.1TIMEONLY........ >00FE :     
    TV.BUSYCOLOR........ >A21C :     
    TV.CLIP.FNAME....... >DE50 :     
    TV.CMDB.HCOLOR...... >A220 :     
    TV.COLOR............ >A218 :     
    TV.COLORIZE.RESET... >9900 :     
    TV.COLORSCHEME...... >A212 :     
    TV.COLORSCHEME.ENTRIES >000A :     
    TV.COLORSCHEME.TABLE >3694 :     
    TV.CURCOLOR......... >A216 :     
    TV.CURSHAPE......... >A214 :     
    TV.ERROR.MSG........ >A230 :     
    TV.ERROR.ROWS....... >A22A :     
    TV.ERROR.VISIBLE.... >A228 :     
    TV.FJ.STACKPNT...... >A226 :     
    TV.FREE............. >A2D0 :     
    TV.INIT............. >3286 :     
    TV.INIT.EXIT........ >32C2 :     
    TV.MARKCOLOR........ >A21A :     
    TV.PAD.STRING....... >3330 :     
    TV.PAD.STRING.EXIT.. >339C :     
    TV.PAD.STRING.LOOP.. >3386 :     
    TV.PAD.STRING.PANIC. >3394 :     
    TV.PANE.FOCUS....... >A222 :     
    TV.PRINTER.FNAME.... >DE00 :     
    TV.QUIT............. >32CC :     
    TV.RESET............ >32DA :     
    TV.RESET.EXIT....... >3300 :     
    TV.RULER.VISIBLE.... >A210 :     
    TV.RULERCOLOR....... >A21E :     
    TV.SAMS.2000........ >A200 :     
    TV.SAMS.3000........ >A202 :     
    TV.SAMS.A000........ >A204 :     
    TV.SAMS.B000........ >A206 :     
    TV.SAMS.C000........ >A208 :     
    TV.SAMS.D000........ >A20A :     
    TV.SAMS.E000........ >A20C :     
    TV.SAMS.F000........ >A20E :     
    TV.SP2.CONF......... >A22C :     
    TV.SP2.STACK........ >A22E :     
    TV.TABS.TABLE....... >36E4 :     
    TV.TASK.ONESHOT..... >A224 :     
    TV.TOP.............. >A200 :     
    TV.UNPACK.UINT16.... >3304 :     
    TV.UNPACK.UINT16.EXIT >332A :     
    TX4024.............. >2209 :     
    TX8024.............. >2213 :     
    TXT.ALPHA.DOWN...... >39F0 :     
    TXT.AUTOINS.OFF..... >3872 :     
    TXT.AUTOINS.ON...... >3863 :     
    TXT.AUTOINSERT...... >3716 :     
    TXT.BLOCK.CLIP...... >3795 :     
    TXT.BLOCK.COPY...... >3759 :     
    TXT.BLOCK.DEL....... >3746 :     
    TXT.BLOCK.INSIDE.... >3A98 :     
    TXT.BLOCK.MOVE...... >376B :     
    TXT.BLOCK.PRINT..... >37AE :     
    TXT.BLOCK.SAVE...... >377C :     
    TXT.BOTTOM.......... >3706 :     
    TXT.CLEARMEM........ >37C1 :     
    TXT.CMDB.PROMPT..... >3AC6 :     
    TXT.COLORSCHEME..... >3AC8 :     
    TXT.DELIM........... >3704 :     
    TXT.DONE.APPEND..... >37F5 :     
    TXT.DONE.CLIPBOARD.. >3845 :     
    TXT.DONE.CLIPDEV.... >3855 :     
    TXT.DONE.COPY....... >3815 :     
    TXT.DONE.DELETE..... >3834 :     
    TXT.DONE.INSERT..... >37E4 :     
    TXT.DONE.LOAD....... >37D5 :     
    TXT.DONE.PRINT...... >3824 :     
    TXT.DONE.SAVE....... >3806 :     
    TXT.FASTMODE........ >3882 :     
    TXT.FILETYPE.DV80... >3901 :     
    TXT.FILETYPE.NONE... >3A01 :     
    TXT.INSERT.......... >3711 :     
    TXT.IO.NOFILE....... >3A53 :     
    TXT.IOERR.LOAD...... >3A0C :     
    TXT.IOERR.PRINT..... >3A37 :     
    TXT.IOERR.SAVE...... >3A22 :     
    TXT.KB.............. >38A7 :     
    TXT.KEYMARKER....... >39F6 :     
    TXT.KEYS.BASIC1..... >3972 :     
    TXT.KEYS.BLOCK...... >393B :     
    TXT.KEYS.DEFAULT.... >390E :     
    TXT.KEYS.DEFAULTB... >391F :     
    TXT.LINES........... >38AA :     
    TXT.LOADING......... >371D :     
    TXT.M1.............. >3906 :     
    TXT.M2.............. >390A :     
    TXT.MEMFULL.LOAD.... >3A6A :     
    TXT.NEWFILE......... >38B0 :     
    TXT.OVRWRITE........ >370C :     
    TXT.PRINTING........ >3733 :     
    TXT.RULER........... >399F :     
    TXT.SAVING.......... >3728 :     
    TXT.STAR............ >371B :     
    TXT.TIB1............ >38BB :     
    TXT.TIB2............ >38C9 :     
    TXT.TIB3............ >38D7 :     
    TXT.TIB4............ >38E5 :     
    TXT.TIB5............ >38F3 :     
    TXT.UNCRUNCHING..... >388B :     
    TXT.VERTLINE........ >39F4 :     
    TXT.WS1............. >39F8 :     
    TXT.WS2............. >39FA :     
    TXT.WS3............. >39FD :     
    TXT.WS4............. >3A01 :     
    TXT.WS5............. >3A06 :     
    UNPACKED.STRING..... >A02C :     
    UP.................. >26E2 :     
    VDP.CMDB.TOPROW.TAT. >1FD0 :     
    VDP.FB.TOPROW.SIT... >0050 :     
    VDP.FB.TOPROW.TAT... >1850 :     
    VDP.SIT.BASE........ >0000 :     
    VDP.SIT.SIZE........ >0960 :     
    VDP.TAT.BASE........ >1800 :     
    VDPA................ >8C02 :     
    VDPLA1.............. >286E :     
    VDPLA2.............. >2874 :     
    VDPLA3.............. >2884 :     
    VDPLAY.............. >2856 :     
    VDPR................ >8800 :     
    VDPR0............... >831C :     
    VDPR01.............. >000E :     
    VDPR1............... >831D :     
    VDPRW............... >000F :     
    VDPS................ >8802 :     
    VDPW................ >8C00 :     
    VDRA................ >22C8 :     
    VDWA................ >22C4 :     
    VEC.1............... >7FC0 :     
    VEC.10.............. >7FD2 :     
    VEC.11.............. >7FD4 :     
    VEC.12.............. >7FD6 :     
    VEC.13.............. >7FD8 :     
    VEC.14.............. >7FDA :     
    VEC.15.............. >7FDC :     
    VEC.16.............. >7FDE :     
    VEC.17.............. >7FE0 :     
    VEC.18.............. >7FE2 :     
    VEC.19.............. >7FE4 :     
    VEC.2............... >7FC2 :     
    VEC.20.............. >7FE6 :     
    VEC.21.............. >7FE8 :     
    VEC.22.............. >7FEA :     
    VEC.23.............. >7FEC :     
    VEC.24.............. >7FEE :     
    VEC.25.............. >7FF0 :     
    VEC.26.............. >7FF2 :     
    VEC.27.............. >7FF4 :     
    VEC.28.............. >7FF6 :     
    VEC.29.............. >7FF8 :     
    VEC.3............... >7FC4 :     
    VEC.30.............. >7FFA :     
    VEC.31.............. >7FFC :     
    VEC.32.............. >7FFE :     
    VEC.4............... >7FC6 :     
    VEC.5............... >7FC8 :     
    VEC.6............... >7FCA :     
    VEC.7............... >7FCC :     
    VEC.8............... >7FCE :     
    VEC.9............... >7FD0 :     
    VGETB............... >22F0 :     
    VIDTA1.............. >2322 :     
    VIDTAB.............. >2306 :     
    VPUTB............... >22D6 :     
    WAUX1............... >833C :     
    WAUX2............... >833E :     
    WAUX3............... >8340 :     
    WBASE............... >8328 :     
    WBIT0............... >2020 :     
    WBIT1............... >201E :     
    WBIT10.............. >200C :     
    WBIT11.............. >200A :     
    WBIT12.............. >2008 :     
    WBIT13.............. >2006 :     
    WBIT14.............. >2004 :     
    WBIT15.............. >2002 :     
    WBIT2............... >201C :     
    WBIT3............... >201A :     
    WBIT4............... >2018 :     
    WBIT5............... >2016 :     
    WBIT6............... >2014 :     
    WBIT7............... >2012 :     
    WBIT8............... >2010 :     
    WBIT9............... >200E :     
    WCOLMN.............. >833A :     
    WS1................. >8300 :     
    WSDLST.............. >8334 :     
    WSDTMP.............. >8336 :     
    WSPEAK.............. >8338 :     
    WTITAB.............. >832C :     
    WTITMP.............. >8330 :     
    WTIUSR.............. >832E :     
    WVRTKB.............. >8332 :     
    WYX................. >832A :     
    XCONFIG............. >0003 :     
    XCPU.SCRPAD.PGIN.... >2B86 :     
    XCPU.SCRPAD.PGOUT... >2B58 :     
    XFILE.CLOSE......... >2D40 :     
    XFILE.OPEN.......... >2D1E :     
    XFILM............... >224A :     
    XFILV............... >22A2 :     
    XIDTAB.............. >2308 :     
    XLSLOT.............. >2EBA :     
    XPYM2M.............. >24EE :     
    XPYM2V.............. >249A :     
    XPYV2M.............. >24CC :     
    XROM.FARJUMP........ >2F9E :     
    XSAMS.LAYOUT........ >25FE :     
    XSAMS.PAGE.GET...... >254C :     
    XSAMS.PAGE.SET...... >2584 :     
    XSETX............... >26EC :     
    XSTRING.GETLENC..... >2AC2 :     
    XSTRING.LTRIM....... >2A58 :     
    XUTST0.............. >242E :     
    XUTSTR.............. >2430 :     
    XVGETB.............. >22F2 :     
    XVPUTB.............. >22DA :     
    YX2PI1.............. >2724 :     
    YX2PI2.............. >272A :     
    YX2PI3.............. >2734 :     
    YX2PNT.............. >2408 :     
    YX2PX............... >26F6 :     
    YX2PXX.............. >26FA :     
    YX2PXX_C80.......... >2736 :     
    YX2PXX_NORMAL....... >271A :     
    YX2PXX_Y_CALC....... >271E :     
    _FILE.RECORD.FOP.... >2D7C :     
    _FILE.RECORD.FOP.EXIT >2DCE :     
    _FILE.RECORD.FOP.OPTIMIZED >2DB2 :     
    _FILE.RECORD.FOP.PAB >2DB6 :     
    _IDX.ENTRY.DELETE.REORG >3446 :     
    _IDX.ENTRY.DELETE.REORG.LOOP >344E :     
    _IDX.ENTRY.INSERT.REORG >34BA :     
    _IDX.ENTRY.INSERT.REORG.CRASH >34C0 :     
    _IDX.ENTRY.INSERT.REORG.LOOP >34E8 :     
    _IDX.SAMS.MAPCOLUMN.OFF >3146 :     
    _IDX.SAMS.MAPCOLUMN.OFF.EXIT >3174 :     
    _IDX.SAMS.MAPCOLUMN.ON >3112 :     
    _IDX.SAMS.MAPCOLUMN.ON.EXIT >313C :     
    _IDX.SAMSPAGE.GET... >3180 :     
    _IDX.SAMSPAGE.GET.EXIT >31C6 :     
    _MEM.SAMS.SET.BANKS. >60A2 :     
    _V2SAMS............. >664C :     
    _V2SAMS.EXIT........ >667C :     
